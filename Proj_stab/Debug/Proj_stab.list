
Proj_stab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a94  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000020c  08007c1c  08007c1c  00017c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e28  08007e28  0002160c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e28  08007e28  00017e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e30  08007e30  0002160c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e30  08007e30  00017e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e34  08007e34  00017e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000160c  20000000  08007e38  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e58  20001610  08009444  00021610  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002468  08009444  00022468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002160c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b9b1  00000000  00000000  0002163c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ff8  00000000  00000000  0004cfed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002198  00000000  00000000  0004ffe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002078  00000000  00000000  00052180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a3c1  00000000  00000000  000541f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000dd7c  00000000  00000000  0006e5b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000a3  00000000  00000000  0007c335  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000091c0  00000000  00000000  0007c3d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20001610 	.word	0x20001610
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007c04 	.word	0x08007c04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20001614 	.word	0x20001614
 80001c4:	08007c04 	.word	0x08007c04

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Fusion_datas_init>:





void Fusion_datas_init(void){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	/* Dynamic Inclinometer API initialization function */
	MotionDI_Initialize(&freq);
 80004d0:	4817      	ldr	r0, [pc, #92]	; (8000530 <Fusion_datas_init+0x64>)
 80004d2:	f006 ffa9 	bl	8007428 <MotionDI_Initialize>
	/* Optional: Get version */
	MotionDI_GetLibVersion(lib_version);
 80004d6:	4817      	ldr	r0, [pc, #92]	; (8000534 <Fusion_datas_init+0x68>)
 80004d8:	f007 fb42 	bl	8007b60 <MotionDI_GetLibVersion>

	/* Optional: Modify knobs settings & set the knobs */
	MotionDI_getKnobs(ipKnobs);
 80004dc:	4b16      	ldr	r3, [pc, #88]	; (8000538 <Fusion_datas_init+0x6c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4618      	mov	r0, r3
 80004e2:	f007 faf1 	bl	8007ac8 <MotionDI_getKnobs>

	ipKnobs->AccKnob.CalType = MDI_CAL_CONTINUOUS;
 80004e6:	4b14      	ldr	r3, [pc, #80]	; (8000538 <Fusion_datas_init+0x6c>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	2202      	movs	r2, #2
 80004ec:	711a      	strb	r2, [r3, #4]
	ipKnobs->GyrKnob.CalType = MDI_CAL_CONTINUOUS;
 80004ee:	4b12      	ldr	r3, [pc, #72]	; (8000538 <Fusion_datas_init+0x6c>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2202      	movs	r2, #2
 80004f4:	771a      	strb	r2, [r3, #28]

	BSP_SENSOR_ACC_GetOrientation(ipKnobs->AccOrientation);
 80004f6:	4b10      	ldr	r3, [pc, #64]	; (8000538 <Fusion_datas_init+0x6c>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	332c      	adds	r3, #44	; 0x2c
 80004fc:	4618      	mov	r0, r3
 80004fe:	f001 fe26 	bl	800214e <BSP_SENSOR_ACC_GetOrientation>
	BSP_SENSOR_GYR_GetOrientation(ipKnobs->GyroOrientation);
 8000502:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <Fusion_datas_init+0x6c>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	3330      	adds	r3, #48	; 0x30
 8000508:	4618      	mov	r0, r3
 800050a:	f001 fe35 	bl	8002178 <BSP_SENSOR_GYR_GetOrientation>

	ipKnobs->SFKnob.output_type = MDI_ENGINE_OUTPUT_ENU;
 800050e:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <Fusion_datas_init+0x6c>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	2201      	movs	r2, #1
 8000514:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	ipKnobs->SFKnob.modx = DECIMATION;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <Fusion_datas_init+0x6c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2201      	movs	r2, #1
 800051e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	MotionDI_setKnobs(ipKnobs);
 8000522:	4b05      	ldr	r3, [pc, #20]	; (8000538 <Fusion_datas_init+0x6c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f007 fac4 	bl	8007ab4 <MotionDI_setKnobs>


}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}
 8000530:	200011c0 	.word	0x200011c0
 8000534:	20001d20 	.word	0x20001d20
 8000538:	200011c4 	.word	0x200011c4

0800053c <DRV_Init>:
#include "drv8311.h"
#include "pwm_driver.h"



void DRV_Init(void){
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af02      	add	r7, sp, #8
	//Init CS pin should default high
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8000542:	2201      	movs	r2, #1
 8000544:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000548:	48c3      	ldr	r0, [pc, #780]	; (8000858 <DRV_Init+0x31c>)
 800054a:	f002 fc45 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(nSleep_GPIO_Port, nSleep_Pin, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000558:	f002 fc3e 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800055c:	2001      	movs	r0, #1
 800055e:	f002 f943 	bl	80027e8 <HAL_Delay>

	//Set PWM freq (reset = 0x0000 )
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 8000562:	4bbe      	ldr	r3, [pc, #760]	; (800085c <DRV_Init+0x320>)
 8000564:	2200      	movs	r2, #0
 8000566:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_PERIOD <<3);  	//reg adr + cmd
 8000568:	4bbc      	ldr	r3, [pc, #752]	; (800085c <DRV_Init+0x320>)
 800056a:	22c0      	movs	r2, #192	; 0xc0
 800056c:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 800056e:	4bbb      	ldr	r3, [pc, #748]	; (800085c <DRV_Init+0x320>)
 8000570:	2200      	movs	r2, #0
 8000572:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0xFF;									//data (si read osf)
 8000574:	4bb9      	ldr	r3, [pc, #740]	; (800085c <DRV_Init+0x320>)
 8000576:	22ff      	movs	r2, #255	; 0xff
 8000578:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000580:	48b5      	ldr	r0, [pc, #724]	; (8000858 <DRV_Init+0x31c>)
 8000582:	f002 fc29 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8000586:	f04f 33ff 	mov.w	r3, #4294967295
 800058a:	9300      	str	r3, [sp, #0]
 800058c:	2304      	movs	r3, #4
 800058e:	4ab4      	ldr	r2, [pc, #720]	; (8000860 <DRV_Init+0x324>)
 8000590:	49b2      	ldr	r1, [pc, #712]	; (800085c <DRV_Init+0x320>)
 8000592:	48b4      	ldr	r0, [pc, #720]	; (8000864 <DRV_Init+0x328>)
 8000594:	f004 fde5 	bl	8005162 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8000598:	2201      	movs	r2, #1
 800059a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800059e:	48ae      	ldr	r0, [pc, #696]	; (8000858 <DRV_Init+0x31c>)
 80005a0:	f002 fc1a 	bl	8002dd8 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 80005a4:	4bad      	ldr	r3, [pc, #692]	; (800085c <DRV_Init+0x320>)
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_PERIOD <<3);  	//reg adr + cmd
 80005aa:	4bac      	ldr	r3, [pc, #688]	; (800085c <DRV_Init+0x320>)
 80005ac:	22c0      	movs	r2, #192	; 0xc0
 80005ae:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80005b0:	4baa      	ldr	r3, [pc, #680]	; (800085c <DRV_Init+0x320>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 80005b6:	4ba9      	ldr	r3, [pc, #676]	; (800085c <DRV_Init+0x320>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005c2:	48a5      	ldr	r0, [pc, #660]	; (8000858 <DRV_Init+0x31c>)
 80005c4:	f002 fc08 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2304      	movs	r3, #4
 80005d0:	4aa3      	ldr	r2, [pc, #652]	; (8000860 <DRV_Init+0x324>)
 80005d2:	49a2      	ldr	r1, [pc, #648]	; (800085c <DRV_Init+0x320>)
 80005d4:	48a3      	ldr	r0, [pc, #652]	; (8000864 <DRV_Init+0x328>)
 80005d6:	f004 fdc4 	bl	8005162 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80005da:	2201      	movs	r2, #1
 80005dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005e0:	489d      	ldr	r0, [pc, #628]	; (8000858 <DRV_Init+0x31c>)
 80005e2:	f002 fbf9 	bl	8002dd8 <HAL_GPIO_WritePin>

	//Set PWM duty_cycle A   (reset = 0x0000 )
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 80005e6:	4b9d      	ldr	r3, [pc, #628]	; (800085c <DRV_Init+0x320>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_A_DUTY <<3);  	//reg adr + cmd
 80005ec:	4b9b      	ldr	r3, [pc, #620]	; (800085c <DRV_Init+0x320>)
 80005ee:	22c8      	movs	r2, #200	; 0xc8
 80005f0:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80005f2:	4b9a      	ldr	r3, [pc, #616]	; (800085c <DRV_Init+0x320>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 80005f8:	4b98      	ldr	r3, [pc, #608]	; (800085c <DRV_Init+0x320>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000604:	4894      	ldr	r0, [pc, #592]	; (8000858 <DRV_Init+0x31c>)
 8000606:	f002 fbe7 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 800060a:	f04f 33ff 	mov.w	r3, #4294967295
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2304      	movs	r3, #4
 8000612:	4a93      	ldr	r2, [pc, #588]	; (8000860 <DRV_Init+0x324>)
 8000614:	4991      	ldr	r1, [pc, #580]	; (800085c <DRV_Init+0x320>)
 8000616:	4893      	ldr	r0, [pc, #588]	; (8000864 <DRV_Init+0x328>)
 8000618:	f004 fda3 	bl	8005162 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 800061c:	2201      	movs	r2, #1
 800061e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000622:	488d      	ldr	r0, [pc, #564]	; (8000858 <DRV_Init+0x31c>)
 8000624:	f002 fbd8 	bl	8002dd8 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 8000628:	4b8c      	ldr	r3, [pc, #560]	; (800085c <DRV_Init+0x320>)
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_A_DUTY <<3);  	//reg adr + cmd
 800062e:	4b8b      	ldr	r3, [pc, #556]	; (800085c <DRV_Init+0x320>)
 8000630:	22c8      	movs	r2, #200	; 0xc8
 8000632:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 8000634:	4b89      	ldr	r3, [pc, #548]	; (800085c <DRV_Init+0x320>)
 8000636:	2200      	movs	r2, #0
 8000638:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 800063a:	4b88      	ldr	r3, [pc, #544]	; (800085c <DRV_Init+0x320>)
 800063c:	2200      	movs	r2, #0
 800063e:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000646:	4884      	ldr	r0, [pc, #528]	; (8000858 <DRV_Init+0x31c>)
 8000648:	f002 fbc6 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 800064c:	f04f 33ff 	mov.w	r3, #4294967295
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	2304      	movs	r3, #4
 8000654:	4a82      	ldr	r2, [pc, #520]	; (8000860 <DRV_Init+0x324>)
 8000656:	4981      	ldr	r1, [pc, #516]	; (800085c <DRV_Init+0x320>)
 8000658:	4882      	ldr	r0, [pc, #520]	; (8000864 <DRV_Init+0x328>)
 800065a:	f004 fd82 	bl	8005162 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000664:	487c      	ldr	r0, [pc, #496]	; (8000858 <DRV_Init+0x31c>)
 8000666:	f002 fbb7 	bl	8002dd8 <HAL_GPIO_WritePin>

	//Set PWM duty_cycle B  (reset = 0x0000 )
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 800066a:	4b7c      	ldr	r3, [pc, #496]	; (800085c <DRV_Init+0x320>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_B_DUTY <<3);  	//reg adr + cmd
 8000670:	4b7a      	ldr	r3, [pc, #488]	; (800085c <DRV_Init+0x320>)
 8000672:	22d0      	movs	r2, #208	; 0xd0
 8000674:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 8000676:	4b79      	ldr	r3, [pc, #484]	; (800085c <DRV_Init+0x320>)
 8000678:	2200      	movs	r2, #0
 800067a:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 800067c:	4b77      	ldr	r3, [pc, #476]	; (800085c <DRV_Init+0x320>)
 800067e:	2200      	movs	r2, #0
 8000680:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000688:	4873      	ldr	r0, [pc, #460]	; (8000858 <DRV_Init+0x31c>)
 800068a:	f002 fba5 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 800068e:	f04f 33ff 	mov.w	r3, #4294967295
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2304      	movs	r3, #4
 8000696:	4a72      	ldr	r2, [pc, #456]	; (8000860 <DRV_Init+0x324>)
 8000698:	4970      	ldr	r1, [pc, #448]	; (800085c <DRV_Init+0x320>)
 800069a:	4872      	ldr	r0, [pc, #456]	; (8000864 <DRV_Init+0x328>)
 800069c:	f004 fd61 	bl	8005162 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80006a0:	2201      	movs	r2, #1
 80006a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a6:	486c      	ldr	r0, [pc, #432]	; (8000858 <DRV_Init+0x31c>)
 80006a8:	f002 fb96 	bl	8002dd8 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 80006ac:	4b6b      	ldr	r3, [pc, #428]	; (800085c <DRV_Init+0x320>)
 80006ae:	2280      	movs	r2, #128	; 0x80
 80006b0:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_B_DUTY <<3);  	//reg adr + cmd
 80006b2:	4b6a      	ldr	r3, [pc, #424]	; (800085c <DRV_Init+0x320>)
 80006b4:	22d0      	movs	r2, #208	; 0xd0
 80006b6:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80006b8:	4b68      	ldr	r3, [pc, #416]	; (800085c <DRV_Init+0x320>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 80006be:	4b67      	ldr	r3, [pc, #412]	; (800085c <DRV_Init+0x320>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ca:	4863      	ldr	r0, [pc, #396]	; (8000858 <DRV_Init+0x31c>)
 80006cc:	f002 fb84 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80006d0:	f04f 33ff 	mov.w	r3, #4294967295
 80006d4:	9300      	str	r3, [sp, #0]
 80006d6:	2304      	movs	r3, #4
 80006d8:	4a61      	ldr	r2, [pc, #388]	; (8000860 <DRV_Init+0x324>)
 80006da:	4960      	ldr	r1, [pc, #384]	; (800085c <DRV_Init+0x320>)
 80006dc:	4861      	ldr	r0, [pc, #388]	; (8000864 <DRV_Init+0x328>)
 80006de:	f004 fd40 	bl	8005162 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006e8:	485b      	ldr	r0, [pc, #364]	; (8000858 <DRV_Init+0x31c>)
 80006ea:	f002 fb75 	bl	8002dd8 <HAL_GPIO_WritePin>

	//Set PWM duty_cycle C (reset = 0x0000 )
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00 ;               					//cmd
 80006ee:	4b5b      	ldr	r3, [pc, #364]	; (800085c <DRV_Init+0x320>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_C_DUTY <<3);  	//reg adr + cmd
 80006f4:	4b59      	ldr	r3, [pc, #356]	; (800085c <DRV_Init+0x320>)
 80006f6:	22d8      	movs	r2, #216	; 0xd8
 80006f8:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80006fa:	4b58      	ldr	r3, [pc, #352]	; (800085c <DRV_Init+0x320>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8000700:	4b56      	ldr	r3, [pc, #344]	; (800085c <DRV_Init+0x320>)
 8000702:	2200      	movs	r2, #0
 8000704:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800070c:	4852      	ldr	r0, [pc, #328]	; (8000858 <DRV_Init+0x31c>)
 800070e:	f002 fb63 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8000712:	f04f 33ff 	mov.w	r3, #4294967295
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2304      	movs	r3, #4
 800071a:	4a51      	ldr	r2, [pc, #324]	; (8000860 <DRV_Init+0x324>)
 800071c:	494f      	ldr	r1, [pc, #316]	; (800085c <DRV_Init+0x320>)
 800071e:	4851      	ldr	r0, [pc, #324]	; (8000864 <DRV_Init+0x328>)
 8000720:	f004 fd1f 	bl	8005162 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8000724:	2201      	movs	r2, #1
 8000726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800072a:	484b      	ldr	r0, [pc, #300]	; (8000858 <DRV_Init+0x31c>)
 800072c:	f002 fb54 	bl	8002dd8 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 8000730:	4b4a      	ldr	r3, [pc, #296]	; (800085c <DRV_Init+0x320>)
 8000732:	2280      	movs	r2, #128	; 0x80
 8000734:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_C_DUTY <<3);  	//reg adr + cmd
 8000736:	4b49      	ldr	r3, [pc, #292]	; (800085c <DRV_Init+0x320>)
 8000738:	22d8      	movs	r2, #216	; 0xd8
 800073a:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 800073c:	4b47      	ldr	r3, [pc, #284]	; (800085c <DRV_Init+0x320>)
 800073e:	2200      	movs	r2, #0
 8000740:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8000742:	4b46      	ldr	r3, [pc, #280]	; (800085c <DRV_Init+0x320>)
 8000744:	2200      	movs	r2, #0
 8000746:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800074e:	4842      	ldr	r0, [pc, #264]	; (8000858 <DRV_Init+0x31c>)
 8000750:	f002 fb42 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8000754:	f04f 33ff 	mov.w	r3, #4294967295
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2304      	movs	r3, #4
 800075c:	4a40      	ldr	r2, [pc, #256]	; (8000860 <DRV_Init+0x324>)
 800075e:	493f      	ldr	r1, [pc, #252]	; (800085c <DRV_Init+0x320>)
 8000760:	4840      	ldr	r0, [pc, #256]	; (8000864 <DRV_Init+0x328>)
 8000762:	f004 fcfe 	bl	8005162 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800076c:	483a      	ldr	r0, [pc, #232]	; (8000858 <DRV_Init+0x31c>)
 800076e:	f002 fb33 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_Delay(1);*/


	//counter mode
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 8000772:	4b3a      	ldr	r3, [pc, #232]	; (800085c <DRV_Init+0x320>)
 8000774:	2200      	movs	r2, #0
 8000776:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_CTRL <<3);  	//reg adr + cmd
 8000778:	4b38      	ldr	r3, [pc, #224]	; (800085c <DRV_Init+0x320>)
 800077a:	22e8      	movs	r2, #232	; 0xe8
 800077c:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00 | (0x01);						//data (si read osf)
 800077e:	4b37      	ldr	r3, [pc, #220]	; (800085c <DRV_Init+0x320>)
 8000780:	2201      	movs	r2, #1
 8000782:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8000784:	4b35      	ldr	r3, [pc, #212]	; (800085c <DRV_Init+0x320>)
 8000786:	2200      	movs	r2, #0
 8000788:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000790:	4831      	ldr	r0, [pc, #196]	; (8000858 <DRV_Init+0x31c>)
 8000792:	f002 fb21 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8000796:	f04f 33ff 	mov.w	r3, #4294967295
 800079a:	9300      	str	r3, [sp, #0]
 800079c:	2304      	movs	r3, #4
 800079e:	4a30      	ldr	r2, [pc, #192]	; (8000860 <DRV_Init+0x324>)
 80007a0:	492e      	ldr	r1, [pc, #184]	; (800085c <DRV_Init+0x320>)
 80007a2:	4830      	ldr	r0, [pc, #192]	; (8000864 <DRV_Init+0x328>)
 80007a4:	f004 fcdd 	bl	8005162 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007ae:	482a      	ldr	r0, [pc, #168]	; (8000858 <DRV_Init+0x31c>)
 80007b0:	f002 fb12 	bl	8002dd8 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 80007b4:	4b29      	ldr	r3, [pc, #164]	; (800085c <DRV_Init+0x320>)
 80007b6:	2280      	movs	r2, #128	; 0x80
 80007b8:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_CTRL <<3);  	//reg adr + cmd
 80007ba:	4b28      	ldr	r3, [pc, #160]	; (800085c <DRV_Init+0x320>)
 80007bc:	22e8      	movs	r2, #232	; 0xe8
 80007be:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80007c0:	4b26      	ldr	r3, [pc, #152]	; (800085c <DRV_Init+0x320>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 80007c6:	4b25      	ldr	r3, [pc, #148]	; (800085c <DRV_Init+0x320>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007d2:	4821      	ldr	r0, [pc, #132]	; (8000858 <DRV_Init+0x31c>)
 80007d4:	f002 fb00 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80007d8:	f04f 33ff 	mov.w	r3, #4294967295
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2304      	movs	r3, #4
 80007e0:	4a1f      	ldr	r2, [pc, #124]	; (8000860 <DRV_Init+0x324>)
 80007e2:	491e      	ldr	r1, [pc, #120]	; (800085c <DRV_Init+0x320>)
 80007e4:	481f      	ldr	r0, [pc, #124]	; (8000864 <DRV_Init+0x328>)
 80007e6:	f004 fcbc 	bl	8005162 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f0:	4819      	ldr	r0, [pc, #100]	; (8000858 <DRV_Init+0x31c>)
 80007f2:	f002 faf1 	bl	8002dd8 <HAL_GPIO_WritePin>

	//pwm state
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 80007f6:	4b19      	ldr	r3, [pc, #100]	; (800085c <DRV_Init+0x320>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWM_STATE <<3);  	//reg adr + cmd
 80007fc:	4b17      	ldr	r3, [pc, #92]	; (800085c <DRV_Init+0x320>)
 80007fe:	22e0      	movs	r2, #224	; 0xe0
 8000800:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x07;						//data (si read osf)
 8000802:	4b16      	ldr	r3, [pc, #88]	; (800085c <DRV_Init+0x320>)
 8000804:	2207      	movs	r2, #7
 8000806:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x77;									//data (si read osf)
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <DRV_Init+0x320>)
 800080a:	2277      	movs	r2, #119	; 0x77
 800080c:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000814:	4810      	ldr	r0, [pc, #64]	; (8000858 <DRV_Init+0x31c>)
 8000816:	f002 fadf 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2304      	movs	r3, #4
 8000822:	4a0f      	ldr	r2, [pc, #60]	; (8000860 <DRV_Init+0x324>)
 8000824:	490d      	ldr	r1, [pc, #52]	; (800085c <DRV_Init+0x320>)
 8000826:	480f      	ldr	r0, [pc, #60]	; (8000864 <DRV_Init+0x328>)
 8000828:	f004 fc9b 	bl	8005162 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 800082c:	2201      	movs	r2, #1
 800082e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000832:	4809      	ldr	r0, [pc, #36]	; (8000858 <DRV_Init+0x31c>)
 8000834:	f002 fad0 	bl	8002dd8 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <DRV_Init+0x320>)
 800083a:	2280      	movs	r2, #128	; 0x80
 800083c:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWM_STATE <<3);  	//reg adr + cmd
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <DRV_Init+0x320>)
 8000840:	22e0      	movs	r2, #224	; 0xe0
 8000842:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <DRV_Init+0x320>)
 8000846:	2200      	movs	r2, #0
 8000848:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 800084a:	4b04      	ldr	r3, [pc, #16]	; (800085c <DRV_Init+0x320>)
 800084c:	2200      	movs	r2, #0
 800084e:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000856:	e007      	b.n	8000868 <DRV_Init+0x32c>
 8000858:	48000400 	.word	0x48000400
 800085c:	20001fac 	.word	0x20001fac
 8000860:	20001fc0 	.word	0x20001fc0
 8000864:	20001e2c 	.word	0x20001e2c
 8000868:	482b      	ldr	r0, [pc, #172]	; (8000918 <DRV_Init+0x3dc>)
 800086a:	f002 fab5 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 800086e:	f04f 33ff 	mov.w	r3, #4294967295
 8000872:	9300      	str	r3, [sp, #0]
 8000874:	2304      	movs	r3, #4
 8000876:	4a29      	ldr	r2, [pc, #164]	; (800091c <DRV_Init+0x3e0>)
 8000878:	4929      	ldr	r1, [pc, #164]	; (8000920 <DRV_Init+0x3e4>)
 800087a:	482a      	ldr	r0, [pc, #168]	; (8000924 <DRV_Init+0x3e8>)
 800087c:	f004 fc71 	bl	8005162 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000886:	4824      	ldr	r0, [pc, #144]	; (8000918 <DRV_Init+0x3dc>)
 8000888:	f002 faa6 	bl	8002dd8 <HAL_GPIO_WritePin>


	//Enable PWM Generation  (reset = 0x0000 ) + synchro
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 800088c:	4b24      	ldr	r3, [pc, #144]	; (8000920 <DRV_Init+0x3e4>)
 800088e:	2200      	movs	r2, #0
 8000890:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_CTRL <<3);  	//reg adr + cmd
 8000892:	4b23      	ldr	r3, [pc, #140]	; (8000920 <DRV_Init+0x3e4>)
 8000894:	22e8      	movs	r2, #232	; 0xe8
 8000896:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00 | (0x01<<2);						//data (si read osf)
 8000898:	4b21      	ldr	r3, [pc, #132]	; (8000920 <DRV_Init+0x3e4>)
 800089a:	2204      	movs	r2, #4
 800089c:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00 | (0x05<<5);									//data (si read osf)
 800089e:	4b20      	ldr	r3, [pc, #128]	; (8000920 <DRV_Init+0x3e4>)
 80008a0:	22a0      	movs	r2, #160	; 0xa0
 80008a2:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008aa:	481b      	ldr	r0, [pc, #108]	; (8000918 <DRV_Init+0x3dc>)
 80008ac:	f002 fa94 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80008b0:	f04f 33ff 	mov.w	r3, #4294967295
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	2304      	movs	r3, #4
 80008b8:	4a18      	ldr	r2, [pc, #96]	; (800091c <DRV_Init+0x3e0>)
 80008ba:	4919      	ldr	r1, [pc, #100]	; (8000920 <DRV_Init+0x3e4>)
 80008bc:	4819      	ldr	r0, [pc, #100]	; (8000924 <DRV_Init+0x3e8>)
 80008be:	f004 fc50 	bl	8005162 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c8:	4813      	ldr	r0, [pc, #76]	; (8000918 <DRV_Init+0x3dc>)
 80008ca:	f002 fa85 	bl	8002dd8 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <DRV_Init+0x3e4>)
 80008d0:	2280      	movs	r2, #128	; 0x80
 80008d2:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_CTRL <<3);  	//reg adr + cmd
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <DRV_Init+0x3e4>)
 80008d6:	22e8      	movs	r2, #232	; 0xe8
 80008d8:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <DRV_Init+0x3e4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <DRV_Init+0x3e4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80008e6:	2200      	movs	r2, #0
 80008e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008ec:	480a      	ldr	r0, [pc, #40]	; (8000918 <DRV_Init+0x3dc>)
 80008ee:	f002 fa73 	bl	8002dd8 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80008f2:	f04f 33ff 	mov.w	r3, #4294967295
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	2304      	movs	r3, #4
 80008fa:	4a08      	ldr	r2, [pc, #32]	; (800091c <DRV_Init+0x3e0>)
 80008fc:	4908      	ldr	r1, [pc, #32]	; (8000920 <DRV_Init+0x3e4>)
 80008fe:	4809      	ldr	r0, [pc, #36]	; (8000924 <DRV_Init+0x3e8>)
 8000900:	f004 fc2f 	bl	8005162 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8000904:	2201      	movs	r2, #1
 8000906:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800090a:	4803      	ldr	r0, [pc, #12]	; (8000918 <DRV_Init+0x3dc>)
 800090c:	f002 fa64 	bl	8002dd8 <HAL_GPIO_WritePin>

}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	48000400 	.word	0x48000400
 800091c:	20001fc0 	.word	0x20001fc0
 8000920:	20001fac 	.word	0x20001fac
 8000924:	20001e2c 	.word	0x20001e2c

08000928 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
 8000930:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d103      	bne.n	8000944 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	e04d      	b.n	80009e0 <LSM6DSO_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000944:	683b      	ldr	r3, [r7, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	685a      	ldr	r2, [r3, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	689a      	ldr	r2, [r3, #8]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	7b1a      	ldrb	r2, [r3, #12]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	691a      	ldr	r2, [r3, #16]
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	695a      	ldr	r2, [r3, #20]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	699a      	ldr	r2, [r3, #24]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	4a1b      	ldr	r2, [pc, #108]	; (80009ec <LSM6DSO_RegisterBusIO+0xc4>)
 8000980:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a1a      	ldr	r2, [pc, #104]	; (80009f0 <LSM6DSO_RegisterBusIO+0xc8>)
 8000986:	61da      	str	r2, [r3, #28]

    //MODIFIED
    pObj->Ctx.handle   = pObj;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	687a      	ldr	r2, [r7, #4]
 800098c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d103      	bne.n	800099e <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 8000996:	f04f 33ff 	mov.w	r3, #4294967295
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	e020      	b.n	80009e0 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4798      	blx	r3
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d003      	beq.n	80009b2 <LSM6DSO_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO_ERROR;
 80009aa:	f04f 33ff 	mov.w	r3, #4294967295
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	e016      	b.n	80009e0 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d112      	bne.n	80009e0 <LSM6DSO_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d10d      	bne.n	80009e0 <LSM6DSO_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80009c4:	230c      	movs	r3, #12
 80009c6:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 80009c8:	7afb      	ldrb	r3, [r7, #11]
 80009ca:	461a      	mov	r2, r3
 80009cc:	2112      	movs	r1, #18
 80009ce:	6878      	ldr	r0, [r7, #4]
 80009d0:	f000 fac4 	bl	8000f5c <LSM6DSO_Write_Reg>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d002      	beq.n	80009e0 <LSM6DSO_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO_ERROR;
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
 80009de:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80009e0:	68fb      	ldr	r3, [r7, #12]
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	08000f93 	.word	0x08000f93
 80009f0:	08000fc9 	.word	0x08000fc9

080009f4 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	331c      	adds	r3, #28
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 f85e 	bl	8001ac4 <lsm6dso_i3c_disable_set>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d002      	beq.n	8000a14 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 8000a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a12:	e060      	b.n	8000ad6 <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	331c      	adds	r3, #28
 8000a18:	2101      	movs	r1, #1
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 f82c 	bl	8001a78 <lsm6dso_auto_increment_set>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d002      	beq.n	8000a2c <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	e054      	b.n	8000ad6 <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	331c      	adds	r3, #28
 8000a30:	2101      	movs	r1, #1
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 ff3e 	bl	80018b4 <lsm6dso_block_data_update_set>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d002      	beq.n	8000a44 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a42:	e048      	b.n	8000ad6 <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	331c      	adds	r3, #28
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 f880 	bl	8001b50 <lsm6dso_fifo_mode_set>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d002      	beq.n	8000a5c <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5a:	e03c      	b.n	8000ad6 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2204      	movs	r2, #4
 8000a60:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	331c      	adds	r3, #28
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f000 fbf8 	bl	8001260 <lsm6dso_xl_data_rate_set>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d002      	beq.n	8000a7c <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 8000a76:	f04f 33ff 	mov.w	r3, #4294967295
 8000a7a:	e02c      	b.n	8000ad6 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	331c      	adds	r3, #28
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 fb8e 	bl	80011a4 <lsm6dso_xl_full_scale_set>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a92:	e020      	b.n	8000ad6 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2204      	movs	r2, #4
 8000a98:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	331c      	adds	r3, #28
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f000 fda8 	bl	80015f8 <lsm6dso_gy_data_rate_set>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d002      	beq.n	8000ab4 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	e010      	b.n	8000ad6 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	331c      	adds	r3, #28
 8000ab8:	2106      	movs	r1, #6
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fd34 	bl	8001528 <lsm6dso_gy_full_scale_set>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d002      	beq.n	8000acc <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	e004      	b.n	8000ad6 <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f000 f872 	bl	8000bd0 <LSM6DSO_ACC_Disable>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d002      	beq.n	8000af8 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295
 8000af6:	e015      	b.n	8000b24 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f000 f95a 	bl	8000db2 <LSM6DSO_GYRO_Disable>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d002      	beq.n	8000b0a <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8000b04:	f04f 33ff 	mov.w	r3, #4294967295
 8000b08:	e00c      	b.n	8000b24 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	2201      	movs	r2, #1
 8000b3a:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	2200      	movs	r2, #0
 8000b46:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b54:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	2210      	movs	r2, #16
 8000b5a:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8000b5c:	683b      	ldr	r3, [r7, #0]
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	4a07      	ldr	r2, [pc, #28]	; (8000b84 <LSM6DSO_GetCapabilities+0x58>)
 8000b66:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	4a06      	ldr	r2, [pc, #24]	; (8000b84 <LSM6DSO_GetCapabilities+0x58>)
 8000b6c:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	f04f 0200 	mov.w	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8000b76:	2300      	movs	r3, #0
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	45d02000 	.word	0x45d02000

08000b88 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d101      	bne.n	8000b9e <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e014      	b.n	8000bc8 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f103 021c 	add.w	r2, r3, #28
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000baa:	4619      	mov	r1, r3
 8000bac:	4610      	mov	r0, r2
 8000bae:	f000 fb57 	bl	8001260 <lsm6dso_xl_data_rate_set>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d002      	beq.n	8000bbe <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8000bb8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bbc:	e004      	b.n	8000bc8 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8000bc6:	2300      	movs	r3, #0
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d101      	bne.n	8000be6 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8000be2:	2300      	movs	r3, #0
 8000be4:	e01f      	b.n	8000c26 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f103 021c 	add.w	r2, r3, #28
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	332b      	adds	r3, #43	; 0x2b
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	4610      	mov	r0, r2
 8000bf4:	f000 fc30 	bl	8001458 <lsm6dso_xl_data_rate_get>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d002      	beq.n	8000c04 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8000bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000c02:	e010      	b.n	8000c26 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	331c      	adds	r3, #28
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 fb28 	bl	8001260 <lsm6dso_xl_data_rate_set>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d002      	beq.n	8000c1c <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	e004      	b.n	8000c26 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	331c      	adds	r3, #28
 8000c42:	f107 020b 	add.w	r2, r7, #11
 8000c46:	4611      	mov	r1, r2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 fad1 	bl	80011f0 <lsm6dso_xl_full_scale_get>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d002      	beq.n	8000c5a <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8000c54:	f04f 33ff 	mov.w	r3, #4294967295
 8000c58:	e023      	b.n	8000ca2 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8000c5a:	7afb      	ldrb	r3, [r7, #11]
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	d81b      	bhi.n	8000c98 <LSM6DSO_ACC_GetSensitivity+0x68>
 8000c60:	a201      	add	r2, pc, #4	; (adr r2, 8000c68 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8000c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c66:	bf00      	nop
 8000c68:	08000c79 	.word	0x08000c79
 8000c6c:	08000c91 	.word	0x08000c91
 8000c70:	08000c81 	.word	0x08000c81
 8000c74:	08000c89 	.word	0x08000c89
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	4a0c      	ldr	r2, [pc, #48]	; (8000cac <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8000c7c:	601a      	str	r2, [r3, #0]
      break;
 8000c7e:	e00f      	b.n	8000ca0 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	4a0b      	ldr	r2, [pc, #44]	; (8000cb0 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8000c84:	601a      	str	r2, [r3, #0]
      break;
 8000c86:	e00b      	b.n	8000ca0 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8000c8c:	601a      	str	r2, [r3, #0]
      break;
 8000c8e:	e007      	b.n	8000ca0 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	4a09      	ldr	r2, [pc, #36]	; (8000cb8 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8000c94:	601a      	str	r2, [r3, #0]
      break;
 8000c96:	e003      	b.n	8000ca0 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8000c98:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9c:	60fb      	str	r3, [r7, #12]
      break;
 8000c9e:	bf00      	nop
  }

  return ret;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	3d79db23 	.word	0x3d79db23
 8000cb0:	3df9db23 	.word	0x3df9db23
 8000cb4:	3e79db23 	.word	0x3e79db23
 8000cb8:	3ef9db23 	.word	0x3ef9db23

08000cbc <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8000cc6:	f04f 0300 	mov.w	r3, #0
 8000cca:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	331c      	adds	r3, #28
 8000cd0:	f107 0210 	add.w	r2, r7, #16
 8000cd4:	4611      	mov	r1, r2
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 fe5d 	bl	8001996 <lsm6dso_acceleration_raw_get>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d002      	beq.n	8000ce8 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	e03c      	b.n	8000d62 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8000ce8:	f107 030c 	add.w	r3, r7, #12
 8000cec:	4619      	mov	r1, r3
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff ff9e 	bl	8000c30 <LSM6DSO_ACC_GetSensitivity>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d002      	beq.n	8000d00 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8000cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000cfe:	e030      	b.n	8000d62 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8000d00:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000d04:	ee07 3a90 	vmov	s15, r3
 8000d08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d18:	ee17 2a90 	vmov	r2, s15
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8000d20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000d24:	ee07 3a90 	vmov	s15, r3
 8000d28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d38:	ee17 2a90 	vmov	r2, s15
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8000d40:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000d44:	ee07 3a90 	vmov	s15, r3
 8000d48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000d4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d58:	ee17 2a90 	vmov	r2, s15
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d101      	bne.n	8000d80 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	e014      	b.n	8000daa <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f103 021c 	add.w	r2, r3, #28
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4610      	mov	r0, r2
 8000d90:	f000 fc32 	bl	80015f8 <lsm6dso_gy_data_rate_set>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d002      	beq.n	8000da0 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d9e:	e004      	b.n	8000daa <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2201      	movs	r2, #1
 8000da4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d101      	bne.n	8000dc8 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e01f      	b.n	8000e08 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f103 021c 	add.w	r2, r3, #28
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	332c      	adds	r3, #44	; 0x2c
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	f000 fd0b 	bl	80017f0 <lsm6dso_gy_data_rate_get>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8000de0:	f04f 33ff 	mov.w	r3, #4294967295
 8000de4:	e010      	b.n	8000e08 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	331c      	adds	r3, #28
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f000 fc03 	bl	80015f8 <lsm6dso_gy_data_rate_set>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d002      	beq.n	8000dfe <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8000df8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfc:	e004      	b.n	8000e08 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}

08000e10 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	331c      	adds	r3, #28
 8000e22:	f107 020b 	add.w	r2, r7, #11
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 fba3 	bl	8001574 <lsm6dso_gy_full_scale_get>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d002      	beq.n	8000e3a <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8000e34:	f04f 33ff 	mov.w	r3, #4294967295
 8000e38:	e02d      	b.n	8000e96 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8000e3a:	7afb      	ldrb	r3, [r7, #11]
 8000e3c:	2b06      	cmp	r3, #6
 8000e3e:	d825      	bhi.n	8000e8c <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8000e40:	a201      	add	r2, pc, #4	; (adr r2, 8000e48 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8000e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e46:	bf00      	nop
 8000e48:	08000e6d 	.word	0x08000e6d
 8000e4c:	08000e65 	.word	0x08000e65
 8000e50:	08000e75 	.word	0x08000e75
 8000e54:	08000e8d 	.word	0x08000e8d
 8000e58:	08000e7d 	.word	0x08000e7d
 8000e5c:	08000e8d 	.word	0x08000e8d
 8000e60:	08000e85 	.word	0x08000e85
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8000e68:	601a      	str	r2, [r3, #0]
      break;
 8000e6a:	e013      	b.n	8000e94 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8000e70:	601a      	str	r2, [r3, #0]
      break;
 8000e72:	e00f      	b.n	8000e94 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	4a0c      	ldr	r2, [pc, #48]	; (8000ea8 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8000e78:	601a      	str	r2, [r3, #0]
      break;
 8000e7a:	e00b      	b.n	8000e94 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	4a0b      	ldr	r2, [pc, #44]	; (8000eac <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8000e80:	601a      	str	r2, [r3, #0]
      break;
 8000e82:	e007      	b.n	8000e94 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8000e88:	601a      	str	r2, [r3, #0]
      break;
 8000e8a:	e003      	b.n	8000e94 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8000e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e90:	60fb      	str	r3, [r7, #12]
      break;
 8000e92:	bf00      	nop
  }

  return ret;
 8000e94:	68fb      	ldr	r3, [r7, #12]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	408c0000 	.word	0x408c0000
 8000ea4:	410c0000 	.word	0x410c0000
 8000ea8:	418c0000 	.word	0x418c0000
 8000eac:	420c0000 	.word	0x420c0000
 8000eb0:	428c0000 	.word	0x428c0000

08000eb4 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	331c      	adds	r3, #28
 8000ec2:	f107 0210 	add.w	r2, r7, #16
 8000ec6:	4611      	mov	r1, r2
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f000 fd19 	bl	8001900 <lsm6dso_angular_rate_raw_get>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d002      	beq.n	8000eda <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8000ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed8:	e03c      	b.n	8000f54 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8000eda:	f107 030c 	add.w	r3, r7, #12
 8000ede:	4619      	mov	r1, r3
 8000ee0:	6878      	ldr	r0, [r7, #4]
 8000ee2:	f7ff ff95 	bl	8000e10 <LSM6DSO_GYRO_GetSensitivity>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d002      	beq.n	8000ef2 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef0:	e030      	b.n	8000f54 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8000ef2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000ef6:	ee07 3a90 	vmov	s15, r3
 8000efa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000efe:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f0a:	ee17 2a90 	vmov	r2, s15
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8000f12:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f16:	ee07 3a90 	vmov	s15, r3
 8000f1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f2a:	ee17 2a90 	vmov	r2, s15
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8000f32:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f36:	ee07 3a90 	vmov	s15, r3
 8000f3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f4a:	ee17 2a90 	vmov	r2, s15
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	70fb      	strb	r3, [r7, #3]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f103 001c 	add.w	r0, r3, #28
 8000f72:	1cba      	adds	r2, r7, #2
 8000f74:	78f9      	ldrb	r1, [r7, #3]
 8000f76:	2301      	movs	r3, #1
 8000f78:	f000 f8fc 	bl	8001174 <lsm6dso_write_reg>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	e000      	b.n	8000f8a <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8000f92:	b590      	push	{r4, r7, lr}
 8000f94:	b087      	sub	sp, #28
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	607a      	str	r2, [r7, #4]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	72fb      	strb	r3, [r7, #11]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	813b      	strh	r3, [r7, #8]
	LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	617b      	str	r3, [r7, #20]
	return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	695c      	ldr	r4, [r3, #20]
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	7b1b      	ldrb	r3, [r3, #12]
 8000fb2:	b298      	uxth	r0, r3
 8000fb4:	7afb      	ldrb	r3, [r7, #11]
 8000fb6:	b299      	uxth	r1, r3
 8000fb8:	893b      	ldrh	r3, [r7, #8]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	47a0      	blx	r4
 8000fbe:	4603      	mov	r3, r0
	//MODIFIED
	//HAL_I2C_Mem_Read(Handle, LSM6DSO_I2C_ADD_L, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 1000);
	//return 0;
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	371c      	adds	r7, #28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd90      	pop	{r4, r7, pc}

08000fc8 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b087      	sub	sp, #28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	72fb      	strb	r3, [r7, #11]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	813b      	strh	r3, [r7, #8]
	LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	617b      	str	r3, [r7, #20]
	return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	691c      	ldr	r4, [r3, #16]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	7b1b      	ldrb	r3, [r3, #12]
 8000fe8:	b298      	uxth	r0, r3
 8000fea:	7afb      	ldrb	r3, [r7, #11]
 8000fec:	b299      	uxth	r1, r3
 8000fee:	893b      	ldrh	r3, [r7, #8]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	47a0      	blx	r4
 8000ff4:	4603      	mov	r3, r0
	//MODIFIED
	//HAL_I2C_Mem_Read(Handle, LSM6DSO_I2C_ADD_L, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 1000);
	//return 0;
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	371c      	adds	r7, #28
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd90      	pop	{r4, r7, pc}
	...

08001000 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af04      	add	r7, sp, #16
 8001006:	60ba      	str	r2, [r7, #8]
 8001008:	461a      	mov	r2, r3
 800100a:	4603      	mov	r3, r0
 800100c:	81fb      	strh	r3, [r7, #14]
 800100e:	460b      	mov	r3, r1
 8001010:	81bb      	strh	r3, [r7, #12]
 8001012:	4613      	mov	r3, r2
 8001014:	80fb      	strh	r3, [r7, #6]
  HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 1000);
 8001016:	89ba      	ldrh	r2, [r7, #12]
 8001018:	89f9      	ldrh	r1, [r7, #14]
 800101a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	9301      	str	r3, [sp, #4]
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	9300      	str	r3, [sp, #0]
 8001028:	2301      	movs	r3, #1
 800102a:	4804      	ldr	r0, [pc, #16]	; (800103c <BSP_I2C1_ReadReg+0x3c>)
 800102c:	f002 f890 	bl	8003150 <HAL_I2C_Mem_Read>

  return 0;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20001de0 	.word	0x20001de0

08001040 <BSP_I2C1_WriteReg>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af04      	add	r7, sp, #16
 8001046:	60ba      	str	r2, [r7, #8]
 8001048:	461a      	mov	r2, r3
 800104a:	4603      	mov	r3, r0
 800104c:	81fb      	strh	r3, [r7, #14]
 800104e:	460b      	mov	r3, r1
 8001050:	81bb      	strh	r3, [r7, #12]
 8001052:	4613      	mov	r3, r2
 8001054:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, 1000);
 8001056:	89ba      	ldrh	r2, [r7, #12]
 8001058:	89f9      	ldrh	r1, [r7, #14]
 800105a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	88fb      	ldrh	r3, [r7, #6]
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2301      	movs	r3, #1
 800106a:	4804      	ldr	r0, [pc, #16]	; (800107c <BSP_I2C1_WriteReg+0x3c>)
 800106c:	f001 ff5c 	bl	8002f28 <HAL_I2C_Mem_Write>
	return 0;
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20001de0 	.word	0x20001de0

08001080 <INIT_IMU>:





void INIT_IMU(void){
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	//IMU------------------------------------------------
	  /* Configure the accelero driver */
	  IO_IMU.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8001084:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <INIT_IMU+0x48>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
	  IO_IMU.Address     = LSM6DSO_I2C_ADD_H;
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <INIT_IMU+0x48>)
 800108c:	22d7      	movs	r2, #215	; 0xd7
 800108e:	731a      	strb	r2, [r3, #12]
	  IO_IMU.Init        = LSM6DSO_Init;
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <INIT_IMU+0x48>)
 8001092:	4a0e      	ldr	r2, [pc, #56]	; (80010cc <INIT_IMU+0x4c>)
 8001094:	601a      	str	r2, [r3, #0]
	  IO_IMU.DeInit      = LSM6DSO_DeInit;
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <INIT_IMU+0x48>)
 8001098:	4a0d      	ldr	r2, [pc, #52]	; (80010d0 <INIT_IMU+0x50>)
 800109a:	605a      	str	r2, [r3, #4]
	  IO_IMU.ReadReg     = IMU_BSP_I2C1_ReadReg;
 800109c:	4b0a      	ldr	r3, [pc, #40]	; (80010c8 <INIT_IMU+0x48>)
 800109e:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <INIT_IMU+0x54>)
 80010a0:	615a      	str	r2, [r3, #20]
	  IO_IMU.WriteReg    = IMU_BSP_I2C1_WriteReg;
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <INIT_IMU+0x48>)
 80010a4:	4a0c      	ldr	r2, [pc, #48]	; (80010d8 <INIT_IMU+0x58>)
 80010a6:	611a      	str	r2, [r3, #16]
	  LSM6DSO_RegisterBusIO(&IMU, &IO_IMU);
 80010a8:	4907      	ldr	r1, [pc, #28]	; (80010c8 <INIT_IMU+0x48>)
 80010aa:	480c      	ldr	r0, [pc, #48]	; (80010dc <INIT_IMU+0x5c>)
 80010ac:	f7ff fc3c 	bl	8000928 <LSM6DSO_RegisterBusIO>

	  LSM6DSO_GetCapabilities(&IMU, &capabilities_IMU);
 80010b0:	490b      	ldr	r1, [pc, #44]	; (80010e0 <INIT_IMU+0x60>)
 80010b2:	480a      	ldr	r0, [pc, #40]	; (80010dc <INIT_IMU+0x5c>)
 80010b4:	f7ff fd3a 	bl	8000b2c <LSM6DSO_GetCapabilities>

	  LSM6DSO_ACC_Enable(&IMU);
 80010b8:	4808      	ldr	r0, [pc, #32]	; (80010dc <INIT_IMU+0x5c>)
 80010ba:	f7ff fd65 	bl	8000b88 <LSM6DSO_ACC_Enable>
	  LSM6DSO_GYRO_Enable(&IMU);
 80010be:	4807      	ldr	r0, [pc, #28]	; (80010dc <INIT_IMU+0x5c>)
 80010c0:	f7ff fe53 	bl	8000d6a <LSM6DSO_GYRO_Enable>
}
 80010c4:	bf00      	nop
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	20001da8 	.word	0x20001da8
 80010cc:	080009f5 	.word	0x080009f5
 80010d0:	08000adf 	.word	0x08000adf
 80010d4:	08001001 	.word	0x08001001
 80010d8:	08001041 	.word	0x08001041
 80010dc:	20001d78 	.word	0x20001d78
 80010e0:	20001dc4 	.word	0x20001dc4

080010e4 <Get_AXIS_GYRO__IMU>:



LSM6DSO_Axes_t Get_AXIS_GYRO__IMU(void){
 80010e4:	b590      	push	{r4, r7, lr}
 80010e6:	b087      	sub	sp, #28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	LSM6DSO_Axes_t gyro_IMU;
	LSM6DSO_GYRO_GetAxes(&IMU, &gyro_IMU);
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	4619      	mov	r1, r3
 80010f2:	4807      	ldr	r0, [pc, #28]	; (8001110 <Get_AXIS_GYRO__IMU+0x2c>)
 80010f4:	f7ff fede 	bl	8000eb4 <LSM6DSO_GYRO_GetAxes>
	return gyro_IMU;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	461c      	mov	r4, r3
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001104:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	371c      	adds	r7, #28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd90      	pop	{r4, r7, pc}
 8001110:	20001d78 	.word	0x20001d78

08001114 <Get_AXIS_ACC__IMU>:

LSM6DSO_Axes_t Get_AXIS_ACC__IMU(void){
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b087      	sub	sp, #28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	LSM6DSO_Axes_t acc_IMU;
	LSM6DSO_ACC_GetAxes(&IMU, &acc_IMU);
 800111c:	f107 030c 	add.w	r3, r7, #12
 8001120:	4619      	mov	r1, r3
 8001122:	4807      	ldr	r0, [pc, #28]	; (8001140 <Get_AXIS_ACC__IMU+0x2c>)
 8001124:	f7ff fdca 	bl	8000cbc <LSM6DSO_ACC_GetAxes>
	return acc_IMU;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	461c      	mov	r4, r3
 800112c:	f107 030c 	add.w	r3, r7, #12
 8001130:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001134:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	371c      	adds	r7, #28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd90      	pop	{r4, r7, pc}
 8001140:	20001d78 	.word	0x20001d78

08001144 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001144:	b590      	push	{r4, r7, lr}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	461a      	mov	r2, r3
 8001150:	460b      	mov	r3, r1
 8001152:	72fb      	strb	r3, [r7, #11]
 8001154:	4613      	mov	r3, r2
 8001156:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	685c      	ldr	r4, [r3, #4]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6898      	ldr	r0, [r3, #8]
 8001160:	893b      	ldrh	r3, [r7, #8]
 8001162:	7af9      	ldrb	r1, [r7, #11]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	47a0      	blx	r4
 8001168:	6178      	str	r0, [r7, #20]

  return ret;
 800116a:	697b      	ldr	r3, [r7, #20]
}
 800116c:	4618      	mov	r0, r3
 800116e:	371c      	adds	r7, #28
 8001170:	46bd      	mov	sp, r7
 8001172:	bd90      	pop	{r4, r7, pc}

08001174 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001174:	b590      	push	{r4, r7, lr}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	461a      	mov	r2, r3
 8001180:	460b      	mov	r3, r1
 8001182:	72fb      	strb	r3, [r7, #11]
 8001184:	4613      	mov	r3, r2
 8001186:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681c      	ldr	r4, [r3, #0]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	6898      	ldr	r0, [r3, #8]
 8001190:	893b      	ldrh	r3, [r7, #8]
 8001192:	7af9      	ldrb	r1, [r7, #11]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	47a0      	blx	r4
 8001198:	6178      	str	r0, [r7, #20]

  return ret;
 800119a:	697b      	ldr	r3, [r7, #20]
}
 800119c:	4618      	mov	r0, r3
 800119e:	371c      	adds	r7, #28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd90      	pop	{r4, r7, pc}

080011a4 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	460b      	mov	r3, r1
 80011ae:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80011b0:	f107 0208 	add.w	r2, r7, #8
 80011b4:	2301      	movs	r3, #1
 80011b6:	2110      	movs	r1, #16
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ffc3 	bl	8001144 <lsm6dso_read_reg>
 80011be:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d10f      	bne.n	80011e6 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	7a3b      	ldrb	r3, [r7, #8]
 80011d0:	f362 0383 	bfi	r3, r2, #2, #2
 80011d4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80011d6:	f107 0208 	add.w	r2, r7, #8
 80011da:	2301      	movs	r3, #1
 80011dc:	2110      	movs	r1, #16
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffc8 	bl	8001174 <lsm6dso_write_reg>
 80011e4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80011fa:	f107 0208 	add.w	r2, r7, #8
 80011fe:	2301      	movs	r3, #1
 8001200:	2110      	movs	r1, #16
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff ff9e 	bl	8001144 <lsm6dso_read_reg>
 8001208:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 800120a:	7a3b      	ldrb	r3, [r7, #8]
 800120c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b03      	cmp	r3, #3
 8001214:	d81a      	bhi.n	800124c <lsm6dso_xl_full_scale_get+0x5c>
 8001216:	a201      	add	r2, pc, #4	; (adr r2, 800121c <lsm6dso_xl_full_scale_get+0x2c>)
 8001218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121c:	0800122d 	.word	0x0800122d
 8001220:	08001235 	.word	0x08001235
 8001224:	0800123d 	.word	0x0800123d
 8001228:	08001245 	.word	0x08001245
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
      break;
 8001232:	e00f      	b.n	8001254 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	2201      	movs	r2, #1
 8001238:	701a      	strb	r2, [r3, #0]
      break;
 800123a:	e00b      	b.n	8001254 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	2202      	movs	r2, #2
 8001240:	701a      	strb	r2, [r3, #0]
      break;
 8001242:	e007      	b.n	8001254 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	2203      	movs	r2, #3
 8001248:	701a      	strb	r2, [r3, #0]
      break;
 800124a:	e003      	b.n	8001254 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]
      break;
 8001252:	bf00      	nop
  }

  return ret;
 8001254:	68fb      	ldr	r3, [r7, #12]
}
 8001256:	4618      	mov	r0, r3
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop

08001260 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	460b      	mov	r3, r1
 800126a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8001270:	f107 030c 	add.w	r3, r7, #12
 8001274:	4619      	mov	r1, r3
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f000 fc90 	bl	8001b9c <lsm6dso_fsm_enable_get>
 800127c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	2b00      	cmp	r3, #0
 8001282:	f040 80c4 	bne.w	800140e <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001286:	7b3b      	ldrb	r3, [r7, #12]
 8001288:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800128c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800128e:	7b3b      	ldrb	r3, [r7, #12]
 8001290:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001294:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001296:	4313      	orrs	r3, r2
 8001298:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800129a:	7b3b      	ldrb	r3, [r7, #12]
 800129c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80012a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80012a2:	4313      	orrs	r3, r2
 80012a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80012a6:	7b3b      	ldrb	r3, [r7, #12]
 80012a8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80012ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80012ae:	4313      	orrs	r3, r2
 80012b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80012b2:	7b3b      	ldrb	r3, [r7, #12]
 80012b4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80012b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80012ba:	4313      	orrs	r3, r2
 80012bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80012be:	7b3b      	ldrb	r3, [r7, #12]
 80012c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80012c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80012c6:	4313      	orrs	r3, r2
 80012c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80012ca:	7b3b      	ldrb	r3, [r7, #12]
 80012cc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80012d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80012d2:	4313      	orrs	r3, r2
 80012d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80012d6:	7b3b      	ldrb	r3, [r7, #12]
 80012d8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80012dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80012de:	4313      	orrs	r3, r2
 80012e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80012e2:	7b7b      	ldrb	r3, [r7, #13]
 80012e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80012e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80012ea:	4313      	orrs	r3, r2
 80012ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80012ee:	7b7b      	ldrb	r3, [r7, #13]
 80012f0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80012f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80012fa:	7b7b      	ldrb	r3, [r7, #13]
 80012fc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001300:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001302:	4313      	orrs	r3, r2
 8001304:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001306:	7b7b      	ldrb	r3, [r7, #13]
 8001308:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800130c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800130e:	4313      	orrs	r3, r2
 8001310:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001312:	7b7b      	ldrb	r3, [r7, #13]
 8001314:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001318:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800131a:	4313      	orrs	r3, r2
 800131c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800131e:	7b7b      	ldrb	r3, [r7, #13]
 8001320:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001324:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8001326:	4313      	orrs	r3, r2
 8001328:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800132a:	7b7b      	ldrb	r3, [r7, #13]
 800132c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001330:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8001332:	4313      	orrs	r3, r2
 8001334:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8001336:	7b7b      	ldrb	r3, [r7, #13]
 8001338:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800133c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800133e:	4313      	orrs	r3, r2
 8001340:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001342:	2b01      	cmp	r3, #1
 8001344:	d163      	bne.n	800140e <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8001346:	f107 030b 	add.w	r3, r7, #11
 800134a:	4619      	mov	r1, r3
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 fc47 	bl	8001be0 <lsm6dso_fsm_data_rate_get>
 8001352:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d159      	bne.n	800140e <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800135a:	7afb      	ldrb	r3, [r7, #11]
 800135c:	2b03      	cmp	r3, #3
 800135e:	d853      	bhi.n	8001408 <lsm6dso_xl_data_rate_set+0x1a8>
 8001360:	a201      	add	r2, pc, #4	; (adr r2, 8001368 <lsm6dso_xl_data_rate_set+0x108>)
 8001362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001366:	bf00      	nop
 8001368:	08001379 	.word	0x08001379
 800136c:	0800138b 	.word	0x0800138b
 8001370:	080013a9 	.word	0x080013a9
 8001374:	080013d3 	.word	0x080013d3
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8001378:	78fb      	ldrb	r3, [r7, #3]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d102      	bne.n	8001384 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 800137e:	2301      	movs	r3, #1
 8001380:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001382:	e045      	b.n	8001410 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	75fb      	strb	r3, [r7, #23]
            break;
 8001388:	e042      	b.n	8001410 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 800138a:	78fb      	ldrb	r3, [r7, #3]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d102      	bne.n	8001396 <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8001390:	2302      	movs	r3, #2
 8001392:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001394:	e03c      	b.n	8001410 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8001396:	78fb      	ldrb	r3, [r7, #3]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d102      	bne.n	80013a2 <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 800139c:	2302      	movs	r3, #2
 800139e:	75fb      	strb	r3, [r7, #23]
            break;
 80013a0:	e036      	b.n	8001410 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80013a2:	78fb      	ldrb	r3, [r7, #3]
 80013a4:	75fb      	strb	r3, [r7, #23]
            break;
 80013a6:	e033      	b.n	8001410 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 80013a8:	78fb      	ldrb	r3, [r7, #3]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d102      	bne.n	80013b4 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80013ae:	2303      	movs	r3, #3
 80013b0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80013b2:	e02d      	b.n	8001410 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80013b4:	78fb      	ldrb	r3, [r7, #3]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d102      	bne.n	80013c0 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80013ba:	2303      	movs	r3, #3
 80013bc:	75fb      	strb	r3, [r7, #23]
            break;
 80013be:	e027      	b.n	8001410 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 80013c0:	78fb      	ldrb	r3, [r7, #3]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	d102      	bne.n	80013cc <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80013c6:	2303      	movs	r3, #3
 80013c8:	75fb      	strb	r3, [r7, #23]
            break;
 80013ca:	e021      	b.n	8001410 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80013cc:	78fb      	ldrb	r3, [r7, #3]
 80013ce:	75fb      	strb	r3, [r7, #23]
            break;
 80013d0:	e01e      	b.n	8001410 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 80013d2:	78fb      	ldrb	r3, [r7, #3]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80013d8:	2304      	movs	r3, #4
 80013da:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80013dc:	e018      	b.n	8001410 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d102      	bne.n	80013ea <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80013e4:	2304      	movs	r3, #4
 80013e6:	75fb      	strb	r3, [r7, #23]
            break;
 80013e8:	e012      	b.n	8001410 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 80013ea:	78fb      	ldrb	r3, [r7, #3]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d102      	bne.n	80013f6 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80013f0:	2304      	movs	r3, #4
 80013f2:	75fb      	strb	r3, [r7, #23]
            break;
 80013f4:	e00c      	b.n	8001410 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 80013f6:	78fb      	ldrb	r3, [r7, #3]
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	d102      	bne.n	8001402 <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80013fc:	2304      	movs	r3, #4
 80013fe:	75fb      	strb	r3, [r7, #23]
            break;
 8001400:	e006      	b.n	8001410 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001402:	78fb      	ldrb	r3, [r7, #3]
 8001404:	75fb      	strb	r3, [r7, #23]
            break;
 8001406:	e003      	b.n	8001410 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	75fb      	strb	r3, [r7, #23]
            break;
 800140c:	e000      	b.n	8001410 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 800140e:	bf00      	nop
    }
  }

  if (ret == 0)
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d107      	bne.n	8001426 <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8001416:	f107 0208 	add.w	r2, r7, #8
 800141a:	2301      	movs	r3, #1
 800141c:	2110      	movs	r1, #16
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff fe90 	bl	8001144 <lsm6dso_read_reg>
 8001424:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10f      	bne.n	800144c <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	f003 030f 	and.w	r3, r3, #15
 8001432:	b2da      	uxtb	r2, r3
 8001434:	7a3b      	ldrb	r3, [r7, #8]
 8001436:	f362 1307 	bfi	r3, r2, #4, #4
 800143a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800143c:	f107 0208 	add.w	r2, r7, #8
 8001440:	2301      	movs	r3, #1
 8001442:	2110      	movs	r1, #16
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f7ff fe95 	bl	8001174 <lsm6dso_write_reg>
 800144a:	6138      	str	r0, [r7, #16]
  }

  return ret;
 800144c:	693b      	ldr	r3, [r7, #16]
}
 800144e:	4618      	mov	r0, r3
 8001450:	3718      	adds	r7, #24
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop

08001458 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8001462:	f107 0208 	add.w	r2, r7, #8
 8001466:	2301      	movs	r3, #1
 8001468:	2110      	movs	r1, #16
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff fe6a 	bl	8001144 <lsm6dso_read_reg>
 8001470:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8001472:	7a3b      	ldrb	r3, [r7, #8]
 8001474:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b0b      	cmp	r3, #11
 800147c:	d84a      	bhi.n	8001514 <lsm6dso_xl_data_rate_get+0xbc>
 800147e:	a201      	add	r2, pc, #4	; (adr r2, 8001484 <lsm6dso_xl_data_rate_get+0x2c>)
 8001480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001484:	080014b5 	.word	0x080014b5
 8001488:	080014bd 	.word	0x080014bd
 800148c:	080014c5 	.word	0x080014c5
 8001490:	080014cd 	.word	0x080014cd
 8001494:	080014d5 	.word	0x080014d5
 8001498:	080014dd 	.word	0x080014dd
 800149c:	080014e5 	.word	0x080014e5
 80014a0:	080014ed 	.word	0x080014ed
 80014a4:	080014f5 	.word	0x080014f5
 80014a8:	080014fd 	.word	0x080014fd
 80014ac:	08001505 	.word	0x08001505
 80014b0:	0800150d 	.word	0x0800150d
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
      break;
 80014ba:	e02f      	b.n	800151c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
      break;
 80014c2:	e02b      	b.n	800151c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	2202      	movs	r2, #2
 80014c8:	701a      	strb	r2, [r3, #0]
      break;
 80014ca:	e027      	b.n	800151c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	2203      	movs	r2, #3
 80014d0:	701a      	strb	r2, [r3, #0]
      break;
 80014d2:	e023      	b.n	800151c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2204      	movs	r2, #4
 80014d8:	701a      	strb	r2, [r3, #0]
      break;
 80014da:	e01f      	b.n	800151c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	2205      	movs	r2, #5
 80014e0:	701a      	strb	r2, [r3, #0]
      break;
 80014e2:	e01b      	b.n	800151c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	2206      	movs	r2, #6
 80014e8:	701a      	strb	r2, [r3, #0]
      break;
 80014ea:	e017      	b.n	800151c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	2207      	movs	r2, #7
 80014f0:	701a      	strb	r2, [r3, #0]
      break;
 80014f2:	e013      	b.n	800151c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	2208      	movs	r2, #8
 80014f8:	701a      	strb	r2, [r3, #0]
      break;
 80014fa:	e00f      	b.n	800151c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	2209      	movs	r2, #9
 8001500:	701a      	strb	r2, [r3, #0]
      break;
 8001502:	e00b      	b.n	800151c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	220a      	movs	r2, #10
 8001508:	701a      	strb	r2, [r3, #0]
      break;
 800150a:	e007      	b.n	800151c <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	220b      	movs	r2, #11
 8001510:	701a      	strb	r2, [r3, #0]
      break;
 8001512:	e003      	b.n	800151c <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	2200      	movs	r2, #0
 8001518:	701a      	strb	r2, [r3, #0]
      break;
 800151a:	bf00      	nop
  }

  return ret;
 800151c:	68fb      	ldr	r3, [r7, #12]
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop

08001528 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8001534:	f107 0208 	add.w	r2, r7, #8
 8001538:	2301      	movs	r3, #1
 800153a:	2111      	movs	r1, #17
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff fe01 	bl	8001144 <lsm6dso_read_reg>
 8001542:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10f      	bne.n	800156a <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 800154a:	78fb      	ldrb	r3, [r7, #3]
 800154c:	f003 0307 	and.w	r3, r3, #7
 8001550:	b2da      	uxtb	r2, r3
 8001552:	7a3b      	ldrb	r3, [r7, #8]
 8001554:	f362 0343 	bfi	r3, r2, #1, #3
 8001558:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800155a:	f107 0208 	add.w	r2, r7, #8
 800155e:	2301      	movs	r3, #1
 8001560:	2111      	movs	r1, #17
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fe06 	bl	8001174 <lsm6dso_write_reg>
 8001568:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800157e:	f107 0208 	add.w	r2, r7, #8
 8001582:	2301      	movs	r3, #1
 8001584:	2111      	movs	r1, #17
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f7ff fddc 	bl	8001144 <lsm6dso_read_reg>
 800158c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 800158e:	7a3b      	ldrb	r3, [r7, #8]
 8001590:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b06      	cmp	r3, #6
 8001598:	d824      	bhi.n	80015e4 <lsm6dso_gy_full_scale_get+0x70>
 800159a:	a201      	add	r2, pc, #4	; (adr r2, 80015a0 <lsm6dso_gy_full_scale_get+0x2c>)
 800159c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015a0:	080015bd 	.word	0x080015bd
 80015a4:	080015c5 	.word	0x080015c5
 80015a8:	080015cd 	.word	0x080015cd
 80015ac:	080015e5 	.word	0x080015e5
 80015b0:	080015d5 	.word	0x080015d5
 80015b4:	080015e5 	.word	0x080015e5
 80015b8:	080015dd 	.word	0x080015dd
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	2200      	movs	r2, #0
 80015c0:	701a      	strb	r2, [r3, #0]
      break;
 80015c2:	e013      	b.n	80015ec <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	2201      	movs	r2, #1
 80015c8:	701a      	strb	r2, [r3, #0]
      break;
 80015ca:	e00f      	b.n	80015ec <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	2202      	movs	r2, #2
 80015d0:	701a      	strb	r2, [r3, #0]
      break;
 80015d2:	e00b      	b.n	80015ec <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	2204      	movs	r2, #4
 80015d8:	701a      	strb	r2, [r3, #0]
      break;
 80015da:	e007      	b.n	80015ec <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	2206      	movs	r2, #6
 80015e0:	701a      	strb	r2, [r3, #0]
      break;
 80015e2:	e003      	b.n	80015ec <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
      break;
 80015ea:	bf00      	nop
  }

  return ret;
 80015ec:	68fb      	ldr	r3, [r7, #12]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop

080015f8 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	4619      	mov	r1, r3
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 fac4 	bl	8001b9c <lsm6dso_fsm_enable_get>
 8001614:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	2b00      	cmp	r3, #0
 800161a:	f040 80c4 	bne.w	80017a6 <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800161e:	7b3b      	ldrb	r3, [r7, #12]
 8001620:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001624:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001626:	7b3b      	ldrb	r3, [r7, #12]
 8001628:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800162c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800162e:	4313      	orrs	r3, r2
 8001630:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001632:	7b3b      	ldrb	r3, [r7, #12]
 8001634:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001638:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800163a:	4313      	orrs	r3, r2
 800163c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800163e:	7b3b      	ldrb	r3, [r7, #12]
 8001640:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001644:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8001646:	4313      	orrs	r3, r2
 8001648:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800164a:	7b3b      	ldrb	r3, [r7, #12]
 800164c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001650:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001652:	4313      	orrs	r3, r2
 8001654:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001656:	7b3b      	ldrb	r3, [r7, #12]
 8001658:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800165c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800165e:	4313      	orrs	r3, r2
 8001660:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001662:	7b3b      	ldrb	r3, [r7, #12]
 8001664:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001668:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800166a:	4313      	orrs	r3, r2
 800166c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800166e:	7b3b      	ldrb	r3, [r7, #12]
 8001670:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001674:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001676:	4313      	orrs	r3, r2
 8001678:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800167a:	7b7b      	ldrb	r3, [r7, #13]
 800167c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001680:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001682:	4313      	orrs	r3, r2
 8001684:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001686:	7b7b      	ldrb	r3, [r7, #13]
 8001688:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800168c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800168e:	4313      	orrs	r3, r2
 8001690:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001692:	7b7b      	ldrb	r3, [r7, #13]
 8001694:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001698:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800169a:	4313      	orrs	r3, r2
 800169c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800169e:	7b7b      	ldrb	r3, [r7, #13]
 80016a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80016a4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80016a6:	4313      	orrs	r3, r2
 80016a8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80016aa:	7b7b      	ldrb	r3, [r7, #13]
 80016ac:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80016b0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80016b2:	4313      	orrs	r3, r2
 80016b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80016b6:	7b7b      	ldrb	r3, [r7, #13]
 80016b8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80016bc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80016be:	4313      	orrs	r3, r2
 80016c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80016c2:	7b7b      	ldrb	r3, [r7, #13]
 80016c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80016c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80016ca:	4313      	orrs	r3, r2
 80016cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80016ce:	7b7b      	ldrb	r3, [r7, #13]
 80016d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80016d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80016d6:	4313      	orrs	r3, r2
 80016d8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d163      	bne.n	80017a6 <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80016de:	f107 030b 	add.w	r3, r7, #11
 80016e2:	4619      	mov	r1, r3
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 fa7b 	bl	8001be0 <lsm6dso_fsm_data_rate_get>
 80016ea:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d159      	bne.n	80017a6 <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80016f2:	7afb      	ldrb	r3, [r7, #11]
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d853      	bhi.n	80017a0 <lsm6dso_gy_data_rate_set+0x1a8>
 80016f8:	a201      	add	r2, pc, #4	; (adr r2, 8001700 <lsm6dso_gy_data_rate_set+0x108>)
 80016fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016fe:	bf00      	nop
 8001700:	08001711 	.word	0x08001711
 8001704:	08001723 	.word	0x08001723
 8001708:	08001741 	.word	0x08001741
 800170c:	0800176b 	.word	0x0800176b
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 8001716:	2301      	movs	r3, #1
 8001718:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800171a:	e045      	b.n	80017a8 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800171c:	78fb      	ldrb	r3, [r7, #3]
 800171e:	75fb      	strb	r3, [r7, #23]
            break;
 8001720:	e042      	b.n	80017a8 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d102      	bne.n	800172e <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8001728:	2302      	movs	r3, #2
 800172a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800172c:	e03c      	b.n	80017a8 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 800172e:	78fb      	ldrb	r3, [r7, #3]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d102      	bne.n	800173a <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8001734:	2302      	movs	r3, #2
 8001736:	75fb      	strb	r3, [r7, #23]
            break;
 8001738:	e036      	b.n	80017a8 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800173a:	78fb      	ldrb	r3, [r7, #3]
 800173c:	75fb      	strb	r3, [r7, #23]
            break;
 800173e:	e033      	b.n	80017a8 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8001740:	78fb      	ldrb	r3, [r7, #3]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d102      	bne.n	800174c <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8001746:	2303      	movs	r3, #3
 8001748:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800174a:	e02d      	b.n	80017a8 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 800174c:	78fb      	ldrb	r3, [r7, #3]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d102      	bne.n	8001758 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8001752:	2303      	movs	r3, #3
 8001754:	75fb      	strb	r3, [r7, #23]
            break;
 8001756:	e027      	b.n	80017a8 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8001758:	78fb      	ldrb	r3, [r7, #3]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d102      	bne.n	8001764 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 800175e:	2303      	movs	r3, #3
 8001760:	75fb      	strb	r3, [r7, #23]
            break;
 8001762:	e021      	b.n	80017a8 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8001764:	78fb      	ldrb	r3, [r7, #3]
 8001766:	75fb      	strb	r3, [r7, #23]
            break;
 8001768:	e01e      	b.n	80017a8 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8001770:	2304      	movs	r3, #4
 8001772:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8001774:	e018      	b.n	80017a8 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8001776:	78fb      	ldrb	r3, [r7, #3]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d102      	bne.n	8001782 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800177c:	2304      	movs	r3, #4
 800177e:	75fb      	strb	r3, [r7, #23]
            break;
 8001780:	e012      	b.n	80017a8 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d102      	bne.n	800178e <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8001788:	2304      	movs	r3, #4
 800178a:	75fb      	strb	r3, [r7, #23]
            break;
 800178c:	e00c      	b.n	80017a8 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 800178e:	78fb      	ldrb	r3, [r7, #3]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d102      	bne.n	800179a <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8001794:	2304      	movs	r3, #4
 8001796:	75fb      	strb	r3, [r7, #23]
            break;
 8001798:	e006      	b.n	80017a8 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	75fb      	strb	r3, [r7, #23]
            break;
 800179e:	e003      	b.n	80017a8 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 80017a0:	78fb      	ldrb	r3, [r7, #3]
 80017a2:	75fb      	strb	r3, [r7, #23]
            break;
 80017a4:	e000      	b.n	80017a8 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 80017a6:	bf00      	nop
    }
  }

  if (ret == 0)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d107      	bne.n	80017be <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80017ae:	f107 0208 	add.w	r2, r7, #8
 80017b2:	2301      	movs	r3, #1
 80017b4:	2111      	movs	r1, #17
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff fcc4 	bl	8001144 <lsm6dso_read_reg>
 80017bc:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d10f      	bne.n	80017e4 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 80017c4:	7dfb      	ldrb	r3, [r7, #23]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	7a3b      	ldrb	r3, [r7, #8]
 80017ce:	f362 1307 	bfi	r3, r2, #4, #4
 80017d2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80017d4:	f107 0208 	add.w	r2, r7, #8
 80017d8:	2301      	movs	r3, #1
 80017da:	2111      	movs	r1, #17
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff fcc9 	bl	8001174 <lsm6dso_write_reg>
 80017e2:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80017e4:	693b      	ldr	r3, [r7, #16]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop

080017f0 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80017fa:	f107 0208 	add.w	r2, r7, #8
 80017fe:	2301      	movs	r3, #1
 8001800:	2111      	movs	r1, #17
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff fc9e 	bl	8001144 <lsm6dso_read_reg>
 8001808:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 800180a:	7a3b      	ldrb	r3, [r7, #8]
 800180c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b0a      	cmp	r3, #10
 8001814:	d844      	bhi.n	80018a0 <lsm6dso_gy_data_rate_get+0xb0>
 8001816:	a201      	add	r2, pc, #4	; (adr r2, 800181c <lsm6dso_gy_data_rate_get+0x2c>)
 8001818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181c:	08001849 	.word	0x08001849
 8001820:	08001851 	.word	0x08001851
 8001824:	08001859 	.word	0x08001859
 8001828:	08001861 	.word	0x08001861
 800182c:	08001869 	.word	0x08001869
 8001830:	08001871 	.word	0x08001871
 8001834:	08001879 	.word	0x08001879
 8001838:	08001881 	.word	0x08001881
 800183c:	08001889 	.word	0x08001889
 8001840:	08001891 	.word	0x08001891
 8001844:	08001899 	.word	0x08001899
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	2200      	movs	r2, #0
 800184c:	701a      	strb	r2, [r3, #0]
      break;
 800184e:	e02b      	b.n	80018a8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	2201      	movs	r2, #1
 8001854:	701a      	strb	r2, [r3, #0]
      break;
 8001856:	e027      	b.n	80018a8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	2202      	movs	r2, #2
 800185c:	701a      	strb	r2, [r3, #0]
      break;
 800185e:	e023      	b.n	80018a8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	2203      	movs	r2, #3
 8001864:	701a      	strb	r2, [r3, #0]
      break;
 8001866:	e01f      	b.n	80018a8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	2204      	movs	r2, #4
 800186c:	701a      	strb	r2, [r3, #0]
      break;
 800186e:	e01b      	b.n	80018a8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	2205      	movs	r2, #5
 8001874:	701a      	strb	r2, [r3, #0]
      break;
 8001876:	e017      	b.n	80018a8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	2206      	movs	r2, #6
 800187c:	701a      	strb	r2, [r3, #0]
      break;
 800187e:	e013      	b.n	80018a8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	2207      	movs	r2, #7
 8001884:	701a      	strb	r2, [r3, #0]
      break;
 8001886:	e00f      	b.n	80018a8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	2208      	movs	r2, #8
 800188c:	701a      	strb	r2, [r3, #0]
      break;
 800188e:	e00b      	b.n	80018a8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	2209      	movs	r2, #9
 8001894:	701a      	strb	r2, [r3, #0]
      break;
 8001896:	e007      	b.n	80018a8 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	220a      	movs	r2, #10
 800189c:	701a      	strb	r2, [r3, #0]
      break;
 800189e:	e003      	b.n	80018a8 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
      break;
 80018a6:	bf00      	nop
  }

  return ret;
 80018a8:	68fb      	ldr	r3, [r7, #12]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop

080018b4 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80018c0:	f107 0208 	add.w	r2, r7, #8
 80018c4:	2301      	movs	r3, #1
 80018c6:	2112      	movs	r1, #18
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff fc3b 	bl	8001144 <lsm6dso_read_reg>
 80018ce:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10f      	bne.n	80018f6 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	7a3b      	ldrb	r3, [r7, #8]
 80018e0:	f362 1386 	bfi	r3, r2, #6, #1
 80018e4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80018e6:	f107 0208 	add.w	r2, r7, #8
 80018ea:	2301      	movs	r3, #1
 80018ec:	2112      	movs	r1, #18
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff fc40 	bl	8001174 <lsm6dso_write_reg>
 80018f4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80018f6:	68fb      	ldr	r3, [r7, #12]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3710      	adds	r7, #16
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 800190a:	f107 020c 	add.w	r2, r7, #12
 800190e:	2306      	movs	r3, #6
 8001910:	2122      	movs	r1, #34	; 0x22
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7ff fc16 	bl	8001144 <lsm6dso_read_reg>
 8001918:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800191a:	7b7b      	ldrb	r3, [r7, #13]
 800191c:	b21a      	sxth	r2, r3
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001928:	b29b      	uxth	r3, r3
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	b29a      	uxth	r2, r3
 800192e:	7b3b      	ldrb	r3, [r7, #12]
 8001930:	b29b      	uxth	r3, r3
 8001932:	4413      	add	r3, r2
 8001934:	b29b      	uxth	r3, r3
 8001936:	b21a      	sxth	r2, r3
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	3302      	adds	r3, #2
 8001942:	b212      	sxth	r2, r2
 8001944:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	3302      	adds	r3, #2
 800194a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194e:	b29b      	uxth	r3, r3
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	b29a      	uxth	r2, r3
 8001954:	7bbb      	ldrb	r3, [r7, #14]
 8001956:	b29b      	uxth	r3, r3
 8001958:	4413      	add	r3, r2
 800195a:	b29a      	uxth	r2, r3
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	3302      	adds	r3, #2
 8001960:	b212      	sxth	r2, r2
 8001962:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8001964:	7c7a      	ldrb	r2, [r7, #17]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	3304      	adds	r3, #4
 800196a:	b212      	sxth	r2, r2
 800196c:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	3304      	adds	r3, #4
 8001972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001976:	b29b      	uxth	r3, r3
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	b29a      	uxth	r2, r3
 800197c:	7c3b      	ldrb	r3, [r7, #16]
 800197e:	b29b      	uxth	r3, r3
 8001980:	4413      	add	r3, r2
 8001982:	b29a      	uxth	r2, r3
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	3304      	adds	r3, #4
 8001988:	b212      	sxth	r2, r2
 800198a:	801a      	strh	r2, [r3, #0]

  return ret;
 800198c:	697b      	ldr	r3, [r7, #20]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80019a0:	f107 020c 	add.w	r2, r7, #12
 80019a4:	2306      	movs	r3, #6
 80019a6:	2128      	movs	r1, #40	; 0x28
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff fbcb 	bl	8001144 <lsm6dso_read_reg>
 80019ae:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80019b0:	7b7b      	ldrb	r3, [r7, #13]
 80019b2:	b21a      	sxth	r2, r3
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	7b3b      	ldrb	r3, [r7, #12]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	4413      	add	r3, r2
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	b21a      	sxth	r2, r3
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80019d2:	7bfa      	ldrb	r2, [r7, #15]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	3302      	adds	r3, #2
 80019d8:	b212      	sxth	r2, r2
 80019da:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	3302      	adds	r3, #2
 80019e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	7bbb      	ldrb	r3, [r7, #14]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	3302      	adds	r3, #2
 80019f6:	b212      	sxth	r2, r2
 80019f8:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80019fa:	7c7a      	ldrb	r2, [r7, #17]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	3304      	adds	r3, #4
 8001a00:	b212      	sxth	r2, r2
 8001a02:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	3304      	adds	r3, #4
 8001a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	021b      	lsls	r3, r3, #8
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	7c3b      	ldrb	r3, [r7, #16]
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	4413      	add	r3, r2
 8001a18:	b29a      	uxth	r2, r3
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	b212      	sxth	r2, r2
 8001a20:	801a      	strh	r2, [r3, #0]

  return ret;
 8001a22:	697b      	ldr	r3, [r7, #20]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8001a38:	f107 0208 	add.w	r2, r7, #8
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	2101      	movs	r1, #1
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff fb7f 	bl	8001144 <lsm6dso_read_reg>
 8001a46:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10f      	bne.n	8001a6e <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8001a4e:	78fb      	ldrb	r3, [r7, #3]
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	7a3b      	ldrb	r3, [r7, #8]
 8001a58:	f362 1387 	bfi	r3, r2, #6, #2
 8001a5c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8001a5e:	f107 0208 	add.w	r2, r7, #8
 8001a62:	2301      	movs	r3, #1
 8001a64:	2101      	movs	r1, #1
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f7ff fb84 	bl	8001174 <lsm6dso_write_reg>
 8001a6c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8001a84:	f107 0208 	add.w	r2, r7, #8
 8001a88:	2301      	movs	r3, #1
 8001a8a:	2112      	movs	r1, #18
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f7ff fb59 	bl	8001144 <lsm6dso_read_reg>
 8001a92:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10f      	bne.n	8001aba <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	b2da      	uxtb	r2, r3
 8001aa2:	7a3b      	ldrb	r3, [r7, #8]
 8001aa4:	f362 0382 	bfi	r3, r2, #2, #1
 8001aa8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8001aaa:	f107 0208 	add.w	r2, r7, #8
 8001aae:	2301      	movs	r3, #1
 8001ab0:	2112      	movs	r1, #18
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fb5e 	bl	8001174 <lsm6dso_write_reg>
 8001ab8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001aba:	68fb      	ldr	r3, [r7, #12]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8001ad0:	f107 020c 	add.w	r2, r7, #12
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	2118      	movs	r1, #24
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff fb33 	bl	8001144 <lsm6dso_read_reg>
 8001ade:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d111      	bne.n	8001b0a <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	09db      	lsrs	r3, r3, #7
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	f003 0301 	and.w	r3, r3, #1
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	7b3b      	ldrb	r3, [r7, #12]
 8001af4:	f362 0341 	bfi	r3, r2, #1, #1
 8001af8:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8001afa:	f107 020c 	add.w	r2, r7, #12
 8001afe:	2301      	movs	r3, #1
 8001b00:	2118      	movs	r1, #24
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f7ff fb36 	bl	8001174 <lsm6dso_write_reg>
 8001b08:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d107      	bne.n	8001b20 <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8001b10:	f107 0210 	add.w	r2, r7, #16
 8001b14:	2301      	movs	r3, #1
 8001b16:	2162      	movs	r1, #98	; 0x62
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff fb13 	bl	8001144 <lsm6dso_read_reg>
 8001b1e:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10f      	bne.n	8001b46 <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	7c3b      	ldrb	r3, [r7, #16]
 8001b30:	f362 03c4 	bfi	r3, r2, #3, #2
 8001b34:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8001b36:	f107 0210 	add.w	r2, r7, #16
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	2162      	movs	r1, #98	; 0x62
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff fb18 	bl	8001174 <lsm6dso_write_reg>
 8001b44:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8001b46:	697b      	ldr	r3, [r7, #20]
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3718      	adds	r7, #24
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8001b5c:	f107 0208 	add.w	r2, r7, #8
 8001b60:	2301      	movs	r3, #1
 8001b62:	210a      	movs	r1, #10
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff faed 	bl	8001144 <lsm6dso_read_reg>
 8001b6a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10f      	bne.n	8001b92 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8001b72:	78fb      	ldrb	r3, [r7, #3]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	7a3b      	ldrb	r3, [r7, #8]
 8001b7c:	f362 0302 	bfi	r3, r2, #0, #3
 8001b80:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8001b82:	f107 0208 	add.w	r2, r7, #8
 8001b86:	2301      	movs	r3, #1
 8001b88:	210a      	movs	r1, #10
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	f7ff faf2 	bl	8001174 <lsm6dso_write_reg>
 8001b90:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b92:	68fb      	ldr	r3, [r7, #12]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3710      	adds	r7, #16
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff3f 	bl	8001a2c <lsm6dso_mem_bank_set>
 8001bae:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	2146      	movs	r1, #70	; 0x46
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f7ff fac1 	bl	8001144 <lsm6dso_read_reg>
 8001bc2:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d104      	bne.n	8001bd4 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8001bca:	2100      	movs	r1, #0
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff ff2d 	bl	8001a2c <lsm6dso_mem_bank_set>
 8001bd2:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
	...

08001be0 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8001bea:	2102      	movs	r1, #2
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff1d 	bl	8001a2c <lsm6dso_mem_bank_set>
 8001bf2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d107      	bne.n	8001c0a <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8001bfa:	f107 0208 	add.w	r2, r7, #8
 8001bfe:	2301      	movs	r3, #1
 8001c00:	215f      	movs	r1, #95	; 0x5f
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff fa9e 	bl	8001144 <lsm6dso_read_reg>
 8001c08:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d12a      	bne.n	8001c66 <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8001c10:	7a3b      	ldrb	r3, [r7, #8]
 8001c12:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2b03      	cmp	r3, #3
 8001c1a:	d81b      	bhi.n	8001c54 <lsm6dso_fsm_data_rate_get+0x74>
 8001c1c:	a201      	add	r2, pc, #4	; (adr r2, 8001c24 <lsm6dso_fsm_data_rate_get+0x44>)
 8001c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c22:	bf00      	nop
 8001c24:	08001c35 	.word	0x08001c35
 8001c28:	08001c3d 	.word	0x08001c3d
 8001c2c:	08001c45 	.word	0x08001c45
 8001c30:	08001c4d 	.word	0x08001c4d
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
        break;
 8001c3a:	e00f      	b.n	8001c5c <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	701a      	strb	r2, [r3, #0]
        break;
 8001c42:	e00b      	b.n	8001c5c <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2202      	movs	r2, #2
 8001c48:	701a      	strb	r2, [r3, #0]
        break;
 8001c4a:	e007      	b.n	8001c5c <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2203      	movs	r2, #3
 8001c50:	701a      	strb	r2, [r3, #0]
        break;
 8001c52:	e003      	b.n	8001c5c <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	2200      	movs	r2, #0
 8001c58:	701a      	strb	r2, [r3, #0]
        break;
 8001c5a:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff fee4 	bl	8001a2c <lsm6dso_mem_bank_set>
 8001c64:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001c66:	68fb      	ldr	r3, [r7, #12]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3710      	adds	r7, #16
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c70:	b590      	push	{r4, r7, lr}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c76:	f000 fd3b 	bl	80026f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c7a:	f000 f835 	bl	8001ce8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c7e:	f000 f9cd 	bl	800201c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c82:	f000 f883 	bl	8001d8c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001c86:	f000 f999 	bl	8001fbc <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001c8a:	f000 f8bf 	bl	8001e0c <MX_SPI2_Init>
  MX_TIM2_Init();
 8001c8e:	f000 f8fb 	bl	8001e88 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c92:	f000 f945 	bl	8001f20 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  DRV_Init();
 8001c96:	f7fe fc51 	bl	800053c <DRV_Init>

  INIT_IMU();
 8001c9a:	f7ff f9f1 	bl	8001080 <INIT_IMU>

  //INTERRUPTS
  HAL_TIM_Base_Start_IT(&htim2);
 8001c9e:	480e      	ldr	r0, [pc, #56]	; (8001cd8 <main+0x68>)
 8001ca0:	f003 fe2e 	bl	8005900 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001ca4:	480d      	ldr	r0, [pc, #52]	; (8001cdc <main+0x6c>)
 8001ca6:	f003 fe2b 	bl	8005900 <HAL_TIM_Base_Start_IT>


  Fusion_datas_init();
 8001caa:	f7fe fc0f 	bl	80004cc <Fusion_datas_init>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	acc_IMU = Get_AXIS_GYRO__IMU();
 8001cae:	4c0c      	ldr	r4, [pc, #48]	; (8001ce0 <main+0x70>)
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fa16 	bl	80010e4 <Get_AXIS_GYRO__IMU>
 8001cb8:	463b      	mov	r3, r7
 8001cba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001cbe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	gyro_IMU = Get_AXIS_ACC__IMU();
 8001cc2:	4c08      	ldr	r4, [pc, #32]	; (8001ce4 <main+0x74>)
 8001cc4:	463b      	mov	r3, r7
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fa24 	bl	8001114 <Get_AXIS_ACC__IMU>
 8001ccc:	463b      	mov	r3, r7
 8001cce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001cd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	acc_IMU = Get_AXIS_GYRO__IMU();
 8001cd6:	e7ea      	b.n	8001cae <main+0x3e>
 8001cd8:	20001e90 	.word	0x20001e90
 8001cdc:	20001edc 	.word	0x20001edc
 8001ce0:	20001fd4 	.word	0x20001fd4
 8001ce4:	20001fe0 	.word	0x20001fe0

08001ce8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b096      	sub	sp, #88	; 0x58
 8001cec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	2244      	movs	r2, #68	; 0x44
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f005 ff7c 	bl	8007bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cfc:	463b      	mov	r3, r7
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
 8001d08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001d0a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d0e:	f001 fe85 	bl	8003a1c <HAL_PWREx_ControlVoltageScaling>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001d18:	f000 fa14 	bl	8002144 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d26:	2310      	movs	r3, #16
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001d36:	230a      	movs	r3, #10
 8001d38:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d42:	2302      	movs	r3, #2
 8001d44:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f001 febc 	bl	8003ac8 <HAL_RCC_OscConfig>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001d56:	f000 f9f5 	bl	8002144 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d5a:	230f      	movs	r3, #15
 8001d5c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d62:	2300      	movs	r3, #0
 8001d64:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d6e:	463b      	mov	r3, r7
 8001d70:	2104      	movs	r1, #4
 8001d72:	4618      	mov	r0, r3
 8001d74:	f002 fa90 	bl	8004298 <HAL_RCC_ClockConfig>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d7e:	f000 f9e1 	bl	8002144 <Error_Handler>
  }
}
 8001d82:	bf00      	nop
 8001d84:	3758      	adds	r7, #88	; 0x58
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d90:	4b1b      	ldr	r3, [pc, #108]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001d92:	4a1c      	ldr	r2, [pc, #112]	; (8001e04 <MX_I2C1_Init+0x78>)
 8001d94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001d96:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001d98:	4a1b      	ldr	r2, [pc, #108]	; (8001e08 <MX_I2C1_Init+0x7c>)
 8001d9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d9c:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001da2:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001da4:	2201      	movs	r2, #1
 8001da6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001da8:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001dae:	4b14      	ldr	r3, [pc, #80]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dba:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001dc6:	480e      	ldr	r0, [pc, #56]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001dc8:	f001 f81e 	bl	8002e08 <HAL_I2C_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001dd2:	f000 f9b7 	bl	8002144 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4809      	ldr	r0, [pc, #36]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001dda:	f001 fd79 	bl	80038d0 <HAL_I2CEx_ConfigAnalogFilter>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001de4:	f000 f9ae 	bl	8002144 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001de8:	2100      	movs	r1, #0
 8001dea:	4805      	ldr	r0, [pc, #20]	; (8001e00 <MX_I2C1_Init+0x74>)
 8001dec:	f001 fdbb 	bl	8003966 <HAL_I2CEx_ConfigDigitalFilter>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001df6:	f000 f9a5 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20001de0 	.word	0x20001de0
 8001e04:	40005400 	.word	0x40005400
 8001e08:	00702991 	.word	0x00702991

08001e0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e12:	4a1c      	ldr	r2, [pc, #112]	; (8001e84 <MX_SPI2_Init+0x78>)
 8001e14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001e16:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e24:	4b16      	ldr	r3, [pc, #88]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e26:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001e2a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e2c:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e32:	4b13      	ldr	r3, [pc, #76]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e3e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e42:	2228      	movs	r2, #40	; 0x28
 8001e44:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e46:	4b0e      	ldr	r3, [pc, #56]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e4c:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e5a:	2207      	movs	r2, #7
 8001e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e6a:	4805      	ldr	r0, [pc, #20]	; (8001e80 <MX_SPI2_Init+0x74>)
 8001e6c:	f003 f8d6 	bl	800501c <HAL_SPI_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e76:	f000 f965 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	20001e2c 	.word	0x20001e2c
 8001e84:	40003800 	.word	0x40003800

08001e88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e8e:	f107 0310 	add.w	r3, r7, #16
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ea6:	4b1d      	ldr	r3, [pc, #116]	; (8001f1c <MX_TIM2_Init+0x94>)
 8001ea8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8001eae:	4b1b      	ldr	r3, [pc, #108]	; (8001f1c <MX_TIM2_Init+0x94>)
 8001eb0:	2209      	movs	r2, #9
 8001eb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	4b19      	ldr	r3, [pc, #100]	; (8001f1c <MX_TIM2_Init+0x94>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 8001eba:	4b18      	ldr	r3, [pc, #96]	; (8001f1c <MX_TIM2_Init+0x94>)
 8001ebc:	22c7      	movs	r2, #199	; 0xc7
 8001ebe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec0:	4b16      	ldr	r3, [pc, #88]	; (8001f1c <MX_TIM2_Init+0x94>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec6:	4b15      	ldr	r3, [pc, #84]	; (8001f1c <MX_TIM2_Init+0x94>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ecc:	4813      	ldr	r0, [pc, #76]	; (8001f1c <MX_TIM2_Init+0x94>)
 8001ece:	f003 fcbf 	bl	8005850 <HAL_TIM_Base_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ed8:	f000 f934 	bl	8002144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ee2:	f107 0310 	add.w	r3, r7, #16
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	480c      	ldr	r0, [pc, #48]	; (8001f1c <MX_TIM2_Init+0x94>)
 8001eea:	f003 fe98 	bl	8005c1e <HAL_TIM_ConfigClockSource>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ef4:	f000 f926 	bl	8002144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	4619      	mov	r1, r3
 8001f04:	4805      	ldr	r0, [pc, #20]	; (8001f1c <MX_TIM2_Init+0x94>)
 8001f06:	f004 f8b9 	bl	800607c <HAL_TIMEx_MasterConfigSynchronization>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001f10:	f000 f918 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f14:	bf00      	nop
 8001f16:	3720      	adds	r7, #32
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	20001e90 	.word	0x20001e90

08001f20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b088      	sub	sp, #32
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f26:	f107 0310 	add.w	r3, r7, #16
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
 8001f30:	609a      	str	r2, [r3, #8]
 8001f32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f34:	1d3b      	adds	r3, r7, #4
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	605a      	str	r2, [r3, #4]
 8001f3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <MX_TIM3_Init+0x94>)
 8001f40:	4a1d      	ldr	r2, [pc, #116]	; (8001fb8 <MX_TIM3_Init+0x98>)
 8001f42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001f44:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <MX_TIM3_Init+0x94>)
 8001f46:	2207      	movs	r2, #7
 8001f48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4a:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <MX_TIM3_Init+0x94>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001f50:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <MX_TIM3_Init+0x94>)
 8001f52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f56:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f58:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <MX_TIM3_Init+0x94>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <MX_TIM3_Init+0x94>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001f64:	4813      	ldr	r0, [pc, #76]	; (8001fb4 <MX_TIM3_Init+0x94>)
 8001f66:	f003 fc73 	bl	8005850 <HAL_TIM_Base_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d001      	beq.n	8001f74 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001f70:	f000 f8e8 	bl	8002144 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f7a:	f107 0310 	add.w	r3, r7, #16
 8001f7e:	4619      	mov	r1, r3
 8001f80:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <MX_TIM3_Init+0x94>)
 8001f82:	f003 fe4c 	bl	8005c1e <HAL_TIM_ConfigClockSource>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001f8c:	f000 f8da 	bl	8002144 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f90:	2300      	movs	r3, #0
 8001f92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4805      	ldr	r0, [pc, #20]	; (8001fb4 <MX_TIM3_Init+0x94>)
 8001f9e:	f004 f86d 	bl	800607c <HAL_TIMEx_MasterConfigSynchronization>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001fa8:	f000 f8cc 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001fac:	bf00      	nop
 8001fae:	3720      	adds	r7, #32
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20001edc 	.word	0x20001edc
 8001fb8:	40000400 	.word	0x40000400

08001fbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fc0:	4b14      	ldr	r3, [pc, #80]	; (8002014 <MX_USART2_UART_Init+0x58>)
 8001fc2:	4a15      	ldr	r2, [pc, #84]	; (8002018 <MX_USART2_UART_Init+0x5c>)
 8001fc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fc6:	4b13      	ldr	r3, [pc, #76]	; (8002014 <MX_USART2_UART_Init+0x58>)
 8001fc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <MX_USART2_UART_Init+0x58>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <MX_USART2_UART_Init+0x58>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <MX_USART2_UART_Init+0x58>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <MX_USART2_UART_Init+0x58>)
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <MX_USART2_UART_Init+0x58>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <MX_USART2_UART_Init+0x58>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <MX_USART2_UART_Init+0x58>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <MX_USART2_UART_Init+0x58>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <MX_USART2_UART_Init+0x58>)
 8002000:	f004 f8e2 	bl	80061c8 <HAL_UART_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800200a:	f000 f89b 	bl	8002144 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20001f28 	.word	0x20001f28
 8002018:	40004400 	.word	0x40004400

0800201c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b08a      	sub	sp, #40	; 0x28
 8002020:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
 800202c:	609a      	str	r2, [r3, #8]
 800202e:	60da      	str	r2, [r3, #12]
 8002030:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002032:	4b41      	ldr	r3, [pc, #260]	; (8002138 <MX_GPIO_Init+0x11c>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002036:	4a40      	ldr	r2, [pc, #256]	; (8002138 <MX_GPIO_Init+0x11c>)
 8002038:	f043 0304 	orr.w	r3, r3, #4
 800203c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800203e:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <MX_GPIO_Init+0x11c>)
 8002040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800204a:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <MX_GPIO_Init+0x11c>)
 800204c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800204e:	4a3a      	ldr	r2, [pc, #232]	; (8002138 <MX_GPIO_Init+0x11c>)
 8002050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002056:	4b38      	ldr	r3, [pc, #224]	; (8002138 <MX_GPIO_Init+0x11c>)
 8002058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	4b35      	ldr	r3, [pc, #212]	; (8002138 <MX_GPIO_Init+0x11c>)
 8002064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002066:	4a34      	ldr	r2, [pc, #208]	; (8002138 <MX_GPIO_Init+0x11c>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800206e:	4b32      	ldr	r3, [pc, #200]	; (8002138 <MX_GPIO_Init+0x11c>)
 8002070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800207a:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <MX_GPIO_Init+0x11c>)
 800207c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207e:	4a2e      	ldr	r2, [pc, #184]	; (8002138 <MX_GPIO_Init+0x11c>)
 8002080:	f043 0302 	orr.w	r3, r3, #2
 8002084:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002086:	4b2c      	ldr	r3, [pc, #176]	; (8002138 <MX_GPIO_Init+0x11c>)
 8002088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	607b      	str	r3, [r7, #4]
 8002090:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|nSleep_Pin, GPIO_PIN_RESET);
 8002092:	2200      	movs	r2, #0
 8002094:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8002098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800209c:	f000 fe9c 	bl	8002dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80020a0:	2200      	movs	r2, #0
 80020a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020a6:	4825      	ldr	r0, [pc, #148]	; (800213c <MX_GPIO_Init+0x120>)
 80020a8:	f000 fe96 	bl	8002dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWM_sync_Pin|PWM_timer_Pin, GPIO_PIN_RESET);
 80020ac:	2200      	movs	r2, #0
 80020ae:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80020b2:	4823      	ldr	r0, [pc, #140]	; (8002140 <MX_GPIO_Init+0x124>)
 80020b4:	f000 fe90 	bl	8002dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80020be:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80020c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020c8:	f107 0314 	add.w	r3, r7, #20
 80020cc:	4619      	mov	r1, r3
 80020ce:	481c      	ldr	r0, [pc, #112]	; (8002140 <MX_GPIO_Init+0x124>)
 80020d0:	f000 fcc0 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin nSleep_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|nSleep_Pin;
 80020d4:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 80020d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020da:	2301      	movs	r3, #1
 80020dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e2:	2300      	movs	r3, #0
 80020e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	4619      	mov	r1, r3
 80020ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020f0:	f000 fcb0 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SS_Pin */
  GPIO_InitStruct.Pin = SPI2_SS_Pin;
 80020f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fa:	2301      	movs	r3, #1
 80020fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002102:	2300      	movs	r3, #0
 8002104:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_SS_GPIO_Port, &GPIO_InitStruct);
 8002106:	f107 0314 	add.w	r3, r7, #20
 800210a:	4619      	mov	r1, r3
 800210c:	480b      	ldr	r0, [pc, #44]	; (800213c <MX_GPIO_Init+0x120>)
 800210e:	f000 fca1 	bl	8002a54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM_sync_Pin PWM_timer_Pin */
  GPIO_InitStruct.Pin = PWM_sync_Pin|PWM_timer_Pin;
 8002112:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002118:	2301      	movs	r3, #1
 800211a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002120:	2300      	movs	r3, #0
 8002122:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	4619      	mov	r1, r3
 800212a:	4805      	ldr	r0, [pc, #20]	; (8002140 <MX_GPIO_Init+0x124>)
 800212c:	f000 fc92 	bl	8002a54 <HAL_GPIO_Init>

}
 8002130:	bf00      	nop
 8002132:	3728      	adds	r7, #40	; 0x28
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40021000 	.word	0x40021000
 800213c:	48000400 	.word	0x48000400
 8002140:	48000800 	.word	0x48000800

08002144 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002148:	b672      	cpsid	i
}
 800214a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800214c:	e7fe      	b.n	800214c <Error_Handler+0x8>

0800214e <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
  Orientation[0] = 's';
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2273      	movs	r2, #115	; 0x73
 800215a:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3301      	adds	r3, #1
 8002160:	2265      	movs	r2, #101	; 0x65
 8002162:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3302      	adds	r3, #2
 8002168:	2275      	movs	r2, #117	; 0x75
 800216a:	701a      	strb	r2, [r3, #0]
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  Orientation[0] = 's';
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2273      	movs	r2, #115	; 0x73
 8002184:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3301      	adds	r3, #1
 800218a:	2265      	movs	r2, #101	; 0x65
 800218c:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3302      	adds	r3, #2
 8002192:	2275      	movs	r2, #117	; 0x75
 8002194:	701a      	strb	r2, [r3, #0]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <pwm_sine>:


#define pas_deg sizeof phase_A / sizeof phase_A[0]

void pwm_sine(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af02      	add	r7, sp, #8
	if(cpt_pwm >= 10)   				//correspond to 2800us (28*100us)
 80021aa:	4b49      	ldr	r3, [pc, #292]	; (80022d0 <pwm_sine+0x12c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	2b09      	cmp	r3, #9
 80021b0:	f240 8086 	bls.w	80022c0 <pwm_sine+0x11c>
	{
		cpt_pwm =0;//reset
 80021b4:	4b46      	ldr	r3, [pc, #280]	; (80022d0 <pwm_sine+0x12c>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	601a      	str	r2, [r3, #0]

		//Set PWM duty_cycle A   (reset = 0x0000 )
		//fill TX buffer for SPI--------------------------------------------
		buf_SPI_TX[0] = 0x00;               					//cmd
 80021ba:	4b46      	ldr	r3, [pc, #280]	; (80022d4 <pwm_sine+0x130>)
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
		buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_A_DUTY <<3);  	//reg adr + cmd
 80021c0:	4b44      	ldr	r3, [pc, #272]	; (80022d4 <pwm_sine+0x130>)
 80021c2:	22c8      	movs	r2, #200	; 0xc8
 80021c4:	705a      	strb	r2, [r3, #1]
		buf_SPI_TX[2] = 0x00;				//data (si read osf)
 80021c6:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <pwm_sine+0x130>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	709a      	strb	r2, [r3, #2]
		buf_SPI_TX[3] = phase_A[cpt_deg];									//data (si read osf)
 80021cc:	4b42      	ldr	r3, [pc, #264]	; (80022d8 <pwm_sine+0x134>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a42      	ldr	r2, [pc, #264]	; (80022dc <pwm_sine+0x138>)
 80021d2:	5cd2      	ldrb	r2, [r2, r3]
 80021d4:	4b3f      	ldr	r3, [pc, #252]	; (80022d4 <pwm_sine+0x130>)
 80021d6:	70da      	strb	r2, [r3, #3]
		//Send/Read Datas---------------------------------------------------
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80021d8:	2200      	movs	r2, #0
 80021da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021de:	4840      	ldr	r0, [pc, #256]	; (80022e0 <pwm_sine+0x13c>)
 80021e0:	f000 fdfa 	bl	8002dd8 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80021e4:	f04f 33ff 	mov.w	r3, #4294967295
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	2304      	movs	r3, #4
 80021ec:	4a3d      	ldr	r2, [pc, #244]	; (80022e4 <pwm_sine+0x140>)
 80021ee:	4939      	ldr	r1, [pc, #228]	; (80022d4 <pwm_sine+0x130>)
 80021f0:	483d      	ldr	r0, [pc, #244]	; (80022e8 <pwm_sine+0x144>)
 80021f2:	f002 ffb6 	bl	8005162 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80021f6:	2201      	movs	r2, #1
 80021f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021fc:	4838      	ldr	r0, [pc, #224]	; (80022e0 <pwm_sine+0x13c>)
 80021fe:	f000 fdeb 	bl	8002dd8 <HAL_GPIO_WritePin>
		//Set PWM duty_cycle B   (reset = 0x0000 )
		//fill TX buffer for SPI--------------------------------------------
		buf_SPI_TX[0] = 0x00;               					//cmd
 8002202:	4b34      	ldr	r3, [pc, #208]	; (80022d4 <pwm_sine+0x130>)
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
		buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_B_DUTY <<3);  	//reg adr + cmd
 8002208:	4b32      	ldr	r3, [pc, #200]	; (80022d4 <pwm_sine+0x130>)
 800220a:	22d0      	movs	r2, #208	; 0xd0
 800220c:	705a      	strb	r2, [r3, #1]
		buf_SPI_TX[2] = 0x00;				//data (si read osf)
 800220e:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <pwm_sine+0x130>)
 8002210:	2200      	movs	r2, #0
 8002212:	709a      	strb	r2, [r3, #2]
		buf_SPI_TX[3] = phase_B[cpt_deg];									//data (si read osf)
 8002214:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <pwm_sine+0x134>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a34      	ldr	r2, [pc, #208]	; (80022ec <pwm_sine+0x148>)
 800221a:	5cd2      	ldrb	r2, [r2, r3]
 800221c:	4b2d      	ldr	r3, [pc, #180]	; (80022d4 <pwm_sine+0x130>)
 800221e:	70da      	strb	r2, [r3, #3]
		//Send/Read Datas---------------------------------------------------
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8002220:	2200      	movs	r2, #0
 8002222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002226:	482e      	ldr	r0, [pc, #184]	; (80022e0 <pwm_sine+0x13c>)
 8002228:	f000 fdd6 	bl	8002dd8 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 800222c:	f04f 33ff 	mov.w	r3, #4294967295
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	2304      	movs	r3, #4
 8002234:	4a2b      	ldr	r2, [pc, #172]	; (80022e4 <pwm_sine+0x140>)
 8002236:	4927      	ldr	r1, [pc, #156]	; (80022d4 <pwm_sine+0x130>)
 8002238:	482b      	ldr	r0, [pc, #172]	; (80022e8 <pwm_sine+0x144>)
 800223a:	f002 ff92 	bl	8005162 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 800223e:	2201      	movs	r2, #1
 8002240:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002244:	4826      	ldr	r0, [pc, #152]	; (80022e0 <pwm_sine+0x13c>)
 8002246:	f000 fdc7 	bl	8002dd8 <HAL_GPIO_WritePin>

		//Set PWM duty_cycle C   (reset = 0x0000 )
		//fill TX buffer for SPI--------------------------------------------
		buf_SPI_TX[0] = 0x00;               					//cmd
 800224a:	4b22      	ldr	r3, [pc, #136]	; (80022d4 <pwm_sine+0x130>)
 800224c:	2200      	movs	r2, #0
 800224e:	701a      	strb	r2, [r3, #0]
		buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_C_DUTY <<3);  	//reg adr + cmd
 8002250:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <pwm_sine+0x130>)
 8002252:	22d8      	movs	r2, #216	; 0xd8
 8002254:	705a      	strb	r2, [r3, #1]
		buf_SPI_TX[2] = 0x00;				//data (si read osf)
 8002256:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <pwm_sine+0x130>)
 8002258:	2200      	movs	r2, #0
 800225a:	709a      	strb	r2, [r3, #2]
		buf_SPI_TX[3] = phase_C[cpt_deg];									//data (si read osf)
 800225c:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <pwm_sine+0x134>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a23      	ldr	r2, [pc, #140]	; (80022f0 <pwm_sine+0x14c>)
 8002262:	5cd2      	ldrb	r2, [r2, r3]
 8002264:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <pwm_sine+0x130>)
 8002266:	70da      	strb	r2, [r3, #3]
		//Send/Read Datas---------------------------------------------------
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8002268:	2200      	movs	r2, #0
 800226a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800226e:	481c      	ldr	r0, [pc, #112]	; (80022e0 <pwm_sine+0x13c>)
 8002270:	f000 fdb2 	bl	8002dd8 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8002274:	f04f 33ff 	mov.w	r3, #4294967295
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	2304      	movs	r3, #4
 800227c:	4a19      	ldr	r2, [pc, #100]	; (80022e4 <pwm_sine+0x140>)
 800227e:	4915      	ldr	r1, [pc, #84]	; (80022d4 <pwm_sine+0x130>)
 8002280:	4819      	ldr	r0, [pc, #100]	; (80022e8 <pwm_sine+0x144>)
 8002282:	f002 ff6e 	bl	8005162 <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8002286:	2201      	movs	r2, #1
 8002288:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800228c:	4814      	ldr	r0, [pc, #80]	; (80022e0 <pwm_sine+0x13c>)
 800228e:	f000 fda3 	bl	8002dd8 <HAL_GPIO_WritePin>


		//if button not pressed: clockwise else counter clockwise
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1)
 8002292:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002296:	4817      	ldr	r0, [pc, #92]	; (80022f4 <pwm_sine+0x150>)
 8002298:	f000 fd86 	bl	8002da8 <HAL_GPIO_ReadPin>
 800229c:	4603      	mov	r3, r0
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d113      	bne.n	80022ca <pwm_sine+0x126>
		{
			//clockwise direction
			if(cpt_deg>=pas_deg-1)			//360°
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <pwm_sine+0x134>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 80022aa:	d903      	bls.n	80022b4 <pwm_sine+0x110>
			{
				cpt_deg =0;					//reset cpt °
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <pwm_sine+0x134>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]
	else
	{
		cpt_pwm++;
	}
	//HAL_GPIO_TogglePin(PWM_timer_GPIO_Port, PWM_timer_Pin);
}
 80022b2:	e00a      	b.n	80022ca <pwm_sine+0x126>
				cpt_deg++;					//+1°
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <pwm_sine+0x134>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	3301      	adds	r3, #1
 80022ba:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <pwm_sine+0x134>)
 80022bc:	6013      	str	r3, [r2, #0]
}
 80022be:	e004      	b.n	80022ca <pwm_sine+0x126>
		cpt_pwm++;
 80022c0:	4b03      	ldr	r3, [pc, #12]	; (80022d0 <pwm_sine+0x12c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	3301      	adds	r3, #1
 80022c6:	4a02      	ldr	r2, [pc, #8]	; (80022d0 <pwm_sine+0x12c>)
 80022c8:	6013      	str	r3, [r2, #0]
}
 80022ca:	bf00      	nop
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20001fec 	.word	0x20001fec
 80022d4:	20001fac 	.word	0x20001fac
 80022d8:	20001ff0 	.word	0x20001ff0
 80022dc:	200011c8 	.word	0x200011c8
 80022e0:	48000400 	.word	0x48000400
 80022e4:	20001fc0 	.word	0x20001fc0
 80022e8:	20001e2c 	.word	0x20001e2c
 80022ec:	20001330 	.word	0x20001330
 80022f0:	20001498 	.word	0x20001498
 80022f4:	48000800 	.word	0x48000800

080022f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022fe:	4b0f      	ldr	r3, [pc, #60]	; (800233c <HAL_MspInit+0x44>)
 8002300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002302:	4a0e      	ldr	r2, [pc, #56]	; (800233c <HAL_MspInit+0x44>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6613      	str	r3, [r2, #96]	; 0x60
 800230a:	4b0c      	ldr	r3, [pc, #48]	; (800233c <HAL_MspInit+0x44>)
 800230c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	607b      	str	r3, [r7, #4]
 8002314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_MspInit+0x44>)
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	4a08      	ldr	r2, [pc, #32]	; (800233c <HAL_MspInit+0x44>)
 800231c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002320:	6593      	str	r3, [r2, #88]	; 0x58
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_MspInit+0x44>)
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	40021000 	.word	0x40021000

08002340 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b0ac      	sub	sp, #176	; 0xb0
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	2288      	movs	r2, #136	; 0x88
 800235e:	2100      	movs	r1, #0
 8002360:	4618      	mov	r0, r3
 8002362:	f005 fc47 	bl	8007bf4 <memset>
  if(hi2c->Instance==I2C1)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a21      	ldr	r2, [pc, #132]	; (80023f0 <HAL_I2C_MspInit+0xb0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d13b      	bne.n	80023e8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002370:	2340      	movs	r3, #64	; 0x40
 8002372:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002374:	2300      	movs	r3, #0
 8002376:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002378:	f107 0314 	add.w	r3, r7, #20
 800237c:	4618      	mov	r0, r3
 800237e:	f002 f991 	bl	80046a4 <HAL_RCCEx_PeriphCLKConfig>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002388:	f7ff fedc 	bl	8002144 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_I2C_MspInit+0xb4>)
 800238e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002390:	4a18      	ldr	r2, [pc, #96]	; (80023f4 <HAL_I2C_MspInit+0xb4>)
 8002392:	f043 0302 	orr.w	r3, r3, #2
 8002396:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002398:	4b16      	ldr	r3, [pc, #88]	; (80023f4 <HAL_I2C_MspInit+0xb4>)
 800239a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023ac:	2312      	movs	r3, #18
 80023ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b8:	2303      	movs	r3, #3
 80023ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80023be:	2304      	movs	r3, #4
 80023c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80023c8:	4619      	mov	r1, r3
 80023ca:	480b      	ldr	r0, [pc, #44]	; (80023f8 <HAL_I2C_MspInit+0xb8>)
 80023cc:	f000 fb42 	bl	8002a54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023d0:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <HAL_I2C_MspInit+0xb4>)
 80023d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d4:	4a07      	ldr	r2, [pc, #28]	; (80023f4 <HAL_I2C_MspInit+0xb4>)
 80023d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023da:	6593      	str	r3, [r2, #88]	; 0x58
 80023dc:	4b05      	ldr	r3, [pc, #20]	; (80023f4 <HAL_I2C_MspInit+0xb4>)
 80023de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023e8:	bf00      	nop
 80023ea:	37b0      	adds	r7, #176	; 0xb0
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40005400 	.word	0x40005400
 80023f4:	40021000 	.word	0x40021000
 80023f8:	48000400 	.word	0x48000400

080023fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08a      	sub	sp, #40	; 0x28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 0314 	add.w	r3, r7, #20
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a25      	ldr	r2, [pc, #148]	; (80024b0 <HAL_SPI_MspInit+0xb4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d144      	bne.n	80024a8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800241e:	4b25      	ldr	r3, [pc, #148]	; (80024b4 <HAL_SPI_MspInit+0xb8>)
 8002420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002422:	4a24      	ldr	r2, [pc, #144]	; (80024b4 <HAL_SPI_MspInit+0xb8>)
 8002424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002428:	6593      	str	r3, [r2, #88]	; 0x58
 800242a:	4b22      	ldr	r3, [pc, #136]	; (80024b4 <HAL_SPI_MspInit+0xb8>)
 800242c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002436:	4b1f      	ldr	r3, [pc, #124]	; (80024b4 <HAL_SPI_MspInit+0xb8>)
 8002438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800243a:	4a1e      	ldr	r2, [pc, #120]	; (80024b4 <HAL_SPI_MspInit+0xb8>)
 800243c:	f043 0304 	orr.w	r3, r3, #4
 8002440:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002442:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <HAL_SPI_MspInit+0xb8>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244e:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <HAL_SPI_MspInit+0xb8>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002452:	4a18      	ldr	r2, [pc, #96]	; (80024b4 <HAL_SPI_MspInit+0xb8>)
 8002454:	f043 0302 	orr.w	r3, r3, #2
 8002458:	64d3      	str	r3, [r2, #76]	; 0x4c
 800245a:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <HAL_SPI_MspInit+0xb8>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002466:	230c      	movs	r3, #12
 8002468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800246a:	2302      	movs	r3, #2
 800246c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002472:	2303      	movs	r3, #3
 8002474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002476:	2305      	movs	r3, #5
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	4619      	mov	r1, r3
 8002480:	480d      	ldr	r0, [pc, #52]	; (80024b8 <HAL_SPI_MspInit+0xbc>)
 8002482:	f000 fae7 	bl	8002a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800248a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248c:	2302      	movs	r3, #2
 800248e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002490:	2300      	movs	r3, #0
 8002492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002494:	2303      	movs	r3, #3
 8002496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002498:	2305      	movs	r3, #5
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249c:	f107 0314 	add.w	r3, r7, #20
 80024a0:	4619      	mov	r1, r3
 80024a2:	4806      	ldr	r0, [pc, #24]	; (80024bc <HAL_SPI_MspInit+0xc0>)
 80024a4:	f000 fad6 	bl	8002a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80024a8:	bf00      	nop
 80024aa:	3728      	adds	r7, #40	; 0x28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40003800 	.word	0x40003800
 80024b4:	40021000 	.word	0x40021000
 80024b8:	48000800 	.word	0x48000800
 80024bc:	48000400 	.word	0x48000400

080024c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d0:	d114      	bne.n	80024fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024d2:	4b19      	ldr	r3, [pc, #100]	; (8002538 <HAL_TIM_Base_MspInit+0x78>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	4a18      	ldr	r2, [pc, #96]	; (8002538 <HAL_TIM_Base_MspInit+0x78>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6593      	str	r3, [r2, #88]	; 0x58
 80024de:	4b16      	ldr	r3, [pc, #88]	; (8002538 <HAL_TIM_Base_MspInit+0x78>)
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024ea:	2200      	movs	r2, #0
 80024ec:	2100      	movs	r1, #0
 80024ee:	201c      	movs	r0, #28
 80024f0:	f000 fa79 	bl	80029e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024f4:	201c      	movs	r0, #28
 80024f6:	f000 fa92 	bl	8002a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024fa:	e018      	b.n	800252e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a0e      	ldr	r2, [pc, #56]	; (800253c <HAL_TIM_Base_MspInit+0x7c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d113      	bne.n	800252e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002506:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <HAL_TIM_Base_MspInit+0x78>)
 8002508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250a:	4a0b      	ldr	r2, [pc, #44]	; (8002538 <HAL_TIM_Base_MspInit+0x78>)
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	6593      	str	r3, [r2, #88]	; 0x58
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_TIM_Base_MspInit+0x78>)
 8002514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2100      	movs	r1, #0
 8002522:	201d      	movs	r0, #29
 8002524:	f000 fa5f 	bl	80029e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002528:	201d      	movs	r0, #29
 800252a:	f000 fa78 	bl	8002a1e <HAL_NVIC_EnableIRQ>
}
 800252e:	bf00      	nop
 8002530:	3710      	adds	r7, #16
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000
 800253c:	40000400 	.word	0x40000400

08002540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b0ac      	sub	sp, #176	; 0xb0
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002558:	f107 0314 	add.w	r3, r7, #20
 800255c:	2288      	movs	r2, #136	; 0x88
 800255e:	2100      	movs	r1, #0
 8002560:	4618      	mov	r0, r3
 8002562:	f005 fb47 	bl	8007bf4 <memset>
  if(huart->Instance==USART2)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a21      	ldr	r2, [pc, #132]	; (80025f0 <HAL_UART_MspInit+0xb0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d13b      	bne.n	80025e8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002570:	2302      	movs	r3, #2
 8002572:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002574:	2300      	movs	r3, #0
 8002576:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002578:	f107 0314 	add.w	r3, r7, #20
 800257c:	4618      	mov	r0, r3
 800257e:	f002 f891 	bl	80046a4 <HAL_RCCEx_PeriphCLKConfig>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002588:	f7ff fddc 	bl	8002144 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800258c:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <HAL_UART_MspInit+0xb4>)
 800258e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002590:	4a18      	ldr	r2, [pc, #96]	; (80025f4 <HAL_UART_MspInit+0xb4>)
 8002592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002596:	6593      	str	r3, [r2, #88]	; 0x58
 8002598:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <HAL_UART_MspInit+0xb4>)
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a0:	613b      	str	r3, [r7, #16]
 80025a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a4:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <HAL_UART_MspInit+0xb4>)
 80025a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a8:	4a12      	ldr	r2, [pc, #72]	; (80025f4 <HAL_UART_MspInit+0xb4>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025b0:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <HAL_UART_MspInit+0xb4>)
 80025b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025bc:	230c      	movs	r3, #12
 80025be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c2:	2302      	movs	r3, #2
 80025c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025ce:	2303      	movs	r3, #3
 80025d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025d4:	2307      	movs	r3, #7
 80025d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025da:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025de:	4619      	mov	r1, r3
 80025e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025e4:	f000 fa36 	bl	8002a54 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025e8:	bf00      	nop
 80025ea:	37b0      	adds	r7, #176	; 0xb0
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40004400 	.word	0x40004400
 80025f4:	40021000 	.word	0x40021000

080025f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025fc:	e7fe      	b.n	80025fc <NMI_Handler+0x4>

080025fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025fe:	b480      	push	{r7}
 8002600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002602:	e7fe      	b.n	8002602 <HardFault_Handler+0x4>

08002604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002608:	e7fe      	b.n	8002608 <MemManage_Handler+0x4>

0800260a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800260e:	e7fe      	b.n	800260e <BusFault_Handler+0x4>

08002610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002614:	e7fe      	b.n	8002614 <UsageFault_Handler+0x4>

08002616 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002616:	b480      	push	{r7}
 8002618:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800261a:	bf00      	nop
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002624:	b480      	push	{r7}
 8002626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002644:	f000 f8b0 	bl	80027a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	bd80      	pop	{r7, pc}

0800264c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <TIM2_IRQHandler+0x10>)
 8002652:	f003 f9c5 	bl	80059e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20001e90 	.word	0x20001e90

08002660 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002664:	4803      	ldr	r0, [pc, #12]	; (8002674 <TIM3_IRQHandler+0x14>)
 8002666:	f003 f9bb 	bl	80059e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  pwm_sine();
 800266a:	f7ff fd9b 	bl	80021a4 <pwm_sine>
  /* USER CODE END TIM3_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20001edc 	.word	0x20001edc

08002678 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800267c:	4b06      	ldr	r3, [pc, #24]	; (8002698 <SystemInit+0x20>)
 800267e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002682:	4a05      	ldr	r2, [pc, #20]	; (8002698 <SystemInit+0x20>)
 8002684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
    ldr   sp, =_estack    /* Set stack pointer */
 800269c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026a0:	f7ff ffea 	bl	8002678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026a4:	480c      	ldr	r0, [pc, #48]	; (80026d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80026a6:	490d      	ldr	r1, [pc, #52]	; (80026dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80026a8:	4a0d      	ldr	r2, [pc, #52]	; (80026e0 <LoopForever+0xe>)
  movs r3, #0
 80026aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026ac:	e002      	b.n	80026b4 <LoopCopyDataInit>

080026ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026b2:	3304      	adds	r3, #4

080026b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026b8:	d3f9      	bcc.n	80026ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ba:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026bc:	4c0a      	ldr	r4, [pc, #40]	; (80026e8 <LoopForever+0x16>)
  movs r3, #0
 80026be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026c0:	e001      	b.n	80026c6 <LoopFillZerobss>

080026c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026c4:	3204      	adds	r2, #4

080026c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026c8:	d3fb      	bcc.n	80026c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026ca:	f005 fa6f 	bl	8007bac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80026ce:	f7ff facf 	bl	8001c70 <main>

080026d2 <LoopForever>:

LoopForever:
    b LoopForever
 80026d2:	e7fe      	b.n	80026d2 <LoopForever>
    ldr   sp, =_estack    /* Set stack pointer */
 80026d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80026d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026dc:	2000160c 	.word	0x2000160c
  ldr r2, =_sidata
 80026e0:	08007e38 	.word	0x08007e38
  ldr r2, =_sbss
 80026e4:	20001610 	.word	0x20001610
  ldr r4, =_ebss
 80026e8:	20002468 	.word	0x20002468

080026ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026ec:	e7fe      	b.n	80026ec <ADC1_2_IRQHandler>
	...

080026f0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026f6:	2300      	movs	r3, #0
 80026f8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026fa:	4b0c      	ldr	r3, [pc, #48]	; (800272c <HAL_Init+0x3c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a0b      	ldr	r2, [pc, #44]	; (800272c <HAL_Init+0x3c>)
 8002700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002704:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002706:	2003      	movs	r0, #3
 8002708:	f000 f962 	bl	80029d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800270c:	2000      	movs	r0, #0
 800270e:	f000 f80f 	bl	8002730 <HAL_InitTick>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	71fb      	strb	r3, [r7, #7]
 800271c:	e001      	b.n	8002722 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800271e:	f7ff fdeb 	bl	80022f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002722:	79fb      	ldrb	r3, [r7, #7]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40022000 	.word	0x40022000

08002730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002738:	2300      	movs	r3, #0
 800273a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800273c:	4b17      	ldr	r3, [pc, #92]	; (800279c <HAL_InitTick+0x6c>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d023      	beq.n	800278c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002744:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <HAL_InitTick+0x70>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	4b14      	ldr	r3, [pc, #80]	; (800279c <HAL_InitTick+0x6c>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	4619      	mov	r1, r3
 800274e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002752:	fbb3 f3f1 	udiv	r3, r3, r1
 8002756:	fbb2 f3f3 	udiv	r3, r2, r3
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f96d 	bl	8002a3a <HAL_SYSTICK_Config>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10f      	bne.n	8002786 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2b0f      	cmp	r3, #15
 800276a:	d809      	bhi.n	8002780 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800276c:	2200      	movs	r2, #0
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	f04f 30ff 	mov.w	r0, #4294967295
 8002774:	f000 f937 	bl	80029e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002778:	4a0a      	ldr	r2, [pc, #40]	; (80027a4 <HAL_InitTick+0x74>)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e007      	b.n	8002790 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	73fb      	strb	r3, [r7, #15]
 8002784:	e004      	b.n	8002790 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	73fb      	strb	r3, [r7, #15]
 800278a:	e001      	b.n	8002790 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002790:	7bfb      	ldrb	r3, [r7, #15]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20001608 	.word	0x20001608
 80027a0:	20001600 	.word	0x20001600
 80027a4:	20001604 	.word	0x20001604

080027a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_IncTick+0x20>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b06      	ldr	r3, [pc, #24]	; (80027cc <HAL_IncTick+0x24>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4413      	add	r3, r2
 80027b8:	4a04      	ldr	r2, [pc, #16]	; (80027cc <HAL_IncTick+0x24>)
 80027ba:	6013      	str	r3, [r2, #0]
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	20001608 	.word	0x20001608
 80027cc:	20001ff4 	.word	0x20001ff4

080027d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return uwTick;
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <HAL_GetTick+0x14>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20001ff4 	.word	0x20001ff4

080027e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027f0:	f7ff ffee 	bl	80027d0 <HAL_GetTick>
 80027f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002800:	d005      	beq.n	800280e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002802:	4b0a      	ldr	r3, [pc, #40]	; (800282c <HAL_Delay+0x44>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4413      	add	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800280e:	bf00      	nop
 8002810:	f7ff ffde 	bl	80027d0 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	429a      	cmp	r2, r3
 800281e:	d8f7      	bhi.n	8002810 <HAL_Delay+0x28>
  {
  }
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3710      	adds	r7, #16
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20001608 	.word	0x20001608

08002830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002840:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <__NVIC_SetPriorityGrouping+0x44>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800284c:	4013      	ands	r3, r2
 800284e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800285c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002862:	4a04      	ldr	r2, [pc, #16]	; (8002874 <__NVIC_SetPriorityGrouping+0x44>)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	60d3      	str	r3, [r2, #12]
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800287c:	4b04      	ldr	r3, [pc, #16]	; (8002890 <__NVIC_GetPriorityGrouping+0x18>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	0a1b      	lsrs	r3, r3, #8
 8002882:	f003 0307 	and.w	r3, r3, #7
}
 8002886:	4618      	mov	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	db0b      	blt.n	80028be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	f003 021f 	and.w	r2, r3, #31
 80028ac:	4907      	ldr	r1, [pc, #28]	; (80028cc <__NVIC_EnableIRQ+0x38>)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	2001      	movs	r0, #1
 80028b6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000e100 	.word	0xe000e100

080028d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	4603      	mov	r3, r0
 80028d8:	6039      	str	r1, [r7, #0]
 80028da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	db0a      	blt.n	80028fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	490c      	ldr	r1, [pc, #48]	; (800291c <__NVIC_SetPriority+0x4c>)
 80028ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ee:	0112      	lsls	r2, r2, #4
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	440b      	add	r3, r1
 80028f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028f8:	e00a      	b.n	8002910 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	4908      	ldr	r1, [pc, #32]	; (8002920 <__NVIC_SetPriority+0x50>)
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	f003 030f 	and.w	r3, r3, #15
 8002906:	3b04      	subs	r3, #4
 8002908:	0112      	lsls	r2, r2, #4
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	440b      	add	r3, r1
 800290e:	761a      	strb	r2, [r3, #24]
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	e000e100 	.word	0xe000e100
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002924:	b480      	push	{r7}
 8002926:	b089      	sub	sp, #36	; 0x24
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	f1c3 0307 	rsb	r3, r3, #7
 800293e:	2b04      	cmp	r3, #4
 8002940:	bf28      	it	cs
 8002942:	2304      	movcs	r3, #4
 8002944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	3304      	adds	r3, #4
 800294a:	2b06      	cmp	r3, #6
 800294c:	d902      	bls.n	8002954 <NVIC_EncodePriority+0x30>
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	3b03      	subs	r3, #3
 8002952:	e000      	b.n	8002956 <NVIC_EncodePriority+0x32>
 8002954:	2300      	movs	r3, #0
 8002956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002958:	f04f 32ff 	mov.w	r2, #4294967295
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43da      	mvns	r2, r3
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	401a      	ands	r2, r3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800296c:	f04f 31ff 	mov.w	r1, #4294967295
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	fa01 f303 	lsl.w	r3, r1, r3
 8002976:	43d9      	mvns	r1, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800297c:	4313      	orrs	r3, r2
         );
}
 800297e:	4618      	mov	r0, r3
 8002980:	3724      	adds	r7, #36	; 0x24
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
	...

0800298c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	3b01      	subs	r3, #1
 8002998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800299c:	d301      	bcc.n	80029a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800299e:	2301      	movs	r3, #1
 80029a0:	e00f      	b.n	80029c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029a2:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <SysTick_Config+0x40>)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029aa:	210f      	movs	r1, #15
 80029ac:	f04f 30ff 	mov.w	r0, #4294967295
 80029b0:	f7ff ff8e 	bl	80028d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <SysTick_Config+0x40>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029ba:	4b04      	ldr	r3, [pc, #16]	; (80029cc <SysTick_Config+0x40>)
 80029bc:	2207      	movs	r2, #7
 80029be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3708      	adds	r7, #8
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	e000e010 	.word	0xe000e010

080029d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff ff29 	bl	8002830 <__NVIC_SetPriorityGrouping>
}
 80029de:	bf00      	nop
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}

080029e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b086      	sub	sp, #24
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	4603      	mov	r3, r0
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	607a      	str	r2, [r7, #4]
 80029f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029f8:	f7ff ff3e 	bl	8002878 <__NVIC_GetPriorityGrouping>
 80029fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	68b9      	ldr	r1, [r7, #8]
 8002a02:	6978      	ldr	r0, [r7, #20]
 8002a04:	f7ff ff8e 	bl	8002924 <NVIC_EncodePriority>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a0e:	4611      	mov	r1, r2
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7ff ff5d 	bl	80028d0 <__NVIC_SetPriority>
}
 8002a16:	bf00      	nop
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b082      	sub	sp, #8
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	4603      	mov	r3, r0
 8002a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff31 	bl	8002894 <__NVIC_EnableIRQ>
}
 8002a32:	bf00      	nop
 8002a34:	3708      	adds	r7, #8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff ffa2 	bl	800298c <SysTick_Config>
 8002a48:	4603      	mov	r3, r0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a62:	e17f      	b.n	8002d64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	2101      	movs	r1, #1
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a70:	4013      	ands	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	f000 8171 	beq.w	8002d5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d005      	beq.n	8002a94 <HAL_GPIO_Init+0x40>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d130      	bne.n	8002af6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aca:	2201      	movs	r2, #1
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	091b      	lsrs	r3, r3, #4
 8002ae0:	f003 0201 	and.w	r2, r3, #1
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	693a      	ldr	r2, [r7, #16]
 8002af4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d118      	bne.n	8002b34 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002b08:	2201      	movs	r2, #1
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	08db      	lsrs	r3, r3, #3
 8002b1e:	f003 0201 	and.w	r2, r3, #1
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	2b03      	cmp	r3, #3
 8002b3e:	d017      	beq.n	8002b70 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d123      	bne.n	8002bc4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	08da      	lsrs	r2, r3, #3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3208      	adds	r2, #8
 8002b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	220f      	movs	r2, #15
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f003 0307 	and.w	r3, r3, #7
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	08da      	lsrs	r2, r3, #3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	3208      	adds	r2, #8
 8002bbe:	6939      	ldr	r1, [r7, #16]
 8002bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	2203      	movs	r2, #3
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0203 	and.w	r2, r3, #3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80ac 	beq.w	8002d5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c06:	4b5f      	ldr	r3, [pc, #380]	; (8002d84 <HAL_GPIO_Init+0x330>)
 8002c08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c0a:	4a5e      	ldr	r2, [pc, #376]	; (8002d84 <HAL_GPIO_Init+0x330>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6613      	str	r3, [r2, #96]	; 0x60
 8002c12:	4b5c      	ldr	r3, [pc, #368]	; (8002d84 <HAL_GPIO_Init+0x330>)
 8002c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	60bb      	str	r3, [r7, #8]
 8002c1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c1e:	4a5a      	ldr	r2, [pc, #360]	; (8002d88 <HAL_GPIO_Init+0x334>)
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	089b      	lsrs	r3, r3, #2
 8002c24:	3302      	adds	r3, #2
 8002c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	220f      	movs	r2, #15
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c48:	d025      	beq.n	8002c96 <HAL_GPIO_Init+0x242>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4f      	ldr	r2, [pc, #316]	; (8002d8c <HAL_GPIO_Init+0x338>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d01f      	beq.n	8002c92 <HAL_GPIO_Init+0x23e>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4e      	ldr	r2, [pc, #312]	; (8002d90 <HAL_GPIO_Init+0x33c>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d019      	beq.n	8002c8e <HAL_GPIO_Init+0x23a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4d      	ldr	r2, [pc, #308]	; (8002d94 <HAL_GPIO_Init+0x340>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d013      	beq.n	8002c8a <HAL_GPIO_Init+0x236>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a4c      	ldr	r2, [pc, #304]	; (8002d98 <HAL_GPIO_Init+0x344>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d00d      	beq.n	8002c86 <HAL_GPIO_Init+0x232>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a4b      	ldr	r2, [pc, #300]	; (8002d9c <HAL_GPIO_Init+0x348>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d007      	beq.n	8002c82 <HAL_GPIO_Init+0x22e>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a4a      	ldr	r2, [pc, #296]	; (8002da0 <HAL_GPIO_Init+0x34c>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d101      	bne.n	8002c7e <HAL_GPIO_Init+0x22a>
 8002c7a:	2306      	movs	r3, #6
 8002c7c:	e00c      	b.n	8002c98 <HAL_GPIO_Init+0x244>
 8002c7e:	2307      	movs	r3, #7
 8002c80:	e00a      	b.n	8002c98 <HAL_GPIO_Init+0x244>
 8002c82:	2305      	movs	r3, #5
 8002c84:	e008      	b.n	8002c98 <HAL_GPIO_Init+0x244>
 8002c86:	2304      	movs	r3, #4
 8002c88:	e006      	b.n	8002c98 <HAL_GPIO_Init+0x244>
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e004      	b.n	8002c98 <HAL_GPIO_Init+0x244>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e002      	b.n	8002c98 <HAL_GPIO_Init+0x244>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e000      	b.n	8002c98 <HAL_GPIO_Init+0x244>
 8002c96:	2300      	movs	r3, #0
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	f002 0203 	and.w	r2, r2, #3
 8002c9e:	0092      	lsls	r2, r2, #2
 8002ca0:	4093      	lsls	r3, r2
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ca8:	4937      	ldr	r1, [pc, #220]	; (8002d88 <HAL_GPIO_Init+0x334>)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	089b      	lsrs	r3, r3, #2
 8002cae:	3302      	adds	r3, #2
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cb6:	4b3b      	ldr	r3, [pc, #236]	; (8002da4 <HAL_GPIO_Init+0x350>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	43db      	mvns	r3, r3
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cda:	4a32      	ldr	r2, [pc, #200]	; (8002da4 <HAL_GPIO_Init+0x350>)
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ce0:	4b30      	ldr	r3, [pc, #192]	; (8002da4 <HAL_GPIO_Init+0x350>)
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d003      	beq.n	8002d04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002cfc:	693a      	ldr	r2, [r7, #16]
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d04:	4a27      	ldr	r2, [pc, #156]	; (8002da4 <HAL_GPIO_Init+0x350>)
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d0a:	4b26      	ldr	r3, [pc, #152]	; (8002da4 <HAL_GPIO_Init+0x350>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4013      	ands	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d2e:	4a1d      	ldr	r2, [pc, #116]	; (8002da4 <HAL_GPIO_Init+0x350>)
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d34:	4b1b      	ldr	r3, [pc, #108]	; (8002da4 <HAL_GPIO_Init+0x350>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d58:	4a12      	ldr	r2, [pc, #72]	; (8002da4 <HAL_GPIO_Init+0x350>)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	3301      	adds	r3, #1
 8002d62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f47f ae78 	bne.w	8002a64 <HAL_GPIO_Init+0x10>
  }
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	371c      	adds	r7, #28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40010000 	.word	0x40010000
 8002d8c:	48000400 	.word	0x48000400
 8002d90:	48000800 	.word	0x48000800
 8002d94:	48000c00 	.word	0x48000c00
 8002d98:	48001000 	.word	0x48001000
 8002d9c:	48001400 	.word	0x48001400
 8002da0:	48001800 	.word	0x48001800
 8002da4:	40010400 	.word	0x40010400

08002da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	887b      	ldrh	r3, [r7, #2]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
 8002dc4:	e001      	b.n	8002dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	807b      	strh	r3, [r7, #2]
 8002de4:	4613      	mov	r3, r2
 8002de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002de8:	787b      	ldrb	r3, [r7, #1]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dee:	887a      	ldrh	r2, [r7, #2]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002df4:	e002      	b.n	8002dfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002df6:	887a      	ldrh	r2, [r7, #2]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dfc:	bf00      	nop
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e081      	b.n	8002f1e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d106      	bne.n	8002e34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff fa86 	bl	8002340 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2224      	movs	r2, #36	; 0x24
 8002e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0201 	bic.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e58:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e68:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d107      	bne.n	8002e82 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e7e:	609a      	str	r2, [r3, #8]
 8002e80:	e006      	b.n	8002e90 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e8e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d104      	bne.n	8002ea2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ea0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002eb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ec4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	691a      	ldr	r2, [r3, #16]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	69d9      	ldr	r1, [r3, #28]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a1a      	ldr	r2, [r3, #32]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
	...

08002f28 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b088      	sub	sp, #32
 8002f2c:	af02      	add	r7, sp, #8
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	4608      	mov	r0, r1
 8002f32:	4611      	mov	r1, r2
 8002f34:	461a      	mov	r2, r3
 8002f36:	4603      	mov	r3, r0
 8002f38:	817b      	strh	r3, [r7, #10]
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	813b      	strh	r3, [r7, #8]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b20      	cmp	r3, #32
 8002f4c:	f040 80f9 	bne.w	8003142 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d002      	beq.n	8002f5c <HAL_I2C_Mem_Write+0x34>
 8002f56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d105      	bne.n	8002f68 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f62:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0ed      	b.n	8003144 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_I2C_Mem_Write+0x4e>
 8002f72:	2302      	movs	r3, #2
 8002f74:	e0e6      	b.n	8003144 <HAL_I2C_Mem_Write+0x21c>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2201      	movs	r2, #1
 8002f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f7e:	f7ff fc27 	bl	80027d0 <HAL_GetTick>
 8002f82:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	2319      	movs	r3, #25
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 fac3 	bl	800351c <I2C_WaitOnFlagUntilTimeout>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0d1      	b.n	8003144 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2221      	movs	r2, #33	; 0x21
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2240      	movs	r2, #64	; 0x40
 8002fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a3a      	ldr	r2, [r7, #32]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fc8:	88f8      	ldrh	r0, [r7, #6]
 8002fca:	893a      	ldrh	r2, [r7, #8]
 8002fcc:	8979      	ldrh	r1, [r7, #10]
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	9301      	str	r3, [sp, #4]
 8002fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f9d3 	bl	8003384 <I2C_RequestMemoryWrite>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0a9      	b.n	8003144 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2bff      	cmp	r3, #255	; 0xff
 8002ff8:	d90e      	bls.n	8003018 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	22ff      	movs	r2, #255	; 0xff
 8002ffe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003004:	b2da      	uxtb	r2, r3
 8003006:	8979      	ldrh	r1, [r7, #10]
 8003008:	2300      	movs	r3, #0
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003010:	68f8      	ldr	r0, [r7, #12]
 8003012:	f000 fc2b 	bl	800386c <I2C_TransferConfig>
 8003016:	e00f      	b.n	8003038 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301c:	b29a      	uxth	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003026:	b2da      	uxtb	r2, r3
 8003028:	8979      	ldrh	r1, [r7, #10]
 800302a:	2300      	movs	r3, #0
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f000 fc1a 	bl	800386c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 faad 	bl	800359c <I2C_WaitOnTXISFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e07b      	b.n	8003144 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	781a      	ldrb	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003080:	b29b      	uxth	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d034      	beq.n	80030f0 <HAL_I2C_Mem_Write+0x1c8>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308a:	2b00      	cmp	r3, #0
 800308c:	d130      	bne.n	80030f0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003094:	2200      	movs	r2, #0
 8003096:	2180      	movs	r1, #128	; 0x80
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 fa3f 	bl	800351c <I2C_WaitOnFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d001      	beq.n	80030a8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e04d      	b.n	8003144 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2bff      	cmp	r3, #255	; 0xff
 80030b0:	d90e      	bls.n	80030d0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	22ff      	movs	r2, #255	; 0xff
 80030b6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030bc:	b2da      	uxtb	r2, r3
 80030be:	8979      	ldrh	r1, [r7, #10]
 80030c0:	2300      	movs	r3, #0
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f000 fbcf 	bl	800386c <I2C_TransferConfig>
 80030ce:	e00f      	b.n	80030f0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	8979      	ldrh	r1, [r7, #10]
 80030e2:	2300      	movs	r3, #0
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fbbe 	bl	800386c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d19e      	bne.n	8003038 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 fa8c 	bl	800361c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e01a      	b.n	8003144 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2220      	movs	r2, #32
 8003114:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4b0a      	ldr	r3, [pc, #40]	; (800314c <HAL_I2C_Mem_Write+0x224>)
 8003122:	400b      	ands	r3, r1
 8003124:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2220      	movs	r2, #32
 800312a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	e000      	b.n	8003144 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003142:	2302      	movs	r3, #2
  }
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	fe00e800 	.word	0xfe00e800

08003150 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b088      	sub	sp, #32
 8003154:	af02      	add	r7, sp, #8
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	4608      	mov	r0, r1
 800315a:	4611      	mov	r1, r2
 800315c:	461a      	mov	r2, r3
 800315e:	4603      	mov	r3, r0
 8003160:	817b      	strh	r3, [r7, #10]
 8003162:	460b      	mov	r3, r1
 8003164:	813b      	strh	r3, [r7, #8]
 8003166:	4613      	mov	r3, r2
 8003168:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b20      	cmp	r3, #32
 8003174:	f040 80fd 	bne.w	8003372 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d002      	beq.n	8003184 <HAL_I2C_Mem_Read+0x34>
 800317e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003180:	2b00      	cmp	r3, #0
 8003182:	d105      	bne.n	8003190 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f44f 7200 	mov.w	r2, #512	; 0x200
 800318a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0f1      	b.n	8003374 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003196:	2b01      	cmp	r3, #1
 8003198:	d101      	bne.n	800319e <HAL_I2C_Mem_Read+0x4e>
 800319a:	2302      	movs	r3, #2
 800319c:	e0ea      	b.n	8003374 <HAL_I2C_Mem_Read+0x224>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031a6:	f7ff fb13 	bl	80027d0 <HAL_GetTick>
 80031aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	2319      	movs	r3, #25
 80031b2:	2201      	movs	r2, #1
 80031b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 f9af 	bl	800351c <I2C_WaitOnFlagUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0d5      	b.n	8003374 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2222      	movs	r2, #34	; 0x22
 80031cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2240      	movs	r2, #64	; 0x40
 80031d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a3a      	ldr	r2, [r7, #32]
 80031e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031f0:	88f8      	ldrh	r0, [r7, #6]
 80031f2:	893a      	ldrh	r2, [r7, #8]
 80031f4:	8979      	ldrh	r1, [r7, #10]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	9301      	str	r3, [sp, #4]
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	4603      	mov	r3, r0
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f913 	bl	800342c <I2C_RequestMemoryRead>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0ad      	b.n	8003374 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	2bff      	cmp	r3, #255	; 0xff
 8003220:	d90e      	bls.n	8003240 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	22ff      	movs	r2, #255	; 0xff
 8003226:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322c:	b2da      	uxtb	r2, r3
 800322e:	8979      	ldrh	r1, [r7, #10]
 8003230:	4b52      	ldr	r3, [pc, #328]	; (800337c <HAL_I2C_Mem_Read+0x22c>)
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 fb17 	bl	800386c <I2C_TransferConfig>
 800323e:	e00f      	b.n	8003260 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324e:	b2da      	uxtb	r2, r3
 8003250:	8979      	ldrh	r1, [r7, #10]
 8003252:	4b4a      	ldr	r3, [pc, #296]	; (800337c <HAL_I2C_Mem_Read+0x22c>)
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800325a:	68f8      	ldr	r0, [r7, #12]
 800325c:	f000 fb06 	bl	800386c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003266:	2200      	movs	r2, #0
 8003268:	2104      	movs	r1, #4
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f956 	bl	800351c <I2C_WaitOnFlagUntilTimeout>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e07c      	b.n	8003374 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	b2d2      	uxtb	r2, r2
 8003286:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328c:	1c5a      	adds	r2, r3, #1
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003296:	3b01      	subs	r3, #1
 8003298:	b29a      	uxth	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d034      	beq.n	8003320 <HAL_I2C_Mem_Read+0x1d0>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d130      	bne.n	8003320 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c4:	2200      	movs	r2, #0
 80032c6:	2180      	movs	r1, #128	; 0x80
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 f927 	bl	800351c <I2C_WaitOnFlagUntilTimeout>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e04d      	b.n	8003374 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2bff      	cmp	r3, #255	; 0xff
 80032e0:	d90e      	bls.n	8003300 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	22ff      	movs	r2, #255	; 0xff
 80032e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	8979      	ldrh	r1, [r7, #10]
 80032f0:	2300      	movs	r3, #0
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032f8:	68f8      	ldr	r0, [r7, #12]
 80032fa:	f000 fab7 	bl	800386c <I2C_TransferConfig>
 80032fe:	e00f      	b.n	8003320 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800330e:	b2da      	uxtb	r2, r3
 8003310:	8979      	ldrh	r1, [r7, #10]
 8003312:	2300      	movs	r3, #0
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 faa6 	bl	800386c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003324:	b29b      	uxth	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d19a      	bne.n	8003260 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 f974 	bl	800361c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e01a      	b.n	8003374 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2220      	movs	r2, #32
 8003344:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6859      	ldr	r1, [r3, #4]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4b0b      	ldr	r3, [pc, #44]	; (8003380 <HAL_I2C_Mem_Read+0x230>)
 8003352:	400b      	ands	r3, r1
 8003354:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2220      	movs	r2, #32
 800335a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800336e:	2300      	movs	r3, #0
 8003370:	e000      	b.n	8003374 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003372:	2302      	movs	r3, #2
  }
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	80002400 	.word	0x80002400
 8003380:	fe00e800 	.word	0xfe00e800

08003384 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	4608      	mov	r0, r1
 800338e:	4611      	mov	r1, r2
 8003390:	461a      	mov	r2, r3
 8003392:	4603      	mov	r3, r0
 8003394:	817b      	strh	r3, [r7, #10]
 8003396:	460b      	mov	r3, r1
 8003398:	813b      	strh	r3, [r7, #8]
 800339a:	4613      	mov	r3, r2
 800339c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	8979      	ldrh	r1, [r7, #10]
 80033a4:	4b20      	ldr	r3, [pc, #128]	; (8003428 <I2C_RequestMemoryWrite+0xa4>)
 80033a6:	9300      	str	r3, [sp, #0]
 80033a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 fa5d 	bl	800386c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033b2:	69fa      	ldr	r2, [r7, #28]
 80033b4:	69b9      	ldr	r1, [r7, #24]
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f8f0 	bl	800359c <I2C_WaitOnTXISFlagUntilTimeout>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e02c      	b.n	8003420 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d105      	bne.n	80033d8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033cc:	893b      	ldrh	r3, [r7, #8]
 80033ce:	b2da      	uxtb	r2, r3
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	629a      	str	r2, [r3, #40]	; 0x28
 80033d6:	e015      	b.n	8003404 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033d8:	893b      	ldrh	r3, [r7, #8]
 80033da:	0a1b      	lsrs	r3, r3, #8
 80033dc:	b29b      	uxth	r3, r3
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033e6:	69fa      	ldr	r2, [r7, #28]
 80033e8:	69b9      	ldr	r1, [r7, #24]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f8d6 	bl	800359c <I2C_WaitOnTXISFlagUntilTimeout>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e012      	b.n	8003420 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033fa:	893b      	ldrh	r3, [r7, #8]
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	2200      	movs	r2, #0
 800340c:	2180      	movs	r1, #128	; 0x80
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	f000 f884 	bl	800351c <I2C_WaitOnFlagUntilTimeout>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	80002000 	.word	0x80002000

0800342c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af02      	add	r7, sp, #8
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	4608      	mov	r0, r1
 8003436:	4611      	mov	r1, r2
 8003438:	461a      	mov	r2, r3
 800343a:	4603      	mov	r3, r0
 800343c:	817b      	strh	r3, [r7, #10]
 800343e:	460b      	mov	r3, r1
 8003440:	813b      	strh	r3, [r7, #8]
 8003442:	4613      	mov	r3, r2
 8003444:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	b2da      	uxtb	r2, r3
 800344a:	8979      	ldrh	r1, [r7, #10]
 800344c:	4b20      	ldr	r3, [pc, #128]	; (80034d0 <I2C_RequestMemoryRead+0xa4>)
 800344e:	9300      	str	r3, [sp, #0]
 8003450:	2300      	movs	r3, #0
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 fa0a 	bl	800386c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003458:	69fa      	ldr	r2, [r7, #28]
 800345a:	69b9      	ldr	r1, [r7, #24]
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 f89d 	bl	800359c <I2C_WaitOnTXISFlagUntilTimeout>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d001      	beq.n	800346c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e02c      	b.n	80034c6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800346c:	88fb      	ldrh	r3, [r7, #6]
 800346e:	2b01      	cmp	r3, #1
 8003470:	d105      	bne.n	800347e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003472:	893b      	ldrh	r3, [r7, #8]
 8003474:	b2da      	uxtb	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	629a      	str	r2, [r3, #40]	; 0x28
 800347c:	e015      	b.n	80034aa <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800347e:	893b      	ldrh	r3, [r7, #8]
 8003480:	0a1b      	lsrs	r3, r3, #8
 8003482:	b29b      	uxth	r3, r3
 8003484:	b2da      	uxtb	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	69b9      	ldr	r1, [r7, #24]
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 f883 	bl	800359c <I2C_WaitOnTXISFlagUntilTimeout>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e012      	b.n	80034c6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034a0:	893b      	ldrh	r3, [r7, #8]
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	2200      	movs	r2, #0
 80034b2:	2140      	movs	r1, #64	; 0x40
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f000 f831 	bl	800351c <I2C_WaitOnFlagUntilTimeout>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	80002000 	.word	0x80002000

080034d4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d103      	bne.n	80034f2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2200      	movs	r2, #0
 80034f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	699b      	ldr	r3, [r3, #24]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d007      	beq.n	8003510 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699a      	ldr	r2, [r3, #24]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0201 	orr.w	r2, r2, #1
 800350e:	619a      	str	r2, [r3, #24]
  }
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	603b      	str	r3, [r7, #0]
 8003528:	4613      	mov	r3, r2
 800352a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800352c:	e022      	b.n	8003574 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d01e      	beq.n	8003574 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003536:	f7ff f94b 	bl	80027d0 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d113      	bne.n	8003574 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003550:	f043 0220 	orr.w	r2, r3, #32
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e00f      	b.n	8003594 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699a      	ldr	r2, [r3, #24]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	4013      	ands	r3, r2
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	429a      	cmp	r2, r3
 8003582:	bf0c      	ite	eq
 8003584:	2301      	moveq	r3, #1
 8003586:	2300      	movne	r3, #0
 8003588:	b2db      	uxtb	r3, r3
 800358a:	461a      	mov	r2, r3
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	429a      	cmp	r2, r3
 8003590:	d0cd      	beq.n	800352e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035a8:	e02c      	b.n	8003604 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f870 	bl	8003694 <I2C_IsErrorOccurred>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e02a      	b.n	8003614 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035c4:	d01e      	beq.n	8003604 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035c6:	f7ff f903 	bl	80027d0 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d302      	bcc.n	80035dc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d113      	bne.n	8003604 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e0:	f043 0220 	orr.w	r2, r3, #32
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e007      	b.n	8003614 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b02      	cmp	r3, #2
 8003610:	d1cb      	bne.n	80035aa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003612:	2300      	movs	r3, #0
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003628:	e028      	b.n	800367c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f830 	bl	8003694 <I2C_IsErrorOccurred>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e026      	b.n	800368c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800363e:	f7ff f8c7 	bl	80027d0 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	429a      	cmp	r2, r3
 800364c:	d302      	bcc.n	8003654 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d113      	bne.n	800367c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e007      	b.n	800368c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699b      	ldr	r3, [r3, #24]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	2b20      	cmp	r3, #32
 8003688:	d1cf      	bne.n	800362a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08a      	sub	sp, #40	; 0x28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036a0:	2300      	movs	r3, #0
 80036a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f003 0310 	and.w	r3, r3, #16
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d075      	beq.n	80037ac <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2210      	movs	r2, #16
 80036c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036c8:	e056      	b.n	8003778 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d0:	d052      	beq.n	8003778 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036d2:	f7ff f87d 	bl	80027d0 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d302      	bcc.n	80036e8 <I2C_IsErrorOccurred+0x54>
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d147      	bne.n	8003778 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800370a:	d12e      	bne.n	800376a <I2C_IsErrorOccurred+0xd6>
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003712:	d02a      	beq.n	800376a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003714:	7cfb      	ldrb	r3, [r7, #19]
 8003716:	2b20      	cmp	r3, #32
 8003718:	d027      	beq.n	800376a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685a      	ldr	r2, [r3, #4]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003728:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800372a:	f7ff f851 	bl	80027d0 <HAL_GetTick>
 800372e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003730:	e01b      	b.n	800376a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003732:	f7ff f84d 	bl	80027d0 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b19      	cmp	r3, #25
 800373e:	d914      	bls.n	800376a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003744:	f043 0220 	orr.w	r2, r3, #32
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2220      	movs	r2, #32
 8003750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b20      	cmp	r3, #32
 8003776:	d1dc      	bne.n	8003732 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f003 0320 	and.w	r3, r3, #32
 8003782:	2b20      	cmp	r3, #32
 8003784:	d003      	beq.n	800378e <I2C_IsErrorOccurred+0xfa>
 8003786:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800378a:	2b00      	cmp	r3, #0
 800378c:	d09d      	beq.n	80036ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800378e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003792:	2b00      	cmp	r3, #0
 8003794:	d103      	bne.n	800379e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2220      	movs	r2, #32
 800379c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800379e:	6a3b      	ldr	r3, [r7, #32]
 80037a0:	f043 0304 	orr.w	r3, r3, #4
 80037a4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00b      	beq.n	80037d6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ce:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00b      	beq.n	80037f8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	f043 0308 	orr.w	r3, r3, #8
 80037e6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037f0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	f043 0302 	orr.w	r3, r3, #2
 8003808:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003812:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800381a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800381e:	2b00      	cmp	r3, #0
 8003820:	d01c      	beq.n	800385c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f7ff fe56 	bl	80034d4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6859      	ldr	r1, [r3, #4]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <I2C_IsErrorOccurred+0x1d4>)
 8003834:	400b      	ands	r3, r1
 8003836:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	431a      	orrs	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800385c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003860:	4618      	mov	r0, r3
 8003862:	3728      	adds	r7, #40	; 0x28
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	fe00e800 	.word	0xfe00e800

0800386c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	460b      	mov	r3, r1
 8003878:	817b      	strh	r3, [r7, #10]
 800387a:	4613      	mov	r3, r2
 800387c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800387e:	897b      	ldrh	r3, [r7, #10]
 8003880:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003884:	7a7b      	ldrb	r3, [r7, #9]
 8003886:	041b      	lsls	r3, r3, #16
 8003888:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800388c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	4313      	orrs	r3, r2
 8003896:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800389a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	0d5b      	lsrs	r3, r3, #21
 80038a6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038aa:	4b08      	ldr	r3, [pc, #32]	; (80038cc <I2C_TransferConfig+0x60>)
 80038ac:	430b      	orrs	r3, r1
 80038ae:	43db      	mvns	r3, r3
 80038b0:	ea02 0103 	and.w	r1, r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	03ff63ff 	.word	0x03ff63ff

080038d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b20      	cmp	r3, #32
 80038e4:	d138      	bne.n	8003958 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d101      	bne.n	80038f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038f0:	2302      	movs	r3, #2
 80038f2:	e032      	b.n	800395a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2224      	movs	r2, #36	; 0x24
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 0201 	bic.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003922:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6819      	ldr	r1, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2220      	movs	r2, #32
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	e000      	b.n	800395a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003958:	2302      	movs	r3, #2
  }
}
 800395a:	4618      	mov	r0, r3
 800395c:	370c      	adds	r7, #12
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr

08003966 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003966:	b480      	push	{r7}
 8003968:	b085      	sub	sp, #20
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
 800396e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b20      	cmp	r3, #32
 800397a:	d139      	bne.n	80039f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003986:	2302      	movs	r3, #2
 8003988:	e033      	b.n	80039f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2224      	movs	r2, #36	; 0x24
 8003996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0201 	bic.w	r2, r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	021b      	lsls	r3, r3, #8
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039ec:	2300      	movs	r3, #0
 80039ee:	e000      	b.n	80039f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039f0:	2302      	movs	r3, #2
  }
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
	...

08003a00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a04:	4b04      	ldr	r3, [pc, #16]	; (8003a18 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	40007000 	.word	0x40007000

08003a1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a2a:	d130      	bne.n	8003a8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a2c:	4b23      	ldr	r3, [pc, #140]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a38:	d038      	beq.n	8003aac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a3a:	4b20      	ldr	r3, [pc, #128]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a42:	4a1e      	ldr	r2, [pc, #120]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a4a:	4b1d      	ldr	r3, [pc, #116]	; (8003ac0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2232      	movs	r2, #50	; 0x32
 8003a50:	fb02 f303 	mul.w	r3, r2, r3
 8003a54:	4a1b      	ldr	r2, [pc, #108]	; (8003ac4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a56:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5a:	0c9b      	lsrs	r3, r3, #18
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a60:	e002      	b.n	8003a68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a68:	4b14      	ldr	r3, [pc, #80]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a6a:	695b      	ldr	r3, [r3, #20]
 8003a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a74:	d102      	bne.n	8003a7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f2      	bne.n	8003a62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a7c:	4b0f      	ldr	r3, [pc, #60]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a88:	d110      	bne.n	8003aac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e00f      	b.n	8003aae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a8e:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a9a:	d007      	beq.n	8003aac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a9c:	4b07      	ldr	r3, [pc, #28]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003aa4:	4a05      	ldr	r2, [pc, #20]	; (8003abc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aa6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aaa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40007000 	.word	0x40007000
 8003ac0:	20001600 	.word	0x20001600
 8003ac4:	431bde83 	.word	0x431bde83

08003ac8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b088      	sub	sp, #32
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e3d8      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ada:	4b97      	ldr	r3, [pc, #604]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ae4:	4b94      	ldr	r3, [pc, #592]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003ae6:	68db      	ldr	r3, [r3, #12]
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 80e4 	beq.w	8003cc4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d007      	beq.n	8003b12 <HAL_RCC_OscConfig+0x4a>
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b0c      	cmp	r3, #12
 8003b06:	f040 808b 	bne.w	8003c20 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	f040 8087 	bne.w	8003c20 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b12:	4b89      	ldr	r3, [pc, #548]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d005      	beq.n	8003b2a <HAL_RCC_OscConfig+0x62>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d101      	bne.n	8003b2a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e3b0      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1a      	ldr	r2, [r3, #32]
 8003b2e:	4b82      	ldr	r3, [pc, #520]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d004      	beq.n	8003b44 <HAL_RCC_OscConfig+0x7c>
 8003b3a:	4b7f      	ldr	r3, [pc, #508]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b42:	e005      	b.n	8003b50 <HAL_RCC_OscConfig+0x88>
 8003b44:	4b7c      	ldr	r3, [pc, #496]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b4a:	091b      	lsrs	r3, r3, #4
 8003b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d223      	bcs.n	8003b9c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 fd43 	bl	80045e4 <RCC_SetFlashLatencyFromMSIRange>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e391      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b68:	4b73      	ldr	r3, [pc, #460]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a72      	ldr	r2, [pc, #456]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003b6e:	f043 0308 	orr.w	r3, r3, #8
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	4b70      	ldr	r3, [pc, #448]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	496d      	ldr	r1, [pc, #436]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b86:	4b6c      	ldr	r3, [pc, #432]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	021b      	lsls	r3, r3, #8
 8003b94:	4968      	ldr	r1, [pc, #416]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	604b      	str	r3, [r1, #4]
 8003b9a:	e025      	b.n	8003be8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b9c:	4b66      	ldr	r3, [pc, #408]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a65      	ldr	r2, [pc, #404]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003ba2:	f043 0308 	orr.w	r3, r3, #8
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	4b63      	ldr	r3, [pc, #396]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	4960      	ldr	r1, [pc, #384]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bba:	4b5f      	ldr	r3, [pc, #380]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	69db      	ldr	r3, [r3, #28]
 8003bc6:	021b      	lsls	r3, r3, #8
 8003bc8:	495b      	ldr	r1, [pc, #364]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d109      	bne.n	8003be8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 fd03 	bl	80045e4 <RCC_SetFlashLatencyFromMSIRange>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e351      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003be8:	f000 fc38 	bl	800445c <HAL_RCC_GetSysClockFreq>
 8003bec:	4602      	mov	r2, r0
 8003bee:	4b52      	ldr	r3, [pc, #328]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	091b      	lsrs	r3, r3, #4
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	4950      	ldr	r1, [pc, #320]	; (8003d3c <HAL_RCC_OscConfig+0x274>)
 8003bfa:	5ccb      	ldrb	r3, [r1, r3]
 8003bfc:	f003 031f 	and.w	r3, r3, #31
 8003c00:	fa22 f303 	lsr.w	r3, r2, r3
 8003c04:	4a4e      	ldr	r2, [pc, #312]	; (8003d40 <HAL_RCC_OscConfig+0x278>)
 8003c06:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c08:	4b4e      	ldr	r3, [pc, #312]	; (8003d44 <HAL_RCC_OscConfig+0x27c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fe fd8f 	bl	8002730 <HAL_InitTick>
 8003c12:	4603      	mov	r3, r0
 8003c14:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d052      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	e335      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	699b      	ldr	r3, [r3, #24]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d032      	beq.n	8003c8e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c28:	4b43      	ldr	r3, [pc, #268]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a42      	ldr	r2, [pc, #264]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c34:	f7fe fdcc 	bl	80027d0 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c3a:	e008      	b.n	8003c4e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c3c:	f7fe fdc8 	bl	80027d0 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d901      	bls.n	8003c4e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c4a:	2303      	movs	r3, #3
 8003c4c:	e31e      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c4e:	4b3a      	ldr	r3, [pc, #232]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d0f0      	beq.n	8003c3c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c5a:	4b37      	ldr	r3, [pc, #220]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a36      	ldr	r2, [pc, #216]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003c60:	f043 0308 	orr.w	r3, r3, #8
 8003c64:	6013      	str	r3, [r2, #0]
 8003c66:	4b34      	ldr	r3, [pc, #208]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	4931      	ldr	r1, [pc, #196]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003c74:	4313      	orrs	r3, r2
 8003c76:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c78:	4b2f      	ldr	r3, [pc, #188]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	021b      	lsls	r3, r3, #8
 8003c86:	492c      	ldr	r1, [pc, #176]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	604b      	str	r3, [r1, #4]
 8003c8c:	e01a      	b.n	8003cc4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c8e:	4b2a      	ldr	r3, [pc, #168]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a29      	ldr	r2, [pc, #164]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003c94:	f023 0301 	bic.w	r3, r3, #1
 8003c98:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c9a:	f7fe fd99 	bl	80027d0 <HAL_GetTick>
 8003c9e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ca0:	e008      	b.n	8003cb4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ca2:	f7fe fd95 	bl	80027d0 <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	1ad3      	subs	r3, r2, r3
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e2eb      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cb4:	4b20      	ldr	r3, [pc, #128]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0302 	and.w	r3, r3, #2
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d1f0      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x1da>
 8003cc0:	e000      	b.n	8003cc4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cc2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d074      	beq.n	8003dba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	2b08      	cmp	r3, #8
 8003cd4:	d005      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x21a>
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	2b0c      	cmp	r3, #12
 8003cda:	d10e      	bne.n	8003cfa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d10b      	bne.n	8003cfa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce2:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d064      	beq.n	8003db8 <HAL_RCC_OscConfig+0x2f0>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d160      	bne.n	8003db8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e2c8      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d02:	d106      	bne.n	8003d12 <HAL_RCC_OscConfig+0x24a>
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a0b      	ldr	r2, [pc, #44]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003d0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d0e:	6013      	str	r3, [r2, #0]
 8003d10:	e026      	b.n	8003d60 <HAL_RCC_OscConfig+0x298>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d1a:	d115      	bne.n	8003d48 <HAL_RCC_OscConfig+0x280>
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a05      	ldr	r2, [pc, #20]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003d22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	4b03      	ldr	r3, [pc, #12]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a02      	ldr	r2, [pc, #8]	; (8003d38 <HAL_RCC_OscConfig+0x270>)
 8003d2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	e014      	b.n	8003d60 <HAL_RCC_OscConfig+0x298>
 8003d36:	bf00      	nop
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	08007de0 	.word	0x08007de0
 8003d40:	20001600 	.word	0x20001600
 8003d44:	20001604 	.word	0x20001604
 8003d48:	4ba0      	ldr	r3, [pc, #640]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a9f      	ldr	r2, [pc, #636]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d52:	6013      	str	r3, [r2, #0]
 8003d54:	4b9d      	ldr	r3, [pc, #628]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a9c      	ldr	r2, [pc, #624]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d013      	beq.n	8003d90 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d68:	f7fe fd32 	bl	80027d0 <HAL_GetTick>
 8003d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d6e:	e008      	b.n	8003d82 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d70:	f7fe fd2e 	bl	80027d0 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	2b64      	cmp	r3, #100	; 0x64
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e284      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d82:	4b92      	ldr	r3, [pc, #584]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0f0      	beq.n	8003d70 <HAL_RCC_OscConfig+0x2a8>
 8003d8e:	e014      	b.n	8003dba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fe fd1e 	bl	80027d0 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d98:	f7fe fd1a 	bl	80027d0 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	; 0x64
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e270      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003daa:	4b88      	ldr	r3, [pc, #544]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x2d0>
 8003db6:	e000      	b.n	8003dba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d060      	beq.n	8003e88 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	2b04      	cmp	r3, #4
 8003dca:	d005      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x310>
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2b0c      	cmp	r3, #12
 8003dd0:	d119      	bne.n	8003e06 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d116      	bne.n	8003e06 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dd8:	4b7c      	ldr	r3, [pc, #496]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_RCC_OscConfig+0x328>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e24d      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df0:	4b76      	ldr	r3, [pc, #472]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	061b      	lsls	r3, r3, #24
 8003dfe:	4973      	ldr	r1, [pc, #460]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e04:	e040      	b.n	8003e88 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d023      	beq.n	8003e56 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e0e:	4b6f      	ldr	r3, [pc, #444]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a6e      	ldr	r2, [pc, #440]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1a:	f7fe fcd9 	bl	80027d0 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e22:	f7fe fcd5 	bl	80027d0 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e22b      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e34:	4b65      	ldr	r3, [pc, #404]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e40:	4b62      	ldr	r3, [pc, #392]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	061b      	lsls	r3, r3, #24
 8003e4e:	495f      	ldr	r1, [pc, #380]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003e50:	4313      	orrs	r3, r2
 8003e52:	604b      	str	r3, [r1, #4]
 8003e54:	e018      	b.n	8003e88 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e56:	4b5d      	ldr	r3, [pc, #372]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a5c      	ldr	r2, [pc, #368]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e62:	f7fe fcb5 	bl	80027d0 <HAL_GetTick>
 8003e66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e68:	e008      	b.n	8003e7c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e6a:	f7fe fcb1 	bl	80027d0 <HAL_GetTick>
 8003e6e:	4602      	mov	r2, r0
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d901      	bls.n	8003e7c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	e207      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e7c:	4b53      	ldr	r3, [pc, #332]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1f0      	bne.n	8003e6a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d03c      	beq.n	8003f0e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d01c      	beq.n	8003ed6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e9c:	4b4b      	ldr	r3, [pc, #300]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ea2:	4a4a      	ldr	r2, [pc, #296]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003ea4:	f043 0301 	orr.w	r3, r3, #1
 8003ea8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003eac:	f7fe fc90 	bl	80027d0 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eb4:	f7fe fc8c 	bl	80027d0 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e1e2      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ec6:	4b41      	ldr	r3, [pc, #260]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0ef      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x3ec>
 8003ed4:	e01b      	b.n	8003f0e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ed6:	4b3d      	ldr	r3, [pc, #244]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003edc:	4a3b      	ldr	r2, [pc, #236]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003ede:	f023 0301 	bic.w	r3, r3, #1
 8003ee2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee6:	f7fe fc73 	bl	80027d0 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eee:	f7fe fc6f 	bl	80027d0 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e1c5      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f00:	4b32      	ldr	r3, [pc, #200]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003f02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d1ef      	bne.n	8003eee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0304 	and.w	r3, r3, #4
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	f000 80a6 	beq.w	8004068 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f20:	4b2a      	ldr	r3, [pc, #168]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10d      	bne.n	8003f48 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f2c:	4b27      	ldr	r3, [pc, #156]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f30:	4a26      	ldr	r2, [pc, #152]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f36:	6593      	str	r3, [r2, #88]	; 0x58
 8003f38:	4b24      	ldr	r3, [pc, #144]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f40:	60bb      	str	r3, [r7, #8]
 8003f42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f44:	2301      	movs	r3, #1
 8003f46:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f48:	4b21      	ldr	r3, [pc, #132]	; (8003fd0 <HAL_RCC_OscConfig+0x508>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d118      	bne.n	8003f86 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f54:	4b1e      	ldr	r3, [pc, #120]	; (8003fd0 <HAL_RCC_OscConfig+0x508>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a1d      	ldr	r2, [pc, #116]	; (8003fd0 <HAL_RCC_OscConfig+0x508>)
 8003f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f60:	f7fe fc36 	bl	80027d0 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f68:	f7fe fc32 	bl	80027d0 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e188      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f7a:	4b15      	ldr	r3, [pc, #84]	; (8003fd0 <HAL_RCC_OscConfig+0x508>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f0      	beq.n	8003f68 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d108      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x4d8>
 8003f8e:	4b0f      	ldr	r3, [pc, #60]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f94:	4a0d      	ldr	r2, [pc, #52]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f9e:	e029      	b.n	8003ff4 <HAL_RCC_OscConfig+0x52c>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b05      	cmp	r3, #5
 8003fa6:	d115      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x50c>
 8003fa8:	4b08      	ldr	r3, [pc, #32]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fae:	4a07      	ldr	r2, [pc, #28]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003fb0:	f043 0304 	orr.w	r3, r3, #4
 8003fb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fb8:	4b04      	ldr	r3, [pc, #16]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbe:	4a03      	ldr	r2, [pc, #12]	; (8003fcc <HAL_RCC_OscConfig+0x504>)
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fc8:	e014      	b.n	8003ff4 <HAL_RCC_OscConfig+0x52c>
 8003fca:	bf00      	nop
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	40007000 	.word	0x40007000
 8003fd4:	4b91      	ldr	r3, [pc, #580]	; (800421c <HAL_RCC_OscConfig+0x754>)
 8003fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fda:	4a90      	ldr	r2, [pc, #576]	; (800421c <HAL_RCC_OscConfig+0x754>)
 8003fdc:	f023 0301 	bic.w	r3, r3, #1
 8003fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fe4:	4b8d      	ldr	r3, [pc, #564]	; (800421c <HAL_RCC_OscConfig+0x754>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fea:	4a8c      	ldr	r2, [pc, #560]	; (800421c <HAL_RCC_OscConfig+0x754>)
 8003fec:	f023 0304 	bic.w	r3, r3, #4
 8003ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d016      	beq.n	800402a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffc:	f7fe fbe8 	bl	80027d0 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004002:	e00a      	b.n	800401a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004004:	f7fe fbe4 	bl	80027d0 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004012:	4293      	cmp	r3, r2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e138      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800401a:	4b80      	ldr	r3, [pc, #512]	; (800421c <HAL_RCC_OscConfig+0x754>)
 800401c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0ed      	beq.n	8004004 <HAL_RCC_OscConfig+0x53c>
 8004028:	e015      	b.n	8004056 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402a:	f7fe fbd1 	bl	80027d0 <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004030:	e00a      	b.n	8004048 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004032:	f7fe fbcd 	bl	80027d0 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004040:	4293      	cmp	r3, r2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e121      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004048:	4b74      	ldr	r3, [pc, #464]	; (800421c <HAL_RCC_OscConfig+0x754>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1ed      	bne.n	8004032 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004056:	7ffb      	ldrb	r3, [r7, #31]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d105      	bne.n	8004068 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800405c:	4b6f      	ldr	r3, [pc, #444]	; (800421c <HAL_RCC_OscConfig+0x754>)
 800405e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004060:	4a6e      	ldr	r2, [pc, #440]	; (800421c <HAL_RCC_OscConfig+0x754>)
 8004062:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004066:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 810c 	beq.w	800428a <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	2b02      	cmp	r3, #2
 8004078:	f040 80d4 	bne.w	8004224 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800407c:	4b67      	ldr	r3, [pc, #412]	; (800421c <HAL_RCC_OscConfig+0x754>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f003 0203 	and.w	r2, r3, #3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	429a      	cmp	r2, r3
 800408e:	d130      	bne.n	80040f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	3b01      	subs	r3, #1
 800409c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800409e:	429a      	cmp	r2, r3
 80040a0:	d127      	bne.n	80040f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d11f      	bne.n	80040f2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040bc:	2a07      	cmp	r2, #7
 80040be:	bf14      	ite	ne
 80040c0:	2201      	movne	r2, #1
 80040c2:	2200      	moveq	r2, #0
 80040c4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d113      	bne.n	80040f2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d4:	085b      	lsrs	r3, r3, #1
 80040d6:	3b01      	subs	r3, #1
 80040d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040da:	429a      	cmp	r2, r3
 80040dc:	d109      	bne.n	80040f2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e8:	085b      	lsrs	r3, r3, #1
 80040ea:	3b01      	subs	r3, #1
 80040ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d06e      	beq.n	80041d0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	2b0c      	cmp	r3, #12
 80040f6:	d069      	beq.n	80041cc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80040f8:	4b48      	ldr	r3, [pc, #288]	; (800421c <HAL_RCC_OscConfig+0x754>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d105      	bne.n	8004110 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004104:	4b45      	ldr	r3, [pc, #276]	; (800421c <HAL_RCC_OscConfig+0x754>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e0bb      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004114:	4b41      	ldr	r3, [pc, #260]	; (800421c <HAL_RCC_OscConfig+0x754>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a40      	ldr	r2, [pc, #256]	; (800421c <HAL_RCC_OscConfig+0x754>)
 800411a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800411e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004120:	f7fe fb56 	bl	80027d0 <HAL_GetTick>
 8004124:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004126:	e008      	b.n	800413a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004128:	f7fe fb52 	bl	80027d0 <HAL_GetTick>
 800412c:	4602      	mov	r2, r0
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	2b02      	cmp	r3, #2
 8004134:	d901      	bls.n	800413a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e0a8      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800413a:	4b38      	ldr	r3, [pc, #224]	; (800421c <HAL_RCC_OscConfig+0x754>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f0      	bne.n	8004128 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004146:	4b35      	ldr	r3, [pc, #212]	; (800421c <HAL_RCC_OscConfig+0x754>)
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	4b35      	ldr	r3, [pc, #212]	; (8004220 <HAL_RCC_OscConfig+0x758>)
 800414c:	4013      	ands	r3, r2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004156:	3a01      	subs	r2, #1
 8004158:	0112      	lsls	r2, r2, #4
 800415a:	4311      	orrs	r1, r2
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004160:	0212      	lsls	r2, r2, #8
 8004162:	4311      	orrs	r1, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004168:	0852      	lsrs	r2, r2, #1
 800416a:	3a01      	subs	r2, #1
 800416c:	0552      	lsls	r2, r2, #21
 800416e:	4311      	orrs	r1, r2
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004174:	0852      	lsrs	r2, r2, #1
 8004176:	3a01      	subs	r2, #1
 8004178:	0652      	lsls	r2, r2, #25
 800417a:	4311      	orrs	r1, r2
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004180:	0912      	lsrs	r2, r2, #4
 8004182:	0452      	lsls	r2, r2, #17
 8004184:	430a      	orrs	r2, r1
 8004186:	4925      	ldr	r1, [pc, #148]	; (800421c <HAL_RCC_OscConfig+0x754>)
 8004188:	4313      	orrs	r3, r2
 800418a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800418c:	4b23      	ldr	r3, [pc, #140]	; (800421c <HAL_RCC_OscConfig+0x754>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a22      	ldr	r2, [pc, #136]	; (800421c <HAL_RCC_OscConfig+0x754>)
 8004192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004196:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004198:	4b20      	ldr	r3, [pc, #128]	; (800421c <HAL_RCC_OscConfig+0x754>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	4a1f      	ldr	r2, [pc, #124]	; (800421c <HAL_RCC_OscConfig+0x754>)
 800419e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041a2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041a4:	f7fe fb14 	bl	80027d0 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ac:	f7fe fb10 	bl	80027d0 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e066      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041be:	4b17      	ldr	r3, [pc, #92]	; (800421c <HAL_RCC_OscConfig+0x754>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d0f0      	beq.n	80041ac <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041ca:	e05e      	b.n	800428a <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e05d      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041d0:	4b12      	ldr	r3, [pc, #72]	; (800421c <HAL_RCC_OscConfig+0x754>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d156      	bne.n	800428a <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80041dc:	4b0f      	ldr	r3, [pc, #60]	; (800421c <HAL_RCC_OscConfig+0x754>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a0e      	ldr	r2, [pc, #56]	; (800421c <HAL_RCC_OscConfig+0x754>)
 80041e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041e8:	4b0c      	ldr	r3, [pc, #48]	; (800421c <HAL_RCC_OscConfig+0x754>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	4a0b      	ldr	r2, [pc, #44]	; (800421c <HAL_RCC_OscConfig+0x754>)
 80041ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041f4:	f7fe faec 	bl	80027d0 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041fc:	f7fe fae8 	bl	80027d0 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e03e      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800420e:	4b03      	ldr	r3, [pc, #12]	; (800421c <HAL_RCC_OscConfig+0x754>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f0      	beq.n	80041fc <HAL_RCC_OscConfig+0x734>
 800421a:	e036      	b.n	800428a <HAL_RCC_OscConfig+0x7c2>
 800421c:	40021000 	.word	0x40021000
 8004220:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	2b0c      	cmp	r3, #12
 8004228:	d02d      	beq.n	8004286 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800422a:	4b1a      	ldr	r3, [pc, #104]	; (8004294 <HAL_RCC_OscConfig+0x7cc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a19      	ldr	r2, [pc, #100]	; (8004294 <HAL_RCC_OscConfig+0x7cc>)
 8004230:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004234:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004236:	4b17      	ldr	r3, [pc, #92]	; (8004294 <HAL_RCC_OscConfig+0x7cc>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d105      	bne.n	800424e <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004242:	4b14      	ldr	r3, [pc, #80]	; (8004294 <HAL_RCC_OscConfig+0x7cc>)
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	4a13      	ldr	r2, [pc, #76]	; (8004294 <HAL_RCC_OscConfig+0x7cc>)
 8004248:	f023 0303 	bic.w	r3, r3, #3
 800424c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800424e:	4b11      	ldr	r3, [pc, #68]	; (8004294 <HAL_RCC_OscConfig+0x7cc>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	4a10      	ldr	r2, [pc, #64]	; (8004294 <HAL_RCC_OscConfig+0x7cc>)
 8004254:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004258:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800425c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425e:	f7fe fab7 	bl	80027d0 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004266:	f7fe fab3 	bl	80027d0 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e009      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004278:	4b06      	ldr	r3, [pc, #24]	; (8004294 <HAL_RCC_OscConfig+0x7cc>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d1f0      	bne.n	8004266 <HAL_RCC_OscConfig+0x79e>
 8004284:	e001      	b.n	800428a <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800428a:	2300      	movs	r3, #0
}
 800428c:	4618      	mov	r0, r3
 800428e:	3720      	adds	r7, #32
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	40021000 	.word	0x40021000

08004298 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d101      	bne.n	80042ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e0c8      	b.n	800443e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042ac:	4b66      	ldr	r3, [pc, #408]	; (8004448 <HAL_RCC_ClockConfig+0x1b0>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d910      	bls.n	80042dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ba:	4b63      	ldr	r3, [pc, #396]	; (8004448 <HAL_RCC_ClockConfig+0x1b0>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f023 0207 	bic.w	r2, r3, #7
 80042c2:	4961      	ldr	r1, [pc, #388]	; (8004448 <HAL_RCC_ClockConfig+0x1b0>)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ca:	4b5f      	ldr	r3, [pc, #380]	; (8004448 <HAL_RCC_ClockConfig+0x1b0>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e0b0      	b.n	800443e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0301 	and.w	r3, r3, #1
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d04c      	beq.n	8004382 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b03      	cmp	r3, #3
 80042ee:	d107      	bne.n	8004300 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042f0:	4b56      	ldr	r3, [pc, #344]	; (800444c <HAL_RCC_ClockConfig+0x1b4>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d121      	bne.n	8004340 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e09e      	b.n	800443e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d107      	bne.n	8004318 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004308:	4b50      	ldr	r3, [pc, #320]	; (800444c <HAL_RCC_ClockConfig+0x1b4>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004310:	2b00      	cmp	r3, #0
 8004312:	d115      	bne.n	8004340 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e092      	b.n	800443e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d107      	bne.n	8004330 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004320:	4b4a      	ldr	r3, [pc, #296]	; (800444c <HAL_RCC_ClockConfig+0x1b4>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d109      	bne.n	8004340 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e086      	b.n	800443e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004330:	4b46      	ldr	r3, [pc, #280]	; (800444c <HAL_RCC_ClockConfig+0x1b4>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004338:	2b00      	cmp	r3, #0
 800433a:	d101      	bne.n	8004340 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e07e      	b.n	800443e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004340:	4b42      	ldr	r3, [pc, #264]	; (800444c <HAL_RCC_ClockConfig+0x1b4>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f023 0203 	bic.w	r2, r3, #3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	493f      	ldr	r1, [pc, #252]	; (800444c <HAL_RCC_ClockConfig+0x1b4>)
 800434e:	4313      	orrs	r3, r2
 8004350:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004352:	f7fe fa3d 	bl	80027d0 <HAL_GetTick>
 8004356:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004358:	e00a      	b.n	8004370 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800435a:	f7fe fa39 	bl	80027d0 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	f241 3288 	movw	r2, #5000	; 0x1388
 8004368:	4293      	cmp	r3, r2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e066      	b.n	800443e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004370:	4b36      	ldr	r3, [pc, #216]	; (800444c <HAL_RCC_ClockConfig+0x1b4>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 020c 	and.w	r2, r3, #12
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	429a      	cmp	r2, r3
 8004380:	d1eb      	bne.n	800435a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d008      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800438e:	4b2f      	ldr	r3, [pc, #188]	; (800444c <HAL_RCC_ClockConfig+0x1b4>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	492c      	ldr	r1, [pc, #176]	; (800444c <HAL_RCC_ClockConfig+0x1b4>)
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043a0:	4b29      	ldr	r3, [pc, #164]	; (8004448 <HAL_RCC_ClockConfig+0x1b0>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0307 	and.w	r3, r3, #7
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d210      	bcs.n	80043d0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ae:	4b26      	ldr	r3, [pc, #152]	; (8004448 <HAL_RCC_ClockConfig+0x1b0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f023 0207 	bic.w	r2, r3, #7
 80043b6:	4924      	ldr	r1, [pc, #144]	; (8004448 <HAL_RCC_ClockConfig+0x1b0>)
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043be:	4b22      	ldr	r3, [pc, #136]	; (8004448 <HAL_RCC_ClockConfig+0x1b0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d001      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e036      	b.n	800443e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0304 	and.w	r3, r3, #4
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043dc:	4b1b      	ldr	r3, [pc, #108]	; (800444c <HAL_RCC_ClockConfig+0x1b4>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	4918      	ldr	r1, [pc, #96]	; (800444c <HAL_RCC_ClockConfig+0x1b4>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d009      	beq.n	800440e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043fa:	4b14      	ldr	r3, [pc, #80]	; (800444c <HAL_RCC_ClockConfig+0x1b4>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	4910      	ldr	r1, [pc, #64]	; (800444c <HAL_RCC_ClockConfig+0x1b4>)
 800440a:	4313      	orrs	r3, r2
 800440c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800440e:	f000 f825 	bl	800445c <HAL_RCC_GetSysClockFreq>
 8004412:	4602      	mov	r2, r0
 8004414:	4b0d      	ldr	r3, [pc, #52]	; (800444c <HAL_RCC_ClockConfig+0x1b4>)
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	091b      	lsrs	r3, r3, #4
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	490c      	ldr	r1, [pc, #48]	; (8004450 <HAL_RCC_ClockConfig+0x1b8>)
 8004420:	5ccb      	ldrb	r3, [r1, r3]
 8004422:	f003 031f 	and.w	r3, r3, #31
 8004426:	fa22 f303 	lsr.w	r3, r2, r3
 800442a:	4a0a      	ldr	r2, [pc, #40]	; (8004454 <HAL_RCC_ClockConfig+0x1bc>)
 800442c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800442e:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <HAL_RCC_ClockConfig+0x1c0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4618      	mov	r0, r3
 8004434:	f7fe f97c 	bl	8002730 <HAL_InitTick>
 8004438:	4603      	mov	r3, r0
 800443a:	72fb      	strb	r3, [r7, #11]

  return status;
 800443c:	7afb      	ldrb	r3, [r7, #11]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40022000 	.word	0x40022000
 800444c:	40021000 	.word	0x40021000
 8004450:	08007de0 	.word	0x08007de0
 8004454:	20001600 	.word	0x20001600
 8004458:	20001604 	.word	0x20001604

0800445c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800445c:	b480      	push	{r7}
 800445e:	b089      	sub	sp, #36	; 0x24
 8004460:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004462:	2300      	movs	r3, #0
 8004464:	61fb      	str	r3, [r7, #28]
 8004466:	2300      	movs	r3, #0
 8004468:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800446a:	4b3e      	ldr	r3, [pc, #248]	; (8004564 <HAL_RCC_GetSysClockFreq+0x108>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 030c 	and.w	r3, r3, #12
 8004472:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004474:	4b3b      	ldr	r3, [pc, #236]	; (8004564 <HAL_RCC_GetSysClockFreq+0x108>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f003 0303 	and.w	r3, r3, #3
 800447c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0x34>
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	2b0c      	cmp	r3, #12
 8004488:	d121      	bne.n	80044ce <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d11e      	bne.n	80044ce <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004490:	4b34      	ldr	r3, [pc, #208]	; (8004564 <HAL_RCC_GetSysClockFreq+0x108>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0308 	and.w	r3, r3, #8
 8004498:	2b00      	cmp	r3, #0
 800449a:	d107      	bne.n	80044ac <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800449c:	4b31      	ldr	r3, [pc, #196]	; (8004564 <HAL_RCC_GetSysClockFreq+0x108>)
 800449e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044a2:	0a1b      	lsrs	r3, r3, #8
 80044a4:	f003 030f 	and.w	r3, r3, #15
 80044a8:	61fb      	str	r3, [r7, #28]
 80044aa:	e005      	b.n	80044b8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044ac:	4b2d      	ldr	r3, [pc, #180]	; (8004564 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	091b      	lsrs	r3, r3, #4
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044b8:	4a2b      	ldr	r2, [pc, #172]	; (8004568 <HAL_RCC_GetSysClockFreq+0x10c>)
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044c0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10d      	bne.n	80044e4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044cc:	e00a      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	2b04      	cmp	r3, #4
 80044d2:	d102      	bne.n	80044da <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044d4:	4b25      	ldr	r3, [pc, #148]	; (800456c <HAL_RCC_GetSysClockFreq+0x110>)
 80044d6:	61bb      	str	r3, [r7, #24]
 80044d8:	e004      	b.n	80044e4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d101      	bne.n	80044e4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044e0:	4b23      	ldr	r3, [pc, #140]	; (8004570 <HAL_RCC_GetSysClockFreq+0x114>)
 80044e2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	2b0c      	cmp	r3, #12
 80044e8:	d134      	bne.n	8004554 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044ea:	4b1e      	ldr	r3, [pc, #120]	; (8004564 <HAL_RCC_GetSysClockFreq+0x108>)
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d003      	beq.n	8004502 <HAL_RCC_GetSysClockFreq+0xa6>
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d003      	beq.n	8004508 <HAL_RCC_GetSysClockFreq+0xac>
 8004500:	e005      	b.n	800450e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004502:	4b1a      	ldr	r3, [pc, #104]	; (800456c <HAL_RCC_GetSysClockFreq+0x110>)
 8004504:	617b      	str	r3, [r7, #20]
      break;
 8004506:	e005      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004508:	4b19      	ldr	r3, [pc, #100]	; (8004570 <HAL_RCC_GetSysClockFreq+0x114>)
 800450a:	617b      	str	r3, [r7, #20]
      break;
 800450c:	e002      	b.n	8004514 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	617b      	str	r3, [r7, #20]
      break;
 8004512:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004514:	4b13      	ldr	r3, [pc, #76]	; (8004564 <HAL_RCC_GetSysClockFreq+0x108>)
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	091b      	lsrs	r3, r3, #4
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	3301      	adds	r3, #1
 8004520:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004522:	4b10      	ldr	r3, [pc, #64]	; (8004564 <HAL_RCC_GetSysClockFreq+0x108>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	0a1b      	lsrs	r3, r3, #8
 8004528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	fb03 f202 	mul.w	r2, r3, r2
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	fbb2 f3f3 	udiv	r3, r2, r3
 8004538:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800453a:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <HAL_RCC_GetSysClockFreq+0x108>)
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	0e5b      	lsrs	r3, r3, #25
 8004540:	f003 0303 	and.w	r3, r3, #3
 8004544:	3301      	adds	r3, #1
 8004546:	005b      	lsls	r3, r3, #1
 8004548:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004552:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004554:	69bb      	ldr	r3, [r7, #24]
}
 8004556:	4618      	mov	r0, r3
 8004558:	3724      	adds	r7, #36	; 0x24
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	40021000 	.word	0x40021000
 8004568:	08007df8 	.word	0x08007df8
 800456c:	00f42400 	.word	0x00f42400
 8004570:	007a1200 	.word	0x007a1200

08004574 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004578:	4b03      	ldr	r3, [pc, #12]	; (8004588 <HAL_RCC_GetHCLKFreq+0x14>)
 800457a:	681b      	ldr	r3, [r3, #0]
}
 800457c:	4618      	mov	r0, r3
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	20001600 	.word	0x20001600

0800458c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004590:	f7ff fff0 	bl	8004574 <HAL_RCC_GetHCLKFreq>
 8004594:	4602      	mov	r2, r0
 8004596:	4b06      	ldr	r3, [pc, #24]	; (80045b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	0a1b      	lsrs	r3, r3, #8
 800459c:	f003 0307 	and.w	r3, r3, #7
 80045a0:	4904      	ldr	r1, [pc, #16]	; (80045b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80045a2:	5ccb      	ldrb	r3, [r1, r3]
 80045a4:	f003 031f 	and.w	r3, r3, #31
 80045a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40021000 	.word	0x40021000
 80045b4:	08007df0 	.word	0x08007df0

080045b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045bc:	f7ff ffda 	bl	8004574 <HAL_RCC_GetHCLKFreq>
 80045c0:	4602      	mov	r2, r0
 80045c2:	4b06      	ldr	r3, [pc, #24]	; (80045dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	0adb      	lsrs	r3, r3, #11
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	4904      	ldr	r1, [pc, #16]	; (80045e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045ce:	5ccb      	ldrb	r3, [r1, r3]
 80045d0:	f003 031f 	and.w	r3, r3, #31
 80045d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045d8:	4618      	mov	r0, r3
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40021000 	.word	0x40021000
 80045e0:	08007df0 	.word	0x08007df0

080045e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045ec:	2300      	movs	r3, #0
 80045ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045f0:	4b2a      	ldr	r3, [pc, #168]	; (800469c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045fc:	f7ff fa00 	bl	8003a00 <HAL_PWREx_GetVoltageRange>
 8004600:	6178      	str	r0, [r7, #20]
 8004602:	e014      	b.n	800462e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004604:	4b25      	ldr	r3, [pc, #148]	; (800469c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004608:	4a24      	ldr	r2, [pc, #144]	; (800469c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800460a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460e:	6593      	str	r3, [r2, #88]	; 0x58
 8004610:	4b22      	ldr	r3, [pc, #136]	; (800469c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800461c:	f7ff f9f0 	bl	8003a00 <HAL_PWREx_GetVoltageRange>
 8004620:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004622:	4b1e      	ldr	r3, [pc, #120]	; (800469c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004626:	4a1d      	ldr	r2, [pc, #116]	; (800469c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800462c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004634:	d10b      	bne.n	800464e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b80      	cmp	r3, #128	; 0x80
 800463a:	d919      	bls.n	8004670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2ba0      	cmp	r3, #160	; 0xa0
 8004640:	d902      	bls.n	8004648 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004642:	2302      	movs	r3, #2
 8004644:	613b      	str	r3, [r7, #16]
 8004646:	e013      	b.n	8004670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004648:	2301      	movs	r3, #1
 800464a:	613b      	str	r3, [r7, #16]
 800464c:	e010      	b.n	8004670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b80      	cmp	r3, #128	; 0x80
 8004652:	d902      	bls.n	800465a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004654:	2303      	movs	r3, #3
 8004656:	613b      	str	r3, [r7, #16]
 8004658:	e00a      	b.n	8004670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b80      	cmp	r3, #128	; 0x80
 800465e:	d102      	bne.n	8004666 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004660:	2302      	movs	r3, #2
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	e004      	b.n	8004670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2b70      	cmp	r3, #112	; 0x70
 800466a:	d101      	bne.n	8004670 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800466c:	2301      	movs	r3, #1
 800466e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004670:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f023 0207 	bic.w	r2, r3, #7
 8004678:	4909      	ldr	r1, [pc, #36]	; (80046a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	4313      	orrs	r3, r2
 800467e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0307 	and.w	r3, r3, #7
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	429a      	cmp	r2, r3
 800468c:	d001      	beq.n	8004692 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40021000 	.word	0x40021000
 80046a0:	40022000 	.word	0x40022000

080046a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046ac:	2300      	movs	r3, #0
 80046ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046b0:	2300      	movs	r3, #0
 80046b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d041      	beq.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046c4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046c8:	d02a      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80046ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046ce:	d824      	bhi.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046d4:	d008      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80046d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046da:	d81e      	bhi.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00a      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80046e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e4:	d010      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80046e6:	e018      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046e8:	4b86      	ldr	r3, [pc, #536]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	4a85      	ldr	r2, [pc, #532]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046f4:	e015      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	3304      	adds	r3, #4
 80046fa:	2100      	movs	r1, #0
 80046fc:	4618      	mov	r0, r3
 80046fe:	f000 fabb 	bl	8004c78 <RCCEx_PLLSAI1_Config>
 8004702:	4603      	mov	r3, r0
 8004704:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004706:	e00c      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3320      	adds	r3, #32
 800470c:	2100      	movs	r1, #0
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fba6 	bl	8004e60 <RCCEx_PLLSAI2_Config>
 8004714:	4603      	mov	r3, r0
 8004716:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004718:	e003      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	74fb      	strb	r3, [r7, #19]
      break;
 800471e:	e000      	b.n	8004722 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004720:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004722:	7cfb      	ldrb	r3, [r7, #19]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10b      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004728:	4b76      	ldr	r3, [pc, #472]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800472e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004736:	4973      	ldr	r1, [pc, #460]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800473e:	e001      	b.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004740:	7cfb      	ldrb	r3, [r7, #19]
 8004742:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d041      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004754:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004758:	d02a      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800475a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800475e:	d824      	bhi.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004760:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004764:	d008      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004766:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800476a:	d81e      	bhi.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800476c:	2b00      	cmp	r3, #0
 800476e:	d00a      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004774:	d010      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004776:	e018      	b.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004778:	4b62      	ldr	r3, [pc, #392]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	4a61      	ldr	r2, [pc, #388]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800477e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004782:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004784:	e015      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	3304      	adds	r3, #4
 800478a:	2100      	movs	r1, #0
 800478c:	4618      	mov	r0, r3
 800478e:	f000 fa73 	bl	8004c78 <RCCEx_PLLSAI1_Config>
 8004792:	4603      	mov	r3, r0
 8004794:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004796:	e00c      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3320      	adds	r3, #32
 800479c:	2100      	movs	r1, #0
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fb5e 	bl	8004e60 <RCCEx_PLLSAI2_Config>
 80047a4:	4603      	mov	r3, r0
 80047a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047a8:	e003      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	74fb      	strb	r3, [r7, #19]
      break;
 80047ae:	e000      	b.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80047b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047b2:	7cfb      	ldrb	r3, [r7, #19]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10b      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047b8:	4b52      	ldr	r3, [pc, #328]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047be:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047c6:	494f      	ldr	r1, [pc, #316]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047ce:	e001      	b.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d0:	7cfb      	ldrb	r3, [r7, #19]
 80047d2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 80a0 	beq.w	8004922 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e2:	2300      	movs	r3, #0
 80047e4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80047e6:	4b47      	ldr	r3, [pc, #284]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80047f2:	2301      	movs	r3, #1
 80047f4:	e000      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80047f6:	2300      	movs	r3, #0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00d      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047fc:	4b41      	ldr	r3, [pc, #260]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004800:	4a40      	ldr	r2, [pc, #256]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004806:	6593      	str	r3, [r2, #88]	; 0x58
 8004808:	4b3e      	ldr	r3, [pc, #248]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800480a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004810:	60bb      	str	r3, [r7, #8]
 8004812:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004814:	2301      	movs	r3, #1
 8004816:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004818:	4b3b      	ldr	r3, [pc, #236]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a3a      	ldr	r2, [pc, #232]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800481e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004822:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004824:	f7fd ffd4 	bl	80027d0 <HAL_GetTick>
 8004828:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800482a:	e009      	b.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482c:	f7fd ffd0 	bl	80027d0 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d902      	bls.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	74fb      	strb	r3, [r7, #19]
        break;
 800483e:	e005      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004840:	4b31      	ldr	r3, [pc, #196]	; (8004908 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0ef      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800484c:	7cfb      	ldrb	r3, [r7, #19]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d15c      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004852:	4b2c      	ldr	r3, [pc, #176]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004858:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800485c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d01f      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	429a      	cmp	r2, r3
 800486e:	d019      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004870:	4b24      	ldr	r3, [pc, #144]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800487a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800487c:	4b21      	ldr	r3, [pc, #132]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004882:	4a20      	ldr	r2, [pc, #128]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004888:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800488c:	4b1d      	ldr	r3, [pc, #116]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800488e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004892:	4a1c      	ldr	r2, [pc, #112]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004894:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800489c:	4a19      	ldr	r2, [pc, #100]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d016      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048ae:	f7fd ff8f 	bl	80027d0 <HAL_GetTick>
 80048b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048b4:	e00b      	b.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b6:	f7fd ff8b 	bl	80027d0 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d902      	bls.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	74fb      	strb	r3, [r7, #19]
            break;
 80048cc:	e006      	b.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ce:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d0ec      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80048dc:	7cfb      	ldrb	r3, [r7, #19]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10c      	bne.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f2:	4904      	ldr	r1, [pc, #16]	; (8004904 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048fa:	e009      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048fc:	7cfb      	ldrb	r3, [r7, #19]
 80048fe:	74bb      	strb	r3, [r7, #18]
 8004900:	e006      	b.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004902:	bf00      	nop
 8004904:	40021000 	.word	0x40021000
 8004908:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490c:	7cfb      	ldrb	r3, [r7, #19]
 800490e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004910:	7c7b      	ldrb	r3, [r7, #17]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d105      	bne.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004916:	4b9e      	ldr	r3, [pc, #632]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491a:	4a9d      	ldr	r2, [pc, #628]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004920:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800492e:	4b98      	ldr	r3, [pc, #608]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004934:	f023 0203 	bic.w	r2, r3, #3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493c:	4994      	ldr	r1, [pc, #592]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004950:	4b8f      	ldr	r3, [pc, #572]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004956:	f023 020c 	bic.w	r2, r3, #12
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495e:	498c      	ldr	r1, [pc, #560]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004972:	4b87      	ldr	r3, [pc, #540]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004978:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004980:	4983      	ldr	r1, [pc, #524]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0308 	and.w	r3, r3, #8
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004994:	4b7e      	ldr	r3, [pc, #504]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	497b      	ldr	r1, [pc, #492]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049b6:	4b76      	ldr	r3, [pc, #472]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c4:	4972      	ldr	r1, [pc, #456]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0320 	and.w	r3, r3, #32
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00a      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80049d8:	4b6d      	ldr	r3, [pc, #436]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049e6:	496a      	ldr	r1, [pc, #424]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049fa:	4b65      	ldr	r3, [pc, #404]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a08:	4961      	ldr	r1, [pc, #388]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00a      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a1c:	4b5c      	ldr	r3, [pc, #368]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a2a:	4959      	ldr	r1, [pc, #356]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d00a      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a3e:	4b54      	ldr	r3, [pc, #336]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a44:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a4c:	4950      	ldr	r1, [pc, #320]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a60:	4b4b      	ldr	r3, [pc, #300]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a66:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6e:	4948      	ldr	r1, [pc, #288]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d00a      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a82:	4b43      	ldr	r3, [pc, #268]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a90:	493f      	ldr	r1, [pc, #252]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d028      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004aa4:	4b3a      	ldr	r3, [pc, #232]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aaa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ab2:	4937      	ldr	r1, [pc, #220]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004abe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ac2:	d106      	bne.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ac4:	4b32      	ldr	r3, [pc, #200]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	4a31      	ldr	r2, [pc, #196]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ace:	60d3      	str	r3, [r2, #12]
 8004ad0:	e011      	b.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ad6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ada:	d10c      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	2101      	movs	r1, #1
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 f8c8 	bl	8004c78 <RCCEx_PLLSAI1_Config>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004aec:	7cfb      	ldrb	r3, [r7, #19]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004af2:	7cfb      	ldrb	r3, [r7, #19]
 8004af4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d028      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b02:	4b23      	ldr	r3, [pc, #140]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b08:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b10:	491f      	ldr	r1, [pc, #124]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b20:	d106      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b22:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	4a1a      	ldr	r2, [pc, #104]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b2c:	60d3      	str	r3, [r2, #12]
 8004b2e:	e011      	b.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b34:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b38:	d10c      	bne.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	2101      	movs	r1, #1
 8004b40:	4618      	mov	r0, r3
 8004b42:	f000 f899 	bl	8004c78 <RCCEx_PLLSAI1_Config>
 8004b46:	4603      	mov	r3, r0
 8004b48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b4a:	7cfb      	ldrb	r3, [r7, #19]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004b50:	7cfb      	ldrb	r3, [r7, #19]
 8004b52:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d02b      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b60:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b6e:	4908      	ldr	r1, [pc, #32]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b7e:	d109      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b80:	4b03      	ldr	r3, [pc, #12]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	4a02      	ldr	r2, [pc, #8]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b8a:	60d3      	str	r3, [r2, #12]
 8004b8c:	e014      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004b8e:	bf00      	nop
 8004b90:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b9c:	d10c      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3304      	adds	r3, #4
 8004ba2:	2101      	movs	r1, #1
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f000 f867 	bl	8004c78 <RCCEx_PLLSAI1_Config>
 8004baa:	4603      	mov	r3, r0
 8004bac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bae:	7cfb      	ldrb	r3, [r7, #19]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004bb4:	7cfb      	ldrb	r3, [r7, #19]
 8004bb6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d02f      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bc4:	4b2b      	ldr	r3, [pc, #172]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bd2:	4928      	ldr	r1, [pc, #160]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004be2:	d10d      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3304      	adds	r3, #4
 8004be8:	2102      	movs	r1, #2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 f844 	bl	8004c78 <RCCEx_PLLSAI1_Config>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bf4:	7cfb      	ldrb	r3, [r7, #19]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d014      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004bfa:	7cfb      	ldrb	r3, [r7, #19]
 8004bfc:	74bb      	strb	r3, [r7, #18]
 8004bfe:	e011      	b.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c08:	d10c      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	3320      	adds	r3, #32
 8004c0e:	2102      	movs	r1, #2
 8004c10:	4618      	mov	r0, r3
 8004c12:	f000 f925 	bl	8004e60 <RCCEx_PLLSAI2_Config>
 8004c16:	4603      	mov	r3, r0
 8004c18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c1a:	7cfb      	ldrb	r3, [r7, #19]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c20:	7cfb      	ldrb	r3, [r7, #19]
 8004c22:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00a      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c30:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c36:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c3e:	490d      	ldr	r1, [pc, #52]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00b      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c52:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c62:	4904      	ldr	r1, [pc, #16]	; (8004c74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3718      	adds	r7, #24
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	40021000 	.word	0x40021000

08004c78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c86:	4b75      	ldr	r3, [pc, #468]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d018      	beq.n	8004cc4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c92:	4b72      	ldr	r3, [pc, #456]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f003 0203 	and.w	r2, r3, #3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d10d      	bne.n	8004cbe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
       ||
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d009      	beq.n	8004cbe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004caa:	4b6c      	ldr	r3, [pc, #432]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
       ||
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d047      	beq.n	8004d4e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	73fb      	strb	r3, [r7, #15]
 8004cc2:	e044      	b.n	8004d4e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d018      	beq.n	8004cfe <RCCEx_PLLSAI1_Config+0x86>
 8004ccc:	2b03      	cmp	r3, #3
 8004cce:	d825      	bhi.n	8004d1c <RCCEx_PLLSAI1_Config+0xa4>
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d002      	beq.n	8004cda <RCCEx_PLLSAI1_Config+0x62>
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d009      	beq.n	8004cec <RCCEx_PLLSAI1_Config+0x74>
 8004cd8:	e020      	b.n	8004d1c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cda:	4b60      	ldr	r3, [pc, #384]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d11d      	bne.n	8004d22 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cea:	e01a      	b.n	8004d22 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cec:	4b5b      	ldr	r3, [pc, #364]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d116      	bne.n	8004d26 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cfc:	e013      	b.n	8004d26 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cfe:	4b57      	ldr	r3, [pc, #348]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10f      	bne.n	8004d2a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d0a:	4b54      	ldr	r3, [pc, #336]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d109      	bne.n	8004d2a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d1a:	e006      	b.n	8004d2a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d20:	e004      	b.n	8004d2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d22:	bf00      	nop
 8004d24:	e002      	b.n	8004d2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d26:	bf00      	nop
 8004d28:	e000      	b.n	8004d2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d10d      	bne.n	8004d4e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d32:	4b4a      	ldr	r3, [pc, #296]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6819      	ldr	r1, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	430b      	orrs	r3, r1
 8004d48:	4944      	ldr	r1, [pc, #272]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d4e:	7bfb      	ldrb	r3, [r7, #15]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d17d      	bne.n	8004e50 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d54:	4b41      	ldr	r3, [pc, #260]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a40      	ldr	r2, [pc, #256]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d60:	f7fd fd36 	bl	80027d0 <HAL_GetTick>
 8004d64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d66:	e009      	b.n	8004d7c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d68:	f7fd fd32 	bl	80027d0 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b02      	cmp	r3, #2
 8004d74:	d902      	bls.n	8004d7c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	73fb      	strb	r3, [r7, #15]
        break;
 8004d7a:	e005      	b.n	8004d88 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d7c:	4b37      	ldr	r3, [pc, #220]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1ef      	bne.n	8004d68 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d160      	bne.n	8004e50 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d111      	bne.n	8004db8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d94:	4b31      	ldr	r3, [pc, #196]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6892      	ldr	r2, [r2, #8]
 8004da4:	0211      	lsls	r1, r2, #8
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	68d2      	ldr	r2, [r2, #12]
 8004daa:	0912      	lsrs	r2, r2, #4
 8004dac:	0452      	lsls	r2, r2, #17
 8004dae:	430a      	orrs	r2, r1
 8004db0:	492a      	ldr	r1, [pc, #168]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	610b      	str	r3, [r1, #16]
 8004db6:	e027      	b.n	8004e08 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d112      	bne.n	8004de4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dbe:	4b27      	ldr	r3, [pc, #156]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004dc6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	6892      	ldr	r2, [r2, #8]
 8004dce:	0211      	lsls	r1, r2, #8
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6912      	ldr	r2, [r2, #16]
 8004dd4:	0852      	lsrs	r2, r2, #1
 8004dd6:	3a01      	subs	r2, #1
 8004dd8:	0552      	lsls	r2, r2, #21
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	491f      	ldr	r1, [pc, #124]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	610b      	str	r3, [r1, #16]
 8004de2:	e011      	b.n	8004e08 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004de4:	4b1d      	ldr	r3, [pc, #116]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004dec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6892      	ldr	r2, [r2, #8]
 8004df4:	0211      	lsls	r1, r2, #8
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6952      	ldr	r2, [r2, #20]
 8004dfa:	0852      	lsrs	r2, r2, #1
 8004dfc:	3a01      	subs	r2, #1
 8004dfe:	0652      	lsls	r2, r2, #25
 8004e00:	430a      	orrs	r2, r1
 8004e02:	4916      	ldr	r1, [pc, #88]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e08:	4b14      	ldr	r3, [pc, #80]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a13      	ldr	r2, [pc, #76]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e0e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e14:	f7fd fcdc 	bl	80027d0 <HAL_GetTick>
 8004e18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e1a:	e009      	b.n	8004e30 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e1c:	f7fd fcd8 	bl	80027d0 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d902      	bls.n	8004e30 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004e2a:	2303      	movs	r3, #3
 8004e2c:	73fb      	strb	r3, [r7, #15]
          break;
 8004e2e:	e005      	b.n	8004e3c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e30:	4b0a      	ldr	r3, [pc, #40]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0ef      	beq.n	8004e1c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d106      	bne.n	8004e50 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e42:	4b06      	ldr	r3, [pc, #24]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e44:	691a      	ldr	r2, [r3, #16]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	4904      	ldr	r1, [pc, #16]	; (8004e5c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40021000 	.word	0x40021000

08004e60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e6e:	4b6a      	ldr	r3, [pc, #424]	; (8005018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f003 0303 	and.w	r3, r3, #3
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d018      	beq.n	8004eac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e7a:	4b67      	ldr	r3, [pc, #412]	; (8005018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f003 0203 	and.w	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d10d      	bne.n	8004ea6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
       ||
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d009      	beq.n	8004ea6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e92:	4b61      	ldr	r3, [pc, #388]	; (8005018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	091b      	lsrs	r3, r3, #4
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	1c5a      	adds	r2, r3, #1
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
       ||
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d047      	beq.n	8004f36 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	73fb      	strb	r3, [r7, #15]
 8004eaa:	e044      	b.n	8004f36 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b03      	cmp	r3, #3
 8004eb2:	d018      	beq.n	8004ee6 <RCCEx_PLLSAI2_Config+0x86>
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d825      	bhi.n	8004f04 <RCCEx_PLLSAI2_Config+0xa4>
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d002      	beq.n	8004ec2 <RCCEx_PLLSAI2_Config+0x62>
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d009      	beq.n	8004ed4 <RCCEx_PLLSAI2_Config+0x74>
 8004ec0:	e020      	b.n	8004f04 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ec2:	4b55      	ldr	r3, [pc, #340]	; (8005018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 0302 	and.w	r3, r3, #2
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d11d      	bne.n	8004f0a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ed2:	e01a      	b.n	8004f0a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ed4:	4b50      	ldr	r3, [pc, #320]	; (8005018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d116      	bne.n	8004f0e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ee4:	e013      	b.n	8004f0e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ee6:	4b4c      	ldr	r3, [pc, #304]	; (8005018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10f      	bne.n	8004f12 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004ef2:	4b49      	ldr	r3, [pc, #292]	; (8005018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d109      	bne.n	8004f12 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f02:	e006      	b.n	8004f12 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	73fb      	strb	r3, [r7, #15]
      break;
 8004f08:	e004      	b.n	8004f14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f0a:	bf00      	nop
 8004f0c:	e002      	b.n	8004f14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f0e:	bf00      	nop
 8004f10:	e000      	b.n	8004f14 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f12:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10d      	bne.n	8004f36 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f1a:	4b3f      	ldr	r3, [pc, #252]	; (8005018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6819      	ldr	r1, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	011b      	lsls	r3, r3, #4
 8004f2e:	430b      	orrs	r3, r1
 8004f30:	4939      	ldr	r1, [pc, #228]	; (8005018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f36:	7bfb      	ldrb	r3, [r7, #15]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d167      	bne.n	800500c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f3c:	4b36      	ldr	r3, [pc, #216]	; (8005018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a35      	ldr	r2, [pc, #212]	; (8005018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f48:	f7fd fc42 	bl	80027d0 <HAL_GetTick>
 8004f4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f4e:	e009      	b.n	8004f64 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f50:	f7fd fc3e 	bl	80027d0 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d902      	bls.n	8004f64 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	73fb      	strb	r3, [r7, #15]
        break;
 8004f62:	e005      	b.n	8004f70 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f64:	4b2c      	ldr	r3, [pc, #176]	; (8005018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1ef      	bne.n	8004f50 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d14a      	bne.n	800500c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d111      	bne.n	8004fa0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f7c:	4b26      	ldr	r3, [pc, #152]	; (8005018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6892      	ldr	r2, [r2, #8]
 8004f8c:	0211      	lsls	r1, r2, #8
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	68d2      	ldr	r2, [r2, #12]
 8004f92:	0912      	lsrs	r2, r2, #4
 8004f94:	0452      	lsls	r2, r2, #17
 8004f96:	430a      	orrs	r2, r1
 8004f98:	491f      	ldr	r1, [pc, #124]	; (8005018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	614b      	str	r3, [r1, #20]
 8004f9e:	e011      	b.n	8004fc4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fa0:	4b1d      	ldr	r3, [pc, #116]	; (8005018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa2:	695b      	ldr	r3, [r3, #20]
 8004fa4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004fa8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6892      	ldr	r2, [r2, #8]
 8004fb0:	0211      	lsls	r1, r2, #8
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6912      	ldr	r2, [r2, #16]
 8004fb6:	0852      	lsrs	r2, r2, #1
 8004fb8:	3a01      	subs	r2, #1
 8004fba:	0652      	lsls	r2, r2, #25
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	4916      	ldr	r1, [pc, #88]	; (8005018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004fc4:	4b14      	ldr	r3, [pc, #80]	; (8005018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a13      	ldr	r2, [pc, #76]	; (8005018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fd0:	f7fd fbfe 	bl	80027d0 <HAL_GetTick>
 8004fd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fd6:	e009      	b.n	8004fec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fd8:	f7fd fbfa 	bl	80027d0 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d902      	bls.n	8004fec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	73fb      	strb	r3, [r7, #15]
          break;
 8004fea:	e005      	b.n	8004ff8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fec:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0ef      	beq.n	8004fd8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004ffe:	4b06      	ldr	r3, [pc, #24]	; (8005018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005000:	695a      	ldr	r2, [r3, #20]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	695b      	ldr	r3, [r3, #20]
 8005006:	4904      	ldr	r1, [pc, #16]	; (8005018 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005008:	4313      	orrs	r3, r2
 800500a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800500c:	7bfb      	ldrb	r3, [r7, #15]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	40021000 	.word	0x40021000

0800501c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e095      	b.n	800515a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	2b00      	cmp	r3, #0
 8005034:	d108      	bne.n	8005048 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800503e:	d009      	beq.n	8005054 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	61da      	str	r2, [r3, #28]
 8005046:	e005      	b.n	8005054 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d106      	bne.n	8005074 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fd f9c4 	bl	80023fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800508a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005094:	d902      	bls.n	800509c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005096:	2300      	movs	r3, #0
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	e002      	b.n	80050a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800509c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80050aa:	d007      	beq.n	80050bc <HAL_SPI_Init+0xa0>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	68db      	ldr	r3, [r3, #12]
 80050b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050b4:	d002      	beq.n	80050bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	69db      	ldr	r3, [r3, #28]
 80050f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050f4:	431a      	orrs	r2, r3
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fe:	ea42 0103 	orr.w	r1, r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005106:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	0c1b      	lsrs	r3, r3, #16
 8005118:	f003 0204 	and.w	r2, r3, #4
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	f003 0310 	and.w	r3, r3, #16
 8005124:	431a      	orrs	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800512a:	f003 0308 	and.w	r3, r3, #8
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005138:	ea42 0103 	orr.w	r1, r2, r3
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	430a      	orrs	r2, r1
 8005148:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	4618      	mov	r0, r3
 800515c:	3710      	adds	r7, #16
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b08a      	sub	sp, #40	; 0x28
 8005166:	af00      	add	r7, sp, #0
 8005168:	60f8      	str	r0, [r7, #12]
 800516a:	60b9      	str	r1, [r7, #8]
 800516c:	607a      	str	r2, [r7, #4]
 800516e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005170:	2301      	movs	r3, #1
 8005172:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005180:	2b01      	cmp	r3, #1
 8005182:	d101      	bne.n	8005188 <HAL_SPI_TransmitReceive+0x26>
 8005184:	2302      	movs	r3, #2
 8005186:	e1fb      	b.n	8005580 <HAL_SPI_TransmitReceive+0x41e>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005190:	f7fd fb1e 	bl	80027d0 <HAL_GetTick>
 8005194:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800519c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80051a4:	887b      	ldrh	r3, [r7, #2]
 80051a6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80051a8:	887b      	ldrh	r3, [r7, #2]
 80051aa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80051ac:	7efb      	ldrb	r3, [r7, #27]
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d00e      	beq.n	80051d0 <HAL_SPI_TransmitReceive+0x6e>
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051b8:	d106      	bne.n	80051c8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d102      	bne.n	80051c8 <HAL_SPI_TransmitReceive+0x66>
 80051c2:	7efb      	ldrb	r3, [r7, #27]
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d003      	beq.n	80051d0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80051c8:	2302      	movs	r3, #2
 80051ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80051ce:	e1cd      	b.n	800556c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d005      	beq.n	80051e2 <HAL_SPI_TransmitReceive+0x80>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <HAL_SPI_TransmitReceive+0x80>
 80051dc:	887b      	ldrh	r3, [r7, #2]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d103      	bne.n	80051ea <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80051e8:	e1c0      	b.n	800556c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	2b04      	cmp	r3, #4
 80051f4:	d003      	beq.n	80051fe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2205      	movs	r2, #5
 80051fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	887a      	ldrh	r2, [r7, #2]
 800520e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	887a      	ldrh	r2, [r7, #2]
 8005216:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	887a      	ldrh	r2, [r7, #2]
 8005224:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	887a      	ldrh	r2, [r7, #2]
 800522a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005240:	d802      	bhi.n	8005248 <HAL_SPI_TransmitReceive+0xe6>
 8005242:	8a3b      	ldrh	r3, [r7, #16]
 8005244:	2b01      	cmp	r3, #1
 8005246:	d908      	bls.n	800525a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005256:	605a      	str	r2, [r3, #4]
 8005258:	e007      	b.n	800526a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005268:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005274:	2b40      	cmp	r3, #64	; 0x40
 8005276:	d007      	beq.n	8005288 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005286:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005290:	d97c      	bls.n	800538c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d002      	beq.n	80052a0 <HAL_SPI_TransmitReceive+0x13e>
 800529a:	8a7b      	ldrh	r3, [r7, #18]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d169      	bne.n	8005374 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	881a      	ldrh	r2, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b0:	1c9a      	adds	r2, r3, #2
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	3b01      	subs	r3, #1
 80052be:	b29a      	uxth	r2, r3
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052c4:	e056      	b.n	8005374 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 0302 	and.w	r3, r3, #2
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d11b      	bne.n	800530c <HAL_SPI_TransmitReceive+0x1aa>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d016      	beq.n	800530c <HAL_SPI_TransmitReceive+0x1aa>
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	2b01      	cmp	r3, #1
 80052e2:	d113      	bne.n	800530c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e8:	881a      	ldrh	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f4:	1c9a      	adds	r2, r3, #2
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052fe:	b29b      	uxth	r3, r3
 8005300:	3b01      	subs	r3, #1
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b01      	cmp	r3, #1
 8005318:	d11c      	bne.n	8005354 <HAL_SPI_TransmitReceive+0x1f2>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005320:	b29b      	uxth	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d016      	beq.n	8005354 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005330:	b292      	uxth	r2, r2
 8005332:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	1c9a      	adds	r2, r3, #2
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005344:	b29b      	uxth	r3, r3
 8005346:	3b01      	subs	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005350:	2301      	movs	r3, #1
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005354:	f7fd fa3c 	bl	80027d0 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	69fb      	ldr	r3, [r7, #28]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005360:	429a      	cmp	r2, r3
 8005362:	d807      	bhi.n	8005374 <HAL_SPI_TransmitReceive+0x212>
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536a:	d003      	beq.n	8005374 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005372:	e0fb      	b.n	800556c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005378:	b29b      	uxth	r3, r3
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1a3      	bne.n	80052c6 <HAL_SPI_TransmitReceive+0x164>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005384:	b29b      	uxth	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d19d      	bne.n	80052c6 <HAL_SPI_TransmitReceive+0x164>
 800538a:	e0df      	b.n	800554c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <HAL_SPI_TransmitReceive+0x23a>
 8005394:	8a7b      	ldrh	r3, [r7, #18]
 8005396:	2b01      	cmp	r3, #1
 8005398:	f040 80cb 	bne.w	8005532 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d912      	bls.n	80053cc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	881a      	ldrh	r2, [r3, #0]
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	1c9a      	adds	r2, r3, #2
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b02      	subs	r3, #2
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053ca:	e0b2      	b.n	8005532 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	330c      	adds	r3, #12
 80053d6:	7812      	ldrb	r2, [r2, #0]
 80053d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053f2:	e09e      	b.n	8005532 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d134      	bne.n	800546c <HAL_SPI_TransmitReceive+0x30a>
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005406:	b29b      	uxth	r3, r3
 8005408:	2b00      	cmp	r3, #0
 800540a:	d02f      	beq.n	800546c <HAL_SPI_TransmitReceive+0x30a>
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	2b01      	cmp	r3, #1
 8005410:	d12c      	bne.n	800546c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005416:	b29b      	uxth	r3, r3
 8005418:	2b01      	cmp	r3, #1
 800541a:	d912      	bls.n	8005442 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005420:	881a      	ldrh	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800542c:	1c9a      	adds	r2, r3, #2
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005436:	b29b      	uxth	r3, r3
 8005438:	3b02      	subs	r3, #2
 800543a:	b29a      	uxth	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005440:	e012      	b.n	8005468 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	330c      	adds	r3, #12
 800544c:	7812      	ldrb	r2, [r2, #0]
 800544e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005454:	1c5a      	adds	r2, r3, #1
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b01      	subs	r3, #1
 8005462:	b29a      	uxth	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b01      	cmp	r3, #1
 8005478:	d148      	bne.n	800550c <HAL_SPI_TransmitReceive+0x3aa>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005480:	b29b      	uxth	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d042      	beq.n	800550c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800548c:	b29b      	uxth	r3, r3
 800548e:	2b01      	cmp	r3, #1
 8005490:	d923      	bls.n	80054da <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	b292      	uxth	r2, r2
 800549e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a4:	1c9a      	adds	r2, r3, #2
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	3b02      	subs	r3, #2
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d81f      	bhi.n	8005508 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054d6:	605a      	str	r2, [r3, #4]
 80054d8:	e016      	b.n	8005508 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f103 020c 	add.w	r2, r3, #12
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	7812      	ldrb	r2, [r2, #0]
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	3b01      	subs	r3, #1
 8005500:	b29a      	uxth	r2, r3
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005508:	2301      	movs	r3, #1
 800550a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800550c:	f7fd f960 	bl	80027d0 <HAL_GetTick>
 8005510:	4602      	mov	r2, r0
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	1ad3      	subs	r3, r2, r3
 8005516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005518:	429a      	cmp	r2, r3
 800551a:	d803      	bhi.n	8005524 <HAL_SPI_TransmitReceive+0x3c2>
 800551c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005522:	d102      	bne.n	800552a <HAL_SPI_TransmitReceive+0x3c8>
 8005524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005526:	2b00      	cmp	r3, #0
 8005528:	d103      	bne.n	8005532 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005530:	e01c      	b.n	800556c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005536:	b29b      	uxth	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	f47f af5b 	bne.w	80053f4 <HAL_SPI_TransmitReceive+0x292>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005544:	b29b      	uxth	r3, r3
 8005546:	2b00      	cmp	r3, #0
 8005548:	f47f af54 	bne.w	80053f4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800554c:	69fa      	ldr	r2, [r7, #28]
 800554e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 f937 	bl	80057c4 <SPI_EndRxTxTransaction>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d006      	beq.n	800556a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2220      	movs	r2, #32
 8005566:	661a      	str	r2, [r3, #96]	; 0x60
 8005568:	e000      	b.n	800556c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800556a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800557c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005580:	4618      	mov	r0, r3
 8005582:	3728      	adds	r7, #40	; 0x28
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	603b      	str	r3, [r7, #0]
 8005594:	4613      	mov	r3, r2
 8005596:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005598:	f7fd f91a 	bl	80027d0 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a0:	1a9b      	subs	r3, r3, r2
 80055a2:	683a      	ldr	r2, [r7, #0]
 80055a4:	4413      	add	r3, r2
 80055a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055a8:	f7fd f912 	bl	80027d0 <HAL_GetTick>
 80055ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80055ae:	4b39      	ldr	r3, [pc, #228]	; (8005694 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	015b      	lsls	r3, r3, #5
 80055b4:	0d1b      	lsrs	r3, r3, #20
 80055b6:	69fa      	ldr	r2, [r7, #28]
 80055b8:	fb02 f303 	mul.w	r3, r2, r3
 80055bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055be:	e054      	b.n	800566a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055c6:	d050      	beq.n	800566a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055c8:	f7fd f902 	bl	80027d0 <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	69fa      	ldr	r2, [r7, #28]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d902      	bls.n	80055de <SPI_WaitFlagStateUntilTimeout+0x56>
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d13d      	bne.n	800565a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055f6:	d111      	bne.n	800561c <SPI_WaitFlagStateUntilTimeout+0x94>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005600:	d004      	beq.n	800560c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800560a:	d107      	bne.n	800561c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800561a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005624:	d10f      	bne.n	8005646 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005644:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e017      	b.n	800568a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d101      	bne.n	8005664 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	3b01      	subs	r3, #1
 8005668:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	4013      	ands	r3, r2
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	429a      	cmp	r2, r3
 8005678:	bf0c      	ite	eq
 800567a:	2301      	moveq	r3, #1
 800567c:	2300      	movne	r3, #0
 800567e:	b2db      	uxtb	r3, r3
 8005680:	461a      	mov	r2, r3
 8005682:	79fb      	ldrb	r3, [r7, #7]
 8005684:	429a      	cmp	r2, r3
 8005686:	d19b      	bne.n	80055c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3720      	adds	r7, #32
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20001600 	.word	0x20001600

08005698 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b08a      	sub	sp, #40	; 0x28
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80056a6:	2300      	movs	r3, #0
 80056a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80056aa:	f7fd f891 	bl	80027d0 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	1a9b      	subs	r3, r3, r2
 80056b4:	683a      	ldr	r2, [r7, #0]
 80056b6:	4413      	add	r3, r2
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80056ba:	f7fd f889 	bl	80027d0 <HAL_GetTick>
 80056be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80056c8:	4b3d      	ldr	r3, [pc, #244]	; (80057c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	4613      	mov	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	00da      	lsls	r2, r3, #3
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	0d1b      	lsrs	r3, r3, #20
 80056d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056da:	fb02 f303 	mul.w	r3, r2, r3
 80056de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80056e0:	e060      	b.n	80057a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80056e8:	d107      	bne.n	80056fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d104      	bne.n	80056fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	781b      	ldrb	r3, [r3, #0]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80056f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005700:	d050      	beq.n	80057a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005702:	f7fd f865 	bl	80027d0 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800570e:	429a      	cmp	r2, r3
 8005710:	d902      	bls.n	8005718 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	2b00      	cmp	r3, #0
 8005716:	d13d      	bne.n	8005794 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005726:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005730:	d111      	bne.n	8005756 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800573a:	d004      	beq.n	8005746 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005744:	d107      	bne.n	8005756 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005754:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800575e:	d10f      	bne.n	8005780 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800577e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e010      	b.n	80057b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005794:	69bb      	ldr	r3, [r7, #24]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d101      	bne.n	800579e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	3b01      	subs	r3, #1
 80057a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689a      	ldr	r2, [r3, #8]
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	4013      	ands	r3, r2
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d196      	bne.n	80056e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	3728      	adds	r7, #40	; 0x28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bd80      	pop	{r7, pc}
 80057be:	bf00      	nop
 80057c0:	20001600 	.word	0x20001600

080057c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f7ff ff5b 	bl	8005698 <SPI_WaitFifoStateUntilTimeout>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d007      	beq.n	80057f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ec:	f043 0220 	orr.w	r2, r3, #32
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e027      	b.n	8005848 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	9300      	str	r3, [sp, #0]
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	2200      	movs	r2, #0
 8005800:	2180      	movs	r1, #128	; 0x80
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f7ff fec0 	bl	8005588 <SPI_WaitFlagStateUntilTimeout>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d007      	beq.n	800581e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005812:	f043 0220 	orr.w	r2, r3, #32
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e014      	b.n	8005848 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2200      	movs	r2, #0
 8005826:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7ff ff34 	bl	8005698 <SPI_WaitFifoStateUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d007      	beq.n	8005846 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800583a:	f043 0220 	orr.w	r2, r3, #32
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e000      	b.n	8005848 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e049      	b.n	80058f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005868:	b2db      	uxtb	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d106      	bne.n	800587c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fc fe22 	bl	80024c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2202      	movs	r2, #2
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3304      	adds	r3, #4
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f000 fac0 	bl	8005e14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b01      	cmp	r3, #1
 8005912:	d001      	beq.n	8005918 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	e04f      	b.n	80059b8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f042 0201 	orr.w	r2, r2, #1
 800592e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a23      	ldr	r2, [pc, #140]	; (80059c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d01d      	beq.n	8005976 <HAL_TIM_Base_Start_IT+0x76>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005942:	d018      	beq.n	8005976 <HAL_TIM_Base_Start_IT+0x76>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a1f      	ldr	r2, [pc, #124]	; (80059c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d013      	beq.n	8005976 <HAL_TIM_Base_Start_IT+0x76>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a1e      	ldr	r2, [pc, #120]	; (80059cc <HAL_TIM_Base_Start_IT+0xcc>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d00e      	beq.n	8005976 <HAL_TIM_Base_Start_IT+0x76>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a1c      	ldr	r2, [pc, #112]	; (80059d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d009      	beq.n	8005976 <HAL_TIM_Base_Start_IT+0x76>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a1b      	ldr	r2, [pc, #108]	; (80059d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d004      	beq.n	8005976 <HAL_TIM_Base_Start_IT+0x76>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a19      	ldr	r2, [pc, #100]	; (80059d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d115      	bne.n	80059a2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	4b17      	ldr	r3, [pc, #92]	; (80059dc <HAL_TIM_Base_Start_IT+0xdc>)
 800597e:	4013      	ands	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b06      	cmp	r3, #6
 8005986:	d015      	beq.n	80059b4 <HAL_TIM_Base_Start_IT+0xb4>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800598e:	d011      	beq.n	80059b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0201 	orr.w	r2, r2, #1
 800599e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a0:	e008      	b.n	80059b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f042 0201 	orr.w	r2, r2, #1
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	e000      	b.n	80059b6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3714      	adds	r7, #20
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr
 80059c4:	40012c00 	.word	0x40012c00
 80059c8:	40000400 	.word	0x40000400
 80059cc:	40000800 	.word	0x40000800
 80059d0:	40000c00 	.word	0x40000c00
 80059d4:	40013400 	.word	0x40013400
 80059d8:	40014000 	.word	0x40014000
 80059dc:	00010007 	.word	0x00010007

080059e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d122      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d11b      	bne.n	8005a3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f06f 0202 	mvn.w	r2, #2
 8005a0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	f003 0303 	and.w	r3, r3, #3
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f9d8 	bl	8005dd8 <HAL_TIM_IC_CaptureCallback>
 8005a28:	e005      	b.n	8005a36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f9ca 	bl	8005dc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f9db 	bl	8005dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	691b      	ldr	r3, [r3, #16]
 8005a42:	f003 0304 	and.w	r3, r3, #4
 8005a46:	2b04      	cmp	r3, #4
 8005a48:	d122      	bne.n	8005a90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d11b      	bne.n	8005a90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f06f 0204 	mvn.w	r2, #4
 8005a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2202      	movs	r2, #2
 8005a66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d003      	beq.n	8005a7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f9ae 	bl	8005dd8 <HAL_TIM_IC_CaptureCallback>
 8005a7c:	e005      	b.n	8005a8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f9a0 	bl	8005dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 f9b1 	bl	8005dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f003 0308 	and.w	r3, r3, #8
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d122      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f003 0308 	and.w	r3, r3, #8
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d11b      	bne.n	8005ae4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f06f 0208 	mvn.w	r2, #8
 8005ab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2204      	movs	r2, #4
 8005aba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f984 	bl	8005dd8 <HAL_TIM_IC_CaptureCallback>
 8005ad0:	e005      	b.n	8005ade <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f976 	bl	8005dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f987 	bl	8005dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	2b10      	cmp	r3, #16
 8005af0:	d122      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	f003 0310 	and.w	r3, r3, #16
 8005afc:	2b10      	cmp	r3, #16
 8005afe:	d11b      	bne.n	8005b38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f06f 0210 	mvn.w	r2, #16
 8005b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2208      	movs	r2, #8
 8005b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f95a 	bl	8005dd8 <HAL_TIM_IC_CaptureCallback>
 8005b24:	e005      	b.n	8005b32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f94c 	bl	8005dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 f95d 	bl	8005dec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d10e      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d107      	bne.n	8005b64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f06f 0201 	mvn.w	r2, #1
 8005b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f926 	bl	8005db0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	691b      	ldr	r3, [r3, #16]
 8005b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6e:	2b80      	cmp	r3, #128	; 0x80
 8005b70:	d10e      	bne.n	8005b90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7c:	2b80      	cmp	r3, #128	; 0x80
 8005b7e:	d107      	bne.n	8005b90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 fb08 	bl	80061a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b9e:	d10e      	bne.n	8005bbe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005baa:	2b80      	cmp	r3, #128	; 0x80
 8005bac:	d107      	bne.n	8005bbe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fafb 	bl	80061b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc8:	2b40      	cmp	r3, #64	; 0x40
 8005bca:	d10e      	bne.n	8005bea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd6:	2b40      	cmp	r3, #64	; 0x40
 8005bd8:	d107      	bne.n	8005bea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005be2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f000 f90b 	bl	8005e00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b20      	cmp	r3, #32
 8005bf6:	d10e      	bne.n	8005c16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	2b20      	cmp	r3, #32
 8005c04:	d107      	bne.n	8005c16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f06f 0220 	mvn.w	r2, #32
 8005c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f000 fabb 	bl	800618c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c16:	bf00      	nop
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b084      	sub	sp, #16
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
 8005c26:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d101      	bne.n	8005c3a <HAL_TIM_ConfigClockSource+0x1c>
 8005c36:	2302      	movs	r3, #2
 8005c38:	e0b6      	b.n	8005da8 <HAL_TIM_ConfigClockSource+0x18a>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2202      	movs	r2, #2
 8005c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c58:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c5c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c64:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c76:	d03e      	beq.n	8005cf6 <HAL_TIM_ConfigClockSource+0xd8>
 8005c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c7c:	f200 8087 	bhi.w	8005d8e <HAL_TIM_ConfigClockSource+0x170>
 8005c80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c84:	f000 8086 	beq.w	8005d94 <HAL_TIM_ConfigClockSource+0x176>
 8005c88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c8c:	d87f      	bhi.n	8005d8e <HAL_TIM_ConfigClockSource+0x170>
 8005c8e:	2b70      	cmp	r3, #112	; 0x70
 8005c90:	d01a      	beq.n	8005cc8 <HAL_TIM_ConfigClockSource+0xaa>
 8005c92:	2b70      	cmp	r3, #112	; 0x70
 8005c94:	d87b      	bhi.n	8005d8e <HAL_TIM_ConfigClockSource+0x170>
 8005c96:	2b60      	cmp	r3, #96	; 0x60
 8005c98:	d050      	beq.n	8005d3c <HAL_TIM_ConfigClockSource+0x11e>
 8005c9a:	2b60      	cmp	r3, #96	; 0x60
 8005c9c:	d877      	bhi.n	8005d8e <HAL_TIM_ConfigClockSource+0x170>
 8005c9e:	2b50      	cmp	r3, #80	; 0x50
 8005ca0:	d03c      	beq.n	8005d1c <HAL_TIM_ConfigClockSource+0xfe>
 8005ca2:	2b50      	cmp	r3, #80	; 0x50
 8005ca4:	d873      	bhi.n	8005d8e <HAL_TIM_ConfigClockSource+0x170>
 8005ca6:	2b40      	cmp	r3, #64	; 0x40
 8005ca8:	d058      	beq.n	8005d5c <HAL_TIM_ConfigClockSource+0x13e>
 8005caa:	2b40      	cmp	r3, #64	; 0x40
 8005cac:	d86f      	bhi.n	8005d8e <HAL_TIM_ConfigClockSource+0x170>
 8005cae:	2b30      	cmp	r3, #48	; 0x30
 8005cb0:	d064      	beq.n	8005d7c <HAL_TIM_ConfigClockSource+0x15e>
 8005cb2:	2b30      	cmp	r3, #48	; 0x30
 8005cb4:	d86b      	bhi.n	8005d8e <HAL_TIM_ConfigClockSource+0x170>
 8005cb6:	2b20      	cmp	r3, #32
 8005cb8:	d060      	beq.n	8005d7c <HAL_TIM_ConfigClockSource+0x15e>
 8005cba:	2b20      	cmp	r3, #32
 8005cbc:	d867      	bhi.n	8005d8e <HAL_TIM_ConfigClockSource+0x170>
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d05c      	beq.n	8005d7c <HAL_TIM_ConfigClockSource+0x15e>
 8005cc2:	2b10      	cmp	r3, #16
 8005cc4:	d05a      	beq.n	8005d7c <HAL_TIM_ConfigClockSource+0x15e>
 8005cc6:	e062      	b.n	8005d8e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6818      	ldr	r0, [r3, #0]
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	6899      	ldr	r1, [r3, #8]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f000 f9b0 	bl	800603c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005cea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	609a      	str	r2, [r3, #8]
      break;
 8005cf4:	e04f      	b.n	8005d96 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6818      	ldr	r0, [r3, #0]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	6899      	ldr	r1, [r3, #8]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	f000 f999 	bl	800603c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d18:	609a      	str	r2, [r3, #8]
      break;
 8005d1a:	e03c      	b.n	8005d96 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6818      	ldr	r0, [r3, #0]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	6859      	ldr	r1, [r3, #4]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	f000 f90d 	bl	8005f48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2150      	movs	r1, #80	; 0x50
 8005d34:	4618      	mov	r0, r3
 8005d36:	f000 f966 	bl	8006006 <TIM_ITRx_SetConfig>
      break;
 8005d3a:	e02c      	b.n	8005d96 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	6859      	ldr	r1, [r3, #4]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f000 f92c 	bl	8005fa6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2160      	movs	r1, #96	; 0x60
 8005d54:	4618      	mov	r0, r3
 8005d56:	f000 f956 	bl	8006006 <TIM_ITRx_SetConfig>
      break;
 8005d5a:	e01c      	b.n	8005d96 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6818      	ldr	r0, [r3, #0]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	6859      	ldr	r1, [r3, #4]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f000 f8ed 	bl	8005f48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2140      	movs	r1, #64	; 0x40
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 f946 	bl	8006006 <TIM_ITRx_SetConfig>
      break;
 8005d7a:	e00c      	b.n	8005d96 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681a      	ldr	r2, [r3, #0]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4619      	mov	r1, r3
 8005d86:	4610      	mov	r0, r2
 8005d88:	f000 f93d 	bl	8006006 <TIM_ITRx_SetConfig>
      break;
 8005d8c:	e003      	b.n	8005d96 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	73fb      	strb	r3, [r7, #15]
      break;
 8005d92:	e000      	b.n	8005d96 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d94:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b083      	sub	sp, #12
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005dcc:	bf00      	nop
 8005dce:	370c      	adds	r7, #12
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd6:	4770      	bx	lr

08005dd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005de0:	bf00      	nop
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a40      	ldr	r2, [pc, #256]	; (8005f28 <TIM_Base_SetConfig+0x114>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d013      	beq.n	8005e54 <TIM_Base_SetConfig+0x40>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e32:	d00f      	beq.n	8005e54 <TIM_Base_SetConfig+0x40>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a3d      	ldr	r2, [pc, #244]	; (8005f2c <TIM_Base_SetConfig+0x118>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d00b      	beq.n	8005e54 <TIM_Base_SetConfig+0x40>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a3c      	ldr	r2, [pc, #240]	; (8005f30 <TIM_Base_SetConfig+0x11c>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d007      	beq.n	8005e54 <TIM_Base_SetConfig+0x40>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a3b      	ldr	r2, [pc, #236]	; (8005f34 <TIM_Base_SetConfig+0x120>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d003      	beq.n	8005e54 <TIM_Base_SetConfig+0x40>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a3a      	ldr	r2, [pc, #232]	; (8005f38 <TIM_Base_SetConfig+0x124>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d108      	bne.n	8005e66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a2f      	ldr	r2, [pc, #188]	; (8005f28 <TIM_Base_SetConfig+0x114>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d01f      	beq.n	8005eae <TIM_Base_SetConfig+0x9a>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e74:	d01b      	beq.n	8005eae <TIM_Base_SetConfig+0x9a>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a2c      	ldr	r2, [pc, #176]	; (8005f2c <TIM_Base_SetConfig+0x118>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d017      	beq.n	8005eae <TIM_Base_SetConfig+0x9a>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a2b      	ldr	r2, [pc, #172]	; (8005f30 <TIM_Base_SetConfig+0x11c>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d013      	beq.n	8005eae <TIM_Base_SetConfig+0x9a>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	4a2a      	ldr	r2, [pc, #168]	; (8005f34 <TIM_Base_SetConfig+0x120>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d00f      	beq.n	8005eae <TIM_Base_SetConfig+0x9a>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a29      	ldr	r2, [pc, #164]	; (8005f38 <TIM_Base_SetConfig+0x124>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d00b      	beq.n	8005eae <TIM_Base_SetConfig+0x9a>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	4a28      	ldr	r2, [pc, #160]	; (8005f3c <TIM_Base_SetConfig+0x128>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d007      	beq.n	8005eae <TIM_Base_SetConfig+0x9a>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	4a27      	ldr	r2, [pc, #156]	; (8005f40 <TIM_Base_SetConfig+0x12c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d003      	beq.n	8005eae <TIM_Base_SetConfig+0x9a>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a26      	ldr	r2, [pc, #152]	; (8005f44 <TIM_Base_SetConfig+0x130>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d108      	bne.n	8005ec0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	689a      	ldr	r2, [r3, #8]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a10      	ldr	r2, [pc, #64]	; (8005f28 <TIM_Base_SetConfig+0x114>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d00f      	beq.n	8005f0c <TIM_Base_SetConfig+0xf8>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4a12      	ldr	r2, [pc, #72]	; (8005f38 <TIM_Base_SetConfig+0x124>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00b      	beq.n	8005f0c <TIM_Base_SetConfig+0xf8>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4a11      	ldr	r2, [pc, #68]	; (8005f3c <TIM_Base_SetConfig+0x128>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d007      	beq.n	8005f0c <TIM_Base_SetConfig+0xf8>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a10      	ldr	r2, [pc, #64]	; (8005f40 <TIM_Base_SetConfig+0x12c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d003      	beq.n	8005f0c <TIM_Base_SetConfig+0xf8>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a0f      	ldr	r2, [pc, #60]	; (8005f44 <TIM_Base_SetConfig+0x130>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d103      	bne.n	8005f14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	691a      	ldr	r2, [r3, #16]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	615a      	str	r2, [r3, #20]
}
 8005f1a:	bf00      	nop
 8005f1c:	3714      	adds	r7, #20
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr
 8005f26:	bf00      	nop
 8005f28:	40012c00 	.word	0x40012c00
 8005f2c:	40000400 	.word	0x40000400
 8005f30:	40000800 	.word	0x40000800
 8005f34:	40000c00 	.word	0x40000c00
 8005f38:	40013400 	.word	0x40013400
 8005f3c:	40014000 	.word	0x40014000
 8005f40:	40014400 	.word	0x40014400
 8005f44:	40014800 	.word	0x40014800

08005f48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b087      	sub	sp, #28
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6a1b      	ldr	r3, [r3, #32]
 8005f58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	f023 0201 	bic.w	r2, r3, #1
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	f023 030a 	bic.w	r3, r3, #10
 8005f84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	621a      	str	r2, [r3, #32]
}
 8005f9a:	bf00      	nop
 8005f9c:	371c      	adds	r7, #28
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b087      	sub	sp, #28
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	60f8      	str	r0, [r7, #12]
 8005fae:	60b9      	str	r1, [r7, #8]
 8005fb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	f023 0210 	bic.w	r2, r3, #16
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6a1b      	ldr	r3, [r3, #32]
 8005fc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	031b      	lsls	r3, r3, #12
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fe2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	011b      	lsls	r3, r3, #4
 8005fe8:	693a      	ldr	r2, [r7, #16]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	621a      	str	r2, [r3, #32]
}
 8005ffa:	bf00      	nop
 8005ffc:	371c      	adds	r7, #28
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006006:	b480      	push	{r7}
 8006008:	b085      	sub	sp, #20
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
 800600e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800601c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	f043 0307 	orr.w	r3, r3, #7
 8006028:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	609a      	str	r2, [r3, #8]
}
 8006030:	bf00      	nop
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800603c:	b480      	push	{r7}
 800603e:	b087      	sub	sp, #28
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006056:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	021a      	lsls	r2, r3, #8
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	431a      	orrs	r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4313      	orrs	r3, r2
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	4313      	orrs	r3, r2
 8006068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	609a      	str	r2, [r3, #8]
}
 8006070:	bf00      	nop
 8006072:	371c      	adds	r7, #28
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800608c:	2b01      	cmp	r3, #1
 800608e:	d101      	bne.n	8006094 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006090:	2302      	movs	r3, #2
 8006092:	e068      	b.n	8006166 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2202      	movs	r2, #2
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a2e      	ldr	r2, [pc, #184]	; (8006174 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d004      	beq.n	80060c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a2d      	ldr	r2, [pc, #180]	; (8006178 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d108      	bne.n	80060da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a1e      	ldr	r2, [pc, #120]	; (8006174 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d01d      	beq.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006106:	d018      	beq.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a1b      	ldr	r2, [pc, #108]	; (800617c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d013      	beq.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a1a      	ldr	r2, [pc, #104]	; (8006180 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d00e      	beq.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a18      	ldr	r2, [pc, #96]	; (8006184 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d009      	beq.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a13      	ldr	r2, [pc, #76]	; (8006178 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d004      	beq.n	800613a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a14      	ldr	r2, [pc, #80]	; (8006188 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d10c      	bne.n	8006154 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006140:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	68ba      	ldr	r2, [r7, #8]
 8006148:	4313      	orrs	r3, r2
 800614a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3714      	adds	r7, #20
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	40012c00 	.word	0x40012c00
 8006178:	40013400 	.word	0x40013400
 800617c:	40000400 	.word	0x40000400
 8006180:	40000800 	.word	0x40000800
 8006184:	40000c00 	.word	0x40000c00
 8006188:	40014000 	.word	0x40014000

0800618c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006194:	bf00      	nop
 8006196:	370c      	adds	r7, #12
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e040      	b.n	800625c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d106      	bne.n	80061f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7fc f9a8 	bl	8002540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2224      	movs	r2, #36	; 0x24
 80061f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0201 	bic.w	r2, r2, #1
 8006204:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f82c 	bl	8006264 <UART_SetConfig>
 800620c:	4603      	mov	r3, r0
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e022      	b.n	800625c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fad8 	bl	80067d4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006232:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	689a      	ldr	r2, [r3, #8]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006242:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 0201 	orr.w	r2, r2, #1
 8006252:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fb5f 	bl	8006918 <UART_CheckIdleState>
 800625a:	4603      	mov	r3, r0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3708      	adds	r7, #8
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006264:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006268:	b08a      	sub	sp, #40	; 0x28
 800626a:	af00      	add	r7, sp, #0
 800626c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800626e:	2300      	movs	r3, #0
 8006270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	431a      	orrs	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	431a      	orrs	r2, r3
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	4313      	orrs	r3, r2
 800628a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	4ba4      	ldr	r3, [pc, #656]	; (8006524 <UART_SetConfig+0x2c0>)
 8006294:	4013      	ands	r3, r2
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	6812      	ldr	r2, [r2, #0]
 800629a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800629c:	430b      	orrs	r3, r1
 800629e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	68da      	ldr	r2, [r3, #12]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	699b      	ldr	r3, [r3, #24]
 80062ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a99      	ldr	r2, [pc, #612]	; (8006528 <UART_SetConfig+0x2c4>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d004      	beq.n	80062d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062cc:	4313      	orrs	r3, r2
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062e0:	430a      	orrs	r2, r1
 80062e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a90      	ldr	r2, [pc, #576]	; (800652c <UART_SetConfig+0x2c8>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d126      	bne.n	800633c <UART_SetConfig+0xd8>
 80062ee:	4b90      	ldr	r3, [pc, #576]	; (8006530 <UART_SetConfig+0x2cc>)
 80062f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f4:	f003 0303 	and.w	r3, r3, #3
 80062f8:	2b03      	cmp	r3, #3
 80062fa:	d81b      	bhi.n	8006334 <UART_SetConfig+0xd0>
 80062fc:	a201      	add	r2, pc, #4	; (adr r2, 8006304 <UART_SetConfig+0xa0>)
 80062fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006302:	bf00      	nop
 8006304:	08006315 	.word	0x08006315
 8006308:	08006325 	.word	0x08006325
 800630c:	0800631d 	.word	0x0800631d
 8006310:	0800632d 	.word	0x0800632d
 8006314:	2301      	movs	r3, #1
 8006316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800631a:	e116      	b.n	800654a <UART_SetConfig+0x2e6>
 800631c:	2302      	movs	r3, #2
 800631e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006322:	e112      	b.n	800654a <UART_SetConfig+0x2e6>
 8006324:	2304      	movs	r3, #4
 8006326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800632a:	e10e      	b.n	800654a <UART_SetConfig+0x2e6>
 800632c:	2308      	movs	r3, #8
 800632e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006332:	e10a      	b.n	800654a <UART_SetConfig+0x2e6>
 8006334:	2310      	movs	r3, #16
 8006336:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800633a:	e106      	b.n	800654a <UART_SetConfig+0x2e6>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a7c      	ldr	r2, [pc, #496]	; (8006534 <UART_SetConfig+0x2d0>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d138      	bne.n	80063b8 <UART_SetConfig+0x154>
 8006346:	4b7a      	ldr	r3, [pc, #488]	; (8006530 <UART_SetConfig+0x2cc>)
 8006348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634c:	f003 030c 	and.w	r3, r3, #12
 8006350:	2b0c      	cmp	r3, #12
 8006352:	d82d      	bhi.n	80063b0 <UART_SetConfig+0x14c>
 8006354:	a201      	add	r2, pc, #4	; (adr r2, 800635c <UART_SetConfig+0xf8>)
 8006356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635a:	bf00      	nop
 800635c:	08006391 	.word	0x08006391
 8006360:	080063b1 	.word	0x080063b1
 8006364:	080063b1 	.word	0x080063b1
 8006368:	080063b1 	.word	0x080063b1
 800636c:	080063a1 	.word	0x080063a1
 8006370:	080063b1 	.word	0x080063b1
 8006374:	080063b1 	.word	0x080063b1
 8006378:	080063b1 	.word	0x080063b1
 800637c:	08006399 	.word	0x08006399
 8006380:	080063b1 	.word	0x080063b1
 8006384:	080063b1 	.word	0x080063b1
 8006388:	080063b1 	.word	0x080063b1
 800638c:	080063a9 	.word	0x080063a9
 8006390:	2300      	movs	r3, #0
 8006392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006396:	e0d8      	b.n	800654a <UART_SetConfig+0x2e6>
 8006398:	2302      	movs	r3, #2
 800639a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800639e:	e0d4      	b.n	800654a <UART_SetConfig+0x2e6>
 80063a0:	2304      	movs	r3, #4
 80063a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063a6:	e0d0      	b.n	800654a <UART_SetConfig+0x2e6>
 80063a8:	2308      	movs	r3, #8
 80063aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ae:	e0cc      	b.n	800654a <UART_SetConfig+0x2e6>
 80063b0:	2310      	movs	r3, #16
 80063b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063b6:	e0c8      	b.n	800654a <UART_SetConfig+0x2e6>
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a5e      	ldr	r2, [pc, #376]	; (8006538 <UART_SetConfig+0x2d4>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d125      	bne.n	800640e <UART_SetConfig+0x1aa>
 80063c2:	4b5b      	ldr	r3, [pc, #364]	; (8006530 <UART_SetConfig+0x2cc>)
 80063c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063cc:	2b30      	cmp	r3, #48	; 0x30
 80063ce:	d016      	beq.n	80063fe <UART_SetConfig+0x19a>
 80063d0:	2b30      	cmp	r3, #48	; 0x30
 80063d2:	d818      	bhi.n	8006406 <UART_SetConfig+0x1a2>
 80063d4:	2b20      	cmp	r3, #32
 80063d6:	d00a      	beq.n	80063ee <UART_SetConfig+0x18a>
 80063d8:	2b20      	cmp	r3, #32
 80063da:	d814      	bhi.n	8006406 <UART_SetConfig+0x1a2>
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <UART_SetConfig+0x182>
 80063e0:	2b10      	cmp	r3, #16
 80063e2:	d008      	beq.n	80063f6 <UART_SetConfig+0x192>
 80063e4:	e00f      	b.n	8006406 <UART_SetConfig+0x1a2>
 80063e6:	2300      	movs	r3, #0
 80063e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ec:	e0ad      	b.n	800654a <UART_SetConfig+0x2e6>
 80063ee:	2302      	movs	r3, #2
 80063f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063f4:	e0a9      	b.n	800654a <UART_SetConfig+0x2e6>
 80063f6:	2304      	movs	r3, #4
 80063f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063fc:	e0a5      	b.n	800654a <UART_SetConfig+0x2e6>
 80063fe:	2308      	movs	r3, #8
 8006400:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006404:	e0a1      	b.n	800654a <UART_SetConfig+0x2e6>
 8006406:	2310      	movs	r3, #16
 8006408:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800640c:	e09d      	b.n	800654a <UART_SetConfig+0x2e6>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a4a      	ldr	r2, [pc, #296]	; (800653c <UART_SetConfig+0x2d8>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d125      	bne.n	8006464 <UART_SetConfig+0x200>
 8006418:	4b45      	ldr	r3, [pc, #276]	; (8006530 <UART_SetConfig+0x2cc>)
 800641a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800641e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006422:	2bc0      	cmp	r3, #192	; 0xc0
 8006424:	d016      	beq.n	8006454 <UART_SetConfig+0x1f0>
 8006426:	2bc0      	cmp	r3, #192	; 0xc0
 8006428:	d818      	bhi.n	800645c <UART_SetConfig+0x1f8>
 800642a:	2b80      	cmp	r3, #128	; 0x80
 800642c:	d00a      	beq.n	8006444 <UART_SetConfig+0x1e0>
 800642e:	2b80      	cmp	r3, #128	; 0x80
 8006430:	d814      	bhi.n	800645c <UART_SetConfig+0x1f8>
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <UART_SetConfig+0x1d8>
 8006436:	2b40      	cmp	r3, #64	; 0x40
 8006438:	d008      	beq.n	800644c <UART_SetConfig+0x1e8>
 800643a:	e00f      	b.n	800645c <UART_SetConfig+0x1f8>
 800643c:	2300      	movs	r3, #0
 800643e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006442:	e082      	b.n	800654a <UART_SetConfig+0x2e6>
 8006444:	2302      	movs	r3, #2
 8006446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800644a:	e07e      	b.n	800654a <UART_SetConfig+0x2e6>
 800644c:	2304      	movs	r3, #4
 800644e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006452:	e07a      	b.n	800654a <UART_SetConfig+0x2e6>
 8006454:	2308      	movs	r3, #8
 8006456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800645a:	e076      	b.n	800654a <UART_SetConfig+0x2e6>
 800645c:	2310      	movs	r3, #16
 800645e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006462:	e072      	b.n	800654a <UART_SetConfig+0x2e6>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a35      	ldr	r2, [pc, #212]	; (8006540 <UART_SetConfig+0x2dc>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d12a      	bne.n	80064c4 <UART_SetConfig+0x260>
 800646e:	4b30      	ldr	r3, [pc, #192]	; (8006530 <UART_SetConfig+0x2cc>)
 8006470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006478:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800647c:	d01a      	beq.n	80064b4 <UART_SetConfig+0x250>
 800647e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006482:	d81b      	bhi.n	80064bc <UART_SetConfig+0x258>
 8006484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006488:	d00c      	beq.n	80064a4 <UART_SetConfig+0x240>
 800648a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800648e:	d815      	bhi.n	80064bc <UART_SetConfig+0x258>
 8006490:	2b00      	cmp	r3, #0
 8006492:	d003      	beq.n	800649c <UART_SetConfig+0x238>
 8006494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006498:	d008      	beq.n	80064ac <UART_SetConfig+0x248>
 800649a:	e00f      	b.n	80064bc <UART_SetConfig+0x258>
 800649c:	2300      	movs	r3, #0
 800649e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064a2:	e052      	b.n	800654a <UART_SetConfig+0x2e6>
 80064a4:	2302      	movs	r3, #2
 80064a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064aa:	e04e      	b.n	800654a <UART_SetConfig+0x2e6>
 80064ac:	2304      	movs	r3, #4
 80064ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064b2:	e04a      	b.n	800654a <UART_SetConfig+0x2e6>
 80064b4:	2308      	movs	r3, #8
 80064b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ba:	e046      	b.n	800654a <UART_SetConfig+0x2e6>
 80064bc:	2310      	movs	r3, #16
 80064be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064c2:	e042      	b.n	800654a <UART_SetConfig+0x2e6>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a17      	ldr	r2, [pc, #92]	; (8006528 <UART_SetConfig+0x2c4>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d13a      	bne.n	8006544 <UART_SetConfig+0x2e0>
 80064ce:	4b18      	ldr	r3, [pc, #96]	; (8006530 <UART_SetConfig+0x2cc>)
 80064d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064dc:	d01a      	beq.n	8006514 <UART_SetConfig+0x2b0>
 80064de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064e2:	d81b      	bhi.n	800651c <UART_SetConfig+0x2b8>
 80064e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064e8:	d00c      	beq.n	8006504 <UART_SetConfig+0x2a0>
 80064ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ee:	d815      	bhi.n	800651c <UART_SetConfig+0x2b8>
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d003      	beq.n	80064fc <UART_SetConfig+0x298>
 80064f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064f8:	d008      	beq.n	800650c <UART_SetConfig+0x2a8>
 80064fa:	e00f      	b.n	800651c <UART_SetConfig+0x2b8>
 80064fc:	2300      	movs	r3, #0
 80064fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006502:	e022      	b.n	800654a <UART_SetConfig+0x2e6>
 8006504:	2302      	movs	r3, #2
 8006506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800650a:	e01e      	b.n	800654a <UART_SetConfig+0x2e6>
 800650c:	2304      	movs	r3, #4
 800650e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006512:	e01a      	b.n	800654a <UART_SetConfig+0x2e6>
 8006514:	2308      	movs	r3, #8
 8006516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800651a:	e016      	b.n	800654a <UART_SetConfig+0x2e6>
 800651c:	2310      	movs	r3, #16
 800651e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006522:	e012      	b.n	800654a <UART_SetConfig+0x2e6>
 8006524:	efff69f3 	.word	0xefff69f3
 8006528:	40008000 	.word	0x40008000
 800652c:	40013800 	.word	0x40013800
 8006530:	40021000 	.word	0x40021000
 8006534:	40004400 	.word	0x40004400
 8006538:	40004800 	.word	0x40004800
 800653c:	40004c00 	.word	0x40004c00
 8006540:	40005000 	.word	0x40005000
 8006544:	2310      	movs	r3, #16
 8006546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	4a9f      	ldr	r2, [pc, #636]	; (80067cc <UART_SetConfig+0x568>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d17a      	bne.n	800664a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006554:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006558:	2b08      	cmp	r3, #8
 800655a:	d824      	bhi.n	80065a6 <UART_SetConfig+0x342>
 800655c:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <UART_SetConfig+0x300>)
 800655e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006562:	bf00      	nop
 8006564:	08006589 	.word	0x08006589
 8006568:	080065a7 	.word	0x080065a7
 800656c:	08006591 	.word	0x08006591
 8006570:	080065a7 	.word	0x080065a7
 8006574:	08006597 	.word	0x08006597
 8006578:	080065a7 	.word	0x080065a7
 800657c:	080065a7 	.word	0x080065a7
 8006580:	080065a7 	.word	0x080065a7
 8006584:	0800659f 	.word	0x0800659f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006588:	f7fe f800 	bl	800458c <HAL_RCC_GetPCLK1Freq>
 800658c:	61f8      	str	r0, [r7, #28]
        break;
 800658e:	e010      	b.n	80065b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006590:	4b8f      	ldr	r3, [pc, #572]	; (80067d0 <UART_SetConfig+0x56c>)
 8006592:	61fb      	str	r3, [r7, #28]
        break;
 8006594:	e00d      	b.n	80065b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006596:	f7fd ff61 	bl	800445c <HAL_RCC_GetSysClockFreq>
 800659a:	61f8      	str	r0, [r7, #28]
        break;
 800659c:	e009      	b.n	80065b2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800659e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a2:	61fb      	str	r3, [r7, #28]
        break;
 80065a4:	e005      	b.n	80065b2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80065b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 80fb 	beq.w	80067b0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	685a      	ldr	r2, [r3, #4]
 80065be:	4613      	mov	r3, r2
 80065c0:	005b      	lsls	r3, r3, #1
 80065c2:	4413      	add	r3, r2
 80065c4:	69fa      	ldr	r2, [r7, #28]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d305      	bcc.n	80065d6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065d0:	69fa      	ldr	r2, [r7, #28]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d903      	bls.n	80065de <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80065dc:	e0e8      	b.n	80067b0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	2200      	movs	r2, #0
 80065e2:	461c      	mov	r4, r3
 80065e4:	4615      	mov	r5, r2
 80065e6:	f04f 0200 	mov.w	r2, #0
 80065ea:	f04f 0300 	mov.w	r3, #0
 80065ee:	022b      	lsls	r3, r5, #8
 80065f0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80065f4:	0222      	lsls	r2, r4, #8
 80065f6:	68f9      	ldr	r1, [r7, #12]
 80065f8:	6849      	ldr	r1, [r1, #4]
 80065fa:	0849      	lsrs	r1, r1, #1
 80065fc:	2000      	movs	r0, #0
 80065fe:	4688      	mov	r8, r1
 8006600:	4681      	mov	r9, r0
 8006602:	eb12 0a08 	adds.w	sl, r2, r8
 8006606:	eb43 0b09 	adc.w	fp, r3, r9
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	603b      	str	r3, [r7, #0]
 8006612:	607a      	str	r2, [r7, #4]
 8006614:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006618:	4650      	mov	r0, sl
 800661a:	4659      	mov	r1, fp
 800661c:	f7f9 fdd4 	bl	80001c8 <__aeabi_uldivmod>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	4613      	mov	r3, r2
 8006626:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800662e:	d308      	bcc.n	8006642 <UART_SetConfig+0x3de>
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006636:	d204      	bcs.n	8006642 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	60da      	str	r2, [r3, #12]
 8006640:	e0b6      	b.n	80067b0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006648:	e0b2      	b.n	80067b0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006652:	d15e      	bne.n	8006712 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006654:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006658:	2b08      	cmp	r3, #8
 800665a:	d828      	bhi.n	80066ae <UART_SetConfig+0x44a>
 800665c:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <UART_SetConfig+0x400>)
 800665e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006662:	bf00      	nop
 8006664:	08006689 	.word	0x08006689
 8006668:	08006691 	.word	0x08006691
 800666c:	08006699 	.word	0x08006699
 8006670:	080066af 	.word	0x080066af
 8006674:	0800669f 	.word	0x0800669f
 8006678:	080066af 	.word	0x080066af
 800667c:	080066af 	.word	0x080066af
 8006680:	080066af 	.word	0x080066af
 8006684:	080066a7 	.word	0x080066a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006688:	f7fd ff80 	bl	800458c <HAL_RCC_GetPCLK1Freq>
 800668c:	61f8      	str	r0, [r7, #28]
        break;
 800668e:	e014      	b.n	80066ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006690:	f7fd ff92 	bl	80045b8 <HAL_RCC_GetPCLK2Freq>
 8006694:	61f8      	str	r0, [r7, #28]
        break;
 8006696:	e010      	b.n	80066ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006698:	4b4d      	ldr	r3, [pc, #308]	; (80067d0 <UART_SetConfig+0x56c>)
 800669a:	61fb      	str	r3, [r7, #28]
        break;
 800669c:	e00d      	b.n	80066ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800669e:	f7fd fedd 	bl	800445c <HAL_RCC_GetSysClockFreq>
 80066a2:	61f8      	str	r0, [r7, #28]
        break;
 80066a4:	e009      	b.n	80066ba <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066aa:	61fb      	str	r3, [r7, #28]
        break;
 80066ac:	e005      	b.n	80066ba <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80066b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d077      	beq.n	80067b0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	005a      	lsls	r2, r3, #1
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	085b      	lsrs	r3, r3, #1
 80066ca:	441a      	add	r2, r3
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2b0f      	cmp	r3, #15
 80066da:	d916      	bls.n	800670a <UART_SetConfig+0x4a6>
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e2:	d212      	bcs.n	800670a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	f023 030f 	bic.w	r3, r3, #15
 80066ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	085b      	lsrs	r3, r3, #1
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	b29a      	uxth	r2, r3
 80066fa:	8afb      	ldrh	r3, [r7, #22]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	8afa      	ldrh	r2, [r7, #22]
 8006706:	60da      	str	r2, [r3, #12]
 8006708:	e052      	b.n	80067b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006710:	e04e      	b.n	80067b0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006712:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006716:	2b08      	cmp	r3, #8
 8006718:	d827      	bhi.n	800676a <UART_SetConfig+0x506>
 800671a:	a201      	add	r2, pc, #4	; (adr r2, 8006720 <UART_SetConfig+0x4bc>)
 800671c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006720:	08006745 	.word	0x08006745
 8006724:	0800674d 	.word	0x0800674d
 8006728:	08006755 	.word	0x08006755
 800672c:	0800676b 	.word	0x0800676b
 8006730:	0800675b 	.word	0x0800675b
 8006734:	0800676b 	.word	0x0800676b
 8006738:	0800676b 	.word	0x0800676b
 800673c:	0800676b 	.word	0x0800676b
 8006740:	08006763 	.word	0x08006763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006744:	f7fd ff22 	bl	800458c <HAL_RCC_GetPCLK1Freq>
 8006748:	61f8      	str	r0, [r7, #28]
        break;
 800674a:	e014      	b.n	8006776 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800674c:	f7fd ff34 	bl	80045b8 <HAL_RCC_GetPCLK2Freq>
 8006750:	61f8      	str	r0, [r7, #28]
        break;
 8006752:	e010      	b.n	8006776 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006754:	4b1e      	ldr	r3, [pc, #120]	; (80067d0 <UART_SetConfig+0x56c>)
 8006756:	61fb      	str	r3, [r7, #28]
        break;
 8006758:	e00d      	b.n	8006776 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800675a:	f7fd fe7f 	bl	800445c <HAL_RCC_GetSysClockFreq>
 800675e:	61f8      	str	r0, [r7, #28]
        break;
 8006760:	e009      	b.n	8006776 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006766:	61fb      	str	r3, [r7, #28]
        break;
 8006768:	e005      	b.n	8006776 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800676a:	2300      	movs	r3, #0
 800676c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006774:	bf00      	nop
    }

    if (pclk != 0U)
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d019      	beq.n	80067b0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	085a      	lsrs	r2, r3, #1
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	441a      	add	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	fbb2 f3f3 	udiv	r3, r2, r3
 800678e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	2b0f      	cmp	r3, #15
 8006794:	d909      	bls.n	80067aa <UART_SetConfig+0x546>
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800679c:	d205      	bcs.n	80067aa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	60da      	str	r2, [r3, #12]
 80067a8:	e002      	b.n	80067b0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2200      	movs	r2, #0
 80067b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80067bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3728      	adds	r7, #40	; 0x28
 80067c4:	46bd      	mov	sp, r7
 80067c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067ca:	bf00      	nop
 80067cc:	40008000 	.word	0x40008000
 80067d0:	00f42400 	.word	0x00f42400

080067d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00a      	beq.n	80067fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00a      	beq.n	8006820 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00a      	beq.n	8006842 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006846:	f003 0308 	and.w	r3, r3, #8
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	430a      	orrs	r2, r1
 8006862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006868:	f003 0310 	and.w	r3, r3, #16
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00a      	beq.n	8006886 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688a:	f003 0320 	and.w	r3, r3, #32
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00a      	beq.n	80068a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01a      	beq.n	80068ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068d2:	d10a      	bne.n	80068ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	605a      	str	r2, [r3, #4]
  }
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af02      	add	r7, sp, #8
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006928:	f7fb ff52 	bl	80027d0 <HAL_GetTick>
 800692c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0308 	and.w	r3, r3, #8
 8006938:	2b08      	cmp	r3, #8
 800693a:	d10e      	bne.n	800695a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800693c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f82d 	bl	80069aa <UART_WaitOnFlagUntilTimeout>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e023      	b.n	80069a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0304 	and.w	r3, r3, #4
 8006964:	2b04      	cmp	r3, #4
 8006966:	d10e      	bne.n	8006986 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800696c:	9300      	str	r3, [sp, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 f817 	bl	80069aa <UART_WaitOnFlagUntilTimeout>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e00d      	b.n	80069a2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2220      	movs	r2, #32
 800698a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2220      	movs	r2, #32
 8006990:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3710      	adds	r7, #16
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}

080069aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b09c      	sub	sp, #112	; 0x70
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	60f8      	str	r0, [r7, #12]
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	603b      	str	r3, [r7, #0]
 80069b6:	4613      	mov	r3, r2
 80069b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ba:	e0a5      	b.n	8006b08 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c2:	f000 80a1 	beq.w	8006b08 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069c6:	f7fb ff03 	bl	80027d0 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d302      	bcc.n	80069dc <UART_WaitOnFlagUntilTimeout+0x32>
 80069d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d13e      	bne.n	8006a5a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80069ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069f0:	667b      	str	r3, [r7, #100]	; 0x64
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a02:	e841 2300 	strex	r3, r2, [r1]
 8006a06:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1e6      	bne.n	80069dc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3308      	adds	r3, #8
 8006a14:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a20:	f023 0301 	bic.w	r3, r3, #1
 8006a24:	663b      	str	r3, [r7, #96]	; 0x60
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	3308      	adds	r3, #8
 8006a2c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a2e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a30:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e5      	bne.n	8006a0e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2220      	movs	r2, #32
 8006a46:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e067      	b.n	8006b2a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 0304 	and.w	r3, r3, #4
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d04f      	beq.n	8006b08 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a76:	d147      	bne.n	8006b08 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a80:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8a:	e853 3f00 	ldrex	r3, [r3]
 8006a8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	461a      	mov	r2, r3
 8006a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006aa8:	e841 2300 	strex	r3, r2, [r1]
 8006aac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1e6      	bne.n	8006a82 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3308      	adds	r3, #8
 8006aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	e853 3f00 	ldrex	r3, [r3]
 8006ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	f023 0301 	bic.w	r3, r3, #1
 8006aca:	66bb      	str	r3, [r7, #104]	; 0x68
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3308      	adds	r3, #8
 8006ad2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ad4:	623a      	str	r2, [r7, #32]
 8006ad6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad8:	69f9      	ldr	r1, [r7, #28]
 8006ada:	6a3a      	ldr	r2, [r7, #32]
 8006adc:	e841 2300 	strex	r3, r2, [r1]
 8006ae0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e5      	bne.n	8006ab4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2220      	movs	r2, #32
 8006aec:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2220      	movs	r2, #32
 8006af2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2220      	movs	r2, #32
 8006af8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e010      	b.n	8006b2a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	69da      	ldr	r2, [r3, #28]
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	4013      	ands	r3, r2
 8006b12:	68ba      	ldr	r2, [r7, #8]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	bf0c      	ite	eq
 8006b18:	2301      	moveq	r3, #1
 8006b1a:	2300      	movne	r3, #0
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	461a      	mov	r2, r3
 8006b20:	79fb      	ldrb	r3, [r7, #7]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	f43f af4a 	beq.w	80069bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3770      	adds	r7, #112	; 0x70
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
	...

08006b34 <iNemoEngine_gbias_init>:
 8006b34:	b430      	push	{r4, r5}
 8006b36:	4b1f      	ldr	r3, [pc, #124]	; (8006bb4 <iNemoEngine_gbias_init+0x80>)
 8006b38:	4a1f      	ldr	r2, [pc, #124]	; (8006bb8 <iNemoEngine_gbias_init+0x84>)
 8006b3a:	4920      	ldr	r1, [pc, #128]	; (8006bbc <iNemoEngine_gbias_init+0x88>)
 8006b3c:	4d20      	ldr	r5, [pc, #128]	; (8006bc0 <iNemoEngine_gbias_init+0x8c>)
 8006b3e:	4c21      	ldr	r4, [pc, #132]	; (8006bc4 <iNemoEngine_gbias_init+0x90>)
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006b46:	2200      	movs	r2, #0
 8006b48:	6059      	str	r1, [r3, #4]
 8006b4a:	481f      	ldr	r0, [pc, #124]	; (8006bc8 <iNemoEngine_gbias_init+0x94>)
 8006b4c:	609d      	str	r5, [r3, #8]
 8006b4e:	2100      	movs	r1, #0
 8006b50:	60dc      	str	r4, [r3, #12]
 8006b52:	ed83 0a04 	vstr	s0, [r3, #16]
 8006b56:	6158      	str	r0, [r3, #20]
 8006b58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8006b5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006b60:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8006b64:	655a      	str	r2, [r3, #84]	; 0x54
 8006b66:	661a      	str	r2, [r3, #96]	; 0x60
 8006b68:	659a      	str	r2, [r3, #88]	; 0x58
 8006b6a:	665a      	str	r2, [r3, #100]	; 0x64
 8006b6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b6e:	669a      	str	r2, [r3, #104]	; 0x68
 8006b70:	671a      	str	r2, [r3, #112]	; 0x70
 8006b72:	67da      	str	r2, [r3, #124]	; 0x7c
 8006b74:	675a      	str	r2, [r3, #116]	; 0x74
 8006b76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006b7a:	679a      	str	r2, [r3, #120]	; 0x78
 8006b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8006b80:	61da      	str	r2, [r3, #28]
 8006b82:	629a      	str	r2, [r3, #40]	; 0x28
 8006b84:	621a      	str	r2, [r3, #32]
 8006b86:	62da      	str	r2, [r3, #44]	; 0x2c
 8006b88:	625a      	str	r2, [r3, #36]	; 0x24
 8006b8a:	631a      	str	r2, [r3, #48]	; 0x30
 8006b8c:	f8a3 1088 	strh.w	r1, [r3, #136]	; 0x88
 8006b90:	f8a3 1050 	strh.w	r1, [r3, #80]	; 0x50
 8006b94:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
 8006b98:	8319      	strh	r1, [r3, #24]
 8006b9a:	8699      	strh	r1, [r3, #52]	; 0x34
 8006b9c:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
 8006ba0:	bc30      	pop	{r4, r5}
 8006ba2:	639a      	str	r2, [r3, #56]	; 0x38
 8006ba4:	645a      	str	r2, [r3, #68]	; 0x44
 8006ba6:	63da      	str	r2, [r3, #60]	; 0x3c
 8006ba8:	649a      	str	r2, [r3, #72]	; 0x48
 8006baa:	641a      	str	r2, [r3, #64]	; 0x40
 8006bac:	64da      	str	r2, [r3, #76]	; 0x4c
 8006bae:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
 8006bb2:	4770      	bx	lr
 8006bb4:	20001630 	.word	0x20001630
 8006bb8:	3ab20043 	.word	0x3ab20043
 8006bbc:	3e8a3d71 	.word	0x3e8a3d71
 8006bc0:	3ea8f5c3 	.word	0x3ea8f5c3
 8006bc4:	3d09c927 	.word	0x3d09c927
 8006bc8:	41700000 	.word	0x41700000

08006bcc <iNemo_setOrientation.constprop.0>:
 8006bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd0:	4a70      	ldr	r2, [pc, #448]	; (8006d94 <iNemo_setOrientation.constprop.0+0x1c8>)
 8006bd2:	4b71      	ldr	r3, [pc, #452]	; (8006d98 <iNemo_setOrientation.constprop.0+0x1cc>)
 8006bd4:	f892 e000 	ldrb.w	lr, [r2]
 8006bd8:	7915      	ldrb	r5, [r2, #4]
 8006bda:	7857      	ldrb	r7, [r2, #1]
 8006bdc:	7954      	ldrb	r4, [r2, #5]
 8006bde:	f892 c009 	ldrb.w	ip, [r2, #9]
 8006be2:	f1ae 0642 	sub.w	r6, lr, #66	; 0x42
 8006be6:	2100      	movs	r1, #0
 8006be8:	2e17      	cmp	r6, #23
 8006bea:	bf98      	it	ls
 8006bec:	f10e 0e20 	addls.w	lr, lr, #32
 8006bf0:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
 8006bf4:	f883 10ac 	strb.w	r1, [r3, #172]	; 0xac
 8006bf8:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
 8006bfc:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
 8006c00:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
 8006c04:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 8006c08:	f883 10b8 	strb.w	r1, [r3, #184]	; 0xb8
 8006c0c:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
 8006c10:	f883 10c4 	strb.w	r1, [r3, #196]	; 0xc4
 8006c14:	f1a5 0142 	sub.w	r1, r5, #66	; 0x42
 8006c18:	bf98      	it	ls
 8006c1a:	fa5f fe8e 	uxtbls.w	lr, lr
 8006c1e:	2917      	cmp	r1, #23
 8006c20:	7a11      	ldrb	r1, [r2, #8]
 8006c22:	7896      	ldrb	r6, [r2, #2]
 8006c24:	f1a1 0042 	sub.w	r0, r1, #66	; 0x42
 8006c28:	bf9c      	itt	ls
 8006c2a:	3520      	addls	r5, #32
 8006c2c:	b2ed      	uxtbls	r5, r5
 8006c2e:	2817      	cmp	r0, #23
 8006c30:	bf98      	it	ls
 8006c32:	3120      	addls	r1, #32
 8006c34:	f1a7 0042 	sub.w	r0, r7, #66	; 0x42
 8006c38:	bf98      	it	ls
 8006c3a:	b2c9      	uxtbls	r1, r1
 8006c3c:	2817      	cmp	r0, #23
 8006c3e:	bf98      	it	ls
 8006c40:	3720      	addls	r7, #32
 8006c42:	f1a4 0042 	sub.w	r0, r4, #66	; 0x42
 8006c46:	bf98      	it	ls
 8006c48:	b2ff      	uxtbls	r7, r7
 8006c4a:	2817      	cmp	r0, #23
 8006c4c:	bf98      	it	ls
 8006c4e:	3420      	addls	r4, #32
 8006c50:	f1ac 0042 	sub.w	r0, ip, #66	; 0x42
 8006c54:	bf98      	it	ls
 8006c56:	b2e4      	uxtbls	r4, r4
 8006c58:	2817      	cmp	r0, #23
 8006c5a:	bf98      	it	ls
 8006c5c:	f10c 0c20 	addls.w	ip, ip, #32
 8006c60:	f1a6 0042 	sub.w	r0, r6, #66	; 0x42
 8006c64:	bf98      	it	ls
 8006c66:	fa5f fc8c 	uxtbls.w	ip, ip
 8006c6a:	2817      	cmp	r0, #23
 8006c6c:	7990      	ldrb	r0, [r2, #6]
 8006c6e:	7a92      	ldrb	r2, [r2, #10]
 8006c70:	f1a0 0842 	sub.w	r8, r0, #66	; 0x42
 8006c74:	bf9c      	itt	ls
 8006c76:	3620      	addls	r6, #32
 8006c78:	b2f6      	uxtbls	r6, r6
 8006c7a:	f1b8 0f17 	cmp.w	r8, #23
 8006c7e:	bf98      	it	ls
 8006c80:	3020      	addls	r0, #32
 8006c82:	f1a2 0842 	sub.w	r8, r2, #66	; 0x42
 8006c86:	bf98      	it	ls
 8006c88:	b2c0      	uxtbls	r0, r0
 8006c8a:	f1b8 0f17 	cmp.w	r8, #23
 8006c8e:	bf98      	it	ls
 8006c90:	3220      	addls	r2, #32
 8006c92:	f1ae 0e64 	sub.w	lr, lr, #100	; 0x64
 8006c96:	bf98      	it	ls
 8006c98:	b2d2      	uxtbls	r2, r2
 8006c9a:	f1be 0f13 	cmp.w	lr, #19
 8006c9e:	d80f      	bhi.n	8006cc0 <iNemo_setOrientation.constprop.0+0xf4>
 8006ca0:	e8df f00e 	tbb	[pc, lr]
 8006ca4:	0e0eac0a 	.word	0x0e0eac0a
 8006ca8:	0e0e0e0e 	.word	0x0e0e0e0e
 8006cac:	0eb10e0e 	.word	0x0eb10e0e
 8006cb0:	b60e0e0e 	.word	0xb60e0e0e
 8006cb4:	c00ebb0e 	.word	0xc00ebb0e
 8006cb8:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8006cbc:	f883 e0aa 	strb.w	lr, [r3, #170]	; 0xaa
 8006cc0:	3f64      	subs	r7, #100	; 0x64
 8006cc2:	2f13      	cmp	r7, #19
 8006cc4:	d80e      	bhi.n	8006ce4 <iNemo_setOrientation.constprop.0+0x118>
 8006cc6:	e8df f007 	tbb	[pc, r7]
 8006cca:	b20a      	.short	0xb20a
 8006ccc:	0d0d0d0d 	.word	0x0d0d0d0d
 8006cd0:	0d0d0d0d 	.word	0x0d0d0d0d
 8006cd4:	0d0d0db6 	.word	0x0d0d0db6
 8006cd8:	be0dba0d 	.word	0xbe0dba0d
 8006cdc:	c20d      	.short	0xc20d
 8006cde:	27ff      	movs	r7, #255	; 0xff
 8006ce0:	f883 70ab 	strb.w	r7, [r3, #171]	; 0xab
 8006ce4:	3e64      	subs	r6, #100	; 0x64
 8006ce6:	2e13      	cmp	r6, #19
 8006ce8:	d80e      	bhi.n	8006d08 <iNemo_setOrientation.constprop.0+0x13c>
 8006cea:	e8df f006 	tbb	[pc, r6]
 8006cee:	b40a      	.short	0xb40a
 8006cf0:	0d0d0d0d 	.word	0x0d0d0d0d
 8006cf4:	0d0d0d0d 	.word	0x0d0d0d0d
 8006cf8:	0d0d0db8 	.word	0x0d0d0db8
 8006cfc:	c00dbc0d 	.word	0xc00dbc0d
 8006d00:	c40d      	.short	0xc40d
 8006d02:	26ff      	movs	r6, #255	; 0xff
 8006d04:	f883 60ac 	strb.w	r6, [r3, #172]	; 0xac
 8006d08:	3d64      	subs	r5, #100	; 0x64
 8006d0a:	2d13      	cmp	r5, #19
 8006d0c:	d80e      	bhi.n	8006d2c <iNemo_setOrientation.constprop.0+0x160>
 8006d0e:	e8df f005 	tbb	[pc, r5]
 8006d12:	b60a      	.short	0xb60a
 8006d14:	0d0d0d0d 	.word	0x0d0d0d0d
 8006d18:	0d0d0d0d 	.word	0x0d0d0d0d
 8006d1c:	0d0d0dba 	.word	0x0d0d0dba
 8006d20:	c20dbe0d 	.word	0xc20dbe0d
 8006d24:	c60d      	.short	0xc60d
 8006d26:	25ff      	movs	r5, #255	; 0xff
 8006d28:	f883 50c2 	strb.w	r5, [r3, #194]	; 0xc2
 8006d2c:	3c64      	subs	r4, #100	; 0x64
 8006d2e:	2c13      	cmp	r4, #19
 8006d30:	d80e      	bhi.n	8006d50 <iNemo_setOrientation.constprop.0+0x184>
 8006d32:	e8df f004 	tbb	[pc, r4]
 8006d36:	b80a      	.short	0xb80a
 8006d38:	0d0d0d0d 	.word	0x0d0d0d0d
 8006d3c:	0d0d0d0d 	.word	0x0d0d0d0d
 8006d40:	0d0d0dbc 	.word	0x0d0d0dbc
 8006d44:	c40dc00d 	.word	0xc40dc00d
 8006d48:	c80d      	.short	0xc80d
 8006d4a:	24ff      	movs	r4, #255	; 0xff
 8006d4c:	f883 40c3 	strb.w	r4, [r3, #195]	; 0xc3
 8006d50:	3864      	subs	r0, #100	; 0x64
 8006d52:	2813      	cmp	r0, #19
 8006d54:	d80e      	bhi.n	8006d74 <iNemo_setOrientation.constprop.0+0x1a8>
 8006d56:	e8df f000 	tbb	[pc, r0]
 8006d5a:	ba0a      	.short	0xba0a
 8006d5c:	0d0d0d0d 	.word	0x0d0d0d0d
 8006d60:	0d0d0d0d 	.word	0x0d0d0d0d
 8006d64:	0d0d0dbe 	.word	0x0d0d0dbe
 8006d68:	c60dc20d 	.word	0xc60dc20d
 8006d6c:	ca0d      	.short	0xca0d
 8006d6e:	20ff      	movs	r0, #255	; 0xff
 8006d70:	f883 00c4 	strb.w	r0, [r3, #196]	; 0xc4
 8006d74:	3964      	subs	r1, #100	; 0x64
 8006d76:	2913      	cmp	r1, #19
 8006d78:	d813      	bhi.n	8006da2 <iNemo_setOrientation.constprop.0+0x1d6>
 8006d7a:	e8df f001 	tbb	[pc, r1]
 8006d7e:	bc0f      	.short	0xbc0f
 8006d80:	12121212 	.word	0x12121212
 8006d84:	12121212 	.word	0x12121212
 8006d88:	121212c0 	.word	0x121212c0
 8006d8c:	c812c412 	.word	0xc812c412
 8006d90:	cc12      	.short	0xcc12
 8006d92:	bf00      	nop
 8006d94:	20000000 	.word	0x20000000
 8006d98:	20001630 	.word	0x20001630
 8006d9c:	21ff      	movs	r1, #255	; 0xff
 8006d9e:	f883 10b6 	strb.w	r1, [r3, #182]	; 0xb6
 8006da2:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 8006da6:	f1bc 0f13 	cmp.w	ip, #19
 8006daa:	d80e      	bhi.n	8006dca <iNemo_setOrientation.constprop.0+0x1fe>
 8006dac:	e8df f00c 	tbb	[pc, ip]
 8006db0:	0d0db70a 	.word	0x0d0db70a
 8006db4:	0d0d0d0d 	.word	0x0d0d0d0d
 8006db8:	0dbb0d0d 	.word	0x0dbb0d0d
 8006dbc:	bf0d0d0d 	.word	0xbf0d0d0d
 8006dc0:	c70dc30d 	.word	0xc70dc30d
 8006dc4:	21ff      	movs	r1, #255	; 0xff
 8006dc6:	f883 10b7 	strb.w	r1, [r3, #183]	; 0xb7
 8006dca:	3a64      	subs	r2, #100	; 0x64
 8006dcc:	2a13      	cmp	r2, #19
 8006dce:	d80e      	bhi.n	8006dee <iNemo_setOrientation.constprop.0+0x222>
 8006dd0:	e8df f002 	tbb	[pc, r2]
 8006dd4:	0d0db90a 	.word	0x0d0db90a
 8006dd8:	0d0d0d0d 	.word	0x0d0d0d0d
 8006ddc:	0dbe0d0d 	.word	0x0dbe0d0d
 8006de0:	c30d0d0d 	.word	0xc30d0d0d
 8006de4:	0f0dc80d 	.word	0x0f0dc80d
 8006de8:	22ff      	movs	r2, #255	; 0xff
 8006dea:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8006dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006df2:	22ff      	movs	r2, #255	; 0xff
 8006df4:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8006df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006dfc:	f04f 0e01 	mov.w	lr, #1
 8006e00:	f883 e0a4 	strb.w	lr, [r3, #164]	; 0xa4
 8006e04:	e75c      	b.n	8006cc0 <iNemo_setOrientation.constprop.0+0xf4>
 8006e06:	f04f 0e01 	mov.w	lr, #1
 8006e0a:	f883 e0a7 	strb.w	lr, [r3, #167]	; 0xa7
 8006e0e:	e757      	b.n	8006cc0 <iNemo_setOrientation.constprop.0+0xf4>
 8006e10:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8006e14:	f883 e0a7 	strb.w	lr, [r3, #167]	; 0xa7
 8006e18:	e752      	b.n	8006cc0 <iNemo_setOrientation.constprop.0+0xf4>
 8006e1a:	f04f 0e01 	mov.w	lr, #1
 8006e1e:	f883 e0aa 	strb.w	lr, [r3, #170]	; 0xaa
 8006e22:	e74d      	b.n	8006cc0 <iNemo_setOrientation.constprop.0+0xf4>
 8006e24:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8006e28:	f883 e0a4 	strb.w	lr, [r3, #164]	; 0xa4
 8006e2c:	e748      	b.n	8006cc0 <iNemo_setOrientation.constprop.0+0xf4>
 8006e2e:	2701      	movs	r7, #1
 8006e30:	f883 70a5 	strb.w	r7, [r3, #165]	; 0xa5
 8006e34:	e756      	b.n	8006ce4 <iNemo_setOrientation.constprop.0+0x118>
 8006e36:	2701      	movs	r7, #1
 8006e38:	f883 70a8 	strb.w	r7, [r3, #168]	; 0xa8
 8006e3c:	e752      	b.n	8006ce4 <iNemo_setOrientation.constprop.0+0x118>
 8006e3e:	27ff      	movs	r7, #255	; 0xff
 8006e40:	f883 70a8 	strb.w	r7, [r3, #168]	; 0xa8
 8006e44:	e74e      	b.n	8006ce4 <iNemo_setOrientation.constprop.0+0x118>
 8006e46:	2701      	movs	r7, #1
 8006e48:	f883 70ab 	strb.w	r7, [r3, #171]	; 0xab
 8006e4c:	e74a      	b.n	8006ce4 <iNemo_setOrientation.constprop.0+0x118>
 8006e4e:	27ff      	movs	r7, #255	; 0xff
 8006e50:	f883 70a5 	strb.w	r7, [r3, #165]	; 0xa5
 8006e54:	e746      	b.n	8006ce4 <iNemo_setOrientation.constprop.0+0x118>
 8006e56:	2601      	movs	r6, #1
 8006e58:	f883 60a6 	strb.w	r6, [r3, #166]	; 0xa6
 8006e5c:	e754      	b.n	8006d08 <iNemo_setOrientation.constprop.0+0x13c>
 8006e5e:	2601      	movs	r6, #1
 8006e60:	f883 60a9 	strb.w	r6, [r3, #169]	; 0xa9
 8006e64:	e750      	b.n	8006d08 <iNemo_setOrientation.constprop.0+0x13c>
 8006e66:	26ff      	movs	r6, #255	; 0xff
 8006e68:	f883 60a9 	strb.w	r6, [r3, #169]	; 0xa9
 8006e6c:	e74c      	b.n	8006d08 <iNemo_setOrientation.constprop.0+0x13c>
 8006e6e:	2601      	movs	r6, #1
 8006e70:	f883 60ac 	strb.w	r6, [r3, #172]	; 0xac
 8006e74:	e748      	b.n	8006d08 <iNemo_setOrientation.constprop.0+0x13c>
 8006e76:	26ff      	movs	r6, #255	; 0xff
 8006e78:	f883 60a6 	strb.w	r6, [r3, #166]	; 0xa6
 8006e7c:	e744      	b.n	8006d08 <iNemo_setOrientation.constprop.0+0x13c>
 8006e7e:	2501      	movs	r5, #1
 8006e80:	f883 50bc 	strb.w	r5, [r3, #188]	; 0xbc
 8006e84:	e752      	b.n	8006d2c <iNemo_setOrientation.constprop.0+0x160>
 8006e86:	2501      	movs	r5, #1
 8006e88:	f883 50bf 	strb.w	r5, [r3, #191]	; 0xbf
 8006e8c:	e74e      	b.n	8006d2c <iNemo_setOrientation.constprop.0+0x160>
 8006e8e:	25ff      	movs	r5, #255	; 0xff
 8006e90:	f883 50bf 	strb.w	r5, [r3, #191]	; 0xbf
 8006e94:	e74a      	b.n	8006d2c <iNemo_setOrientation.constprop.0+0x160>
 8006e96:	2501      	movs	r5, #1
 8006e98:	f883 50c2 	strb.w	r5, [r3, #194]	; 0xc2
 8006e9c:	e746      	b.n	8006d2c <iNemo_setOrientation.constprop.0+0x160>
 8006e9e:	25ff      	movs	r5, #255	; 0xff
 8006ea0:	f883 50bc 	strb.w	r5, [r3, #188]	; 0xbc
 8006ea4:	e742      	b.n	8006d2c <iNemo_setOrientation.constprop.0+0x160>
 8006ea6:	2401      	movs	r4, #1
 8006ea8:	f883 40bd 	strb.w	r4, [r3, #189]	; 0xbd
 8006eac:	e750      	b.n	8006d50 <iNemo_setOrientation.constprop.0+0x184>
 8006eae:	2401      	movs	r4, #1
 8006eb0:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
 8006eb4:	e74c      	b.n	8006d50 <iNemo_setOrientation.constprop.0+0x184>
 8006eb6:	24ff      	movs	r4, #255	; 0xff
 8006eb8:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
 8006ebc:	e748      	b.n	8006d50 <iNemo_setOrientation.constprop.0+0x184>
 8006ebe:	2401      	movs	r4, #1
 8006ec0:	f883 40c3 	strb.w	r4, [r3, #195]	; 0xc3
 8006ec4:	e744      	b.n	8006d50 <iNemo_setOrientation.constprop.0+0x184>
 8006ec6:	24ff      	movs	r4, #255	; 0xff
 8006ec8:	f883 40bd 	strb.w	r4, [r3, #189]	; 0xbd
 8006ecc:	e740      	b.n	8006d50 <iNemo_setOrientation.constprop.0+0x184>
 8006ece:	2001      	movs	r0, #1
 8006ed0:	f883 00be 	strb.w	r0, [r3, #190]	; 0xbe
 8006ed4:	e74e      	b.n	8006d74 <iNemo_setOrientation.constprop.0+0x1a8>
 8006ed6:	2001      	movs	r0, #1
 8006ed8:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
 8006edc:	e74a      	b.n	8006d74 <iNemo_setOrientation.constprop.0+0x1a8>
 8006ede:	20ff      	movs	r0, #255	; 0xff
 8006ee0:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
 8006ee4:	e746      	b.n	8006d74 <iNemo_setOrientation.constprop.0+0x1a8>
 8006ee6:	2001      	movs	r0, #1
 8006ee8:	f883 00c4 	strb.w	r0, [r3, #196]	; 0xc4
 8006eec:	e742      	b.n	8006d74 <iNemo_setOrientation.constprop.0+0x1a8>
 8006eee:	20ff      	movs	r0, #255	; 0xff
 8006ef0:	f883 00be 	strb.w	r0, [r3, #190]	; 0xbe
 8006ef4:	e73e      	b.n	8006d74 <iNemo_setOrientation.constprop.0+0x1a8>
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
 8006efc:	e751      	b.n	8006da2 <iNemo_setOrientation.constprop.0+0x1d6>
 8006efe:	2101      	movs	r1, #1
 8006f00:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
 8006f04:	e74d      	b.n	8006da2 <iNemo_setOrientation.constprop.0+0x1d6>
 8006f06:	21ff      	movs	r1, #255	; 0xff
 8006f08:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
 8006f0c:	e749      	b.n	8006da2 <iNemo_setOrientation.constprop.0+0x1d6>
 8006f0e:	2101      	movs	r1, #1
 8006f10:	f883 10b6 	strb.w	r1, [r3, #182]	; 0xb6
 8006f14:	e745      	b.n	8006da2 <iNemo_setOrientation.constprop.0+0x1d6>
 8006f16:	21ff      	movs	r1, #255	; 0xff
 8006f18:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
 8006f1c:	e741      	b.n	8006da2 <iNemo_setOrientation.constprop.0+0x1d6>
 8006f1e:	2101      	movs	r1, #1
 8006f20:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
 8006f24:	e751      	b.n	8006dca <iNemo_setOrientation.constprop.0+0x1fe>
 8006f26:	2101      	movs	r1, #1
 8006f28:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
 8006f2c:	e74d      	b.n	8006dca <iNemo_setOrientation.constprop.0+0x1fe>
 8006f2e:	21ff      	movs	r1, #255	; 0xff
 8006f30:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
 8006f34:	e749      	b.n	8006dca <iNemo_setOrientation.constprop.0+0x1fe>
 8006f36:	2101      	movs	r1, #1
 8006f38:	f883 10b7 	strb.w	r1, [r3, #183]	; 0xb7
 8006f3c:	e745      	b.n	8006dca <iNemo_setOrientation.constprop.0+0x1fe>
 8006f3e:	21ff      	movs	r1, #255	; 0xff
 8006f40:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
 8006f44:	e741      	b.n	8006dca <iNemo_setOrientation.constprop.0+0x1fe>
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8006f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 8006f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f5a:	22ff      	movs	r2, #255	; 0xff
 8006f5c:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 8006f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f64:	2201      	movs	r2, #1
 8006f66:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8006f6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f6e:	bf00      	nop

08006f70 <iNemo_setOrientation_6X.constprop.0>:
 8006f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f74:	4a70      	ldr	r2, [pc, #448]	; (8007138 <iNemo_setOrientation_6X.constprop.0+0x1c8>)
 8006f76:	4b71      	ldr	r3, [pc, #452]	; (800713c <iNemo_setOrientation_6X.constprop.0+0x1cc>)
 8006f78:	f892 e000 	ldrb.w	lr, [r2]
 8006f7c:	7915      	ldrb	r5, [r2, #4]
 8006f7e:	7857      	ldrb	r7, [r2, #1]
 8006f80:	7954      	ldrb	r4, [r2, #5]
 8006f82:	f892 c009 	ldrb.w	ip, [r2, #9]
 8006f86:	f1ae 0642 	sub.w	r6, lr, #66	; 0x42
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	2e17      	cmp	r6, #23
 8006f8e:	bf98      	it	ls
 8006f90:	f10e 0e20 	addls.w	lr, lr, #32
 8006f94:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
 8006f98:	f883 10d0 	strb.w	r1, [r3, #208]	; 0xd0
 8006f9c:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 8006fa0:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
 8006fa4:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 8006fa8:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
 8006fac:	f883 10dc 	strb.w	r1, [r3, #220]	; 0xdc
 8006fb0:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
 8006fb4:	f883 10e8 	strb.w	r1, [r3, #232]	; 0xe8
 8006fb8:	f1a5 0142 	sub.w	r1, r5, #66	; 0x42
 8006fbc:	bf98      	it	ls
 8006fbe:	fa5f fe8e 	uxtbls.w	lr, lr
 8006fc2:	2917      	cmp	r1, #23
 8006fc4:	7a11      	ldrb	r1, [r2, #8]
 8006fc6:	7896      	ldrb	r6, [r2, #2]
 8006fc8:	f1a1 0042 	sub.w	r0, r1, #66	; 0x42
 8006fcc:	bf9c      	itt	ls
 8006fce:	3520      	addls	r5, #32
 8006fd0:	b2ed      	uxtbls	r5, r5
 8006fd2:	2817      	cmp	r0, #23
 8006fd4:	bf98      	it	ls
 8006fd6:	3120      	addls	r1, #32
 8006fd8:	f1a7 0042 	sub.w	r0, r7, #66	; 0x42
 8006fdc:	bf98      	it	ls
 8006fde:	b2c9      	uxtbls	r1, r1
 8006fe0:	2817      	cmp	r0, #23
 8006fe2:	bf98      	it	ls
 8006fe4:	3720      	addls	r7, #32
 8006fe6:	f1a4 0042 	sub.w	r0, r4, #66	; 0x42
 8006fea:	bf98      	it	ls
 8006fec:	b2ff      	uxtbls	r7, r7
 8006fee:	2817      	cmp	r0, #23
 8006ff0:	bf98      	it	ls
 8006ff2:	3420      	addls	r4, #32
 8006ff4:	f1ac 0042 	sub.w	r0, ip, #66	; 0x42
 8006ff8:	bf98      	it	ls
 8006ffa:	b2e4      	uxtbls	r4, r4
 8006ffc:	2817      	cmp	r0, #23
 8006ffe:	bf98      	it	ls
 8007000:	f10c 0c20 	addls.w	ip, ip, #32
 8007004:	f1a6 0042 	sub.w	r0, r6, #66	; 0x42
 8007008:	bf98      	it	ls
 800700a:	fa5f fc8c 	uxtbls.w	ip, ip
 800700e:	2817      	cmp	r0, #23
 8007010:	7990      	ldrb	r0, [r2, #6]
 8007012:	7a92      	ldrb	r2, [r2, #10]
 8007014:	f1a0 0842 	sub.w	r8, r0, #66	; 0x42
 8007018:	bf9c      	itt	ls
 800701a:	3620      	addls	r6, #32
 800701c:	b2f6      	uxtbls	r6, r6
 800701e:	f1b8 0f17 	cmp.w	r8, #23
 8007022:	bf98      	it	ls
 8007024:	3020      	addls	r0, #32
 8007026:	f1a2 0842 	sub.w	r8, r2, #66	; 0x42
 800702a:	bf98      	it	ls
 800702c:	b2c0      	uxtbls	r0, r0
 800702e:	f1b8 0f17 	cmp.w	r8, #23
 8007032:	bf98      	it	ls
 8007034:	3220      	addls	r2, #32
 8007036:	f1ae 0e64 	sub.w	lr, lr, #100	; 0x64
 800703a:	bf98      	it	ls
 800703c:	b2d2      	uxtbls	r2, r2
 800703e:	f1be 0f13 	cmp.w	lr, #19
 8007042:	d80f      	bhi.n	8007064 <iNemo_setOrientation_6X.constprop.0+0xf4>
 8007044:	e8df f00e 	tbb	[pc, lr]
 8007048:	0e0eac0a 	.word	0x0e0eac0a
 800704c:	0e0e0e0e 	.word	0x0e0e0e0e
 8007050:	0eb10e0e 	.word	0x0eb10e0e
 8007054:	b60e0e0e 	.word	0xb60e0e0e
 8007058:	c00ebb0e 	.word	0xc00ebb0e
 800705c:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8007060:	f883 e0ce 	strb.w	lr, [r3, #206]	; 0xce
 8007064:	3f64      	subs	r7, #100	; 0x64
 8007066:	2f13      	cmp	r7, #19
 8007068:	d80e      	bhi.n	8007088 <iNemo_setOrientation_6X.constprop.0+0x118>
 800706a:	e8df f007 	tbb	[pc, r7]
 800706e:	b20a      	.short	0xb20a
 8007070:	0d0d0d0d 	.word	0x0d0d0d0d
 8007074:	0d0d0d0d 	.word	0x0d0d0d0d
 8007078:	0d0d0db6 	.word	0x0d0d0db6
 800707c:	be0dba0d 	.word	0xbe0dba0d
 8007080:	c20d      	.short	0xc20d
 8007082:	27ff      	movs	r7, #255	; 0xff
 8007084:	f883 70cf 	strb.w	r7, [r3, #207]	; 0xcf
 8007088:	3e64      	subs	r6, #100	; 0x64
 800708a:	2e13      	cmp	r6, #19
 800708c:	d80e      	bhi.n	80070ac <iNemo_setOrientation_6X.constprop.0+0x13c>
 800708e:	e8df f006 	tbb	[pc, r6]
 8007092:	b40a      	.short	0xb40a
 8007094:	0d0d0d0d 	.word	0x0d0d0d0d
 8007098:	0d0d0d0d 	.word	0x0d0d0d0d
 800709c:	0d0d0db8 	.word	0x0d0d0db8
 80070a0:	c00dbc0d 	.word	0xc00dbc0d
 80070a4:	c40d      	.short	0xc40d
 80070a6:	26ff      	movs	r6, #255	; 0xff
 80070a8:	f883 60d0 	strb.w	r6, [r3, #208]	; 0xd0
 80070ac:	3d64      	subs	r5, #100	; 0x64
 80070ae:	2d13      	cmp	r5, #19
 80070b0:	d80e      	bhi.n	80070d0 <iNemo_setOrientation_6X.constprop.0+0x160>
 80070b2:	e8df f005 	tbb	[pc, r5]
 80070b6:	b60a      	.short	0xb60a
 80070b8:	0d0d0d0d 	.word	0x0d0d0d0d
 80070bc:	0d0d0d0d 	.word	0x0d0d0d0d
 80070c0:	0d0d0dba 	.word	0x0d0d0dba
 80070c4:	c20dbe0d 	.word	0xc20dbe0d
 80070c8:	c60d      	.short	0xc60d
 80070ca:	25ff      	movs	r5, #255	; 0xff
 80070cc:	f883 50e6 	strb.w	r5, [r3, #230]	; 0xe6
 80070d0:	3c64      	subs	r4, #100	; 0x64
 80070d2:	2c13      	cmp	r4, #19
 80070d4:	d80e      	bhi.n	80070f4 <iNemo_setOrientation_6X.constprop.0+0x184>
 80070d6:	e8df f004 	tbb	[pc, r4]
 80070da:	b80a      	.short	0xb80a
 80070dc:	0d0d0d0d 	.word	0x0d0d0d0d
 80070e0:	0d0d0d0d 	.word	0x0d0d0d0d
 80070e4:	0d0d0dbc 	.word	0x0d0d0dbc
 80070e8:	c40dc00d 	.word	0xc40dc00d
 80070ec:	c80d      	.short	0xc80d
 80070ee:	24ff      	movs	r4, #255	; 0xff
 80070f0:	f883 40e7 	strb.w	r4, [r3, #231]	; 0xe7
 80070f4:	3864      	subs	r0, #100	; 0x64
 80070f6:	2813      	cmp	r0, #19
 80070f8:	d80e      	bhi.n	8007118 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 80070fa:	e8df f000 	tbb	[pc, r0]
 80070fe:	ba0a      	.short	0xba0a
 8007100:	0d0d0d0d 	.word	0x0d0d0d0d
 8007104:	0d0d0d0d 	.word	0x0d0d0d0d
 8007108:	0d0d0dbe 	.word	0x0d0d0dbe
 800710c:	c60dc20d 	.word	0xc60dc20d
 8007110:	ca0d      	.short	0xca0d
 8007112:	20ff      	movs	r0, #255	; 0xff
 8007114:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
 8007118:	3964      	subs	r1, #100	; 0x64
 800711a:	2913      	cmp	r1, #19
 800711c:	d813      	bhi.n	8007146 <iNemo_setOrientation_6X.constprop.0+0x1d6>
 800711e:	e8df f001 	tbb	[pc, r1]
 8007122:	bc0f      	.short	0xbc0f
 8007124:	12121212 	.word	0x12121212
 8007128:	12121212 	.word	0x12121212
 800712c:	121212c0 	.word	0x121212c0
 8007130:	c812c412 	.word	0xc812c412
 8007134:	cc12      	.short	0xcc12
 8007136:	bf00      	nop
 8007138:	20000000 	.word	0x20000000
 800713c:	20001630 	.word	0x20001630
 8007140:	21ff      	movs	r1, #255	; 0xff
 8007142:	f883 10da 	strb.w	r1, [r3, #218]	; 0xda
 8007146:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 800714a:	f1bc 0f13 	cmp.w	ip, #19
 800714e:	d80e      	bhi.n	800716e <iNemo_setOrientation_6X.constprop.0+0x1fe>
 8007150:	e8df f00c 	tbb	[pc, ip]
 8007154:	0d0db70a 	.word	0x0d0db70a
 8007158:	0d0d0d0d 	.word	0x0d0d0d0d
 800715c:	0dbb0d0d 	.word	0x0dbb0d0d
 8007160:	bf0d0d0d 	.word	0xbf0d0d0d
 8007164:	c70dc30d 	.word	0xc70dc30d
 8007168:	21ff      	movs	r1, #255	; 0xff
 800716a:	f883 10db 	strb.w	r1, [r3, #219]	; 0xdb
 800716e:	3a64      	subs	r2, #100	; 0x64
 8007170:	2a13      	cmp	r2, #19
 8007172:	d80e      	bhi.n	8007192 <iNemo_setOrientation_6X.constprop.0+0x222>
 8007174:	e8df f002 	tbb	[pc, r2]
 8007178:	0d0db90a 	.word	0x0d0db90a
 800717c:	0d0d0d0d 	.word	0x0d0d0d0d
 8007180:	0dbe0d0d 	.word	0x0dbe0d0d
 8007184:	c30d0d0d 	.word	0xc30d0d0d
 8007188:	0f0dc80d 	.word	0x0f0dc80d
 800718c:	22ff      	movs	r2, #255	; 0xff
 800718e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8007192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007196:	22ff      	movs	r2, #255	; 0xff
 8007198:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 800719c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071a0:	f04f 0e01 	mov.w	lr, #1
 80071a4:	f883 e0c8 	strb.w	lr, [r3, #200]	; 0xc8
 80071a8:	e75c      	b.n	8007064 <iNemo_setOrientation_6X.constprop.0+0xf4>
 80071aa:	f04f 0e01 	mov.w	lr, #1
 80071ae:	f883 e0cb 	strb.w	lr, [r3, #203]	; 0xcb
 80071b2:	e757      	b.n	8007064 <iNemo_setOrientation_6X.constprop.0+0xf4>
 80071b4:	f04f 0eff 	mov.w	lr, #255	; 0xff
 80071b8:	f883 e0cb 	strb.w	lr, [r3, #203]	; 0xcb
 80071bc:	e752      	b.n	8007064 <iNemo_setOrientation_6X.constprop.0+0xf4>
 80071be:	f04f 0e01 	mov.w	lr, #1
 80071c2:	f883 e0ce 	strb.w	lr, [r3, #206]	; 0xce
 80071c6:	e74d      	b.n	8007064 <iNemo_setOrientation_6X.constprop.0+0xf4>
 80071c8:	f04f 0eff 	mov.w	lr, #255	; 0xff
 80071cc:	f883 e0c8 	strb.w	lr, [r3, #200]	; 0xc8
 80071d0:	e748      	b.n	8007064 <iNemo_setOrientation_6X.constprop.0+0xf4>
 80071d2:	2701      	movs	r7, #1
 80071d4:	f883 70c9 	strb.w	r7, [r3, #201]	; 0xc9
 80071d8:	e756      	b.n	8007088 <iNemo_setOrientation_6X.constprop.0+0x118>
 80071da:	2701      	movs	r7, #1
 80071dc:	f883 70cc 	strb.w	r7, [r3, #204]	; 0xcc
 80071e0:	e752      	b.n	8007088 <iNemo_setOrientation_6X.constprop.0+0x118>
 80071e2:	27ff      	movs	r7, #255	; 0xff
 80071e4:	f883 70cc 	strb.w	r7, [r3, #204]	; 0xcc
 80071e8:	e74e      	b.n	8007088 <iNemo_setOrientation_6X.constprop.0+0x118>
 80071ea:	2701      	movs	r7, #1
 80071ec:	f883 70cf 	strb.w	r7, [r3, #207]	; 0xcf
 80071f0:	e74a      	b.n	8007088 <iNemo_setOrientation_6X.constprop.0+0x118>
 80071f2:	27ff      	movs	r7, #255	; 0xff
 80071f4:	f883 70c9 	strb.w	r7, [r3, #201]	; 0xc9
 80071f8:	e746      	b.n	8007088 <iNemo_setOrientation_6X.constprop.0+0x118>
 80071fa:	2601      	movs	r6, #1
 80071fc:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
 8007200:	e754      	b.n	80070ac <iNemo_setOrientation_6X.constprop.0+0x13c>
 8007202:	2601      	movs	r6, #1
 8007204:	f883 60cd 	strb.w	r6, [r3, #205]	; 0xcd
 8007208:	e750      	b.n	80070ac <iNemo_setOrientation_6X.constprop.0+0x13c>
 800720a:	26ff      	movs	r6, #255	; 0xff
 800720c:	f883 60cd 	strb.w	r6, [r3, #205]	; 0xcd
 8007210:	e74c      	b.n	80070ac <iNemo_setOrientation_6X.constprop.0+0x13c>
 8007212:	2601      	movs	r6, #1
 8007214:	f883 60d0 	strb.w	r6, [r3, #208]	; 0xd0
 8007218:	e748      	b.n	80070ac <iNemo_setOrientation_6X.constprop.0+0x13c>
 800721a:	26ff      	movs	r6, #255	; 0xff
 800721c:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
 8007220:	e744      	b.n	80070ac <iNemo_setOrientation_6X.constprop.0+0x13c>
 8007222:	2501      	movs	r5, #1
 8007224:	f883 50e0 	strb.w	r5, [r3, #224]	; 0xe0
 8007228:	e752      	b.n	80070d0 <iNemo_setOrientation_6X.constprop.0+0x160>
 800722a:	2501      	movs	r5, #1
 800722c:	f883 50e3 	strb.w	r5, [r3, #227]	; 0xe3
 8007230:	e74e      	b.n	80070d0 <iNemo_setOrientation_6X.constprop.0+0x160>
 8007232:	25ff      	movs	r5, #255	; 0xff
 8007234:	f883 50e3 	strb.w	r5, [r3, #227]	; 0xe3
 8007238:	e74a      	b.n	80070d0 <iNemo_setOrientation_6X.constprop.0+0x160>
 800723a:	2501      	movs	r5, #1
 800723c:	f883 50e6 	strb.w	r5, [r3, #230]	; 0xe6
 8007240:	e746      	b.n	80070d0 <iNemo_setOrientation_6X.constprop.0+0x160>
 8007242:	25ff      	movs	r5, #255	; 0xff
 8007244:	f883 50e0 	strb.w	r5, [r3, #224]	; 0xe0
 8007248:	e742      	b.n	80070d0 <iNemo_setOrientation_6X.constprop.0+0x160>
 800724a:	2401      	movs	r4, #1
 800724c:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
 8007250:	e750      	b.n	80070f4 <iNemo_setOrientation_6X.constprop.0+0x184>
 8007252:	2401      	movs	r4, #1
 8007254:	f883 40e4 	strb.w	r4, [r3, #228]	; 0xe4
 8007258:	e74c      	b.n	80070f4 <iNemo_setOrientation_6X.constprop.0+0x184>
 800725a:	24ff      	movs	r4, #255	; 0xff
 800725c:	f883 40e4 	strb.w	r4, [r3, #228]	; 0xe4
 8007260:	e748      	b.n	80070f4 <iNemo_setOrientation_6X.constprop.0+0x184>
 8007262:	2401      	movs	r4, #1
 8007264:	f883 40e7 	strb.w	r4, [r3, #231]	; 0xe7
 8007268:	e744      	b.n	80070f4 <iNemo_setOrientation_6X.constprop.0+0x184>
 800726a:	24ff      	movs	r4, #255	; 0xff
 800726c:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
 8007270:	e740      	b.n	80070f4 <iNemo_setOrientation_6X.constprop.0+0x184>
 8007272:	2001      	movs	r0, #1
 8007274:	f883 00e2 	strb.w	r0, [r3, #226]	; 0xe2
 8007278:	e74e      	b.n	8007118 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 800727a:	2001      	movs	r0, #1
 800727c:	f883 00e5 	strb.w	r0, [r3, #229]	; 0xe5
 8007280:	e74a      	b.n	8007118 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 8007282:	20ff      	movs	r0, #255	; 0xff
 8007284:	f883 00e5 	strb.w	r0, [r3, #229]	; 0xe5
 8007288:	e746      	b.n	8007118 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 800728a:	2001      	movs	r0, #1
 800728c:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
 8007290:	e742      	b.n	8007118 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 8007292:	20ff      	movs	r0, #255	; 0xff
 8007294:	f883 00e2 	strb.w	r0, [r3, #226]	; 0xe2
 8007298:	e73e      	b.n	8007118 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 800729a:	2101      	movs	r1, #1
 800729c:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
 80072a0:	e751      	b.n	8007146 <iNemo_setOrientation_6X.constprop.0+0x1d6>
 80072a2:	2101      	movs	r1, #1
 80072a4:	f883 10d7 	strb.w	r1, [r3, #215]	; 0xd7
 80072a8:	e74d      	b.n	8007146 <iNemo_setOrientation_6X.constprop.0+0x1d6>
 80072aa:	21ff      	movs	r1, #255	; 0xff
 80072ac:	f883 10d7 	strb.w	r1, [r3, #215]	; 0xd7
 80072b0:	e749      	b.n	8007146 <iNemo_setOrientation_6X.constprop.0+0x1d6>
 80072b2:	2101      	movs	r1, #1
 80072b4:	f883 10da 	strb.w	r1, [r3, #218]	; 0xda
 80072b8:	e745      	b.n	8007146 <iNemo_setOrientation_6X.constprop.0+0x1d6>
 80072ba:	21ff      	movs	r1, #255	; 0xff
 80072bc:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
 80072c0:	e741      	b.n	8007146 <iNemo_setOrientation_6X.constprop.0+0x1d6>
 80072c2:	2101      	movs	r1, #1
 80072c4:	f883 10d5 	strb.w	r1, [r3, #213]	; 0xd5
 80072c8:	e751      	b.n	800716e <iNemo_setOrientation_6X.constprop.0+0x1fe>
 80072ca:	2101      	movs	r1, #1
 80072cc:	f883 10d8 	strb.w	r1, [r3, #216]	; 0xd8
 80072d0:	e74d      	b.n	800716e <iNemo_setOrientation_6X.constprop.0+0x1fe>
 80072d2:	21ff      	movs	r1, #255	; 0xff
 80072d4:	f883 10d8 	strb.w	r1, [r3, #216]	; 0xd8
 80072d8:	e749      	b.n	800716e <iNemo_setOrientation_6X.constprop.0+0x1fe>
 80072da:	2101      	movs	r1, #1
 80072dc:	f883 10db 	strb.w	r1, [r3, #219]	; 0xdb
 80072e0:	e745      	b.n	800716e <iNemo_setOrientation_6X.constprop.0+0x1fe>
 80072e2:	21ff      	movs	r1, #255	; 0xff
 80072e4:	f883 10d5 	strb.w	r1, [r3, #213]	; 0xd5
 80072e8:	e741      	b.n	800716e <iNemo_setOrientation_6X.constprop.0+0x1fe>
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 80072f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 80072fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072fe:	22ff      	movs	r2, #255	; 0xff
 8007300:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 8007304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007308:	2201      	movs	r2, #1
 800730a:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800730e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007312:	bf00      	nop

08007314 <MotionDI_setKnobs.part.0>:
 8007314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007316:	e9d0 160b 	ldrd	r1, r6, [r0, #44]	; 0x2c
 800731a:	b091      	sub	sp, #68	; 0x44
 800731c:	4b3c      	ldr	r3, [pc, #240]	; (8007410 <MotionDI_setKnobs.part.0+0xfc>)
 800731e:	f8cd 6031 	str.w	r6, [sp, #49]	; 0x31
 8007322:	461a      	mov	r2, r3
 8007324:	4604      	mov	r4, r0
 8007326:	f8cd 102d 	str.w	r1, [sp, #45]	; 0x2d
 800732a:	f8bd 7031 	ldrh.w	r7, [sp, #49]	; 0x31
 800732e:	4d39      	ldr	r5, [pc, #228]	; (8007414 <MotionDI_setKnobs.part.0+0x100>)
 8007330:	f832 0f08 	ldrh.w	r0, [r2, #8]!
 8007334:	809f      	strh	r7, [r3, #4]
 8007336:	f8bd 702d 	ldrh.w	r7, [sp, #45]	; 0x2d
 800733a:	6a26      	ldr	r6, [r4, #32]
 800733c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800733e:	801f      	strh	r7, [r3, #0]
 8007340:	f89d 702f 	ldrb.w	r7, [sp, #47]	; 0x2f
 8007344:	709f      	strb	r7, [r3, #2]
 8007346:	f8d5 e0f0 	ldr.w	lr, [r5, #240]	; 0xf0
 800734a:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 800734e:	f8ad 0035 	strh.w	r0, [sp, #53]	; 0x35
 8007352:	f8c5 6128 	str.w	r6, [r5, #296]	; 0x128
 8007356:	7890      	ldrb	r0, [r2, #2]
 8007358:	f8c5 60ec 	str.w	r6, [r5, #236]	; 0xec
 800735c:	f8c5 1134 	str.w	r1, [r5, #308]	; 0x134
 8007360:	f894 6029 	ldrb.w	r6, [r4, #41]	; 0x29
 8007364:	f8c5 10f8 	str.w	r1, [r5, #248]	; 0xf8
 8007368:	2100      	movs	r1, #0
 800736a:	f89d c033 	ldrb.w	ip, [sp, #51]	; 0x33
 800736e:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
 8007372:	f8c5 e12c 	str.w	lr, [r5, #300]	; 0x12c
 8007376:	f885 113d 	strb.w	r1, [r5, #317]	; 0x13d
 800737a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
 800737e:	f885 7161 	strb.w	r7, [r5, #353]	; 0x161
 8007382:	f885 6162 	strb.w	r6, [r5, #354]	; 0x162
 8007386:	f885 7125 	strb.w	r7, [r5, #293]	; 0x125
 800738a:	f885 6126 	strb.w	r6, [r5, #294]	; 0x126
 800738e:	f885 1101 	strb.w	r1, [r5, #257]	; 0x101
 8007392:	f8bd 1035 	ldrh.w	r1, [sp, #53]	; 0x35
 8007396:	8119      	strh	r1, [r3, #8]
 8007398:	f883 c006 	strb.w	ip, [r3, #6]
 800739c:	7090      	strb	r0, [r2, #2]
 800739e:	f7ff fc15 	bl	8006bcc <iNemo_setOrientation.constprop.0>
 80073a2:	f7ff fde5 	bl	8006f70 <iNemo_setOrientation_6X.constprop.0>
 80073a6:	4a1c      	ldr	r2, [pc, #112]	; (8007418 <MotionDI_setKnobs.part.0+0x104>)
 80073a8:	f8d2 3464 	ldr.w	r3, [r2, #1124]	; 0x464
 80073ac:	1e59      	subs	r1, r3, #1
 80073ae:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 80073b2:	d211      	bcs.n	80073d8 <MotionDI_setKnobs.part.0+0xc4>
 80073b4:	3b0a      	subs	r3, #10
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	2b5a      	cmp	r3, #90	; 0x5a
 80073ba:	bf8c      	ite	hi
 80073bc:	2300      	movhi	r3, #0
 80073be:	2301      	movls	r3, #1
 80073c0:	6821      	ldr	r1, [r4, #0]
 80073c2:	7013      	strb	r3, [r2, #0]
 80073c4:	f502 638d 	add.w	r3, r2, #1128	; 0x468
 80073c8:	4814      	ldr	r0, [pc, #80]	; (800741c <MotionDI_setKnobs.part.0+0x108>)
 80073ca:	6019      	str	r1, [r3, #0]
 80073cc:	f502 618c 	add.w	r1, r2, #1120	; 0x460
 80073d0:	2301      	movs	r3, #1
 80073d2:	6008      	str	r0, [r1, #0]
 80073d4:	f882 346c 	strb.w	r3, [r2, #1132]	; 0x46c
 80073d8:	68e3      	ldr	r3, [r4, #12]
 80073da:	6920      	ldr	r0, [r4, #16]
 80073dc:	6961      	ldr	r1, [r4, #20]
 80073de:	69a2      	ldr	r2, [r4, #24]
 80073e0:	606b      	str	r3, [r5, #4]
 80073e2:	4e0f      	ldr	r6, [pc, #60]	; (8007420 <MotionDI_setKnobs.part.0+0x10c>)
 80073e4:	68a3      	ldr	r3, [r4, #8]
 80073e6:	6168      	str	r0, [r5, #20]
 80073e8:	60a9      	str	r1, [r5, #8]
 80073ea:	60ea      	str	r2, [r5, #12]
 80073ec:	602b      	str	r3, [r5, #0]
 80073ee:	f104 0730 	add.w	r7, r4, #48	; 0x30
 80073f2:	6820      	ldr	r0, [r4, #0]
 80073f4:	6861      	ldr	r1, [r4, #4]
 80073f6:	68a2      	ldr	r2, [r4, #8]
 80073f8:	68e3      	ldr	r3, [r4, #12]
 80073fa:	4635      	mov	r5, r6
 80073fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073fe:	3410      	adds	r4, #16
 8007400:	42bc      	cmp	r4, r7
 8007402:	462e      	mov	r6, r5
 8007404:	d1f5      	bne.n	80073f2 <MotionDI_setKnobs.part.0+0xde>
 8007406:	6820      	ldr	r0, [r4, #0]
 8007408:	6028      	str	r0, [r5, #0]
 800740a:	b011      	add	sp, #68	; 0x44
 800740c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800740e:	bf00      	nop
 8007410:	20000000 	.word	0x20000000
 8007414:	20001630 	.word	0x20001630
 8007418:	20001ff8 	.word	0x20001ff8
 800741c:	3a83126f 	.word	0x3a83126f
 8007420:	20001794 	.word	0x20001794
 8007424:	00000000 	.word	0x00000000

08007428 <MotionDI_Initialize>:
 8007428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742c:	4a12      	ldr	r2, [pc, #72]	; (8007478 <MotionDI_Initialize+0x50>)
 800742e:	4913      	ldr	r1, [pc, #76]	; (800747c <MotionDI_Initialize+0x54>)
 8007430:	6813      	ldr	r3, [r2, #0]
 8007432:	f023 0301 	bic.w	r3, r3, #1
 8007436:	ed2d 8b02 	vpush	{d8}
 800743a:	6013      	str	r3, [r2, #0]
 800743c:	680b      	ldr	r3, [r1, #0]
 800743e:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8007442:	4013      	ands	r3, r2
 8007444:	f24c 2440 	movw	r4, #49728	; 0xc240
 8007448:	42a3      	cmp	r3, r4
 800744a:	b091      	sub	sp, #68	; 0x44
 800744c:	4607      	mov	r7, r0
 800744e:	d01f      	beq.n	8007490 <MotionDI_Initialize+0x68>
 8007450:	680b      	ldr	r3, [r1, #0]
 8007452:	f24c 2170 	movw	r1, #49776	; 0xc270
 8007456:	4013      	ands	r3, r2
 8007458:	428b      	cmp	r3, r1
 800745a:	d019      	beq.n	8007490 <MotionDI_Initialize+0x68>
 800745c:	4b08      	ldr	r3, [pc, #32]	; (8007480 <MotionDI_Initialize+0x58>)
 800745e:	2201      	movs	r2, #1
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	2a00      	cmp	r2, #0
 8007466:	d1fc      	bne.n	8007462 <MotionDI_Initialize+0x3a>
 8007468:	4b06      	ldr	r3, [pc, #24]	; (8007484 <MotionDI_Initialize+0x5c>)
 800746a:	4a07      	ldr	r2, [pc, #28]	; (8007488 <MotionDI_Initialize+0x60>)
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	4b06      	ldr	r3, [pc, #24]	; (800748c <MotionDI_Initialize+0x64>)
 8007472:	429a      	cmp	r2, r3
 8007474:	d02b      	beq.n	80074ce <MotionDI_Initialize+0xa6>
 8007476:	e7fe      	b.n	8007476 <MotionDI_Initialize+0x4e>
 8007478:	e0002000 	.word	0xe0002000
 800747c:	e000ed00 	.word	0xe000ed00
 8007480:	40023008 	.word	0x40023008
 8007484:	40023000 	.word	0x40023000
 8007488:	f407a5c2 	.word	0xf407a5c2
 800748c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007490:	4be3      	ldr	r3, [pc, #908]	; (8007820 <MotionDI_Initialize+0x3f8>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d1e1      	bne.n	800745c <MotionDI_Initialize+0x34>
 8007498:	4ae2      	ldr	r2, [pc, #904]	; (8007824 <MotionDI_Initialize+0x3fc>)
 800749a:	6813      	ldr	r3, [r2, #0]
 800749c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074a0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80074a4:	d006      	beq.n	80074b4 <MotionDI_Initialize+0x8c>
 80074a6:	6813      	ldr	r3, [r2, #0]
 80074a8:	f240 4283 	movw	r2, #1155	; 0x483
 80074ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d1d3      	bne.n	800745c <MotionDI_Initialize+0x34>
 80074b4:	4bdc      	ldr	r3, [pc, #880]	; (8007828 <MotionDI_Initialize+0x400>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	601a      	str	r2, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	2a00      	cmp	r2, #0
 80074be:	d1fc      	bne.n	80074ba <MotionDI_Initialize+0x92>
 80074c0:	4bda      	ldr	r3, [pc, #872]	; (800782c <MotionDI_Initialize+0x404>)
 80074c2:	4adb      	ldr	r2, [pc, #876]	; (8007830 <MotionDI_Initialize+0x408>)
 80074c4:	601a      	str	r2, [r3, #0]
 80074c6:	681a      	ldr	r2, [r3, #0]
 80074c8:	4bda      	ldr	r3, [pc, #872]	; (8007834 <MotionDI_Initialize+0x40c>)
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d1d3      	bne.n	8007476 <MotionDI_Initialize+0x4e>
 80074ce:	4cda      	ldr	r4, [pc, #872]	; (8007838 <MotionDI_Initialize+0x410>)
 80074d0:	4dda      	ldr	r5, [pc, #872]	; (800783c <MotionDI_Initialize+0x414>)
 80074d2:	f8d7 c000 	ldr.w	ip, [r7]
 80074d6:	4bda      	ldr	r3, [pc, #872]	; (8007840 <MotionDI_Initialize+0x418>)
 80074d8:	49da      	ldr	r1, [pc, #872]	; (8007844 <MotionDI_Initialize+0x41c>)
 80074da:	f504 62c9 	add.w	r2, r4, #1608	; 0x648
 80074de:	2001      	movs	r0, #1
 80074e0:	f8c2 c000 	str.w	ip, [r2]
 80074e4:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
 80074e8:	f884 0644 	strb.w	r0, [r4, #1604]	; 0x644
 80074ec:	652a      	str	r2, [r5, #80]	; 0x50
 80074ee:	2014      	movs	r0, #20
 80074f0:	f505 628c 	add.w	r2, r5, #1120	; 0x460
 80074f4:	f505 6b8d 	add.w	fp, r5, #1128	; 0x468
 80074f8:	2600      	movs	r6, #0
 80074fa:	f64f 7cff 	movw	ip, #65535	; 0xffff
 80074fe:	f8c5 0464 	str.w	r0, [r5, #1124]	; 0x464
 8007502:	f44f 00dc 	mov.w	r0, #7208960	; 0x6e0000
 8007506:	6011      	str	r1, [r2, #0]
 8007508:	f8c5 01c8 	str.w	r0, [r5, #456]	; 0x1c8
 800750c:	2230      	movs	r2, #48	; 0x30
 800750e:	f8cb 3000 	str.w	r3, [fp]
 8007512:	f8a5 c058 	strh.w	ip, [r5, #88]	; 0x58
 8007516:	f105 0014 	add.w	r0, r5, #20
 800751a:	4631      	mov	r1, r6
 800751c:	702e      	strb	r6, [r5, #0]
 800751e:	f885 646c 	strb.w	r6, [r5, #1132]	; 0x46c
 8007522:	f885 604c 	strb.w	r6, [r5, #76]	; 0x4c
 8007526:	656e      	str	r6, [r5, #84]	; 0x54
 8007528:	64ae      	str	r6, [r5, #72]	; 0x48
 800752a:	f000 fb63 	bl	8007bf4 <memset>
 800752e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007532:	f44f 7281 	mov.w	r2, #258	; 0x102
 8007536:	82aa      	strh	r2, [r5, #20]
 8007538:	626b      	str	r3, [r5, #36]	; 0x24
 800753a:	636b      	str	r3, [r5, #52]	; 0x34
 800753c:	646b      	str	r3, [r5, #68]	; 0x44
 800753e:	ed97 0a00 	vldr	s0, [r7]
 8007542:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 8007848 <MotionDI_Initialize+0x420>
 8007546:	612e      	str	r6, [r5, #16]
 8007548:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800754c:	f884 664c 	strb.w	r6, [r4, #1612]	; 0x64c
 8007550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007554:	ee17 2a90 	vmov	r2, s15
 8007558:	1e53      	subs	r3, r2, #1
 800755a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800755e:	d20b      	bcs.n	8007578 <MotionDI_Initialize+0x150>
 8007560:	f1a2 030a 	sub.w	r3, r2, #10
 8007564:	b29b      	uxth	r3, r3
 8007566:	2b5a      	cmp	r3, #90	; 0x5a
 8007568:	bf8c      	ite	hi
 800756a:	2300      	movhi	r3, #0
 800756c:	2301      	movls	r3, #1
 800756e:	f8c5 2464 	str.w	r2, [r5, #1124]	; 0x464
 8007572:	702b      	strb	r3, [r5, #0]
 8007574:	ed97 0a00 	vldr	s0, [r7]
 8007578:	4eb4      	ldr	r6, [pc, #720]	; (800784c <MotionDI_Initialize+0x424>)
 800757a:	eddf 6ab5 	vldr	s13, [pc, #724]	; 8007850 <MotionDI_Initialize+0x428>
 800757e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8007854 <MotionDI_Initialize+0x42c>
 8007582:	4fb5      	ldr	r7, [pc, #724]	; (8007858 <MotionDI_Initialize+0x430>)
 8007584:	f7ff fad6 	bl	8006b34 <iNemoEngine_gbias_init>
 8007588:	f20f 296c 	addw	r9, pc, #620	; 0x26c
 800758c:	e9d9 8900 	ldrd	r8, r9, [r9]
 8007590:	ed9f 0b9b 	vldr	d0, [pc, #620]	; 8007800 <MotionDI_Initialize+0x3d8>
 8007594:	ed9f 1b9c 	vldr	d1, [pc, #624]	; 8007808 <MotionDI_Initialize+0x3e0>
 8007598:	ed9f 2b9d 	vldr	d2, [pc, #628]	; 8007810 <MotionDI_Initialize+0x3e8>
 800759c:	ed9f 5b9e 	vldr	d5, [pc, #632]	; 8007818 <MotionDI_Initialize+0x3f0>
 80075a0:	eddf 7aae 	vldr	s15, [pc, #696]	; 800785c <MotionDI_Initialize+0x434>
 80075a4:	eddf 4aae 	vldr	s9, [pc, #696]	; 8007860 <MotionDI_Initialize+0x438>
 80075a8:	ed9f 6aae 	vldr	s12, [pc, #696]	; 8007864 <MotionDI_Initialize+0x43c>
 80075ac:	ed9f 3aae 	vldr	s6, [pc, #696]	; 8007868 <MotionDI_Initialize+0x440>
 80075b0:	eddf 3aae 	vldr	s7, [pc, #696]	; 800786c <MotionDI_Initialize+0x444>
 80075b4:	ed9f 4aae 	vldr	s8, [pc, #696]	; 8007870 <MotionDI_Initialize+0x448>
 80075b8:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 8007880 <MotionDI_Initialize+0x458>
 80075bc:	edc6 7a87 	vstr	s15, [r6, #540]	; 0x21c
 80075c0:	f241 1ab6 	movw	sl, #4534	; 0x11b6
 80075c4:	f241 13b4 	movw	r3, #4532	; 0x11b4
 80075c8:	2500      	movs	r5, #0
 80075ca:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80075ce:	f606 00e8 	addw	r0, r6, #2280	; 0x8e8
 80075d2:	210a      	movs	r1, #10
 80075d4:	f886 18e0 	strb.w	r1, [r6, #2272]	; 0x8e0
 80075d8:	ed86 0b08 	vstr	d0, [r6, #32]
 80075dc:	ed86 1b0c 	vstr	d1, [r6, #48]	; 0x30
 80075e0:	ed86 2b0e 	vstr	d2, [r6, #56]	; 0x38
 80075e4:	ed86 5b06 	vstr	d5, [r6, #24]
 80075e8:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
 80075ec:	613d      	str	r5, [r7, #16]
 80075ee:	753d      	strb	r5, [r7, #20]
 80075f0:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
 80075f4:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
 80075f8:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
 80075fc:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
 8007600:	52f5      	strh	r5, [r6, r3]
 8007602:	607d      	str	r5, [r7, #4]
 8007604:	723d      	strb	r5, [r7, #8]
 8007606:	61fd      	str	r5, [r7, #28]
 8007608:	f887 5020 	strb.w	r5, [r7, #32]
 800760c:	62bd      	str	r5, [r7, #40]	; 0x28
 800760e:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
 8007612:	637d      	str	r5, [r7, #52]	; 0x34
 8007614:	f887 5038 	strb.w	r5, [r7, #56]	; 0x38
 8007618:	edc6 7a88 	vstr	s15, [r6, #544]	; 0x220
 800761c:	edc4 4a27 	vstr	s9, [r4, #156]	; 0x9c
 8007620:	ed84 6a28 	vstr	s12, [r4, #160]	; 0xa0
 8007624:	f806 500a 	strb.w	r5, [r6, sl]
 8007628:	ed9f 6a92 	vldr	s12, [pc, #584]	; 8007874 <MotionDI_Initialize+0x44c>
 800762c:	f8c4 5650 	str.w	r5, [r4, #1616]	; 0x650
 8007630:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
 8007634:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
 8007638:	f8a6 58dc 	strh.w	r5, [r6, #2268]	; 0x8dc
 800763c:	f886 58de 	strb.w	r5, [r6, #2270]	; 0x8de
 8007640:	ed86 8a86 	vstr	s16, [r6, #536]	; 0x218
 8007644:	643d      	str	r5, [r7, #64]	; 0x40
 8007646:	ed80 5b02 	vstr	d5, [r0, #8]
 800764a:	ed9f 5a8b 	vldr	s10, [pc, #556]	; 8007878 <MotionDI_Initialize+0x450>
 800764e:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800787c <MotionDI_Initialize+0x454>
 8007652:	ed80 8a82 	vstr	s16, [r0, #520]	; 0x208
 8007656:	f507 7168 	add.w	r1, r7, #928	; 0x3a0
 800765a:	e9c0 8906 	strd	r8, r9, [r0, #24]
 800765e:	eef2 4a04 	vmov.f32	s9, #36	; 0x41200000  10.0
 8007662:	f04f 0801 	mov.w	r8, #1
 8007666:	f04f 0902 	mov.w	r9, #2
 800766a:	f44f 7c00 	mov.w	ip, #512	; 0x200
 800766e:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8007672:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 8007676:	ed80 0b04 	vstr	d0, [r0, #16]
 800767a:	ed80 1b08 	vstr	d1, [r0, #32]
 800767e:	ed80 2b0a 	vstr	d2, [r0, #40]	; 0x28
 8007682:	f88e 80c0 	strb.w	r8, [lr, #192]	; 0xc0
 8007686:	edc0 7a83 	vstr	s15, [r0, #524]	; 0x20c
 800768a:	edc0 7a84 	vstr	s15, [r0, #528]	; 0x210
 800768e:	f887 5044 	strb.w	r5, [r7, #68]	; 0x44
 8007692:	edc4 7aaf 	vstr	s15, [r4, #700]	; 0x2bc
 8007696:	edc4 7ab0 	vstr	s15, [r4, #704]	; 0x2c0
 800769a:	edc4 7ab1 	vstr	s15, [r4, #708]	; 0x2c4
 800769e:	edc4 7ab3 	vstr	s15, [r4, #716]	; 0x2cc
 80076a2:	edc4 7ab4 	vstr	s15, [r4, #720]	; 0x2d0
 80076a6:	edc4 7ab5 	vstr	s15, [r4, #724]	; 0x2d4
 80076aa:	edc4 7ab7 	vstr	s15, [r4, #732]	; 0x2dc
 80076ae:	edc4 7ab8 	vstr	s15, [r4, #736]	; 0x2e0
 80076b2:	edc4 7ab9 	vstr	s15, [r4, #740]	; 0x2e4
 80076b6:	edc4 7abb 	vstr	s15, [r4, #748]	; 0x2ec
 80076ba:	edc4 7abc 	vstr	s15, [r4, #752]	; 0x2f0
 80076be:	edc4 7abd 	vstr	s15, [r4, #756]	; 0x2f4
 80076c2:	edc4 7abf 	vstr	s15, [r4, #764]	; 0x2fc
 80076c6:	edc4 7ac0 	vstr	s15, [r4, #768]	; 0x300
 80076ca:	edc4 7ac1 	vstr	s15, [r4, #772]	; 0x304
 80076ce:	edc4 7ac3 	vstr	s15, [r4, #780]	; 0x30c
 80076d2:	edc4 7ac4 	vstr	s15, [r4, #784]	; 0x310
 80076d6:	ed84 8ab2 	vstr	s16, [r4, #712]	; 0x2c8
 80076da:	ed84 8ab6 	vstr	s16, [r4, #728]	; 0x2d8
 80076de:	ed84 8aba 	vstr	s16, [r4, #744]	; 0x2e8
 80076e2:	ed84 8abe 	vstr	s16, [r4, #760]	; 0x2f8
 80076e6:	ed84 8ac2 	vstr	s16, [r4, #776]	; 0x308
 80076ea:	edc4 7ac5 	vstr	s15, [r4, #788]	; 0x314
 80076ee:	ed84 3a3b 	vstr	s6, [r4, #236]	; 0xec
 80076f2:	edc4 3a3c 	vstr	s7, [r4, #240]	; 0xf0
 80076f6:	ed84 4a3d 	vstr	s8, [r4, #244]	; 0xf4
 80076fa:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 80076fe:	edc4 4a3f 	vstr	s9, [r4, #252]	; 0xfc
 8007702:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 8007706:	edc4 7ac7 	vstr	s15, [r4, #796]	; 0x31c
 800770a:	edc4 7ac8 	vstr	s15, [r4, #800]	; 0x320
 800770e:	edc4 7ac9 	vstr	s15, [r4, #804]	; 0x324
 8007712:	edc4 7acb 	vstr	s15, [r4, #812]	; 0x32c
 8007716:	edc4 7acc 	vstr	s15, [r4, #816]	; 0x330
 800771a:	edc4 7acd 	vstr	s15, [r4, #820]	; 0x334
 800771e:	edc4 7aa1 	vstr	s15, [r4, #644]	; 0x284
 8007722:	edc4 7aa2 	vstr	s15, [r4, #648]	; 0x288
 8007726:	edc4 7aa3 	vstr	s15, [r4, #652]	; 0x28c
 800772a:	edc4 7aa5 	vstr	s15, [r4, #660]	; 0x294
 800772e:	edc4 7aa6 	vstr	s15, [r4, #664]	; 0x298
 8007732:	edc4 7aa7 	vstr	s15, [r4, #668]	; 0x29c
 8007736:	edc4 7aa9 	vstr	s15, [r4, #676]	; 0x2a4
 800773a:	edc4 7aaa 	vstr	s15, [r4, #680]	; 0x2a8
 800773e:	edc4 7aab 	vstr	s15, [r4, #684]	; 0x2ac
 8007742:	edc4 7aac 	vstr	s15, [r4, #688]	; 0x2b0
 8007746:	edc4 7aad 	vstr	s15, [r4, #692]	; 0x2b4
 800774a:	edc4 7aae 	vstr	s15, [r4, #696]	; 0x2b8
 800774e:	ed84 8ac6 	vstr	s16, [r4, #792]	; 0x318
 8007752:	ed84 8aca 	vstr	s16, [r4, #808]	; 0x328
 8007756:	ed84 8ace 	vstr	s16, [r4, #824]	; 0x338
 800775a:	ed84 8aa0 	vstr	s16, [r4, #640]	; 0x280
 800775e:	ed84 8aa4 	vstr	s16, [r4, #656]	; 0x290
 8007762:	ed84 8aa8 	vstr	s16, [r4, #672]	; 0x2a0
 8007766:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
 800776a:	ed84 8a43 	vstr	s16, [r4, #268]	; 0x10c
 800776e:	f884 8110 	strb.w	r8, [r4, #272]	; 0x110
 8007772:	edc4 6a48 	vstr	s13, [r4, #288]	; 0x120
 8007776:	ed84 5a45 	vstr	s10, [r4, #276]	; 0x114
 800777a:	edc4 5a46 	vstr	s11, [r4, #280]	; 0x118
 800777e:	ed84 6a47 	vstr	s12, [r4, #284]	; 0x11c
 8007782:	f8a4 c124 	strh.w	ip, [r4, #292]	; 0x124
 8007786:	ed81 8a21 	vstr	s16, [r1, #132]	; 0x84
 800778a:	ed81 8a25 	vstr	s16, [r1, #148]	; 0x94
 800778e:	ed81 8a29 	vstr	s16, [r1, #164]	; 0xa4
 8007792:	ed81 8a2d 	vstr	s16, [r1, #180]	; 0xb4
 8007796:	ed81 8a31 	vstr	s16, [r1, #196]	; 0xc4
 800779a:	edc6 7a2c 	vstr	s15, [r6, #176]	; 0xb0
 800779e:	edc6 7a2d 	vstr	s15, [r6, #180]	; 0xb4
 80077a2:	edc6 7a2e 	vstr	s15, [r6, #184]	; 0xb8
 80077a6:	f884 9108 	strb.w	r9, [r4, #264]	; 0x108
 80077aa:	edc1 7a1e 	vstr	s15, [r1, #120]	; 0x78
 80077ae:	edc1 7a1f 	vstr	s15, [r1, #124]	; 0x7c
 80077b2:	edc1 7a20 	vstr	s15, [r1, #128]	; 0x80
 80077b6:	edc1 7a22 	vstr	s15, [r1, #136]	; 0x88
 80077ba:	edc1 7a23 	vstr	s15, [r1, #140]	; 0x8c
 80077be:	edc1 7a24 	vstr	s15, [r1, #144]	; 0x90
 80077c2:	edc1 7a26 	vstr	s15, [r1, #152]	; 0x98
 80077c6:	edc1 7a27 	vstr	s15, [r1, #156]	; 0x9c
 80077ca:	edc1 7a28 	vstr	s15, [r1, #160]	; 0xa0
 80077ce:	edc1 7a2a 	vstr	s15, [r1, #168]	; 0xa8
 80077d2:	edc1 7a2b 	vstr	s15, [r1, #172]	; 0xac
 80077d6:	edc1 7a2c 	vstr	s15, [r1, #176]	; 0xb0
 80077da:	edc1 7a2e 	vstr	s15, [r1, #184]	; 0xb8
 80077de:	edc1 7a2f 	vstr	s15, [r1, #188]	; 0xbc
 80077e2:	edc1 7a30 	vstr	s15, [r1, #192]	; 0xc0
 80077e6:	edc1 7a32 	vstr	s15, [r1, #200]	; 0xc8
 80077ea:	edc1 7a33 	vstr	s15, [r1, #204]	; 0xcc
 80077ee:	f884 5126 	strb.w	r5, [r4, #294]	; 0x126
 80077f2:	edc1 7a34 	vstr	s15, [r1, #208]	; 0xd0
 80077f6:	e04d      	b.n	8007894 <MotionDI_Initialize+0x46c>
 80077f8:	00000000 	.word	0x00000000
 80077fc:	3fbfdfb7 	.word	0x3fbfdfb7
 8007800:	20000000 	.word	0x20000000
 8007804:	3fc55a40 	.word	0x3fc55a40
 8007808:	c0000000 	.word	0xc0000000
 800780c:	3fb2875e 	.word	0x3fb2875e
 8007810:	60000000 	.word	0x60000000
 8007814:	3f9f1fed 	.word	0x3f9f1fed
 8007818:	60000000 	.word	0x60000000
 800781c:	3fc76cab 	.word	0x3fc76cab
 8007820:	e0042000 	.word	0xe0042000
 8007824:	5c001000 	.word	0x5c001000
 8007828:	58024c08 	.word	0x58024c08
 800782c:	58024c00 	.word	0x58024c00
 8007830:	f407a5c2 	.word	0xf407a5c2
 8007834:	b5e8b5cd 	.word	0xb5e8b5cd
 8007838:	20001630 	.word	0x20001630
 800783c:	20001ff8 	.word	0x20001ff8
 8007840:	3e4ccccd 	.word	0x3e4ccccd
 8007844:	3a83126f 	.word	0x3a83126f
 8007848:	447a0000 	.word	0x447a0000
 800784c:	20000000 	.word	0x20000000
 8007850:	3dcccccd 	.word	0x3dcccccd
 8007854:	3f2ac083 	.word	0x3f2ac083
 8007858:	200016d4 	.word	0x200016d4
 800785c:	00000000 	.word	0x00000000
 8007860:	7f800000 	.word	0x7f800000
 8007864:	ff800000 	.word	0xff800000
 8007868:	3f639581 	.word	0x3f639581
 800786c:	402ab021 	.word	0x402ab021
 8007870:	3f13f7cf 	.word	0x3f13f7cf
 8007874:	39b24207 	.word	0x39b24207
 8007878:	39712c28 	.word	0x39712c28
 800787c:	3a09a027 	.word	0x3a09a027
 8007880:	200010f8 	.word	0x200010f8
 8007884:	3a51b717 	.word	0x3a51b717
 8007888:	3a378034 	.word	0x3a378034
 800788c:	3b378034 	.word	0x3b378034
 8007890:	3f666666 	.word	0x3f666666
 8007894:	ed84 3a4a 	vstr	s6, [r4, #296]	; 0x128
 8007898:	edc4 3a4b 	vstr	s7, [r4, #300]	; 0x12c
 800789c:	ed84 4a4c 	vstr	s8, [r4, #304]	; 0x130
 80078a0:	edc4 4a4e 	vstr	s9, [r4, #312]	; 0x138
 80078a4:	ed84 7a4d 	vstr	s14, [r4, #308]	; 0x134
 80078a8:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
 80078ac:	ed81 8a35 	vstr	s16, [r1, #212]	; 0xd4
 80078b0:	ed81 8a39 	vstr	s16, [r1, #228]	; 0xe4
 80078b4:	ed81 8a3d 	vstr	s16, [r1, #244]	; 0xf4
 80078b8:	ed81 8a0f 	vstr	s16, [r1, #60]	; 0x3c
 80078bc:	ed81 8a13 	vstr	s16, [r1, #76]	; 0x4c
 80078c0:	ed81 8a17 	vstr	s16, [r1, #92]	; 0x5c
 80078c4:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
 80078c8:	edc1 7a37 	vstr	s15, [r1, #220]	; 0xdc
 80078cc:	edc1 7a38 	vstr	s15, [r1, #224]	; 0xe0
 80078d0:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
 80078d4:	edc1 7a3b 	vstr	s15, [r1, #236]	; 0xec
 80078d8:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
 80078dc:	edc1 7a10 	vstr	s15, [r1, #64]	; 0x40
 80078e0:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
 80078e4:	edc1 7a12 	vstr	s15, [r1, #72]	; 0x48
 80078e8:	edc1 7a14 	vstr	s15, [r1, #80]	; 0x50
 80078ec:	edc1 7a15 	vstr	s15, [r1, #84]	; 0x54
 80078f0:	edc1 7a16 	vstr	s15, [r1, #88]	; 0x58
 80078f4:	edc1 7a18 	vstr	s15, [r1, #96]	; 0x60
 80078f8:	edc1 7a19 	vstr	s15, [r1, #100]	; 0x64
 80078fc:	edc1 7a1a 	vstr	s15, [r1, #104]	; 0x68
 8007900:	edc1 7a1b 	vstr	s15, [r1, #108]	; 0x6c
 8007904:	edc1 7a1c 	vstr	s15, [r1, #112]	; 0x70
 8007908:	edc1 7a1d 	vstr	s15, [r1, #116]	; 0x74
 800790c:	f8c4 8140 	str.w	r8, [r4, #320]	; 0x140
 8007910:	ed84 8a52 	vstr	s16, [r4, #328]	; 0x148
 8007914:	f884 814c 	strb.w	r8, [r4, #332]	; 0x14c
 8007918:	f8a4 c160 	strh.w	ip, [r4, #352]	; 0x160
 800791c:	edc4 6a57 	vstr	s13, [r4, #348]	; 0x15c
 8007920:	ed84 5a54 	vstr	s10, [r4, #336]	; 0x150
 8007924:	edc4 5a55 	vstr	s11, [r4, #340]	; 0x154
 8007928:	ed84 6a56 	vstr	s12, [r4, #344]	; 0x158
 800792c:	edc0 7a28 	vstr	s15, [r0, #160]	; 0xa0
 8007930:	edc0 7a29 	vstr	s15, [r0, #164]	; 0xa4
 8007934:	edc0 7a2a 	vstr	s15, [r0, #168]	; 0xa8
 8007938:	f884 9144 	strb.w	r9, [r4, #324]	; 0x144
 800793c:	f884 5162 	strb.w	r5, [r4, #354]	; 0x162
 8007940:	f7ff f944 	bl	8006bcc <iNemo_setOrientation.constprop.0>
 8007944:	f7ff fb14 	bl	8006f70 <iNemo_setOrientation_6X.constprop.0>
 8007948:	4631      	mov	r1, r6
 800794a:	ed5f 4a32 	vldr	s9, [pc, #-200]	; 8007884 <MotionDI_Initialize+0x45c>
 800794e:	f831 3f04 	ldrh.w	r3, [r1, #4]!
 8007952:	ed1f 5a33 	vldr	s10, [pc, #-204]	; 8007888 <MotionDI_Initialize+0x460>
 8007956:	ed5f 5a33 	vldr	s11, [pc, #-204]	; 800788c <MotionDI_Initialize+0x464>
 800795a:	ed5f 7a33 	vldr	s15, [pc, #-204]	; 8007890 <MotionDI_Initialize+0x468>
 800795e:	f891 e002 	ldrb.w	lr, [r1, #2]
 8007962:	f8b6 c000 	ldrh.w	ip, [r6]
 8007966:	78b0      	ldrb	r0, [r6, #2]
 8007968:	494f      	ldr	r1, [pc, #316]	; (8007aa8 <MotionDI_Initialize+0x680>)
 800796a:	f8ad 3031 	strh.w	r3, [sp, #49]	; 0x31
 800796e:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 8007972:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8007976:	edc4 6a57 	vstr	s13, [r4, #348]	; 0x15c
 800797a:	edc4 6a48 	vstr	s13, [r4, #288]	; 0x120
 800797e:	edc4 4a54 	vstr	s9, [r4, #336]	; 0x150
 8007982:	edc4 4a45 	vstr	s9, [r4, #276]	; 0x114
 8007986:	ed84 5a55 	vstr	s10, [r4, #340]	; 0x154
 800798a:	ed84 5a46 	vstr	s10, [r4, #280]	; 0x118
 800798e:	edc4 5a56 	vstr	s11, [r4, #344]	; 0x158
 8007992:	edc4 5a47 	vstr	s11, [r4, #284]	; 0x11c
 8007996:	ed84 6a4b 	vstr	s12, [r4, #300]	; 0x12c
 800799a:	ed84 6a3c 	vstr	s12, [r4, #240]	; 0xf0
 800799e:	ed84 7a4d 	vstr	s14, [r4, #308]	; 0x134
 80079a2:	f884 9161 	strb.w	r9, [r4, #353]	; 0x161
 80079a6:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 80079aa:	f884 9125 	strb.w	r9, [r4, #293]	; 0x125
 80079ae:	f8c4 2101 	str.w	r2, [r4, #257]	; 0x101
 80079b2:	ed84 7a62 	vstr	s14, [r4, #392]	; 0x188
 80079b6:	f88d e033 	strb.w	lr, [sp, #51]	; 0x33
 80079ba:	f8ad c02d 	strh.w	ip, [sp, #45]	; 0x2d
 80079be:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 80079c2:	edc4 7a4a 	vstr	s15, [r4, #296]	; 0x128
 80079c6:	edc4 7a3b 	vstr	s15, [r4, #236]	; 0xec
 80079ca:	edc4 7a61 	vstr	s15, [r4, #388]	; 0x184
 80079ce:	f8c4 113d 	str.w	r1, [r4, #317]	; 0x13d
 80079d2:	f884 5162 	strb.w	r5, [r4, #354]	; 0x162
 80079d6:	f884 5126 	strb.w	r5, [r4, #294]	; 0x126
 80079da:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 80079de:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
 80079e2:	f8a4 918c 	strh.w	r9, [r4, #396]	; 0x18c
 80079e6:	f8dd 1031 	ldr.w	r1, [sp, #49]	; 0x31
 80079ea:	f8dd 202d 	ldr.w	r2, [sp, #45]	; 0x2d
 80079ee:	ed94 7a02 	vldr	s14, [r4, #8]
 80079f2:	edd4 7a03 	vldr	s15, [r4, #12]
 80079f6:	f8db 0000 	ldr.w	r0, [fp]
 80079fa:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 8007aac <MotionDI_Initialize+0x684>
 80079fe:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 8007ab0 <MotionDI_Initialize+0x688>
 8007a02:	f8d4 9014 	ldr.w	r9, [r4, #20]
 8007a06:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
 8007a0a:	f507 6bb6 	add.w	fp, r7, #1456	; 0x5b0
 8007a0e:	e9c4 2164 	strd	r2, r1, [r4, #400]	; 0x190
 8007a12:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 8007a16:	ed84 7a5e 	vstr	s14, [r4, #376]	; 0x178
 8007a1a:	edc4 7a5f 	vstr	s15, [r4, #380]	; 0x17c
 8007a1e:	f8c4 e16c 	str.w	lr, [r4, #364]	; 0x16c
 8007a22:	f8c4 c170 	str.w	ip, [r4, #368]	; 0x170
 8007a26:	f8c4 9174 	str.w	r9, [r4, #372]	; 0x174
 8007a2a:	f7ff fc73 	bl	8007314 <MotionDI_setKnobs.part.0>
 8007a2e:	f207 59e4 	addw	r9, r7, #1508	; 0x5e4
 8007a32:	4629      	mov	r1, r5
 8007a34:	4658      	mov	r0, fp
 8007a36:	2234      	movs	r2, #52	; 0x34
 8007a38:	f000 f8dc 	bl	8007bf4 <memset>
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	4648      	mov	r0, r9
 8007a40:	2234      	movs	r2, #52	; 0x34
 8007a42:	ed8b 8a03 	vstr	s16, [fp, #12]
 8007a46:	ed8b 8a07 	vstr	s16, [fp, #28]
 8007a4a:	ed8b 8a0b 	vstr	s16, [fp, #44]	; 0x2c
 8007a4e:	f884 5684 	strb.w	r5, [r4, #1668]	; 0x684
 8007a52:	f000 f8cf 	bl	8007bf4 <memset>
 8007a56:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8007aa0 <MotionDI_Initialize+0x678>
 8007a5a:	f241 13b4 	movw	r3, #4532	; 0x11b4
 8007a5e:	f207 621c 	addw	r2, r7, #1564	; 0x61c
 8007a62:	2000      	movs	r0, #0
 8007a64:	f207 672c 	addw	r7, r7, #1580	; 0x62c
 8007a68:	2100      	movs	r1, #0
 8007a6a:	e9c2 0100 	strd	r0, r1, [r2]
 8007a6e:	ed87 7b00 	vstr	d7, [r7]
 8007a72:	52f5      	strh	r5, [r6, r3]
 8007a74:	f806 500a 	strb.w	r5, [r6, sl]
 8007a78:	ed89 8a03 	vstr	s16, [r9, #12]
 8007a7c:	ed89 8a07 	vstr	s16, [r9, #28]
 8007a80:	ed89 8a0b 	vstr	s16, [r9, #44]	; 0x2c
 8007a84:	f8c4 86cc 	str.w	r8, [r4, #1740]	; 0x6cc
 8007a88:	f884 56b8 	strb.w	r5, [r4, #1720]	; 0x6b8
 8007a8c:	f884 56c8 	strb.w	r5, [r4, #1736]	; 0x6c8
 8007a90:	b011      	add	sp, #68	; 0x44
 8007a92:	ecbd 8b02 	vpop	{d8}
 8007a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a9a:	bf00      	nop
 8007a9c:	f3af 8000 	nop.w
 8007aa0:	00000000 	.word	0x00000000
 8007aa4:	fff80000 	.word	0xfff80000
 8007aa8:	01010001 	.word	0x01010001
 8007aac:	3a2c7da2 	.word	0x3a2c7da2
 8007ab0:	3e051eb8 	.word	0x3e051eb8

08007ab4 <MotionDI_setKnobs>:
 8007ab4:	4b03      	ldr	r3, [pc, #12]	; (8007ac4 <MotionDI_setKnobs+0x10>)
 8007ab6:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 8007aba:	b903      	cbnz	r3, 8007abe <MotionDI_setKnobs+0xa>
 8007abc:	4770      	bx	lr
 8007abe:	f7ff bc29 	b.w	8007314 <MotionDI_setKnobs.part.0>
 8007ac2:	bf00      	nop
 8007ac4:	20001630 	.word	0x20001630

08007ac8 <MotionDI_getKnobs>:
 8007ac8:	4a22      	ldr	r2, [pc, #136]	; (8007b54 <MotionDI_getKnobs+0x8c>)
 8007aca:	f892 3644 	ldrb.w	r3, [r2, #1604]	; 0x644
 8007ace:	b903      	cbnz	r3, 8007ad2 <MotionDI_getKnobs+0xa>
 8007ad0:	4770      	bx	lr
 8007ad2:	b470      	push	{r4, r5, r6}
 8007ad4:	4920      	ldr	r1, [pc, #128]	; (8007b58 <MotionDI_getKnobs+0x90>)
 8007ad6:	f892 5126 	ldrb.w	r5, [r2, #294]	; 0x126
 8007ada:	880b      	ldrh	r3, [r1, #0]
 8007adc:	f892 6125 	ldrb.w	r6, [r2, #293]	; 0x125
 8007ae0:	f880 5029 	strb.w	r5, [r0, #41]	; 0x29
 8007ae4:	b091      	sub	sp, #68	; 0x44
 8007ae6:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
 8007aea:	f8ad 302d 	strh.w	r3, [sp, #45]	; 0x2d
 8007aee:	460b      	mov	r3, r1
 8007af0:	7889      	ldrb	r1, [r1, #2]
 8007af2:	f833 4f04 	ldrh.w	r4, [r3, #4]!
 8007af6:	f8ad 4031 	strh.w	r4, [sp, #49]	; 0x31
 8007afa:	789b      	ldrb	r3, [r3, #2]
 8007afc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8007b00:	2300      	movs	r3, #0
 8007b02:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8007b06:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8007b0a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8007b0e:	f8dd 3031 	ldr.w	r3, [sp, #49]	; 0x31
 8007b12:	f8d2 10f8 	ldr.w	r1, [r2, #248]	; 0xf8
 8007b16:	f8d2 40ec 	ldr.w	r4, [r2, #236]	; 0xec
 8007b1a:	f8dd 502d 	ldr.w	r5, [sp, #45]	; 0x2d
 8007b1e:	6303      	str	r3, [r0, #48]	; 0x30
 8007b20:	4b0e      	ldr	r3, [pc, #56]	; (8007b5c <MotionDI_getKnobs+0x94>)
 8007b22:	62c5      	str	r5, [r0, #44]	; 0x2c
 8007b24:	6204      	str	r4, [r0, #32]
 8007b26:	6241      	str	r1, [r0, #36]	; 0x24
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6003      	str	r3, [r0, #0]
 8007b2c:	f892 4168 	ldrb.w	r4, [r2, #360]	; 0x168
 8007b30:	68d3      	ldr	r3, [r2, #12]
 8007b32:	6855      	ldr	r5, [r2, #4]
 8007b34:	6891      	ldr	r1, [r2, #8]
 8007b36:	7104      	strb	r4, [r0, #4]
 8007b38:	6816      	ldr	r6, [r2, #0]
 8007b3a:	6954      	ldr	r4, [r2, #20]
 8007b3c:	6086      	str	r6, [r0, #8]
 8007b3e:	60c5      	str	r5, [r0, #12]
 8007b40:	6104      	str	r4, [r0, #16]
 8007b42:	6141      	str	r1, [r0, #20]
 8007b44:	6183      	str	r3, [r0, #24]
 8007b46:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
 8007b4a:	7703      	strb	r3, [r0, #28]
 8007b4c:	b011      	add	sp, #68	; 0x44
 8007b4e:	bc70      	pop	{r4, r5, r6}
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	20001630 	.word	0x20001630
 8007b58:	20000000 	.word	0x20000000
 8007b5c:	20002460 	.word	0x20002460

08007b60 <MotionDI_GetLibVersion>:
 8007b60:	4b10      	ldr	r3, [pc, #64]	; (8007ba4 <MotionDI_GetLibVersion+0x44>)
 8007b62:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 8007b66:	b90b      	cbnz	r3, 8007b6c <MotionDI_GetLibVersion+0xc>
 8007b68:	4618      	mov	r0, r3
 8007b6a:	4770      	bx	lr
 8007b6c:	b470      	push	{r4, r5, r6}
 8007b6e:	4e0e      	ldr	r6, [pc, #56]	; (8007ba8 <MotionDI_GetLibVersion+0x48>)
 8007b70:	4604      	mov	r4, r0
 8007b72:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8007b74:	b08b      	sub	sp, #44	; 0x2c
 8007b76:	ad01      	add	r5, sp, #4
 8007b78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b7a:	6833      	ldr	r3, [r6, #0]
 8007b7c:	f825 3b02 	strh.w	r3, [r5], #2
 8007b80:	0c1b      	lsrs	r3, r3, #16
 8007b82:	702b      	strb	r3, [r5, #0]
 8007b84:	ad01      	add	r5, sp, #4
 8007b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b88:	882e      	ldrh	r6, [r5, #0]
 8007b8a:	60e3      	str	r3, [r4, #12]
 8007b8c:	78ad      	ldrb	r5, [r5, #2]
 8007b8e:	6020      	str	r0, [r4, #0]
 8007b90:	2312      	movs	r3, #18
 8007b92:	4618      	mov	r0, r3
 8007b94:	6061      	str	r1, [r4, #4]
 8007b96:	60a2      	str	r2, [r4, #8]
 8007b98:	8226      	strh	r6, [r4, #16]
 8007b9a:	74a5      	strb	r5, [r4, #18]
 8007b9c:	b00b      	add	sp, #44	; 0x2c
 8007b9e:	bc70      	pop	{r4, r5, r6}
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	20001630 	.word	0x20001630
 8007ba8:	08007db4 	.word	0x08007db4

08007bac <__libc_init_array>:
 8007bac:	b570      	push	{r4, r5, r6, lr}
 8007bae:	4d0d      	ldr	r5, [pc, #52]	; (8007be4 <__libc_init_array+0x38>)
 8007bb0:	4c0d      	ldr	r4, [pc, #52]	; (8007be8 <__libc_init_array+0x3c>)
 8007bb2:	1b64      	subs	r4, r4, r5
 8007bb4:	10a4      	asrs	r4, r4, #2
 8007bb6:	2600      	movs	r6, #0
 8007bb8:	42a6      	cmp	r6, r4
 8007bba:	d109      	bne.n	8007bd0 <__libc_init_array+0x24>
 8007bbc:	4d0b      	ldr	r5, [pc, #44]	; (8007bec <__libc_init_array+0x40>)
 8007bbe:	4c0c      	ldr	r4, [pc, #48]	; (8007bf0 <__libc_init_array+0x44>)
 8007bc0:	f000 f820 	bl	8007c04 <_init>
 8007bc4:	1b64      	subs	r4, r4, r5
 8007bc6:	10a4      	asrs	r4, r4, #2
 8007bc8:	2600      	movs	r6, #0
 8007bca:	42a6      	cmp	r6, r4
 8007bcc:	d105      	bne.n	8007bda <__libc_init_array+0x2e>
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
 8007bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bd4:	4798      	blx	r3
 8007bd6:	3601      	adds	r6, #1
 8007bd8:	e7ee      	b.n	8007bb8 <__libc_init_array+0xc>
 8007bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bde:	4798      	blx	r3
 8007be0:	3601      	adds	r6, #1
 8007be2:	e7f2      	b.n	8007bca <__libc_init_array+0x1e>
 8007be4:	08007e30 	.word	0x08007e30
 8007be8:	08007e30 	.word	0x08007e30
 8007bec:	08007e30 	.word	0x08007e30
 8007bf0:	08007e34 	.word	0x08007e34

08007bf4 <memset>:
 8007bf4:	4402      	add	r2, r0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d100      	bne.n	8007bfe <memset+0xa>
 8007bfc:	4770      	bx	lr
 8007bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8007c02:	e7f9      	b.n	8007bf8 <memset+0x4>

08007c04 <_init>:
 8007c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c06:	bf00      	nop
 8007c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c0a:	bc08      	pop	{r3}
 8007c0c:	469e      	mov	lr, r3
 8007c0e:	4770      	bx	lr

08007c10 <_fini>:
 8007c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c12:	bf00      	nop
 8007c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c16:	bc08      	pop	{r3}
 8007c18:	469e      	mov	lr, r3
 8007c1a:	4770      	bx	lr
