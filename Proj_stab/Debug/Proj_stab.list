
Proj_stab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014db4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  08014f40  08014f40  00024f40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080155c8  080155c8  00031678  2**0
                  CONTENTS
  4 .ARM          00000008  080155c8  080155c8  000255c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080155d0  080155d0  00031678  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080155d0  080155d0  000255d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080155d4  080155d4  000255d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001678  20000000  080155d8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f28  20001678  08016c50  00031678  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200025a0  08016c50  000325a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031678  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e4d4  00000000  00000000  000316a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000361c  00000000  00000000  0005fb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002390  00000000  00000000  00063198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002230  00000000  00000000  00065528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001c079  00000000  00000000  00067758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000e76d  00000000  00000000  000837d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000a3  00000000  00000000  00091f3e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000a3d4  00000000  00000000  00091fe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20001678 	.word	0x20001678
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08014f24 	.word	0x08014f24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000167c 	.word	0x2000167c
 80001c4:	08014f24 	.word	0x08014f24

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	; 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_ldivmod>:
 8000dec:	b97b      	cbnz	r3, 8000e0e <__aeabi_ldivmod+0x22>
 8000dee:	b972      	cbnz	r2, 8000e0e <__aeabi_ldivmod+0x22>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bfbe      	ittt	lt
 8000df4:	2000      	movlt	r0, #0
 8000df6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000dfa:	e006      	blt.n	8000e0a <__aeabi_ldivmod+0x1e>
 8000dfc:	bf08      	it	eq
 8000dfe:	2800      	cmpeq	r0, #0
 8000e00:	bf1c      	itt	ne
 8000e02:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000e06:	f04f 30ff 	movne.w	r0, #4294967295
 8000e0a:	f000 b9bf 	b.w	800118c <__aeabi_idiv0>
 8000e0e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e12:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e16:	2900      	cmp	r1, #0
 8000e18:	db09      	blt.n	8000e2e <__aeabi_ldivmod+0x42>
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	db1a      	blt.n	8000e54 <__aeabi_ldivmod+0x68>
 8000e1e:	f000 f84d 	bl	8000ebc <__udivmoddi4>
 8000e22:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e2a:	b004      	add	sp, #16
 8000e2c:	4770      	bx	lr
 8000e2e:	4240      	negs	r0, r0
 8000e30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db1b      	blt.n	8000e70 <__aeabi_ldivmod+0x84>
 8000e38:	f000 f840 	bl	8000ebc <__udivmoddi4>
 8000e3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e44:	b004      	add	sp, #16
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	4252      	negs	r2, r2
 8000e4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e52:	4770      	bx	lr
 8000e54:	4252      	negs	r2, r2
 8000e56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e5a:	f000 f82f 	bl	8000ebc <__udivmoddi4>
 8000e5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e66:	b004      	add	sp, #16
 8000e68:	4240      	negs	r0, r0
 8000e6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e6e:	4770      	bx	lr
 8000e70:	4252      	negs	r2, r2
 8000e72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e76:	f000 f821 	bl	8000ebc <__udivmoddi4>
 8000e7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e82:	b004      	add	sp, #16
 8000e84:	4252      	negs	r2, r2
 8000e86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_uldivmod>:
 8000e8c:	b953      	cbnz	r3, 8000ea4 <__aeabi_uldivmod+0x18>
 8000e8e:	b94a      	cbnz	r2, 8000ea4 <__aeabi_uldivmod+0x18>
 8000e90:	2900      	cmp	r1, #0
 8000e92:	bf08      	it	eq
 8000e94:	2800      	cmpeq	r0, #0
 8000e96:	bf1c      	itt	ne
 8000e98:	f04f 31ff 	movne.w	r1, #4294967295
 8000e9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ea0:	f000 b974 	b.w	800118c <__aeabi_idiv0>
 8000ea4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ea8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000eac:	f000 f806 	bl	8000ebc <__udivmoddi4>
 8000eb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eb8:	b004      	add	sp, #16
 8000eba:	4770      	bx	lr

08000ebc <__udivmoddi4>:
 8000ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ec0:	9d08      	ldr	r5, [sp, #32]
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	468e      	mov	lr, r1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d14d      	bne.n	8000f66 <__udivmoddi4+0xaa>
 8000eca:	428a      	cmp	r2, r1
 8000ecc:	4694      	mov	ip, r2
 8000ece:	d969      	bls.n	8000fa4 <__udivmoddi4+0xe8>
 8000ed0:	fab2 f282 	clz	r2, r2
 8000ed4:	b152      	cbz	r2, 8000eec <__udivmoddi4+0x30>
 8000ed6:	fa01 f302 	lsl.w	r3, r1, r2
 8000eda:	f1c2 0120 	rsb	r1, r2, #32
 8000ede:	fa20 f101 	lsr.w	r1, r0, r1
 8000ee2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee6:	ea41 0e03 	orr.w	lr, r1, r3
 8000eea:	4094      	lsls	r4, r2
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	0c21      	lsrs	r1, r4, #16
 8000ef2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ef6:	fa1f f78c 	uxth.w	r7, ip
 8000efa:	fb08 e316 	mls	r3, r8, r6, lr
 8000efe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f02:	fb06 f107 	mul.w	r1, r6, r7
 8000f06:	4299      	cmp	r1, r3
 8000f08:	d90a      	bls.n	8000f20 <__udivmoddi4+0x64>
 8000f0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f12:	f080 811f 	bcs.w	8001154 <__udivmoddi4+0x298>
 8000f16:	4299      	cmp	r1, r3
 8000f18:	f240 811c 	bls.w	8001154 <__udivmoddi4+0x298>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f28:	fb08 3310 	mls	r3, r8, r0, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb00 f707 	mul.w	r7, r0, r7
 8000f34:	42a7      	cmp	r7, r4
 8000f36:	d90a      	bls.n	8000f4e <__udivmoddi4+0x92>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f40:	f080 810a 	bcs.w	8001158 <__udivmoddi4+0x29c>
 8000f44:	42a7      	cmp	r7, r4
 8000f46:	f240 8107 	bls.w	8001158 <__udivmoddi4+0x29c>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f52:	1be4      	subs	r4, r4, r7
 8000f54:	2600      	movs	r6, #0
 8000f56:	b11d      	cbz	r5, 8000f60 <__udivmoddi4+0xa4>
 8000f58:	40d4      	lsrs	r4, r2
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000f60:	4631      	mov	r1, r6
 8000f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d909      	bls.n	8000f7e <__udivmoddi4+0xc2>
 8000f6a:	2d00      	cmp	r5, #0
 8000f6c:	f000 80ef 	beq.w	800114e <__udivmoddi4+0x292>
 8000f70:	2600      	movs	r6, #0
 8000f72:	e9c5 0100 	strd	r0, r1, [r5]
 8000f76:	4630      	mov	r0, r6
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	fab3 f683 	clz	r6, r3
 8000f82:	2e00      	cmp	r6, #0
 8000f84:	d14a      	bne.n	800101c <__udivmoddi4+0x160>
 8000f86:	428b      	cmp	r3, r1
 8000f88:	d302      	bcc.n	8000f90 <__udivmoddi4+0xd4>
 8000f8a:	4282      	cmp	r2, r0
 8000f8c:	f200 80f9 	bhi.w	8001182 <__udivmoddi4+0x2c6>
 8000f90:	1a84      	subs	r4, r0, r2
 8000f92:	eb61 0303 	sbc.w	r3, r1, r3
 8000f96:	2001      	movs	r0, #1
 8000f98:	469e      	mov	lr, r3
 8000f9a:	2d00      	cmp	r5, #0
 8000f9c:	d0e0      	beq.n	8000f60 <__udivmoddi4+0xa4>
 8000f9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000fa2:	e7dd      	b.n	8000f60 <__udivmoddi4+0xa4>
 8000fa4:	b902      	cbnz	r2, 8000fa8 <__udivmoddi4+0xec>
 8000fa6:	deff      	udf	#255	; 0xff
 8000fa8:	fab2 f282 	clz	r2, r2
 8000fac:	2a00      	cmp	r2, #0
 8000fae:	f040 8092 	bne.w	80010d6 <__udivmoddi4+0x21a>
 8000fb2:	eba1 010c 	sub.w	r1, r1, ip
 8000fb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fba:	fa1f fe8c 	uxth.w	lr, ip
 8000fbe:	2601      	movs	r6, #1
 8000fc0:	0c20      	lsrs	r0, r4, #16
 8000fc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000fc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000fca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fce:	fb0e f003 	mul.w	r0, lr, r3
 8000fd2:	4288      	cmp	r0, r1
 8000fd4:	d908      	bls.n	8000fe8 <__udivmoddi4+0x12c>
 8000fd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000fda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000fde:	d202      	bcs.n	8000fe6 <__udivmoddi4+0x12a>
 8000fe0:	4288      	cmp	r0, r1
 8000fe2:	f200 80cb 	bhi.w	800117c <__udivmoddi4+0x2c0>
 8000fe6:	4643      	mov	r3, r8
 8000fe8:	1a09      	subs	r1, r1, r0
 8000fea:	b2a4      	uxth	r4, r4
 8000fec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ff0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ff4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ff8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ffc:	45a6      	cmp	lr, r4
 8000ffe:	d908      	bls.n	8001012 <__udivmoddi4+0x156>
 8001000:	eb1c 0404 	adds.w	r4, ip, r4
 8001004:	f100 31ff 	add.w	r1, r0, #4294967295
 8001008:	d202      	bcs.n	8001010 <__udivmoddi4+0x154>
 800100a:	45a6      	cmp	lr, r4
 800100c:	f200 80bb 	bhi.w	8001186 <__udivmoddi4+0x2ca>
 8001010:	4608      	mov	r0, r1
 8001012:	eba4 040e 	sub.w	r4, r4, lr
 8001016:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x9a>
 800101c:	f1c6 0720 	rsb	r7, r6, #32
 8001020:	40b3      	lsls	r3, r6
 8001022:	fa22 fc07 	lsr.w	ip, r2, r7
 8001026:	ea4c 0c03 	orr.w	ip, ip, r3
 800102a:	fa20 f407 	lsr.w	r4, r0, r7
 800102e:	fa01 f306 	lsl.w	r3, r1, r6
 8001032:	431c      	orrs	r4, r3
 8001034:	40f9      	lsrs	r1, r7
 8001036:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800103a:	fa00 f306 	lsl.w	r3, r0, r6
 800103e:	fbb1 f8f9 	udiv	r8, r1, r9
 8001042:	0c20      	lsrs	r0, r4, #16
 8001044:	fa1f fe8c 	uxth.w	lr, ip
 8001048:	fb09 1118 	mls	r1, r9, r8, r1
 800104c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001050:	fb08 f00e 	mul.w	r0, r8, lr
 8001054:	4288      	cmp	r0, r1
 8001056:	fa02 f206 	lsl.w	r2, r2, r6
 800105a:	d90b      	bls.n	8001074 <__udivmoddi4+0x1b8>
 800105c:	eb1c 0101 	adds.w	r1, ip, r1
 8001060:	f108 3aff 	add.w	sl, r8, #4294967295
 8001064:	f080 8088 	bcs.w	8001178 <__udivmoddi4+0x2bc>
 8001068:	4288      	cmp	r0, r1
 800106a:	f240 8085 	bls.w	8001178 <__udivmoddi4+0x2bc>
 800106e:	f1a8 0802 	sub.w	r8, r8, #2
 8001072:	4461      	add	r1, ip
 8001074:	1a09      	subs	r1, r1, r0
 8001076:	b2a4      	uxth	r4, r4
 8001078:	fbb1 f0f9 	udiv	r0, r1, r9
 800107c:	fb09 1110 	mls	r1, r9, r0, r1
 8001080:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001084:	fb00 fe0e 	mul.w	lr, r0, lr
 8001088:	458e      	cmp	lr, r1
 800108a:	d908      	bls.n	800109e <__udivmoddi4+0x1e2>
 800108c:	eb1c 0101 	adds.w	r1, ip, r1
 8001090:	f100 34ff 	add.w	r4, r0, #4294967295
 8001094:	d26c      	bcs.n	8001170 <__udivmoddi4+0x2b4>
 8001096:	458e      	cmp	lr, r1
 8001098:	d96a      	bls.n	8001170 <__udivmoddi4+0x2b4>
 800109a:	3802      	subs	r0, #2
 800109c:	4461      	add	r1, ip
 800109e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80010a2:	fba0 9402 	umull	r9, r4, r0, r2
 80010a6:	eba1 010e 	sub.w	r1, r1, lr
 80010aa:	42a1      	cmp	r1, r4
 80010ac:	46c8      	mov	r8, r9
 80010ae:	46a6      	mov	lr, r4
 80010b0:	d356      	bcc.n	8001160 <__udivmoddi4+0x2a4>
 80010b2:	d053      	beq.n	800115c <__udivmoddi4+0x2a0>
 80010b4:	b15d      	cbz	r5, 80010ce <__udivmoddi4+0x212>
 80010b6:	ebb3 0208 	subs.w	r2, r3, r8
 80010ba:	eb61 010e 	sbc.w	r1, r1, lr
 80010be:	fa01 f707 	lsl.w	r7, r1, r7
 80010c2:	fa22 f306 	lsr.w	r3, r2, r6
 80010c6:	40f1      	lsrs	r1, r6
 80010c8:	431f      	orrs	r7, r3
 80010ca:	e9c5 7100 	strd	r7, r1, [r5]
 80010ce:	2600      	movs	r6, #0
 80010d0:	4631      	mov	r1, r6
 80010d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010d6:	f1c2 0320 	rsb	r3, r2, #32
 80010da:	40d8      	lsrs	r0, r3
 80010dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80010e0:	fa21 f303 	lsr.w	r3, r1, r3
 80010e4:	4091      	lsls	r1, r2
 80010e6:	4301      	orrs	r1, r0
 80010e8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010ec:	fa1f fe8c 	uxth.w	lr, ip
 80010f0:	fbb3 f0f7 	udiv	r0, r3, r7
 80010f4:	fb07 3610 	mls	r6, r7, r0, r3
 80010f8:	0c0b      	lsrs	r3, r1, #16
 80010fa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010fe:	fb00 f60e 	mul.w	r6, r0, lr
 8001102:	429e      	cmp	r6, r3
 8001104:	fa04 f402 	lsl.w	r4, r4, r2
 8001108:	d908      	bls.n	800111c <__udivmoddi4+0x260>
 800110a:	eb1c 0303 	adds.w	r3, ip, r3
 800110e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001112:	d22f      	bcs.n	8001174 <__udivmoddi4+0x2b8>
 8001114:	429e      	cmp	r6, r3
 8001116:	d92d      	bls.n	8001174 <__udivmoddi4+0x2b8>
 8001118:	3802      	subs	r0, #2
 800111a:	4463      	add	r3, ip
 800111c:	1b9b      	subs	r3, r3, r6
 800111e:	b289      	uxth	r1, r1
 8001120:	fbb3 f6f7 	udiv	r6, r3, r7
 8001124:	fb07 3316 	mls	r3, r7, r6, r3
 8001128:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800112c:	fb06 f30e 	mul.w	r3, r6, lr
 8001130:	428b      	cmp	r3, r1
 8001132:	d908      	bls.n	8001146 <__udivmoddi4+0x28a>
 8001134:	eb1c 0101 	adds.w	r1, ip, r1
 8001138:	f106 38ff 	add.w	r8, r6, #4294967295
 800113c:	d216      	bcs.n	800116c <__udivmoddi4+0x2b0>
 800113e:	428b      	cmp	r3, r1
 8001140:	d914      	bls.n	800116c <__udivmoddi4+0x2b0>
 8001142:	3e02      	subs	r6, #2
 8001144:	4461      	add	r1, ip
 8001146:	1ac9      	subs	r1, r1, r3
 8001148:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800114c:	e738      	b.n	8000fc0 <__udivmoddi4+0x104>
 800114e:	462e      	mov	r6, r5
 8001150:	4628      	mov	r0, r5
 8001152:	e705      	b.n	8000f60 <__udivmoddi4+0xa4>
 8001154:	4606      	mov	r6, r0
 8001156:	e6e3      	b.n	8000f20 <__udivmoddi4+0x64>
 8001158:	4618      	mov	r0, r3
 800115a:	e6f8      	b.n	8000f4e <__udivmoddi4+0x92>
 800115c:	454b      	cmp	r3, r9
 800115e:	d2a9      	bcs.n	80010b4 <__udivmoddi4+0x1f8>
 8001160:	ebb9 0802 	subs.w	r8, r9, r2
 8001164:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001168:	3801      	subs	r0, #1
 800116a:	e7a3      	b.n	80010b4 <__udivmoddi4+0x1f8>
 800116c:	4646      	mov	r6, r8
 800116e:	e7ea      	b.n	8001146 <__udivmoddi4+0x28a>
 8001170:	4620      	mov	r0, r4
 8001172:	e794      	b.n	800109e <__udivmoddi4+0x1e2>
 8001174:	4640      	mov	r0, r8
 8001176:	e7d1      	b.n	800111c <__udivmoddi4+0x260>
 8001178:	46d0      	mov	r8, sl
 800117a:	e77b      	b.n	8001074 <__udivmoddi4+0x1b8>
 800117c:	3b02      	subs	r3, #2
 800117e:	4461      	add	r1, ip
 8001180:	e732      	b.n	8000fe8 <__udivmoddi4+0x12c>
 8001182:	4630      	mov	r0, r6
 8001184:	e709      	b.n	8000f9a <__udivmoddi4+0xde>
 8001186:	4464      	add	r4, ip
 8001188:	3802      	subs	r0, #2
 800118a:	e742      	b.n	8001012 <__udivmoddi4+0x156>

0800118c <__aeabi_idiv0>:
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <Fusion_datas_init>:
static int64_t Timestamp = 0;

LSM6DSO_Axes_t acc_IMU;
LSM6DSO_Axes_t gyro_IMU;

void Fusion_datas_init(void){
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0

	INIT_IMU();
 8001194:	f000 fec8 	bl	8001f28 <INIT_IMU>

	/* Dynamic Inclinometer API initialization function */
	MotionDI_Initialize(&freq);
 8001198:	4817      	ldr	r0, [pc, #92]	; (80011f8 <Fusion_datas_init+0x68>)
 800119a:	f00d fea9 	bl	800eef0 <MotionDI_Initialize>
	/* Optional: Get version */
	MotionDI_GetLibVersion(lib_version);
 800119e:	4817      	ldr	r0, [pc, #92]	; (80011fc <Fusion_datas_init+0x6c>)
 80011a0:	f011 fe2e 	bl	8012e00 <MotionDI_GetLibVersion>

	/* Optional: Modify knobs settings & set the knobs */
	MotionDI_getKnobs(ipKnobs);
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <Fusion_datas_init+0x70>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f00e f9f1 	bl	800f590 <MotionDI_getKnobs>

	ipKnobs->AccKnob.CalType = MDI_CAL_CONTINUOUS;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <Fusion_datas_init+0x70>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2202      	movs	r2, #2
 80011b4:	711a      	strb	r2, [r3, #4]
	ipKnobs->GyrKnob.CalType = MDI_CAL_CONTINUOUS;
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <Fusion_datas_init+0x70>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2202      	movs	r2, #2
 80011bc:	771a      	strb	r2, [r3, #28]

	BSP_SENSOR_ACC_GetOrientation(ipKnobs->AccOrientation);
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <Fusion_datas_init+0x70>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	332c      	adds	r3, #44	; 0x2c
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 ff92 	bl	80030ee <BSP_SENSOR_ACC_GetOrientation>
	BSP_SENSOR_GYR_GetOrientation(ipKnobs->GyroOrientation);
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <Fusion_datas_init+0x70>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	3330      	adds	r3, #48	; 0x30
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 ffa1 	bl	8003118 <BSP_SENSOR_GYR_GetOrientation>

	ipKnobs->SFKnob.output_type = MDI_ENGINE_OUTPUT_ENU;
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <Fusion_datas_init+0x70>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	ipKnobs->SFKnob.modx = DECIMATION;
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <Fusion_datas_init+0x70>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	MotionDI_setKnobs(ipKnobs);
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <Fusion_datas_init+0x70>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f00e f9c4 	bl	800f57c <MotionDI_setKnobs>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200011c0 	.word	0x200011c0
 80011fc:	20001d88 	.word	0x20001d88
 8001200:	200011c4 	.word	0x200011c4

08001204 <Fusion_datas>:


void Fusion_datas(void){
 8001204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
	/* Get acceleration X/Y/Z in g */
	acc_IMU = Get_AXIS_ACC__IMU();
 800120a:	4e41      	ldr	r6, [pc, #260]	; (8001310 <Fusion_datas+0x10c>)
 800120c:	463b      	mov	r3, r7
 800120e:	4618      	mov	r0, r3
 8001210:	f000 fed4 	bl	8001fbc <Get_AXIS_ACC__IMU>
 8001214:	463b      	mov	r3, r7
 8001216:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800121a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	/* Get angular velocity  X/Y/Z in mdps */
	gyro_IMU =   Get_AXIS_GYRO__IMU();
 800121e:	4e3d      	ldr	r6, [pc, #244]	; (8001314 <Fusion_datas+0x110>)
 8001220:	463b      	mov	r3, r7
 8001222:	4618      	mov	r0, r3
 8001224:	f000 feb2 	bl	8001f8c <Get_AXIS_GYRO__IMU>
 8001228:	463b      	mov	r3, r7
 800122a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800122e:	e886 0007 	stmia.w	r6, {r0, r1, r2}

	/* Convert acceleration from [mg] to [g] */
	data_in.Acc[0] = (float)acc_IMU.x * FROM_MG_TO_G;
 8001232:	4b37      	ldr	r3, [pc, #220]	; (8001310 <Fusion_datas+0x10c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	ee07 3a90 	vmov	s15, r3
 800123a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001318 <Fusion_datas+0x114>
 8001242:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001246:	4b35      	ldr	r3, [pc, #212]	; (800131c <Fusion_datas+0x118>)
 8001248:	edc3 7a02 	vstr	s15, [r3, #8]
	data_in.Acc[1] = (float)acc_IMU.y * FROM_MG_TO_G;
 800124c:	4b30      	ldr	r3, [pc, #192]	; (8001310 <Fusion_datas+0x10c>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	ee07 3a90 	vmov	s15, r3
 8001254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001258:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001318 <Fusion_datas+0x114>
 800125c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001260:	4b2e      	ldr	r3, [pc, #184]	; (800131c <Fusion_datas+0x118>)
 8001262:	edc3 7a03 	vstr	s15, [r3, #12]
	data_in.Acc[2] = (float)acc_IMU.z * FROM_MG_TO_G;
 8001266:	4b2a      	ldr	r3, [pc, #168]	; (8001310 <Fusion_datas+0x10c>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	ee07 3a90 	vmov	s15, r3
 800126e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001272:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001318 <Fusion_datas+0x114>
 8001276:	ee67 7a87 	vmul.f32	s15, s15, s14
 800127a:	4b28      	ldr	r3, [pc, #160]	; (800131c <Fusion_datas+0x118>)
 800127c:	edc3 7a04 	vstr	s15, [r3, #16]

	/* Convert angular velocity from [mdps] to [dps] */
	data_in.Gyro[0] = (float)gyro_IMU.x * FROM_MG_TO_G;
 8001280:	4b24      	ldr	r3, [pc, #144]	; (8001314 <Fusion_datas+0x110>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	ee07 3a90 	vmov	s15, r3
 8001288:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800128c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001318 <Fusion_datas+0x114>
 8001290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001294:	4b21      	ldr	r3, [pc, #132]	; (800131c <Fusion_datas+0x118>)
 8001296:	edc3 7a05 	vstr	s15, [r3, #20]
	data_in.Gyro[1] = (float)gyro_IMU.y * FROM_MDPS_TO_DPS;
 800129a:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <Fusion_datas+0x110>)
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	ee07 3a90 	vmov	s15, r3
 80012a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012a6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001318 <Fusion_datas+0x114>
 80012aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012ae:	4b1b      	ldr	r3, [pc, #108]	; (800131c <Fusion_datas+0x118>)
 80012b0:	edc3 7a06 	vstr	s15, [r3, #24]
	data_in.Gyro[2] = (float)gyro_IMU.z * FROM_MDPS_TO_DPS;
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <Fusion_datas+0x110>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012c0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001318 <Fusion_datas+0x114>
 80012c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <Fusion_datas+0x118>)
 80012ca:	edc3 7a07 	vstr	s15, [r3, #28]

	//Increment sample time
	data_in.Timestamp = Timestamp;
 80012ce:	4b14      	ldr	r3, [pc, #80]	; (8001320 <Fusion_datas+0x11c>)
 80012d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d4:	4911      	ldr	r1, [pc, #68]	; (800131c <Fusion_datas+0x118>)
 80012d6:	e9c1 2300 	strd	r2, r3, [r1]
	Timestamp += ALGO_PERIOD;
 80012da:	4b11      	ldr	r3, [pc, #68]	; (8001320 <Fusion_datas+0x11c>)
 80012dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e0:	f242 7110 	movw	r1, #10000	; 0x2710
 80012e4:	1854      	adds	r4, r2, r1
 80012e6:	f143 0500 	adc.w	r5, r3, #0
 80012ea:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <Fusion_datas+0x11c>)
 80012ec:	e9c3 4500 	strd	r4, r5, [r3]

	/* Run Dynamic Inclinometer algorithm */
	MotionDI_update(&data_out, &data_in);
 80012f0:	490a      	ldr	r1, [pc, #40]	; (800131c <Fusion_datas+0x118>)
 80012f2:	480c      	ldr	r0, [pc, #48]	; (8001324 <Fusion_datas+0x120>)
 80012f4:	f00e f998 	bl	800f628 <MotionDI_update>

	Regulator_inputs.mesure =from_90_to_360();
 80012f8:	f000 f818 	bl	800132c <from_90_to_360>
 80012fc:	eef0 7a40 	vmov.f32	s15, s0
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <Fusion_datas+0x124>)
 8001302:	edc3 7a00 	vstr	s15, [r3]
}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130e:	bf00      	nop
 8001310:	20001e40 	.word	0x20001e40
 8001314:	20001e4c 	.word	0x20001e4c
 8001318:	3a83126f 	.word	0x3a83126f
 800131c:	20001de0 	.word	0x20001de0
 8001320:	20001e38 	.word	0x20001e38
 8001324:	20001e00 	.word	0x20001e00
 8001328:	200020fc 	.word	0x200020fc

0800132c <from_90_to_360>:
}



// Change scale in degrees of roll, from [-90 +90] to [0 to 360]
float from_90_to_360(void){
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
	float roll_360=0;
 8001332:	f04f 0300 	mov.w	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
	float roll_90 = data_out.rotation[2];
 8001338:	4b26      	ldr	r3, [pc, #152]	; (80013d4 <from_90_to_360+0xa8>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	60bb      	str	r3, [r7, #8]
	float gravity = data_out.gravity[2];
 800133e:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <from_90_to_360+0xa8>)
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	607b      	str	r3, [r7, #4]

	if(roll_90 > 0){
 8001344:	edd7 7a02 	vldr	s15, [r7, #8]
 8001348:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800134c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001350:	dd1c      	ble.n	800138c <from_90_to_360+0x60>
		if(gravity < 0){		//zone A
 8001352:	edd7 7a01 	vldr	s15, [r7, #4]
 8001356:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800135a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135e:	d50c      	bpl.n	800137a <from_90_to_360+0x4e>
			roll_360 = 270 + (90-roll_90);
 8001360:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80013d8 <from_90_to_360+0xac>
 8001364:	edd7 7a02 	vldr	s15, [r7, #8]
 8001368:	ee77 7a67 	vsub.f32	s15, s14, s15
 800136c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80013dc <from_90_to_360+0xb0>
 8001370:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001374:	edc7 7a03 	vstr	s15, [r7, #12]
 8001378:	e022      	b.n	80013c0 <from_90_to_360+0x94>
		}
		else{ 					//zone D
			roll_360 = 180 + roll_90;
 800137a:	edd7 7a02 	vldr	s15, [r7, #8]
 800137e:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80013e0 <from_90_to_360+0xb4>
 8001382:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001386:	edc7 7a03 	vstr	s15, [r7, #12]
 800138a:	e019      	b.n	80013c0 <from_90_to_360+0x94>
		}
	}
	else
	{
		if(gravity < 0){		//zone B
 800138c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001390:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001398:	d506      	bpl.n	80013a8 <from_90_to_360+0x7c>
			roll_360 = -roll_90;
 800139a:	edd7 7a02 	vldr	s15, [r7, #8]
 800139e:	eef1 7a67 	vneg.f32	s15, s15
 80013a2:	edc7 7a03 	vstr	s15, [r7, #12]
 80013a6:	e00b      	b.n	80013c0 <from_90_to_360+0x94>
		}
		else{					//zone C
			roll_360 = 90 + (90+roll_90);
 80013a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80013ac:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80013d8 <from_90_to_360+0xac>
 80013b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013b4:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80013d8 <from_90_to_360+0xac>
 80013b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013bc:	edc7 7a03 	vstr	s15, [r7, #12]
		}
	}

	return roll_360;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	ee07 3a90 	vmov	s15, r3
}
 80013c6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	20001e00 	.word	0x20001e00
 80013d8:	42b40000 	.word	0x42b40000
 80013dc:	43870000 	.word	0x43870000
 80013e0:	43340000 	.word	0x43340000

080013e4 <DRV_Init>:
#include "drv8311.h"
#include "pwm_driver.h"



void DRV_Init(void){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af02      	add	r7, sp, #8
	//Init CS pin should default high
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80013ea:	2201      	movs	r2, #1
 80013ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013f0:	48c3      	ldr	r0, [pc, #780]	; (8001700 <DRV_Init+0x31c>)
 80013f2:	f002 fedd 	bl	80041b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(nSleep_GPIO_Port, nSleep_Pin, GPIO_PIN_SET);
 80013f6:	2201      	movs	r2, #1
 80013f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001400:	f002 fed6 	bl	80041b0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001404:	2001      	movs	r0, #1
 8001406:	f002 fb09 	bl	8003a1c <HAL_Delay>

	//Set PWM freq (reset = 0x0000 )
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 800140a:	4bbe      	ldr	r3, [pc, #760]	; (8001704 <DRV_Init+0x320>)
 800140c:	2200      	movs	r2, #0
 800140e:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_PERIOD <<3);  	//reg adr + cmd
 8001410:	4bbc      	ldr	r3, [pc, #752]	; (8001704 <DRV_Init+0x320>)
 8001412:	22c0      	movs	r2, #192	; 0xc0
 8001414:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 8001416:	4bbb      	ldr	r3, [pc, #748]	; (8001704 <DRV_Init+0x320>)
 8001418:	2200      	movs	r2, #0
 800141a:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0xFF;									//data (si read osf)
 800141c:	4bb9      	ldr	r3, [pc, #740]	; (8001704 <DRV_Init+0x320>)
 800141e:	22ff      	movs	r2, #255	; 0xff
 8001420:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001428:	48b5      	ldr	r0, [pc, #724]	; (8001700 <DRV_Init+0x31c>)
 800142a:	f002 fec1 	bl	80041b0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	9300      	str	r3, [sp, #0]
 8001434:	2304      	movs	r3, #4
 8001436:	4ab4      	ldr	r2, [pc, #720]	; (8001708 <DRV_Init+0x324>)
 8001438:	49b2      	ldr	r1, [pc, #712]	; (8001704 <DRV_Init+0x320>)
 800143a:	48b4      	ldr	r0, [pc, #720]	; (800170c <DRV_Init+0x328>)
 800143c:	f005 faed 	bl	8006a1a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8001440:	2201      	movs	r2, #1
 8001442:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001446:	48ae      	ldr	r0, [pc, #696]	; (8001700 <DRV_Init+0x31c>)
 8001448:	f002 feb2 	bl	80041b0 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 800144c:	4bad      	ldr	r3, [pc, #692]	; (8001704 <DRV_Init+0x320>)
 800144e:	2280      	movs	r2, #128	; 0x80
 8001450:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_PERIOD <<3);  	//reg adr + cmd
 8001452:	4bac      	ldr	r3, [pc, #688]	; (8001704 <DRV_Init+0x320>)
 8001454:	22c0      	movs	r2, #192	; 0xc0
 8001456:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 8001458:	4baa      	ldr	r3, [pc, #680]	; (8001704 <DRV_Init+0x320>)
 800145a:	2200      	movs	r2, #0
 800145c:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 800145e:	4ba9      	ldr	r3, [pc, #676]	; (8001704 <DRV_Init+0x320>)
 8001460:	2200      	movs	r2, #0
 8001462:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800146a:	48a5      	ldr	r0, [pc, #660]	; (8001700 <DRV_Init+0x31c>)
 800146c:	f002 fea0 	bl	80041b0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2304      	movs	r3, #4
 8001478:	4aa3      	ldr	r2, [pc, #652]	; (8001708 <DRV_Init+0x324>)
 800147a:	49a2      	ldr	r1, [pc, #648]	; (8001704 <DRV_Init+0x320>)
 800147c:	48a3      	ldr	r0, [pc, #652]	; (800170c <DRV_Init+0x328>)
 800147e:	f005 facc 	bl	8006a1a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8001482:	2201      	movs	r2, #1
 8001484:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001488:	489d      	ldr	r0, [pc, #628]	; (8001700 <DRV_Init+0x31c>)
 800148a:	f002 fe91 	bl	80041b0 <HAL_GPIO_WritePin>

	//Set PWM duty_cycle A   (reset = 0x0000 )
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 800148e:	4b9d      	ldr	r3, [pc, #628]	; (8001704 <DRV_Init+0x320>)
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_A_DUTY <<3);  	//reg adr + cmd
 8001494:	4b9b      	ldr	r3, [pc, #620]	; (8001704 <DRV_Init+0x320>)
 8001496:	22c8      	movs	r2, #200	; 0xc8
 8001498:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 800149a:	4b9a      	ldr	r3, [pc, #616]	; (8001704 <DRV_Init+0x320>)
 800149c:	2200      	movs	r2, #0
 800149e:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 80014a0:	4b98      	ldr	r3, [pc, #608]	; (8001704 <DRV_Init+0x320>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ac:	4894      	ldr	r0, [pc, #592]	; (8001700 <DRV_Init+0x31c>)
 80014ae:	f002 fe7f 	bl	80041b0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2304      	movs	r3, #4
 80014ba:	4a93      	ldr	r2, [pc, #588]	; (8001708 <DRV_Init+0x324>)
 80014bc:	4991      	ldr	r1, [pc, #580]	; (8001704 <DRV_Init+0x320>)
 80014be:	4893      	ldr	r0, [pc, #588]	; (800170c <DRV_Init+0x328>)
 80014c0:	f005 faab 	bl	8006a1a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ca:	488d      	ldr	r0, [pc, #564]	; (8001700 <DRV_Init+0x31c>)
 80014cc:	f002 fe70 	bl	80041b0 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 80014d0:	4b8c      	ldr	r3, [pc, #560]	; (8001704 <DRV_Init+0x320>)
 80014d2:	2280      	movs	r2, #128	; 0x80
 80014d4:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_A_DUTY <<3);  	//reg adr + cmd
 80014d6:	4b8b      	ldr	r3, [pc, #556]	; (8001704 <DRV_Init+0x320>)
 80014d8:	22c8      	movs	r2, #200	; 0xc8
 80014da:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80014dc:	4b89      	ldr	r3, [pc, #548]	; (8001704 <DRV_Init+0x320>)
 80014de:	2200      	movs	r2, #0
 80014e0:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 80014e2:	4b88      	ldr	r3, [pc, #544]	; (8001704 <DRV_Init+0x320>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ee:	4884      	ldr	r0, [pc, #528]	; (8001700 <DRV_Init+0x31c>)
 80014f0:	f002 fe5e 	bl	80041b0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80014f4:	f04f 33ff 	mov.w	r3, #4294967295
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	2304      	movs	r3, #4
 80014fc:	4a82      	ldr	r2, [pc, #520]	; (8001708 <DRV_Init+0x324>)
 80014fe:	4981      	ldr	r1, [pc, #516]	; (8001704 <DRV_Init+0x320>)
 8001500:	4882      	ldr	r0, [pc, #520]	; (800170c <DRV_Init+0x328>)
 8001502:	f005 fa8a 	bl	8006a1a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8001506:	2201      	movs	r2, #1
 8001508:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800150c:	487c      	ldr	r0, [pc, #496]	; (8001700 <DRV_Init+0x31c>)
 800150e:	f002 fe4f 	bl	80041b0 <HAL_GPIO_WritePin>

	//Set PWM duty_cycle B  (reset = 0x0000 )
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 8001512:	4b7c      	ldr	r3, [pc, #496]	; (8001704 <DRV_Init+0x320>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_B_DUTY <<3);  	//reg adr + cmd
 8001518:	4b7a      	ldr	r3, [pc, #488]	; (8001704 <DRV_Init+0x320>)
 800151a:	22d0      	movs	r2, #208	; 0xd0
 800151c:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 800151e:	4b79      	ldr	r3, [pc, #484]	; (8001704 <DRV_Init+0x320>)
 8001520:	2200      	movs	r2, #0
 8001522:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8001524:	4b77      	ldr	r3, [pc, #476]	; (8001704 <DRV_Init+0x320>)
 8001526:	2200      	movs	r2, #0
 8001528:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800152a:	2200      	movs	r2, #0
 800152c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001530:	4873      	ldr	r0, [pc, #460]	; (8001700 <DRV_Init+0x31c>)
 8001532:	f002 fe3d 	bl	80041b0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8001536:	f04f 33ff 	mov.w	r3, #4294967295
 800153a:	9300      	str	r3, [sp, #0]
 800153c:	2304      	movs	r3, #4
 800153e:	4a72      	ldr	r2, [pc, #456]	; (8001708 <DRV_Init+0x324>)
 8001540:	4970      	ldr	r1, [pc, #448]	; (8001704 <DRV_Init+0x320>)
 8001542:	4872      	ldr	r0, [pc, #456]	; (800170c <DRV_Init+0x328>)
 8001544:	f005 fa69 	bl	8006a1a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8001548:	2201      	movs	r2, #1
 800154a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800154e:	486c      	ldr	r0, [pc, #432]	; (8001700 <DRV_Init+0x31c>)
 8001550:	f002 fe2e 	bl	80041b0 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 8001554:	4b6b      	ldr	r3, [pc, #428]	; (8001704 <DRV_Init+0x320>)
 8001556:	2280      	movs	r2, #128	; 0x80
 8001558:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_B_DUTY <<3);  	//reg adr + cmd
 800155a:	4b6a      	ldr	r3, [pc, #424]	; (8001704 <DRV_Init+0x320>)
 800155c:	22d0      	movs	r2, #208	; 0xd0
 800155e:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 8001560:	4b68      	ldr	r3, [pc, #416]	; (8001704 <DRV_Init+0x320>)
 8001562:	2200      	movs	r2, #0
 8001564:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8001566:	4b67      	ldr	r3, [pc, #412]	; (8001704 <DRV_Init+0x320>)
 8001568:	2200      	movs	r2, #0
 800156a:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800156c:	2200      	movs	r2, #0
 800156e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001572:	4863      	ldr	r0, [pc, #396]	; (8001700 <DRV_Init+0x31c>)
 8001574:	f002 fe1c 	bl	80041b0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8001578:	f04f 33ff 	mov.w	r3, #4294967295
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	2304      	movs	r3, #4
 8001580:	4a61      	ldr	r2, [pc, #388]	; (8001708 <DRV_Init+0x324>)
 8001582:	4960      	ldr	r1, [pc, #384]	; (8001704 <DRV_Init+0x320>)
 8001584:	4861      	ldr	r0, [pc, #388]	; (800170c <DRV_Init+0x328>)
 8001586:	f005 fa48 	bl	8006a1a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 800158a:	2201      	movs	r2, #1
 800158c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001590:	485b      	ldr	r0, [pc, #364]	; (8001700 <DRV_Init+0x31c>)
 8001592:	f002 fe0d 	bl	80041b0 <HAL_GPIO_WritePin>

	//Set PWM duty_cycle C (reset = 0x0000 )
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00 ;               					//cmd
 8001596:	4b5b      	ldr	r3, [pc, #364]	; (8001704 <DRV_Init+0x320>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_C_DUTY <<3);  	//reg adr + cmd
 800159c:	4b59      	ldr	r3, [pc, #356]	; (8001704 <DRV_Init+0x320>)
 800159e:	22d8      	movs	r2, #216	; 0xd8
 80015a0:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80015a2:	4b58      	ldr	r3, [pc, #352]	; (8001704 <DRV_Init+0x320>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 80015a8:	4b56      	ldr	r3, [pc, #344]	; (8001704 <DRV_Init+0x320>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b4:	4852      	ldr	r0, [pc, #328]	; (8001700 <DRV_Init+0x31c>)
 80015b6:	f002 fdfb 	bl	80041b0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2304      	movs	r3, #4
 80015c2:	4a51      	ldr	r2, [pc, #324]	; (8001708 <DRV_Init+0x324>)
 80015c4:	494f      	ldr	r1, [pc, #316]	; (8001704 <DRV_Init+0x320>)
 80015c6:	4851      	ldr	r0, [pc, #324]	; (800170c <DRV_Init+0x328>)
 80015c8:	f005 fa27 	bl	8006a1a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80015cc:	2201      	movs	r2, #1
 80015ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015d2:	484b      	ldr	r0, [pc, #300]	; (8001700 <DRV_Init+0x31c>)
 80015d4:	f002 fdec 	bl	80041b0 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 80015d8:	4b4a      	ldr	r3, [pc, #296]	; (8001704 <DRV_Init+0x320>)
 80015da:	2280      	movs	r2, #128	; 0x80
 80015dc:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_C_DUTY <<3);  	//reg adr + cmd
 80015de:	4b49      	ldr	r3, [pc, #292]	; (8001704 <DRV_Init+0x320>)
 80015e0:	22d8      	movs	r2, #216	; 0xd8
 80015e2:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80015e4:	4b47      	ldr	r3, [pc, #284]	; (8001704 <DRV_Init+0x320>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 80015ea:	4b46      	ldr	r3, [pc, #280]	; (8001704 <DRV_Init+0x320>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80015f0:	2200      	movs	r2, #0
 80015f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f6:	4842      	ldr	r0, [pc, #264]	; (8001700 <DRV_Init+0x31c>)
 80015f8:	f002 fdda 	bl	80041b0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80015fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2304      	movs	r3, #4
 8001604:	4a40      	ldr	r2, [pc, #256]	; (8001708 <DRV_Init+0x324>)
 8001606:	493f      	ldr	r1, [pc, #252]	; (8001704 <DRV_Init+0x320>)
 8001608:	4840      	ldr	r0, [pc, #256]	; (800170c <DRV_Init+0x328>)
 800160a:	f005 fa06 	bl	8006a1a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 800160e:	2201      	movs	r2, #1
 8001610:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001614:	483a      	ldr	r0, [pc, #232]	; (8001700 <DRV_Init+0x31c>)
 8001616:	f002 fdcb 	bl	80041b0 <HAL_GPIO_WritePin>
	HAL_Delay(1);*/


	//counter mode
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 800161a:	4b3a      	ldr	r3, [pc, #232]	; (8001704 <DRV_Init+0x320>)
 800161c:	2200      	movs	r2, #0
 800161e:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_CTRL <<3);  	//reg adr + cmd
 8001620:	4b38      	ldr	r3, [pc, #224]	; (8001704 <DRV_Init+0x320>)
 8001622:	22e8      	movs	r2, #232	; 0xe8
 8001624:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00 | (0x01);						//data (si read osf)
 8001626:	4b37      	ldr	r3, [pc, #220]	; (8001704 <DRV_Init+0x320>)
 8001628:	2201      	movs	r2, #1
 800162a:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 800162c:	4b35      	ldr	r3, [pc, #212]	; (8001704 <DRV_Init+0x320>)
 800162e:	2200      	movs	r2, #0
 8001630:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8001632:	2200      	movs	r2, #0
 8001634:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001638:	4831      	ldr	r0, [pc, #196]	; (8001700 <DRV_Init+0x31c>)
 800163a:	f002 fdb9 	bl	80041b0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 800163e:	f04f 33ff 	mov.w	r3, #4294967295
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2304      	movs	r3, #4
 8001646:	4a30      	ldr	r2, [pc, #192]	; (8001708 <DRV_Init+0x324>)
 8001648:	492e      	ldr	r1, [pc, #184]	; (8001704 <DRV_Init+0x320>)
 800164a:	4830      	ldr	r0, [pc, #192]	; (800170c <DRV_Init+0x328>)
 800164c:	f005 f9e5 	bl	8006a1a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8001650:	2201      	movs	r2, #1
 8001652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001656:	482a      	ldr	r0, [pc, #168]	; (8001700 <DRV_Init+0x31c>)
 8001658:	f002 fdaa 	bl	80041b0 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 800165c:	4b29      	ldr	r3, [pc, #164]	; (8001704 <DRV_Init+0x320>)
 800165e:	2280      	movs	r2, #128	; 0x80
 8001660:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_CTRL <<3);  	//reg adr + cmd
 8001662:	4b28      	ldr	r3, [pc, #160]	; (8001704 <DRV_Init+0x320>)
 8001664:	22e8      	movs	r2, #232	; 0xe8
 8001666:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 8001668:	4b26      	ldr	r3, [pc, #152]	; (8001704 <DRV_Init+0x320>)
 800166a:	2200      	movs	r2, #0
 800166c:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 800166e:	4b25      	ldr	r3, [pc, #148]	; (8001704 <DRV_Init+0x320>)
 8001670:	2200      	movs	r2, #0
 8001672:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8001674:	2200      	movs	r2, #0
 8001676:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800167a:	4821      	ldr	r0, [pc, #132]	; (8001700 <DRV_Init+0x31c>)
 800167c:	f002 fd98 	bl	80041b0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8001680:	f04f 33ff 	mov.w	r3, #4294967295
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2304      	movs	r3, #4
 8001688:	4a1f      	ldr	r2, [pc, #124]	; (8001708 <DRV_Init+0x324>)
 800168a:	491e      	ldr	r1, [pc, #120]	; (8001704 <DRV_Init+0x320>)
 800168c:	481f      	ldr	r0, [pc, #124]	; (800170c <DRV_Init+0x328>)
 800168e:	f005 f9c4 	bl	8006a1a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8001692:	2201      	movs	r2, #1
 8001694:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001698:	4819      	ldr	r0, [pc, #100]	; (8001700 <DRV_Init+0x31c>)
 800169a:	f002 fd89 	bl	80041b0 <HAL_GPIO_WritePin>

	//pwm state
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 800169e:	4b19      	ldr	r3, [pc, #100]	; (8001704 <DRV_Init+0x320>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWM_STATE <<3);  	//reg adr + cmd
 80016a4:	4b17      	ldr	r3, [pc, #92]	; (8001704 <DRV_Init+0x320>)
 80016a6:	22e0      	movs	r2, #224	; 0xe0
 80016a8:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x07;						//data (si read osf)
 80016aa:	4b16      	ldr	r3, [pc, #88]	; (8001704 <DRV_Init+0x320>)
 80016ac:	2207      	movs	r2, #7
 80016ae:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x77;									//data (si read osf)
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <DRV_Init+0x320>)
 80016b2:	2277      	movs	r2, #119	; 0x77
 80016b4:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80016b6:	2200      	movs	r2, #0
 80016b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016bc:	4810      	ldr	r0, [pc, #64]	; (8001700 <DRV_Init+0x31c>)
 80016be:	f002 fd77 	bl	80041b0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2304      	movs	r3, #4
 80016ca:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <DRV_Init+0x324>)
 80016cc:	490d      	ldr	r1, [pc, #52]	; (8001704 <DRV_Init+0x320>)
 80016ce:	480f      	ldr	r0, [pc, #60]	; (800170c <DRV_Init+0x328>)
 80016d0:	f005 f9a3 	bl	8006a1a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80016d4:	2201      	movs	r2, #1
 80016d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016da:	4809      	ldr	r0, [pc, #36]	; (8001700 <DRV_Init+0x31c>)
 80016dc:	f002 fd68 	bl	80041b0 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <DRV_Init+0x320>)
 80016e2:	2280      	movs	r2, #128	; 0x80
 80016e4:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWM_STATE <<3);  	//reg adr + cmd
 80016e6:	4b07      	ldr	r3, [pc, #28]	; (8001704 <DRV_Init+0x320>)
 80016e8:	22e0      	movs	r2, #224	; 0xe0
 80016ea:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <DRV_Init+0x320>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 80016f2:	4b04      	ldr	r3, [pc, #16]	; (8001704 <DRV_Init+0x320>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80016f8:	2200      	movs	r2, #0
 80016fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016fe:	e007      	b.n	8001710 <DRV_Init+0x32c>
 8001700:	48000400 	.word	0x48000400
 8001704:	200020d4 	.word	0x200020d4
 8001708:	200020e8 	.word	0x200020e8
 800170c:	20001f54 	.word	0x20001f54
 8001710:	482b      	ldr	r0, [pc, #172]	; (80017c0 <DRV_Init+0x3dc>)
 8001712:	f002 fd4d 	bl	80041b0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	2304      	movs	r3, #4
 800171e:	4a29      	ldr	r2, [pc, #164]	; (80017c4 <DRV_Init+0x3e0>)
 8001720:	4929      	ldr	r1, [pc, #164]	; (80017c8 <DRV_Init+0x3e4>)
 8001722:	482a      	ldr	r0, [pc, #168]	; (80017cc <DRV_Init+0x3e8>)
 8001724:	f005 f979 	bl	8006a1a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8001728:	2201      	movs	r2, #1
 800172a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800172e:	4824      	ldr	r0, [pc, #144]	; (80017c0 <DRV_Init+0x3dc>)
 8001730:	f002 fd3e 	bl	80041b0 <HAL_GPIO_WritePin>


	//Enable PWM Generation  (reset = 0x0000 ) + synchro
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 8001734:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <DRV_Init+0x3e4>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_CTRL <<3);  	//reg adr + cmd
 800173a:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <DRV_Init+0x3e4>)
 800173c:	22e8      	movs	r2, #232	; 0xe8
 800173e:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00 | (0x01<<2);						//data (si read osf)
 8001740:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <DRV_Init+0x3e4>)
 8001742:	2204      	movs	r2, #4
 8001744:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00 | (0x05<<5);									//data (si read osf)
 8001746:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <DRV_Init+0x3e4>)
 8001748:	22a0      	movs	r2, #160	; 0xa0
 800174a:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001752:	481b      	ldr	r0, [pc, #108]	; (80017c0 <DRV_Init+0x3dc>)
 8001754:	f002 fd2c 	bl	80041b0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8001758:	f04f 33ff 	mov.w	r3, #4294967295
 800175c:	9300      	str	r3, [sp, #0]
 800175e:	2304      	movs	r3, #4
 8001760:	4a18      	ldr	r2, [pc, #96]	; (80017c4 <DRV_Init+0x3e0>)
 8001762:	4919      	ldr	r1, [pc, #100]	; (80017c8 <DRV_Init+0x3e4>)
 8001764:	4819      	ldr	r0, [pc, #100]	; (80017cc <DRV_Init+0x3e8>)
 8001766:	f005 f958 	bl	8006a1a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 800176a:	2201      	movs	r2, #1
 800176c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001770:	4813      	ldr	r0, [pc, #76]	; (80017c0 <DRV_Init+0x3dc>)
 8001772:	f002 fd1d 	bl	80041b0 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <DRV_Init+0x3e4>)
 8001778:	2280      	movs	r2, #128	; 0x80
 800177a:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_CTRL <<3);  	//reg adr + cmd
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <DRV_Init+0x3e4>)
 800177e:	22e8      	movs	r2, #232	; 0xe8
 8001780:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <DRV_Init+0x3e4>)
 8001784:	2200      	movs	r2, #0
 8001786:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8001788:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <DRV_Init+0x3e4>)
 800178a:	2200      	movs	r2, #0
 800178c:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001794:	480a      	ldr	r0, [pc, #40]	; (80017c0 <DRV_Init+0x3dc>)
 8001796:	f002 fd0b 	bl	80041b0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2304      	movs	r3, #4
 80017a2:	4a08      	ldr	r2, [pc, #32]	; (80017c4 <DRV_Init+0x3e0>)
 80017a4:	4908      	ldr	r1, [pc, #32]	; (80017c8 <DRV_Init+0x3e4>)
 80017a6:	4809      	ldr	r0, [pc, #36]	; (80017cc <DRV_Init+0x3e8>)
 80017a8:	f005 f937 	bl	8006a1a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017b2:	4803      	ldr	r0, [pc, #12]	; (80017c0 <DRV_Init+0x3dc>)
 80017b4:	f002 fcfc 	bl	80041b0 <HAL_GPIO_WritePin>

}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	48000400 	.word	0x48000400
 80017c4:	200020e8 	.word	0x200020e8
 80017c8:	200020d4 	.word	0x200020d4
 80017cc:	20001f54 	.word	0x20001f54

080017d0 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d103      	bne.n	80017ec <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	e04d      	b.n	8001888 <LSM6DSO_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	7b1a      	ldrb	r2, [r3, #12]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	691a      	ldr	r2, [r3, #16]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	695a      	ldr	r2, [r3, #20]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	699a      	ldr	r2, [r3, #24]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4a1b      	ldr	r2, [pc, #108]	; (8001894 <LSM6DSO_RegisterBusIO+0xc4>)
 8001828:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a1a      	ldr	r2, [pc, #104]	; (8001898 <LSM6DSO_RegisterBusIO+0xc8>)
 800182e:	61da      	str	r2, [r3, #28]

    //MODIFIED
    pObj->Ctx.handle   = pObj;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d103      	bne.n	8001846 <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 800183e:	f04f 33ff 	mov.w	r3, #4294967295
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	e020      	b.n	8001888 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4798      	blx	r3
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <LSM6DSO_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO_ERROR;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	e016      	b.n	8001888 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d112      	bne.n	8001888 <LSM6DSO_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10d      	bne.n	8001888 <LSM6DSO_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 800186c:	230c      	movs	r3, #12
 800186e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8001870:	7afb      	ldrb	r3, [r7, #11]
 8001872:	461a      	mov	r2, r3
 8001874:	2112      	movs	r1, #18
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 fac4 	bl	8001e04 <LSM6DSO_Write_Reg>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d002      	beq.n	8001888 <LSM6DSO_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO_ERROR;
 8001882:	f04f 33ff 	mov.w	r3, #4294967295
 8001886:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8001888:	68fb      	ldr	r3, [r7, #12]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3710      	adds	r7, #16
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	08001e3b 	.word	0x08001e3b
 8001898:	08001e71 	.word	0x08001e71

0800189c <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	331c      	adds	r3, #28
 80018a8:	2180      	movs	r1, #128	; 0x80
 80018aa:	4618      	mov	r0, r3
 80018ac:	f001 f85e 	bl	800296c <lsm6dso_i3c_disable_set>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	e060      	b.n	800197e <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	331c      	adds	r3, #28
 80018c0:	2101      	movs	r1, #1
 80018c2:	4618      	mov	r0, r3
 80018c4:	f001 f82c 	bl	8002920 <lsm6dso_auto_increment_set>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	e054      	b.n	800197e <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	331c      	adds	r3, #28
 80018d8:	2101      	movs	r1, #1
 80018da:	4618      	mov	r0, r3
 80018dc:	f000 ff3e 	bl	800275c <lsm6dso_block_data_update_set>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ea:	e048      	b.n	800197e <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	331c      	adds	r3, #28
 80018f0:	2100      	movs	r1, #0
 80018f2:	4618      	mov	r0, r3
 80018f4:	f001 f880 	bl	80029f8 <lsm6dso_fifo_mode_set>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d002      	beq.n	8001904 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 80018fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001902:	e03c      	b.n	800197e <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2204      	movs	r2, #4
 8001908:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	331c      	adds	r3, #28
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f000 fbf8 	bl	8002108 <lsm6dso_xl_data_rate_set>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 800191e:	f04f 33ff 	mov.w	r3, #4294967295
 8001922:	e02c      	b.n	800197e <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	331c      	adds	r3, #28
 8001928:	2100      	movs	r1, #0
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fb8e 	bl	800204c <lsm6dso_xl_full_scale_set>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8001936:	f04f 33ff 	mov.w	r3, #4294967295
 800193a:	e020      	b.n	800197e <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2204      	movs	r2, #4
 8001940:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	331c      	adds	r3, #28
 8001948:	2100      	movs	r1, #0
 800194a:	4618      	mov	r0, r3
 800194c:	f000 fda8 	bl	80024a0 <lsm6dso_gy_data_rate_set>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d002      	beq.n	800195c <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	e010      	b.n	800197e <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	331c      	adds	r3, #28
 8001960:	2106      	movs	r1, #6
 8001962:	4618      	mov	r0, r3
 8001964:	f000 fd34 	bl	80023d0 <lsm6dso_gy_full_scale_set>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
 8001972:	e004      	b.n	800197e <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f872 	bl	8001a78 <LSM6DSO_ACC_Disable>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d002      	beq.n	80019a0 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 800199a:	f04f 33ff 	mov.w	r3, #4294967295
 800199e:	e015      	b.n	80019cc <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f95a 	bl	8001c5a <LSM6DSO_GYRO_Disable>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d002      	beq.n	80019b2 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 80019ac:	f04f 33ff 	mov.w	r3, #4294967295
 80019b0:	e00c      	b.n	80019cc <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	2201      	movs	r2, #1
 80019e2:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	2201      	movs	r2, #1
 80019e8:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	2200      	movs	r2, #0
 80019ee:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	2200      	movs	r2, #0
 80019f4:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80019fc:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	2210      	movs	r2, #16
 8001a02:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	4a07      	ldr	r2, [pc, #28]	; (8001a2c <LSM6DSO_GetCapabilities+0x58>)
 8001a0e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	4a06      	ldr	r2, [pc, #24]	; (8001a2c <LSM6DSO_GetCapabilities+0x58>)
 8001a14:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	45d02000 	.word	0x45d02000

08001a30 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d101      	bne.n	8001a46 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e014      	b.n	8001a70 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f103 021c 	add.w	r2, r3, #28
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001a52:	4619      	mov	r1, r3
 8001a54:	4610      	mov	r0, r2
 8001a56:	f000 fb57 	bl	8002108 <lsm6dso_xl_data_rate_set>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d002      	beq.n	8001a66 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8001a60:	f04f 33ff 	mov.w	r3, #4294967295
 8001a64:	e004      	b.n	8001a70 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d101      	bne.n	8001a8e <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	e01f      	b.n	8001ace <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	f103 021c 	add.w	r2, r3, #28
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	332b      	adds	r3, #43	; 0x2b
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	f000 fc30 	bl	8002300 <lsm6dso_xl_data_rate_get>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	e010      	b.n	8001ace <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	331c      	adds	r3, #28
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f000 fb28 	bl	8002108 <lsm6dso_xl_data_rate_set>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d002      	beq.n	8001ac4 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	e004      	b.n	8001ace <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	331c      	adds	r3, #28
 8001aea:	f107 020b 	add.w	r2, r7, #11
 8001aee:	4611      	mov	r1, r2
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 fad1 	bl	8002098 <lsm6dso_xl_full_scale_get>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8001afc:	f04f 33ff 	mov.w	r3, #4294967295
 8001b00:	e023      	b.n	8001b4a <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8001b02:	7afb      	ldrb	r3, [r7, #11]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	d81b      	bhi.n	8001b40 <LSM6DSO_ACC_GetSensitivity+0x68>
 8001b08:	a201      	add	r2, pc, #4	; (adr r2, 8001b10 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8001b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b0e:	bf00      	nop
 8001b10:	08001b21 	.word	0x08001b21
 8001b14:	08001b39 	.word	0x08001b39
 8001b18:	08001b29 	.word	0x08001b29
 8001b1c:	08001b31 	.word	0x08001b31
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	4a0c      	ldr	r2, [pc, #48]	; (8001b54 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8001b24:	601a      	str	r2, [r3, #0]
      break;
 8001b26:	e00f      	b.n	8001b48 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8001b2c:	601a      	str	r2, [r3, #0]
      break;
 8001b2e:	e00b      	b.n	8001b48 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	4a0a      	ldr	r2, [pc, #40]	; (8001b5c <LSM6DSO_ACC_GetSensitivity+0x84>)
 8001b34:	601a      	str	r2, [r3, #0]
      break;
 8001b36:	e007      	b.n	8001b48 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	4a09      	ldr	r2, [pc, #36]	; (8001b60 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8001b3c:	601a      	str	r2, [r3, #0]
      break;
 8001b3e:	e003      	b.n	8001b48 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295
 8001b44:	60fb      	str	r3, [r7, #12]
      break;
 8001b46:	bf00      	nop
  }

  return ret;
 8001b48:	68fb      	ldr	r3, [r7, #12]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	3d79db23 	.word	0x3d79db23
 8001b58:	3df9db23 	.word	0x3df9db23
 8001b5c:	3e79db23 	.word	0x3e79db23
 8001b60:	3ef9db23 	.word	0x3ef9db23

08001b64 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8001b6e:	f04f 0300 	mov.w	r3, #0
 8001b72:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	331c      	adds	r3, #28
 8001b78:	f107 0210 	add.w	r2, r7, #16
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 fe5d 	bl	800283e <lsm6dso_acceleration_raw_get>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8001b8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8e:	e03c      	b.n	8001c0a <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	4619      	mov	r1, r3
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ff9e 	bl	8001ad8 <LSM6DSO_ACC_GetSensitivity>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba6:	e030      	b.n	8001c0a <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8001ba8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bac:	ee07 3a90 	vmov	s15, r3
 8001bb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bb4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bbc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001bc0:	ee17 2a90 	vmov	r2, s15
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8001bc8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001bcc:	ee07 3a90 	vmov	s15, r3
 8001bd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bd4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001be0:	ee17 2a90 	vmov	r2, s15
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8001be8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf4:	edd7 7a03 	vldr	s15, [r7, #12]
 8001bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c00:	ee17 2a90 	vmov	r2, s15
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3718      	adds	r7, #24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	e014      	b.n	8001c52 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f103 021c 	add.w	r2, r3, #28
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001c34:	4619      	mov	r1, r3
 8001c36:	4610      	mov	r0, r2
 8001c38:	f000 fc32 	bl	80024a0 <lsm6dso_gy_data_rate_set>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295
 8001c46:	e004      	b.n	8001c52 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e01f      	b.n	8001cb0 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f103 021c 	add.w	r2, r3, #28
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	332c      	adds	r3, #44	; 0x2c
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	f000 fd0b 	bl	8002698 <lsm6dso_gy_data_rate_get>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d002      	beq.n	8001c8e <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8c:	e010      	b.n	8001cb0 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	331c      	adds	r3, #28
 8001c92:	2100      	movs	r1, #0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fc03 	bl	80024a0 <lsm6dso_gy_data_rate_set>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8001ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca4:	e004      	b.n	8001cb0 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}

08001cb8 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	331c      	adds	r3, #28
 8001cca:	f107 020b 	add.w	r2, r7, #11
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 fba3 	bl	800241c <lsm6dso_gy_full_scale_get>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8001cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce0:	e02d      	b.n	8001d3e <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8001ce2:	7afb      	ldrb	r3, [r7, #11]
 8001ce4:	2b06      	cmp	r3, #6
 8001ce6:	d825      	bhi.n	8001d34 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8001ce8:	a201      	add	r2, pc, #4	; (adr r2, 8001cf0 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8001cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cee:	bf00      	nop
 8001cf0:	08001d15 	.word	0x08001d15
 8001cf4:	08001d0d 	.word	0x08001d0d
 8001cf8:	08001d1d 	.word	0x08001d1d
 8001cfc:	08001d35 	.word	0x08001d35
 8001d00:	08001d25 	.word	0x08001d25
 8001d04:	08001d35 	.word	0x08001d35
 8001d08:	08001d2d 	.word	0x08001d2d
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8001d10:	601a      	str	r2, [r3, #0]
      break;
 8001d12:	e013      	b.n	8001d3c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	4a0d      	ldr	r2, [pc, #52]	; (8001d4c <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8001d18:	601a      	str	r2, [r3, #0]
      break;
 8001d1a:	e00f      	b.n	8001d3c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4a0c      	ldr	r2, [pc, #48]	; (8001d50 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8001d20:	601a      	str	r2, [r3, #0]
      break;
 8001d22:	e00b      	b.n	8001d3c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	4a0b      	ldr	r2, [pc, #44]	; (8001d54 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8001d28:	601a      	str	r2, [r3, #0]
      break;
 8001d2a:	e007      	b.n	8001d3c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8001d30:	601a      	str	r2, [r3, #0]
      break;
 8001d32:	e003      	b.n	8001d3c <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8001d34:	f04f 33ff 	mov.w	r3, #4294967295
 8001d38:	60fb      	str	r3, [r7, #12]
      break;
 8001d3a:	bf00      	nop
  }

  return ret;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3710      	adds	r7, #16
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	408c0000 	.word	0x408c0000
 8001d4c:	410c0000 	.word	0x410c0000
 8001d50:	418c0000 	.word	0x418c0000
 8001d54:	420c0000 	.word	0x420c0000
 8001d58:	428c0000 	.word	0x428c0000

08001d5c <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b086      	sub	sp, #24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	331c      	adds	r3, #28
 8001d6a:	f107 0210 	add.w	r2, r7, #16
 8001d6e:	4611      	mov	r1, r2
 8001d70:	4618      	mov	r0, r3
 8001d72:	f000 fd19 	bl	80027a8 <lsm6dso_angular_rate_raw_get>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8001d7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d80:	e03c      	b.n	8001dfc <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8001d82:	f107 030c 	add.w	r3, r7, #12
 8001d86:	4619      	mov	r1, r3
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f7ff ff95 	bl	8001cb8 <LSM6DSO_GYRO_GetSensitivity>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d002      	beq.n	8001d9a <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8001d94:	f04f 33ff 	mov.w	r3, #4294967295
 8001d98:	e030      	b.n	8001dfc <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8001d9a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001d9e:	ee07 3a90 	vmov	s15, r3
 8001da2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001daa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001db2:	ee17 2a90 	vmov	r2, s15
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8001dba:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dd2:	ee17 2a90 	vmov	r2, s15
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8001dda:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001dde:	ee07 3a90 	vmov	s15, r3
 8001de2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001de6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001df2:	ee17 2a90 	vmov	r2, s15
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	70fb      	strb	r3, [r7, #3]
 8001e10:	4613      	mov	r3, r2
 8001e12:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f103 001c 	add.w	r0, r3, #28
 8001e1a:	1cba      	adds	r2, r7, #2
 8001e1c:	78f9      	ldrb	r1, [r7, #3]
 8001e1e:	2301      	movs	r3, #1
 8001e20:	f000 f8fc 	bl	800201c <lsm6dso_write_reg>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d002      	beq.n	8001e30 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8001e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2e:	e000      	b.n	8001e32 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}

08001e3a <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001e3a:	b590      	push	{r4, r7, lr}
 8001e3c:	b087      	sub	sp, #28
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	461a      	mov	r2, r3
 8001e46:	460b      	mov	r3, r1
 8001e48:	72fb      	strb	r3, [r7, #11]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	813b      	strh	r3, [r7, #8]
	LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	617b      	str	r3, [r7, #20]
	return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	695c      	ldr	r4, [r3, #20]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	7b1b      	ldrb	r3, [r3, #12]
 8001e5a:	b298      	uxth	r0, r3
 8001e5c:	7afb      	ldrb	r3, [r7, #11]
 8001e5e:	b299      	uxth	r1, r3
 8001e60:	893b      	ldrh	r3, [r7, #8]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	47a0      	blx	r4
 8001e66:	4603      	mov	r3, r0
	//MODIFIED
	//HAL_I2C_Mem_Read(Handle, LSM6DSO_I2C_ADD_L, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 1000);
	//return 0;
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	371c      	adds	r7, #28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd90      	pop	{r4, r7, pc}

08001e70 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001e70:	b590      	push	{r4, r7, lr}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	72fb      	strb	r3, [r7, #11]
 8001e80:	4613      	mov	r3, r2
 8001e82:	813b      	strh	r3, [r7, #8]
	LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	617b      	str	r3, [r7, #20]
	return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	691c      	ldr	r4, [r3, #16]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	7b1b      	ldrb	r3, [r3, #12]
 8001e90:	b298      	uxth	r0, r3
 8001e92:	7afb      	ldrb	r3, [r7, #11]
 8001e94:	b299      	uxth	r1, r3
 8001e96:	893b      	ldrh	r3, [r7, #8]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	47a0      	blx	r4
 8001e9c:	4603      	mov	r3, r0
	//MODIFIED
	//HAL_I2C_Mem_Read(Handle, LSM6DSO_I2C_ADD_L, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 1000);
	//return 0;
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	371c      	adds	r7, #28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd90      	pop	{r4, r7, pc}
	...

08001ea8 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af04      	add	r7, sp, #16
 8001eae:	60ba      	str	r2, [r7, #8]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	81fb      	strh	r3, [r7, #14]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	81bb      	strh	r3, [r7, #12]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	80fb      	strh	r3, [r7, #6]
  HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 1000);
 8001ebe:	89ba      	ldrh	r2, [r7, #12]
 8001ec0:	89f9      	ldrh	r1, [r7, #14]
 8001ec2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ec6:	9302      	str	r3, [sp, #8]
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	9301      	str	r3, [sp, #4]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	4804      	ldr	r0, [pc, #16]	; (8001ee4 <BSP_I2C1_ReadReg+0x3c>)
 8001ed4:	f002 fb42 	bl	800455c <HAL_I2C_Mem_Read>

  return 0;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	20001ee4 	.word	0x20001ee4

08001ee8 <BSP_I2C1_WriteReg>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b088      	sub	sp, #32
 8001eec:	af04      	add	r7, sp, #16
 8001eee:	60ba      	str	r2, [r7, #8]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	81fb      	strh	r3, [r7, #14]
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	81bb      	strh	r3, [r7, #12]
 8001efa:	4613      	mov	r3, r2
 8001efc:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, 1000);
 8001efe:	89ba      	ldrh	r2, [r7, #12]
 8001f00:	89f9      	ldrh	r1, [r7, #14]
 8001f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f06:	9302      	str	r3, [sp, #8]
 8001f08:	88fb      	ldrh	r3, [r7, #6]
 8001f0a:	9301      	str	r3, [sp, #4]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	2301      	movs	r3, #1
 8001f12:	4804      	ldr	r0, [pc, #16]	; (8001f24 <BSP_I2C1_WriteReg+0x3c>)
 8001f14:	f002 fa0e 	bl	8004334 <HAL_I2C_Mem_Write>
	return 0;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20001ee4 	.word	0x20001ee4

08001f28 <INIT_IMU>:





void INIT_IMU(void){
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	af00      	add	r7, sp, #0
	//IMU------------------------------------------------
	  /* Configure the accelero driver */
	  IO_IMU.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8001f2c:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <INIT_IMU+0x48>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
	  IO_IMU.Address     = LSM6DSO_I2C_ADD_H;
 8001f32:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <INIT_IMU+0x48>)
 8001f34:	22d7      	movs	r2, #215	; 0xd7
 8001f36:	731a      	strb	r2, [r3, #12]
	  IO_IMU.Init        = LSM6DSO_Init;
 8001f38:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <INIT_IMU+0x48>)
 8001f3a:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <INIT_IMU+0x4c>)
 8001f3c:	601a      	str	r2, [r3, #0]
	  IO_IMU.DeInit      = LSM6DSO_DeInit;
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <INIT_IMU+0x48>)
 8001f40:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <INIT_IMU+0x50>)
 8001f42:	605a      	str	r2, [r3, #4]
	  IO_IMU.ReadReg     = IMU_BSP_I2C1_ReadReg;
 8001f44:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <INIT_IMU+0x48>)
 8001f46:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <INIT_IMU+0x54>)
 8001f48:	615a      	str	r2, [r3, #20]
	  IO_IMU.WriteReg    = IMU_BSP_I2C1_WriteReg;
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <INIT_IMU+0x48>)
 8001f4c:	4a0c      	ldr	r2, [pc, #48]	; (8001f80 <INIT_IMU+0x58>)
 8001f4e:	611a      	str	r2, [r3, #16]
	  LSM6DSO_RegisterBusIO(&IMU, &IO_IMU);
 8001f50:	4907      	ldr	r1, [pc, #28]	; (8001f70 <INIT_IMU+0x48>)
 8001f52:	480c      	ldr	r0, [pc, #48]	; (8001f84 <INIT_IMU+0x5c>)
 8001f54:	f7ff fc3c 	bl	80017d0 <LSM6DSO_RegisterBusIO>

	  LSM6DSO_GetCapabilities(&IMU, &capabilities_IMU);
 8001f58:	490b      	ldr	r1, [pc, #44]	; (8001f88 <INIT_IMU+0x60>)
 8001f5a:	480a      	ldr	r0, [pc, #40]	; (8001f84 <INIT_IMU+0x5c>)
 8001f5c:	f7ff fd3a 	bl	80019d4 <LSM6DSO_GetCapabilities>

	  LSM6DSO_ACC_Enable(&IMU);
 8001f60:	4808      	ldr	r0, [pc, #32]	; (8001f84 <INIT_IMU+0x5c>)
 8001f62:	f7ff fd65 	bl	8001a30 <LSM6DSO_ACC_Enable>
	  LSM6DSO_GYRO_Enable(&IMU);
 8001f66:	4807      	ldr	r0, [pc, #28]	; (8001f84 <INIT_IMU+0x5c>)
 8001f68:	f7ff fe53 	bl	8001c12 <LSM6DSO_GYRO_Enable>
}
 8001f6c:	bf00      	nop
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20001e88 	.word	0x20001e88
 8001f74:	0800189d 	.word	0x0800189d
 8001f78:	08001987 	.word	0x08001987
 8001f7c:	08001ea9 	.word	0x08001ea9
 8001f80:	08001ee9 	.word	0x08001ee9
 8001f84:	20001e58 	.word	0x20001e58
 8001f88:	20001ea4 	.word	0x20001ea4

08001f8c <Get_AXIS_GYRO__IMU>:



LSM6DSO_Axes_t Get_AXIS_GYRO__IMU(void){
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
	LSM6DSO_Axes_t gyro_IMU;
	LSM6DSO_GYRO_GetAxes(&IMU, &gyro_IMU);
 8001f94:	f107 030c 	add.w	r3, r7, #12
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <Get_AXIS_GYRO__IMU+0x2c>)
 8001f9c:	f7ff fede 	bl	8001d5c <LSM6DSO_GYRO_GetAxes>
	return gyro_IMU;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	461c      	mov	r4, r3
 8001fa4:	f107 030c 	add.w	r3, r7, #12
 8001fa8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001fac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	371c      	adds	r7, #28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd90      	pop	{r4, r7, pc}
 8001fb8:	20001e58 	.word	0x20001e58

08001fbc <Get_AXIS_ACC__IMU>:

LSM6DSO_Axes_t Get_AXIS_ACC__IMU(void){
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
	LSM6DSO_Axes_t acc_IMU;
	LSM6DSO_ACC_GetAxes(&IMU, &acc_IMU);
 8001fc4:	f107 030c 	add.w	r3, r7, #12
 8001fc8:	4619      	mov	r1, r3
 8001fca:	4807      	ldr	r0, [pc, #28]	; (8001fe8 <Get_AXIS_ACC__IMU+0x2c>)
 8001fcc:	f7ff fdca 	bl	8001b64 <LSM6DSO_ACC_GetAxes>
	return acc_IMU;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	461c      	mov	r4, r3
 8001fd4:	f107 030c 	add.w	r3, r7, #12
 8001fd8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001fdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	371c      	adds	r7, #28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd90      	pop	{r4, r7, pc}
 8001fe8:	20001e58 	.word	0x20001e58

08001fec <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001fec:	b590      	push	{r4, r7, lr}
 8001fee:	b087      	sub	sp, #28
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	72fb      	strb	r3, [r7, #11]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	685c      	ldr	r4, [r3, #4]
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6898      	ldr	r0, [r3, #8]
 8002008:	893b      	ldrh	r3, [r7, #8]
 800200a:	7af9      	ldrb	r1, [r7, #11]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	47a0      	blx	r4
 8002010:	6178      	str	r0, [r7, #20]

  return ret;
 8002012:	697b      	ldr	r3, [r7, #20]
}
 8002014:	4618      	mov	r0, r3
 8002016:	371c      	adds	r7, #28
 8002018:	46bd      	mov	sp, r7
 800201a:	bd90      	pop	{r4, r7, pc}

0800201c <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 800201c:	b590      	push	{r4, r7, lr}
 800201e:	b087      	sub	sp, #28
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	607a      	str	r2, [r7, #4]
 8002026:	461a      	mov	r2, r3
 8002028:	460b      	mov	r3, r1
 800202a:	72fb      	strb	r3, [r7, #11]
 800202c:	4613      	mov	r3, r2
 800202e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681c      	ldr	r4, [r3, #0]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6898      	ldr	r0, [r3, #8]
 8002038:	893b      	ldrh	r3, [r7, #8]
 800203a:	7af9      	ldrb	r1, [r7, #11]
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	47a0      	blx	r4
 8002040:	6178      	str	r0, [r7, #20]

  return ret;
 8002042:	697b      	ldr	r3, [r7, #20]
}
 8002044:	4618      	mov	r0, r3
 8002046:	371c      	adds	r7, #28
 8002048:	46bd      	mov	sp, r7
 800204a:	bd90      	pop	{r4, r7, pc}

0800204c <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002058:	f107 0208 	add.w	r2, r7, #8
 800205c:	2301      	movs	r3, #1
 800205e:	2110      	movs	r1, #16
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7ff ffc3 	bl	8001fec <lsm6dso_read_reg>
 8002066:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10f      	bne.n	800208e <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 800206e:	78fb      	ldrb	r3, [r7, #3]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	b2da      	uxtb	r2, r3
 8002076:	7a3b      	ldrb	r3, [r7, #8]
 8002078:	f362 0383 	bfi	r3, r2, #2, #2
 800207c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800207e:	f107 0208 	add.w	r2, r7, #8
 8002082:	2301      	movs	r3, #1
 8002084:	2110      	movs	r1, #16
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff ffc8 	bl	800201c <lsm6dso_write_reg>
 800208c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800208e:	68fb      	ldr	r3, [r7, #12]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80020a2:	f107 0208 	add.w	r2, r7, #8
 80020a6:	2301      	movs	r3, #1
 80020a8:	2110      	movs	r1, #16
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f7ff ff9e 	bl	8001fec <lsm6dso_read_reg>
 80020b0:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 80020b2:	7a3b      	ldrb	r3, [r7, #8]
 80020b4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b03      	cmp	r3, #3
 80020bc:	d81a      	bhi.n	80020f4 <lsm6dso_xl_full_scale_get+0x5c>
 80020be:	a201      	add	r2, pc, #4	; (adr r2, 80020c4 <lsm6dso_xl_full_scale_get+0x2c>)
 80020c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c4:	080020d5 	.word	0x080020d5
 80020c8:	080020dd 	.word	0x080020dd
 80020cc:	080020e5 	.word	0x080020e5
 80020d0:	080020ed 	.word	0x080020ed
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
      break;
 80020da:	e00f      	b.n	80020fc <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
      break;
 80020e2:	e00b      	b.n	80020fc <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	2202      	movs	r2, #2
 80020e8:	701a      	strb	r2, [r3, #0]
      break;
 80020ea:	e007      	b.n	80020fc <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	2203      	movs	r2, #3
 80020f0:	701a      	strb	r2, [r3, #0]
      break;
 80020f2:	e003      	b.n	80020fc <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2200      	movs	r2, #0
 80020f8:	701a      	strb	r2, [r3, #0]
      break;
 80020fa:	bf00      	nop
  }

  return ret;
 80020fc:	68fb      	ldr	r3, [r7, #12]
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3710      	adds	r7, #16
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop

08002108 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b086      	sub	sp, #24
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8002118:	f107 030c 	add.w	r3, r7, #12
 800211c:	4619      	mov	r1, r3
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 fc90 	bl	8002a44 <lsm6dso_fsm_enable_get>
 8002124:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	2b00      	cmp	r3, #0
 800212a:	f040 80c4 	bne.w	80022b6 <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800212e:	7b3b      	ldrb	r3, [r7, #12]
 8002130:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002134:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8002136:	7b3b      	ldrb	r3, [r7, #12]
 8002138:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800213c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800213e:	4313      	orrs	r3, r2
 8002140:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8002142:	7b3b      	ldrb	r3, [r7, #12]
 8002144:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002148:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800214a:	4313      	orrs	r3, r2
 800214c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800214e:	7b3b      	ldrb	r3, [r7, #12]
 8002150:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002154:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8002156:	4313      	orrs	r3, r2
 8002158:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800215a:	7b3b      	ldrb	r3, [r7, #12]
 800215c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002160:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8002162:	4313      	orrs	r3, r2
 8002164:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8002166:	7b3b      	ldrb	r3, [r7, #12]
 8002168:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800216c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800216e:	4313      	orrs	r3, r2
 8002170:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8002172:	7b3b      	ldrb	r3, [r7, #12]
 8002174:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002178:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800217a:	4313      	orrs	r3, r2
 800217c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800217e:	7b3b      	ldrb	r3, [r7, #12]
 8002180:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002184:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8002186:	4313      	orrs	r3, r2
 8002188:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800218a:	7b7b      	ldrb	r3, [r7, #13]
 800218c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002190:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8002192:	4313      	orrs	r3, r2
 8002194:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8002196:	7b7b      	ldrb	r3, [r7, #13]
 8002198:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800219c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800219e:	4313      	orrs	r3, r2
 80021a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80021a2:	7b7b      	ldrb	r3, [r7, #13]
 80021a4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80021a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80021aa:	4313      	orrs	r3, r2
 80021ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80021ae:	7b7b      	ldrb	r3, [r7, #13]
 80021b0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80021b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80021b6:	4313      	orrs	r3, r2
 80021b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80021ba:	7b7b      	ldrb	r3, [r7, #13]
 80021bc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80021c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80021c6:	7b7b      	ldrb	r3, [r7, #13]
 80021c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80021cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80021ce:	4313      	orrs	r3, r2
 80021d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80021d2:	7b7b      	ldrb	r3, [r7, #13]
 80021d4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80021d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80021da:	4313      	orrs	r3, r2
 80021dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80021de:	7b7b      	ldrb	r3, [r7, #13]
 80021e0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80021e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80021e6:	4313      	orrs	r3, r2
 80021e8:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d163      	bne.n	80022b6 <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80021ee:	f107 030b 	add.w	r3, r7, #11
 80021f2:	4619      	mov	r1, r3
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 fc47 	bl	8002a88 <lsm6dso_fsm_data_rate_get>
 80021fa:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d159      	bne.n	80022b6 <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8002202:	7afb      	ldrb	r3, [r7, #11]
 8002204:	2b03      	cmp	r3, #3
 8002206:	d853      	bhi.n	80022b0 <lsm6dso_xl_data_rate_set+0x1a8>
 8002208:	a201      	add	r2, pc, #4	; (adr r2, 8002210 <lsm6dso_xl_data_rate_set+0x108>)
 800220a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220e:	bf00      	nop
 8002210:	08002221 	.word	0x08002221
 8002214:	08002233 	.word	0x08002233
 8002218:	08002251 	.word	0x08002251
 800221c:	0800227b 	.word	0x0800227b
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d102      	bne.n	800222c <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8002226:	2301      	movs	r3, #1
 8002228:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800222a:	e045      	b.n	80022b8 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800222c:	78fb      	ldrb	r3, [r7, #3]
 800222e:	75fb      	strb	r3, [r7, #23]
            break;
 8002230:	e042      	b.n	80022b8 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8002232:	78fb      	ldrb	r3, [r7, #3]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d102      	bne.n	800223e <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8002238:	2302      	movs	r3, #2
 800223a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800223c:	e03c      	b.n	80022b8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 800223e:	78fb      	ldrb	r3, [r7, #3]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d102      	bne.n	800224a <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8002244:	2302      	movs	r3, #2
 8002246:	75fb      	strb	r3, [r7, #23]
            break;
 8002248:	e036      	b.n	80022b8 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800224a:	78fb      	ldrb	r3, [r7, #3]
 800224c:	75fb      	strb	r3, [r7, #23]
            break;
 800224e:	e033      	b.n	80022b8 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8002250:	78fb      	ldrb	r3, [r7, #3]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d102      	bne.n	800225c <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8002256:	2303      	movs	r3, #3
 8002258:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800225a:	e02d      	b.n	80022b8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d102      	bne.n	8002268 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8002262:	2303      	movs	r3, #3
 8002264:	75fb      	strb	r3, [r7, #23]
            break;
 8002266:	e027      	b.n	80022b8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d102      	bne.n	8002274 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800226e:	2303      	movs	r3, #3
 8002270:	75fb      	strb	r3, [r7, #23]
            break;
 8002272:	e021      	b.n	80022b8 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8002274:	78fb      	ldrb	r3, [r7, #3]
 8002276:	75fb      	strb	r3, [r7, #23]
            break;
 8002278:	e01e      	b.n	80022b8 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d102      	bne.n	8002286 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8002280:	2304      	movs	r3, #4
 8002282:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8002284:	e018      	b.n	80022b8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d102      	bne.n	8002292 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 800228c:	2304      	movs	r3, #4
 800228e:	75fb      	strb	r3, [r7, #23]
            break;
 8002290:	e012      	b.n	80022b8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8002292:	78fb      	ldrb	r3, [r7, #3]
 8002294:	2b02      	cmp	r3, #2
 8002296:	d102      	bne.n	800229e <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8002298:	2304      	movs	r3, #4
 800229a:	75fb      	strb	r3, [r7, #23]
            break;
 800229c:	e00c      	b.n	80022b8 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 800229e:	78fb      	ldrb	r3, [r7, #3]
 80022a0:	2b03      	cmp	r3, #3
 80022a2:	d102      	bne.n	80022aa <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80022a4:	2304      	movs	r3, #4
 80022a6:	75fb      	strb	r3, [r7, #23]
            break;
 80022a8:	e006      	b.n	80022b8 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	75fb      	strb	r3, [r7, #23]
            break;
 80022ae:	e003      	b.n	80022b8 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80022b0:	78fb      	ldrb	r3, [r7, #3]
 80022b2:	75fb      	strb	r3, [r7, #23]
            break;
 80022b4:	e000      	b.n	80022b8 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 80022b6:	bf00      	nop
    }
  }

  if (ret == 0)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d107      	bne.n	80022ce <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80022be:	f107 0208 	add.w	r2, r7, #8
 80022c2:	2301      	movs	r3, #1
 80022c4:	2110      	movs	r1, #16
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff fe90 	bl	8001fec <lsm6dso_read_reg>
 80022cc:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10f      	bne.n	80022f4 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	b2da      	uxtb	r2, r3
 80022dc:	7a3b      	ldrb	r3, [r7, #8]
 80022de:	f362 1307 	bfi	r3, r2, #4, #4
 80022e2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80022e4:	f107 0208 	add.w	r2, r7, #8
 80022e8:	2301      	movs	r3, #1
 80022ea:	2110      	movs	r1, #16
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff fe95 	bl	800201c <lsm6dso_write_reg>
 80022f2:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80022f4:	693b      	ldr	r3, [r7, #16]
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3718      	adds	r7, #24
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop

08002300 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800230a:	f107 0208 	add.w	r2, r7, #8
 800230e:	2301      	movs	r3, #1
 8002310:	2110      	movs	r1, #16
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff fe6a 	bl	8001fec <lsm6dso_read_reg>
 8002318:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 800231a:	7a3b      	ldrb	r3, [r7, #8]
 800231c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b0b      	cmp	r3, #11
 8002324:	d84a      	bhi.n	80023bc <lsm6dso_xl_data_rate_get+0xbc>
 8002326:	a201      	add	r2, pc, #4	; (adr r2, 800232c <lsm6dso_xl_data_rate_get+0x2c>)
 8002328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800232c:	0800235d 	.word	0x0800235d
 8002330:	08002365 	.word	0x08002365
 8002334:	0800236d 	.word	0x0800236d
 8002338:	08002375 	.word	0x08002375
 800233c:	0800237d 	.word	0x0800237d
 8002340:	08002385 	.word	0x08002385
 8002344:	0800238d 	.word	0x0800238d
 8002348:	08002395 	.word	0x08002395
 800234c:	0800239d 	.word	0x0800239d
 8002350:	080023a5 	.word	0x080023a5
 8002354:	080023ad 	.word	0x080023ad
 8002358:	080023b5 	.word	0x080023b5
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
      break;
 8002362:	e02f      	b.n	80023c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
      break;
 800236a:	e02b      	b.n	80023c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	2202      	movs	r2, #2
 8002370:	701a      	strb	r2, [r3, #0]
      break;
 8002372:	e027      	b.n	80023c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2203      	movs	r2, #3
 8002378:	701a      	strb	r2, [r3, #0]
      break;
 800237a:	e023      	b.n	80023c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2204      	movs	r2, #4
 8002380:	701a      	strb	r2, [r3, #0]
      break;
 8002382:	e01f      	b.n	80023c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2205      	movs	r2, #5
 8002388:	701a      	strb	r2, [r3, #0]
      break;
 800238a:	e01b      	b.n	80023c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	2206      	movs	r2, #6
 8002390:	701a      	strb	r2, [r3, #0]
      break;
 8002392:	e017      	b.n	80023c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	2207      	movs	r2, #7
 8002398:	701a      	strb	r2, [r3, #0]
      break;
 800239a:	e013      	b.n	80023c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	2208      	movs	r2, #8
 80023a0:	701a      	strb	r2, [r3, #0]
      break;
 80023a2:	e00f      	b.n	80023c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2209      	movs	r2, #9
 80023a8:	701a      	strb	r2, [r3, #0]
      break;
 80023aa:	e00b      	b.n	80023c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	220a      	movs	r2, #10
 80023b0:	701a      	strb	r2, [r3, #0]
      break;
 80023b2:	e007      	b.n	80023c4 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	220b      	movs	r2, #11
 80023b8:	701a      	strb	r2, [r3, #0]
      break;
 80023ba:	e003      	b.n	80023c4 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
      break;
 80023c2:	bf00      	nop
  }

  return ret;
 80023c4:	68fb      	ldr	r3, [r7, #12]
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3710      	adds	r7, #16
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop

080023d0 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80023dc:	f107 0208 	add.w	r2, r7, #8
 80023e0:	2301      	movs	r3, #1
 80023e2:	2111      	movs	r1, #17
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f7ff fe01 	bl	8001fec <lsm6dso_read_reg>
 80023ea:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10f      	bne.n	8002412 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 80023f2:	78fb      	ldrb	r3, [r7, #3]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	7a3b      	ldrb	r3, [r7, #8]
 80023fc:	f362 0343 	bfi	r3, r2, #1, #3
 8002400:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002402:	f107 0208 	add.w	r2, r7, #8
 8002406:	2301      	movs	r3, #1
 8002408:	2111      	movs	r1, #17
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff fe06 	bl	800201c <lsm6dso_write_reg>
 8002410:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002412:	68fb      	ldr	r3, [r7, #12]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3710      	adds	r7, #16
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002426:	f107 0208 	add.w	r2, r7, #8
 800242a:	2301      	movs	r3, #1
 800242c:	2111      	movs	r1, #17
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7ff fddc 	bl	8001fec <lsm6dso_read_reg>
 8002434:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8002436:	7a3b      	ldrb	r3, [r7, #8]
 8002438:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800243c:	b2db      	uxtb	r3, r3
 800243e:	2b06      	cmp	r3, #6
 8002440:	d824      	bhi.n	800248c <lsm6dso_gy_full_scale_get+0x70>
 8002442:	a201      	add	r2, pc, #4	; (adr r2, 8002448 <lsm6dso_gy_full_scale_get+0x2c>)
 8002444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002448:	08002465 	.word	0x08002465
 800244c:	0800246d 	.word	0x0800246d
 8002450:	08002475 	.word	0x08002475
 8002454:	0800248d 	.word	0x0800248d
 8002458:	0800247d 	.word	0x0800247d
 800245c:	0800248d 	.word	0x0800248d
 8002460:	08002485 	.word	0x08002485
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
      break;
 800246a:	e013      	b.n	8002494 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	2201      	movs	r2, #1
 8002470:	701a      	strb	r2, [r3, #0]
      break;
 8002472:	e00f      	b.n	8002494 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2202      	movs	r2, #2
 8002478:	701a      	strb	r2, [r3, #0]
      break;
 800247a:	e00b      	b.n	8002494 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2204      	movs	r2, #4
 8002480:	701a      	strb	r2, [r3, #0]
      break;
 8002482:	e007      	b.n	8002494 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2206      	movs	r2, #6
 8002488:	701a      	strb	r2, [r3, #0]
      break;
 800248a:	e003      	b.n	8002494 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
      break;
 8002492:	bf00      	nop
  }

  return ret;
 8002494:	68fb      	ldr	r3, [r7, #12]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop

080024a0 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 80024ac:	78fb      	ldrb	r3, [r7, #3]
 80024ae:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 80024b0:	f107 030c 	add.w	r3, r7, #12
 80024b4:	4619      	mov	r1, r3
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fac4 	bl	8002a44 <lsm6dso_fsm_enable_get>
 80024bc:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f040 80c4 	bne.w	800264e <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80024c6:	7b3b      	ldrb	r3, [r7, #12]
 80024c8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80024cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80024ce:	7b3b      	ldrb	r3, [r7, #12]
 80024d0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80024d4:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80024d6:	4313      	orrs	r3, r2
 80024d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80024da:	7b3b      	ldrb	r3, [r7, #12]
 80024dc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80024e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80024e2:	4313      	orrs	r3, r2
 80024e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80024e6:	7b3b      	ldrb	r3, [r7, #12]
 80024e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80024ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80024ee:	4313      	orrs	r3, r2
 80024f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80024f2:	7b3b      	ldrb	r3, [r7, #12]
 80024f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80024f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80024fa:	4313      	orrs	r3, r2
 80024fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80024fe:	7b3b      	ldrb	r3, [r7, #12]
 8002500:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002504:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8002506:	4313      	orrs	r3, r2
 8002508:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800250a:	7b3b      	ldrb	r3, [r7, #12]
 800250c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002510:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8002512:	4313      	orrs	r3, r2
 8002514:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8002516:	7b3b      	ldrb	r3, [r7, #12]
 8002518:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800251c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800251e:	4313      	orrs	r3, r2
 8002520:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8002522:	7b7b      	ldrb	r3, [r7, #13]
 8002524:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002528:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800252a:	4313      	orrs	r3, r2
 800252c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800252e:	7b7b      	ldrb	r3, [r7, #13]
 8002530:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002534:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8002536:	4313      	orrs	r3, r2
 8002538:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800253a:	7b7b      	ldrb	r3, [r7, #13]
 800253c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002540:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8002542:	4313      	orrs	r3, r2
 8002544:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8002546:	7b7b      	ldrb	r3, [r7, #13]
 8002548:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800254c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800254e:	4313      	orrs	r3, r2
 8002550:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8002552:	7b7b      	ldrb	r3, [r7, #13]
 8002554:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002558:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800255a:	4313      	orrs	r3, r2
 800255c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800255e:	7b7b      	ldrb	r3, [r7, #13]
 8002560:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002564:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 8002566:	4313      	orrs	r3, r2
 8002568:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800256a:	7b7b      	ldrb	r3, [r7, #13]
 800256c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002570:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8002572:	4313      	orrs	r3, r2
 8002574:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 8002576:	7b7b      	ldrb	r3, [r7, #13]
 8002578:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800257c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 800257e:	4313      	orrs	r3, r2
 8002580:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002582:	2b01      	cmp	r3, #1
 8002584:	d163      	bne.n	800264e <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8002586:	f107 030b 	add.w	r3, r7, #11
 800258a:	4619      	mov	r1, r3
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 fa7b 	bl	8002a88 <lsm6dso_fsm_data_rate_get>
 8002592:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d159      	bne.n	800264e <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800259a:	7afb      	ldrb	r3, [r7, #11]
 800259c:	2b03      	cmp	r3, #3
 800259e:	d853      	bhi.n	8002648 <lsm6dso_gy_data_rate_set+0x1a8>
 80025a0:	a201      	add	r2, pc, #4	; (adr r2, 80025a8 <lsm6dso_gy_data_rate_set+0x108>)
 80025a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a6:	bf00      	nop
 80025a8:	080025b9 	.word	0x080025b9
 80025ac:	080025cb 	.word	0x080025cb
 80025b0:	080025e9 	.word	0x080025e9
 80025b4:	08002613 	.word	0x08002613
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 80025b8:	78fb      	ldrb	r3, [r7, #3]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d102      	bne.n	80025c4 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80025be:	2301      	movs	r3, #1
 80025c0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80025c2:	e045      	b.n	8002650 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	75fb      	strb	r3, [r7, #23]
            break;
 80025c8:	e042      	b.n	8002650 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d102      	bne.n	80025d6 <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 80025d0:	2302      	movs	r3, #2
 80025d2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80025d4:	e03c      	b.n	8002650 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 80025d6:	78fb      	ldrb	r3, [r7, #3]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d102      	bne.n	80025e2 <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 80025dc:	2302      	movs	r3, #2
 80025de:	75fb      	strb	r3, [r7, #23]
            break;
 80025e0:	e036      	b.n	8002650 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80025e2:	78fb      	ldrb	r3, [r7, #3]
 80025e4:	75fb      	strb	r3, [r7, #23]
            break;
 80025e6:	e033      	b.n	8002650 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d102      	bne.n	80025f4 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80025ee:	2303      	movs	r3, #3
 80025f0:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80025f2:	e02d      	b.n	8002650 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d102      	bne.n	8002600 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80025fa:	2303      	movs	r3, #3
 80025fc:	75fb      	strb	r3, [r7, #23]
            break;
 80025fe:	e027      	b.n	8002650 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d102      	bne.n	800260c <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8002606:	2303      	movs	r3, #3
 8002608:	75fb      	strb	r3, [r7, #23]
            break;
 800260a:	e021      	b.n	8002650 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	75fb      	strb	r3, [r7, #23]
            break;
 8002610:	e01e      	b.n	8002650 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d102      	bne.n	800261e <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002618:	2304      	movs	r3, #4
 800261a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800261c:	e018      	b.n	8002650 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d102      	bne.n	800262a <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002624:	2304      	movs	r3, #4
 8002626:	75fb      	strb	r3, [r7, #23]
            break;
 8002628:	e012      	b.n	8002650 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 800262a:	78fb      	ldrb	r3, [r7, #3]
 800262c:	2b02      	cmp	r3, #2
 800262e:	d102      	bne.n	8002636 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002630:	2304      	movs	r3, #4
 8002632:	75fb      	strb	r3, [r7, #23]
            break;
 8002634:	e00c      	b.n	8002650 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8002636:	78fb      	ldrb	r3, [r7, #3]
 8002638:	2b03      	cmp	r3, #3
 800263a:	d102      	bne.n	8002642 <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800263c:	2304      	movs	r3, #4
 800263e:	75fb      	strb	r3, [r7, #23]
            break;
 8002640:	e006      	b.n	8002650 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8002642:	78fb      	ldrb	r3, [r7, #3]
 8002644:	75fb      	strb	r3, [r7, #23]
            break;
 8002646:	e003      	b.n	8002650 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	75fb      	strb	r3, [r7, #23]
            break;
 800264c:	e000      	b.n	8002650 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 800264e:	bf00      	nop
    }
  }

  if (ret == 0)
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d107      	bne.n	8002666 <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002656:	f107 0208 	add.w	r2, r7, #8
 800265a:	2301      	movs	r3, #1
 800265c:	2111      	movs	r1, #17
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff fcc4 	bl	8001fec <lsm6dso_read_reg>
 8002664:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10f      	bne.n	800268c <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 800266c:	7dfb      	ldrb	r3, [r7, #23]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	b2da      	uxtb	r2, r3
 8002674:	7a3b      	ldrb	r3, [r7, #8]
 8002676:	f362 1307 	bfi	r3, r2, #4, #4
 800267a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800267c:	f107 0208 	add.w	r2, r7, #8
 8002680:	2301      	movs	r3, #1
 8002682:	2111      	movs	r1, #17
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f7ff fcc9 	bl	800201c <lsm6dso_write_reg>
 800268a:	6138      	str	r0, [r7, #16]
  }

  return ret;
 800268c:	693b      	ldr	r3, [r7, #16]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3718      	adds	r7, #24
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop

08002698 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80026a2:	f107 0208 	add.w	r2, r7, #8
 80026a6:	2301      	movs	r3, #1
 80026a8:	2111      	movs	r1, #17
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff fc9e 	bl	8001fec <lsm6dso_read_reg>
 80026b0:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 80026b2:	7a3b      	ldrb	r3, [r7, #8]
 80026b4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b0a      	cmp	r3, #10
 80026bc:	d844      	bhi.n	8002748 <lsm6dso_gy_data_rate_get+0xb0>
 80026be:	a201      	add	r2, pc, #4	; (adr r2, 80026c4 <lsm6dso_gy_data_rate_get+0x2c>)
 80026c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c4:	080026f1 	.word	0x080026f1
 80026c8:	080026f9 	.word	0x080026f9
 80026cc:	08002701 	.word	0x08002701
 80026d0:	08002709 	.word	0x08002709
 80026d4:	08002711 	.word	0x08002711
 80026d8:	08002719 	.word	0x08002719
 80026dc:	08002721 	.word	0x08002721
 80026e0:	08002729 	.word	0x08002729
 80026e4:	08002731 	.word	0x08002731
 80026e8:	08002739 	.word	0x08002739
 80026ec:	08002741 	.word	0x08002741
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	2200      	movs	r2, #0
 80026f4:	701a      	strb	r2, [r3, #0]
      break;
 80026f6:	e02b      	b.n	8002750 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]
      break;
 80026fe:	e027      	b.n	8002750 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	2202      	movs	r2, #2
 8002704:	701a      	strb	r2, [r3, #0]
      break;
 8002706:	e023      	b.n	8002750 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2203      	movs	r2, #3
 800270c:	701a      	strb	r2, [r3, #0]
      break;
 800270e:	e01f      	b.n	8002750 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2204      	movs	r2, #4
 8002714:	701a      	strb	r2, [r3, #0]
      break;
 8002716:	e01b      	b.n	8002750 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2205      	movs	r2, #5
 800271c:	701a      	strb	r2, [r3, #0]
      break;
 800271e:	e017      	b.n	8002750 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2206      	movs	r2, #6
 8002724:	701a      	strb	r2, [r3, #0]
      break;
 8002726:	e013      	b.n	8002750 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	2207      	movs	r2, #7
 800272c:	701a      	strb	r2, [r3, #0]
      break;
 800272e:	e00f      	b.n	8002750 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	2208      	movs	r2, #8
 8002734:	701a      	strb	r2, [r3, #0]
      break;
 8002736:	e00b      	b.n	8002750 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2209      	movs	r2, #9
 800273c:	701a      	strb	r2, [r3, #0]
      break;
 800273e:	e007      	b.n	8002750 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	220a      	movs	r2, #10
 8002744:	701a      	strb	r2, [r3, #0]
      break;
 8002746:	e003      	b.n	8002750 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	2200      	movs	r2, #0
 800274c:	701a      	strb	r2, [r3, #0]
      break;
 800274e:	bf00      	nop
  }

  return ret;
 8002750:	68fb      	ldr	r3, [r7, #12]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop

0800275c <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	460b      	mov	r3, r1
 8002766:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8002768:	f107 0208 	add.w	r2, r7, #8
 800276c:	2301      	movs	r3, #1
 800276e:	2112      	movs	r1, #18
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f7ff fc3b 	bl	8001fec <lsm6dso_read_reg>
 8002776:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10f      	bne.n	800279e <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 800277e:	78fb      	ldrb	r3, [r7, #3]
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	b2da      	uxtb	r2, r3
 8002786:	7a3b      	ldrb	r3, [r7, #8]
 8002788:	f362 1386 	bfi	r3, r2, #6, #1
 800278c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800278e:	f107 0208 	add.w	r2, r7, #8
 8002792:	2301      	movs	r3, #1
 8002794:	2112      	movs	r1, #18
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff fc40 	bl	800201c <lsm6dso_write_reg>
 800279c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800279e:	68fb      	ldr	r3, [r7, #12]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b086      	sub	sp, #24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 80027b2:	f107 020c 	add.w	r2, r7, #12
 80027b6:	2306      	movs	r3, #6
 80027b8:	2122      	movs	r1, #34	; 0x22
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff fc16 	bl	8001fec <lsm6dso_read_reg>
 80027c0:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80027c2:	7b7b      	ldrb	r3, [r7, #13]
 80027c4:	b21a      	sxth	r2, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	021b      	lsls	r3, r3, #8
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	7b3b      	ldrb	r3, [r7, #12]
 80027d8:	b29b      	uxth	r3, r3
 80027da:	4413      	add	r3, r2
 80027dc:	b29b      	uxth	r3, r3
 80027de:	b21a      	sxth	r2, r3
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80027e4:	7bfa      	ldrb	r2, [r7, #15]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	3302      	adds	r3, #2
 80027ea:	b212      	sxth	r2, r2
 80027ec:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	3302      	adds	r3, #2
 80027f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	7bbb      	ldrb	r3, [r7, #14]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	4413      	add	r3, r2
 8002802:	b29a      	uxth	r2, r3
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	3302      	adds	r3, #2
 8002808:	b212      	sxth	r2, r2
 800280a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800280c:	7c7a      	ldrb	r2, [r7, #17]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	3304      	adds	r3, #4
 8002812:	b212      	sxth	r2, r2
 8002814:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	3304      	adds	r3, #4
 800281a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800281e:	b29b      	uxth	r3, r3
 8002820:	021b      	lsls	r3, r3, #8
 8002822:	b29a      	uxth	r2, r3
 8002824:	7c3b      	ldrb	r3, [r7, #16]
 8002826:	b29b      	uxth	r3, r3
 8002828:	4413      	add	r3, r2
 800282a:	b29a      	uxth	r2, r3
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	3304      	adds	r3, #4
 8002830:	b212      	sxth	r2, r2
 8002832:	801a      	strh	r2, [r3, #0]

  return ret;
 8002834:	697b      	ldr	r3, [r7, #20]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b086      	sub	sp, #24
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8002848:	f107 020c 	add.w	r2, r7, #12
 800284c:	2306      	movs	r3, #6
 800284e:	2128      	movs	r1, #40	; 0x28
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7ff fbcb 	bl	8001fec <lsm6dso_read_reg>
 8002856:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002858:	7b7b      	ldrb	r3, [r7, #13]
 800285a:	b21a      	sxth	r2, r3
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002866:	b29b      	uxth	r3, r3
 8002868:	021b      	lsls	r3, r3, #8
 800286a:	b29a      	uxth	r2, r3
 800286c:	7b3b      	ldrb	r3, [r7, #12]
 800286e:	b29b      	uxth	r3, r3
 8002870:	4413      	add	r3, r2
 8002872:	b29b      	uxth	r3, r3
 8002874:	b21a      	sxth	r2, r3
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 800287a:	7bfa      	ldrb	r2, [r7, #15]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	3302      	adds	r3, #2
 8002880:	b212      	sxth	r2, r2
 8002882:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	3302      	adds	r3, #2
 8002888:	f9b3 3000 	ldrsh.w	r3, [r3]
 800288c:	b29b      	uxth	r3, r3
 800288e:	021b      	lsls	r3, r3, #8
 8002890:	b29a      	uxth	r2, r3
 8002892:	7bbb      	ldrb	r3, [r7, #14]
 8002894:	b29b      	uxth	r3, r3
 8002896:	4413      	add	r3, r2
 8002898:	b29a      	uxth	r2, r3
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	3302      	adds	r3, #2
 800289e:	b212      	sxth	r2, r2
 80028a0:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80028a2:	7c7a      	ldrb	r2, [r7, #17]
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	3304      	adds	r3, #4
 80028a8:	b212      	sxth	r2, r2
 80028aa:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	3304      	adds	r3, #4
 80028b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	021b      	lsls	r3, r3, #8
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	7c3b      	ldrb	r3, [r7, #16]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	4413      	add	r3, r2
 80028c0:	b29a      	uxth	r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	3304      	adds	r3, #4
 80028c6:	b212      	sxth	r2, r2
 80028c8:	801a      	strh	r2, [r3, #0]

  return ret;
 80028ca:	697b      	ldr	r3, [r7, #20]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80028e0:	f107 0208 	add.w	r2, r7, #8
 80028e4:	2301      	movs	r3, #1
 80028e6:	2101      	movs	r1, #1
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f7ff fb7f 	bl	8001fec <lsm6dso_read_reg>
 80028ee:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d10f      	bne.n	8002916 <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	b2da      	uxtb	r2, r3
 80028fe:	7a3b      	ldrb	r3, [r7, #8]
 8002900:	f362 1387 	bfi	r3, r2, #6, #2
 8002904:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8002906:	f107 0208 	add.w	r2, r7, #8
 800290a:	2301      	movs	r3, #1
 800290c:	2101      	movs	r1, #1
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f7ff fb84 	bl	800201c <lsm6dso_write_reg>
 8002914:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002916:	68fb      	ldr	r3, [r7, #12]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	460b      	mov	r3, r1
 800292a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800292c:	f107 0208 	add.w	r2, r7, #8
 8002930:	2301      	movs	r3, #1
 8002932:	2112      	movs	r1, #18
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff fb59 	bl	8001fec <lsm6dso_read_reg>
 800293a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10f      	bne.n	8002962 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	b2da      	uxtb	r2, r3
 800294a:	7a3b      	ldrb	r3, [r7, #8]
 800294c:	f362 0382 	bfi	r3, r2, #2, #1
 8002950:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8002952:	f107 0208 	add.w	r2, r7, #8
 8002956:	2301      	movs	r3, #1
 8002958:	2112      	movs	r1, #18
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff fb5e 	bl	800201c <lsm6dso_write_reg>
 8002960:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002962:	68fb      	ldr	r3, [r7, #12]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	460b      	mov	r3, r1
 8002976:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8002978:	f107 020c 	add.w	r2, r7, #12
 800297c:	2301      	movs	r3, #1
 800297e:	2118      	movs	r1, #24
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff fb33 	bl	8001fec <lsm6dso_read_reg>
 8002986:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d111      	bne.n	80029b2 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 800298e:	78fb      	ldrb	r3, [r7, #3]
 8002990:	09db      	lsrs	r3, r3, #7
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	b2da      	uxtb	r2, r3
 800299a:	7b3b      	ldrb	r3, [r7, #12]
 800299c:	f362 0341 	bfi	r3, r2, #1, #1
 80029a0:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80029a2:	f107 020c 	add.w	r2, r7, #12
 80029a6:	2301      	movs	r3, #1
 80029a8:	2118      	movs	r1, #24
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff fb36 	bl	800201c <lsm6dso_write_reg>
 80029b0:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d107      	bne.n	80029c8 <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 80029b8:	f107 0210 	add.w	r2, r7, #16
 80029bc:	2301      	movs	r3, #1
 80029be:	2162      	movs	r1, #98	; 0x62
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7ff fb13 	bl	8001fec <lsm6dso_read_reg>
 80029c6:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d10f      	bne.n	80029ee <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 80029ce:	78fb      	ldrb	r3, [r7, #3]
 80029d0:	f003 0303 	and.w	r3, r3, #3
 80029d4:	b2da      	uxtb	r2, r3
 80029d6:	7c3b      	ldrb	r3, [r7, #16]
 80029d8:	f362 03c4 	bfi	r3, r2, #3, #2
 80029dc:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 80029de:	f107 0210 	add.w	r2, r7, #16
 80029e2:	2301      	movs	r3, #1
 80029e4:	2162      	movs	r1, #98	; 0x62
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff fb18 	bl	800201c <lsm6dso_write_reg>
 80029ec:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 80029ee:	697b      	ldr	r3, [r7, #20]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8002a04:	f107 0208 	add.w	r2, r7, #8
 8002a08:	2301      	movs	r3, #1
 8002a0a:	210a      	movs	r1, #10
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f7ff faed 	bl	8001fec <lsm6dso_read_reg>
 8002a12:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10f      	bne.n	8002a3a <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	f003 0307 	and.w	r3, r3, #7
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	7a3b      	ldrb	r3, [r7, #8]
 8002a24:	f362 0302 	bfi	r3, r2, #0, #3
 8002a28:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8002a2a:	f107 0208 	add.w	r2, r7, #8
 8002a2e:	2301      	movs	r3, #1
 8002a30:	210a      	movs	r1, #10
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff faf2 	bl	800201c <lsm6dso_write_reg>
 8002a38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8002a4e:	2102      	movs	r1, #2
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff ff3f 	bl	80028d4 <lsm6dso_mem_bank_set>
 8002a56:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d106      	bne.n	8002a6c <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8002a5e:	2302      	movs	r3, #2
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	2146      	movs	r1, #70	; 0x46
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff fac1 	bl	8001fec <lsm6dso_read_reg>
 8002a6a:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d104      	bne.n	8002a7c <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8002a72:	2100      	movs	r1, #0
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff ff2d 	bl	80028d4 <lsm6dso_mem_bank_set>
 8002a7a:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8002a92:	2102      	movs	r1, #2
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff ff1d 	bl	80028d4 <lsm6dso_mem_bank_set>
 8002a9a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d107      	bne.n	8002ab2 <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8002aa2:	f107 0208 	add.w	r2, r7, #8
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	215f      	movs	r1, #95	; 0x5f
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f7ff fa9e 	bl	8001fec <lsm6dso_read_reg>
 8002ab0:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d12a      	bne.n	8002b0e <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8002ab8:	7a3b      	ldrb	r3, [r7, #8]
 8002aba:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d81b      	bhi.n	8002afc <lsm6dso_fsm_data_rate_get+0x74>
 8002ac4:	a201      	add	r2, pc, #4	; (adr r2, 8002acc <lsm6dso_fsm_data_rate_get+0x44>)
 8002ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aca:	bf00      	nop
 8002acc:	08002add 	.word	0x08002add
 8002ad0:	08002ae5 	.word	0x08002ae5
 8002ad4:	08002aed 	.word	0x08002aed
 8002ad8:	08002af5 	.word	0x08002af5
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
        break;
 8002ae2:	e00f      	b.n	8002b04 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	701a      	strb	r2, [r3, #0]
        break;
 8002aea:	e00b      	b.n	8002b04 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	2202      	movs	r2, #2
 8002af0:	701a      	strb	r2, [r3, #0]
        break;
 8002af2:	e007      	b.n	8002b04 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	2203      	movs	r2, #3
 8002af8:	701a      	strb	r2, [r3, #0]
        break;
 8002afa:	e003      	b.n	8002b04 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	2200      	movs	r2, #0
 8002b00:	701a      	strb	r2, [r3, #0]
        break;
 8002b02:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8002b04:	2100      	movs	r1, #0
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff fee4 	bl	80028d4 <lsm6dso_mem_bank_set>
 8002b0c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b1c:	f000 ff02 	bl	8003924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b20:	f000 f830 	bl	8002b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b24:	f000 fa4a 	bl	8002fbc <MX_GPIO_Init>
  MX_I2C1_Init();
 8002b28:	f000 f8a2 	bl	8002c70 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002b2c:	f000 fa16 	bl	8002f5c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8002b30:	f000 f93a 	bl	8002da8 <MX_SPI2_Init>
  MX_TIM2_Init();
 8002b34:	f000 f976 	bl	8002e24 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002b38:	f000 f9c2 	bl	8002ec0 <MX_TIM3_Init>
  MX_CRC_Init();
 8002b3c:	f000 f876 	bl	8002c2c <MX_CRC_Init>
  MX_RTC_Init();
 8002b40:	f000 f8d6 	bl	8002cf0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  DRV_Init();
 8002b44:	f7fe fc4e 	bl	80013e4 <DRV_Init>
  Fusion_datas_init();
 8002b48:	f7fe fb22 	bl	8001190 <Fusion_datas_init>

  //INTERRUPTS
  HAL_TIM_Base_Start_IT(&htim3);
 8002b4c:	4809      	ldr	r0, [pc, #36]	; (8002b74 <main+0x5c>)
 8002b4e:	f004 fb33 	bl	80071b8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8002b52:	4809      	ldr	r0, [pc, #36]	; (8002b78 <main+0x60>)
 8002b54:	f004 fb30 	bl	80071b8 <HAL_TIM_Base_Start_IT>

  Init_PID();
 8002b58:	f000 fbb2 	bl	80032c0 <Init_PID>
  Regulator_inputs.consigne = 180;
 8002b5c:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <main+0x64>)
 8002b5e:	4a08      	ldr	r2, [pc, #32]	; (8002b80 <main+0x68>)
 8002b60:	605a      	str	r2, [r3, #4]
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002b62:	2120      	movs	r1, #32
 8002b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b68:	f001 fb3a 	bl	80041e0 <HAL_GPIO_TogglePin>
		HAL_Delay(25);
 8002b6c:	2019      	movs	r0, #25
 8002b6e:	f000 ff55 	bl	8003a1c <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002b72:	e7f6      	b.n	8002b62 <main+0x4a>
 8002b74:	20002004 	.word	0x20002004
 8002b78:	20001fb8 	.word	0x20001fb8
 8002b7c:	200020fc 	.word	0x200020fc
 8002b80:	43340000 	.word	0x43340000

08002b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b096      	sub	sp, #88	; 0x58
 8002b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b8a:	f107 0314 	add.w	r3, r7, #20
 8002b8e:	2244      	movs	r2, #68	; 0x44
 8002b90:	2100      	movs	r1, #0
 8002b92:	4618      	mov	r0, r3
 8002b94:	f010 f992 	bl	8012ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b98:	463b      	mov	r3, r7
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	601a      	str	r2, [r3, #0]
 8002b9e:	605a      	str	r2, [r3, #4]
 8002ba0:	609a      	str	r2, [r3, #8]
 8002ba2:	60da      	str	r2, [r3, #12]
 8002ba4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002ba6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002baa:	f002 f93d 	bl	8004e28 <HAL_PWREx_ControlVoltageScaling>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002bb4:	f000 fa96 	bl	80030e4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002bb8:	230a      	movs	r3, #10
 8002bba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002bbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bc0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002bc2:	2310      	movs	r3, #16
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002bd6:	230a      	movs	r3, #10
 8002bd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002bda:	2307      	movs	r3, #7
 8002bdc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002bde:	2302      	movs	r3, #2
 8002be0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002be2:	2302      	movs	r3, #2
 8002be4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002be6:	f107 0314 	add.w	r3, r7, #20
 8002bea:	4618      	mov	r0, r3
 8002bec:	f002 f972 	bl	8004ed4 <HAL_RCC_OscConfig>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <SystemClock_Config+0x76>
  {
    Error_Handler();
 8002bf6:	f000 fa75 	bl	80030e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002bfa:	230f      	movs	r3, #15
 8002bfc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002c0e:	463b      	mov	r3, r7
 8002c10:	2104      	movs	r1, #4
 8002c12:	4618      	mov	r0, r3
 8002c14:	f002 fd46 	bl	80056a4 <HAL_RCC_ClockConfig>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002c1e:	f000 fa61 	bl	80030e4 <Error_Handler>
  }
}
 8002c22:	bf00      	nop
 8002c24:	3758      	adds	r7, #88	; 0x58
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
	...

08002c2c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002c30:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <MX_CRC_Init+0x3c>)
 8002c32:	4a0e      	ldr	r2, [pc, #56]	; (8002c6c <MX_CRC_Init+0x40>)
 8002c34:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002c36:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <MX_CRC_Init+0x3c>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002c3c:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <MX_CRC_Init+0x3c>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002c42:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <MX_CRC_Init+0x3c>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002c48:	4b07      	ldr	r3, [pc, #28]	; (8002c68 <MX_CRC_Init+0x3c>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <MX_CRC_Init+0x3c>)
 8002c50:	2201      	movs	r2, #1
 8002c52:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002c54:	4804      	ldr	r0, [pc, #16]	; (8002c68 <MX_CRC_Init+0x3c>)
 8002c56:	f001 f817 	bl	8003c88 <HAL_CRC_Init>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002c60:	f000 fa40 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002c64:	bf00      	nop
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20001ec0 	.word	0x20001ec0
 8002c6c:	40023000 	.word	0x40023000

08002c70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002c74:	4b1b      	ldr	r3, [pc, #108]	; (8002ce4 <MX_I2C1_Init+0x74>)
 8002c76:	4a1c      	ldr	r2, [pc, #112]	; (8002ce8 <MX_I2C1_Init+0x78>)
 8002c78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <MX_I2C1_Init+0x74>)
 8002c7c:	4a1b      	ldr	r2, [pc, #108]	; (8002cec <MX_I2C1_Init+0x7c>)
 8002c7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002c80:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <MX_I2C1_Init+0x74>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c86:	4b17      	ldr	r3, [pc, #92]	; (8002ce4 <MX_I2C1_Init+0x74>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c8c:	4b15      	ldr	r3, [pc, #84]	; (8002ce4 <MX_I2C1_Init+0x74>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002c92:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <MX_I2C1_Init+0x74>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002c98:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <MX_I2C1_Init+0x74>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c9e:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <MX_I2C1_Init+0x74>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <MX_I2C1_Init+0x74>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002caa:	480e      	ldr	r0, [pc, #56]	; (8002ce4 <MX_I2C1_Init+0x74>)
 8002cac:	f001 fab2 	bl	8004214 <HAL_I2C_Init>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d001      	beq.n	8002cba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002cb6:	f000 fa15 	bl	80030e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002cba:	2100      	movs	r1, #0
 8002cbc:	4809      	ldr	r0, [pc, #36]	; (8002ce4 <MX_I2C1_Init+0x74>)
 8002cbe:	f002 f80d 	bl	8004cdc <HAL_I2CEx_ConfigAnalogFilter>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002cc8:	f000 fa0c 	bl	80030e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4805      	ldr	r0, [pc, #20]	; (8002ce4 <MX_I2C1_Init+0x74>)
 8002cd0:	f002 f84f 	bl	8004d72 <HAL_I2CEx_ConfigDigitalFilter>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002cda:	f000 fa03 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20001ee4 	.word	0x20001ee4
 8002ce8:	40005400 	.word	0x40005400
 8002cec:	00702991 	.word	0x00702991

08002cf0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002cf6:	1d3b      	adds	r3, r7, #4
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002d04:	2300      	movs	r3, #0
 8002d06:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002d08:	4b25      	ldr	r3, [pc, #148]	; (8002da0 <MX_RTC_Init+0xb0>)
 8002d0a:	4a26      	ldr	r2, [pc, #152]	; (8002da4 <MX_RTC_Init+0xb4>)
 8002d0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002d0e:	4b24      	ldr	r3, [pc, #144]	; (8002da0 <MX_RTC_Init+0xb0>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002d14:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <MX_RTC_Init+0xb0>)
 8002d16:	227f      	movs	r2, #127	; 0x7f
 8002d18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002d1a:	4b21      	ldr	r3, [pc, #132]	; (8002da0 <MX_RTC_Init+0xb0>)
 8002d1c:	22ff      	movs	r2, #255	; 0xff
 8002d1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002d20:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <MX_RTC_Init+0xb0>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002d26:	4b1e      	ldr	r3, [pc, #120]	; (8002da0 <MX_RTC_Init+0xb0>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002d2c:	4b1c      	ldr	r3, [pc, #112]	; (8002da0 <MX_RTC_Init+0xb0>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002d32:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <MX_RTC_Init+0xb0>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002d38:	4819      	ldr	r0, [pc, #100]	; (8002da0 <MX_RTC_Init+0xb0>)
 8002d3a:	f003 fb75 	bl	8006428 <HAL_RTC_Init>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002d44:	f000 f9ce 	bl	80030e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002d5c:	1d3b      	adds	r3, r7, #4
 8002d5e:	2201      	movs	r2, #1
 8002d60:	4619      	mov	r1, r3
 8002d62:	480f      	ldr	r0, [pc, #60]	; (8002da0 <MX_RTC_Init+0xb0>)
 8002d64:	f003 fbdb 	bl	800651e <HAL_RTC_SetTime>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002d6e:	f000 f9b9 	bl	80030e4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002d72:	2301      	movs	r3, #1
 8002d74:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002d76:	2301      	movs	r3, #1
 8002d78:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002d82:	463b      	mov	r3, r7
 8002d84:	2201      	movs	r2, #1
 8002d86:	4619      	mov	r1, r3
 8002d88:	4805      	ldr	r0, [pc, #20]	; (8002da0 <MX_RTC_Init+0xb0>)
 8002d8a:	f003 fc65 	bl	8006658 <HAL_RTC_SetDate>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8002d94:	f000 f9a6 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002d98:	bf00      	nop
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	20001f30 	.word	0x20001f30
 8002da4:	40002800 	.word	0x40002800

08002da8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002dac:	4b1b      	ldr	r3, [pc, #108]	; (8002e1c <MX_SPI2_Init+0x74>)
 8002dae:	4a1c      	ldr	r2, [pc, #112]	; (8002e20 <MX_SPI2_Init+0x78>)
 8002db0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002db2:	4b1a      	ldr	r3, [pc, #104]	; (8002e1c <MX_SPI2_Init+0x74>)
 8002db4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002db8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002dba:	4b18      	ldr	r3, [pc, #96]	; (8002e1c <MX_SPI2_Init+0x74>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002dc0:	4b16      	ldr	r3, [pc, #88]	; (8002e1c <MX_SPI2_Init+0x74>)
 8002dc2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002dc6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002dc8:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <MX_SPI2_Init+0x74>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002dce:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <MX_SPI2_Init+0x74>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002dd4:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <MX_SPI2_Init+0x74>)
 8002dd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dda:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002ddc:	4b0f      	ldr	r3, [pc, #60]	; (8002e1c <MX_SPI2_Init+0x74>)
 8002dde:	2228      	movs	r2, #40	; 0x28
 8002de0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002de2:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <MX_SPI2_Init+0x74>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002de8:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <MX_SPI2_Init+0x74>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002dee:	4b0b      	ldr	r3, [pc, #44]	; (8002e1c <MX_SPI2_Init+0x74>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <MX_SPI2_Init+0x74>)
 8002df6:	2207      	movs	r2, #7
 8002df8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002dfa:	4b08      	ldr	r3, [pc, #32]	; (8002e1c <MX_SPI2_Init+0x74>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002e00:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <MX_SPI2_Init+0x74>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002e06:	4805      	ldr	r0, [pc, #20]	; (8002e1c <MX_SPI2_Init+0x74>)
 8002e08:	f003 fd64 	bl	80068d4 <HAL_SPI_Init>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002e12:	f000 f967 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20001f54 	.word	0x20001f54
 8002e20:	40003800 	.word	0x40003800

08002e24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e2a:	f107 0310 	add.w	r3, r7, #16
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	605a      	str	r2, [r3, #4]
 8002e34:	609a      	str	r2, [r3, #8]
 8002e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	605a      	str	r2, [r3, #4]
 8002e40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e42:	4b1e      	ldr	r3, [pc, #120]	; (8002ebc <MX_TIM2_Init+0x98>)
 8002e44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8002e4a:	4b1c      	ldr	r3, [pc, #112]	; (8002ebc <MX_TIM2_Init+0x98>)
 8002e4c:	224f      	movs	r2, #79	; 0x4f
 8002e4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e50:	4b1a      	ldr	r3, [pc, #104]	; (8002ebc <MX_TIM2_Init+0x98>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8002e56:	4b19      	ldr	r3, [pc, #100]	; (8002ebc <MX_TIM2_Init+0x98>)
 8002e58:	f242 720f 	movw	r2, #9999	; 0x270f
 8002e5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e5e:	4b17      	ldr	r3, [pc, #92]	; (8002ebc <MX_TIM2_Init+0x98>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e64:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <MX_TIM2_Init+0x98>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e6a:	4814      	ldr	r0, [pc, #80]	; (8002ebc <MX_TIM2_Init+0x98>)
 8002e6c:	f004 f94c 	bl	8007108 <HAL_TIM_Base_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002e76:	f000 f935 	bl	80030e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e80:	f107 0310 	add.w	r3, r7, #16
 8002e84:	4619      	mov	r1, r3
 8002e86:	480d      	ldr	r0, [pc, #52]	; (8002ebc <MX_TIM2_Init+0x98>)
 8002e88:	f004 fb25 	bl	80074d6 <HAL_TIM_ConfigClockSource>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002e92:	f000 f927 	bl	80030e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e96:	2300      	movs	r3, #0
 8002e98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e9e:	1d3b      	adds	r3, r7, #4
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4806      	ldr	r0, [pc, #24]	; (8002ebc <MX_TIM2_Init+0x98>)
 8002ea4:	f004 fd46 	bl	8007934 <HAL_TIMEx_MasterConfigSynchronization>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002eae:	f000 f919 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002eb2:	bf00      	nop
 8002eb4:	3720      	adds	r7, #32
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	20001fb8 	.word	0x20001fb8

08002ec0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ec6:	f107 0310 	add.w	r3, r7, #16
 8002eca:	2200      	movs	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	605a      	str	r2, [r3, #4]
 8002ed0:	609a      	str	r2, [r3, #8]
 8002ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ed4:	1d3b      	adds	r3, r7, #4
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	605a      	str	r2, [r3, #4]
 8002edc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ede:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <MX_TIM3_Init+0x94>)
 8002ee0:	4a1d      	ldr	r2, [pc, #116]	; (8002f58 <MX_TIM3_Init+0x98>)
 8002ee2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8002ee4:	4b1b      	ldr	r3, [pc, #108]	; (8002f54 <MX_TIM3_Init+0x94>)
 8002ee6:	2207      	movs	r2, #7
 8002ee8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eea:	4b1a      	ldr	r3, [pc, #104]	; (8002f54 <MX_TIM3_Init+0x94>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002ef0:	4b18      	ldr	r3, [pc, #96]	; (8002f54 <MX_TIM3_Init+0x94>)
 8002ef2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ef6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ef8:	4b16      	ldr	r3, [pc, #88]	; (8002f54 <MX_TIM3_Init+0x94>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002efe:	4b15      	ldr	r3, [pc, #84]	; (8002f54 <MX_TIM3_Init+0x94>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002f04:	4813      	ldr	r0, [pc, #76]	; (8002f54 <MX_TIM3_Init+0x94>)
 8002f06:	f004 f8ff 	bl	8007108 <HAL_TIM_Base_Init>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002f10:	f000 f8e8 	bl	80030e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002f1a:	f107 0310 	add.w	r3, r7, #16
 8002f1e:	4619      	mov	r1, r3
 8002f20:	480c      	ldr	r0, [pc, #48]	; (8002f54 <MX_TIM3_Init+0x94>)
 8002f22:	f004 fad8 	bl	80074d6 <HAL_TIM_ConfigClockSource>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002f2c:	f000 f8da 	bl	80030e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f30:	2300      	movs	r3, #0
 8002f32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f34:	2300      	movs	r3, #0
 8002f36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002f38:	1d3b      	adds	r3, r7, #4
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4805      	ldr	r0, [pc, #20]	; (8002f54 <MX_TIM3_Init+0x94>)
 8002f3e:	f004 fcf9 	bl	8007934 <HAL_TIMEx_MasterConfigSynchronization>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002f48:	f000 f8cc 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002f4c:	bf00      	nop
 8002f4e:	3720      	adds	r7, #32
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20002004 	.word	0x20002004
 8002f58:	40000400 	.word	0x40000400

08002f5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f60:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002f62:	4a15      	ldr	r2, [pc, #84]	; (8002fb8 <MX_USART2_UART_Init+0x5c>)
 8002f64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f66:	4b13      	ldr	r3, [pc, #76]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002f68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f6e:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f74:	4b0f      	ldr	r3, [pc, #60]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f7a:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f80:	4b0c      	ldr	r3, [pc, #48]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002f82:	220c      	movs	r2, #12
 8002f84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f86:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f92:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f98:	4b06      	ldr	r3, [pc, #24]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f9e:	4805      	ldr	r0, [pc, #20]	; (8002fb4 <MX_USART2_UART_Init+0x58>)
 8002fa0:	f004 fd6e 	bl	8007a80 <HAL_UART_Init>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002faa:	f000 f89b 	bl	80030e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	20002050 	.word	0x20002050
 8002fb8:	40004400 	.word	0x40004400

08002fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b08a      	sub	sp, #40	; 0x28
 8002fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc2:	f107 0314 	add.w	r3, r7, #20
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	605a      	str	r2, [r3, #4]
 8002fcc:	609a      	str	r2, [r3, #8]
 8002fce:	60da      	str	r2, [r3, #12]
 8002fd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fd2:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <MX_GPIO_Init+0x11c>)
 8002fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd6:	4a40      	ldr	r2, [pc, #256]	; (80030d8 <MX_GPIO_Init+0x11c>)
 8002fd8:	f043 0304 	orr.w	r3, r3, #4
 8002fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fde:	4b3e      	ldr	r3, [pc, #248]	; (80030d8 <MX_GPIO_Init+0x11c>)
 8002fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002fea:	4b3b      	ldr	r3, [pc, #236]	; (80030d8 <MX_GPIO_Init+0x11c>)
 8002fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fee:	4a3a      	ldr	r2, [pc, #232]	; (80030d8 <MX_GPIO_Init+0x11c>)
 8002ff0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ff6:	4b38      	ldr	r3, [pc, #224]	; (80030d8 <MX_GPIO_Init+0x11c>)
 8002ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003002:	4b35      	ldr	r3, [pc, #212]	; (80030d8 <MX_GPIO_Init+0x11c>)
 8003004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003006:	4a34      	ldr	r2, [pc, #208]	; (80030d8 <MX_GPIO_Init+0x11c>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800300e:	4b32      	ldr	r3, [pc, #200]	; (80030d8 <MX_GPIO_Init+0x11c>)
 8003010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800301a:	4b2f      	ldr	r3, [pc, #188]	; (80030d8 <MX_GPIO_Init+0x11c>)
 800301c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800301e:	4a2e      	ldr	r2, [pc, #184]	; (80030d8 <MX_GPIO_Init+0x11c>)
 8003020:	f043 0302 	orr.w	r3, r3, #2
 8003024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003026:	4b2c      	ldr	r3, [pc, #176]	; (80030d8 <MX_GPIO_Init+0x11c>)
 8003028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	607b      	str	r3, [r7, #4]
 8003030:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|nSleep_Pin, GPIO_PIN_RESET);
 8003032:	2200      	movs	r2, #0
 8003034:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8003038:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800303c:	f001 f8b8 	bl	80041b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8003040:	2200      	movs	r2, #0
 8003042:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003046:	4825      	ldr	r0, [pc, #148]	; (80030dc <MX_GPIO_Init+0x120>)
 8003048:	f001 f8b2 	bl	80041b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWM_sync_Pin|PWM_timer_Pin, GPIO_PIN_RESET);
 800304c:	2200      	movs	r2, #0
 800304e:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8003052:	4823      	ldr	r0, [pc, #140]	; (80030e0 <MX_GPIO_Init+0x124>)
 8003054:	f001 f8ac 	bl	80041b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800305c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800305e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003064:	2300      	movs	r3, #0
 8003066:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003068:	f107 0314 	add.w	r3, r7, #20
 800306c:	4619      	mov	r1, r3
 800306e:	481c      	ldr	r0, [pc, #112]	; (80030e0 <MX_GPIO_Init+0x124>)
 8003070:	f000 fef4 	bl	8003e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin nSleep_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|nSleep_Pin;
 8003074:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8003078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800307a:	2301      	movs	r3, #1
 800307c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	2300      	movs	r3, #0
 8003080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003082:	2300      	movs	r3, #0
 8003084:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003086:	f107 0314 	add.w	r3, r7, #20
 800308a:	4619      	mov	r1, r3
 800308c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003090:	f000 fee4 	bl	8003e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SS_Pin */
  GPIO_InitStruct.Pin = SPI2_SS_Pin;
 8003094:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800309a:	2301      	movs	r3, #1
 800309c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800309e:	2300      	movs	r3, #0
 80030a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030a2:	2300      	movs	r3, #0
 80030a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_SS_GPIO_Port, &GPIO_InitStruct);
 80030a6:	f107 0314 	add.w	r3, r7, #20
 80030aa:	4619      	mov	r1, r3
 80030ac:	480b      	ldr	r0, [pc, #44]	; (80030dc <MX_GPIO_Init+0x120>)
 80030ae:	f000 fed5 	bl	8003e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM_sync_Pin PWM_timer_Pin */
  GPIO_InitStruct.Pin = PWM_sync_Pin|PWM_timer_Pin;
 80030b2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80030b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030b8:	2301      	movs	r3, #1
 80030ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030bc:	2300      	movs	r3, #0
 80030be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030c0:	2300      	movs	r3, #0
 80030c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030c4:	f107 0314 	add.w	r3, r7, #20
 80030c8:	4619      	mov	r1, r3
 80030ca:	4805      	ldr	r0, [pc, #20]	; (80030e0 <MX_GPIO_Init+0x124>)
 80030cc:	f000 fec6 	bl	8003e5c <HAL_GPIO_Init>

}
 80030d0:	bf00      	nop
 80030d2:	3728      	adds	r7, #40	; 0x28
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40021000 	.word	0x40021000
 80030dc:	48000400 	.word	0x48000400
 80030e0:	48000800 	.word	0x48000800

080030e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030e8:	b672      	cpsid	i
}
 80030ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80030ec:	e7fe      	b.n	80030ec <Error_Handler+0x8>

080030ee <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  Orientation[0] = 's';
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2273      	movs	r2, #115	; 0x73
 80030fa:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3301      	adds	r3, #1
 8003100:	2265      	movs	r2, #101	; 0x65
 8003102:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3302      	adds	r3, #2
 8003108:	2275      	movs	r2, #117	; 0x75
 800310a:	701a      	strb	r2, [r3, #0]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  Orientation[0] = 's';
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2273      	movs	r2, #115	; 0x73
 8003124:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3301      	adds	r3, #1
 800312a:	2265      	movs	r2, #101	; 0x65
 800312c:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3302      	adds	r3, #2
 8003132:	2275      	movs	r2, #117	; 0x75
 8003134:	701a      	strb	r2, [r3, #0]
}
 8003136:	bf00      	nop
 8003138:	370c      	adds	r7, #12
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <pwm_sine>:
#define pas_deg sizeof phase_A / sizeof phase_A[0]



void pwm_sine(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af02      	add	r7, sp, #8
	if(cpt_pwm >= comand_speed_period)   				//correspond to 2800us (28*100us)
 800314a:	4b52      	ldr	r3, [pc, #328]	; (8003294 <pwm_sine+0x150>)
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	4b52      	ldr	r3, [pc, #328]	; (8003298 <pwm_sine+0x154>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	429a      	cmp	r2, r3
 8003154:	f0c0 8095 	bcc.w	8003282 <pwm_sine+0x13e>
	{
		cpt_pwm =0;//reset
 8003158:	4b4e      	ldr	r3, [pc, #312]	; (8003294 <pwm_sine+0x150>)
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]

		//Set PWM duty_cycle A   (reset = 0x0000 )
		//fill TX buffer for SPI--------------------------------------------
		buf_SPI_TX[0] = 0x00;               					//cmd
 800315e:	4b4f      	ldr	r3, [pc, #316]	; (800329c <pwm_sine+0x158>)
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
		buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_A_DUTY <<3);  	//reg adr + cmd
 8003164:	4b4d      	ldr	r3, [pc, #308]	; (800329c <pwm_sine+0x158>)
 8003166:	22c8      	movs	r2, #200	; 0xc8
 8003168:	705a      	strb	r2, [r3, #1]
		buf_SPI_TX[2] = 0x00;				//data (si read osf)
 800316a:	4b4c      	ldr	r3, [pc, #304]	; (800329c <pwm_sine+0x158>)
 800316c:	2200      	movs	r2, #0
 800316e:	709a      	strb	r2, [r3, #2]
		buf_SPI_TX[3] = phase_A[cpt_deg];									//data (si read osf)
 8003170:	4b4b      	ldr	r3, [pc, #300]	; (80032a0 <pwm_sine+0x15c>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a4b      	ldr	r2, [pc, #300]	; (80032a4 <pwm_sine+0x160>)
 8003176:	5cd2      	ldrb	r2, [r2, r3]
 8003178:	4b48      	ldr	r3, [pc, #288]	; (800329c <pwm_sine+0x158>)
 800317a:	70da      	strb	r2, [r3, #3]
		//Send/Read Datas---------------------------------------------------
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800317c:	2200      	movs	r2, #0
 800317e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003182:	4849      	ldr	r0, [pc, #292]	; (80032a8 <pwm_sine+0x164>)
 8003184:	f001 f814 	bl	80041b0 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8003188:	f04f 33ff 	mov.w	r3, #4294967295
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	2304      	movs	r3, #4
 8003190:	4a46      	ldr	r2, [pc, #280]	; (80032ac <pwm_sine+0x168>)
 8003192:	4942      	ldr	r1, [pc, #264]	; (800329c <pwm_sine+0x158>)
 8003194:	4846      	ldr	r0, [pc, #280]	; (80032b0 <pwm_sine+0x16c>)
 8003196:	f003 fc40 	bl	8006a1a <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 800319a:	2201      	movs	r2, #1
 800319c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031a0:	4841      	ldr	r0, [pc, #260]	; (80032a8 <pwm_sine+0x164>)
 80031a2:	f001 f805 	bl	80041b0 <HAL_GPIO_WritePin>
		//Set PWM duty_cycle B   (reset = 0x0000 )
		//fill TX buffer for SPI--------------------------------------------
		buf_SPI_TX[0] = 0x00;               					//cmd
 80031a6:	4b3d      	ldr	r3, [pc, #244]	; (800329c <pwm_sine+0x158>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	701a      	strb	r2, [r3, #0]
		buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_B_DUTY <<3);  	//reg adr + cmd
 80031ac:	4b3b      	ldr	r3, [pc, #236]	; (800329c <pwm_sine+0x158>)
 80031ae:	22d0      	movs	r2, #208	; 0xd0
 80031b0:	705a      	strb	r2, [r3, #1]
		buf_SPI_TX[2] = 0x00;				//data (si read osf)
 80031b2:	4b3a      	ldr	r3, [pc, #232]	; (800329c <pwm_sine+0x158>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	709a      	strb	r2, [r3, #2]
		buf_SPI_TX[3] = phase_B[cpt_deg];									//data (si read osf)
 80031b8:	4b39      	ldr	r3, [pc, #228]	; (80032a0 <pwm_sine+0x15c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a3d      	ldr	r2, [pc, #244]	; (80032b4 <pwm_sine+0x170>)
 80031be:	5cd2      	ldrb	r2, [r2, r3]
 80031c0:	4b36      	ldr	r3, [pc, #216]	; (800329c <pwm_sine+0x158>)
 80031c2:	70da      	strb	r2, [r3, #3]
		//Send/Read Datas---------------------------------------------------
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80031c4:	2200      	movs	r2, #0
 80031c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031ca:	4837      	ldr	r0, [pc, #220]	; (80032a8 <pwm_sine+0x164>)
 80031cc:	f000 fff0 	bl	80041b0 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80031d0:	f04f 33ff 	mov.w	r3, #4294967295
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	2304      	movs	r3, #4
 80031d8:	4a34      	ldr	r2, [pc, #208]	; (80032ac <pwm_sine+0x168>)
 80031da:	4930      	ldr	r1, [pc, #192]	; (800329c <pwm_sine+0x158>)
 80031dc:	4834      	ldr	r0, [pc, #208]	; (80032b0 <pwm_sine+0x16c>)
 80031de:	f003 fc1c 	bl	8006a1a <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80031e2:	2201      	movs	r2, #1
 80031e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031e8:	482f      	ldr	r0, [pc, #188]	; (80032a8 <pwm_sine+0x164>)
 80031ea:	f000 ffe1 	bl	80041b0 <HAL_GPIO_WritePin>

		//Set PWM duty_cycle C   (reset = 0x0000 )
		//fill TX buffer for SPI--------------------------------------------
		buf_SPI_TX[0] = 0x00;               					//cmd
 80031ee:	4b2b      	ldr	r3, [pc, #172]	; (800329c <pwm_sine+0x158>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	701a      	strb	r2, [r3, #0]
		buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_C_DUTY <<3);  	//reg adr + cmd
 80031f4:	4b29      	ldr	r3, [pc, #164]	; (800329c <pwm_sine+0x158>)
 80031f6:	22d8      	movs	r2, #216	; 0xd8
 80031f8:	705a      	strb	r2, [r3, #1]
		buf_SPI_TX[2] = 0x00;				//data (si read osf)
 80031fa:	4b28      	ldr	r3, [pc, #160]	; (800329c <pwm_sine+0x158>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	709a      	strb	r2, [r3, #2]
		buf_SPI_TX[3] = phase_C[cpt_deg];									//data (si read osf)
 8003200:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <pwm_sine+0x15c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a2c      	ldr	r2, [pc, #176]	; (80032b8 <pwm_sine+0x174>)
 8003206:	5cd2      	ldrb	r2, [r2, r3]
 8003208:	4b24      	ldr	r3, [pc, #144]	; (800329c <pwm_sine+0x158>)
 800320a:	70da      	strb	r2, [r3, #3]
		//Send/Read Datas---------------------------------------------------
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800320c:	2200      	movs	r2, #0
 800320e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003212:	4825      	ldr	r0, [pc, #148]	; (80032a8 <pwm_sine+0x164>)
 8003214:	f000 ffcc 	bl	80041b0 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8003218:	f04f 33ff 	mov.w	r3, #4294967295
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	2304      	movs	r3, #4
 8003220:	4a22      	ldr	r2, [pc, #136]	; (80032ac <pwm_sine+0x168>)
 8003222:	491e      	ldr	r1, [pc, #120]	; (800329c <pwm_sine+0x158>)
 8003224:	4822      	ldr	r0, [pc, #136]	; (80032b0 <pwm_sine+0x16c>)
 8003226:	f003 fbf8 	bl	8006a1a <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 800322a:	2201      	movs	r2, #1
 800322c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003230:	481d      	ldr	r0, [pc, #116]	; (80032a8 <pwm_sine+0x164>)
 8003232:	f000 ffbd 	bl	80041b0 <HAL_GPIO_WritePin>


		//if button not pressed: clockwise else counter clockwise
		if(command_direction == 1)
 8003236:	4b21      	ldr	r3, [pc, #132]	; (80032bc <pwm_sine+0x178>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2b01      	cmp	r3, #1
 800323c:	d10e      	bne.n	800325c <pwm_sine+0x118>
		{
			//clockwise direction
			if(cpt_deg>=pas_deg-1)			//360°
 800323e:	4b18      	ldr	r3, [pc, #96]	; (80032a0 <pwm_sine+0x15c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8003246:	d903      	bls.n	8003250 <pwm_sine+0x10c>
			{
				cpt_deg =0;					//reset cpt °
 8003248:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <pwm_sine+0x15c>)
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
	else
	{
		cpt_pwm++;
	}
	//HAL_GPIO_TogglePin(PWM_timer_GPIO_Port, PWM_timer_Pin);
}
 800324e:	e01d      	b.n	800328c <pwm_sine+0x148>
				cpt_deg++;					//+1°
 8003250:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <pwm_sine+0x15c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3301      	adds	r3, #1
 8003256:	4a12      	ldr	r2, [pc, #72]	; (80032a0 <pwm_sine+0x15c>)
 8003258:	6013      	str	r3, [r2, #0]
}
 800325a:	e017      	b.n	800328c <pwm_sine+0x148>
		else if(command_direction == 0)
 800325c:	4b17      	ldr	r3, [pc, #92]	; (80032bc <pwm_sine+0x178>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d113      	bne.n	800328c <pwm_sine+0x148>
			if(cpt_deg<=0)					//0°
 8003264:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <pwm_sine+0x15c>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d104      	bne.n	8003276 <pwm_sine+0x132>
				cpt_deg = pas_deg-1;		//reset cpt °
 800326c:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <pwm_sine+0x15c>)
 800326e:	f240 1267 	movw	r2, #359	; 0x167
 8003272:	601a      	str	r2, [r3, #0]
}
 8003274:	e00a      	b.n	800328c <pwm_sine+0x148>
				cpt_deg--;					//-1°
 8003276:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <pwm_sine+0x15c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3b01      	subs	r3, #1
 800327c:	4a08      	ldr	r2, [pc, #32]	; (80032a0 <pwm_sine+0x15c>)
 800327e:	6013      	str	r3, [r2, #0]
}
 8003280:	e004      	b.n	800328c <pwm_sine+0x148>
		cpt_pwm++;
 8003282:	4b04      	ldr	r3, [pc, #16]	; (8003294 <pwm_sine+0x150>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3301      	adds	r3, #1
 8003288:	4a02      	ldr	r2, [pc, #8]	; (8003294 <pwm_sine+0x150>)
 800328a:	6013      	str	r3, [r2, #0]
}
 800328c:	bf00      	nop
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	20002104 	.word	0x20002104
 8003298:	200011c8 	.word	0x200011c8
 800329c:	200020d4 	.word	0x200020d4
 80032a0:	20002108 	.word	0x20002108
 80032a4:	200011d0 	.word	0x200011d0
 80032a8:	48000400 	.word	0x48000400
 80032ac:	200020e8 	.word	0x200020e8
 80032b0:	20001f54 	.word	0x20001f54
 80032b4:	20001338 	.word	0x20001338
 80032b8:	200014a0 	.word	0x200014a0
 80032bc:	200011cc 	.word	0x200011cc

080032c0 <Init_PID>:
REGULATOR_commands 		commands;
REGULATOR_P_controls 	P_param;
REGULATOR_PI_controls 	PI_param;
REGULATOR_PID_controls 	PID_param;

void Init_PID(void){
 80032c0:	b480      	push	{r7}
 80032c2:	af00      	add	r7, sp, #0
	PID_param.last_error =0;
 80032c4:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <Init_PID+0x18>)
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	609a      	str	r2, [r3, #8]
}
 80032cc:	bf00      	nop
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	20002114 	.word	0x20002114
 80032dc:	00000000 	.word	0x00000000

080032e0 <PID>:
}




void PID(void){
 80032e0:	b5b0      	push	{r4, r5, r7, lr}
 80032e2:	af00      	add	r7, sp, #0
	//Compute PID control (commande = Kp * erreur + Ki * somme_erreurs + Kd * (erreur - erreur_précédente)
	PID_param.error = Regulator_inputs.consigne - Regulator_inputs.mesure ;								//Compute error
 80032e4:	4b60      	ldr	r3, [pc, #384]	; (8003468 <PID+0x188>)
 80032e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80032ea:	4b5f      	ldr	r3, [pc, #380]	; (8003468 <PID+0x188>)
 80032ec:	edd3 7a00 	vldr	s15, [r3]
 80032f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032f4:	4b5d      	ldr	r3, [pc, #372]	; (800346c <PID+0x18c>)
 80032f6:	edc3 7a00 	vstr	s15, [r3]
	PID_param.error_sum += PID_param.error;
 80032fa:	4b5c      	ldr	r3, [pc, #368]	; (800346c <PID+0x18c>)
 80032fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8003300:	4b5a      	ldr	r3, [pc, #360]	; (800346c <PID+0x18c>)
 8003302:	edd3 7a00 	vldr	s15, [r3]
 8003306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800330a:	4b58      	ldr	r3, [pc, #352]	; (800346c <PID+0x18c>)
 800330c:	edc3 7a01 	vstr	s15, [r3, #4]
	PID_param.error_variation = PID_param.error - PID_param.last_error;
 8003310:	4b56      	ldr	r3, [pc, #344]	; (800346c <PID+0x18c>)
 8003312:	ed93 7a00 	vldr	s14, [r3]
 8003316:	4b55      	ldr	r3, [pc, #340]	; (800346c <PID+0x18c>)
 8003318:	edd3 7a02 	vldr	s15, [r3, #8]
 800331c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003320:	4b52      	ldr	r3, [pc, #328]	; (800346c <PID+0x18c>)
 8003322:	edc3 7a04 	vstr	s15, [r3, #16]
	PID_param.command = Kp * PID_param.error + Ki * PID_param.error_sum + Kd * PID_param.error_variation;									//Compute PID command
 8003326:	4b51      	ldr	r3, [pc, #324]	; (800346c <PID+0x18c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4618      	mov	r0, r3
 800332c:	f7fd f8b0 	bl	8000490 <__aeabi_f2d>
 8003330:	a347      	add	r3, pc, #284	; (adr r3, 8003450 <PID+0x170>)
 8003332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003336:	f7fd f903 	bl	8000540 <__aeabi_dmul>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	4614      	mov	r4, r2
 8003340:	461d      	mov	r5, r3
 8003342:	4b4a      	ldr	r3, [pc, #296]	; (800346c <PID+0x18c>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	4618      	mov	r0, r3
 8003348:	f7fd f8a2 	bl	8000490 <__aeabi_f2d>
 800334c:	a342      	add	r3, pc, #264	; (adr r3, 8003458 <PID+0x178>)
 800334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003352:	f7fd f8f5 	bl	8000540 <__aeabi_dmul>
 8003356:	4602      	mov	r2, r0
 8003358:	460b      	mov	r3, r1
 800335a:	4620      	mov	r0, r4
 800335c:	4629      	mov	r1, r5
 800335e:	f7fc ff39 	bl	80001d4 <__adddf3>
 8003362:	4602      	mov	r2, r0
 8003364:	460b      	mov	r3, r1
 8003366:	4614      	mov	r4, r2
 8003368:	461d      	mov	r5, r3
 800336a:	4b40      	ldr	r3, [pc, #256]	; (800346c <PID+0x18c>)
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	4618      	mov	r0, r3
 8003370:	f7fd f88e 	bl	8000490 <__aeabi_f2d>
 8003374:	a33a      	add	r3, pc, #232	; (adr r3, 8003460 <PID+0x180>)
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	f7fd f8e1 	bl	8000540 <__aeabi_dmul>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	4620      	mov	r0, r4
 8003384:	4629      	mov	r1, r5
 8003386:	f7fc ff25 	bl	80001d4 <__adddf3>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	4610      	mov	r0, r2
 8003390:	4619      	mov	r1, r3
 8003392:	f7fd fbcd 	bl	8000b30 <__aeabi_d2f>
 8003396:	4603      	mov	r3, r0
 8003398:	4a34      	ldr	r2, [pc, #208]	; (800346c <PID+0x18c>)
 800339a:	60d3      	str	r3, [r2, #12]
	PID_param.last_error = PID_param.error;
 800339c:	4b33      	ldr	r3, [pc, #204]	; (800346c <PID+0x18c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a32      	ldr	r2, [pc, #200]	; (800346c <PID+0x18c>)
 80033a2:	6093      	str	r3, [r2, #8]

	//Invert command because control with a period, not a speed
	if(PID_param.command ==0){										//Cannot be divided by zero (if completly stable)
 80033a4:	4b31      	ldr	r3, [pc, #196]	; (800346c <PID+0x18c>)
 80033a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80033aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80033ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b2:	d103      	bne.n	80033bc <PID+0xdc>
		PID_param.period = max_period;
 80033b4:	4b2d      	ldr	r3, [pc, #180]	; (800346c <PID+0x18c>)
 80033b6:	4a2e      	ldr	r2, [pc, #184]	; (8003470 <PID+0x190>)
 80033b8:	615a      	str	r2, [r3, #20]
 80033ba:	e009      	b.n	80033d0 <PID+0xf0>
	}
	else{
		PID_param.period = (1/PID_param.command) ;						//invert command give period
 80033bc:	4b2b      	ldr	r3, [pc, #172]	; (800346c <PID+0x18c>)
 80033be:	ed93 7a03 	vldr	s14, [r3, #12]
 80033c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033ca:	4b28      	ldr	r3, [pc, #160]	; (800346c <PID+0x18c>)
 80033cc:	edc3 7a05 	vstr	s15, [r3, #20]
	}

	//Check for MIN and MAX period exceeding
	if(abs(PID_param.period)<min_period){
 80033d0:	4b26      	ldr	r3, [pc, #152]	; (800346c <PID+0x18c>)
 80033d2:	edd3 7a05 	vldr	s15, [r3, #20]
 80033d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033da:	ee17 3a90 	vmov	r3, s15
 80033de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e2:	db0c      	blt.n	80033fe <PID+0x11e>
 80033e4:	4b21      	ldr	r3, [pc, #132]	; (800346c <PID+0x18c>)
 80033e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80033ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033ee:	ee17 3a90 	vmov	r3, s15
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	dc03      	bgt.n	80033fe <PID+0x11e>
		PID_param.period =min_period;
 80033f6:	4b1d      	ldr	r3, [pc, #116]	; (800346c <PID+0x18c>)
 80033f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033fc:	615a      	str	r2, [r3, #20]
	else if(abs(PID_param.period) >max_period){
		PID_param.period =max_period;
	}

	//Take absolute value of period
	commands.speed_period = (uint32_t) abs(PID_param.period);
 80033fe:	4b1b      	ldr	r3, [pc, #108]	; (800346c <PID+0x18c>)
 8003400:	edd3 7a05 	vldr	s15, [r3, #20]
 8003404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003408:	ee17 3a90 	vmov	r3, s15
 800340c:	2b00      	cmp	r3, #0
 800340e:	bfb8      	it	lt
 8003410:	425b      	neglt	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	4b17      	ldr	r3, [pc, #92]	; (8003474 <PID+0x194>)
 8003416:	601a      	str	r2, [r3, #0]

	//Give direction of motor
	if(PID_param.command >0){
 8003418:	4b14      	ldr	r3, [pc, #80]	; (800346c <PID+0x18c>)
 800341a:	edd3 7a03 	vldr	s15, [r3, #12]
 800341e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003426:	dd03      	ble.n	8003430 <PID+0x150>
		commands.speed_direction =1; 								//0 = Counter Clockwise
 8003428:	4b12      	ldr	r3, [pc, #72]	; (8003474 <PID+0x194>)
 800342a:	2201      	movs	r2, #1
 800342c:	605a      	str	r2, [r3, #4]
 800342e:	e002      	b.n	8003436 <PID+0x156>
	}
	else{
		commands.speed_direction =0;								//1 = Clockwise
 8003430:	4b10      	ldr	r3, [pc, #64]	; (8003474 <PID+0x194>)
 8003432:	2200      	movs	r2, #0
 8003434:	605a      	str	r2, [r3, #4]
	}

	//Copy values to global var
	comand_speed_period = commands.speed_period;
 8003436:	4b0f      	ldr	r3, [pc, #60]	; (8003474 <PID+0x194>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a0f      	ldr	r2, [pc, #60]	; (8003478 <PID+0x198>)
 800343c:	6013      	str	r3, [r2, #0]
	command_direction = commands.speed_direction;
 800343e:	4b0d      	ldr	r3, [pc, #52]	; (8003474 <PID+0x194>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	4a0e      	ldr	r2, [pc, #56]	; (800347c <PID+0x19c>)
 8003444:	6013      	str	r3, [r2, #0]
}
 8003446:	bf00      	nop
 8003448:	bdb0      	pop	{r4, r5, r7, pc}
 800344a:	bf00      	nop
 800344c:	f3af 8000 	nop.w
 8003450:	eb851eb8 	.word	0xeb851eb8
 8003454:	3f9eb851 	.word	0x3f9eb851
 8003458:	9abcaf48 	.word	0x9abcaf48
 800345c:	3e7ad7f2 	.word	0x3e7ad7f2
 8003460:	d2f1a9fc 	.word	0xd2f1a9fc
 8003464:	3f50624d 	.word	0x3f50624d
 8003468:	200020fc 	.word	0x200020fc
 800346c:	20002114 	.word	0x20002114
 8003470:	51ba43b7 	.word	0x51ba43b7
 8003474:	2000210c 	.word	0x2000210c
 8003478:	200011c8 	.word	0x200011c8
 800347c:	200011cc 	.word	0x200011cc

08003480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003486:	4b0f      	ldr	r3, [pc, #60]	; (80034c4 <HAL_MspInit+0x44>)
 8003488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800348a:	4a0e      	ldr	r2, [pc, #56]	; (80034c4 <HAL_MspInit+0x44>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6613      	str	r3, [r2, #96]	; 0x60
 8003492:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <HAL_MspInit+0x44>)
 8003494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	607b      	str	r3, [r7, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800349e:	4b09      	ldr	r3, [pc, #36]	; (80034c4 <HAL_MspInit+0x44>)
 80034a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a2:	4a08      	ldr	r2, [pc, #32]	; (80034c4 <HAL_MspInit+0x44>)
 80034a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034a8:	6593      	str	r3, [r2, #88]	; 0x58
 80034aa:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <HAL_MspInit+0x44>)
 80034ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b2:	603b      	str	r3, [r7, #0]
 80034b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40021000 	.word	0x40021000

080034c8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <HAL_CRC_MspInit+0x38>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d10b      	bne.n	80034f2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80034da:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <HAL_CRC_MspInit+0x3c>)
 80034dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034de:	4a09      	ldr	r2, [pc, #36]	; (8003504 <HAL_CRC_MspInit+0x3c>)
 80034e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80034e4:	6493      	str	r3, [r2, #72]	; 0x48
 80034e6:	4b07      	ldr	r3, [pc, #28]	; (8003504 <HAL_CRC_MspInit+0x3c>)
 80034e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	40023000 	.word	0x40023000
 8003504:	40021000 	.word	0x40021000

08003508 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b0ac      	sub	sp, #176	; 0xb0
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003510:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003514:	2200      	movs	r2, #0
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	609a      	str	r2, [r3, #8]
 800351c:	60da      	str	r2, [r3, #12]
 800351e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003520:	f107 0314 	add.w	r3, r7, #20
 8003524:	2288      	movs	r2, #136	; 0x88
 8003526:	2100      	movs	r1, #0
 8003528:	4618      	mov	r0, r3
 800352a:	f00f fcc7 	bl	8012ebc <memset>
  if(hi2c->Instance==I2C1)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a21      	ldr	r2, [pc, #132]	; (80035b8 <HAL_I2C_MspInit+0xb0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d13b      	bne.n	80035b0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003538:	2340      	movs	r3, #64	; 0x40
 800353a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800353c:	2300      	movs	r3, #0
 800353e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003540:	f107 0314 	add.w	r3, r7, #20
 8003544:	4618      	mov	r0, r3
 8003546:	f002 fab3 	bl	8005ab0 <HAL_RCCEx_PeriphCLKConfig>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d001      	beq.n	8003554 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003550:	f7ff fdc8 	bl	80030e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003554:	4b19      	ldr	r3, [pc, #100]	; (80035bc <HAL_I2C_MspInit+0xb4>)
 8003556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003558:	4a18      	ldr	r2, [pc, #96]	; (80035bc <HAL_I2C_MspInit+0xb4>)
 800355a:	f043 0302 	orr.w	r3, r3, #2
 800355e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003560:	4b16      	ldr	r3, [pc, #88]	; (80035bc <HAL_I2C_MspInit+0xb4>)
 8003562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800356c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003570:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003574:	2312      	movs	r3, #18
 8003576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357a:	2300      	movs	r3, #0
 800357c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003580:	2303      	movs	r3, #3
 8003582:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003586:	2304      	movs	r3, #4
 8003588:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800358c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003590:	4619      	mov	r1, r3
 8003592:	480b      	ldr	r0, [pc, #44]	; (80035c0 <HAL_I2C_MspInit+0xb8>)
 8003594:	f000 fc62 	bl	8003e5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003598:	4b08      	ldr	r3, [pc, #32]	; (80035bc <HAL_I2C_MspInit+0xb4>)
 800359a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359c:	4a07      	ldr	r2, [pc, #28]	; (80035bc <HAL_I2C_MspInit+0xb4>)
 800359e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035a2:	6593      	str	r3, [r2, #88]	; 0x58
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <HAL_I2C_MspInit+0xb4>)
 80035a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ac:	60fb      	str	r3, [r7, #12]
 80035ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80035b0:	bf00      	nop
 80035b2:	37b0      	adds	r7, #176	; 0xb0
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40005400 	.word	0x40005400
 80035bc:	40021000 	.word	0x40021000
 80035c0:	48000400 	.word	0x48000400

080035c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b0a4      	sub	sp, #144	; 0x90
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035cc:	f107 0308 	add.w	r3, r7, #8
 80035d0:	2288      	movs	r2, #136	; 0x88
 80035d2:	2100      	movs	r1, #0
 80035d4:	4618      	mov	r0, r3
 80035d6:	f00f fc71 	bl	8012ebc <memset>
  if(hrtc->Instance==RTC)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a10      	ldr	r2, [pc, #64]	; (8003620 <HAL_RTC_MspInit+0x5c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d118      	bne.n	8003616 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80035e4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035e8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80035ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035f2:	f107 0308 	add.w	r3, r7, #8
 80035f6:	4618      	mov	r0, r3
 80035f8:	f002 fa5a 	bl	8005ab0 <HAL_RCCEx_PeriphCLKConfig>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8003602:	f7ff fd6f 	bl	80030e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003606:	4b07      	ldr	r3, [pc, #28]	; (8003624 <HAL_RTC_MspInit+0x60>)
 8003608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360c:	4a05      	ldr	r2, [pc, #20]	; (8003624 <HAL_RTC_MspInit+0x60>)
 800360e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003612:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003616:	bf00      	nop
 8003618:	3790      	adds	r7, #144	; 0x90
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40002800 	.word	0x40002800
 8003624:	40021000 	.word	0x40021000

08003628 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08a      	sub	sp, #40	; 0x28
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003630:	f107 0314 	add.w	r3, r7, #20
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	60da      	str	r2, [r3, #12]
 800363e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a25      	ldr	r2, [pc, #148]	; (80036dc <HAL_SPI_MspInit+0xb4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d144      	bne.n	80036d4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800364a:	4b25      	ldr	r3, [pc, #148]	; (80036e0 <HAL_SPI_MspInit+0xb8>)
 800364c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364e:	4a24      	ldr	r2, [pc, #144]	; (80036e0 <HAL_SPI_MspInit+0xb8>)
 8003650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003654:	6593      	str	r3, [r2, #88]	; 0x58
 8003656:	4b22      	ldr	r3, [pc, #136]	; (80036e0 <HAL_SPI_MspInit+0xb8>)
 8003658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003662:	4b1f      	ldr	r3, [pc, #124]	; (80036e0 <HAL_SPI_MspInit+0xb8>)
 8003664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003666:	4a1e      	ldr	r2, [pc, #120]	; (80036e0 <HAL_SPI_MspInit+0xb8>)
 8003668:	f043 0304 	orr.w	r3, r3, #4
 800366c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800366e:	4b1c      	ldr	r3, [pc, #112]	; (80036e0 <HAL_SPI_MspInit+0xb8>)
 8003670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	60fb      	str	r3, [r7, #12]
 8003678:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800367a:	4b19      	ldr	r3, [pc, #100]	; (80036e0 <HAL_SPI_MspInit+0xb8>)
 800367c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800367e:	4a18      	ldr	r2, [pc, #96]	; (80036e0 <HAL_SPI_MspInit+0xb8>)
 8003680:	f043 0302 	orr.w	r3, r3, #2
 8003684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003686:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <HAL_SPI_MspInit+0xb8>)
 8003688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	60bb      	str	r3, [r7, #8]
 8003690:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003692:	230c      	movs	r3, #12
 8003694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003696:	2302      	movs	r3, #2
 8003698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369a:	2300      	movs	r3, #0
 800369c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800369e:	2303      	movs	r3, #3
 80036a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036a2:	2305      	movs	r3, #5
 80036a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036a6:	f107 0314 	add.w	r3, r7, #20
 80036aa:	4619      	mov	r1, r3
 80036ac:	480d      	ldr	r0, [pc, #52]	; (80036e4 <HAL_SPI_MspInit+0xbc>)
 80036ae:	f000 fbd5 	bl	8003e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80036b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b8:	2302      	movs	r3, #2
 80036ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036bc:	2300      	movs	r3, #0
 80036be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036c0:	2303      	movs	r3, #3
 80036c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80036c4:	2305      	movs	r3, #5
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036c8:	f107 0314 	add.w	r3, r7, #20
 80036cc:	4619      	mov	r1, r3
 80036ce:	4806      	ldr	r0, [pc, #24]	; (80036e8 <HAL_SPI_MspInit+0xc0>)
 80036d0:	f000 fbc4 	bl	8003e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80036d4:	bf00      	nop
 80036d6:	3728      	adds	r7, #40	; 0x28
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40003800 	.word	0x40003800
 80036e0:	40021000 	.word	0x40021000
 80036e4:	48000800 	.word	0x48000800
 80036e8:	48000400 	.word	0x48000400

080036ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fc:	d114      	bne.n	8003728 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036fe:	4b19      	ldr	r3, [pc, #100]	; (8003764 <HAL_TIM_Base_MspInit+0x78>)
 8003700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003702:	4a18      	ldr	r2, [pc, #96]	; (8003764 <HAL_TIM_Base_MspInit+0x78>)
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	6593      	str	r3, [r2, #88]	; 0x58
 800370a:	4b16      	ldr	r3, [pc, #88]	; (8003764 <HAL_TIM_Base_MspInit+0x78>)
 800370c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003716:	2200      	movs	r2, #0
 8003718:	2100      	movs	r1, #0
 800371a:	201c      	movs	r0, #28
 800371c:	f000 fa7d 	bl	8003c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003720:	201c      	movs	r0, #28
 8003722:	f000 fa96 	bl	8003c52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003726:	e018      	b.n	800375a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a0e      	ldr	r2, [pc, #56]	; (8003768 <HAL_TIM_Base_MspInit+0x7c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d113      	bne.n	800375a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003732:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <HAL_TIM_Base_MspInit+0x78>)
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003736:	4a0b      	ldr	r2, [pc, #44]	; (8003764 <HAL_TIM_Base_MspInit+0x78>)
 8003738:	f043 0302 	orr.w	r3, r3, #2
 800373c:	6593      	str	r3, [r2, #88]	; 0x58
 800373e:	4b09      	ldr	r3, [pc, #36]	; (8003764 <HAL_TIM_Base_MspInit+0x78>)
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	60bb      	str	r3, [r7, #8]
 8003748:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800374a:	2200      	movs	r2, #0
 800374c:	2100      	movs	r1, #0
 800374e:	201d      	movs	r0, #29
 8003750:	f000 fa63 	bl	8003c1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003754:	201d      	movs	r0, #29
 8003756:	f000 fa7c 	bl	8003c52 <HAL_NVIC_EnableIRQ>
}
 800375a:	bf00      	nop
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000
 8003768:	40000400 	.word	0x40000400

0800376c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b0ac      	sub	sp, #176	; 0xb0
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003774:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	609a      	str	r2, [r3, #8]
 8003780:	60da      	str	r2, [r3, #12]
 8003782:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003784:	f107 0314 	add.w	r3, r7, #20
 8003788:	2288      	movs	r2, #136	; 0x88
 800378a:	2100      	movs	r1, #0
 800378c:	4618      	mov	r0, r3
 800378e:	f00f fb95 	bl	8012ebc <memset>
  if(huart->Instance==USART2)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a21      	ldr	r2, [pc, #132]	; (800381c <HAL_UART_MspInit+0xb0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d13b      	bne.n	8003814 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800379c:	2302      	movs	r3, #2
 800379e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80037a0:	2300      	movs	r3, #0
 80037a2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80037a4:	f107 0314 	add.w	r3, r7, #20
 80037a8:	4618      	mov	r0, r3
 80037aa:	f002 f981 	bl	8005ab0 <HAL_RCCEx_PeriphCLKConfig>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80037b4:	f7ff fc96 	bl	80030e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80037b8:	4b19      	ldr	r3, [pc, #100]	; (8003820 <HAL_UART_MspInit+0xb4>)
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	4a18      	ldr	r2, [pc, #96]	; (8003820 <HAL_UART_MspInit+0xb4>)
 80037be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c2:	6593      	str	r3, [r2, #88]	; 0x58
 80037c4:	4b16      	ldr	r3, [pc, #88]	; (8003820 <HAL_UART_MspInit+0xb4>)
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037cc:	613b      	str	r3, [r7, #16]
 80037ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037d0:	4b13      	ldr	r3, [pc, #76]	; (8003820 <HAL_UART_MspInit+0xb4>)
 80037d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d4:	4a12      	ldr	r2, [pc, #72]	; (8003820 <HAL_UART_MspInit+0xb4>)
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037dc:	4b10      	ldr	r3, [pc, #64]	; (8003820 <HAL_UART_MspInit+0xb4>)
 80037de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80037e8:	230c      	movs	r3, #12
 80037ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ee:	2302      	movs	r3, #2
 80037f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037fa:	2303      	movs	r3, #3
 80037fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003800:	2307      	movs	r3, #7
 8003802:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003806:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800380a:	4619      	mov	r1, r3
 800380c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003810:	f000 fb24 	bl	8003e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003814:	bf00      	nop
 8003816:	37b0      	adds	r7, #176	; 0xb0
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	40004400 	.word	0x40004400
 8003820:	40021000 	.word	0x40021000

08003824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003828:	e7fe      	b.n	8003828 <NMI_Handler+0x4>

0800382a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800382a:	b480      	push	{r7}
 800382c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800382e:	e7fe      	b.n	800382e <HardFault_Handler+0x4>

08003830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003834:	e7fe      	b.n	8003834 <MemManage_Handler+0x4>

08003836 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003836:	b480      	push	{r7}
 8003838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800383a:	e7fe      	b.n	800383a <BusFault_Handler+0x4>

0800383c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003840:	e7fe      	b.n	8003840 <UsageFault_Handler+0x4>

08003842 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003842:	b480      	push	{r7}
 8003844:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003846:	bf00      	nop
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003854:	bf00      	nop
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr

0800385e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800385e:	b480      	push	{r7}
 8003860:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003870:	f000 f8b4 	bl	80039dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003874:	bf00      	nop
 8003876:	bd80      	pop	{r7, pc}

08003878 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800387c:	4804      	ldr	r0, [pc, #16]	; (8003890 <TIM2_IRQHandler+0x18>)
 800387e:	f003 fd0b 	bl	8007298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  Fusion_datas();
 8003882:	f7fd fcbf 	bl	8001204 <Fusion_datas>
  //Proportional();
  PID();
 8003886:	f7ff fd2b 	bl	80032e0 <PID>
  //Proportional();

  /* USER CODE END TIM2_IRQn 1 */
}
 800388a:	bf00      	nop
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	20001fb8 	.word	0x20001fb8

08003894 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003898:	4803      	ldr	r0, [pc, #12]	; (80038a8 <TIM3_IRQHandler+0x14>)
 800389a:	f003 fcfd 	bl	8007298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  pwm_sine();
 800389e:	f7ff fc51 	bl	8003144 <pwm_sine>
  /* USER CODE END TIM3_IRQn 1 */
}
 80038a2:	bf00      	nop
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	20002004 	.word	0x20002004

080038ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80038ac:	b480      	push	{r7}
 80038ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80038b0:	4b06      	ldr	r3, [pc, #24]	; (80038cc <SystemInit+0x20>)
 80038b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b6:	4a05      	ldr	r2, [pc, #20]	; (80038cc <SystemInit+0x20>)
 80038b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80038c0:	bf00      	nop
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	e000ed00 	.word	0xe000ed00

080038d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
    ldr   sp, =_estack    /* Set stack pointer */
 80038d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003908 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80038d4:	f7ff ffea 	bl	80038ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038d8:	480c      	ldr	r0, [pc, #48]	; (800390c <LoopForever+0x6>)
  ldr r1, =_edata
 80038da:	490d      	ldr	r1, [pc, #52]	; (8003910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80038dc:	4a0d      	ldr	r2, [pc, #52]	; (8003914 <LoopForever+0xe>)
  movs r3, #0
 80038de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038e0:	e002      	b.n	80038e8 <LoopCopyDataInit>

080038e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038e6:	3304      	adds	r3, #4

080038e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038ec:	d3f9      	bcc.n	80038e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038ee:	4a0a      	ldr	r2, [pc, #40]	; (8003918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80038f0:	4c0a      	ldr	r4, [pc, #40]	; (800391c <LoopForever+0x16>)
  movs r3, #0
 80038f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80038f4:	e001      	b.n	80038fa <LoopFillZerobss>

080038f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80038f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80038f8:	3204      	adds	r2, #4

080038fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80038fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80038fc:	d3fb      	bcc.n	80038f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80038fe:	f00f faab 	bl	8012e58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003902:	f7ff f909 	bl	8002b18 <main>

08003906 <LoopForever>:

LoopForever:
    b LoopForever
 8003906:	e7fe      	b.n	8003906 <LoopForever>
    ldr   sp, =_estack    /* Set stack pointer */
 8003908:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800390c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003910:	20001678 	.word	0x20001678
  ldr r2, =_sidata
 8003914:	080155d8 	.word	0x080155d8
  ldr r2, =_sbss
 8003918:	20001678 	.word	0x20001678
  ldr r4, =_ebss
 800391c:	200025a0 	.word	0x200025a0

08003920 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003920:	e7fe      	b.n	8003920 <ADC1_2_IRQHandler>
	...

08003924 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800392a:	2300      	movs	r3, #0
 800392c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800392e:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <HAL_Init+0x3c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a0b      	ldr	r2, [pc, #44]	; (8003960 <HAL_Init+0x3c>)
 8003934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003938:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800393a:	2003      	movs	r0, #3
 800393c:	f000 f962 	bl	8003c04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003940:	2000      	movs	r0, #0
 8003942:	f000 f80f 	bl	8003964 <HAL_InitTick>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d002      	beq.n	8003952 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	71fb      	strb	r3, [r7, #7]
 8003950:	e001      	b.n	8003956 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003952:	f7ff fd95 	bl	8003480 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003956:	79fb      	ldrb	r3, [r7, #7]
}
 8003958:	4618      	mov	r0, r3
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40022000 	.word	0x40022000

08003964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003970:	4b17      	ldr	r3, [pc, #92]	; (80039d0 <HAL_InitTick+0x6c>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d023      	beq.n	80039c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003978:	4b16      	ldr	r3, [pc, #88]	; (80039d4 <HAL_InitTick+0x70>)
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	4b14      	ldr	r3, [pc, #80]	; (80039d0 <HAL_InitTick+0x6c>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	4619      	mov	r1, r3
 8003982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003986:	fbb3 f3f1 	udiv	r3, r3, r1
 800398a:	fbb2 f3f3 	udiv	r3, r2, r3
 800398e:	4618      	mov	r0, r3
 8003990:	f000 f96d 	bl	8003c6e <HAL_SYSTICK_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10f      	bne.n	80039ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b0f      	cmp	r3, #15
 800399e:	d809      	bhi.n	80039b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80039a0:	2200      	movs	r2, #0
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	f04f 30ff 	mov.w	r0, #4294967295
 80039a8:	f000 f937 	bl	8003c1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039ac:	4a0a      	ldr	r2, [pc, #40]	; (80039d8 <HAL_InitTick+0x74>)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6013      	str	r3, [r2, #0]
 80039b2:	e007      	b.n	80039c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	73fb      	strb	r3, [r7, #15]
 80039b8:	e004      	b.n	80039c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	73fb      	strb	r3, [r7, #15]
 80039be:	e001      	b.n	80039c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20001610 	.word	0x20001610
 80039d4:	20001608 	.word	0x20001608
 80039d8:	2000160c 	.word	0x2000160c

080039dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_IncTick+0x20>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	4b06      	ldr	r3, [pc, #24]	; (8003a00 <HAL_IncTick+0x24>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4413      	add	r3, r2
 80039ec:	4a04      	ldr	r2, [pc, #16]	; (8003a00 <HAL_IncTick+0x24>)
 80039ee:	6013      	str	r3, [r2, #0]
}
 80039f0:	bf00      	nop
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	20001610 	.word	0x20001610
 8003a00:	2000212c 	.word	0x2000212c

08003a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return uwTick;
 8003a08:	4b03      	ldr	r3, [pc, #12]	; (8003a18 <HAL_GetTick+0x14>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	2000212c 	.word	0x2000212c

08003a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a24:	f7ff ffee 	bl	8003a04 <HAL_GetTick>
 8003a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a34:	d005      	beq.n	8003a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003a36:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <HAL_Delay+0x44>)
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4413      	add	r3, r2
 8003a40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003a42:	bf00      	nop
 8003a44:	f7ff ffde 	bl	8003a04 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d8f7      	bhi.n	8003a44 <HAL_Delay+0x28>
  {
  }
}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop
 8003a58:	3710      	adds	r7, #16
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	20001610 	.word	0x20001610

08003a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a74:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a80:	4013      	ands	r3, r2
 8003a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a96:	4a04      	ldr	r2, [pc, #16]	; (8003aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	60d3      	str	r3, [r2, #12]
}
 8003a9c:	bf00      	nop
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	e000ed00 	.word	0xe000ed00

08003aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ab0:	4b04      	ldr	r3, [pc, #16]	; (8003ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	0a1b      	lsrs	r3, r3, #8
 8003ab6:	f003 0307 	and.w	r3, r3, #7
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	e000ed00 	.word	0xe000ed00

08003ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	db0b      	blt.n	8003af2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	f003 021f 	and.w	r2, r3, #31
 8003ae0:	4907      	ldr	r1, [pc, #28]	; (8003b00 <__NVIC_EnableIRQ+0x38>)
 8003ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	2001      	movs	r0, #1
 8003aea:	fa00 f202 	lsl.w	r2, r0, r2
 8003aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	e000e100 	.word	0xe000e100

08003b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	6039      	str	r1, [r7, #0]
 8003b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	db0a      	blt.n	8003b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	490c      	ldr	r1, [pc, #48]	; (8003b50 <__NVIC_SetPriority+0x4c>)
 8003b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b22:	0112      	lsls	r2, r2, #4
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	440b      	add	r3, r1
 8003b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b2c:	e00a      	b.n	8003b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	4908      	ldr	r1, [pc, #32]	; (8003b54 <__NVIC_SetPriority+0x50>)
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	3b04      	subs	r3, #4
 8003b3c:	0112      	lsls	r2, r2, #4
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	440b      	add	r3, r1
 8003b42:	761a      	strb	r2, [r3, #24]
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	e000e100 	.word	0xe000e100
 8003b54:	e000ed00 	.word	0xe000ed00

08003b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b089      	sub	sp, #36	; 0x24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f1c3 0307 	rsb	r3, r3, #7
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	bf28      	it	cs
 8003b76:	2304      	movcs	r3, #4
 8003b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	2b06      	cmp	r3, #6
 8003b80:	d902      	bls.n	8003b88 <NVIC_EncodePriority+0x30>
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	3b03      	subs	r3, #3
 8003b86:	e000      	b.n	8003b8a <NVIC_EncodePriority+0x32>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43da      	mvns	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	401a      	ands	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8003baa:	43d9      	mvns	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bb0:	4313      	orrs	r3, r2
         );
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3724      	adds	r7, #36	; 0x24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
	...

08003bc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bd0:	d301      	bcc.n	8003bd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e00f      	b.n	8003bf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bd6:	4a0a      	ldr	r2, [pc, #40]	; (8003c00 <SysTick_Config+0x40>)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bde:	210f      	movs	r1, #15
 8003be0:	f04f 30ff 	mov.w	r0, #4294967295
 8003be4:	f7ff ff8e 	bl	8003b04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003be8:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <SysTick_Config+0x40>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bee:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <SysTick_Config+0x40>)
 8003bf0:	2207      	movs	r2, #7
 8003bf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	e000e010 	.word	0xe000e010

08003c04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff ff29 	bl	8003a64 <__NVIC_SetPriorityGrouping>
}
 8003c12:	bf00      	nop
 8003c14:	3708      	adds	r7, #8
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}

08003c1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c1a:	b580      	push	{r7, lr}
 8003c1c:	b086      	sub	sp, #24
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	4603      	mov	r3, r0
 8003c22:	60b9      	str	r1, [r7, #8]
 8003c24:	607a      	str	r2, [r7, #4]
 8003c26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c2c:	f7ff ff3e 	bl	8003aac <__NVIC_GetPriorityGrouping>
 8003c30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	6978      	ldr	r0, [r7, #20]
 8003c38:	f7ff ff8e 	bl	8003b58 <NVIC_EncodePriority>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c42:	4611      	mov	r1, r2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f7ff ff5d 	bl	8003b04 <__NVIC_SetPriority>
}
 8003c4a:	bf00      	nop
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	4603      	mov	r3, r0
 8003c5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7ff ff31 	bl	8003ac8 <__NVIC_EnableIRQ>
}
 8003c66:	bf00      	nop
 8003c68:	3708      	adds	r7, #8
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b082      	sub	sp, #8
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f7ff ffa2 	bl	8003bc0 <SysTick_Config>
 8003c7c:	4603      	mov	r3, r0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3708      	adds	r7, #8
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e054      	b.n	8003d44 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	7f5b      	ldrb	r3, [r3, #29]
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d105      	bne.n	8003cb0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff fc0c 	bl	80034c8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	791b      	ldrb	r3, [r3, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a22      	ldr	r2, [pc, #136]	; (8003d4c <HAL_CRC_Init+0xc4>)
 8003cc4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0218 	bic.w	r2, r2, #24
 8003cd4:	609a      	str	r2, [r3, #8]
 8003cd6:	e00c      	b.n	8003cf2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6899      	ldr	r1, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f834 	bl	8003d50 <HAL_CRCEx_Polynomial_Set>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e028      	b.n	8003d44 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	795b      	ldrb	r3, [r3, #5]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d105      	bne.n	8003d06 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8003d02:	611a      	str	r2, [r3, #16]
 8003d04:	e004      	b.n	8003d10 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6912      	ldr	r2, [r2, #16]
 8003d0e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	695a      	ldr	r2, [r3, #20]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	430a      	orrs	r2, r1
 8003d24:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	699a      	ldr	r2, [r3, #24]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3708      	adds	r7, #8
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	04c11db7 	.word	0x04c11db7

08003d50 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003d60:	231f      	movs	r3, #31
 8003d62:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003d64:	bf00      	nop
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	1e5a      	subs	r2, r3, #1
 8003d6a:	613a      	str	r2, [r7, #16]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d009      	beq.n	8003d84 <HAL_CRCEx_Polynomial_Set+0x34>
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f003 031f 	and.w	r3, r3, #31
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0f0      	beq.n	8003d66 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b18      	cmp	r3, #24
 8003d88:	d846      	bhi.n	8003e18 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003d8a:	a201      	add	r2, pc, #4	; (adr r2, 8003d90 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d90:	08003e1f 	.word	0x08003e1f
 8003d94:	08003e19 	.word	0x08003e19
 8003d98:	08003e19 	.word	0x08003e19
 8003d9c:	08003e19 	.word	0x08003e19
 8003da0:	08003e19 	.word	0x08003e19
 8003da4:	08003e19 	.word	0x08003e19
 8003da8:	08003e19 	.word	0x08003e19
 8003dac:	08003e19 	.word	0x08003e19
 8003db0:	08003e0d 	.word	0x08003e0d
 8003db4:	08003e19 	.word	0x08003e19
 8003db8:	08003e19 	.word	0x08003e19
 8003dbc:	08003e19 	.word	0x08003e19
 8003dc0:	08003e19 	.word	0x08003e19
 8003dc4:	08003e19 	.word	0x08003e19
 8003dc8:	08003e19 	.word	0x08003e19
 8003dcc:	08003e19 	.word	0x08003e19
 8003dd0:	08003e01 	.word	0x08003e01
 8003dd4:	08003e19 	.word	0x08003e19
 8003dd8:	08003e19 	.word	0x08003e19
 8003ddc:	08003e19 	.word	0x08003e19
 8003de0:	08003e19 	.word	0x08003e19
 8003de4:	08003e19 	.word	0x08003e19
 8003de8:	08003e19 	.word	0x08003e19
 8003dec:	08003e19 	.word	0x08003e19
 8003df0:	08003df5 	.word	0x08003df5
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	2b06      	cmp	r3, #6
 8003df8:	d913      	bls.n	8003e22 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003dfe:	e010      	b.n	8003e22 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b07      	cmp	r3, #7
 8003e04:	d90f      	bls.n	8003e26 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e0a:	e00c      	b.n	8003e26 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	2b0f      	cmp	r3, #15
 8003e10:	d90b      	bls.n	8003e2a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003e16:	e008      	b.n	8003e2a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e1c:	e006      	b.n	8003e2c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e1e:	bf00      	nop
 8003e20:	e004      	b.n	8003e2c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e22:	bf00      	nop
 8003e24:	e002      	b.n	8003e2c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e26:	bf00      	nop
 8003e28:	e000      	b.n	8003e2c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003e2a:	bf00      	nop
  }
  if (status == HAL_OK)
 8003e2c:	7dfb      	ldrb	r3, [r7, #23]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10d      	bne.n	8003e4e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f023 0118 	bic.w	r1, r3, #24
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	371c      	adds	r7, #28
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e66:	2300      	movs	r3, #0
 8003e68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e6a:	e17f      	b.n	800416c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	2101      	movs	r1, #1
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	fa01 f303 	lsl.w	r3, r1, r3
 8003e78:	4013      	ands	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 8171 	beq.w	8004166 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f003 0303 	and.w	r3, r3, #3
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d005      	beq.n	8003e9c <HAL_GPIO_Init+0x40>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d130      	bne.n	8003efe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	2203      	movs	r2, #3
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	43db      	mvns	r3, r3
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eda:	43db      	mvns	r3, r3
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	091b      	lsrs	r3, r3, #4
 8003ee8:	f003 0201 	and.w	r2, r3, #1
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d118      	bne.n	8003f3c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003f10:	2201      	movs	r2, #1
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	08db      	lsrs	r3, r3, #3
 8003f26:	f003 0201 	and.w	r2, r3, #1
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d017      	beq.n	8003f78 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	2203      	movs	r2, #3
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	689a      	ldr	r2, [r3, #8]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	005b      	lsls	r3, r3, #1
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	693a      	ldr	r2, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 0303 	and.w	r3, r3, #3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d123      	bne.n	8003fcc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	08da      	lsrs	r2, r3, #3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3208      	adds	r2, #8
 8003f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f90:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	220f      	movs	r2, #15
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	08da      	lsrs	r2, r3, #3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3208      	adds	r2, #8
 8003fc6:	6939      	ldr	r1, [r7, #16]
 8003fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	2203      	movs	r2, #3
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	f003 0203 	and.w	r2, r3, #3
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004008:	2b00      	cmp	r3, #0
 800400a:	f000 80ac 	beq.w	8004166 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800400e:	4b5f      	ldr	r3, [pc, #380]	; (800418c <HAL_GPIO_Init+0x330>)
 8004010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004012:	4a5e      	ldr	r2, [pc, #376]	; (800418c <HAL_GPIO_Init+0x330>)
 8004014:	f043 0301 	orr.w	r3, r3, #1
 8004018:	6613      	str	r3, [r2, #96]	; 0x60
 800401a:	4b5c      	ldr	r3, [pc, #368]	; (800418c <HAL_GPIO_Init+0x330>)
 800401c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004026:	4a5a      	ldr	r2, [pc, #360]	; (8004190 <HAL_GPIO_Init+0x334>)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	089b      	lsrs	r3, r3, #2
 800402c:	3302      	adds	r3, #2
 800402e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004032:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	220f      	movs	r2, #15
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43db      	mvns	r3, r3
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4013      	ands	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004050:	d025      	beq.n	800409e <HAL_GPIO_Init+0x242>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a4f      	ldr	r2, [pc, #316]	; (8004194 <HAL_GPIO_Init+0x338>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d01f      	beq.n	800409a <HAL_GPIO_Init+0x23e>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a4e      	ldr	r2, [pc, #312]	; (8004198 <HAL_GPIO_Init+0x33c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d019      	beq.n	8004096 <HAL_GPIO_Init+0x23a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a4d      	ldr	r2, [pc, #308]	; (800419c <HAL_GPIO_Init+0x340>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d013      	beq.n	8004092 <HAL_GPIO_Init+0x236>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a4c      	ldr	r2, [pc, #304]	; (80041a0 <HAL_GPIO_Init+0x344>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00d      	beq.n	800408e <HAL_GPIO_Init+0x232>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a4b      	ldr	r2, [pc, #300]	; (80041a4 <HAL_GPIO_Init+0x348>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d007      	beq.n	800408a <HAL_GPIO_Init+0x22e>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a4a      	ldr	r2, [pc, #296]	; (80041a8 <HAL_GPIO_Init+0x34c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d101      	bne.n	8004086 <HAL_GPIO_Init+0x22a>
 8004082:	2306      	movs	r3, #6
 8004084:	e00c      	b.n	80040a0 <HAL_GPIO_Init+0x244>
 8004086:	2307      	movs	r3, #7
 8004088:	e00a      	b.n	80040a0 <HAL_GPIO_Init+0x244>
 800408a:	2305      	movs	r3, #5
 800408c:	e008      	b.n	80040a0 <HAL_GPIO_Init+0x244>
 800408e:	2304      	movs	r3, #4
 8004090:	e006      	b.n	80040a0 <HAL_GPIO_Init+0x244>
 8004092:	2303      	movs	r3, #3
 8004094:	e004      	b.n	80040a0 <HAL_GPIO_Init+0x244>
 8004096:	2302      	movs	r3, #2
 8004098:	e002      	b.n	80040a0 <HAL_GPIO_Init+0x244>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <HAL_GPIO_Init+0x244>
 800409e:	2300      	movs	r3, #0
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	f002 0203 	and.w	r2, r2, #3
 80040a6:	0092      	lsls	r2, r2, #2
 80040a8:	4093      	lsls	r3, r2
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040b0:	4937      	ldr	r1, [pc, #220]	; (8004190 <HAL_GPIO_Init+0x334>)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	089b      	lsrs	r3, r3, #2
 80040b6:	3302      	adds	r3, #2
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040be:	4b3b      	ldr	r3, [pc, #236]	; (80041ac <HAL_GPIO_Init+0x350>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	43db      	mvns	r3, r3
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4013      	ands	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4313      	orrs	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80040e2:	4a32      	ldr	r2, [pc, #200]	; (80041ac <HAL_GPIO_Init+0x350>)
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80040e8:	4b30      	ldr	r3, [pc, #192]	; (80041ac <HAL_GPIO_Init+0x350>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	43db      	mvns	r3, r3
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800410c:	4a27      	ldr	r2, [pc, #156]	; (80041ac <HAL_GPIO_Init+0x350>)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004112:	4b26      	ldr	r3, [pc, #152]	; (80041ac <HAL_GPIO_Init+0x350>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	43db      	mvns	r3, r3
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4013      	ands	r3, r2
 8004120:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004136:	4a1d      	ldr	r2, [pc, #116]	; (80041ac <HAL_GPIO_Init+0x350>)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800413c:	4b1b      	ldr	r3, [pc, #108]	; (80041ac <HAL_GPIO_Init+0x350>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	43db      	mvns	r3, r3
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	4013      	ands	r3, r2
 800414a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4313      	orrs	r3, r2
 800415e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004160:	4a12      	ldr	r2, [pc, #72]	; (80041ac <HAL_GPIO_Init+0x350>)
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	3301      	adds	r3, #1
 800416a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	fa22 f303 	lsr.w	r3, r2, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	f47f ae78 	bne.w	8003e6c <HAL_GPIO_Init+0x10>
  }
}
 800417c:	bf00      	nop
 800417e:	bf00      	nop
 8004180:	371c      	adds	r7, #28
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40021000 	.word	0x40021000
 8004190:	40010000 	.word	0x40010000
 8004194:	48000400 	.word	0x48000400
 8004198:	48000800 	.word	0x48000800
 800419c:	48000c00 	.word	0x48000c00
 80041a0:	48001000 	.word	0x48001000
 80041a4:	48001400 	.word	0x48001400
 80041a8:	48001800 	.word	0x48001800
 80041ac:	40010400 	.word	0x40010400

080041b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	807b      	strh	r3, [r7, #2]
 80041bc:	4613      	mov	r3, r2
 80041be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041c0:	787b      	ldrb	r3, [r7, #1]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041c6:	887a      	ldrh	r2, [r7, #2]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80041cc:	e002      	b.n	80041d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041ce:	887a      	ldrh	r2, [r7, #2]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041f2:	887a      	ldrh	r2, [r7, #2]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4013      	ands	r3, r2
 80041f8:	041a      	lsls	r2, r3, #16
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	43d9      	mvns	r1, r3
 80041fe:	887b      	ldrh	r3, [r7, #2]
 8004200:	400b      	ands	r3, r1
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	619a      	str	r2, [r3, #24]
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e081      	b.n	800432a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d106      	bne.n	8004240 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff f964 	bl	8003508 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2224      	movs	r2, #36	; 0x24
 8004244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0201 	bic.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004264:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004274:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d107      	bne.n	800428e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800428a:	609a      	str	r2, [r3, #8]
 800428c:	e006      	b.n	800429c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800429a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	2b02      	cmp	r3, #2
 80042a2:	d104      	bne.n	80042ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691a      	ldr	r2, [r3, #16]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69d9      	ldr	r1, [r3, #28]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a1a      	ldr	r2, [r3, #32]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	430a      	orrs	r2, r1
 80042fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2220      	movs	r2, #32
 8004316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af02      	add	r7, sp, #8
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	4608      	mov	r0, r1
 800433e:	4611      	mov	r1, r2
 8004340:	461a      	mov	r2, r3
 8004342:	4603      	mov	r3, r0
 8004344:	817b      	strh	r3, [r7, #10]
 8004346:	460b      	mov	r3, r1
 8004348:	813b      	strh	r3, [r7, #8]
 800434a:	4613      	mov	r3, r2
 800434c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b20      	cmp	r3, #32
 8004358:	f040 80f9 	bne.w	800454e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800435c:	6a3b      	ldr	r3, [r7, #32]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <HAL_I2C_Mem_Write+0x34>
 8004362:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004364:	2b00      	cmp	r3, #0
 8004366:	d105      	bne.n	8004374 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800436e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0ed      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <HAL_I2C_Mem_Write+0x4e>
 800437e:	2302      	movs	r3, #2
 8004380:	e0e6      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2201      	movs	r2, #1
 8004386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800438a:	f7ff fb3b 	bl	8003a04 <HAL_GetTick>
 800438e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	2319      	movs	r3, #25
 8004396:	2201      	movs	r2, #1
 8004398:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f000 fac3 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0d1      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2221      	movs	r2, #33	; 0x21
 80043b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2240      	movs	r2, #64	; 0x40
 80043b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a3a      	ldr	r2, [r7, #32]
 80043c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80043cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2200      	movs	r2, #0
 80043d2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043d4:	88f8      	ldrh	r0, [r7, #6]
 80043d6:	893a      	ldrh	r2, [r7, #8]
 80043d8:	8979      	ldrh	r1, [r7, #10]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	9301      	str	r3, [sp, #4]
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	9300      	str	r3, [sp, #0]
 80043e2:	4603      	mov	r3, r0
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f9d3 	bl	8004790 <I2C_RequestMemoryWrite>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e0a9      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004400:	b29b      	uxth	r3, r3
 8004402:	2bff      	cmp	r3, #255	; 0xff
 8004404:	d90e      	bls.n	8004424 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	22ff      	movs	r2, #255	; 0xff
 800440a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004410:	b2da      	uxtb	r2, r3
 8004412:	8979      	ldrh	r1, [r7, #10]
 8004414:	2300      	movs	r3, #0
 8004416:	9300      	str	r3, [sp, #0]
 8004418:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 fc2b 	bl	8004c78 <I2C_TransferConfig>
 8004422:	e00f      	b.n	8004444 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004428:	b29a      	uxth	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004432:	b2da      	uxtb	r2, r3
 8004434:	8979      	ldrh	r1, [r7, #10]
 8004436:	2300      	movs	r3, #0
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 fc1a 	bl	8004c78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004444:	697a      	ldr	r2, [r7, #20]
 8004446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 faad 	bl	80049a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e07b      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800445c:	781a      	ldrb	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004472:	b29b      	uxth	r3, r3
 8004474:	3b01      	subs	r3, #1
 8004476:	b29a      	uxth	r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004480:	3b01      	subs	r3, #1
 8004482:	b29a      	uxth	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d034      	beq.n	80044fc <HAL_I2C_Mem_Write+0x1c8>
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004496:	2b00      	cmp	r3, #0
 8004498:	d130      	bne.n	80044fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a0:	2200      	movs	r2, #0
 80044a2:	2180      	movs	r1, #128	; 0x80
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 fa3f 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e04d      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2bff      	cmp	r3, #255	; 0xff
 80044bc:	d90e      	bls.n	80044dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	22ff      	movs	r2, #255	; 0xff
 80044c2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	8979      	ldrh	r1, [r7, #10]
 80044cc:	2300      	movs	r3, #0
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 fbcf 	bl	8004c78 <I2C_TransferConfig>
 80044da:	e00f      	b.n	80044fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	8979      	ldrh	r1, [r7, #10]
 80044ee:	2300      	movs	r3, #0
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 fbbe 	bl	8004c78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004500:	b29b      	uxth	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d19e      	bne.n	8004444 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fa8c 	bl	8004a28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e01a      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2220      	movs	r2, #32
 8004520:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6859      	ldr	r1, [r3, #4]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	4b0a      	ldr	r3, [pc, #40]	; (8004558 <HAL_I2C_Mem_Write+0x224>)
 800452e:	400b      	ands	r3, r1
 8004530:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2220      	movs	r2, #32
 8004536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800454a:	2300      	movs	r3, #0
 800454c:	e000      	b.n	8004550 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800454e:	2302      	movs	r3, #2
  }
}
 8004550:	4618      	mov	r0, r3
 8004552:	3718      	adds	r7, #24
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	fe00e800 	.word	0xfe00e800

0800455c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b088      	sub	sp, #32
 8004560:	af02      	add	r7, sp, #8
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	4608      	mov	r0, r1
 8004566:	4611      	mov	r1, r2
 8004568:	461a      	mov	r2, r3
 800456a:	4603      	mov	r3, r0
 800456c:	817b      	strh	r3, [r7, #10]
 800456e:	460b      	mov	r3, r1
 8004570:	813b      	strh	r3, [r7, #8]
 8004572:	4613      	mov	r3, r2
 8004574:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b20      	cmp	r3, #32
 8004580:	f040 80fd 	bne.w	800477e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004584:	6a3b      	ldr	r3, [r7, #32]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_I2C_Mem_Read+0x34>
 800458a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800458c:	2b00      	cmp	r3, #0
 800458e:	d105      	bne.n	800459c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004596:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e0f1      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d101      	bne.n	80045aa <HAL_I2C_Mem_Read+0x4e>
 80045a6:	2302      	movs	r3, #2
 80045a8:	e0ea      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045b2:	f7ff fa27 	bl	8003a04 <HAL_GetTick>
 80045b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	9300      	str	r3, [sp, #0]
 80045bc:	2319      	movs	r3, #25
 80045be:	2201      	movs	r2, #1
 80045c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 f9af 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e0d5      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2222      	movs	r2, #34	; 0x22
 80045d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2240      	movs	r2, #64	; 0x40
 80045e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a3a      	ldr	r2, [r7, #32]
 80045ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80045f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80045fc:	88f8      	ldrh	r0, [r7, #6]
 80045fe:	893a      	ldrh	r2, [r7, #8]
 8004600:	8979      	ldrh	r1, [r7, #10]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	9301      	str	r3, [sp, #4]
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	4603      	mov	r3, r0
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f000 f913 	bl	8004838 <I2C_RequestMemoryRead>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d005      	beq.n	8004624 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0ad      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	2bff      	cmp	r3, #255	; 0xff
 800462c:	d90e      	bls.n	800464c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	22ff      	movs	r2, #255	; 0xff
 8004632:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004638:	b2da      	uxtb	r2, r3
 800463a:	8979      	ldrh	r1, [r7, #10]
 800463c:	4b52      	ldr	r3, [pc, #328]	; (8004788 <HAL_I2C_Mem_Read+0x22c>)
 800463e:	9300      	str	r3, [sp, #0]
 8004640:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 fb17 	bl	8004c78 <I2C_TransferConfig>
 800464a:	e00f      	b.n	800466c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800465a:	b2da      	uxtb	r2, r3
 800465c:	8979      	ldrh	r1, [r7, #10]
 800465e:	4b4a      	ldr	r3, [pc, #296]	; (8004788 <HAL_I2C_Mem_Read+0x22c>)
 8004660:	9300      	str	r3, [sp, #0]
 8004662:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 fb06 	bl	8004c78 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004672:	2200      	movs	r2, #0
 8004674:	2104      	movs	r1, #4
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f956 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e07c      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046a2:	3b01      	subs	r3, #1
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d034      	beq.n	800472c <HAL_I2C_Mem_Read+0x1d0>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d130      	bne.n	800472c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	9300      	str	r3, [sp, #0]
 80046ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d0:	2200      	movs	r2, #0
 80046d2:	2180      	movs	r1, #128	; 0x80
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f927 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e04d      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	2bff      	cmp	r3, #255	; 0xff
 80046ec:	d90e      	bls.n	800470c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	22ff      	movs	r2, #255	; 0xff
 80046f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	8979      	ldrh	r1, [r7, #10]
 80046fc:	2300      	movs	r3, #0
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 fab7 	bl	8004c78 <I2C_TransferConfig>
 800470a:	e00f      	b.n	800472c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800471a:	b2da      	uxtb	r2, r3
 800471c:	8979      	ldrh	r1, [r7, #10]
 800471e:	2300      	movs	r3, #0
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 faa6 	bl	8004c78 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004730:	b29b      	uxth	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d19a      	bne.n	800466c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004736:	697a      	ldr	r2, [r7, #20]
 8004738:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f974 	bl	8004a28 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d001      	beq.n	800474a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e01a      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2220      	movs	r2, #32
 8004750:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6859      	ldr	r1, [r3, #4]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	4b0b      	ldr	r3, [pc, #44]	; (800478c <HAL_I2C_Mem_Read+0x230>)
 800475e:	400b      	ands	r3, r1
 8004760:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2220      	movs	r2, #32
 8004766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800477a:	2300      	movs	r3, #0
 800477c:	e000      	b.n	8004780 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800477e:	2302      	movs	r3, #2
  }
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	80002400 	.word	0x80002400
 800478c:	fe00e800 	.word	0xfe00e800

08004790 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af02      	add	r7, sp, #8
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	4608      	mov	r0, r1
 800479a:	4611      	mov	r1, r2
 800479c:	461a      	mov	r2, r3
 800479e:	4603      	mov	r3, r0
 80047a0:	817b      	strh	r3, [r7, #10]
 80047a2:	460b      	mov	r3, r1
 80047a4:	813b      	strh	r3, [r7, #8]
 80047a6:	4613      	mov	r3, r2
 80047a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80047aa:	88fb      	ldrh	r3, [r7, #6]
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	8979      	ldrh	r1, [r7, #10]
 80047b0:	4b20      	ldr	r3, [pc, #128]	; (8004834 <I2C_RequestMemoryWrite+0xa4>)
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 fa5d 	bl	8004c78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047be:	69fa      	ldr	r2, [r7, #28]
 80047c0:	69b9      	ldr	r1, [r7, #24]
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f8f0 	bl	80049a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e02c      	b.n	800482c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d105      	bne.n	80047e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047d8:	893b      	ldrh	r3, [r7, #8]
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	629a      	str	r2, [r3, #40]	; 0x28
 80047e2:	e015      	b.n	8004810 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80047e4:	893b      	ldrh	r3, [r7, #8]
 80047e6:	0a1b      	lsrs	r3, r3, #8
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047f2:	69fa      	ldr	r2, [r7, #28]
 80047f4:	69b9      	ldr	r1, [r7, #24]
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 f8d6 	bl	80049a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e012      	b.n	800482c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004806:	893b      	ldrh	r3, [r7, #8]
 8004808:	b2da      	uxtb	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	9300      	str	r3, [sp, #0]
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	2200      	movs	r2, #0
 8004818:	2180      	movs	r1, #128	; 0x80
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 f884 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 8004820:	4603      	mov	r3, r0
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	80002000 	.word	0x80002000

08004838 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af02      	add	r7, sp, #8
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	4608      	mov	r0, r1
 8004842:	4611      	mov	r1, r2
 8004844:	461a      	mov	r2, r3
 8004846:	4603      	mov	r3, r0
 8004848:	817b      	strh	r3, [r7, #10]
 800484a:	460b      	mov	r3, r1
 800484c:	813b      	strh	r3, [r7, #8]
 800484e:	4613      	mov	r3, r2
 8004850:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	b2da      	uxtb	r2, r3
 8004856:	8979      	ldrh	r1, [r7, #10]
 8004858:	4b20      	ldr	r3, [pc, #128]	; (80048dc <I2C_RequestMemoryRead+0xa4>)
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	2300      	movs	r3, #0
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 fa0a 	bl	8004c78 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	69b9      	ldr	r1, [r7, #24]
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 f89d 	bl	80049a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d001      	beq.n	8004878 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e02c      	b.n	80048d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004878:	88fb      	ldrh	r3, [r7, #6]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d105      	bne.n	800488a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800487e:	893b      	ldrh	r3, [r7, #8]
 8004880:	b2da      	uxtb	r2, r3
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	629a      	str	r2, [r3, #40]	; 0x28
 8004888:	e015      	b.n	80048b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800488a:	893b      	ldrh	r3, [r7, #8]
 800488c:	0a1b      	lsrs	r3, r3, #8
 800488e:	b29b      	uxth	r3, r3
 8004890:	b2da      	uxtb	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	69b9      	ldr	r1, [r7, #24]
 800489c:	68f8      	ldr	r0, [r7, #12]
 800489e:	f000 f883 	bl	80049a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d001      	beq.n	80048ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e012      	b.n	80048d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80048ac:	893b      	ldrh	r3, [r7, #8]
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	2200      	movs	r2, #0
 80048be:	2140      	movs	r1, #64	; 0x40
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f831 	bl	8004928 <I2C_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e000      	b.n	80048d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	80002000 	.word	0x80002000

080048e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d103      	bne.n	80048fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2200      	movs	r2, #0
 80048fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	699b      	ldr	r3, [r3, #24]
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b01      	cmp	r3, #1
 800490a:	d007      	beq.n	800491c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0201 	orr.w	r2, r2, #1
 800491a:	619a      	str	r2, [r3, #24]
  }
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	603b      	str	r3, [r7, #0]
 8004934:	4613      	mov	r3, r2
 8004936:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004938:	e022      	b.n	8004980 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004940:	d01e      	beq.n	8004980 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004942:	f7ff f85f 	bl	8003a04 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d302      	bcc.n	8004958 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d113      	bne.n	8004980 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495c:	f043 0220 	orr.w	r2, r3, #32
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e00f      	b.n	80049a0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	699a      	ldr	r2, [r3, #24]
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	4013      	ands	r3, r2
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	429a      	cmp	r2, r3
 800498e:	bf0c      	ite	eq
 8004990:	2301      	moveq	r3, #1
 8004992:	2300      	movne	r3, #0
 8004994:	b2db      	uxtb	r3, r3
 8004996:	461a      	mov	r2, r3
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	429a      	cmp	r2, r3
 800499c:	d0cd      	beq.n	800493a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049b4:	e02c      	b.n	8004a10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	68b9      	ldr	r1, [r7, #8]
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f000 f870 	bl	8004aa0 <I2C_IsErrorOccurred>
 80049c0:	4603      	mov	r3, r0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e02a      	b.n	8004a20 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d0:	d01e      	beq.n	8004a10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049d2:	f7ff f817 	bl	8003a04 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	68ba      	ldr	r2, [r7, #8]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d302      	bcc.n	80049e8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d113      	bne.n	8004a10 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ec:	f043 0220 	orr.w	r2, r3, #32
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e007      	b.n	8004a20 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	699b      	ldr	r3, [r3, #24]
 8004a16:	f003 0302 	and.w	r3, r3, #2
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d1cb      	bne.n	80049b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a34:	e028      	b.n	8004a88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	68b9      	ldr	r1, [r7, #8]
 8004a3a:	68f8      	ldr	r0, [r7, #12]
 8004a3c:	f000 f830 	bl	8004aa0 <I2C_IsErrorOccurred>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e026      	b.n	8004a98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a4a:	f7fe ffdb 	bl	8003a04 <HAL_GetTick>
 8004a4e:	4602      	mov	r2, r0
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	68ba      	ldr	r2, [r7, #8]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d302      	bcc.n	8004a60 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d113      	bne.n	8004a88 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a64:	f043 0220 	orr.w	r2, r3, #32
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e007      	b.n	8004a98 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f003 0320 	and.w	r3, r3, #32
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	d1cf      	bne.n	8004a36 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08a      	sub	sp, #40	; 0x28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	f003 0310 	and.w	r3, r3, #16
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d075      	beq.n	8004bb8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2210      	movs	r2, #16
 8004ad2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ad4:	e056      	b.n	8004b84 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004adc:	d052      	beq.n	8004b84 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ade:	f7fe ff91 	bl	8003a04 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	68ba      	ldr	r2, [r7, #8]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d302      	bcc.n	8004af4 <I2C_IsErrorOccurred+0x54>
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d147      	bne.n	8004b84 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004afe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b06:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b16:	d12e      	bne.n	8004b76 <I2C_IsErrorOccurred+0xd6>
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b1e:	d02a      	beq.n	8004b76 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004b20:	7cfb      	ldrb	r3, [r7, #19]
 8004b22:	2b20      	cmp	r3, #32
 8004b24:	d027      	beq.n	8004b76 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b34:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004b36:	f7fe ff65 	bl	8003a04 <HAL_GetTick>
 8004b3a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b3c:	e01b      	b.n	8004b76 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004b3e:	f7fe ff61 	bl	8003a04 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b19      	cmp	r3, #25
 8004b4a:	d914      	bls.n	8004b76 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b50:	f043 0220 	orr.w	r2, r3, #32
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	f003 0320 	and.w	r3, r3, #32
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d1dc      	bne.n	8004b3e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	f003 0320 	and.w	r3, r3, #32
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	d003      	beq.n	8004b9a <I2C_IsErrorOccurred+0xfa>
 8004b92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d09d      	beq.n	8004ad6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004b9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d103      	bne.n	8004baa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	f043 0304 	orr.w	r3, r3, #4
 8004bb0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00b      	beq.n	8004be2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	f043 0301 	orr.w	r3, r3, #1
 8004bd0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bda:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00b      	beq.n	8004c04 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	f043 0308 	orr.w	r3, r3, #8
 8004bf2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004bfc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00b      	beq.n	8004c26 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	f043 0302 	orr.w	r3, r3, #2
 8004c14:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c1e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004c20:	2301      	movs	r3, #1
 8004c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004c26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d01c      	beq.n	8004c68 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f7ff fe56 	bl	80048e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	6859      	ldr	r1, [r3, #4]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681a      	ldr	r2, [r3, #0]
 8004c3e:	4b0d      	ldr	r3, [pc, #52]	; (8004c74 <I2C_IsErrorOccurred+0x1d4>)
 8004c40:	400b      	ands	r3, r1
 8004c42:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004c68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3728      	adds	r7, #40	; 0x28
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	fe00e800 	.word	0xfe00e800

08004c78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	607b      	str	r3, [r7, #4]
 8004c82:	460b      	mov	r3, r1
 8004c84:	817b      	strh	r3, [r7, #10]
 8004c86:	4613      	mov	r3, r2
 8004c88:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c8a:	897b      	ldrh	r3, [r7, #10]
 8004c8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c90:	7a7b      	ldrb	r3, [r7, #9]
 8004c92:	041b      	lsls	r3, r3, #16
 8004c94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c98:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004c9e:	6a3b      	ldr	r3, [r7, #32]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004ca6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	0d5b      	lsrs	r3, r3, #21
 8004cb2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004cb6:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <I2C_TransferConfig+0x60>)
 8004cb8:	430b      	orrs	r3, r1
 8004cba:	43db      	mvns	r3, r3
 8004cbc:	ea02 0103 	and.w	r1, r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004cca:	bf00      	nop
 8004ccc:	371c      	adds	r7, #28
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	03ff63ff 	.word	0x03ff63ff

08004cdc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b20      	cmp	r3, #32
 8004cf0:	d138      	bne.n	8004d64 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d101      	bne.n	8004d00 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	e032      	b.n	8004d66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2224      	movs	r2, #36	; 0x24
 8004d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f022 0201 	bic.w	r2, r2, #1
 8004d1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d2e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6819      	ldr	r1, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	683a      	ldr	r2, [r7, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f042 0201 	orr.w	r2, r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	e000      	b.n	8004d66 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d64:	2302      	movs	r3, #2
  }
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr

08004d72 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d72:	b480      	push	{r7}
 8004d74:	b085      	sub	sp, #20
 8004d76:	af00      	add	r7, sp, #0
 8004d78:	6078      	str	r0, [r7, #4]
 8004d7a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b20      	cmp	r3, #32
 8004d86:	d139      	bne.n	8004dfc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d101      	bne.n	8004d96 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d92:	2302      	movs	r3, #2
 8004d94:	e033      	b.n	8004dfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2201      	movs	r2, #1
 8004d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2224      	movs	r2, #36	; 0x24
 8004da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f022 0201 	bic.w	r2, r2, #1
 8004db4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004dc4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	021b      	lsls	r3, r3, #8
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68fa      	ldr	r2, [r7, #12]
 8004dd6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0201 	orr.w	r2, r2, #1
 8004de6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2220      	movs	r2, #32
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	e000      	b.n	8004dfe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004dfc:	2302      	movs	r3, #2
  }
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
	...

08004e0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004e10:	4b04      	ldr	r3, [pc, #16]	; (8004e24 <HAL_PWREx_GetVoltageRange+0x18>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	40007000 	.word	0x40007000

08004e28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e36:	d130      	bne.n	8004e9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e38:	4b23      	ldr	r3, [pc, #140]	; (8004ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e44:	d038      	beq.n	8004eb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e46:	4b20      	ldr	r3, [pc, #128]	; (8004ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e4e:	4a1e      	ldr	r2, [pc, #120]	; (8004ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e56:	4b1d      	ldr	r3, [pc, #116]	; (8004ecc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2232      	movs	r2, #50	; 0x32
 8004e5c:	fb02 f303 	mul.w	r3, r2, r3
 8004e60:	4a1b      	ldr	r2, [pc, #108]	; (8004ed0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e62:	fba2 2303 	umull	r2, r3, r2, r3
 8004e66:	0c9b      	lsrs	r3, r3, #18
 8004e68:	3301      	adds	r3, #1
 8004e6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e6c:	e002      	b.n	8004e74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3b01      	subs	r3, #1
 8004e72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e74:	4b14      	ldr	r3, [pc, #80]	; (8004ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e76:	695b      	ldr	r3, [r3, #20]
 8004e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e80:	d102      	bne.n	8004e88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1f2      	bne.n	8004e6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e88:	4b0f      	ldr	r3, [pc, #60]	; (8004ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e94:	d110      	bne.n	8004eb8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e00f      	b.n	8004eba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea6:	d007      	beq.n	8004eb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ea8:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004eb0:	4a05      	ldr	r2, [pc, #20]	; (8004ec8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004eb6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40007000 	.word	0x40007000
 8004ecc:	20001608 	.word	0x20001608
 8004ed0:	431bde83 	.word	0x431bde83

08004ed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e3d8      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ee6:	4b97      	ldr	r3, [pc, #604]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f003 030c 	and.w	r3, r3, #12
 8004eee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ef0:	4b94      	ldr	r3, [pc, #592]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	f003 0303 	and.w	r3, r3, #3
 8004ef8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0310 	and.w	r3, r3, #16
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 80e4 	beq.w	80050d0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d007      	beq.n	8004f1e <HAL_RCC_OscConfig+0x4a>
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	2b0c      	cmp	r3, #12
 8004f12:	f040 808b 	bne.w	800502c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	f040 8087 	bne.w	800502c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f1e:	4b89      	ldr	r3, [pc, #548]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d005      	beq.n	8004f36 <HAL_RCC_OscConfig+0x62>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699b      	ldr	r3, [r3, #24]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	e3b0      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1a      	ldr	r2, [r3, #32]
 8004f3a:	4b82      	ldr	r3, [pc, #520]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0308 	and.w	r3, r3, #8
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d004      	beq.n	8004f50 <HAL_RCC_OscConfig+0x7c>
 8004f46:	4b7f      	ldr	r3, [pc, #508]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f4e:	e005      	b.n	8004f5c <HAL_RCC_OscConfig+0x88>
 8004f50:	4b7c      	ldr	r3, [pc, #496]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8004f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f56:	091b      	lsrs	r3, r3, #4
 8004f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d223      	bcs.n	8004fa8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fd43 	bl	80059f0 <RCC_SetFlashLatencyFromMSIRange>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e391      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f74:	4b73      	ldr	r3, [pc, #460]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a72      	ldr	r2, [pc, #456]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8004f7a:	f043 0308 	orr.w	r3, r3, #8
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	4b70      	ldr	r3, [pc, #448]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	496d      	ldr	r1, [pc, #436]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f92:	4b6c      	ldr	r3, [pc, #432]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	4968      	ldr	r1, [pc, #416]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	604b      	str	r3, [r1, #4]
 8004fa6:	e025      	b.n	8004ff4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004fa8:	4b66      	ldr	r3, [pc, #408]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a65      	ldr	r2, [pc, #404]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8004fae:	f043 0308 	orr.w	r3, r3, #8
 8004fb2:	6013      	str	r3, [r2, #0]
 8004fb4:	4b63      	ldr	r3, [pc, #396]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
 8004fc0:	4960      	ldr	r1, [pc, #384]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fc6:	4b5f      	ldr	r3, [pc, #380]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	021b      	lsls	r3, r3, #8
 8004fd4:	495b      	ldr	r1, [pc, #364]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d109      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fd03 	bl	80059f0 <RCC_SetFlashLatencyFromMSIRange>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e351      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ff4:	f000 fc38 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	4b52      	ldr	r3, [pc, #328]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	091b      	lsrs	r3, r3, #4
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	4950      	ldr	r1, [pc, #320]	; (8005148 <HAL_RCC_OscConfig+0x274>)
 8005006:	5ccb      	ldrb	r3, [r1, r3]
 8005008:	f003 031f 	and.w	r3, r3, #31
 800500c:	fa22 f303 	lsr.w	r3, r2, r3
 8005010:	4a4e      	ldr	r2, [pc, #312]	; (800514c <HAL_RCC_OscConfig+0x278>)
 8005012:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005014:	4b4e      	ldr	r3, [pc, #312]	; (8005150 <HAL_RCC_OscConfig+0x27c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	f7fe fca3 	bl	8003964 <HAL_InitTick>
 800501e:	4603      	mov	r3, r0
 8005020:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005022:	7bfb      	ldrb	r3, [r7, #15]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d052      	beq.n	80050ce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005028:	7bfb      	ldrb	r3, [r7, #15]
 800502a:	e335      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d032      	beq.n	800509a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005034:	4b43      	ldr	r3, [pc, #268]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a42      	ldr	r2, [pc, #264]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 800503a:	f043 0301 	orr.w	r3, r3, #1
 800503e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005040:	f7fe fce0 	bl	8003a04 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005048:	f7fe fcdc 	bl	8003a04 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e31e      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800505a:	4b3a      	ldr	r3, [pc, #232]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005066:	4b37      	ldr	r3, [pc, #220]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a36      	ldr	r2, [pc, #216]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 800506c:	f043 0308 	orr.w	r3, r3, #8
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	4b34      	ldr	r3, [pc, #208]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a1b      	ldr	r3, [r3, #32]
 800507e:	4931      	ldr	r1, [pc, #196]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8005080:	4313      	orrs	r3, r2
 8005082:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005084:	4b2f      	ldr	r3, [pc, #188]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	492c      	ldr	r1, [pc, #176]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8005094:	4313      	orrs	r3, r2
 8005096:	604b      	str	r3, [r1, #4]
 8005098:	e01a      	b.n	80050d0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800509a:	4b2a      	ldr	r3, [pc, #168]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a29      	ldr	r2, [pc, #164]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 80050a0:	f023 0301 	bic.w	r3, r3, #1
 80050a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80050a6:	f7fe fcad 	bl	8003a04 <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80050ae:	f7fe fca9 	bl	8003a04 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e2eb      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050c0:	4b20      	ldr	r3, [pc, #128]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0302 	and.w	r3, r3, #2
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1f0      	bne.n	80050ae <HAL_RCC_OscConfig+0x1da>
 80050cc:	e000      	b.n	80050d0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0301 	and.w	r3, r3, #1
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d074      	beq.n	80051c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	2b08      	cmp	r3, #8
 80050e0:	d005      	beq.n	80050ee <HAL_RCC_OscConfig+0x21a>
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	2b0c      	cmp	r3, #12
 80050e6:	d10e      	bne.n	8005106 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	2b03      	cmp	r3, #3
 80050ec:	d10b      	bne.n	8005106 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ee:	4b15      	ldr	r3, [pc, #84]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d064      	beq.n	80051c4 <HAL_RCC_OscConfig+0x2f0>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d160      	bne.n	80051c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e2c8      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800510e:	d106      	bne.n	800511e <HAL_RCC_OscConfig+0x24a>
 8005110:	4b0c      	ldr	r3, [pc, #48]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a0b      	ldr	r2, [pc, #44]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8005116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	e026      	b.n	800516c <HAL_RCC_OscConfig+0x298>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005126:	d115      	bne.n	8005154 <HAL_RCC_OscConfig+0x280>
 8005128:	4b06      	ldr	r3, [pc, #24]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a05      	ldr	r2, [pc, #20]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 800512e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005132:	6013      	str	r3, [r2, #0]
 8005134:	4b03      	ldr	r3, [pc, #12]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a02      	ldr	r2, [pc, #8]	; (8005144 <HAL_RCC_OscConfig+0x270>)
 800513a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	e014      	b.n	800516c <HAL_RCC_OscConfig+0x298>
 8005142:	bf00      	nop
 8005144:	40021000 	.word	0x40021000
 8005148:	08015104 	.word	0x08015104
 800514c:	20001608 	.word	0x20001608
 8005150:	2000160c 	.word	0x2000160c
 8005154:	4ba0      	ldr	r3, [pc, #640]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a9f      	ldr	r2, [pc, #636]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 800515a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800515e:	6013      	str	r3, [r2, #0]
 8005160:	4b9d      	ldr	r3, [pc, #628]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a9c      	ldr	r2, [pc, #624]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 8005166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800516a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d013      	beq.n	800519c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005174:	f7fe fc46 	bl	8003a04 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800517c:	f7fe fc42 	bl	8003a04 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b64      	cmp	r3, #100	; 0x64
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e284      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800518e:	4b92      	ldr	r3, [pc, #584]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0f0      	beq.n	800517c <HAL_RCC_OscConfig+0x2a8>
 800519a:	e014      	b.n	80051c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800519c:	f7fe fc32 	bl	8003a04 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051a4:	f7fe fc2e 	bl	8003a04 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b64      	cmp	r3, #100	; 0x64
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e270      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051b6:	4b88      	ldr	r3, [pc, #544]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1f0      	bne.n	80051a4 <HAL_RCC_OscConfig+0x2d0>
 80051c2:	e000      	b.n	80051c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d060      	beq.n	8005294 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d005      	beq.n	80051e4 <HAL_RCC_OscConfig+0x310>
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	2b0c      	cmp	r3, #12
 80051dc:	d119      	bne.n	8005212 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2b02      	cmp	r3, #2
 80051e2:	d116      	bne.n	8005212 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051e4:	4b7c      	ldr	r3, [pc, #496]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_RCC_OscConfig+0x328>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d101      	bne.n	80051fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e24d      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051fc:	4b76      	ldr	r3, [pc, #472]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	061b      	lsls	r3, r3, #24
 800520a:	4973      	ldr	r1, [pc, #460]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 800520c:	4313      	orrs	r3, r2
 800520e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005210:	e040      	b.n	8005294 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d023      	beq.n	8005262 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800521a:	4b6f      	ldr	r3, [pc, #444]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a6e      	ldr	r2, [pc, #440]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 8005220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005226:	f7fe fbed 	bl	8003a04 <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800522e:	f7fe fbe9 	bl	8003a04 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e22b      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005240:	4b65      	ldr	r3, [pc, #404]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0f0      	beq.n	800522e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800524c:	4b62      	ldr	r3, [pc, #392]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	061b      	lsls	r3, r3, #24
 800525a:	495f      	ldr	r1, [pc, #380]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 800525c:	4313      	orrs	r3, r2
 800525e:	604b      	str	r3, [r1, #4]
 8005260:	e018      	b.n	8005294 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005262:	4b5d      	ldr	r3, [pc, #372]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a5c      	ldr	r2, [pc, #368]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 8005268:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800526c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526e:	f7fe fbc9 	bl	8003a04 <HAL_GetTick>
 8005272:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005274:	e008      	b.n	8005288 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005276:	f7fe fbc5 	bl	8003a04 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	2b02      	cmp	r3, #2
 8005282:	d901      	bls.n	8005288 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005284:	2303      	movs	r3, #3
 8005286:	e207      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005288:	4b53      	ldr	r3, [pc, #332]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1f0      	bne.n	8005276 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d03c      	beq.n	800531a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d01c      	beq.n	80052e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052a8:	4b4b      	ldr	r3, [pc, #300]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 80052aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052ae:	4a4a      	ldr	r2, [pc, #296]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 80052b0:	f043 0301 	orr.w	r3, r3, #1
 80052b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b8:	f7fe fba4 	bl	8003a04 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052c0:	f7fe fba0 	bl	8003a04 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e1e2      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80052d2:	4b41      	ldr	r3, [pc, #260]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 80052d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d0ef      	beq.n	80052c0 <HAL_RCC_OscConfig+0x3ec>
 80052e0:	e01b      	b.n	800531a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052e2:	4b3d      	ldr	r3, [pc, #244]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 80052e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052e8:	4a3b      	ldr	r2, [pc, #236]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 80052ea:	f023 0301 	bic.w	r3, r3, #1
 80052ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f2:	f7fe fb87 	bl	8003a04 <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80052f8:	e008      	b.n	800530c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052fa:	f7fe fb83 	bl	8003a04 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e1c5      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800530c:	4b32      	ldr	r3, [pc, #200]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 800530e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1ef      	bne.n	80052fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	2b00      	cmp	r3, #0
 8005324:	f000 80a6 	beq.w	8005474 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005328:	2300      	movs	r3, #0
 800532a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800532c:	4b2a      	ldr	r3, [pc, #168]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 800532e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10d      	bne.n	8005354 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005338:	4b27      	ldr	r3, [pc, #156]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 800533a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533c:	4a26      	ldr	r2, [pc, #152]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 800533e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005342:	6593      	str	r3, [r2, #88]	; 0x58
 8005344:	4b24      	ldr	r3, [pc, #144]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 8005346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005348:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800534c:	60bb      	str	r3, [r7, #8]
 800534e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005350:	2301      	movs	r3, #1
 8005352:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005354:	4b21      	ldr	r3, [pc, #132]	; (80053dc <HAL_RCC_OscConfig+0x508>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535c:	2b00      	cmp	r3, #0
 800535e:	d118      	bne.n	8005392 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005360:	4b1e      	ldr	r3, [pc, #120]	; (80053dc <HAL_RCC_OscConfig+0x508>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a1d      	ldr	r2, [pc, #116]	; (80053dc <HAL_RCC_OscConfig+0x508>)
 8005366:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800536a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800536c:	f7fe fb4a 	bl	8003a04 <HAL_GetTick>
 8005370:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005372:	e008      	b.n	8005386 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005374:	f7fe fb46 	bl	8003a04 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	2b02      	cmp	r3, #2
 8005380:	d901      	bls.n	8005386 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005382:	2303      	movs	r3, #3
 8005384:	e188      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005386:	4b15      	ldr	r3, [pc, #84]	; (80053dc <HAL_RCC_OscConfig+0x508>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538e:	2b00      	cmp	r3, #0
 8005390:	d0f0      	beq.n	8005374 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	2b01      	cmp	r3, #1
 8005398:	d108      	bne.n	80053ac <HAL_RCC_OscConfig+0x4d8>
 800539a:	4b0f      	ldr	r3, [pc, #60]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 800539c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053a0:	4a0d      	ldr	r2, [pc, #52]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 80053a2:	f043 0301 	orr.w	r3, r3, #1
 80053a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053aa:	e029      	b.n	8005400 <HAL_RCC_OscConfig+0x52c>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2b05      	cmp	r3, #5
 80053b2:	d115      	bne.n	80053e0 <HAL_RCC_OscConfig+0x50c>
 80053b4:	4b08      	ldr	r3, [pc, #32]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 80053b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ba:	4a07      	ldr	r2, [pc, #28]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 80053bc:	f043 0304 	orr.w	r3, r3, #4
 80053c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053c4:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 80053c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ca:	4a03      	ldr	r2, [pc, #12]	; (80053d8 <HAL_RCC_OscConfig+0x504>)
 80053cc:	f043 0301 	orr.w	r3, r3, #1
 80053d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053d4:	e014      	b.n	8005400 <HAL_RCC_OscConfig+0x52c>
 80053d6:	bf00      	nop
 80053d8:	40021000 	.word	0x40021000
 80053dc:	40007000 	.word	0x40007000
 80053e0:	4b91      	ldr	r3, [pc, #580]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 80053e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e6:	4a90      	ldr	r2, [pc, #576]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 80053e8:	f023 0301 	bic.w	r3, r3, #1
 80053ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80053f0:	4b8d      	ldr	r3, [pc, #564]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 80053f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f6:	4a8c      	ldr	r2, [pc, #560]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 80053f8:	f023 0304 	bic.w	r3, r3, #4
 80053fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d016      	beq.n	8005436 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005408:	f7fe fafc 	bl	8003a04 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800540e:	e00a      	b.n	8005426 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005410:	f7fe faf8 	bl	8003a04 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	f241 3288 	movw	r2, #5000	; 0x1388
 800541e:	4293      	cmp	r3, r2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e138      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005426:	4b80      	ldr	r3, [pc, #512]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 8005428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542c:	f003 0302 	and.w	r3, r3, #2
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0ed      	beq.n	8005410 <HAL_RCC_OscConfig+0x53c>
 8005434:	e015      	b.n	8005462 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005436:	f7fe fae5 	bl	8003a04 <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800543c:	e00a      	b.n	8005454 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543e:	f7fe fae1 	bl	8003a04 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	f241 3288 	movw	r2, #5000	; 0x1388
 800544c:	4293      	cmp	r3, r2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e121      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005454:	4b74      	ldr	r3, [pc, #464]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 8005456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1ed      	bne.n	800543e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005462:	7ffb      	ldrb	r3, [r7, #31]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d105      	bne.n	8005474 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005468:	4b6f      	ldr	r3, [pc, #444]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 800546a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800546c:	4a6e      	ldr	r2, [pc, #440]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 800546e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005472:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005478:	2b00      	cmp	r3, #0
 800547a:	f000 810c 	beq.w	8005696 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005482:	2b02      	cmp	r3, #2
 8005484:	f040 80d4 	bne.w	8005630 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005488:	4b67      	ldr	r3, [pc, #412]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f003 0203 	and.w	r2, r3, #3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005498:	429a      	cmp	r2, r3
 800549a:	d130      	bne.n	80054fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a6:	3b01      	subs	r3, #1
 80054a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80054aa:	429a      	cmp	r2, r3
 80054ac:	d127      	bne.n	80054fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d11f      	bne.n	80054fe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80054c8:	2a07      	cmp	r2, #7
 80054ca:	bf14      	ite	ne
 80054cc:	2201      	movne	r2, #1
 80054ce:	2200      	moveq	r2, #0
 80054d0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d113      	bne.n	80054fe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054e0:	085b      	lsrs	r3, r3, #1
 80054e2:	3b01      	subs	r3, #1
 80054e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d109      	bne.n	80054fe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f4:	085b      	lsrs	r3, r3, #1
 80054f6:	3b01      	subs	r3, #1
 80054f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d06e      	beq.n	80055dc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	2b0c      	cmp	r3, #12
 8005502:	d069      	beq.n	80055d8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005504:	4b48      	ldr	r3, [pc, #288]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d105      	bne.n	800551c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005510:	4b45      	ldr	r3, [pc, #276]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d001      	beq.n	8005520 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e0bb      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005520:	4b41      	ldr	r3, [pc, #260]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a40      	ldr	r2, [pc, #256]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 8005526:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800552a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800552c:	f7fe fa6a 	bl	8003a04 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005532:	e008      	b.n	8005546 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005534:	f7fe fa66 	bl	8003a04 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d901      	bls.n	8005546 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e0a8      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005546:	4b38      	ldr	r3, [pc, #224]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1f0      	bne.n	8005534 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005552:	4b35      	ldr	r3, [pc, #212]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	4b35      	ldr	r3, [pc, #212]	; (800562c <HAL_RCC_OscConfig+0x758>)
 8005558:	4013      	ands	r3, r2
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005562:	3a01      	subs	r2, #1
 8005564:	0112      	lsls	r2, r2, #4
 8005566:	4311      	orrs	r1, r2
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800556c:	0212      	lsls	r2, r2, #8
 800556e:	4311      	orrs	r1, r2
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005574:	0852      	lsrs	r2, r2, #1
 8005576:	3a01      	subs	r2, #1
 8005578:	0552      	lsls	r2, r2, #21
 800557a:	4311      	orrs	r1, r2
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005580:	0852      	lsrs	r2, r2, #1
 8005582:	3a01      	subs	r2, #1
 8005584:	0652      	lsls	r2, r2, #25
 8005586:	4311      	orrs	r1, r2
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800558c:	0912      	lsrs	r2, r2, #4
 800558e:	0452      	lsls	r2, r2, #17
 8005590:	430a      	orrs	r2, r1
 8005592:	4925      	ldr	r1, [pc, #148]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 8005594:	4313      	orrs	r3, r2
 8005596:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005598:	4b23      	ldr	r3, [pc, #140]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a22      	ldr	r2, [pc, #136]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 800559e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055a2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055a4:	4b20      	ldr	r3, [pc, #128]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	4a1f      	ldr	r2, [pc, #124]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 80055aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055ae:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80055b0:	f7fe fa28 	bl	8003a04 <HAL_GetTick>
 80055b4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055b6:	e008      	b.n	80055ca <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b8:	f7fe fa24 	bl	8003a04 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	2b02      	cmp	r3, #2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e066      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055ca:	4b17      	ldr	r3, [pc, #92]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d0f0      	beq.n	80055b8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80055d6:	e05e      	b.n	8005696 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e05d      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055dc:	4b12      	ldr	r3, [pc, #72]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d156      	bne.n	8005696 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80055e8:	4b0f      	ldr	r3, [pc, #60]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a0e      	ldr	r2, [pc, #56]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 80055ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055f2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055f4:	4b0c      	ldr	r3, [pc, #48]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	4a0b      	ldr	r2, [pc, #44]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 80055fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055fe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005600:	f7fe fa00 	bl	8003a04 <HAL_GetTick>
 8005604:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005606:	e008      	b.n	800561a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005608:	f7fe f9fc 	bl	8003a04 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e03e      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800561a:	4b03      	ldr	r3, [pc, #12]	; (8005628 <HAL_RCC_OscConfig+0x754>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005622:	2b00      	cmp	r3, #0
 8005624:	d0f0      	beq.n	8005608 <HAL_RCC_OscConfig+0x734>
 8005626:	e036      	b.n	8005696 <HAL_RCC_OscConfig+0x7c2>
 8005628:	40021000 	.word	0x40021000
 800562c:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005630:	69bb      	ldr	r3, [r7, #24]
 8005632:	2b0c      	cmp	r3, #12
 8005634:	d02d      	beq.n	8005692 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005636:	4b1a      	ldr	r3, [pc, #104]	; (80056a0 <HAL_RCC_OscConfig+0x7cc>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a19      	ldr	r2, [pc, #100]	; (80056a0 <HAL_RCC_OscConfig+0x7cc>)
 800563c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005640:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005642:	4b17      	ldr	r3, [pc, #92]	; (80056a0 <HAL_RCC_OscConfig+0x7cc>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d105      	bne.n	800565a <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800564e:	4b14      	ldr	r3, [pc, #80]	; (80056a0 <HAL_RCC_OscConfig+0x7cc>)
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	4a13      	ldr	r2, [pc, #76]	; (80056a0 <HAL_RCC_OscConfig+0x7cc>)
 8005654:	f023 0303 	bic.w	r3, r3, #3
 8005658:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800565a:	4b11      	ldr	r3, [pc, #68]	; (80056a0 <HAL_RCC_OscConfig+0x7cc>)
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	4a10      	ldr	r2, [pc, #64]	; (80056a0 <HAL_RCC_OscConfig+0x7cc>)
 8005660:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005668:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800566a:	f7fe f9cb 	bl	8003a04 <HAL_GetTick>
 800566e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005670:	e008      	b.n	8005684 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005672:	f7fe f9c7 	bl	8003a04 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d901      	bls.n	8005684 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e009      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005684:	4b06      	ldr	r3, [pc, #24]	; (80056a0 <HAL_RCC_OscConfig+0x7cc>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1f0      	bne.n	8005672 <HAL_RCC_OscConfig+0x79e>
 8005690:	e001      	b.n	8005696 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e000      	b.n	8005698 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3720      	adds	r7, #32
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40021000 	.word	0x40021000

080056a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d101      	bne.n	80056b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e0c8      	b.n	800584a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056b8:	4b66      	ldr	r3, [pc, #408]	; (8005854 <HAL_RCC_ClockConfig+0x1b0>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	683a      	ldr	r2, [r7, #0]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d910      	bls.n	80056e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056c6:	4b63      	ldr	r3, [pc, #396]	; (8005854 <HAL_RCC_ClockConfig+0x1b0>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f023 0207 	bic.w	r2, r3, #7
 80056ce:	4961      	ldr	r1, [pc, #388]	; (8005854 <HAL_RCC_ClockConfig+0x1b0>)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056d6:	4b5f      	ldr	r3, [pc, #380]	; (8005854 <HAL_RCC_ClockConfig+0x1b0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d001      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e0b0      	b.n	800584a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d04c      	beq.n	800578e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b03      	cmp	r3, #3
 80056fa:	d107      	bne.n	800570c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80056fc:	4b56      	ldr	r3, [pc, #344]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d121      	bne.n	800574c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e09e      	b.n	800584a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2b02      	cmp	r3, #2
 8005712:	d107      	bne.n	8005724 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005714:	4b50      	ldr	r3, [pc, #320]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d115      	bne.n	800574c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e092      	b.n	800584a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d107      	bne.n	800573c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800572c:	4b4a      	ldr	r3, [pc, #296]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d109      	bne.n	800574c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e086      	b.n	800584a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800573c:	4b46      	ldr	r3, [pc, #280]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e07e      	b.n	800584a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800574c:	4b42      	ldr	r3, [pc, #264]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f023 0203 	bic.w	r2, r3, #3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	493f      	ldr	r1, [pc, #252]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 800575a:	4313      	orrs	r3, r2
 800575c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800575e:	f7fe f951 	bl	8003a04 <HAL_GetTick>
 8005762:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005764:	e00a      	b.n	800577c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005766:	f7fe f94d 	bl	8003a04 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	f241 3288 	movw	r2, #5000	; 0x1388
 8005774:	4293      	cmp	r3, r2
 8005776:	d901      	bls.n	800577c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e066      	b.n	800584a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800577c:	4b36      	ldr	r3, [pc, #216]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	f003 020c 	and.w	r2, r3, #12
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	429a      	cmp	r2, r3
 800578c:	d1eb      	bne.n	8005766 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b00      	cmp	r3, #0
 8005798:	d008      	beq.n	80057ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800579a:	4b2f      	ldr	r3, [pc, #188]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	492c      	ldr	r1, [pc, #176]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80057ac:	4b29      	ldr	r3, [pc, #164]	; (8005854 <HAL_RCC_ClockConfig+0x1b0>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d210      	bcs.n	80057dc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80057ba:	4b26      	ldr	r3, [pc, #152]	; (8005854 <HAL_RCC_ClockConfig+0x1b0>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f023 0207 	bic.w	r2, r3, #7
 80057c2:	4924      	ldr	r1, [pc, #144]	; (8005854 <HAL_RCC_ClockConfig+0x1b0>)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ca:	4b22      	ldr	r3, [pc, #136]	; (8005854 <HAL_RCC_ClockConfig+0x1b0>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0307 	and.w	r3, r3, #7
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d001      	beq.n	80057dc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	e036      	b.n	800584a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d008      	beq.n	80057fa <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057e8:	4b1b      	ldr	r3, [pc, #108]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	4918      	ldr	r1, [pc, #96]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0308 	and.w	r3, r3, #8
 8005802:	2b00      	cmp	r3, #0
 8005804:	d009      	beq.n	800581a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005806:	4b14      	ldr	r3, [pc, #80]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	4910      	ldr	r1, [pc, #64]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 8005816:	4313      	orrs	r3, r2
 8005818:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800581a:	f000 f825 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 800581e:	4602      	mov	r2, r0
 8005820:	4b0d      	ldr	r3, [pc, #52]	; (8005858 <HAL_RCC_ClockConfig+0x1b4>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	091b      	lsrs	r3, r3, #4
 8005826:	f003 030f 	and.w	r3, r3, #15
 800582a:	490c      	ldr	r1, [pc, #48]	; (800585c <HAL_RCC_ClockConfig+0x1b8>)
 800582c:	5ccb      	ldrb	r3, [r1, r3]
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	fa22 f303 	lsr.w	r3, r2, r3
 8005836:	4a0a      	ldr	r2, [pc, #40]	; (8005860 <HAL_RCC_ClockConfig+0x1bc>)
 8005838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800583a:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <HAL_RCC_ClockConfig+0x1c0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f7fe f890 	bl	8003964 <HAL_InitTick>
 8005844:	4603      	mov	r3, r0
 8005846:	72fb      	strb	r3, [r7, #11]

  return status;
 8005848:	7afb      	ldrb	r3, [r7, #11]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
 8005852:	bf00      	nop
 8005854:	40022000 	.word	0x40022000
 8005858:	40021000 	.word	0x40021000
 800585c:	08015104 	.word	0x08015104
 8005860:	20001608 	.word	0x20001608
 8005864:	2000160c 	.word	0x2000160c

08005868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005868:	b480      	push	{r7}
 800586a:	b089      	sub	sp, #36	; 0x24
 800586c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800586e:	2300      	movs	r3, #0
 8005870:	61fb      	str	r3, [r7, #28]
 8005872:	2300      	movs	r3, #0
 8005874:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005876:	4b3e      	ldr	r3, [pc, #248]	; (8005970 <HAL_RCC_GetSysClockFreq+0x108>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 030c 	and.w	r3, r3, #12
 800587e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005880:	4b3b      	ldr	r3, [pc, #236]	; (8005970 <HAL_RCC_GetSysClockFreq+0x108>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f003 0303 	and.w	r3, r3, #3
 8005888:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <HAL_RCC_GetSysClockFreq+0x34>
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	2b0c      	cmp	r3, #12
 8005894:	d121      	bne.n	80058da <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d11e      	bne.n	80058da <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800589c:	4b34      	ldr	r3, [pc, #208]	; (8005970 <HAL_RCC_GetSysClockFreq+0x108>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d107      	bne.n	80058b8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80058a8:	4b31      	ldr	r3, [pc, #196]	; (8005970 <HAL_RCC_GetSysClockFreq+0x108>)
 80058aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058ae:	0a1b      	lsrs	r3, r3, #8
 80058b0:	f003 030f 	and.w	r3, r3, #15
 80058b4:	61fb      	str	r3, [r7, #28]
 80058b6:	e005      	b.n	80058c4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80058b8:	4b2d      	ldr	r3, [pc, #180]	; (8005970 <HAL_RCC_GetSysClockFreq+0x108>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	091b      	lsrs	r3, r3, #4
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80058c4:	4a2b      	ldr	r2, [pc, #172]	; (8005974 <HAL_RCC_GetSysClockFreq+0x10c>)
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058cc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d10d      	bne.n	80058f0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80058d8:	e00a      	b.n	80058f0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b04      	cmp	r3, #4
 80058de:	d102      	bne.n	80058e6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80058e0:	4b25      	ldr	r3, [pc, #148]	; (8005978 <HAL_RCC_GetSysClockFreq+0x110>)
 80058e2:	61bb      	str	r3, [r7, #24]
 80058e4:	e004      	b.n	80058f0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d101      	bne.n	80058f0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058ec:	4b23      	ldr	r3, [pc, #140]	; (800597c <HAL_RCC_GetSysClockFreq+0x114>)
 80058ee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	2b0c      	cmp	r3, #12
 80058f4:	d134      	bne.n	8005960 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058f6:	4b1e      	ldr	r3, [pc, #120]	; (8005970 <HAL_RCC_GetSysClockFreq+0x108>)
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f003 0303 	and.w	r3, r3, #3
 80058fe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	2b02      	cmp	r3, #2
 8005904:	d003      	beq.n	800590e <HAL_RCC_GetSysClockFreq+0xa6>
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b03      	cmp	r3, #3
 800590a:	d003      	beq.n	8005914 <HAL_RCC_GetSysClockFreq+0xac>
 800590c:	e005      	b.n	800591a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800590e:	4b1a      	ldr	r3, [pc, #104]	; (8005978 <HAL_RCC_GetSysClockFreq+0x110>)
 8005910:	617b      	str	r3, [r7, #20]
      break;
 8005912:	e005      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005914:	4b19      	ldr	r3, [pc, #100]	; (800597c <HAL_RCC_GetSysClockFreq+0x114>)
 8005916:	617b      	str	r3, [r7, #20]
      break;
 8005918:	e002      	b.n	8005920 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	617b      	str	r3, [r7, #20]
      break;
 800591e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005920:	4b13      	ldr	r3, [pc, #76]	; (8005970 <HAL_RCC_GetSysClockFreq+0x108>)
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	091b      	lsrs	r3, r3, #4
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	3301      	adds	r3, #1
 800592c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800592e:	4b10      	ldr	r3, [pc, #64]	; (8005970 <HAL_RCC_GetSysClockFreq+0x108>)
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	0a1b      	lsrs	r3, r3, #8
 8005934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	fb03 f202 	mul.w	r2, r3, r2
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	fbb2 f3f3 	udiv	r3, r2, r3
 8005944:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005946:	4b0a      	ldr	r3, [pc, #40]	; (8005970 <HAL_RCC_GetSysClockFreq+0x108>)
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	0e5b      	lsrs	r3, r3, #25
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	3301      	adds	r3, #1
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	fbb2 f3f3 	udiv	r3, r2, r3
 800595e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005960:	69bb      	ldr	r3, [r7, #24]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3724      	adds	r7, #36	; 0x24
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	40021000 	.word	0x40021000
 8005974:	0801511c 	.word	0x0801511c
 8005978:	00f42400 	.word	0x00f42400
 800597c:	007a1200 	.word	0x007a1200

08005980 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005980:	b480      	push	{r7}
 8005982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005984:	4b03      	ldr	r3, [pc, #12]	; (8005994 <HAL_RCC_GetHCLKFreq+0x14>)
 8005986:	681b      	ldr	r3, [r3, #0]
}
 8005988:	4618      	mov	r0, r3
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	20001608 	.word	0x20001608

08005998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800599c:	f7ff fff0 	bl	8005980 <HAL_RCC_GetHCLKFreq>
 80059a0:	4602      	mov	r2, r0
 80059a2:	4b06      	ldr	r3, [pc, #24]	; (80059bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	0a1b      	lsrs	r3, r3, #8
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	4904      	ldr	r1, [pc, #16]	; (80059c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80059ae:	5ccb      	ldrb	r3, [r1, r3]
 80059b0:	f003 031f 	and.w	r3, r3, #31
 80059b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	40021000 	.word	0x40021000
 80059c0:	08015114 	.word	0x08015114

080059c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80059c8:	f7ff ffda 	bl	8005980 <HAL_RCC_GetHCLKFreq>
 80059cc:	4602      	mov	r2, r0
 80059ce:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	0adb      	lsrs	r3, r3, #11
 80059d4:	f003 0307 	and.w	r3, r3, #7
 80059d8:	4904      	ldr	r1, [pc, #16]	; (80059ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80059da:	5ccb      	ldrb	r3, [r1, r3]
 80059dc:	f003 031f 	and.w	r3, r3, #31
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40021000 	.word	0x40021000
 80059ec:	08015114 	.word	0x08015114

080059f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80059f8:	2300      	movs	r3, #0
 80059fa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80059fc:	4b2a      	ldr	r3, [pc, #168]	; (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80059fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005a08:	f7ff fa00 	bl	8004e0c <HAL_PWREx_GetVoltageRange>
 8005a0c:	6178      	str	r0, [r7, #20]
 8005a0e:	e014      	b.n	8005a3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a10:	4b25      	ldr	r3, [pc, #148]	; (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a14:	4a24      	ldr	r2, [pc, #144]	; (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a1a:	6593      	str	r3, [r2, #88]	; 0x58
 8005a1c:	4b22      	ldr	r3, [pc, #136]	; (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005a28:	f7ff f9f0 	bl	8004e0c <HAL_PWREx_GetVoltageRange>
 8005a2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005a2e:	4b1e      	ldr	r3, [pc, #120]	; (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a32:	4a1d      	ldr	r2, [pc, #116]	; (8005aa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a40:	d10b      	bne.n	8005a5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b80      	cmp	r3, #128	; 0x80
 8005a46:	d919      	bls.n	8005a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2ba0      	cmp	r3, #160	; 0xa0
 8005a4c:	d902      	bls.n	8005a54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a4e:	2302      	movs	r3, #2
 8005a50:	613b      	str	r3, [r7, #16]
 8005a52:	e013      	b.n	8005a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a54:	2301      	movs	r3, #1
 8005a56:	613b      	str	r3, [r7, #16]
 8005a58:	e010      	b.n	8005a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2b80      	cmp	r3, #128	; 0x80
 8005a5e:	d902      	bls.n	8005a66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005a60:	2303      	movs	r3, #3
 8005a62:	613b      	str	r3, [r7, #16]
 8005a64:	e00a      	b.n	8005a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2b80      	cmp	r3, #128	; 0x80
 8005a6a:	d102      	bne.n	8005a72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	613b      	str	r3, [r7, #16]
 8005a70:	e004      	b.n	8005a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b70      	cmp	r3, #112	; 0x70
 8005a76:	d101      	bne.n	8005a7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005a78:	2301      	movs	r3, #1
 8005a7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005a7c:	4b0b      	ldr	r3, [pc, #44]	; (8005aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f023 0207 	bic.w	r2, r3, #7
 8005a84:	4909      	ldr	r1, [pc, #36]	; (8005aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005a8c:	4b07      	ldr	r3, [pc, #28]	; (8005aac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0307 	and.w	r3, r3, #7
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d001      	beq.n	8005a9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e000      	b.n	8005aa0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40021000 	.word	0x40021000
 8005aac:	40022000 	.word	0x40022000

08005ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ab8:	2300      	movs	r3, #0
 8005aba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005abc:	2300      	movs	r3, #0
 8005abe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d041      	beq.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ad0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ad4:	d02a      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005ad6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ada:	d824      	bhi.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005adc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ae0:	d008      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ae2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ae6:	d81e      	bhi.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00a      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005aec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005af0:	d010      	beq.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005af2:	e018      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005af4:	4b86      	ldr	r3, [pc, #536]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	4a85      	ldr	r2, [pc, #532]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005afe:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b00:	e015      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3304      	adds	r3, #4
 8005b06:	2100      	movs	r1, #0
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f000 fabb 	bl	8006084 <RCCEx_PLLSAI1_Config>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b12:	e00c      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3320      	adds	r3, #32
 8005b18:	2100      	movs	r1, #0
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f000 fba6 	bl	800626c <RCCEx_PLLSAI2_Config>
 8005b20:	4603      	mov	r3, r0
 8005b22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005b24:	e003      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	74fb      	strb	r3, [r7, #19]
      break;
 8005b2a:	e000      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005b2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b2e:	7cfb      	ldrb	r3, [r7, #19]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10b      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b34:	4b76      	ldr	r3, [pc, #472]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b42:	4973      	ldr	r1, [pc, #460]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005b4a:	e001      	b.n	8005b50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4c:	7cfb      	ldrb	r3, [r7, #19]
 8005b4e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d041      	beq.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b60:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b64:	d02a      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005b66:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005b6a:	d824      	bhi.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b70:	d008      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005b72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005b76:	d81e      	bhi.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00a      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005b7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b80:	d010      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005b82:	e018      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b84:	4b62      	ldr	r3, [pc, #392]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	4a61      	ldr	r2, [pc, #388]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b8e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b90:	e015      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3304      	adds	r3, #4
 8005b96:	2100      	movs	r1, #0
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f000 fa73 	bl	8006084 <RCCEx_PLLSAI1_Config>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ba2:	e00c      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	3320      	adds	r3, #32
 8005ba8:	2100      	movs	r1, #0
 8005baa:	4618      	mov	r0, r3
 8005bac:	f000 fb5e 	bl	800626c <RCCEx_PLLSAI2_Config>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005bb4:	e003      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	74fb      	strb	r3, [r7, #19]
      break;
 8005bba:	e000      	b.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005bbc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005bbe:	7cfb      	ldrb	r3, [r7, #19]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10b      	bne.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005bc4:	4b52      	ldr	r3, [pc, #328]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bd2:	494f      	ldr	r1, [pc, #316]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005bda:	e001      	b.n	8005be0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bdc:	7cfb      	ldrb	r3, [r7, #19]
 8005bde:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 80a0 	beq.w	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005bf2:	4b47      	ldr	r3, [pc, #284]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e000      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005c02:	2300      	movs	r3, #0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00d      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c08:	4b41      	ldr	r3, [pc, #260]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c0c:	4a40      	ldr	r2, [pc, #256]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c12:	6593      	str	r3, [r2, #88]	; 0x58
 8005c14:	4b3e      	ldr	r3, [pc, #248]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1c:	60bb      	str	r3, [r7, #8]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c20:	2301      	movs	r3, #1
 8005c22:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c24:	4b3b      	ldr	r3, [pc, #236]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a3a      	ldr	r2, [pc, #232]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c30:	f7fd fee8 	bl	8003a04 <HAL_GetTick>
 8005c34:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c36:	e009      	b.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c38:	f7fd fee4 	bl	8003a04 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d902      	bls.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	74fb      	strb	r3, [r7, #19]
        break;
 8005c4a:	e005      	b.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005c4c:	4b31      	ldr	r3, [pc, #196]	; (8005d14 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0ef      	beq.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005c58:	7cfb      	ldrb	r3, [r7, #19]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d15c      	bne.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005c5e:	4b2c      	ldr	r3, [pc, #176]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c68:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d01f      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d019      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005c7c:	4b24      	ldr	r3, [pc, #144]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c88:	4b21      	ldr	r3, [pc, #132]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c8e:	4a20      	ldr	r2, [pc, #128]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005c98:	4b1d      	ldr	r3, [pc, #116]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c9e:	4a1c      	ldr	r2, [pc, #112]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ca0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ca8:	4a19      	ldr	r2, [pc, #100]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d016      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cba:	f7fd fea3 	bl	8003a04 <HAL_GetTick>
 8005cbe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cc0:	e00b      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cc2:	f7fd fe9f 	bl	8003a04 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d902      	bls.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	74fb      	strb	r3, [r7, #19]
            break;
 8005cd8:	e006      	b.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005cda:	4b0d      	ldr	r3, [pc, #52]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ce0:	f003 0302 	and.w	r3, r3, #2
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d0ec      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005ce8:	7cfb      	ldrb	r3, [r7, #19]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10c      	bne.n	8005d08 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cee:	4b08      	ldr	r3, [pc, #32]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cf4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cfe:	4904      	ldr	r1, [pc, #16]	; (8005d10 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005d06:	e009      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d08:	7cfb      	ldrb	r3, [r7, #19]
 8005d0a:	74bb      	strb	r3, [r7, #18]
 8005d0c:	e006      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005d0e:	bf00      	nop
 8005d10:	40021000 	.word	0x40021000
 8005d14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d18:	7cfb      	ldrb	r3, [r7, #19]
 8005d1a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d1c:	7c7b      	ldrb	r3, [r7, #17]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d105      	bne.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d22:	4b9e      	ldr	r3, [pc, #632]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d26:	4a9d      	ldr	r2, [pc, #628]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0301 	and.w	r3, r3, #1
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00a      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d3a:	4b98      	ldr	r3, [pc, #608]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d40:	f023 0203 	bic.w	r2, r3, #3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d48:	4994      	ldr	r1, [pc, #592]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0302 	and.w	r3, r3, #2
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00a      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d5c:	4b8f      	ldr	r3, [pc, #572]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d62:	f023 020c 	bic.w	r2, r3, #12
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6a:	498c      	ldr	r1, [pc, #560]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0304 	and.w	r3, r3, #4
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00a      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d7e:	4b87      	ldr	r3, [pc, #540]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d84:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8c:	4983      	ldr	r1, [pc, #524]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 0308 	and.w	r3, r3, #8
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d00a      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005da0:	4b7e      	ldr	r3, [pc, #504]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dae:	497b      	ldr	r1, [pc, #492]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f003 0310 	and.w	r3, r3, #16
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00a      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005dc2:	4b76      	ldr	r3, [pc, #472]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dd0:	4972      	ldr	r1, [pc, #456]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0320 	and.w	r3, r3, #32
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00a      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005de4:	4b6d      	ldr	r3, [pc, #436]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df2:	496a      	ldr	r1, [pc, #424]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e06:	4b65      	ldr	r3, [pc, #404]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e14:	4961      	ldr	r1, [pc, #388]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00a      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e28:	4b5c      	ldr	r3, [pc, #368]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e36:	4959      	ldr	r1, [pc, #356]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005e4a:	4b54      	ldr	r3, [pc, #336]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e58:	4950      	ldr	r1, [pc, #320]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005e6c:	4b4b      	ldr	r3, [pc, #300]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7a:	4948      	ldr	r1, [pc, #288]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005e8e:	4b43      	ldr	r3, [pc, #268]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e9c:	493f      	ldr	r1, [pc, #252]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d028      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005eb0:	4b3a      	ldr	r3, [pc, #232]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ebe:	4937      	ldr	r1, [pc, #220]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ece:	d106      	bne.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ed0:	4b32      	ldr	r3, [pc, #200]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	4a31      	ldr	r2, [pc, #196]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005eda:	60d3      	str	r3, [r2, #12]
 8005edc:	e011      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ee2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ee6:	d10c      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	3304      	adds	r3, #4
 8005eec:	2101      	movs	r1, #1
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f000 f8c8 	bl	8006084 <RCCEx_PLLSAI1_Config>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ef8:	7cfb      	ldrb	r3, [r7, #19]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005efe:	7cfb      	ldrb	r3, [r7, #19]
 8005f00:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d028      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005f0e:	4b23      	ldr	r3, [pc, #140]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f14:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1c:	491f      	ldr	r1, [pc, #124]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f2c:	d106      	bne.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f2e:	4b1b      	ldr	r3, [pc, #108]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	4a1a      	ldr	r2, [pc, #104]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f38:	60d3      	str	r3, [r2, #12]
 8005f3a:	e011      	b.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f40:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f44:	d10c      	bne.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	3304      	adds	r3, #4
 8005f4a:	2101      	movs	r1, #1
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 f899 	bl	8006084 <RCCEx_PLLSAI1_Config>
 8005f52:	4603      	mov	r3, r0
 8005f54:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f56:	7cfb      	ldrb	r3, [r7, #19]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005f5c:	7cfb      	ldrb	r3, [r7, #19]
 8005f5e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d02b      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f6c:	4b0b      	ldr	r3, [pc, #44]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f7a:	4908      	ldr	r1, [pc, #32]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f8a:	d109      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f8c:	4b03      	ldr	r3, [pc, #12]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	4a02      	ldr	r2, [pc, #8]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005f92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f96:	60d3      	str	r3, [r2, #12]
 8005f98:	e014      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005f9a:	bf00      	nop
 8005f9c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005fa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fa8:	d10c      	bne.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	3304      	adds	r3, #4
 8005fae:	2101      	movs	r1, #1
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 f867 	bl	8006084 <RCCEx_PLLSAI1_Config>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fba:	7cfb      	ldrb	r3, [r7, #19]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005fc0:	7cfb      	ldrb	r3, [r7, #19]
 8005fc2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d02f      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005fd0:	4b2b      	ldr	r3, [pc, #172]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fde:	4928      	ldr	r1, [pc, #160]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fee:	d10d      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	2102      	movs	r1, #2
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 f844 	bl	8006084 <RCCEx_PLLSAI1_Config>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006000:	7cfb      	ldrb	r3, [r7, #19]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d014      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006006:	7cfb      	ldrb	r3, [r7, #19]
 8006008:	74bb      	strb	r3, [r7, #18]
 800600a:	e011      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006014:	d10c      	bne.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3320      	adds	r3, #32
 800601a:	2102      	movs	r1, #2
 800601c:	4618      	mov	r0, r3
 800601e:	f000 f925 	bl	800626c <RCCEx_PLLSAI2_Config>
 8006022:	4603      	mov	r3, r0
 8006024:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006026:	7cfb      	ldrb	r3, [r7, #19]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800602c:	7cfb      	ldrb	r3, [r7, #19]
 800602e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00a      	beq.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800603c:	4b10      	ldr	r3, [pc, #64]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800603e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006042:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800604a:	490d      	ldr	r1, [pc, #52]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800604c:	4313      	orrs	r3, r2
 800604e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00b      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800605e:	4b08      	ldr	r3, [pc, #32]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006064:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800606e:	4904      	ldr	r1, [pc, #16]	; (8006080 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8006070:	4313      	orrs	r3, r2
 8006072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006076:	7cbb      	ldrb	r3, [r7, #18]
}
 8006078:	4618      	mov	r0, r3
 800607a:	3718      	adds	r7, #24
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40021000 	.word	0x40021000

08006084 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800608e:	2300      	movs	r3, #0
 8006090:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006092:	4b75      	ldr	r3, [pc, #468]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	f003 0303 	and.w	r3, r3, #3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d018      	beq.n	80060d0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800609e:	4b72      	ldr	r3, [pc, #456]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	f003 0203 	and.w	r2, r3, #3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d10d      	bne.n	80060ca <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
       ||
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d009      	beq.n	80060ca <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80060b6:	4b6c      	ldr	r3, [pc, #432]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	091b      	lsrs	r3, r3, #4
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	1c5a      	adds	r2, r3, #1
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
       ||
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d047      	beq.n	800615a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	73fb      	strb	r3, [r7, #15]
 80060ce:	e044      	b.n	800615a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d018      	beq.n	800610a <RCCEx_PLLSAI1_Config+0x86>
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d825      	bhi.n	8006128 <RCCEx_PLLSAI1_Config+0xa4>
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d002      	beq.n	80060e6 <RCCEx_PLLSAI1_Config+0x62>
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	d009      	beq.n	80060f8 <RCCEx_PLLSAI1_Config+0x74>
 80060e4:	e020      	b.n	8006128 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060e6:	4b60      	ldr	r3, [pc, #384]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d11d      	bne.n	800612e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060f6:	e01a      	b.n	800612e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060f8:	4b5b      	ldr	r3, [pc, #364]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006100:	2b00      	cmp	r3, #0
 8006102:	d116      	bne.n	8006132 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006108:	e013      	b.n	8006132 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800610a:	4b57      	ldr	r3, [pc, #348]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10f      	bne.n	8006136 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006116:	4b54      	ldr	r3, [pc, #336]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d109      	bne.n	8006136 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006126:	e006      	b.n	8006136 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	73fb      	strb	r3, [r7, #15]
      break;
 800612c:	e004      	b.n	8006138 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800612e:	bf00      	nop
 8006130:	e002      	b.n	8006138 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006132:	bf00      	nop
 8006134:	e000      	b.n	8006138 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006136:	bf00      	nop
    }

    if(status == HAL_OK)
 8006138:	7bfb      	ldrb	r3, [r7, #15]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10d      	bne.n	800615a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800613e:	4b4a      	ldr	r3, [pc, #296]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6819      	ldr	r1, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	3b01      	subs	r3, #1
 8006150:	011b      	lsls	r3, r3, #4
 8006152:	430b      	orrs	r3, r1
 8006154:	4944      	ldr	r1, [pc, #272]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006156:	4313      	orrs	r3, r2
 8006158:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d17d      	bne.n	800625c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006160:	4b41      	ldr	r3, [pc, #260]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a40      	ldr	r2, [pc, #256]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006166:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800616a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800616c:	f7fd fc4a 	bl	8003a04 <HAL_GetTick>
 8006170:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006172:	e009      	b.n	8006188 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006174:	f7fd fc46 	bl	8003a04 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b02      	cmp	r3, #2
 8006180:	d902      	bls.n	8006188 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	73fb      	strb	r3, [r7, #15]
        break;
 8006186:	e005      	b.n	8006194 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006188:	4b37      	ldr	r3, [pc, #220]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1ef      	bne.n	8006174 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d160      	bne.n	800625c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d111      	bne.n	80061c4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061a0:	4b31      	ldr	r3, [pc, #196]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80061a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6892      	ldr	r2, [r2, #8]
 80061b0:	0211      	lsls	r1, r2, #8
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	68d2      	ldr	r2, [r2, #12]
 80061b6:	0912      	lsrs	r2, r2, #4
 80061b8:	0452      	lsls	r2, r2, #17
 80061ba:	430a      	orrs	r2, r1
 80061bc:	492a      	ldr	r1, [pc, #168]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	610b      	str	r3, [r1, #16]
 80061c2:	e027      	b.n	8006214 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d112      	bne.n	80061f0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061ca:	4b27      	ldr	r3, [pc, #156]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80061d2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6892      	ldr	r2, [r2, #8]
 80061da:	0211      	lsls	r1, r2, #8
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6912      	ldr	r2, [r2, #16]
 80061e0:	0852      	lsrs	r2, r2, #1
 80061e2:	3a01      	subs	r2, #1
 80061e4:	0552      	lsls	r2, r2, #21
 80061e6:	430a      	orrs	r2, r1
 80061e8:	491f      	ldr	r1, [pc, #124]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	610b      	str	r3, [r1, #16]
 80061ee:	e011      	b.n	8006214 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061f0:	4b1d      	ldr	r3, [pc, #116]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80061f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	6892      	ldr	r2, [r2, #8]
 8006200:	0211      	lsls	r1, r2, #8
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	6952      	ldr	r2, [r2, #20]
 8006206:	0852      	lsrs	r2, r2, #1
 8006208:	3a01      	subs	r2, #1
 800620a:	0652      	lsls	r2, r2, #25
 800620c:	430a      	orrs	r2, r1
 800620e:	4916      	ldr	r1, [pc, #88]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006210:	4313      	orrs	r3, r2
 8006212:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006214:	4b14      	ldr	r3, [pc, #80]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a13      	ldr	r2, [pc, #76]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 800621a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800621e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006220:	f7fd fbf0 	bl	8003a04 <HAL_GetTick>
 8006224:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006226:	e009      	b.n	800623c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006228:	f7fd fbec 	bl	8003a04 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d902      	bls.n	800623c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	73fb      	strb	r3, [r7, #15]
          break;
 800623a:	e005      	b.n	8006248 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800623c:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d0ef      	beq.n	8006228 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d106      	bne.n	800625c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800624e:	4b06      	ldr	r3, [pc, #24]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006250:	691a      	ldr	r2, [r3, #16]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	4904      	ldr	r1, [pc, #16]	; (8006268 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006258:	4313      	orrs	r3, r2
 800625a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800625c:	7bfb      	ldrb	r3, [r7, #15]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3710      	adds	r7, #16
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	40021000 	.word	0x40021000

0800626c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800627a:	4b6a      	ldr	r3, [pc, #424]	; (8006424 <RCCEx_PLLSAI2_Config+0x1b8>)
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f003 0303 	and.w	r3, r3, #3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d018      	beq.n	80062b8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006286:	4b67      	ldr	r3, [pc, #412]	; (8006424 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f003 0203 	and.w	r2, r3, #3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	429a      	cmp	r2, r3
 8006294:	d10d      	bne.n	80062b2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
       ||
 800629a:	2b00      	cmp	r3, #0
 800629c:	d009      	beq.n	80062b2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800629e:	4b61      	ldr	r3, [pc, #388]	; (8006424 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	091b      	lsrs	r3, r3, #4
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	685b      	ldr	r3, [r3, #4]
       ||
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d047      	beq.n	8006342 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	73fb      	strb	r3, [r7, #15]
 80062b6:	e044      	b.n	8006342 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b03      	cmp	r3, #3
 80062be:	d018      	beq.n	80062f2 <RCCEx_PLLSAI2_Config+0x86>
 80062c0:	2b03      	cmp	r3, #3
 80062c2:	d825      	bhi.n	8006310 <RCCEx_PLLSAI2_Config+0xa4>
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d002      	beq.n	80062ce <RCCEx_PLLSAI2_Config+0x62>
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d009      	beq.n	80062e0 <RCCEx_PLLSAI2_Config+0x74>
 80062cc:	e020      	b.n	8006310 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062ce:	4b55      	ldr	r3, [pc, #340]	; (8006424 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d11d      	bne.n	8006316 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062de:	e01a      	b.n	8006316 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062e0:	4b50      	ldr	r3, [pc, #320]	; (8006424 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d116      	bne.n	800631a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062f0:	e013      	b.n	800631a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062f2:	4b4c      	ldr	r3, [pc, #304]	; (8006424 <RCCEx_PLLSAI2_Config+0x1b8>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10f      	bne.n	800631e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062fe:	4b49      	ldr	r3, [pc, #292]	; (8006424 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d109      	bne.n	800631e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800630e:	e006      	b.n	800631e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	73fb      	strb	r3, [r7, #15]
      break;
 8006314:	e004      	b.n	8006320 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8006316:	bf00      	nop
 8006318:	e002      	b.n	8006320 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800631a:	bf00      	nop
 800631c:	e000      	b.n	8006320 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800631e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10d      	bne.n	8006342 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006326:	4b3f      	ldr	r3, [pc, #252]	; (8006424 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6819      	ldr	r1, [r3, #0]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	3b01      	subs	r3, #1
 8006338:	011b      	lsls	r3, r3, #4
 800633a:	430b      	orrs	r3, r1
 800633c:	4939      	ldr	r1, [pc, #228]	; (8006424 <RCCEx_PLLSAI2_Config+0x1b8>)
 800633e:	4313      	orrs	r3, r2
 8006340:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006342:	7bfb      	ldrb	r3, [r7, #15]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d167      	bne.n	8006418 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006348:	4b36      	ldr	r3, [pc, #216]	; (8006424 <RCCEx_PLLSAI2_Config+0x1b8>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a35      	ldr	r2, [pc, #212]	; (8006424 <RCCEx_PLLSAI2_Config+0x1b8>)
 800634e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006352:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006354:	f7fd fb56 	bl	8003a04 <HAL_GetTick>
 8006358:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800635a:	e009      	b.n	8006370 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800635c:	f7fd fb52 	bl	8003a04 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	2b02      	cmp	r3, #2
 8006368:	d902      	bls.n	8006370 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800636a:	2303      	movs	r3, #3
 800636c:	73fb      	strb	r3, [r7, #15]
        break;
 800636e:	e005      	b.n	800637c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006370:	4b2c      	ldr	r3, [pc, #176]	; (8006424 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1ef      	bne.n	800635c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800637c:	7bfb      	ldrb	r3, [r7, #15]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d14a      	bne.n	8006418 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d111      	bne.n	80063ac <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006388:	4b26      	ldr	r3, [pc, #152]	; (8006424 <RCCEx_PLLSAI2_Config+0x1b8>)
 800638a:	695b      	ldr	r3, [r3, #20]
 800638c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006390:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	6892      	ldr	r2, [r2, #8]
 8006398:	0211      	lsls	r1, r2, #8
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	68d2      	ldr	r2, [r2, #12]
 800639e:	0912      	lsrs	r2, r2, #4
 80063a0:	0452      	lsls	r2, r2, #17
 80063a2:	430a      	orrs	r2, r1
 80063a4:	491f      	ldr	r1, [pc, #124]	; (8006424 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063a6:	4313      	orrs	r3, r2
 80063a8:	614b      	str	r3, [r1, #20]
 80063aa:	e011      	b.n	80063d0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80063ac:	4b1d      	ldr	r3, [pc, #116]	; (8006424 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80063b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	6892      	ldr	r2, [r2, #8]
 80063bc:	0211      	lsls	r1, r2, #8
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	6912      	ldr	r2, [r2, #16]
 80063c2:	0852      	lsrs	r2, r2, #1
 80063c4:	3a01      	subs	r2, #1
 80063c6:	0652      	lsls	r2, r2, #25
 80063c8:	430a      	orrs	r2, r1
 80063ca:	4916      	ldr	r1, [pc, #88]	; (8006424 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063cc:	4313      	orrs	r3, r2
 80063ce:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80063d0:	4b14      	ldr	r3, [pc, #80]	; (8006424 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a13      	ldr	r2, [pc, #76]	; (8006424 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063dc:	f7fd fb12 	bl	8003a04 <HAL_GetTick>
 80063e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063e2:	e009      	b.n	80063f8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80063e4:	f7fd fb0e 	bl	8003a04 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d902      	bls.n	80063f8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	73fb      	strb	r3, [r7, #15]
          break;
 80063f6:	e005      	b.n	8006404 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063f8:	4b0a      	ldr	r3, [pc, #40]	; (8006424 <RCCEx_PLLSAI2_Config+0x1b8>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0ef      	beq.n	80063e4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d106      	bne.n	8006418 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800640a:	4b06      	ldr	r3, [pc, #24]	; (8006424 <RCCEx_PLLSAI2_Config+0x1b8>)
 800640c:	695a      	ldr	r2, [r3, #20]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	4904      	ldr	r1, [pc, #16]	; (8006424 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006414:	4313      	orrs	r3, r2
 8006416:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006418:	7bfb      	ldrb	r3, [r7, #15]
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	40021000 	.word	0x40021000

08006428 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d06c      	beq.n	8006514 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b00      	cmp	r3, #0
 8006444:	d106      	bne.n	8006454 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f7fd f8b8 	bl	80035c4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2202      	movs	r2, #2
 8006458:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	22ca      	movs	r2, #202	; 0xca
 8006462:	625a      	str	r2, [r3, #36]	; 0x24
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2253      	movs	r2, #83	; 0x53
 800646a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f9a0 	bl	80067b2 <RTC_EnterInitMode>
 8006472:	4603      	mov	r3, r0
 8006474:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006476:	7bfb      	ldrb	r3, [r7, #15]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d14b      	bne.n	8006514 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	6812      	ldr	r2, [r2, #0]
 8006486:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800648a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800648e:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	6899      	ldr	r1, [r3, #8]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685a      	ldr	r2, [r3, #4]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	431a      	orrs	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	430a      	orrs	r2, r1
 80064ac:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	68d2      	ldr	r2, [r2, #12]
 80064b6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6919      	ldr	r1, [r3, #16]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	041a      	lsls	r2, r3, #16
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	430a      	orrs	r2, r1
 80064ca:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 f9a3 	bl	8006818 <RTC_ExitInitMode>
 80064d2:	4603      	mov	r3, r0
 80064d4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80064d6:	7bfb      	ldrb	r3, [r7, #15]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d11b      	bne.n	8006514 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0203 	bic.w	r2, r2, #3
 80064ea:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	69da      	ldr	r2, [r3, #28]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	431a      	orrs	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	430a      	orrs	r2, r1
 8006502:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	22ff      	movs	r2, #255	; 0xff
 800650a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8006514:	7bfb      	ldrb	r3, [r7, #15]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800651e:	b590      	push	{r4, r7, lr}
 8006520:	b087      	sub	sp, #28
 8006522:	af00      	add	r7, sp, #0
 8006524:	60f8      	str	r0, [r7, #12]
 8006526:	60b9      	str	r1, [r7, #8]
 8006528:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <HAL_RTC_SetTime+0x1a>
 8006534:	2302      	movs	r3, #2
 8006536:	e08b      	b.n	8006650 <HAL_RTC_SetTime+0x132>
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2201      	movs	r2, #1
 800653c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2202      	movs	r2, #2
 8006544:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	22ca      	movs	r2, #202	; 0xca
 800654e:	625a      	str	r2, [r3, #36]	; 0x24
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2253      	movs	r2, #83	; 0x53
 8006556:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 f92a 	bl	80067b2 <RTC_EnterInitMode>
 800655e:	4603      	mov	r3, r0
 8006560:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8006562:	7cfb      	ldrb	r3, [r7, #19]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d163      	bne.n	8006630 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d126      	bne.n	80065bc <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006578:	2b00      	cmp	r3, #0
 800657a:	d102      	bne.n	8006582 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	2200      	movs	r2, #0
 8006580:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	4618      	mov	r0, r3
 8006588:	f000 f984 	bl	8006894 <RTC_ByteToBcd2>
 800658c:	4603      	mov	r3, r0
 800658e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	785b      	ldrb	r3, [r3, #1]
 8006594:	4618      	mov	r0, r3
 8006596:	f000 f97d 	bl	8006894 <RTC_ByteToBcd2>
 800659a:	4603      	mov	r3, r0
 800659c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800659e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	789b      	ldrb	r3, [r3, #2]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 f975 	bl	8006894 <RTC_ByteToBcd2>
 80065aa:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80065ac:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	78db      	ldrb	r3, [r3, #3]
 80065b4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80065b6:	4313      	orrs	r3, r2
 80065b8:	617b      	str	r3, [r7, #20]
 80065ba:	e018      	b.n	80065ee <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d102      	bne.n	80065d0 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	2200      	movs	r2, #0
 80065ce:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80065dc:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80065e2:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	78db      	ldrb	r3, [r3, #3]
 80065e8:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80065ea:	4313      	orrs	r3, r2
 80065ec:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80065f8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80065fc:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689a      	ldr	r2, [r3, #8]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800660c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6899      	ldr	r1, [r3, #8]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	68da      	ldr	r2, [r3, #12]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	431a      	orrs	r2, r3
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 f8f6 	bl	8006818 <RTC_ExitInitMode>
 800662c:	4603      	mov	r3, r0
 800662e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	22ff      	movs	r2, #255	; 0xff
 8006636:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006638:	7cfb      	ldrb	r3, [r7, #19]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d103      	bne.n	8006646 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2200      	movs	r2, #0
 800664a:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800664e:	7cfb      	ldrb	r3, [r7, #19]
}
 8006650:	4618      	mov	r0, r3
 8006652:	371c      	adds	r7, #28
 8006654:	46bd      	mov	sp, r7
 8006656:	bd90      	pop	{r4, r7, pc}

08006658 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006658:	b590      	push	{r4, r7, lr}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f893 3020 	ldrb.w	r3, [r3, #32]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d101      	bne.n	8006672 <HAL_RTC_SetDate+0x1a>
 800666e:	2302      	movs	r3, #2
 8006670:	e075      	b.n	800675e <HAL_RTC_SetDate+0x106>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2202      	movs	r2, #2
 800667e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10e      	bne.n	80066a6 <HAL_RTC_SetDate+0x4e>
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	785b      	ldrb	r3, [r3, #1]
 800668c:	f003 0310 	and.w	r3, r3, #16
 8006690:	2b00      	cmp	r3, #0
 8006692:	d008      	beq.n	80066a6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	785b      	ldrb	r3, [r3, #1]
 8006698:	f023 0310 	bic.w	r3, r3, #16
 800669c:	b2db      	uxtb	r3, r3
 800669e:	330a      	adds	r3, #10
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d11c      	bne.n	80066e6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	78db      	ldrb	r3, [r3, #3]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 f8ef 	bl	8006894 <RTC_ByteToBcd2>
 80066b6:	4603      	mov	r3, r0
 80066b8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	785b      	ldrb	r3, [r3, #1]
 80066be:	4618      	mov	r0, r3
 80066c0:	f000 f8e8 	bl	8006894 <RTC_ByteToBcd2>
 80066c4:	4603      	mov	r3, r0
 80066c6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80066c8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	789b      	ldrb	r3, [r3, #2]
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 f8e0 	bl	8006894 <RTC_ByteToBcd2>
 80066d4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80066d6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80066e0:	4313      	orrs	r3, r2
 80066e2:	617b      	str	r3, [r7, #20]
 80066e4:	e00e      	b.n	8006704 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	78db      	ldrb	r3, [r3, #3]
 80066ea:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	785b      	ldrb	r3, [r3, #1]
 80066f0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80066f2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80066f8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006700:	4313      	orrs	r3, r2
 8006702:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	22ca      	movs	r2, #202	; 0xca
 800670a:	625a      	str	r2, [r3, #36]	; 0x24
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2253      	movs	r2, #83	; 0x53
 8006712:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 f84c 	bl	80067b2 <RTC_EnterInitMode>
 800671a:	4603      	mov	r3, r0
 800671c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800671e:	7cfb      	ldrb	r3, [r7, #19]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10c      	bne.n	800673e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800672e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006732:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f86f 	bl	8006818 <RTC_ExitInitMode>
 800673a:	4603      	mov	r3, r0
 800673c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	22ff      	movs	r2, #255	; 0xff
 8006744:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8006746:	7cfb      	ldrb	r3, [r7, #19]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d103      	bne.n	8006754 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800675c:	7cfb      	ldrb	r3, [r7, #19]
}
 800675e:	4618      	mov	r0, r3
 8006760:	371c      	adds	r7, #28
 8006762:	46bd      	mov	sp, r7
 8006764:	bd90      	pop	{r4, r7, pc}

08006766 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b084      	sub	sp, #16
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68da      	ldr	r2, [r3, #12]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800677c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800677e:	f7fd f941 	bl	8003a04 <HAL_GetTick>
 8006782:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006784:	e009      	b.n	800679a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006786:	f7fd f93d 	bl	8003a04 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006794:	d901      	bls.n	800679a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006796:	2303      	movs	r3, #3
 8006798:	e007      	b.n	80067aa <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	f003 0320 	and.w	r3, r3, #32
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0ee      	beq.n	8006786 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b084      	sub	sp, #16
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067ba:	2300      	movs	r3, #0
 80067bc:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d120      	bne.n	800680e <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f04f 32ff 	mov.w	r2, #4294967295
 80067d4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80067d6:	f7fd f915 	bl	8003a04 <HAL_GetTick>
 80067da:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80067dc:	e00d      	b.n	80067fa <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80067de:	f7fd f911 	bl	8003a04 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067ec:	d905      	bls.n	80067fa <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2203      	movs	r2, #3
 80067f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006804:	2b00      	cmp	r3, #0
 8006806:	d102      	bne.n	800680e <RTC_EnterInitMode+0x5c>
 8006808:	7bfb      	ldrb	r3, [r7, #15]
 800680a:	2b03      	cmp	r3, #3
 800680c:	d1e7      	bne.n	80067de <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800680e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8006824:	4b1a      	ldr	r3, [pc, #104]	; (8006890 <RTC_ExitInitMode+0x78>)
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	4a19      	ldr	r2, [pc, #100]	; (8006890 <RTC_ExitInitMode+0x78>)
 800682a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800682e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006830:	4b17      	ldr	r3, [pc, #92]	; (8006890 <RTC_ExitInitMode+0x78>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f003 0320 	and.w	r3, r3, #32
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10c      	bne.n	8006856 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f7ff ff92 	bl	8006766 <HAL_RTC_WaitForSynchro>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d01e      	beq.n	8006886 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2203      	movs	r2, #3
 800684c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006850:	2303      	movs	r3, #3
 8006852:	73fb      	strb	r3, [r7, #15]
 8006854:	e017      	b.n	8006886 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006856:	4b0e      	ldr	r3, [pc, #56]	; (8006890 <RTC_ExitInitMode+0x78>)
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	4a0d      	ldr	r2, [pc, #52]	; (8006890 <RTC_ExitInitMode+0x78>)
 800685c:	f023 0320 	bic.w	r3, r3, #32
 8006860:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7ff ff7f 	bl	8006766 <HAL_RTC_WaitForSynchro>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d005      	beq.n	800687a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2203      	movs	r2, #3
 8006872:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800687a:	4b05      	ldr	r3, [pc, #20]	; (8006890 <RTC_ExitInitMode+0x78>)
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	4a04      	ldr	r2, [pc, #16]	; (8006890 <RTC_ExitInitMode+0x78>)
 8006880:	f043 0320 	orr.w	r3, r3, #32
 8006884:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006886:	7bfb      	ldrb	r3, [r7, #15]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	40002800 	.word	0x40002800

08006894 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	4603      	mov	r3, r0
 800689c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80068a2:	79fb      	ldrb	r3, [r7, #7]
 80068a4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80068a6:	e005      	b.n	80068b4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3301      	adds	r3, #1
 80068ac:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80068ae:	7afb      	ldrb	r3, [r7, #11]
 80068b0:	3b0a      	subs	r3, #10
 80068b2:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80068b4:	7afb      	ldrb	r3, [r7, #11]
 80068b6:	2b09      	cmp	r3, #9
 80068b8:	d8f6      	bhi.n	80068a8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	7afb      	ldrb	r3, [r7, #11]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	b2db      	uxtb	r3, r3
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3714      	adds	r7, #20
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d101      	bne.n	80068e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e095      	b.n	8006a12 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d108      	bne.n	8006900 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068f6:	d009      	beq.n	800690c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	61da      	str	r2, [r3, #28]
 80068fe:	e005      	b.n	800690c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f7fc fe7e 	bl	8003628 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006942:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800694c:	d902      	bls.n	8006954 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800694e:	2300      	movs	r3, #0
 8006950:	60fb      	str	r3, [r7, #12]
 8006952:	e002      	b.n	800695a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006958:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006962:	d007      	beq.n	8006974 <HAL_SPI_Init+0xa0>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800696c:	d002      	beq.n	8006974 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f003 0302 	and.w	r3, r3, #2
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	695b      	ldr	r3, [r3, #20]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	431a      	orrs	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069ac:	431a      	orrs	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069b6:	ea42 0103 	orr.w	r1, r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	0c1b      	lsrs	r3, r3, #16
 80069d0:	f003 0204 	and.w	r2, r3, #4
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d8:	f003 0310 	and.w	r3, r3, #16
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069e2:	f003 0308 	and.w	r3, r3, #8
 80069e6:	431a      	orrs	r2, r3
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68db      	ldr	r3, [r3, #12]
 80069ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80069f0:	ea42 0103 	orr.w	r1, r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b08a      	sub	sp, #40	; 0x28
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	60f8      	str	r0, [r7, #12]
 8006a22:	60b9      	str	r1, [r7, #8]
 8006a24:	607a      	str	r2, [r7, #4]
 8006a26:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d101      	bne.n	8006a40 <HAL_SPI_TransmitReceive+0x26>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e1fb      	b.n	8006e38 <HAL_SPI_TransmitReceive+0x41e>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a48:	f7fc ffdc 	bl	8003a04 <HAL_GetTick>
 8006a4c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a54:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006a5c:	887b      	ldrh	r3, [r7, #2]
 8006a5e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006a60:	887b      	ldrh	r3, [r7, #2]
 8006a62:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006a64:	7efb      	ldrb	r3, [r7, #27]
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d00e      	beq.n	8006a88 <HAL_SPI_TransmitReceive+0x6e>
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a70:	d106      	bne.n	8006a80 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d102      	bne.n	8006a80 <HAL_SPI_TransmitReceive+0x66>
 8006a7a:	7efb      	ldrb	r3, [r7, #27]
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d003      	beq.n	8006a88 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006a80:	2302      	movs	r3, #2
 8006a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006a86:	e1cd      	b.n	8006e24 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d005      	beq.n	8006a9a <HAL_SPI_TransmitReceive+0x80>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <HAL_SPI_TransmitReceive+0x80>
 8006a94:	887b      	ldrh	r3, [r7, #2]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d103      	bne.n	8006aa2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006aa0:	e1c0      	b.n	8006e24 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	2b04      	cmp	r3, #4
 8006aac:	d003      	beq.n	8006ab6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2205      	movs	r2, #5
 8006ab2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	887a      	ldrh	r2, [r7, #2]
 8006ac6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	887a      	ldrh	r2, [r7, #2]
 8006ace:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	887a      	ldrh	r2, [r7, #2]
 8006adc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	887a      	ldrh	r2, [r7, #2]
 8006ae2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006af8:	d802      	bhi.n	8006b00 <HAL_SPI_TransmitReceive+0xe6>
 8006afa:	8a3b      	ldrh	r3, [r7, #16]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d908      	bls.n	8006b12 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b0e:	605a      	str	r2, [r3, #4]
 8006b10:	e007      	b.n	8006b22 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b20:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b2c:	2b40      	cmp	r3, #64	; 0x40
 8006b2e:	d007      	beq.n	8006b40 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006b48:	d97c      	bls.n	8006c44 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d002      	beq.n	8006b58 <HAL_SPI_TransmitReceive+0x13e>
 8006b52:	8a7b      	ldrh	r3, [r7, #18]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d169      	bne.n	8006c2c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5c:	881a      	ldrh	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b68:	1c9a      	adds	r2, r3, #2
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	3b01      	subs	r3, #1
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b7c:	e056      	b.n	8006c2c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f003 0302 	and.w	r3, r3, #2
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d11b      	bne.n	8006bc4 <HAL_SPI_TransmitReceive+0x1aa>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d016      	beq.n	8006bc4 <HAL_SPI_TransmitReceive+0x1aa>
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d113      	bne.n	8006bc4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	881a      	ldrh	r2, [r3, #0]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bac:	1c9a      	adds	r2, r3, #2
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d11c      	bne.n	8006c0c <HAL_SPI_TransmitReceive+0x1f2>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d016      	beq.n	8006c0c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68da      	ldr	r2, [r3, #12]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be8:	b292      	uxth	r2, r2
 8006bea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf0:	1c9a      	adds	r2, r3, #2
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	3b01      	subs	r3, #1
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006c0c:	f7fc fefa 	bl	8003a04 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d807      	bhi.n	8006c2c <HAL_SPI_TransmitReceive+0x212>
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c22:	d003      	beq.n	8006c2c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006c2a:	e0fb      	b.n	8006e24 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1a3      	bne.n	8006b7e <HAL_SPI_TransmitReceive+0x164>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d19d      	bne.n	8006b7e <HAL_SPI_TransmitReceive+0x164>
 8006c42:	e0df      	b.n	8006e04 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <HAL_SPI_TransmitReceive+0x23a>
 8006c4c:	8a7b      	ldrh	r3, [r7, #18]
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	f040 80cb 	bne.w	8006dea <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d912      	bls.n	8006c84 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c62:	881a      	ldrh	r2, [r3, #0]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6e:	1c9a      	adds	r2, r3, #2
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	3b02      	subs	r3, #2
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c82:	e0b2      	b.n	8006dea <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	330c      	adds	r3, #12
 8006c8e:	7812      	ldrb	r2, [r2, #0]
 8006c90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c96:	1c5a      	adds	r2, r3, #1
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006caa:	e09e      	b.n	8006dea <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d134      	bne.n	8006d24 <HAL_SPI_TransmitReceive+0x30a>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cbe:	b29b      	uxth	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d02f      	beq.n	8006d24 <HAL_SPI_TransmitReceive+0x30a>
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d12c      	bne.n	8006d24 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d912      	bls.n	8006cfa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd8:	881a      	ldrh	r2, [r3, #0]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce4:	1c9a      	adds	r2, r3, #2
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	3b02      	subs	r3, #2
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006cf8:	e012      	b.n	8006d20 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	330c      	adds	r3, #12
 8006d04:	7812      	ldrb	r2, [r2, #0]
 8006d06:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006d20:	2300      	movs	r3, #0
 8006d22:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d148      	bne.n	8006dc4 <HAL_SPI_TransmitReceive+0x3aa>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d042      	beq.n	8006dc4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d923      	bls.n	8006d92 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68da      	ldr	r2, [r3, #12]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d54:	b292      	uxth	r2, r2
 8006d56:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5c:	1c9a      	adds	r2, r3, #2
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	3b02      	subs	r3, #2
 8006d6c:	b29a      	uxth	r2, r3
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d81f      	bhi.n	8006dc0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006d8e:	605a      	str	r2, [r3, #4]
 8006d90:	e016      	b.n	8006dc0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f103 020c 	add.w	r2, r3, #12
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9e:	7812      	ldrb	r2, [r2, #0]
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	1c5a      	adds	r2, r3, #1
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	3b01      	subs	r3, #1
 8006db8:	b29a      	uxth	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006dc4:	f7fc fe1e 	bl	8003a04 <HAL_GetTick>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d803      	bhi.n	8006ddc <HAL_SPI_TransmitReceive+0x3c2>
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dda:	d102      	bne.n	8006de2 <HAL_SPI_TransmitReceive+0x3c8>
 8006ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d103      	bne.n	8006dea <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006de8:	e01c      	b.n	8006e24 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f47f af5b 	bne.w	8006cac <HAL_SPI_TransmitReceive+0x292>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f47f af54 	bne.w	8006cac <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e04:	69fa      	ldr	r2, [r7, #28]
 8006e06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 f937 	bl	800707c <SPI_EndRxTxTransaction>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d006      	beq.n	8006e22 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	661a      	str	r2, [r3, #96]	; 0x60
 8006e20:	e000      	b.n	8006e24 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006e22:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006e34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3728      	adds	r7, #40	; 0x28
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b088      	sub	sp, #32
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	603b      	str	r3, [r7, #0]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e50:	f7fc fdd8 	bl	8003a04 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e58:	1a9b      	subs	r3, r3, r2
 8006e5a:	683a      	ldr	r2, [r7, #0]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e60:	f7fc fdd0 	bl	8003a04 <HAL_GetTick>
 8006e64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e66:	4b39      	ldr	r3, [pc, #228]	; (8006f4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	015b      	lsls	r3, r3, #5
 8006e6c:	0d1b      	lsrs	r3, r3, #20
 8006e6e:	69fa      	ldr	r2, [r7, #28]
 8006e70:	fb02 f303 	mul.w	r3, r2, r3
 8006e74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e76:	e054      	b.n	8006f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e7e:	d050      	beq.n	8006f22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e80:	f7fc fdc0 	bl	8003a04 <HAL_GetTick>
 8006e84:	4602      	mov	r2, r0
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	1ad3      	subs	r3, r2, r3
 8006e8a:	69fa      	ldr	r2, [r7, #28]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d902      	bls.n	8006e96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d13d      	bne.n	8006f12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006ea4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006eae:	d111      	bne.n	8006ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb8:	d004      	beq.n	8006ec4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec2:	d107      	bne.n	8006ed4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ed2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006edc:	d10f      	bne.n	8006efe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006efc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2201      	movs	r2, #1
 8006f02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e017      	b.n	8006f42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	689a      	ldr	r2, [r3, #8]
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	429a      	cmp	r2, r3
 8006f30:	bf0c      	ite	eq
 8006f32:	2301      	moveq	r3, #1
 8006f34:	2300      	movne	r3, #0
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	461a      	mov	r2, r3
 8006f3a:	79fb      	ldrb	r3, [r7, #7]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d19b      	bne.n	8006e78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3720      	adds	r7, #32
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	20001608 	.word	0x20001608

08006f50 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08a      	sub	sp, #40	; 0x28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
 8006f5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006f62:	f7fc fd4f 	bl	8003a04 <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	1a9b      	subs	r3, r3, r2
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	4413      	add	r3, r2
 8006f70:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006f72:	f7fc fd47 	bl	8003a04 <HAL_GetTick>
 8006f76:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	330c      	adds	r3, #12
 8006f7e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006f80:	4b3d      	ldr	r3, [pc, #244]	; (8007078 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	4613      	mov	r3, r2
 8006f86:	009b      	lsls	r3, r3, #2
 8006f88:	4413      	add	r3, r2
 8006f8a:	00da      	lsls	r2, r3, #3
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	0d1b      	lsrs	r3, r3, #20
 8006f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f92:	fb02 f303 	mul.w	r3, r2, r3
 8006f96:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006f98:	e060      	b.n	800705c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006fa0:	d107      	bne.n	8006fb2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d104      	bne.n	8006fb2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006fa8:	69fb      	ldr	r3, [r7, #28]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006fb0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb8:	d050      	beq.n	800705c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fba:	f7fc fd23 	bl	8003a04 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d902      	bls.n	8006fd0 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d13d      	bne.n	800704c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006fde:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fe8:	d111      	bne.n	800700e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ff2:	d004      	beq.n	8006ffe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ffc:	d107      	bne.n	800700e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800700c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007016:	d10f      	bne.n	8007038 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007036:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007048:	2303      	movs	r3, #3
 800704a:	e010      	b.n	800706e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	3b01      	subs	r3, #1
 800705a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	689a      	ldr	r2, [r3, #8]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	4013      	ands	r3, r2
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	429a      	cmp	r2, r3
 800706a:	d196      	bne.n	8006f9a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3728      	adds	r7, #40	; 0x28
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20001608 	.word	0x20001608

0800707c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af02      	add	r7, sp, #8
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	9300      	str	r3, [sp, #0]
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	2200      	movs	r2, #0
 8007090:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f7ff ff5b 	bl	8006f50 <SPI_WaitFifoStateUntilTimeout>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d007      	beq.n	80070b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070a4:	f043 0220 	orr.w	r2, r3, #32
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070ac:	2303      	movs	r3, #3
 80070ae:	e027      	b.n	8007100 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	9300      	str	r3, [sp, #0]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	2200      	movs	r2, #0
 80070b8:	2180      	movs	r1, #128	; 0x80
 80070ba:	68f8      	ldr	r0, [r7, #12]
 80070bc:	f7ff fec0 	bl	8006e40 <SPI_WaitFlagStateUntilTimeout>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d007      	beq.n	80070d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ca:	f043 0220 	orr.w	r2, r3, #32
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070d2:	2303      	movs	r3, #3
 80070d4:	e014      	b.n	8007100 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2200      	movs	r2, #0
 80070de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7ff ff34 	bl	8006f50 <SPI_WaitFifoStateUntilTimeout>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d007      	beq.n	80070fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070f2:	f043 0220 	orr.w	r2, r3, #32
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e000      	b.n	8007100 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3710      	adds	r7, #16
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e049      	b.n	80071ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d106      	bne.n	8007134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7fc fadc 	bl	80036ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2202      	movs	r2, #2
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3304      	adds	r3, #4
 8007144:	4619      	mov	r1, r3
 8007146:	4610      	mov	r0, r2
 8007148:	f000 fac0 	bl	80076cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
	...

080071b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d001      	beq.n	80071d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e04f      	b.n	8007270 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2202      	movs	r2, #2
 80071d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	68da      	ldr	r2, [r3, #12]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0201 	orr.w	r2, r2, #1
 80071e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a23      	ldr	r2, [pc, #140]	; (800727c <HAL_TIM_Base_Start_IT+0xc4>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d01d      	beq.n	800722e <HAL_TIM_Base_Start_IT+0x76>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071fa:	d018      	beq.n	800722e <HAL_TIM_Base_Start_IT+0x76>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a1f      	ldr	r2, [pc, #124]	; (8007280 <HAL_TIM_Base_Start_IT+0xc8>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d013      	beq.n	800722e <HAL_TIM_Base_Start_IT+0x76>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a1e      	ldr	r2, [pc, #120]	; (8007284 <HAL_TIM_Base_Start_IT+0xcc>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d00e      	beq.n	800722e <HAL_TIM_Base_Start_IT+0x76>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	4a1c      	ldr	r2, [pc, #112]	; (8007288 <HAL_TIM_Base_Start_IT+0xd0>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d009      	beq.n	800722e <HAL_TIM_Base_Start_IT+0x76>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	4a1b      	ldr	r2, [pc, #108]	; (800728c <HAL_TIM_Base_Start_IT+0xd4>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d004      	beq.n	800722e <HAL_TIM_Base_Start_IT+0x76>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a19      	ldr	r2, [pc, #100]	; (8007290 <HAL_TIM_Base_Start_IT+0xd8>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d115      	bne.n	800725a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	4b17      	ldr	r3, [pc, #92]	; (8007294 <HAL_TIM_Base_Start_IT+0xdc>)
 8007236:	4013      	ands	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2b06      	cmp	r3, #6
 800723e:	d015      	beq.n	800726c <HAL_TIM_Base_Start_IT+0xb4>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007246:	d011      	beq.n	800726c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0201 	orr.w	r2, r2, #1
 8007256:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007258:	e008      	b.n	800726c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f042 0201 	orr.w	r2, r2, #1
 8007268:	601a      	str	r2, [r3, #0]
 800726a:	e000      	b.n	800726e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800726c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800726e:	2300      	movs	r3, #0
}
 8007270:	4618      	mov	r0, r3
 8007272:	3714      	adds	r7, #20
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	40012c00 	.word	0x40012c00
 8007280:	40000400 	.word	0x40000400
 8007284:	40000800 	.word	0x40000800
 8007288:	40000c00 	.word	0x40000c00
 800728c:	40013400 	.word	0x40013400
 8007290:	40014000 	.word	0x40014000
 8007294:	00010007 	.word	0x00010007

08007298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	f003 0302 	and.w	r3, r3, #2
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d122      	bne.n	80072f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d11b      	bne.n	80072f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f06f 0202 	mvn.w	r2, #2
 80072c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	699b      	ldr	r3, [r3, #24]
 80072d2:	f003 0303 	and.w	r3, r3, #3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d003      	beq.n	80072e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 f9d8 	bl	8007690 <HAL_TIM_IC_CaptureCallback>
 80072e0:	e005      	b.n	80072ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 f9ca 	bl	800767c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f9db 	bl	80076a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2200      	movs	r2, #0
 80072f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	f003 0304 	and.w	r3, r3, #4
 80072fe:	2b04      	cmp	r3, #4
 8007300:	d122      	bne.n	8007348 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	f003 0304 	and.w	r3, r3, #4
 800730c:	2b04      	cmp	r3, #4
 800730e:	d11b      	bne.n	8007348 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f06f 0204 	mvn.w	r2, #4
 8007318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2202      	movs	r2, #2
 800731e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	699b      	ldr	r3, [r3, #24]
 8007326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800732a:	2b00      	cmp	r3, #0
 800732c:	d003      	beq.n	8007336 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 f9ae 	bl	8007690 <HAL_TIM_IC_CaptureCallback>
 8007334:	e005      	b.n	8007342 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f9a0 	bl	800767c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 f9b1 	bl	80076a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2200      	movs	r2, #0
 8007346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	f003 0308 	and.w	r3, r3, #8
 8007352:	2b08      	cmp	r3, #8
 8007354:	d122      	bne.n	800739c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68db      	ldr	r3, [r3, #12]
 800735c:	f003 0308 	and.w	r3, r3, #8
 8007360:	2b08      	cmp	r3, #8
 8007362:	d11b      	bne.n	800739c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f06f 0208 	mvn.w	r2, #8
 800736c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2204      	movs	r2, #4
 8007372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	f003 0303 	and.w	r3, r3, #3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d003      	beq.n	800738a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f984 	bl	8007690 <HAL_TIM_IC_CaptureCallback>
 8007388:	e005      	b.n	8007396 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f976 	bl	800767c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f000 f987 	bl	80076a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	f003 0310 	and.w	r3, r3, #16
 80073a6:	2b10      	cmp	r3, #16
 80073a8:	d122      	bne.n	80073f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f003 0310 	and.w	r3, r3, #16
 80073b4:	2b10      	cmp	r3, #16
 80073b6:	d11b      	bne.n	80073f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f06f 0210 	mvn.w	r2, #16
 80073c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2208      	movs	r2, #8
 80073c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d003      	beq.n	80073de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f95a 	bl	8007690 <HAL_TIM_IC_CaptureCallback>
 80073dc:	e005      	b.n	80073ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 f94c 	bl	800767c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e4:	6878      	ldr	r0, [r7, #4]
 80073e6:	f000 f95d 	bl	80076a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b01      	cmp	r3, #1
 80073fc:	d10e      	bne.n	800741c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	f003 0301 	and.w	r3, r3, #1
 8007408:	2b01      	cmp	r3, #1
 800740a:	d107      	bne.n	800741c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f06f 0201 	mvn.w	r2, #1
 8007414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f926 	bl	8007668 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007426:	2b80      	cmp	r3, #128	; 0x80
 8007428:	d10e      	bne.n	8007448 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007434:	2b80      	cmp	r3, #128	; 0x80
 8007436:	d107      	bne.n	8007448 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fb08 	bl	8007a58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007456:	d10e      	bne.n	8007476 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007462:	2b80      	cmp	r3, #128	; 0x80
 8007464:	d107      	bne.n	8007476 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800746e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 fafb 	bl	8007a6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	691b      	ldr	r3, [r3, #16]
 800747c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007480:	2b40      	cmp	r3, #64	; 0x40
 8007482:	d10e      	bne.n	80074a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800748e:	2b40      	cmp	r3, #64	; 0x40
 8007490:	d107      	bne.n	80074a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800749a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f90b 	bl	80076b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	f003 0320 	and.w	r3, r3, #32
 80074ac:	2b20      	cmp	r3, #32
 80074ae:	d10e      	bne.n	80074ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68db      	ldr	r3, [r3, #12]
 80074b6:	f003 0320 	and.w	r3, r3, #32
 80074ba:	2b20      	cmp	r3, #32
 80074bc:	d107      	bne.n	80074ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f06f 0220 	mvn.w	r2, #32
 80074c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fabb 	bl	8007a44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80074ce:	bf00      	nop
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074e0:	2300      	movs	r3, #0
 80074e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d101      	bne.n	80074f2 <HAL_TIM_ConfigClockSource+0x1c>
 80074ee:	2302      	movs	r3, #2
 80074f0:	e0b6      	b.n	8007660 <HAL_TIM_ConfigClockSource+0x18a>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2202      	movs	r2, #2
 80074fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007510:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007514:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800751c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800752e:	d03e      	beq.n	80075ae <HAL_TIM_ConfigClockSource+0xd8>
 8007530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007534:	f200 8087 	bhi.w	8007646 <HAL_TIM_ConfigClockSource+0x170>
 8007538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800753c:	f000 8086 	beq.w	800764c <HAL_TIM_ConfigClockSource+0x176>
 8007540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007544:	d87f      	bhi.n	8007646 <HAL_TIM_ConfigClockSource+0x170>
 8007546:	2b70      	cmp	r3, #112	; 0x70
 8007548:	d01a      	beq.n	8007580 <HAL_TIM_ConfigClockSource+0xaa>
 800754a:	2b70      	cmp	r3, #112	; 0x70
 800754c:	d87b      	bhi.n	8007646 <HAL_TIM_ConfigClockSource+0x170>
 800754e:	2b60      	cmp	r3, #96	; 0x60
 8007550:	d050      	beq.n	80075f4 <HAL_TIM_ConfigClockSource+0x11e>
 8007552:	2b60      	cmp	r3, #96	; 0x60
 8007554:	d877      	bhi.n	8007646 <HAL_TIM_ConfigClockSource+0x170>
 8007556:	2b50      	cmp	r3, #80	; 0x50
 8007558:	d03c      	beq.n	80075d4 <HAL_TIM_ConfigClockSource+0xfe>
 800755a:	2b50      	cmp	r3, #80	; 0x50
 800755c:	d873      	bhi.n	8007646 <HAL_TIM_ConfigClockSource+0x170>
 800755e:	2b40      	cmp	r3, #64	; 0x40
 8007560:	d058      	beq.n	8007614 <HAL_TIM_ConfigClockSource+0x13e>
 8007562:	2b40      	cmp	r3, #64	; 0x40
 8007564:	d86f      	bhi.n	8007646 <HAL_TIM_ConfigClockSource+0x170>
 8007566:	2b30      	cmp	r3, #48	; 0x30
 8007568:	d064      	beq.n	8007634 <HAL_TIM_ConfigClockSource+0x15e>
 800756a:	2b30      	cmp	r3, #48	; 0x30
 800756c:	d86b      	bhi.n	8007646 <HAL_TIM_ConfigClockSource+0x170>
 800756e:	2b20      	cmp	r3, #32
 8007570:	d060      	beq.n	8007634 <HAL_TIM_ConfigClockSource+0x15e>
 8007572:	2b20      	cmp	r3, #32
 8007574:	d867      	bhi.n	8007646 <HAL_TIM_ConfigClockSource+0x170>
 8007576:	2b00      	cmp	r3, #0
 8007578:	d05c      	beq.n	8007634 <HAL_TIM_ConfigClockSource+0x15e>
 800757a:	2b10      	cmp	r3, #16
 800757c:	d05a      	beq.n	8007634 <HAL_TIM_ConfigClockSource+0x15e>
 800757e:	e062      	b.n	8007646 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6818      	ldr	r0, [r3, #0]
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	6899      	ldr	r1, [r3, #8]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f000 f9b0 	bl	80078f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80075a2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	609a      	str	r2, [r3, #8]
      break;
 80075ac:	e04f      	b.n	800764e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6818      	ldr	r0, [r3, #0]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	6899      	ldr	r1, [r3, #8]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	685a      	ldr	r2, [r3, #4]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	f000 f999 	bl	80078f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075d0:	609a      	str	r2, [r3, #8]
      break;
 80075d2:	e03c      	b.n	800764e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6818      	ldr	r0, [r3, #0]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	6859      	ldr	r1, [r3, #4]
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	461a      	mov	r2, r3
 80075e2:	f000 f90d 	bl	8007800 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	2150      	movs	r1, #80	; 0x50
 80075ec:	4618      	mov	r0, r3
 80075ee:	f000 f966 	bl	80078be <TIM_ITRx_SetConfig>
      break;
 80075f2:	e02c      	b.n	800764e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6818      	ldr	r0, [r3, #0]
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	6859      	ldr	r1, [r3, #4]
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	461a      	mov	r2, r3
 8007602:	f000 f92c 	bl	800785e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2160      	movs	r1, #96	; 0x60
 800760c:	4618      	mov	r0, r3
 800760e:	f000 f956 	bl	80078be <TIM_ITRx_SetConfig>
      break;
 8007612:	e01c      	b.n	800764e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6818      	ldr	r0, [r3, #0]
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	6859      	ldr	r1, [r3, #4]
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	461a      	mov	r2, r3
 8007622:	f000 f8ed 	bl	8007800 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	2140      	movs	r1, #64	; 0x40
 800762c:	4618      	mov	r0, r3
 800762e:	f000 f946 	bl	80078be <TIM_ITRx_SetConfig>
      break;
 8007632:	e00c      	b.n	800764e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4619      	mov	r1, r3
 800763e:	4610      	mov	r0, r2
 8007640:	f000 f93d 	bl	80078be <TIM_ITRx_SetConfig>
      break;
 8007644:	e003      	b.n	800764e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	73fb      	strb	r3, [r7, #15]
      break;
 800764a:	e000      	b.n	800764e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800764c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800765e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007668:	b480      	push	{r7}
 800766a:	b083      	sub	sp, #12
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007670:	bf00      	nop
 8007672:	370c      	adds	r7, #12
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr

0800767c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007684:	bf00      	nop
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a40      	ldr	r2, [pc, #256]	; (80077e0 <TIM_Base_SetConfig+0x114>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d013      	beq.n	800770c <TIM_Base_SetConfig+0x40>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ea:	d00f      	beq.n	800770c <TIM_Base_SetConfig+0x40>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a3d      	ldr	r2, [pc, #244]	; (80077e4 <TIM_Base_SetConfig+0x118>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d00b      	beq.n	800770c <TIM_Base_SetConfig+0x40>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a3c      	ldr	r2, [pc, #240]	; (80077e8 <TIM_Base_SetConfig+0x11c>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d007      	beq.n	800770c <TIM_Base_SetConfig+0x40>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a3b      	ldr	r2, [pc, #236]	; (80077ec <TIM_Base_SetConfig+0x120>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d003      	beq.n	800770c <TIM_Base_SetConfig+0x40>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a3a      	ldr	r2, [pc, #232]	; (80077f0 <TIM_Base_SetConfig+0x124>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d108      	bne.n	800771e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007712:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	4313      	orrs	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4a2f      	ldr	r2, [pc, #188]	; (80077e0 <TIM_Base_SetConfig+0x114>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d01f      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800772c:	d01b      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a2c      	ldr	r2, [pc, #176]	; (80077e4 <TIM_Base_SetConfig+0x118>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d017      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a2b      	ldr	r2, [pc, #172]	; (80077e8 <TIM_Base_SetConfig+0x11c>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d013      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a2a      	ldr	r2, [pc, #168]	; (80077ec <TIM_Base_SetConfig+0x120>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d00f      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a29      	ldr	r2, [pc, #164]	; (80077f0 <TIM_Base_SetConfig+0x124>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d00b      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a28      	ldr	r2, [pc, #160]	; (80077f4 <TIM_Base_SetConfig+0x128>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d007      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a27      	ldr	r2, [pc, #156]	; (80077f8 <TIM_Base_SetConfig+0x12c>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d003      	beq.n	8007766 <TIM_Base_SetConfig+0x9a>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a26      	ldr	r2, [pc, #152]	; (80077fc <TIM_Base_SetConfig+0x130>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d108      	bne.n	8007778 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800776c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	4313      	orrs	r3, r2
 8007776:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	4313      	orrs	r3, r2
 8007784:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	68fa      	ldr	r2, [r7, #12]
 800778a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	689a      	ldr	r2, [r3, #8]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	4a10      	ldr	r2, [pc, #64]	; (80077e0 <TIM_Base_SetConfig+0x114>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d00f      	beq.n	80077c4 <TIM_Base_SetConfig+0xf8>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a12      	ldr	r2, [pc, #72]	; (80077f0 <TIM_Base_SetConfig+0x124>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d00b      	beq.n	80077c4 <TIM_Base_SetConfig+0xf8>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	4a11      	ldr	r2, [pc, #68]	; (80077f4 <TIM_Base_SetConfig+0x128>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d007      	beq.n	80077c4 <TIM_Base_SetConfig+0xf8>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a10      	ldr	r2, [pc, #64]	; (80077f8 <TIM_Base_SetConfig+0x12c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d003      	beq.n	80077c4 <TIM_Base_SetConfig+0xf8>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a0f      	ldr	r2, [pc, #60]	; (80077fc <TIM_Base_SetConfig+0x130>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d103      	bne.n	80077cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	691a      	ldr	r2, [r3, #16]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	615a      	str	r2, [r3, #20]
}
 80077d2:	bf00      	nop
 80077d4:	3714      	adds	r7, #20
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	40012c00 	.word	0x40012c00
 80077e4:	40000400 	.word	0x40000400
 80077e8:	40000800 	.word	0x40000800
 80077ec:	40000c00 	.word	0x40000c00
 80077f0:	40013400 	.word	0x40013400
 80077f4:	40014000 	.word	0x40014000
 80077f8:	40014400 	.word	0x40014400
 80077fc:	40014800 	.word	0x40014800

08007800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007800:	b480      	push	{r7}
 8007802:	b087      	sub	sp, #28
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6a1b      	ldr	r3, [r3, #32]
 8007816:	f023 0201 	bic.w	r2, r3, #1
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800782a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	011b      	lsls	r3, r3, #4
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	4313      	orrs	r3, r2
 8007834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f023 030a 	bic.w	r3, r3, #10
 800783c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	4313      	orrs	r3, r2
 8007844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	693a      	ldr	r2, [r7, #16]
 800784a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	621a      	str	r2, [r3, #32]
}
 8007852:	bf00      	nop
 8007854:	371c      	adds	r7, #28
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800785e:	b480      	push	{r7}
 8007860:	b087      	sub	sp, #28
 8007862:	af00      	add	r7, sp, #0
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	60b9      	str	r1, [r7, #8]
 8007868:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	6a1b      	ldr	r3, [r3, #32]
 800786e:	f023 0210 	bic.w	r2, r3, #16
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	699b      	ldr	r3, [r3, #24]
 800787a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6a1b      	ldr	r3, [r3, #32]
 8007880:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007888:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	031b      	lsls	r3, r3, #12
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	4313      	orrs	r3, r2
 8007892:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800789a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	011b      	lsls	r3, r3, #4
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	697a      	ldr	r2, [r7, #20]
 80078aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	621a      	str	r2, [r3, #32]
}
 80078b2:	bf00      	nop
 80078b4:	371c      	adds	r7, #28
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80078be:	b480      	push	{r7}
 80078c0:	b085      	sub	sp, #20
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
 80078c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078d6:	683a      	ldr	r2, [r7, #0]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4313      	orrs	r3, r2
 80078dc:	f043 0307 	orr.w	r3, r3, #7
 80078e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	609a      	str	r2, [r3, #8]
}
 80078e8:	bf00      	nop
 80078ea:	3714      	adds	r7, #20
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b087      	sub	sp, #28
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
 8007900:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800790e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	021a      	lsls	r2, r3, #8
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	431a      	orrs	r2, r3
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	4313      	orrs	r3, r2
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	4313      	orrs	r3, r2
 8007920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	697a      	ldr	r2, [r7, #20]
 8007926:	609a      	str	r2, [r3, #8]
}
 8007928:	bf00      	nop
 800792a:	371c      	adds	r7, #28
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007944:	2b01      	cmp	r3, #1
 8007946:	d101      	bne.n	800794c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007948:	2302      	movs	r3, #2
 800794a:	e068      	b.n	8007a1e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2202      	movs	r2, #2
 8007958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a2e      	ldr	r2, [pc, #184]	; (8007a2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d004      	beq.n	8007980 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a2d      	ldr	r2, [pc, #180]	; (8007a30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d108      	bne.n	8007992 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007986:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	4313      	orrs	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007998:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a1e      	ldr	r2, [pc, #120]	; (8007a2c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d01d      	beq.n	80079f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079be:	d018      	beq.n	80079f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a1b      	ldr	r2, [pc, #108]	; (8007a34 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d013      	beq.n	80079f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a1a      	ldr	r2, [pc, #104]	; (8007a38 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d00e      	beq.n	80079f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a18      	ldr	r2, [pc, #96]	; (8007a3c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d009      	beq.n	80079f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a13      	ldr	r2, [pc, #76]	; (8007a30 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d004      	beq.n	80079f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a14      	ldr	r2, [pc, #80]	; (8007a40 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d10c      	bne.n	8007a0c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	4313      	orrs	r3, r2
 8007a02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	40012c00 	.word	0x40012c00
 8007a30:	40013400 	.word	0x40013400
 8007a34:	40000400 	.word	0x40000400
 8007a38:	40000800 	.word	0x40000800
 8007a3c:	40000c00 	.word	0x40000c00
 8007a40:	40014000 	.word	0x40014000

08007a44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a74:	bf00      	nop
 8007a76:	370c      	adds	r7, #12
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d101      	bne.n	8007a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e040      	b.n	8007b14 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d106      	bne.n	8007aa8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7fb fe62 	bl	800376c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2224      	movs	r2, #36	; 0x24
 8007aac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f022 0201 	bic.w	r2, r2, #1
 8007abc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 f82c 	bl	8007b1c <UART_SetConfig>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d101      	bne.n	8007ace <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e022      	b.n	8007b14 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d002      	beq.n	8007adc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fad8 	bl	800808c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007aea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689a      	ldr	r2, [r3, #8]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007afa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f042 0201 	orr.w	r2, r2, #1
 8007b0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fb5f 	bl	80081d0 <UART_CheckIdleState>
 8007b12:	4603      	mov	r3, r0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3708      	adds	r7, #8
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b20:	b08a      	sub	sp, #40	; 0x28
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007b26:	2300      	movs	r3, #0
 8007b28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	689a      	ldr	r2, [r3, #8]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	431a      	orrs	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	431a      	orrs	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	69db      	ldr	r3, [r3, #28]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	4ba4      	ldr	r3, [pc, #656]	; (8007ddc <UART_SetConfig+0x2c0>)
 8007b4c:	4013      	ands	r3, r2
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	6812      	ldr	r2, [r2, #0]
 8007b52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b54:	430b      	orrs	r3, r1
 8007b56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	68da      	ldr	r2, [r3, #12]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	430a      	orrs	r2, r1
 8007b6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	699b      	ldr	r3, [r3, #24]
 8007b72:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a99      	ldr	r2, [pc, #612]	; (8007de0 <UART_SetConfig+0x2c4>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d004      	beq.n	8007b88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b84:	4313      	orrs	r3, r2
 8007b86:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	689b      	ldr	r3, [r3, #8]
 8007b8e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a90      	ldr	r2, [pc, #576]	; (8007de4 <UART_SetConfig+0x2c8>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d126      	bne.n	8007bf4 <UART_SetConfig+0xd8>
 8007ba6:	4b90      	ldr	r3, [pc, #576]	; (8007de8 <UART_SetConfig+0x2cc>)
 8007ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bac:	f003 0303 	and.w	r3, r3, #3
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d81b      	bhi.n	8007bec <UART_SetConfig+0xd0>
 8007bb4:	a201      	add	r2, pc, #4	; (adr r2, 8007bbc <UART_SetConfig+0xa0>)
 8007bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bba:	bf00      	nop
 8007bbc:	08007bcd 	.word	0x08007bcd
 8007bc0:	08007bdd 	.word	0x08007bdd
 8007bc4:	08007bd5 	.word	0x08007bd5
 8007bc8:	08007be5 	.word	0x08007be5
 8007bcc:	2301      	movs	r3, #1
 8007bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bd2:	e116      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bda:	e112      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007bdc:	2304      	movs	r3, #4
 8007bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007be2:	e10e      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007be4:	2308      	movs	r3, #8
 8007be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bea:	e10a      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007bec:	2310      	movs	r3, #16
 8007bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007bf2:	e106      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a7c      	ldr	r2, [pc, #496]	; (8007dec <UART_SetConfig+0x2d0>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d138      	bne.n	8007c70 <UART_SetConfig+0x154>
 8007bfe:	4b7a      	ldr	r3, [pc, #488]	; (8007de8 <UART_SetConfig+0x2cc>)
 8007c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c04:	f003 030c 	and.w	r3, r3, #12
 8007c08:	2b0c      	cmp	r3, #12
 8007c0a:	d82d      	bhi.n	8007c68 <UART_SetConfig+0x14c>
 8007c0c:	a201      	add	r2, pc, #4	; (adr r2, 8007c14 <UART_SetConfig+0xf8>)
 8007c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c12:	bf00      	nop
 8007c14:	08007c49 	.word	0x08007c49
 8007c18:	08007c69 	.word	0x08007c69
 8007c1c:	08007c69 	.word	0x08007c69
 8007c20:	08007c69 	.word	0x08007c69
 8007c24:	08007c59 	.word	0x08007c59
 8007c28:	08007c69 	.word	0x08007c69
 8007c2c:	08007c69 	.word	0x08007c69
 8007c30:	08007c69 	.word	0x08007c69
 8007c34:	08007c51 	.word	0x08007c51
 8007c38:	08007c69 	.word	0x08007c69
 8007c3c:	08007c69 	.word	0x08007c69
 8007c40:	08007c69 	.word	0x08007c69
 8007c44:	08007c61 	.word	0x08007c61
 8007c48:	2300      	movs	r3, #0
 8007c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c4e:	e0d8      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007c50:	2302      	movs	r3, #2
 8007c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c56:	e0d4      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007c58:	2304      	movs	r3, #4
 8007c5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c5e:	e0d0      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007c60:	2308      	movs	r3, #8
 8007c62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c66:	e0cc      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007c68:	2310      	movs	r3, #16
 8007c6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007c6e:	e0c8      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a5e      	ldr	r2, [pc, #376]	; (8007df0 <UART_SetConfig+0x2d4>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d125      	bne.n	8007cc6 <UART_SetConfig+0x1aa>
 8007c7a:	4b5b      	ldr	r3, [pc, #364]	; (8007de8 <UART_SetConfig+0x2cc>)
 8007c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c84:	2b30      	cmp	r3, #48	; 0x30
 8007c86:	d016      	beq.n	8007cb6 <UART_SetConfig+0x19a>
 8007c88:	2b30      	cmp	r3, #48	; 0x30
 8007c8a:	d818      	bhi.n	8007cbe <UART_SetConfig+0x1a2>
 8007c8c:	2b20      	cmp	r3, #32
 8007c8e:	d00a      	beq.n	8007ca6 <UART_SetConfig+0x18a>
 8007c90:	2b20      	cmp	r3, #32
 8007c92:	d814      	bhi.n	8007cbe <UART_SetConfig+0x1a2>
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <UART_SetConfig+0x182>
 8007c98:	2b10      	cmp	r3, #16
 8007c9a:	d008      	beq.n	8007cae <UART_SetConfig+0x192>
 8007c9c:	e00f      	b.n	8007cbe <UART_SetConfig+0x1a2>
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ca4:	e0ad      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007ca6:	2302      	movs	r3, #2
 8007ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cac:	e0a9      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007cae:	2304      	movs	r3, #4
 8007cb0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cb4:	e0a5      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007cb6:	2308      	movs	r3, #8
 8007cb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cbc:	e0a1      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007cbe:	2310      	movs	r3, #16
 8007cc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cc4:	e09d      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a4a      	ldr	r2, [pc, #296]	; (8007df4 <UART_SetConfig+0x2d8>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d125      	bne.n	8007d1c <UART_SetConfig+0x200>
 8007cd0:	4b45      	ldr	r3, [pc, #276]	; (8007de8 <UART_SetConfig+0x2cc>)
 8007cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007cda:	2bc0      	cmp	r3, #192	; 0xc0
 8007cdc:	d016      	beq.n	8007d0c <UART_SetConfig+0x1f0>
 8007cde:	2bc0      	cmp	r3, #192	; 0xc0
 8007ce0:	d818      	bhi.n	8007d14 <UART_SetConfig+0x1f8>
 8007ce2:	2b80      	cmp	r3, #128	; 0x80
 8007ce4:	d00a      	beq.n	8007cfc <UART_SetConfig+0x1e0>
 8007ce6:	2b80      	cmp	r3, #128	; 0x80
 8007ce8:	d814      	bhi.n	8007d14 <UART_SetConfig+0x1f8>
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d002      	beq.n	8007cf4 <UART_SetConfig+0x1d8>
 8007cee:	2b40      	cmp	r3, #64	; 0x40
 8007cf0:	d008      	beq.n	8007d04 <UART_SetConfig+0x1e8>
 8007cf2:	e00f      	b.n	8007d14 <UART_SetConfig+0x1f8>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cfa:	e082      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d02:	e07e      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007d04:	2304      	movs	r3, #4
 8007d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d0a:	e07a      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007d0c:	2308      	movs	r3, #8
 8007d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d12:	e076      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007d14:	2310      	movs	r3, #16
 8007d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d1a:	e072      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a35      	ldr	r2, [pc, #212]	; (8007df8 <UART_SetConfig+0x2dc>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d12a      	bne.n	8007d7c <UART_SetConfig+0x260>
 8007d26:	4b30      	ldr	r3, [pc, #192]	; (8007de8 <UART_SetConfig+0x2cc>)
 8007d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d34:	d01a      	beq.n	8007d6c <UART_SetConfig+0x250>
 8007d36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d3a:	d81b      	bhi.n	8007d74 <UART_SetConfig+0x258>
 8007d3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d40:	d00c      	beq.n	8007d5c <UART_SetConfig+0x240>
 8007d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d46:	d815      	bhi.n	8007d74 <UART_SetConfig+0x258>
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d003      	beq.n	8007d54 <UART_SetConfig+0x238>
 8007d4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d50:	d008      	beq.n	8007d64 <UART_SetConfig+0x248>
 8007d52:	e00f      	b.n	8007d74 <UART_SetConfig+0x258>
 8007d54:	2300      	movs	r3, #0
 8007d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d5a:	e052      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d62:	e04e      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007d64:	2304      	movs	r3, #4
 8007d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d6a:	e04a      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007d6c:	2308      	movs	r3, #8
 8007d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d72:	e046      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007d74:	2310      	movs	r3, #16
 8007d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007d7a:	e042      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a17      	ldr	r2, [pc, #92]	; (8007de0 <UART_SetConfig+0x2c4>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d13a      	bne.n	8007dfc <UART_SetConfig+0x2e0>
 8007d86:	4b18      	ldr	r3, [pc, #96]	; (8007de8 <UART_SetConfig+0x2cc>)
 8007d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007d90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d94:	d01a      	beq.n	8007dcc <UART_SetConfig+0x2b0>
 8007d96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d9a:	d81b      	bhi.n	8007dd4 <UART_SetConfig+0x2b8>
 8007d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007da0:	d00c      	beq.n	8007dbc <UART_SetConfig+0x2a0>
 8007da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007da6:	d815      	bhi.n	8007dd4 <UART_SetConfig+0x2b8>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d003      	beq.n	8007db4 <UART_SetConfig+0x298>
 8007dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007db0:	d008      	beq.n	8007dc4 <UART_SetConfig+0x2a8>
 8007db2:	e00f      	b.n	8007dd4 <UART_SetConfig+0x2b8>
 8007db4:	2300      	movs	r3, #0
 8007db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dba:	e022      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dc2:	e01e      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007dc4:	2304      	movs	r3, #4
 8007dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dca:	e01a      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007dcc:	2308      	movs	r3, #8
 8007dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dd2:	e016      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007dd4:	2310      	movs	r3, #16
 8007dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007dda:	e012      	b.n	8007e02 <UART_SetConfig+0x2e6>
 8007ddc:	efff69f3 	.word	0xefff69f3
 8007de0:	40008000 	.word	0x40008000
 8007de4:	40013800 	.word	0x40013800
 8007de8:	40021000 	.word	0x40021000
 8007dec:	40004400 	.word	0x40004400
 8007df0:	40004800 	.word	0x40004800
 8007df4:	40004c00 	.word	0x40004c00
 8007df8:	40005000 	.word	0x40005000
 8007dfc:	2310      	movs	r3, #16
 8007dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a9f      	ldr	r2, [pc, #636]	; (8008084 <UART_SetConfig+0x568>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d17a      	bne.n	8007f02 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007e0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	d824      	bhi.n	8007e5e <UART_SetConfig+0x342>
 8007e14:	a201      	add	r2, pc, #4	; (adr r2, 8007e1c <UART_SetConfig+0x300>)
 8007e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e1a:	bf00      	nop
 8007e1c:	08007e41 	.word	0x08007e41
 8007e20:	08007e5f 	.word	0x08007e5f
 8007e24:	08007e49 	.word	0x08007e49
 8007e28:	08007e5f 	.word	0x08007e5f
 8007e2c:	08007e4f 	.word	0x08007e4f
 8007e30:	08007e5f 	.word	0x08007e5f
 8007e34:	08007e5f 	.word	0x08007e5f
 8007e38:	08007e5f 	.word	0x08007e5f
 8007e3c:	08007e57 	.word	0x08007e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e40:	f7fd fdaa 	bl	8005998 <HAL_RCC_GetPCLK1Freq>
 8007e44:	61f8      	str	r0, [r7, #28]
        break;
 8007e46:	e010      	b.n	8007e6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e48:	4b8f      	ldr	r3, [pc, #572]	; (8008088 <UART_SetConfig+0x56c>)
 8007e4a:	61fb      	str	r3, [r7, #28]
        break;
 8007e4c:	e00d      	b.n	8007e6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e4e:	f7fd fd0b 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 8007e52:	61f8      	str	r0, [r7, #28]
        break;
 8007e54:	e009      	b.n	8007e6a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e5a:	61fb      	str	r3, [r7, #28]
        break;
 8007e5c:	e005      	b.n	8007e6a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007e68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 80fb 	beq.w	8008068 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	685a      	ldr	r2, [r3, #4]
 8007e76:	4613      	mov	r3, r2
 8007e78:	005b      	lsls	r3, r3, #1
 8007e7a:	4413      	add	r3, r2
 8007e7c:	69fa      	ldr	r2, [r7, #28]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d305      	bcc.n	8007e8e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007e88:	69fa      	ldr	r2, [r7, #28]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d903      	bls.n	8007e96 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007e94:	e0e8      	b.n	8008068 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	461c      	mov	r4, r3
 8007e9c:	4615      	mov	r5, r2
 8007e9e:	f04f 0200 	mov.w	r2, #0
 8007ea2:	f04f 0300 	mov.w	r3, #0
 8007ea6:	022b      	lsls	r3, r5, #8
 8007ea8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007eac:	0222      	lsls	r2, r4, #8
 8007eae:	68f9      	ldr	r1, [r7, #12]
 8007eb0:	6849      	ldr	r1, [r1, #4]
 8007eb2:	0849      	lsrs	r1, r1, #1
 8007eb4:	2000      	movs	r0, #0
 8007eb6:	4688      	mov	r8, r1
 8007eb8:	4681      	mov	r9, r0
 8007eba:	eb12 0a08 	adds.w	sl, r2, r8
 8007ebe:	eb43 0b09 	adc.w	fp, r3, r9
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	603b      	str	r3, [r7, #0]
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ed0:	4650      	mov	r0, sl
 8007ed2:	4659      	mov	r1, fp
 8007ed4:	f7f8 ffda 	bl	8000e8c <__aeabi_uldivmod>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4613      	mov	r3, r2
 8007ede:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ee6:	d308      	bcc.n	8007efa <UART_SetConfig+0x3de>
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eee:	d204      	bcs.n	8007efa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	69ba      	ldr	r2, [r7, #24]
 8007ef6:	60da      	str	r2, [r3, #12]
 8007ef8:	e0b6      	b.n	8008068 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007f00:	e0b2      	b.n	8008068 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	69db      	ldr	r3, [r3, #28]
 8007f06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f0a:	d15e      	bne.n	8007fca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007f0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007f10:	2b08      	cmp	r3, #8
 8007f12:	d828      	bhi.n	8007f66 <UART_SetConfig+0x44a>
 8007f14:	a201      	add	r2, pc, #4	; (adr r2, 8007f1c <UART_SetConfig+0x400>)
 8007f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1a:	bf00      	nop
 8007f1c:	08007f41 	.word	0x08007f41
 8007f20:	08007f49 	.word	0x08007f49
 8007f24:	08007f51 	.word	0x08007f51
 8007f28:	08007f67 	.word	0x08007f67
 8007f2c:	08007f57 	.word	0x08007f57
 8007f30:	08007f67 	.word	0x08007f67
 8007f34:	08007f67 	.word	0x08007f67
 8007f38:	08007f67 	.word	0x08007f67
 8007f3c:	08007f5f 	.word	0x08007f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f40:	f7fd fd2a 	bl	8005998 <HAL_RCC_GetPCLK1Freq>
 8007f44:	61f8      	str	r0, [r7, #28]
        break;
 8007f46:	e014      	b.n	8007f72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f48:	f7fd fd3c 	bl	80059c4 <HAL_RCC_GetPCLK2Freq>
 8007f4c:	61f8      	str	r0, [r7, #28]
        break;
 8007f4e:	e010      	b.n	8007f72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f50:	4b4d      	ldr	r3, [pc, #308]	; (8008088 <UART_SetConfig+0x56c>)
 8007f52:	61fb      	str	r3, [r7, #28]
        break;
 8007f54:	e00d      	b.n	8007f72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f56:	f7fd fc87 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 8007f5a:	61f8      	str	r0, [r7, #28]
        break;
 8007f5c:	e009      	b.n	8007f72 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f62:	61fb      	str	r3, [r7, #28]
        break;
 8007f64:	e005      	b.n	8007f72 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007f66:	2300      	movs	r3, #0
 8007f68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007f70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d077      	beq.n	8008068 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	005a      	lsls	r2, r3, #1
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	085b      	lsrs	r3, r3, #1
 8007f82:	441a      	add	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f8c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	2b0f      	cmp	r3, #15
 8007f92:	d916      	bls.n	8007fc2 <UART_SetConfig+0x4a6>
 8007f94:	69bb      	ldr	r3, [r7, #24]
 8007f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f9a:	d212      	bcs.n	8007fc2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	f023 030f 	bic.w	r3, r3, #15
 8007fa4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	085b      	lsrs	r3, r3, #1
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	f003 0307 	and.w	r3, r3, #7
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	8afb      	ldrh	r3, [r7, #22]
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	8afa      	ldrh	r2, [r7, #22]
 8007fbe:	60da      	str	r2, [r3, #12]
 8007fc0:	e052      	b.n	8008068 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007fc8:	e04e      	b.n	8008068 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007fce:	2b08      	cmp	r3, #8
 8007fd0:	d827      	bhi.n	8008022 <UART_SetConfig+0x506>
 8007fd2:	a201      	add	r2, pc, #4	; (adr r2, 8007fd8 <UART_SetConfig+0x4bc>)
 8007fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd8:	08007ffd 	.word	0x08007ffd
 8007fdc:	08008005 	.word	0x08008005
 8007fe0:	0800800d 	.word	0x0800800d
 8007fe4:	08008023 	.word	0x08008023
 8007fe8:	08008013 	.word	0x08008013
 8007fec:	08008023 	.word	0x08008023
 8007ff0:	08008023 	.word	0x08008023
 8007ff4:	08008023 	.word	0x08008023
 8007ff8:	0800801b 	.word	0x0800801b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ffc:	f7fd fccc 	bl	8005998 <HAL_RCC_GetPCLK1Freq>
 8008000:	61f8      	str	r0, [r7, #28]
        break;
 8008002:	e014      	b.n	800802e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008004:	f7fd fcde 	bl	80059c4 <HAL_RCC_GetPCLK2Freq>
 8008008:	61f8      	str	r0, [r7, #28]
        break;
 800800a:	e010      	b.n	800802e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800800c:	4b1e      	ldr	r3, [pc, #120]	; (8008088 <UART_SetConfig+0x56c>)
 800800e:	61fb      	str	r3, [r7, #28]
        break;
 8008010:	e00d      	b.n	800802e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008012:	f7fd fc29 	bl	8005868 <HAL_RCC_GetSysClockFreq>
 8008016:	61f8      	str	r0, [r7, #28]
        break;
 8008018:	e009      	b.n	800802e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800801a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800801e:	61fb      	str	r3, [r7, #28]
        break;
 8008020:	e005      	b.n	800802e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008022:	2300      	movs	r3, #0
 8008024:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800802c:	bf00      	nop
    }

    if (pclk != 0U)
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d019      	beq.n	8008068 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	085a      	lsrs	r2, r3, #1
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	441a      	add	r2, r3
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	fbb2 f3f3 	udiv	r3, r2, r3
 8008046:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	2b0f      	cmp	r3, #15
 800804c:	d909      	bls.n	8008062 <UART_SetConfig+0x546>
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008054:	d205      	bcs.n	8008062 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	b29a      	uxth	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	60da      	str	r2, [r3, #12]
 8008060:	e002      	b.n	8008068 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2200      	movs	r2, #0
 800806c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2200      	movs	r2, #0
 8008072:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008074:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008078:	4618      	mov	r0, r3
 800807a:	3728      	adds	r7, #40	; 0x28
 800807c:	46bd      	mov	sp, r7
 800807e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008082:	bf00      	nop
 8008084:	40008000 	.word	0x40008000
 8008088:	00f42400 	.word	0x00f42400

0800808c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008098:	f003 0301 	and.w	r3, r3, #1
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00a      	beq.n	80080b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	430a      	orrs	r2, r1
 80080b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ba:	f003 0302 	and.w	r3, r3, #2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d00a      	beq.n	80080d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	430a      	orrs	r2, r1
 80080d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080dc:	f003 0304 	and.w	r3, r3, #4
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00a      	beq.n	80080fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	430a      	orrs	r2, r1
 80080f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fe:	f003 0308 	and.w	r3, r3, #8
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00a      	beq.n	800811c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	430a      	orrs	r2, r1
 800811a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	f003 0310 	and.w	r3, r3, #16
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00a      	beq.n	800813e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	430a      	orrs	r2, r1
 800813c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008142:	f003 0320 	and.w	r3, r3, #32
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00a      	beq.n	8008160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	430a      	orrs	r2, r1
 800815e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008168:	2b00      	cmp	r3, #0
 800816a:	d01a      	beq.n	80081a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	430a      	orrs	r2, r1
 8008180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800818a:	d10a      	bne.n	80081a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	430a      	orrs	r2, r1
 80081a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00a      	beq.n	80081c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	430a      	orrs	r2, r1
 80081c2:	605a      	str	r2, [r3, #4]
  }
}
 80081c4:	bf00      	nop
 80081c6:	370c      	adds	r7, #12
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af02      	add	r7, sp, #8
 80081d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2200      	movs	r2, #0
 80081dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80081e0:	f7fb fc10 	bl	8003a04 <HAL_GetTick>
 80081e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f003 0308 	and.w	r3, r3, #8
 80081f0:	2b08      	cmp	r3, #8
 80081f2:	d10e      	bne.n	8008212 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081f8:	9300      	str	r3, [sp, #0]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2200      	movs	r2, #0
 80081fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f82d 	bl	8008262 <UART_WaitOnFlagUntilTimeout>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e023      	b.n	800825a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0304 	and.w	r3, r3, #4
 800821c:	2b04      	cmp	r3, #4
 800821e:	d10e      	bne.n	800823e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008220:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f817 	bl	8008262 <UART_WaitOnFlagUntilTimeout>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e00d      	b.n	800825a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2220      	movs	r2, #32
 8008242:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2220      	movs	r2, #32
 8008248:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	4618      	mov	r0, r3
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}

08008262 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008262:	b580      	push	{r7, lr}
 8008264:	b09c      	sub	sp, #112	; 0x70
 8008266:	af00      	add	r7, sp, #0
 8008268:	60f8      	str	r0, [r7, #12]
 800826a:	60b9      	str	r1, [r7, #8]
 800826c:	603b      	str	r3, [r7, #0]
 800826e:	4613      	mov	r3, r2
 8008270:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008272:	e0a5      	b.n	80083c0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800827a:	f000 80a1 	beq.w	80083c0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800827e:	f7fb fbc1 	bl	8003a04 <HAL_GetTick>
 8008282:	4602      	mov	r2, r0
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	1ad3      	subs	r3, r2, r3
 8008288:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800828a:	429a      	cmp	r2, r3
 800828c:	d302      	bcc.n	8008294 <UART_WaitOnFlagUntilTimeout+0x32>
 800828e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008290:	2b00      	cmp	r3, #0
 8008292:	d13e      	bne.n	8008312 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800829c:	e853 3f00 	ldrex	r3, [r3]
 80082a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80082a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082a8:	667b      	str	r3, [r7, #100]	; 0x64
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80082b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80082b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80082ba:	e841 2300 	strex	r3, r2, [r1]
 80082be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80082c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e6      	bne.n	8008294 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	3308      	adds	r3, #8
 80082cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082d0:	e853 3f00 	ldrex	r3, [r3]
 80082d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d8:	f023 0301 	bic.w	r3, r3, #1
 80082dc:	663b      	str	r3, [r7, #96]	; 0x60
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	3308      	adds	r3, #8
 80082e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80082e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80082e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80082ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082ee:	e841 2300 	strex	r3, r2, [r1]
 80082f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80082f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1e5      	bne.n	80082c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2220      	movs	r2, #32
 80082fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2220      	movs	r2, #32
 8008304:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e067      	b.n	80083e2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 0304 	and.w	r3, r3, #4
 800831c:	2b00      	cmp	r3, #0
 800831e:	d04f      	beq.n	80083c0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800832a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800832e:	d147      	bne.n	80083c0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008338:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008342:	e853 3f00 	ldrex	r3, [r3]
 8008346:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800834e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	461a      	mov	r2, r3
 8008356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008358:	637b      	str	r3, [r7, #52]	; 0x34
 800835a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800835e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008360:	e841 2300 	strex	r3, r2, [r1]
 8008364:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1e6      	bne.n	800833a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	3308      	adds	r3, #8
 8008372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	e853 3f00 	ldrex	r3, [r3]
 800837a:	613b      	str	r3, [r7, #16]
   return(result);
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	f023 0301 	bic.w	r3, r3, #1
 8008382:	66bb      	str	r3, [r7, #104]	; 0x68
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	3308      	adds	r3, #8
 800838a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800838c:	623a      	str	r2, [r7, #32]
 800838e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008390:	69f9      	ldr	r1, [r7, #28]
 8008392:	6a3a      	ldr	r2, [r7, #32]
 8008394:	e841 2300 	strex	r3, r2, [r1]
 8008398:	61bb      	str	r3, [r7, #24]
   return(result);
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d1e5      	bne.n	800836c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	2220      	movs	r2, #32
 80083a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2220      	movs	r2, #32
 80083aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2220      	movs	r2, #32
 80083b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2200      	movs	r2, #0
 80083b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e010      	b.n	80083e2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	69da      	ldr	r2, [r3, #28]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	4013      	ands	r3, r2
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	bf0c      	ite	eq
 80083d0:	2301      	moveq	r3, #1
 80083d2:	2300      	movne	r3, #0
 80083d4:	b2db      	uxtb	r3, r3
 80083d6:	461a      	mov	r2, r3
 80083d8:	79fb      	ldrb	r3, [r7, #7]
 80083da:	429a      	cmp	r2, r3
 80083dc:	f43f af4a 	beq.w	8008274 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80083e0:	2300      	movs	r3, #0
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3770      	adds	r7, #112	; 0x70
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
	...

080083ec <iNemoEngine_gbias_init>:
 80083ec:	b430      	push	{r4, r5}
 80083ee:	4b1f      	ldr	r3, [pc, #124]	; (800846c <iNemoEngine_gbias_init+0x80>)
 80083f0:	4a1f      	ldr	r2, [pc, #124]	; (8008470 <iNemoEngine_gbias_init+0x84>)
 80083f2:	4920      	ldr	r1, [pc, #128]	; (8008474 <iNemoEngine_gbias_init+0x88>)
 80083f4:	4d20      	ldr	r5, [pc, #128]	; (8008478 <iNemoEngine_gbias_init+0x8c>)
 80083f6:	4c21      	ldr	r4, [pc, #132]	; (800847c <iNemoEngine_gbias_init+0x90>)
 80083f8:	601a      	str	r2, [r3, #0]
 80083fa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80083fe:	2200      	movs	r2, #0
 8008400:	6059      	str	r1, [r3, #4]
 8008402:	481f      	ldr	r0, [pc, #124]	; (8008480 <iNemoEngine_gbias_init+0x94>)
 8008404:	609d      	str	r5, [r3, #8]
 8008406:	2100      	movs	r1, #0
 8008408:	60dc      	str	r4, [r3, #12]
 800840a:	ed83 0a04 	vstr	s0, [r3, #16]
 800840e:	6158      	str	r0, [r3, #20]
 8008410:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8008414:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8008418:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800841c:	655a      	str	r2, [r3, #84]	; 0x54
 800841e:	661a      	str	r2, [r3, #96]	; 0x60
 8008420:	659a      	str	r2, [r3, #88]	; 0x58
 8008422:	665a      	str	r2, [r3, #100]	; 0x64
 8008424:	65da      	str	r2, [r3, #92]	; 0x5c
 8008426:	669a      	str	r2, [r3, #104]	; 0x68
 8008428:	671a      	str	r2, [r3, #112]	; 0x70
 800842a:	67da      	str	r2, [r3, #124]	; 0x7c
 800842c:	675a      	str	r2, [r3, #116]	; 0x74
 800842e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8008432:	679a      	str	r2, [r3, #120]	; 0x78
 8008434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8008438:	61da      	str	r2, [r3, #28]
 800843a:	629a      	str	r2, [r3, #40]	; 0x28
 800843c:	621a      	str	r2, [r3, #32]
 800843e:	62da      	str	r2, [r3, #44]	; 0x2c
 8008440:	625a      	str	r2, [r3, #36]	; 0x24
 8008442:	631a      	str	r2, [r3, #48]	; 0x30
 8008444:	f8a3 1088 	strh.w	r1, [r3, #136]	; 0x88
 8008448:	f8a3 1050 	strh.w	r1, [r3, #80]	; 0x50
 800844c:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
 8008450:	8319      	strh	r1, [r3, #24]
 8008452:	8699      	strh	r1, [r3, #52]	; 0x34
 8008454:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
 8008458:	bc30      	pop	{r4, r5}
 800845a:	639a      	str	r2, [r3, #56]	; 0x38
 800845c:	645a      	str	r2, [r3, #68]	; 0x44
 800845e:	63da      	str	r2, [r3, #60]	; 0x3c
 8008460:	649a      	str	r2, [r3, #72]	; 0x48
 8008462:	641a      	str	r2, [r3, #64]	; 0x40
 8008464:	64da      	str	r2, [r3, #76]	; 0x4c
 8008466:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
 800846a:	4770      	bx	lr
 800846c:	20001698 	.word	0x20001698
 8008470:	3ab20043 	.word	0x3ab20043
 8008474:	3e8a3d71 	.word	0x3e8a3d71
 8008478:	3ea8f5c3 	.word	0x3ea8f5c3
 800847c:	3d09c927 	.word	0x3d09c927
 8008480:	41700000 	.word	0x41700000

08008484 <rotVect>:
 8008484:	f991 3001 	ldrsb.w	r3, [r1, #1]
 8008488:	ed92 5a01 	vldr	s10, [r2, #4]
 800848c:	edd2 5a00 	vldr	s11, [r2]
 8008490:	ed92 6a02 	vldr	s12, [r2, #8]
 8008494:	ee07 3a90 	vmov	s15, r3
 8008498:	f991 3000 	ldrsb.w	r3, [r1]
 800849c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084a0:	ee06 3a90 	vmov	s13, r3
 80084a4:	ee67 7a85 	vmul.f32	s15, s15, s10
 80084a8:	f991 3002 	ldrsb.w	r3, [r1, #2]
 80084ac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80084b0:	ee07 3a10 	vmov	s14, r3
 80084b4:	eee6 7aa5 	vfma.f32	s15, s13, s11
 80084b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80084bc:	eee7 7a06 	vfma.f32	s15, s14, s12
 80084c0:	edc0 7a00 	vstr	s15, [r0]
 80084c4:	f991 3004 	ldrsb.w	r3, [r1, #4]
 80084c8:	ed92 5a01 	vldr	s10, [r2, #4]
 80084cc:	edd2 5a00 	vldr	s11, [r2]
 80084d0:	ed92 6a02 	vldr	s12, [r2, #8]
 80084d4:	ee07 3a90 	vmov	s15, r3
 80084d8:	f991 3003 	ldrsb.w	r3, [r1, #3]
 80084dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084e0:	ee06 3a90 	vmov	s13, r3
 80084e4:	ee67 7a85 	vmul.f32	s15, s15, s10
 80084e8:	f991 3005 	ldrsb.w	r3, [r1, #5]
 80084ec:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80084f0:	ee07 3a10 	vmov	s14, r3
 80084f4:	eee6 7aa5 	vfma.f32	s15, s13, s11
 80084f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80084fc:	eee7 7a06 	vfma.f32	s15, s14, s12
 8008500:	edc0 7a01 	vstr	s15, [r0, #4]
 8008504:	f991 3007 	ldrsb.w	r3, [r1, #7]
 8008508:	ed92 5a01 	vldr	s10, [r2, #4]
 800850c:	edd2 5a00 	vldr	s11, [r2]
 8008510:	ed92 6a02 	vldr	s12, [r2, #8]
 8008514:	ee07 3a90 	vmov	s15, r3
 8008518:	f991 3006 	ldrsb.w	r3, [r1, #6]
 800851c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008520:	ee06 3a90 	vmov	s13, r3
 8008524:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008528:	f991 3008 	ldrsb.w	r3, [r1, #8]
 800852c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8008530:	ee07 3a10 	vmov	s14, r3
 8008534:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8008538:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800853c:	eee7 7a06 	vfma.f32	s15, s14, s12
 8008540:	edc0 7a02 	vstr	s15, [r0, #8]
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop

08008548 <m_mldivide>:
 8008548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800854c:	b097      	sub	sp, #92	; 0x5c
 800854e:	4607      	mov	r7, r0
 8008550:	460d      	mov	r5, r1
 8008552:	4614      	mov	r4, r2
 8008554:	4606      	mov	r6, r0
 8008556:	f100 0820 	add.w	r8, r0, #32
 800855a:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 800855e:	6830      	ldr	r0, [r6, #0]
 8008560:	6871      	ldr	r1, [r6, #4]
 8008562:	68b2      	ldr	r2, [r6, #8]
 8008564:	68f3      	ldr	r3, [r6, #12]
 8008566:	46f4      	mov	ip, lr
 8008568:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800856c:	3610      	adds	r6, #16
 800856e:	4546      	cmp	r6, r8
 8008570:	46e6      	mov	lr, ip
 8008572:	d1f4      	bne.n	800855e <m_mldivide+0x16>
 8008574:	edd7 7a00 	vldr	s15, [r7]
 8008578:	ed97 7a01 	vldr	s14, [r7, #4]
 800857c:	6830      	ldr	r0, [r6, #0]
 800857e:	f8cc 0000 	str.w	r0, [ip]
 8008582:	eef0 7ae7 	vabs.f32	s15, s15
 8008586:	eeb0 7ac7 	vabs.f32	s14, s14
 800858a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800858e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008592:	f140 8170 	bpl.w	8008876 <m_mldivide+0x32e>
 8008596:	2206      	movs	r2, #6
 8008598:	f04f 0804 	mov.w	r8, #4
 800859c:	2300      	movs	r3, #0
 800859e:	9203      	str	r2, [sp, #12]
 80085a0:	2201      	movs	r2, #1
 80085a2:	eef0 7a47 	vmov.f32	s15, s14
 80085a6:	4646      	mov	r6, r8
 80085a8:	4618      	mov	r0, r3
 80085aa:	f04f 0e07 	mov.w	lr, #7
 80085ae:	f04f 0903 	mov.w	r9, #3
 80085b2:	9201      	str	r2, [sp, #4]
 80085b4:	ed97 7a02 	vldr	s14, [r7, #8]
 80085b8:	eeb0 7ac7 	vabs.f32	s14, s14
 80085bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085c4:	f340 8150 	ble.w	8008868 <m_mldivide+0x320>
 80085c8:	2307      	movs	r3, #7
 80085ca:	f04f 0e08 	mov.w	lr, #8
 80085ce:	f04f 0904 	mov.w	r9, #4
 80085d2:	9303      	str	r3, [sp, #12]
 80085d4:	2202      	movs	r2, #2
 80085d6:	2300      	movs	r3, #0
 80085d8:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80085dc:	4676      	mov	r6, lr
 80085de:	4648      	mov	r0, r9
 80085e0:	f04f 0b06 	mov.w	fp, #6
 80085e4:	f04f 0c03 	mov.w	ip, #3
 80085e8:	f04f 0805 	mov.w	r8, #5
 80085ec:	2301      	movs	r3, #1
 80085ee:	4438      	add	r0, r7
 80085f0:	4437      	add	r7, r6
 80085f2:	edd0 6a00 	vldr	s13, [r0]
 80085f6:	ed97 7a00 	vldr	s14, [r7]
 80085fa:	9902      	ldr	r1, [sp, #8]
 80085fc:	9f03      	ldr	r7, [sp, #12]
 80085fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008602:	aa16      	add	r2, sp, #88	; 0x58
 8008604:	eb02 0a81 	add.w	sl, r2, r1, lsl #2
 8008608:	eb02 0088 	add.w	r0, r2, r8, lsl #2
 800860c:	eb02 0689 	add.w	r6, r2, r9, lsl #2
 8008610:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8008614:	920a      	str	r2, [sp, #40]	; 0x28
 8008616:	aa16      	add	r2, sp, #88	; 0x58
 8008618:	eb02 088c 	add.w	r8, r2, ip, lsl #2
 800861c:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8008620:	eb02 0c8e 	add.w	ip, r2, lr, lsl #2
 8008624:	ea4f 028e 	mov.w	r2, lr, lsl #2
 8008628:	920b      	str	r2, [sp, #44]	; 0x2c
 800862a:	aa16      	add	r2, sp, #88	; 0x58
 800862c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008630:	ed42 7a09 	vstr	s15, [r2, #-36]	; 0xffffffdc
 8008634:	9208      	str	r2, [sp, #32]
 8008636:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
 800863a:	9a01      	ldr	r2, [sp, #4]
 800863c:	ed1a 7a09 	vldr	s14, [sl, #-36]	; 0xffffffdc
 8008640:	eb0e 0e87 	add.w	lr, lr, r7, lsl #2
 8008644:	af16      	add	r7, sp, #88	; 0x58
 8008646:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 800864a:	ed57 7a09 	vldr	s15, [r7, #-36]	; 0xffffffdc
 800864e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008652:	009a      	lsls	r2, r3, #2
 8008654:	9205      	str	r2, [sp, #20]
 8008656:	af16      	add	r7, sp, #88	; 0x58
 8008658:	9a02      	ldr	r2, [sp, #8]
 800865a:	eb07 078b 	add.w	r7, r7, fp, lsl #2
 800865e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8008662:	f8cd b010 	str.w	fp, [sp, #16]
 8008666:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 800866a:	9a01      	ldr	r2, [sp, #4]
 800866c:	0092      	lsls	r2, r2, #2
 800866e:	9209      	str	r2, [sp, #36]	; 0x24
 8008670:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8008674:	9206      	str	r2, [sp, #24]
 8008676:	9a03      	ldr	r2, [sp, #12]
 8008678:	ed4a 6a09 	vstr	s13, [sl, #-36]	; 0xffffffdc
 800867c:	0092      	lsls	r2, r2, #2
 800867e:	9207      	str	r2, [sp, #28]
 8008680:	9a08      	ldr	r2, [sp, #32]
 8008682:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 8008686:	ed12 6a09 	vldr	s12, [r2, #-36]	; 0xffffffdc
 800868a:	ed56 7a09 	vldr	s15, [r6, #-36]	; 0xffffffdc
 800868e:	eee6 7a47 	vfms.f32	s15, s12, s14
 8008692:	ed46 7a09 	vstr	s15, [r6, #-36]	; 0xffffffdc
 8008696:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 800869a:	ed58 7a09 	vldr	s15, [r8, #-36]	; 0xffffffdc
 800869e:	eee6 7ac7 	vfms.f32	s15, s13, s14
 80086a2:	ed48 7a09 	vstr	s15, [r8, #-36]	; 0xffffffdc
 80086a6:	ed5c 5a09 	vldr	s11, [ip, #-36]	; 0xffffffdc
 80086aa:	ed1e 7a09 	vldr	s14, [lr, #-36]	; 0xffffffdc
 80086ae:	eea6 7a65 	vfms.f32	s14, s12, s11
 80086b2:	eef0 7ae7 	vabs.f32	s15, s15
 80086b6:	ed0e 7a09 	vstr	s14, [lr, #-36]	; 0xffffffdc
 80086ba:	ed1c 6a09 	vldr	s12, [ip, #-36]	; 0xffffffdc
 80086be:	ed17 7a09 	vldr	s14, [r7, #-36]	; 0xffffffdc
 80086c2:	eea6 7ac6 	vfms.f32	s14, s13, s12
 80086c6:	ed07 7a09 	vstr	s14, [r7, #-36]	; 0xffffffdc
 80086ca:	ed16 7a09 	vldr	s14, [r6, #-36]	; 0xffffffdc
 80086ce:	eeb0 7ac7 	vabs.f32	s14, s14
 80086d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80086d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086da:	dd0e      	ble.n	80086fa <m_mldivide+0x1b2>
 80086dc:	9a03      	ldr	r2, [sp, #12]
 80086de:	9106      	str	r1, [sp, #24]
 80086e0:	4618      	mov	r0, r3
 80086e2:	9b02      	ldr	r3, [sp, #8]
 80086e4:	9904      	ldr	r1, [sp, #16]
 80086e6:	9107      	str	r1, [sp, #28]
 80086e8:	0092      	lsls	r2, r2, #2
 80086ea:	9204      	str	r2, [sp, #16]
 80086ec:	009a      	lsls	r2, r3, #2
 80086ee:	9002      	str	r0, [sp, #8]
 80086f0:	ea4f 0189 	mov.w	r1, r9, lsl #2
 80086f4:	ea4f 0b80 	mov.w	fp, r0, lsl #2
 80086f8:	9205      	str	r2, [sp, #20]
 80086fa:	460a      	mov	r2, r1
 80086fc:	a916      	add	r1, sp, #88	; 0x58
 80086fe:	440a      	add	r2, r1
 8008700:	4616      	mov	r6, r2
 8008702:	9a06      	ldr	r2, [sp, #24]
 8008704:	ed16 7a09 	vldr	s14, [r6, #-36]	; 0xffffffdc
 8008708:	440a      	add	r2, r1
 800870a:	ed52 7a09 	vldr	s15, [r2, #-36]	; 0xffffffdc
 800870e:	eec7 2a27 	vdiv.f32	s5, s14, s15
 8008712:	4694      	mov	ip, r2
 8008714:	9a07      	ldr	r2, [sp, #28]
 8008716:	440a      	add	r2, r1
 8008718:	4617      	mov	r7, r2
 800871a:	9a04      	ldr	r2, [sp, #16]
 800871c:	440a      	add	r2, r1
 800871e:	4610      	mov	r0, r2
 8008720:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008722:	a916      	add	r1, sp, #88	; 0x58
 8008724:	eb05 0a02 	add.w	sl, r5, r2
 8008728:	eb01 0e02 	add.w	lr, r1, r2
 800872c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800872e:	ed46 2a09 	vstr	s5, [r6, #-36]	; 0xffffffdc
 8008732:	ed17 7a09 	vldr	s14, [r7, #-36]	; 0xffffffdc
 8008736:	ed50 7a09 	vldr	s15, [r0, #-36]	; 0xffffffdc
 800873a:	edda 6a00 	vldr	s13, [sl]
 800873e:	440a      	add	r2, r1
 8008740:	4691      	mov	r9, r2
 8008742:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008744:	edc4 6a00 	vstr	s13, [r4]
 8008748:	eee2 7ac7 	vfms.f32	s15, s5, s14
 800874c:	440a      	add	r2, r1
 800874e:	4690      	mov	r8, r2
 8008750:	9a05      	ldr	r2, [sp, #20]
 8008752:	ed40 7a09 	vstr	s15, [r0, #-36]	; 0xffffffdc
 8008756:	188e      	adds	r6, r1, r2
 8008758:	eb05 0a02 	add.w	sl, r5, r2
 800875c:	ed9a 6a00 	vldr	s12, [sl]
 8008760:	ed16 1a09 	vldr	s2, [r6, #-36]	; 0xffffffdc
 8008764:	ed1c 5a09 	vldr	s10, [ip, #-36]	; 0xffffffdc
 8008768:	ed5e 5a09 	vldr	s11, [lr, #-36]	; 0xffffffdc
 800876c:	ed17 3a09 	vldr	s6, [r7, #-36]	; 0xffffffdc
 8008770:	ed59 3a09 	vldr	s7, [r9, #-36]	; 0xffffffdc
 8008774:	ed58 4a09 	vldr	s9, [r8, #-36]	; 0xffffffdc
 8008778:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800877c:	ee87 2a27 	vdiv.f32	s4, s14, s15
 8008780:	eb05 0c0b 	add.w	ip, r5, fp
 8008784:	448b      	add	fp, r1
 8008786:	9901      	ldr	r1, [sp, #4]
 8008788:	eb05 0781 	add.w	r7, r5, r1, lsl #2
 800878c:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 8008790:	9902      	ldr	r1, [sp, #8]
 8008792:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 8008796:	eea1 6a66 	vfms.f32	s12, s2, s13
 800879a:	ed5b 1a09 	vldr	s3, [fp, #-36]	; 0xffffffdc
 800879e:	ed84 6a01 	vstr	s12, [r4, #4]
 80087a2:	eddc 7a00 	vldr	s15, [ip]
 80087a6:	ee87 4a05 	vdiv.f32	s8, s14, s10
 80087aa:	eee1 7ae6 	vfms.f32	s15, s3, s13
 80087ae:	ee87 5a25 	vdiv.f32	s10, s14, s11
 80087b2:	eee2 7ac6 	vfms.f32	s15, s5, s12
 80087b6:	ee62 7a27 	vmul.f32	s15, s4, s15
 80087ba:	eea3 6a67 	vfms.f32	s12, s6, s15
 80087be:	eee3 6ae7 	vfms.f32	s13, s7, s15
 80087c2:	ee24 6a06 	vmul.f32	s12, s8, s12
 80087c6:	edc4 7a02 	vstr	s15, [r4, #8]
 80087ca:	eee4 6ac6 	vfms.f32	s13, s9, s12
 80087ce:	ed84 6a01 	vstr	s12, [r4, #4]
 80087d2:	ee65 6a26 	vmul.f32	s13, s10, s13
 80087d6:	edc4 6a00 	vstr	s13, [r4]
 80087da:	edd7 6a03 	vldr	s13, [r7, #12]
 80087de:	edc4 6a03 	vstr	s13, [r4, #12]
 80087e2:	ed96 6a03 	vldr	s12, [r6, #12]
 80087e6:	eea1 6a66 	vfms.f32	s12, s2, s13
 80087ea:	ed84 6a04 	vstr	s12, [r4, #16]
 80087ee:	edd0 5a03 	vldr	s11, [r0, #12]
 80087f2:	eee1 5ae6 	vfms.f32	s11, s3, s13
 80087f6:	eee2 5ac6 	vfms.f32	s11, s5, s12
 80087fa:	ee62 5a25 	vmul.f32	s11, s4, s11
 80087fe:	eea3 6a65 	vfms.f32	s12, s6, s11
 8008802:	eee3 6ae5 	vfms.f32	s13, s7, s11
 8008806:	ee24 6a06 	vmul.f32	s12, s8, s12
 800880a:	edc4 5a05 	vstr	s11, [r4, #20]
 800880e:	eee4 6ac6 	vfms.f32	s13, s9, s12
 8008812:	ed84 6a04 	vstr	s12, [r4, #16]
 8008816:	ee65 6a26 	vmul.f32	s13, s10, s13
 800881a:	edc4 6a03 	vstr	s13, [r4, #12]
 800881e:	edd7 7a06 	vldr	s15, [r7, #24]
 8008822:	edc4 7a06 	vstr	s15, [r4, #24]
 8008826:	ed96 7a06 	vldr	s14, [r6, #24]
 800882a:	eea7 7ac1 	vfms.f32	s14, s15, s2
 800882e:	ed84 7a07 	vstr	s14, [r4, #28]
 8008832:	edd0 6a06 	vldr	s13, [r0, #24]
 8008836:	eee7 6ae1 	vfms.f32	s13, s15, s3
 800883a:	eee2 6ac7 	vfms.f32	s13, s5, s14
 800883e:	ee66 6a82 	vmul.f32	s13, s13, s4
 8008842:	eea6 7ac3 	vfms.f32	s14, s13, s6
 8008846:	eee6 7ae3 	vfms.f32	s15, s13, s7
 800884a:	ee27 7a04 	vmul.f32	s14, s14, s8
 800884e:	edc4 6a08 	vstr	s13, [r4, #32]
 8008852:	eee7 7a64 	vfms.f32	s15, s14, s9
 8008856:	ed84 7a07 	vstr	s14, [r4, #28]
 800885a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800885e:	edc4 7a06 	vstr	s15, [r4, #24]
 8008862:	b017      	add	sp, #92	; 0x5c
 8008864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008868:	2202      	movs	r2, #2
 800886a:	f04f 0b08 	mov.w	fp, #8
 800886e:	f04f 0c05 	mov.w	ip, #5
 8008872:	9202      	str	r2, [sp, #8]
 8008874:	e6bb      	b.n	80085ee <m_mldivide+0xa6>
 8008876:	2300      	movs	r3, #0
 8008878:	f04f 0904 	mov.w	r9, #4
 800887c:	9301      	str	r3, [sp, #4]
 800887e:	461e      	mov	r6, r3
 8008880:	2307      	movs	r3, #7
 8008882:	9303      	str	r3, [sp, #12]
 8008884:	4648      	mov	r0, r9
 8008886:	f04f 0e06 	mov.w	lr, #6
 800888a:	f04f 0803 	mov.w	r8, #3
 800888e:	2301      	movs	r3, #1
 8008890:	e690      	b.n	80085b4 <m_mldivide+0x6c>
 8008892:	bf00      	nop

08008894 <m_qmult_eml>:
 8008894:	ed90 2a01 	vldr	s4, [r0, #4]
 8008898:	edd1 4a02 	vldr	s9, [r1, #8]
 800889c:	edd1 5a03 	vldr	s11, [r1, #12]
 80088a0:	edd0 2a02 	vldr	s5, [r0, #8]
 80088a4:	edd1 3a00 	vldr	s7, [r1]
 80088a8:	ed90 3a00 	vldr	s6, [r0]
 80088ac:	ed91 4a01 	vldr	s8, [r1, #4]
 80088b0:	ed90 5a03 	vldr	s10, [r0, #12]
 80088b4:	ee22 6a24 	vmul.f32	s12, s4, s9
 80088b8:	ee62 6aa3 	vmul.f32	s13, s5, s7
 80088bc:	ee22 7aa5 	vmul.f32	s14, s5, s11
 80088c0:	ee64 7ae2 	vnmul.f32	s15, s9, s5
 80088c4:	eea3 6a25 	vfma.f32	s12, s6, s11
 80088c8:	eee2 6a25 	vfma.f32	s13, s4, s11
 80088cc:	eea3 7ac2 	vfms.f32	s14, s7, s4
 80088d0:	eee4 7a42 	vfms.f32	s15, s8, s4
 80088d4:	eea4 6a62 	vfms.f32	s12, s8, s5
 80088d8:	eee4 6ac3 	vfms.f32	s13, s9, s6
 80088dc:	eea3 7a04 	vfma.f32	s14, s6, s8
 80088e0:	eee3 7ac3 	vfms.f32	s15, s7, s6
 80088e4:	eea5 6a23 	vfma.f32	s12, s10, s7
 80088e8:	eee5 6a04 	vfma.f32	s13, s10, s8
 80088ec:	eea5 7a24 	vfma.f32	s14, s10, s9
 80088f0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80088f4:	ed82 6a00 	vstr	s12, [r2]
 80088f8:	edc2 6a01 	vstr	s13, [r2, #4]
 80088fc:	ed82 7a02 	vstr	s14, [r2, #8]
 8008900:	edc2 7a03 	vstr	s15, [r2, #12]
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop

08008908 <m_q2dcm_eml>:
 8008908:	b510      	push	{r4, lr}
 800890a:	ed2d 8b06 	vpush	{d8-d10}
 800890e:	ed90 aa03 	vldr	s20, [r0, #12]
 8008912:	ed90 9a02 	vldr	s18, [r0, #8]
 8008916:	ed90 8a00 	vldr	s16, [r0]
 800891a:	edd0 8a01 	vldr	s17, [r0, #4]
 800891e:	ee6a 9a0a 	vmul.f32	s19, s20, s20
 8008922:	460c      	mov	r4, r1
 8008924:	1d08      	adds	r0, r1, #4
 8008926:	2220      	movs	r2, #32
 8008928:	2100      	movs	r1, #0
 800892a:	f00a fac7 	bl	8012ebc <memset>
 800892e:	eef0 5a69 	vmov.f32	s11, s19
 8008932:	eeb0 6a69 	vmov.f32	s12, s19
 8008936:	eee9 9a09 	vfma.f32	s19, s18, s18
 800893a:	eee8 5a08 	vfma.f32	s11, s16, s16
 800893e:	eea8 6aa8 	vfma.f32	s12, s17, s17
 8008942:	eee8 9a48 	vfms.f32	s19, s16, s16
 8008946:	ee69 6a0a 	vmul.f32	s13, s18, s20
 800894a:	ee28 7a8a 	vmul.f32	s14, s17, s20
 800894e:	ee68 7a89 	vmul.f32	s15, s17, s18
 8008952:	eee8 5ae8 	vfms.f32	s11, s17, s17
 8008956:	eea8 6a48 	vfms.f32	s12, s16, s16
 800895a:	eee8 9ae8 	vfms.f32	s19, s17, s17
 800895e:	eeb0 4a66 	vmov.f32	s8, s13
 8008962:	eef0 4a47 	vmov.f32	s9, s14
 8008966:	eeb0 5a67 	vmov.f32	s10, s15
 800896a:	eea8 4a28 	vfma.f32	s8, s16, s17
 800896e:	eed8 6a28 	vfnms.f32	s13, s16, s17
 8008972:	eed8 4a09 	vfnms.f32	s9, s16, s18
 8008976:	eea8 7a09 	vfma.f32	s14, s16, s18
 800897a:	eea8 5a0a 	vfma.f32	s10, s16, s20
 800897e:	eee8 7a4a 	vfms.f32	s15, s16, s20
 8008982:	eee9 5a49 	vfms.f32	s11, s18, s18
 8008986:	eea9 6a49 	vfms.f32	s12, s18, s18
 800898a:	edc4 9a08 	vstr	s19, [r4, #32]
 800898e:	ecbd 8b06 	vpop	{d8-d10}
 8008992:	ee34 4a04 	vadd.f32	s8, s8, s8
 8008996:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800899a:	ee74 4aa4 	vadd.f32	s9, s9, s9
 800899e:	ee37 7a07 	vadd.f32	s14, s14, s14
 80089a2:	ee35 5a05 	vadd.f32	s10, s10, s10
 80089a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80089aa:	edc4 5a00 	vstr	s11, [r4]
 80089ae:	ed84 4a03 	vstr	s8, [r4, #12]
 80089b2:	edc4 6a01 	vstr	s13, [r4, #4]
 80089b6:	edc4 4a06 	vstr	s9, [r4, #24]
 80089ba:	ed84 7a02 	vstr	s14, [r4, #8]
 80089be:	ed84 6a04 	vstr	s12, [r4, #16]
 80089c2:	ed84 5a07 	vstr	s10, [r4, #28]
 80089c6:	edc4 7a05 	vstr	s15, [r4, #20]
 80089ca:	bd10      	pop	{r4, pc}

080089cc <st_accCal_MEMS_EIG3>:
 80089cc:	ed90 5a02 	vldr	s10, [r0, #8]
 80089d0:	edd0 4a01 	vldr	s9, [r0, #4]
 80089d4:	ed90 7a05 	vldr	s14, [r0, #20]
 80089d8:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008b98 <st_accCal_MEMS_EIG3+0x1cc>
 80089dc:	ee65 7a05 	vmul.f32	s15, s10, s10
 80089e0:	b510      	push	{r4, lr}
 80089e2:	eee4 7aa4 	vfma.f32	s15, s9, s9
 80089e6:	460c      	mov	r4, r1
 80089e8:	ed2d 8b04 	vpush	{d8-d9}
 80089ec:	eee7 7a07 	vfma.f32	s15, s14, s14
 80089f0:	b08a      	sub	sp, #40	; 0x28
 80089f2:	eef4 7ae6 	vcmpe.f32	s15, s13
 80089f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089fa:	d509      	bpl.n	8008a10 <st_accCal_MEMS_EIG3+0x44>
 80089fc:	6803      	ldr	r3, [r0, #0]
 80089fe:	600b      	str	r3, [r1, #0]
 8008a00:	6903      	ldr	r3, [r0, #16]
 8008a02:	604b      	str	r3, [r1, #4]
 8008a04:	6a03      	ldr	r3, [r0, #32]
 8008a06:	608b      	str	r3, [r1, #8]
 8008a08:	b00a      	add	sp, #40	; 0x28
 8008a0a:	ecbd 8b04 	vpop	{d8-d9}
 8008a0e:	bd10      	pop	{r4, pc}
 8008a10:	edd0 3a00 	vldr	s7, [r0]
 8008a14:	edd0 5a04 	vldr	s11, [r0, #16]
 8008a18:	ed90 3a08 	vldr	s6, [r0, #32]
 8008a1c:	edd0 1a06 	vldr	s3, [r0, #24]
 8008a20:	eddf 9a5e 	vldr	s19, [pc, #376]	; 8008b9c <st_accCal_MEMS_EIG3+0x1d0>
 8008a24:	ed90 1a03 	vldr	s2, [r0, #12]
 8008a28:	ed90 6a07 	vldr	s12, [r0, #28]
 8008a2c:	ed9f 4a5c 	vldr	s8, [pc, #368]	; 8008ba0 <st_accCal_MEMS_EIG3+0x1d4>
 8008a30:	ee33 8aa5 	vadd.f32	s16, s7, s11
 8008a34:	ee65 6a21 	vmul.f32	s13, s10, s3
 8008a38:	ee38 8a03 	vadd.f32	s16, s16, s6
 8008a3c:	eee4 6a81 	vfma.f32	s13, s9, s2
 8008a40:	ee28 8a29 	vmul.f32	s16, s16, s19
 8008a44:	eee7 6a06 	vfma.f32	s13, s14, s12
 8008a48:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8008a4c:	ee73 3ac8 	vsub.f32	s7, s7, s16
 8008a50:	ee65 7aa5 	vmul.f32	s15, s11, s11
 8008a54:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
 8008a58:	eee3 7aa3 	vfma.f32	s15, s7, s7
 8008a5c:	ee33 3a48 	vsub.f32	s6, s6, s16
 8008a60:	eee6 7aa2 	vfma.f32	s15, s13, s5
 8008a64:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008a68:	eee3 7a03 	vfma.f32	s15, s6, s6
 8008a6c:	eeb8 2a00 	vmov.f32	s4, #128	; 0xc0000000 -2.0
 8008a70:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008a74:	eef1 8ae7 	vsqrt.f32	s17, s15
 8008a78:	eec0 6a28 	vdiv.f32	s13, s0, s17
 8008a7c:	ee83 4a28 	vdiv.f32	s8, s6, s17
 8008a80:	eec3 0aa8 	vdiv.f32	s1, s7, s17
 8008a84:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8008a88:	ee61 3aa6 	vmul.f32	s7, s3, s13
 8008a8c:	ee21 3a26 	vmul.f32	s6, s2, s13
 8008a90:	ee26 6a26 	vmul.f32	s12, s12, s13
 8008a94:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008a98:	ee63 7ae5 	vnmul.f32	s15, s7, s11
 8008a9c:	ee26 5a85 	vmul.f32	s10, s13, s10
 8008aa0:	eee6 7a03 	vfma.f32	s15, s12, s6
 8008aa4:	ee26 6a47 	vnmul.f32	s12, s12, s14
 8008aa8:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008aac:	eea5 6a84 	vfma.f32	s12, s11, s8
 8008ab0:	ee24 4a43 	vnmul.f32	s8, s8, s6
 8008ab4:	eee6 7a20 	vfma.f32	s15, s12, s1
 8008ab8:	eea7 4a23 	vfma.f32	s8, s14, s7
 8008abc:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8008ac0:	eee4 7a26 	vfma.f32	s15, s8, s13
 8008ac4:	eef4 7ac2 	vcmpe.f32	s15, s4
 8008ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008acc:	d909      	bls.n	8008ae2 <st_accCal_MEMS_EIG3+0x116>
 8008ace:	eef4 7ae2 	vcmpe.f32	s15, s5
 8008ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ad6:	db49      	blt.n	8008b6c <st_accCal_MEMS_EIG3+0x1a0>
 8008ad8:	eeb0 9a40 	vmov.f32	s18, s0
 8008adc:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8008ba4 <st_accCal_MEMS_EIG3+0x1d8>
 8008ae0:	e003      	b.n	8008aea <st_accCal_MEMS_EIG3+0x11e>
 8008ae2:	ed9f 9a31 	vldr	s18, [pc, #196]	; 8008ba8 <st_accCal_MEMS_EIG3+0x1dc>
 8008ae6:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8008aea:	ee78 8aa8 	vadd.f32	s17, s17, s17
 8008aee:	eeb0 7a48 	vmov.f32	s14, s16
 8008af2:	eef0 6a48 	vmov.f32	s13, s16
 8008af6:	eea8 7a89 	vfma.f32	s14, s17, s18
 8008afa:	eee8 6a80 	vfma.f32	s13, s17, s0
 8008afe:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 8008b02:	ee77 7a26 	vadd.f32	s15, s14, s13
 8008b06:	ed84 7a00 	vstr	s14, [r4]
 8008b0a:	eed8 7a06 	vfnms.f32	s15, s16, s12
 8008b0e:	edc4 6a02 	vstr	s13, [r4, #8]
 8008b12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b1a:	edc4 7a01 	vstr	s15, [r4, #4]
 8008b1e:	dd09      	ble.n	8008b34 <st_accCal_MEMS_EIG3+0x168>
 8008b20:	eeb0 6a47 	vmov.f32	s12, s14
 8008b24:	ed84 7a01 	vstr	s14, [r4, #4]
 8008b28:	edc4 7a00 	vstr	s15, [r4]
 8008b2c:	eeb0 7a67 	vmov.f32	s14, s15
 8008b30:	eef0 7a46 	vmov.f32	s15, s12
 8008b34:	eef4 6ac7 	vcmpe.f32	s13, s14
 8008b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b3c:	d509      	bpl.n	8008b52 <st_accCal_MEMS_EIG3+0x186>
 8008b3e:	edc4 7a02 	vstr	s15, [r4, #8]
 8008b42:	ed84 7a01 	vstr	s14, [r4, #4]
 8008b46:	edc4 6a00 	vstr	s13, [r4]
 8008b4a:	b00a      	add	sp, #40	; 0x28
 8008b4c:	ecbd 8b04 	vpop	{d8-d9}
 8008b50:	bd10      	pop	{r4, pc}
 8008b52:	eef4 6ae7 	vcmpe.f32	s13, s15
 8008b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b5a:	bf44      	itt	mi
 8008b5c:	edc4 7a02 	vstrmi	s15, [r4, #8]
 8008b60:	edc4 6a01 	vstrmi	s13, [r4, #4]
 8008b64:	b00a      	add	sp, #40	; 0x28
 8008b66:	ecbd 8b04 	vpop	{d8-d9}
 8008b6a:	bd10      	pop	{r4, pc}
 8008b6c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8008b70:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008b74:	f00a fbb0 	bl	80132d8 <acosf>
 8008b78:	ee60 9a29 	vmul.f32	s19, s0, s19
 8008b7c:	eeb0 0a69 	vmov.f32	s0, s19
 8008b80:	f00a fa26 	bl	8012fd0 <cosf>
 8008b84:	eeb0 9a40 	vmov.f32	s18, s0
 8008b88:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8008bac <st_accCal_MEMS_EIG3+0x1e0>
 8008b8c:	ee39 0a80 	vadd.f32	s0, s19, s0
 8008b90:	f00a fa1e 	bl	8012fd0 <cosf>
 8008b94:	e7a9      	b.n	8008aea <st_accCal_MEMS_EIG3+0x11e>
 8008b96:	bf00      	nop
 8008b98:	358637bd 	.word	0x358637bd
 8008b9c:	3eaaaaab 	.word	0x3eaaaaab
 8008ba0:	3e2aaaab 	.word	0x3e2aaaab
 8008ba4:	bf000001 	.word	0xbf000001
 8008ba8:	3effffff 	.word	0x3effffff
 8008bac:	40060a92 	.word	0x40060a92

08008bb0 <st_accCal_MEMS_ellipsoidFit7>:
 8008bb0:	b570      	push	{r4, r5, r6, lr}
 8008bb2:	ed2d 8b10 	vpush	{d8-d15}
 8008bb6:	4604      	mov	r4, r0
 8008bb8:	b0c6      	sub	sp, #280	; 0x118
 8008bba:	edd0 7a13 	vldr	s15, [r0, #76]	; 0x4c
 8008bbe:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8008bc0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8008bc2:	9011      	str	r0, [sp, #68]	; 0x44
 8008bc4:	2600      	movs	r6, #0
 8008bc6:	eeb0 8a67 	vmov.f32	s16, s15
 8008bca:	223c      	movs	r2, #60	; 0x3c
 8008bcc:	9015      	str	r0, [sp, #84]	; 0x54
 8008bce:	460d      	mov	r5, r1
 8008bd0:	a837      	add	r0, sp, #220	; 0xdc
 8008bd2:	4631      	mov	r1, r6
 8008bd4:	9314      	str	r3, [sp, #80]	; 0x50
 8008bd6:	9316      	str	r3, [sp, #88]	; 0x58
 8008bd8:	edd4 9a12 	vldr	s19, [r4, #72]	; 0x48
 8008bdc:	edd4 8a16 	vldr	s17, [r4, #88]	; 0x58
 8008be0:	ed94 9a19 	vldr	s18, [r4, #100]	; 0x64
 8008be4:	960c      	str	r6, [sp, #48]	; 0x30
 8008be6:	960e      	str	r6, [sp, #56]	; 0x38
 8008be8:	f00a f968 	bl	8012ebc <memset>
 8008bec:	ee38 7a48 	vsub.f32	s14, s16, s16
 8008bf0:	eddf 6a41 	vldr	s13, [pc, #260]	; 8008cf8 <st_accCal_MEMS_ellipsoidFit7+0x148>
 8008bf4:	eddd 1a11 	vldr	s3, [sp, #68]	; 0x44
 8008bf8:	ed9d 4a15 	vldr	s8, [sp, #84]	; 0x54
 8008bfc:	eeb0 7ac7 	vabs.f32	s14, s14
 8008c00:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8008c04:	a936      	add	r1, sp, #216	; 0xd8
 8008c06:	aa3a      	add	r2, sp, #232	; 0xe8
 8008c08:	ab3e      	add	r3, sp, #248	; 0xf8
 8008c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c0e:	e9cd 1203 	strd	r1, r2, [sp, #12]
 8008c12:	eef0 7a48 	vmov.f32	s15, s16
 8008c16:	eef0 5a48 	vmov.f32	s11, s16
 8008c1a:	9305      	str	r3, [sp, #20]
 8008c1c:	f100 825b 	bmi.w	80090d6 <st_accCal_MEMS_ellipsoidFit7+0x526>
 8008c20:	ed9d 2a14 	vldr	s4, [sp, #80]	; 0x50
 8008c24:	eddd 2a16 	vldr	s5, [sp, #88]	; 0x58
 8008c28:	ee29 5a65 	vnmul.f32	s10, s18, s11
 8008c2c:	ee62 6ac2 	vnmul.f32	s13, s5, s4
 8008c30:	eea4 5a02 	vfma.f32	s10, s8, s4
 8008c34:	eee9 6a28 	vfma.f32	s13, s18, s17
 8008c38:	ee27 6a85 	vmul.f32	s12, s15, s10
 8008c3c:	ee28 7ac4 	vnmul.f32	s14, s17, s8
 8008c40:	eea6 6aa9 	vfma.f32	s12, s13, s19
 8008c44:	eea5 7aa2 	vfma.f32	s14, s11, s5
 8008c48:	eeb0 3a45 	vmov.f32	s6, s10
 8008c4c:	eea7 6a21 	vfma.f32	s12, s14, s3
 8008c50:	ed8d 5a3a 	vstr	s10, [sp, #232]	; 0xe8
 8008c54:	ed9f 5a28 	vldr	s10, [pc, #160]	; 8008cf8 <st_accCal_MEMS_ellipsoidFit7+0x148>
 8008c58:	edcd 6a36 	vstr	s13, [sp, #216]	; 0xd8
 8008c5c:	eef0 4ac6 	vabs.f32	s9, s12
 8008c60:	eef4 4ac5 	vcmpe.f32	s9, s10
 8008c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c68:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 8008c6c:	dd46      	ble.n	8008cfc <st_accCal_MEMS_ellipsoidFit7+0x14c>
 8008c6e:	ee69 3ae2 	vnmul.f32	s7, s19, s5
 8008c72:	ee65 4ae7 	vnmul.f32	s9, s11, s15
 8008c76:	eee7 3a84 	vfma.f32	s7, s15, s8
 8008c7a:	eee9 4aa8 	vfma.f32	s9, s19, s17
 8008c7e:	ee24 1a61 	vnmul.f32	s2, s8, s3
 8008c82:	eeb0 4a63 	vmov.f32	s8, s7
 8008c86:	eea9 1a29 	vfma.f32	s2, s18, s19
 8008c8a:	eef0 3a64 	vmov.f32	s7, s9
 8008c8e:	2e00      	cmp	r6, #0
 8008c90:	f000 823b 	beq.w	800910a <st_accCal_MEMS_ellipsoidFit7+0x55a>
 8008c94:	eef0 7a47 	vmov.f32	s15, s14
 8008c98:	eeb0 5a43 	vmov.f32	s10, s6
 8008c9c:	ed8d 4a3c 	vstr	s8, [sp, #240]	; 0xf0
 8008ca0:	eef0 2a44 	vmov.f32	s5, s8
 8008ca4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8008ca8:	eec4 5a86 	vdiv.f32	s11, s9, s12
 8008cac:	ee25 6a85 	vmul.f32	s12, s11, s10
 8008cb0:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8008cb4:	ee25 5a83 	vmul.f32	s10, s11, s6
 8008cb8:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8008cbc:	ee25 3a81 	vmul.f32	s6, s11, s2
 8008cc0:	ee25 7a87 	vmul.f32	s14, s11, s14
 8008cc4:	ee25 4a84 	vmul.f32	s8, s11, s8
 8008cc8:	ee65 4aa3 	vmul.f32	s9, s11, s7
 8008ccc:	ee65 5aa2 	vmul.f32	s11, s11, s5
 8008cd0:	edcd 6a36 	vstr	s13, [sp, #216]	; 0xd8
 8008cd4:	ed8d 6a37 	vstr	s12, [sp, #220]	; 0xdc
 8008cd8:	edcd 7a38 	vstr	s15, [sp, #224]	; 0xe0
 8008cdc:	ed8d 5a3a 	vstr	s10, [sp, #232]	; 0xe8
 8008ce0:	ed8d 3a3b 	vstr	s6, [sp, #236]	; 0xec
 8008ce4:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 8008ce8:	ed8d 4a3f 	vstr	s8, [sp, #252]	; 0xfc
 8008cec:	edcd 4a40 	vstr	s9, [sp, #256]	; 0x100
 8008cf0:	edcd 5a3c 	vstr	s11, [sp, #240]	; 0xf0
 8008cf4:	e002      	b.n	8008cfc <st_accCal_MEMS_ellipsoidFit7+0x14c>
 8008cf6:	bf00      	nop
 8008cf8:	3a83126f 	.word	0x3a83126f
 8008cfc:	ed94 4a04 	vldr	s8, [r4, #16]
 8008d00:	ed94 3a0a 	vldr	s6, [r4, #40]	; 0x28
 8008d04:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 8008d08:	ed9d 8a3b 	vldr	s16, [sp, #236]	; 0xec
 8008d0c:	ed94 1a03 	vldr	s2, [r4, #12]
 8008d10:	edd4 ba09 	vldr	s23, [r4, #36]	; 0x24
 8008d14:	ed94 da0e 	vldr	s26, [r4, #56]	; 0x38
 8008d18:	eddd 3a3a 	vldr	s7, [sp, #232]	; 0xe8
 8008d1c:	edd4 8a1b 	vldr	s17, [r4, #108]	; 0x6c
 8008d20:	ed9d 9a37 	vldr	s18, [sp, #220]	; 0xdc
 8008d24:	eddd 5a3f 	vldr	s11, [sp, #252]	; 0xfc
 8008d28:	edd4 1a05 	vldr	s3, [r4, #20]
 8008d2c:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8008d30:	edd4 ca10 	vldr	s25, [r4, #64]	; 0x40
 8008d34:	ed9d 5a3c 	vldr	s10, [sp, #240]	; 0xf0
 8008d38:	eddd 2a36 	vldr	s5, [sp, #216]	; 0xd8
 8008d3c:	ed9d 7a3e 	vldr	s14, [sp, #248]	; 0xf8
 8008d40:	edd4 0a0c 	vldr	s1, [r4, #48]	; 0x30
 8008d44:	ed94 2a06 	vldr	s4, [r4, #24]
 8008d48:	ed94 ca11 	vldr	s24, [r4, #68]	; 0x44
 8008d4c:	eddd 6a3d 	vldr	s13, [sp, #244]	; 0xf4
 8008d50:	eddd 4a38 	vldr	s9, [sp, #224]	; 0xe0
 8008d54:	eddd fa40 	vldr	s31, [sp, #256]	; 0x100
 8008d58:	ed9d 6a39 	vldr	s12, [sp, #228]	; 0xe4
 8008d5c:	eddd ea41 	vldr	s29, [sp, #260]	; 0x104
 8008d60:	ee68 aa04 	vmul.f32	s21, s16, s8
 8008d64:	ee68 9a03 	vmul.f32	s19, s16, s6
 8008d68:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008d6c:	eee3 aa81 	vfma.f32	s21, s7, s2
 8008d70:	a906      	add	r1, sp, #24
 8008d72:	a821      	add	r0, sp, #132	; 0x84
 8008d74:	eee3 9aab 	vfma.f32	s19, s7, s23
 8008d78:	eea3 8a8d 	vfma.f32	s16, s7, s26
 8008d7c:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
 8008d80:	eece da28 	vdiv.f32	s27, s28, s17
 8008d84:	ee29 ba04 	vmul.f32	s22, s18, s8
 8008d88:	ee69 8a03 	vmul.f32	s17, s18, s6
 8008d8c:	ee25 aa84 	vmul.f32	s20, s11, s8
 8008d90:	ee29 9a27 	vmul.f32	s18, s18, s15
 8008d94:	eee5 aa21 	vfma.f32	s21, s10, s3
 8008d98:	eee5 9a00 	vfma.f32	s19, s10, s0
 8008d9c:	eea5 8a2c 	vfma.f32	s16, s10, s25
 8008da0:	eea2 ba81 	vfma.f32	s22, s5, s2
 8008da4:	eee2 8aab 	vfma.f32	s17, s5, s23
 8008da8:	eea2 9a8d 	vfma.f32	s18, s5, s26
 8008dac:	eea7 aa01 	vfma.f32	s20, s14, s2
 8008db0:	eee6 9aa0 	vfma.f32	s19, s13, s1
 8008db4:	eea6 8a8c 	vfma.f32	s16, s13, s24
 8008db8:	eee6 aa82 	vfma.f32	s21, s13, s4
 8008dbc:	ee65 6aa7 	vmul.f32	s13, s11, s15
 8008dc0:	eea4 baa1 	vfma.f32	s22, s9, s3
 8008dc4:	eee4 8a80 	vfma.f32	s17, s9, s0
 8008dc8:	eea4 9aac 	vfma.f32	s18, s9, s25
 8008dcc:	eeaf aaa1 	vfma.f32	s20, s31, s3
 8008dd0:	eee7 6a0d 	vfma.f32	s13, s14, s26
 8008dd4:	eee6 8a20 	vfma.f32	s17, s12, s1
 8008dd8:	eea6 9a0c 	vfma.f32	s18, s12, s24
 8008ddc:	eea6 ba02 	vfma.f32	s22, s12, s4
 8008de0:	eeae aa82 	vfma.f32	s20, s29, s4
 8008de4:	eeef 6aac 	vfma.f32	s13, s31, s25
 8008de8:	ee65 5a83 	vmul.f32	s11, s11, s6
 8008dec:	edcd 8a2b 	vstr	s17, [sp, #172]	; 0xac
 8008df0:	edcd da45 	vstr	s27, [sp, #276]	; 0x114
 8008df4:	ed8d ba2a 	vstr	s22, [sp, #168]	; 0xa8
 8008df8:	ed8d 9a2c 	vstr	s18, [sp, #176]	; 0xb0
 8008dfc:	edcd aa2d 	vstr	s21, [sp, #180]	; 0xb4
 8008e00:	edcd 9a2e 	vstr	s19, [sp, #184]	; 0xb8
 8008e04:	ed8d 8a2f 	vstr	s16, [sp, #188]	; 0xbc
 8008e08:	ed8d aa30 	vstr	s20, [sp, #192]	; 0xc0
 8008e0c:	ed9d 6a43 	vldr	s12, [sp, #268]	; 0x10c
 8008e10:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8008e14:	ed9d fa44 	vldr	s30, [sp, #272]	; 0x110
 8008e18:	eeee 6a8c 	vfma.f32	s13, s29, s24
 8008e1c:	eee7 5a2b 	vfma.f32	s11, s14, s23
 8008e20:	ee26 7a27 	vmul.f32	s14, s12, s15
 8008e24:	ee6a 3a84 	vmul.f32	s7, s21, s8
 8008e28:	eea5 7a0d 	vfma.f32	s14, s10, s26
 8008e2c:	ee66 2a04 	vmul.f32	s5, s12, s8
 8008e30:	ee26 6a03 	vmul.f32	s12, s12, s6
 8008e34:	eeef 5a80 	vfma.f32	s11, s31, s0
 8008e38:	eee1 3a0b 	vfma.f32	s7, s2, s22
 8008e3c:	eef0 fa66 	vmov.f32	s31, s13
 8008e40:	ee64 4a08 	vmul.f32	s9, s8, s16
 8008e44:	edd4 6a02 	vldr	s13, [r4, #8]
 8008e48:	edcd fa32 	vstr	s31, [sp, #200]	; 0xc8
 8008e4c:	eee5 2a01 	vfma.f32	s5, s10, s2
 8008e50:	eea5 6a2b 	vfma.f32	s12, s10, s23
 8008e54:	ee68 7a27 	vmul.f32	s15, s16, s15
 8008e58:	ee28 5a03 	vmul.f32	s10, s16, s6
 8008e5c:	edcd 6a01 	vstr	s13, [sp, #4]
 8008e60:	eee1 4a09 	vfma.f32	s9, s2, s18
 8008e64:	edd4 6a00 	vldr	s13, [r4]
 8008e68:	eeaf 7a2c 	vfma.f32	s14, s30, s25
 8008e6c:	eee9 7a0d 	vfma.f32	s15, s18, s26
 8008e70:	eea9 5a2b 	vfma.f32	s10, s18, s23
 8008e74:	ee24 4a29 	vmul.f32	s8, s8, s19
 8008e78:	ee76 3ae3 	vsub.f32	s7, s13, s7
 8008e7c:	eddd 6a01 	vldr	s13, [sp, #4]
 8008e80:	ed9d da0c 	vldr	s26, [sp, #48]	; 0x30
 8008e84:	eeef 2a21 	vfma.f32	s5, s30, s3
 8008e88:	eea1 4a28 	vfma.f32	s8, s2, s17
 8008e8c:	eeaf 6a00 	vfma.f32	s12, s30, s0
 8008e90:	ed94 1a0d 	vldr	s2, [r4, #52]	; 0x34
 8008e94:	ed94 fa08 	vldr	s30, [r4, #32]
 8008e98:	ee76 4ae4 	vsub.f32	s9, s13, s9
 8008e9c:	eeee 5aa0 	vfma.f32	s11, s29, s1
 8008ea0:	eead 7a8c 	vfma.f32	s14, s27, s24
 8008ea4:	edd4 6a01 	vldr	s13, [r4, #4]
 8008ea8:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 8008eac:	ee71 7a67 	vsub.f32	s15, s2, s15
 8008eb0:	ee3f 5a45 	vsub.f32	s10, s30, s10
 8008eb4:	ee29 3a83 	vmul.f32	s6, s19, s6
 8008eb8:	eee1 4aef 	vfms.f32	s9, s3, s31
 8008ebc:	eea8 3aab 	vfma.f32	s6, s17, s23
 8008ec0:	eeec 7aef 	vfms.f32	s15, s25, s31
 8008ec4:	eeaf 5ac0 	vfms.f32	s10, s31, s0
 8008ec8:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8008ecc:	eead 6aa0 	vfma.f32	s12, s27, s1
 8008ed0:	eeb0 fa47 	vmov.f32	s30, s14
 8008ed4:	eea1 4ae5 	vfms.f32	s8, s3, s11
 8008ed8:	ed94 7a07 	vldr	s14, [r4, #28]
 8008edc:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 8008ee0:	eee2 4a4f 	vfms.f32	s9, s4, s30
 8008ee4:	eeed 2a82 	vfma.f32	s5, s27, s4
 8008ee8:	eeaf 5a60 	vfms.f32	s10, s30, s1
 8008eec:	eeec 7a4f 	vfms.f32	s15, s24, s30
 8008ef0:	eeea 3a61 	vfms.f32	s7, s20, s3
 8008ef4:	ee37 3a43 	vsub.f32	s6, s14, s6
 8008ef8:	eea2 4a46 	vfms.f32	s8, s4, s12
 8008efc:	eea5 3ac0 	vfms.f32	s6, s11, s0
 8008f00:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
 8008f04:	ed8d 6a34 	vstr	s12, [sp, #208]	; 0xd0
 8008f08:	eef0 ea65 	vmov.f32	s29, s11
 8008f0c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8008f10:	eef0 ba46 	vmov.f32	s23, s12
 8008f14:	ee24 6aa5 	vmul.f32	s12, s9, s11
 8008f18:	eee2 3a62 	vfms.f32	s7, s4, s5
 8008f1c:	ee27 2a27 	vmul.f32	s4, s14, s15
 8008f20:	ee27 7a05 	vmul.f32	s14, s14, s10
 8008f24:	eef0 ca46 	vmov.f32	s25, s12
 8008f28:	eea4 7a25 	vfma.f32	s14, s8, s11
 8008f2c:	eeed ca04 	vfma.f32	s25, s26, s8
 8008f30:	eef0 1a47 	vmov.f32	s3, s14
 8008f34:	eeb0 7a6c 	vmov.f32	s14, s25
 8008f38:	eea3 7aa5 	vfma.f32	s14, s7, s11
 8008f3c:	ee23 1aa5 	vmul.f32	s2, s7, s11
 8008f40:	ee27 0aa5 	vmul.f32	s0, s15, s11
 8008f44:	eea4 1a25 	vfma.f32	s2, s8, s11
 8008f48:	ed8d 7a24 	vstr	s14, [sp, #144]	; 0x90
 8008f4c:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
 8008f50:	edcd 2a33 	vstr	s5, [sp, #204]	; 0xcc
 8008f54:	ee65 7a25 	vmul.f32	s15, s10, s11
 8008f58:	eea7 1a24 	vfma.f32	s2, s14, s9
 8008f5c:	eeb0 ca40 	vmov.f32	s24, s0
 8008f60:	eeb0 7a40 	vmov.f32	s14, s0
 8008f64:	eea4 caa5 	vfma.f32	s24, s9, s11
 8008f68:	eea4 6a25 	vfma.f32	s12, s8, s11
 8008f6c:	eea5 7a25 	vfma.f32	s14, s10, s11
 8008f70:	eef0 6a67 	vmov.f32	s13, s15
 8008f74:	eeab 3ae0 	vfms.f32	s6, s23, s1
 8008f78:	eea4 2aa5 	vfma.f32	s4, s9, s11
 8008f7c:	eee4 6a25 	vfma.f32	s13, s8, s11
 8008f80:	ed8d 6a21 	vstr	s12, [sp, #132]	; 0x84
 8008f84:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8008f88:	eeb0 6a4c 	vmov.f32	s12, s24
 8008f8c:	eeb0 7a61 	vmov.f32	s14, s3
 8008f90:	eea5 2a25 	vfma.f32	s4, s10, s11
 8008f94:	eea3 7a25 	vfma.f32	s14, s6, s11
 8008f98:	eee3 7a25 	vfma.f32	s15, s6, s11
 8008f9c:	eead 6a05 	vfma.f32	s12, s26, s10
 8008fa0:	eeed 6a03 	vfma.f32	s13, s26, s6
 8008fa4:	edcd 2a01 	vstr	s5, [sp, #4]
 8008fa8:	ed8d 1a27 	vstr	s2, [sp, #156]	; 0x9c
 8008fac:	ed8d 6a26 	vstr	s12, [sp, #152]	; 0x98
 8008fb0:	ed8d 2a29 	vstr	s4, [sp, #164]	; 0xa4
 8008fb4:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8008fb8:	ed8d 7a28 	vstr	s14, [sp, #160]	; 0xa0
 8008fbc:	edcd 7a22 	vstr	s15, [sp, #136]	; 0x88
 8008fc0:	f7ff fd04 	bl	80089cc <st_accCal_MEMS_EIG3>
 8008fc4:	ed9d 6a21 	vldr	s12, [sp, #132]	; 0x84
 8008fc8:	ed9d 4a07 	vldr	s8, [sp, #28]
 8008fcc:	ed9d 3a06 	vldr	s6, [sp, #24]
 8008fd0:	eddd 3a27 	vldr	s7, [sp, #156]	; 0x9c
 8008fd4:	ed9d 7a23 	vldr	s14, [sp, #140]	; 0x8c
 8008fd8:	ed9d 5a25 	vldr	s10, [sp, #148]	; 0x94
 8008fdc:	eddd 7a26 	vldr	s15, [sp, #152]	; 0x98
 8008fe0:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8008fe4:	eddd 1a22 	vldr	s3, [sp, #136]	; 0x88
 8008fe8:	ed9d 2a29 	vldr	s4, [sp, #164]	; 0xa4
 8008fec:	eddd 6a28 	vldr	s13, [sp, #160]	; 0xa0
 8008ff0:	ee36 4a44 	vsub.f32	s8, s12, s8
 8008ff4:	ee23 7a87 	vmul.f32	s14, s7, s14
 8008ff8:	ee74 5a43 	vsub.f32	s11, s8, s6
 8008ffc:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8009000:	ee35 5a85 	vadd.f32	s10, s11, s10
 8009004:	eea1 7aa4 	vfma.f32	s14, s3, s9
 8009008:	ee75 5a82 	vadd.f32	s11, s11, s4
 800900c:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8009010:	eee4 7a85 	vfma.f32	s15, s9, s10
 8009014:	eee3 6aa5 	vfma.f32	s13, s7, s11
 8009018:	ee36 6a43 	vsub.f32	s12, s12, s6
 800901c:	eef0 7ae7 	vabs.f32	s15, s15
 8009020:	eea6 7a04 	vfma.f32	s14, s12, s8
 8009024:	eec6 caa7 	vdiv.f32	s25, s13, s15
 8009028:	ee87 ca27 	vdiv.f32	s24, s14, s15
 800902c:	ee6c 7aac 	vmul.f32	s15, s25, s25
 8009030:	eeec 7a0c 	vfma.f32	s15, s24, s24
 8009034:	ee77 7a8e 	vadd.f32	s15, s15, s28
 8009038:	ee17 0a90 	vmov	r0, s15
 800903c:	f7f7 fa28 	bl	8000490 <__aeabi_f2d>
 8009040:	ec41 0b10 	vmov	d0, r0, r1
 8009044:	f00a f91c 	bl	8013280 <sqrt>
 8009048:	ec51 0b10 	vmov	r0, r1, d0
 800904c:	f7f7 fd70 	bl	8000b30 <__aeabi_d2f>
 8009050:	ee07 0a90 	vmov	s15, r0
 8009054:	eece 4a27 	vdiv.f32	s9, s28, s15
 8009058:	eddd 2a01 	vldr	s5, [sp, #4]
 800905c:	edc5 4a01 	vstr	s9, [r5, #4]
 8009060:	ee6c 5aa4 	vmul.f32	s11, s25, s9
 8009064:	ee2c 5a24 	vmul.f32	s10, s24, s9
 8009068:	ee68 8aa4 	vmul.f32	s17, s17, s9
 800906c:	ee68 6a25 	vmul.f32	s13, s16, s11
 8009070:	ee2f 7aa5 	vmul.f32	s14, s31, s11
 8009074:	ee6f 7a25 	vmul.f32	s15, s30, s11
 8009078:	eee5 8a0b 	vfma.f32	s17, s10, s22
 800907c:	eee9 6aa4 	vfma.f32	s13, s19, s9
 8009080:	eea4 7aae 	vfma.f32	s14, s9, s29
 8009084:	eee4 7aab 	vfma.f32	s15, s9, s23
 8009088:	eeb0 6a68 	vmov.f32	s12, s17
 800908c:	eeea 6a85 	vfma.f32	s13, s21, s10
 8009090:	eeaa 7a05 	vfma.f32	s14, s20, s10
 8009094:	eee5 7a22 	vfma.f32	s15, s10, s5
 8009098:	eea5 6a89 	vfma.f32	s12, s11, s18
 800909c:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80090a0:	eef1 6a66 	vneg.f32	s13, s13
 80090a4:	eeb1 7a47 	vneg.f32	s14, s14
 80090a8:	eef1 7a67 	vneg.f32	s15, s15
 80090ac:	eeb1 6a46 	vneg.f32	s12, s12
 80090b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090b4:	edc5 6a04 	vstr	s13, [r5, #16]
 80090b8:	ed85 7a05 	vstr	s14, [r5, #20]
 80090bc:	edc5 7a06 	vstr	s15, [r5, #24]
 80090c0:	ed85 6a03 	vstr	s12, [r5, #12]
 80090c4:	ed85 5a00 	vstr	s10, [r5]
 80090c8:	edc5 5a02 	vstr	s11, [r5, #8]
 80090cc:	d430      	bmi.n	8009130 <st_accCal_MEMS_ellipsoidFit7+0x580>
 80090ce:	b046      	add	sp, #280	; 0x118
 80090d0:	ecbd 8b10 	vpop	{d8-d15}
 80090d4:	bd70      	pop	{r4, r5, r6, pc}
 80090d6:	ee31 7ac4 	vsub.f32	s14, s3, s8
 80090da:	ed9d 2a14 	vldr	s4, [sp, #80]	; 0x50
 80090de:	eddd 2a16 	vldr	s5, [sp, #88]	; 0x58
 80090e2:	eeb0 7ac7 	vabs.f32	s14, s14
 80090e6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80090ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ee:	f57f ad9b 	bpl.w	8008c28 <st_accCal_MEMS_ellipsoidFit7+0x78>
 80090f2:	ee32 7a62 	vsub.f32	s14, s4, s5
 80090f6:	eeb0 7ac7 	vabs.f32	s14, s14
 80090fa:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80090fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009102:	bf4c      	ite	mi
 8009104:	2601      	movmi	r6, #1
 8009106:	2600      	movpl	r6, #0
 8009108:	e58e      	b.n	8008c28 <st_accCal_MEMS_ellipsoidFit7+0x78>
 800910a:	ee69 4ac2 	vnmul.f32	s9, s19, s4
 800910e:	ee29 5a67 	vnmul.f32	s10, s18, s15
 8009112:	eee5 4aa1 	vfma.f32	s9, s11, s3
 8009116:	ee68 5ae1 	vnmul.f32	s11, s17, s3
 800911a:	eea1 5aa2 	vfma.f32	s10, s3, s5
 800911e:	eee7 5a82 	vfma.f32	s11, s15, s4
 8009122:	edcd 4a3c 	vstr	s9, [sp, #240]	; 0xf0
 8009126:	eef0 7a65 	vmov.f32	s15, s11
 800912a:	eef0 2a64 	vmov.f32	s5, s9
 800912e:	e5b9      	b.n	8008ca4 <st_accCal_MEMS_ellipsoidFit7+0xf4>
 8009130:	eeb1 5a45 	vneg.f32	s10, s10
 8009134:	eef1 4a64 	vneg.f32	s9, s9
 8009138:	eef1 5a65 	vneg.f32	s11, s11
 800913c:	eeb1 6a46 	vneg.f32	s12, s12
 8009140:	eef1 6a66 	vneg.f32	s13, s13
 8009144:	eeb1 7a47 	vneg.f32	s14, s14
 8009148:	eef1 7a67 	vneg.f32	s15, s15
 800914c:	ed85 5a00 	vstr	s10, [r5]
 8009150:	edc5 4a01 	vstr	s9, [r5, #4]
 8009154:	edc5 5a02 	vstr	s11, [r5, #8]
 8009158:	ed85 6a03 	vstr	s12, [r5, #12]
 800915c:	edc5 6a04 	vstr	s13, [r5, #16]
 8009160:	ed85 7a05 	vstr	s14, [r5, #20]
 8009164:	edc5 7a06 	vstr	s15, [r5, #24]
 8009168:	b046      	add	sp, #280	; 0x118
 800916a:	ecbd 8b10 	vpop	{d8-d15}
 800916e:	bd70      	pop	{r4, r5, r6, pc}

08009170 <m_dcm2q_eml>:
 8009170:	ed90 7a04 	vldr	s14, [r0, #16]
 8009174:	edd0 6a08 	vldr	s13, [r0, #32]
 8009178:	edd0 7a00 	vldr	s15, [r0]
 800917c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009180:	b538      	push	{r3, r4, r5, lr}
 8009182:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009186:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800918a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800918e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009192:	ed2d 8b02 	vpush	{d8}
 8009196:	4604      	mov	r4, r0
 8009198:	460d      	mov	r5, r1
 800919a:	f340 80c1 	ble.w	8009320 <m_dcm2q_eml+0x1b0>
 800919e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091a6:	ee17 0a90 	vmov	r0, s15
 80091aa:	f7f7 f971 	bl	8000490 <__aeabi_f2d>
 80091ae:	ec41 0b10 	vmov	d0, r0, r1
 80091b2:	f00a f865 	bl	8013280 <sqrt>
 80091b6:	ec51 0b10 	vmov	r0, r1, d0
 80091ba:	f7f7 fcb9 	bl	8000b30 <__aeabi_d2f>
 80091be:	ee07 0a90 	vmov	s15, r0
 80091c2:	edd4 6a05 	vldr	s13, [r4, #20]
 80091c6:	ed94 7a07 	vldr	s14, [r4, #28]
 80091ca:	edd4 5a06 	vldr	s11, [r4, #24]
 80091ce:	ed94 5a02 	vldr	s10, [r4, #8]
 80091d2:	ed94 6a03 	vldr	s12, [r4, #12]
 80091d6:	ed94 4a01 	vldr	s8, [r4, #4]
 80091da:	ee37 7a66 	vsub.f32	s14, s14, s13
 80091de:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 80091e2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80091e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80091ee:	bf54      	ite	pl
 80091f0:	eef0 4a47 	vmovpl.f32	s9, s14
 80091f4:	eef0 4a66 	vmovmi.f32	s9, s13
 80091f8:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80091fc:	ee35 5a65 	vsub.f32	s10, s10, s11
 8009200:	edc5 7a00 	vstr	s15, [r5]
 8009204:	edd4 5a00 	vldr	s11, [r4]
 8009208:	edd4 4a08 	vldr	s9, [r4, #32]
 800920c:	edd4 7a04 	vldr	s15, [r4, #16]
 8009210:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8009214:	ee36 6a44 	vsub.f32	s12, s12, s8
 8009218:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 800921c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8009220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009224:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8009228:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800922c:	bf54      	ite	pl
 800922e:	eef0 8a47 	vmovpl.f32	s17, s14
 8009232:	eef0 8a66 	vmovmi.f32	s17, s13
 8009236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800923a:	eef4 7ac6 	vcmpe.f32	s15, s12
 800923e:	bf54      	ite	pl
 8009240:	eeb0 8a47 	vmovpl.f32	s16, s14
 8009244:	eeb0 8a66 	vmovmi.f32	s16, s13
 8009248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800924c:	dd75      	ble.n	800933a <m_dcm2q_eml+0x1ca>
 800924e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009252:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009256:	ee17 0a90 	vmov	r0, s15
 800925a:	f7f7 f919 	bl	8000490 <__aeabi_f2d>
 800925e:	ec41 0b10 	vmov	d0, r0, r1
 8009262:	f00a f80d 	bl	8013280 <sqrt>
 8009266:	ec51 0b10 	vmov	r0, r1, d0
 800926a:	f7f7 fc61 	bl	8000b30 <__aeabi_d2f>
 800926e:	ee07 0a90 	vmov	s15, r0
 8009272:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8009276:	edc5 7a01 	vstr	s15, [r5, #4]
 800927a:	edd4 6a04 	vldr	s13, [r4, #16]
 800927e:	ed94 7a00 	vldr	s14, [r4]
 8009282:	edd4 7a08 	vldr	s15, [r4, #32]
 8009286:	ee37 7a26 	vadd.f32	s14, s14, s13
 800928a:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 800928e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009292:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800929a:	dd4b      	ble.n	8009334 <m_dcm2q_eml+0x1c4>
 800929c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80092a4:	ee17 0a90 	vmov	r0, s15
 80092a8:	f7f7 f8f2 	bl	8000490 <__aeabi_f2d>
 80092ac:	ec41 0b10 	vmov	d0, r0, r1
 80092b0:	f009 ffe6 	bl	8013280 <sqrt>
 80092b4:	ec51 0b10 	vmov	r0, r1, d0
 80092b8:	f7f7 fc3a 	bl	8000b30 <__aeabi_d2f>
 80092bc:	ee07 0a90 	vmov	s15, r0
 80092c0:	ee27 7a88 	vmul.f32	s14, s15, s16
 80092c4:	ed85 7a02 	vstr	s14, [r5, #8]
 80092c8:	ed94 7a04 	vldr	s14, [r4, #16]
 80092cc:	edd4 7a00 	vldr	s15, [r4]
 80092d0:	edd4 6a08 	vldr	s13, [r4, #32]
 80092d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80092d8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80092dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80092e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092e8:	dd1d      	ble.n	8009326 <m_dcm2q_eml+0x1b6>
 80092ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80092ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80092f2:	ee17 0a90 	vmov	r0, s15
 80092f6:	f7f7 f8cb 	bl	8000490 <__aeabi_f2d>
 80092fa:	ec41 0b10 	vmov	d0, r0, r1
 80092fe:	f009 ffbf 	bl	8013280 <sqrt>
 8009302:	ec51 0b10 	vmov	r0, r1, d0
 8009306:	f7f7 fc13 	bl	8000b30 <__aeabi_d2f>
 800930a:	ecbd 8b02 	vpop	{d8}
 800930e:	ee07 0a10 	vmov	s14, r0
 8009312:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800931a:	edc5 7a03 	vstr	s15, [r5, #12]
 800931e:	bd38      	pop	{r3, r4, r5, pc}
 8009320:	eddf 7a07 	vldr	s15, [pc, #28]	; 8009340 <m_dcm2q_eml+0x1d0>
 8009324:	e74d      	b.n	80091c2 <m_dcm2q_eml+0x52>
 8009326:	ecbd 8b02 	vpop	{d8}
 800932a:	eddf 7a05 	vldr	s15, [pc, #20]	; 8009340 <m_dcm2q_eml+0x1d0>
 800932e:	edc5 7a03 	vstr	s15, [r5, #12]
 8009332:	bd38      	pop	{r3, r4, r5, pc}
 8009334:	ed9f 7a02 	vldr	s14, [pc, #8]	; 8009340 <m_dcm2q_eml+0x1d0>
 8009338:	e7c4      	b.n	80092c4 <m_dcm2q_eml+0x154>
 800933a:	eddf 7a01 	vldr	s15, [pc, #4]	; 8009340 <m_dcm2q_eml+0x1d0>
 800933e:	e79a      	b.n	8009276 <m_dcm2q_eml+0x106>
 8009340:	00000000 	.word	0x00000000

08009344 <SpacePointGyroProp>:
 8009344:	b570      	push	{r4, r5, r6, lr}
 8009346:	eddf 6a46 	vldr	s13, [pc, #280]	; 8009460 <SpacePointGyroProp+0x11c>
 800934a:	ed92 6a01 	vldr	s12, [r2, #4]
 800934e:	ed92 7a00 	vldr	s14, [r2]
 8009352:	edd1 7a02 	vldr	s15, [r1, #8]
 8009356:	ed2d 8b04 	vpush	{d8-d9}
 800935a:	edd1 8a01 	vldr	s17, [r1, #4]
 800935e:	ed91 9a00 	vldr	s18, [r1]
 8009362:	ed92 8a02 	vldr	s16, [r2, #8]
 8009366:	9d08      	ldr	r5, [sp, #32]
 8009368:	ee20 0a26 	vmul.f32	s0, s0, s13
 800936c:	ee78 8ac6 	vsub.f32	s17, s17, s12
 8009370:	ee39 9a47 	vsub.f32	s18, s18, s14
 8009374:	ee68 8a80 	vmul.f32	s17, s17, s0
 8009378:	ee29 9a00 	vmul.f32	s18, s18, s0
 800937c:	ee28 7aa8 	vmul.f32	s14, s17, s17
 8009380:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8009384:	eea9 7a09 	vfma.f32	s14, s18, s18
 8009388:	4606      	mov	r6, r0
 800938a:	461c      	mov	r4, r3
 800938c:	ee27 8a80 	vmul.f32	s16, s15, s0
 8009390:	eef0 7a47 	vmov.f32	s15, s14
 8009394:	eee8 7a08 	vfma.f32	s15, s16, s16
 8009398:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800939c:	eef4 7ae6 	vcmpe.f32	s15, s13
 80093a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093a4:	d55a      	bpl.n	800945c <SpacePointGyroProp+0x118>
 80093a6:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 80093aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80093ae:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80093b2:	ee17 0a10 	vmov	r0, s14
 80093b6:	f7f7 f86b 	bl	8000490 <__aeabi_f2d>
 80093ba:	ec41 0b10 	vmov	d0, r0, r1
 80093be:	f009 ff5f 	bl	8013280 <sqrt>
 80093c2:	ec51 0b10 	vmov	r0, r1, d0
 80093c6:	f7f7 fbb3 	bl	8000b30 <__aeabi_d2f>
 80093ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80093ce:	ee29 9a27 	vmul.f32	s18, s18, s15
 80093d2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80093d6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80093da:	4622      	mov	r2, r4
 80093dc:	60e8      	str	r0, [r5, #12]
 80093de:	4631      	mov	r1, r6
 80093e0:	ed85 9a00 	vstr	s18, [r5]
 80093e4:	edc5 8a01 	vstr	s17, [r5, #4]
 80093e8:	ed85 8a02 	vstr	s16, [r5, #8]
 80093ec:	4628      	mov	r0, r5
 80093ee:	f7ff fa51 	bl	8008894 <m_qmult_eml>
 80093f2:	edd4 8a02 	vldr	s17, [r4, #8]
 80093f6:	ed94 9a01 	vldr	s18, [r4, #4]
 80093fa:	ed94 8a03 	vldr	s16, [r4, #12]
 80093fe:	edd4 9a00 	vldr	s19, [r4]
 8009402:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8009406:	eee9 7a09 	vfma.f32	s15, s18, s18
 800940a:	eee8 7a08 	vfma.f32	s15, s16, s16
 800940e:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8009412:	ee17 0a90 	vmov	r0, s15
 8009416:	f7f7 f83b 	bl	8000490 <__aeabi_f2d>
 800941a:	ec41 0b10 	vmov	d0, r0, r1
 800941e:	f009 ff2f 	bl	8013280 <sqrt>
 8009422:	ec51 0b10 	vmov	r0, r1, d0
 8009426:	f7f7 fb83 	bl	8000b30 <__aeabi_d2f>
 800942a:	ee07 0a90 	vmov	s15, r0
 800942e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009432:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8009436:	ee67 9aa9 	vmul.f32	s19, s15, s19
 800943a:	ee29 9a27 	vmul.f32	s18, s18, s15
 800943e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8009442:	ee28 8a27 	vmul.f32	s16, s16, s15
 8009446:	edc4 9a00 	vstr	s19, [r4]
 800944a:	ed84 9a01 	vstr	s18, [r4, #4]
 800944e:	edc4 8a02 	vstr	s17, [r4, #8]
 8009452:	ed84 8a03 	vstr	s16, [r4, #12]
 8009456:	ecbd 8b04 	vpop	{d8-d9}
 800945a:	bd70      	pop	{r4, r5, r6, pc}
 800945c:	2000      	movs	r0, #0
 800945e:	e7b4      	b.n	80093ca <SpacePointGyroProp+0x86>
 8009460:	3c8efa35 	.word	0x3c8efa35

08009464 <SpacePointGyroPropRedist>:
 8009464:	b570      	push	{r4, r5, r6, lr}
 8009466:	460d      	mov	r5, r1
 8009468:	ed2d 8b04 	vpush	{d8-d9}
 800946c:	4619      	mov	r1, r3
 800946e:	4606      	mov	r6, r0
 8009470:	4610      	mov	r0, r2
 8009472:	461a      	mov	r2, r3
 8009474:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009476:	f7ff fa0d 	bl	8008894 <m_qmult_eml>
 800947a:	462a      	mov	r2, r5
 800947c:	4629      	mov	r1, r5
 800947e:	4630      	mov	r0, r6
 8009480:	f7ff fa08 	bl	8008894 <m_qmult_eml>
 8009484:	4622      	mov	r2, r4
 8009486:	4618      	mov	r0, r3
 8009488:	9908      	ldr	r1, [sp, #32]
 800948a:	f7ff fa03 	bl	8008894 <m_qmult_eml>
 800948e:	4621      	mov	r1, r4
 8009490:	4628      	mov	r0, r5
 8009492:	f7ff f9ff 	bl	8008894 <m_qmult_eml>
 8009496:	ed94 9a01 	vldr	s18, [r4, #4]
 800949a:	edd4 9a00 	vldr	s19, [r4]
 800949e:	edd4 8a02 	vldr	s17, [r4, #8]
 80094a2:	ed94 8a03 	vldr	s16, [r4, #12]
 80094a6:	ee69 7a09 	vmul.f32	s15, s18, s18
 80094aa:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80094ae:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80094b2:	eee8 7a08 	vfma.f32	s15, s16, s16
 80094b6:	ee17 0a90 	vmov	r0, s15
 80094ba:	f7f6 ffe9 	bl	8000490 <__aeabi_f2d>
 80094be:	ec41 0b10 	vmov	d0, r0, r1
 80094c2:	f009 fedd 	bl	8013280 <sqrt>
 80094c6:	ec51 0b10 	vmov	r0, r1, d0
 80094ca:	f7f7 fb31 	bl	8000b30 <__aeabi_d2f>
 80094ce:	ee07 0a90 	vmov	s15, r0
 80094d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80094d6:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80094da:	ee67 9aa9 	vmul.f32	s19, s15, s19
 80094de:	ee29 9a27 	vmul.f32	s18, s18, s15
 80094e2:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80094e6:	ee28 8a27 	vmul.f32	s16, s16, s15
 80094ea:	edc4 9a00 	vstr	s19, [r4]
 80094ee:	ed84 9a01 	vstr	s18, [r4, #4]
 80094f2:	edc4 8a02 	vstr	s17, [r4, #8]
 80094f6:	ed84 8a03 	vstr	s16, [r4, #12]
 80094fa:	ecbd 8b04 	vpop	{d8-d9}
 80094fe:	bd70      	pop	{r4, r5, r6, pc}

08009500 <quatErr2EulerErr>:
 8009500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009504:	2300      	movs	r3, #0
 8009506:	ed2d 8b04 	vpush	{d8-d9}
 800950a:	6013      	str	r3, [r2, #0]
 800950c:	6053      	str	r3, [r2, #4]
 800950e:	6093      	str	r3, [r2, #8]
 8009510:	ed90 0a01 	vldr	s0, [r0, #4]
 8009514:	ed9f 8a6c 	vldr	s16, [pc, #432]	; 80096c8 <quatErr2EulerErr+0x1c8>
 8009518:	4606      	mov	r6, r0
 800951a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800951e:	460c      	mov	r4, r1
 8009520:	4615      	mov	r5, r2
 8009522:	f009 fd55 	bl	8012fd0 <cosf>
 8009526:	ed96 9a02 	vldr	s18, [r6, #8]
 800952a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800952e:	eef0 8a40 	vmov.f32	s17, s0
 8009532:	eeb0 0a49 	vmov.f32	s0, s18
 8009536:	f009 fdb3 	bl	80130a0 <sinf>
 800953a:	eeb0 8a40 	vmov.f32	s16, s0
 800953e:	eeb0 0a49 	vmov.f32	s0, s18
 8009542:	f009 fd45 	bl	8012fd0 <cosf>
 8009546:	edd4 7a01 	vldr	s15, [r4, #4]
 800954a:	edd4 6a02 	vldr	s13, [r4, #8]
 800954e:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80096cc <quatErr2EulerErr+0x1cc>
 8009552:	ee20 9a00 	vmul.f32	s18, s0, s0
 8009556:	ee28 8a08 	vmul.f32	s16, s16, s16
 800955a:	ee69 7a27 	vmul.f32	s15, s18, s15
 800955e:	eee8 7a26 	vfma.f32	s15, s16, s13
 8009562:	eef1 6ae7 	vsqrt.f32	s13, s15
 8009566:	ee66 7a87 	vmul.f32	s15, s13, s14
 800956a:	ee17 0a90 	vmov	r0, s15
 800956e:	f7f6 ff8f 	bl	8000490 <__aeabi_f2d>
 8009572:	4b57      	ldr	r3, [pc, #348]	; (80096d0 <quatErr2EulerErr+0x1d0>)
 8009574:	2200      	movs	r2, #0
 8009576:	4680      	mov	r8, r0
 8009578:	4689      	mov	r9, r1
 800957a:	f7f7 fa5d 	bl	8000a38 <__aeabi_dcmple>
 800957e:	b918      	cbnz	r0, 8009588 <quatErr2EulerErr+0x88>
 8009580:	f8df 914c 	ldr.w	r9, [pc, #332]	; 80096d0 <quatErr2EulerErr+0x1d0>
 8009584:	f04f 0800 	mov.w	r8, #0
 8009588:	4649      	mov	r1, r9
 800958a:	4640      	mov	r0, r8
 800958c:	f7f7 fad0 	bl	8000b30 <__aeabi_d2f>
 8009590:	f7f6 ff7e 	bl	8000490 <__aeabi_f2d>
 8009594:	4b4f      	ldr	r3, [pc, #316]	; (80096d4 <quatErr2EulerErr+0x1d4>)
 8009596:	2200      	movs	r2, #0
 8009598:	4680      	mov	r8, r0
 800959a:	4689      	mov	r9, r1
 800959c:	f7f7 fa56 	bl	8000a4c <__aeabi_dcmpge>
 80095a0:	b918      	cbnz	r0, 80095aa <quatErr2EulerErr+0xaa>
 80095a2:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80096d4 <quatErr2EulerErr+0x1d4>
 80095a6:	f04f 0800 	mov.w	r8, #0
 80095aa:	4649      	mov	r1, r9
 80095ac:	4640      	mov	r0, r8
 80095ae:	f7f7 fabf 	bl	8000b30 <__aeabi_d2f>
 80095b2:	6068      	str	r0, [r5, #4]
 80095b4:	edd4 7a02 	vldr	s15, [r4, #8]
 80095b8:	ed94 6a01 	vldr	s12, [r4, #4]
 80095bc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80096d8 <quatErr2EulerErr+0x1d8>
 80095c0:	eddf 6a42 	vldr	s13, [pc, #264]	; 80096cc <quatErr2EulerErr+0x1cc>
 80095c4:	ee69 7a27 	vmul.f32	s15, s18, s15
 80095c8:	eea8 7aa8 	vfma.f32	s14, s17, s17
 80095cc:	eee8 7a06 	vfma.f32	s15, s16, s12
 80095d0:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80095d4:	eef1 7ac6 	vsqrt.f32	s15, s12
 80095d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80095dc:	ee17 0a90 	vmov	r0, s15
 80095e0:	f7f6 ff56 	bl	8000490 <__aeabi_f2d>
 80095e4:	4b3d      	ldr	r3, [pc, #244]	; (80096dc <quatErr2EulerErr+0x1dc>)
 80095e6:	2200      	movs	r2, #0
 80095e8:	4680      	mov	r8, r0
 80095ea:	4689      	mov	r9, r1
 80095ec:	f7f7 fa24 	bl	8000a38 <__aeabi_dcmple>
 80095f0:	b918      	cbnz	r0, 80095fa <quatErr2EulerErr+0xfa>
 80095f2:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80096dc <quatErr2EulerErr+0x1dc>
 80095f6:	f04f 0800 	mov.w	r8, #0
 80095fa:	4649      	mov	r1, r9
 80095fc:	4640      	mov	r0, r8
 80095fe:	f7f7 fa97 	bl	8000b30 <__aeabi_d2f>
 8009602:	f7f6 ff45 	bl	8000490 <__aeabi_f2d>
 8009606:	4b33      	ldr	r3, [pc, #204]	; (80096d4 <quatErr2EulerErr+0x1d4>)
 8009608:	2200      	movs	r2, #0
 800960a:	4680      	mov	r8, r0
 800960c:	4689      	mov	r9, r1
 800960e:	f7f7 fa1d 	bl	8000a4c <__aeabi_dcmpge>
 8009612:	b918      	cbnz	r0, 800961c <quatErr2EulerErr+0x11c>
 8009614:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80096d4 <quatErr2EulerErr+0x1d4>
 8009618:	f04f 0800 	mov.w	r8, #0
 800961c:	4640      	mov	r0, r8
 800961e:	4649      	mov	r1, r9
 8009620:	f7f7 fa86 	bl	8000b30 <__aeabi_d2f>
 8009624:	6028      	str	r0, [r5, #0]
 8009626:	ed96 0a01 	vldr	s0, [r6, #4]
 800962a:	ed9f 6a27 	vldr	s12, [pc, #156]	; 80096c8 <quatErr2EulerErr+0x1c8>
 800962e:	ed94 7a02 	vldr	s14, [r4, #8]
 8009632:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80096e0 <quatErr2EulerErr+0x1e0>
 8009636:	edd4 6a01 	vldr	s13, [r4, #4]
 800963a:	ee20 0a06 	vmul.f32	s0, s0, s12
 800963e:	ee28 8a07 	vmul.f32	s16, s16, s14
 8009642:	eeb0 7ac0 	vabs.f32	s14, s0
 8009646:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800964a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800964e:	eea9 8a26 	vfma.f32	s16, s18, s13
 8009652:	d532      	bpl.n	80096ba <quatErr2EulerErr+0x1ba>
 8009654:	f009 fd6a 	bl	801312c <tanf>
 8009658:	edd4 7a00 	vldr	s15, [r4]
 800965c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009660:	eee0 7a08 	vfma.f32	s15, s0, s16
 8009664:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8009668:	eddf 7a18 	vldr	s15, [pc, #96]	; 80096cc <quatErr2EulerErr+0x1cc>
 800966c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009670:	ee17 0a90 	vmov	r0, s15
 8009674:	f7f6 ff0c 	bl	8000490 <__aeabi_f2d>
 8009678:	4b18      	ldr	r3, [pc, #96]	; (80096dc <quatErr2EulerErr+0x1dc>)
 800967a:	2200      	movs	r2, #0
 800967c:	4606      	mov	r6, r0
 800967e:	460f      	mov	r7, r1
 8009680:	f7f7 f9da 	bl	8000a38 <__aeabi_dcmple>
 8009684:	b908      	cbnz	r0, 800968a <quatErr2EulerErr+0x18a>
 8009686:	4f15      	ldr	r7, [pc, #84]	; (80096dc <quatErr2EulerErr+0x1dc>)
 8009688:	2600      	movs	r6, #0
 800968a:	4639      	mov	r1, r7
 800968c:	4630      	mov	r0, r6
 800968e:	f7f7 fa4f 	bl	8000b30 <__aeabi_d2f>
 8009692:	f7f6 fefd 	bl	8000490 <__aeabi_f2d>
 8009696:	4b0f      	ldr	r3, [pc, #60]	; (80096d4 <quatErr2EulerErr+0x1d4>)
 8009698:	2200      	movs	r2, #0
 800969a:	4606      	mov	r6, r0
 800969c:	460f      	mov	r7, r1
 800969e:	f7f7 f9d5 	bl	8000a4c <__aeabi_dcmpge>
 80096a2:	b908      	cbnz	r0, 80096a8 <quatErr2EulerErr+0x1a8>
 80096a4:	4f0b      	ldr	r7, [pc, #44]	; (80096d4 <quatErr2EulerErr+0x1d4>)
 80096a6:	2600      	movs	r6, #0
 80096a8:	4630      	mov	r0, r6
 80096aa:	4639      	mov	r1, r7
 80096ac:	f7f7 fa40 	bl	8000b30 <__aeabi_d2f>
 80096b0:	ecbd 8b04 	vpop	{d8-d9}
 80096b4:	60a8      	str	r0, [r5, #8]
 80096b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096ba:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80096e4 <quatErr2EulerErr+0x1e4>
 80096be:	edd4 7a00 	vldr	s15, [r4]
 80096c2:	eee8 7a07 	vfma.f32	s15, s16, s14
 80096c6:	e7cd      	b.n	8009664 <quatErr2EulerErr+0x164>
 80096c8:	3c8efa35 	.word	0x3c8efa35
 80096cc:	42e52ee1 	.word	0x42e52ee1
 80096d0:	40568000 	.word	0x40568000
 80096d4:	3ff00000 	.word	0x3ff00000
 80096d8:	3a83126f 	.word	0x3a83126f
 80096dc:	40668000 	.word	0x40668000
 80096e0:	3fbc430e 	.word	0x3fbc430e
 80096e4:	42c6ab07 	.word	0x42c6ab07

080096e8 <m_b_interp1q_constrain>:
 80096e8:	ed90 7a00 	vldr	s14, [r0]
 80096ec:	eeb4 7ac0 	vcmpe.f32	s14, s0
 80096f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096f4:	d53d      	bpl.n	8009772 <m_b_interp1q_constrain+0x8a>
 80096f6:	edd0 7a09 	vldr	s15, [r0, #36]	; 0x24
 80096fa:	eef4 7ac0 	vcmpe.f32	s15, s0
 80096fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009702:	dd33      	ble.n	800976c <m_b_interp1q_constrain+0x84>
 8009704:	b4f0      	push	{r4, r5, r6, r7}
 8009706:	240a      	movs	r4, #10
 8009708:	2602      	movs	r6, #2
 800970a:	2501      	movs	r5, #1
 800970c:	f06f 4740 	mvn.w	r7, #3221225472	; 0xc0000000
 8009710:	e008      	b.n	8009724 <m_b_interp1q_constrain+0x3c>
 8009712:	edd2 7a00 	vldr	s15, [r2]
 8009716:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800971a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800971e:	bfb8      	it	lt
 8009720:	461c      	movlt	r4, r3
 8009722:	da29      	bge.n	8009778 <m_b_interp1q_constrain+0x90>
 8009724:	1963      	adds	r3, r4, r5
 8009726:	eb07 0253 	add.w	r2, r7, r3, lsr #1
 800972a:	42b4      	cmp	r4, r6
 800972c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009730:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8009734:	d8ed      	bhi.n	8009712 <m_b_interp1q_constrain+0x2a>
 8009736:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 800973a:	3d01      	subs	r5, #1
 800973c:	00ab      	lsls	r3, r5, #2
 800973e:	3304      	adds	r3, #4
 8009740:	4418      	add	r0, r3
 8009742:	edd0 7a00 	vldr	s15, [r0]
 8009746:	ee30 0a47 	vsub.f32	s0, s0, s14
 800974a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800974e:	440b      	add	r3, r1
 8009750:	eec0 6a07 	vdiv.f32	s13, s0, s14
 8009754:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8009758:	bcf0      	pop	{r4, r5, r6, r7}
 800975a:	ed91 0a00 	vldr	s0, [r1]
 800975e:	edd3 7a00 	vldr	s15, [r3]
 8009762:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009766:	eea6 0aa7 	vfma.f32	s0, s13, s15
 800976a:	4770      	bx	lr
 800976c:	ed91 0a09 	vldr	s0, [r1, #36]	; 0x24
 8009770:	4770      	bx	lr
 8009772:	ed91 0a00 	vldr	s0, [r1]
 8009776:	4770      	bx	lr
 8009778:	eeb0 7a67 	vmov.f32	s14, s15
 800977c:	1c5e      	adds	r6, r3, #1
 800977e:	461d      	mov	r5, r3
 8009780:	e7d0      	b.n	8009724 <m_b_interp1q_constrain+0x3c>
 8009782:	bf00      	nop

08009784 <m_interp1q_constrain>:
 8009784:	ed90 7a00 	vldr	s14, [r0]
 8009788:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800978c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009790:	d53d      	bpl.n	800980e <m_interp1q_constrain+0x8a>
 8009792:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8009796:	eef4 7ac0 	vcmpe.f32	s15, s0
 800979a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800979e:	dd33      	ble.n	8009808 <m_interp1q_constrain+0x84>
 80097a0:	b4f0      	push	{r4, r5, r6, r7}
 80097a2:	240d      	movs	r4, #13
 80097a4:	2602      	movs	r6, #2
 80097a6:	2501      	movs	r5, #1
 80097a8:	f06f 4740 	mvn.w	r7, #3221225472	; 0xc0000000
 80097ac:	e008      	b.n	80097c0 <m_interp1q_constrain+0x3c>
 80097ae:	edd2 7a00 	vldr	s15, [r2]
 80097b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80097b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ba:	bfb8      	it	lt
 80097bc:	461c      	movlt	r4, r3
 80097be:	da29      	bge.n	8009814 <m_interp1q_constrain+0x90>
 80097c0:	1963      	adds	r3, r4, r5
 80097c2:	eb07 0253 	add.w	r2, r7, r3, lsr #1
 80097c6:	42b4      	cmp	r4, r6
 80097c8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80097cc:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80097d0:	d8ed      	bhi.n	80097ae <m_interp1q_constrain+0x2a>
 80097d2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80097d6:	3d01      	subs	r5, #1
 80097d8:	00ab      	lsls	r3, r5, #2
 80097da:	3304      	adds	r3, #4
 80097dc:	4418      	add	r0, r3
 80097de:	edd0 7a00 	vldr	s15, [r0]
 80097e2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80097e6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80097ea:	440b      	add	r3, r1
 80097ec:	eec0 6a07 	vdiv.f32	s13, s0, s14
 80097f0:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80097f4:	bcf0      	pop	{r4, r5, r6, r7}
 80097f6:	ed91 0a00 	vldr	s0, [r1]
 80097fa:	edd3 7a00 	vldr	s15, [r3]
 80097fe:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009802:	eea6 0aa7 	vfma.f32	s0, s13, s15
 8009806:	4770      	bx	lr
 8009808:	ed91 0a0c 	vldr	s0, [r1, #48]	; 0x30
 800980c:	4770      	bx	lr
 800980e:	ed91 0a00 	vldr	s0, [r1]
 8009812:	4770      	bx	lr
 8009814:	eeb0 7a67 	vmov.f32	s14, s15
 8009818:	1c5e      	adds	r6, r3, #1
 800981a:	461d      	mov	r5, r3
 800981c:	e7d0      	b.n	80097c0 <m_interp1q_constrain+0x3c>
 800981e:	bf00      	nop

08009820 <m_rt_atan2f_snf>:
 8009820:	b508      	push	{r3, lr}
 8009822:	4b39      	ldr	r3, [pc, #228]	; (8009908 <m_rt_atan2f_snf+0xe8>)
 8009824:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8009828:	eeb4 0a67 	vcmp.f32	s0, s15
 800982c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009830:	ed2d 8b02 	vpush	{d8}
 8009834:	eeb0 8a40 	vmov.f32	s16, s0
 8009838:	d014      	beq.n	8009864 <m_rt_atan2f_snf+0x44>
 800983a:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 800983e:	eeb4 0a47 	vcmp.f32	s0, s14
 8009842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009846:	d00d      	beq.n	8009864 <m_rt_atan2f_snf+0x44>
 8009848:	eef5 0a40 	vcmp.f32	s1, #0.0
 800984c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009850:	d135      	bne.n	80098be <m_rt_atan2f_snf+0x9e>
 8009852:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800985a:	dc4d      	bgt.n	80098f8 <m_rt_atan2f_snf+0xd8>
 800985c:	d451      	bmi.n	8009902 <m_rt_atan2f_snf+0xe2>
 800985e:	eeb0 0a60 	vmov.f32	s0, s1
 8009862:	e01d      	b.n	80098a0 <m_rt_atan2f_snf+0x80>
 8009864:	eef4 0a67 	vcmp.f32	s1, s15
 8009868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800986c:	d11b      	bne.n	80098a6 <m_rt_atan2f_snf+0x86>
 800986e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009872:	eddf 7a26 	vldr	s15, [pc, #152]	; 800990c <m_rt_atan2f_snf+0xec>
 8009876:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009910 <m_rt_atan2f_snf+0xf0>
 800987a:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8009914 <m_rt_atan2f_snf+0xf4>
 800987e:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8009918 <m_rt_atan2f_snf+0xf8>
 8009882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009886:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800988a:	bfd8      	it	le
 800988c:	eef0 7a66 	vmovle.f32	s15, s13
 8009890:	bfc8      	it	gt
 8009892:	eeb0 0a47 	vmovgt.f32	s0, s14
 8009896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800989a:	bfd8      	it	le
 800989c:	eeb0 0a67 	vmovle.f32	s0, s15
 80098a0:	ecbd 8b02 	vpop	{d8}
 80098a4:	bd08      	pop	{r3, pc}
 80098a6:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 80098aa:	eef4 0a67 	vcmp.f32	s1, s15
 80098ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098b2:	d0dc      	beq.n	800986e <m_rt_atan2f_snf+0x4e>
 80098b4:	eef5 0a40 	vcmp.f32	s1, #0.0
 80098b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098bc:	d0c9      	beq.n	8009852 <m_rt_atan2f_snf+0x32>
 80098be:	ee10 0a90 	vmov	r0, s1
 80098c2:	f7f6 fde5 	bl	8000490 <__aeabi_f2d>
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	ee18 0a10 	vmov	r0, s16
 80098ce:	ec43 2b18 	vmov	d8, r2, r3
 80098d2:	f7f6 fddd 	bl	8000490 <__aeabi_f2d>
 80098d6:	eeb0 1a48 	vmov.f32	s2, s16
 80098da:	eef0 1a68 	vmov.f32	s3, s17
 80098de:	ec41 0b10 	vmov	d0, r0, r1
 80098e2:	f009 fc83 	bl	80131ec <atan2>
 80098e6:	ec51 0b10 	vmov	r0, r1, d0
 80098ea:	f7f7 f921 	bl	8000b30 <__aeabi_d2f>
 80098ee:	ecbd 8b02 	vpop	{d8}
 80098f2:	ee00 0a10 	vmov	s0, r0
 80098f6:	bd08      	pop	{r3, pc}
 80098f8:	ecbd 8b02 	vpop	{d8}
 80098fc:	ed9f 0a07 	vldr	s0, [pc, #28]	; 800991c <m_rt_atan2f_snf+0xfc>
 8009900:	bd08      	pop	{r3, pc}
 8009902:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8009920 <m_rt_atan2f_snf+0x100>
 8009906:	e7cb      	b.n	80098a0 <m_rt_atan2f_snf+0x80>
 8009908:	20001698 	.word	0x20001698
 800990c:	4016cbe4 	.word	0x4016cbe4
 8009910:	c016cbe4 	.word	0xc016cbe4
 8009914:	3f490fdb 	.word	0x3f490fdb
 8009918:	bf490fdb 	.word	0xbf490fdb
 800991c:	3fc90fdb 	.word	0x3fc90fdb
 8009920:	bfc90fdb 	.word	0xbfc90fdb

08009924 <output_update>:
 8009924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009928:	ed2d 8b0a 	vpush	{d8-d12}
 800992c:	edd0 6a00 	vldr	s13, [r0]
 8009930:	ed90 7a01 	vldr	s14, [r0, #4]
 8009934:	edd0 7a02 	vldr	s15, [r0, #8]
 8009938:	b08b      	sub	sp, #44	; 0x2c
 800993a:	eef1 6a66 	vneg.f32	s13, s13
 800993e:	f89d 9074 	ldrb.w	r9, [sp, #116]	; 0x74
 8009942:	edc0 6a00 	vstr	s13, [r0]
 8009946:	eeb1 7a47 	vneg.f32	s14, s14
 800994a:	eef1 7a67 	vneg.f32	s15, s15
 800994e:	460f      	mov	r7, r1
 8009950:	ed80 7a01 	vstr	s14, [r0, #4]
 8009954:	edc0 7a02 	vstr	s15, [r0, #8]
 8009958:	a901      	add	r1, sp, #4
 800995a:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800995e:	4604      	mov	r4, r0
 8009960:	4615      	mov	r5, r2
 8009962:	461e      	mov	r6, r3
 8009964:	f7fe ffd0 	bl	8008908 <m_q2dcm_eml>
 8009968:	f1b9 0f00 	cmp.w	r9, #0
 800996c:	f040 8088 	bne.w	8009a80 <output_update+0x15c>
 8009970:	9a08      	ldr	r2, [sp, #32]
 8009972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009974:	9907      	ldr	r1, [sp, #28]
 8009976:	6072      	str	r2, [r6, #4]
 8009978:	60b3      	str	r3, [r6, #8]
 800997a:	6031      	str	r1, [r6, #0]
 800997c:	ed94 0a03 	vldr	s0, [r4, #12]
 8009980:	ed94 aa00 	vldr	s20, [r4]
 8009984:	edd4 aa02 	vldr	s21, [r4, #8]
 8009988:	edd4 9a01 	vldr	s19, [r4, #4]
 800998c:	ee20 9a00 	vmul.f32	s18, s0, s0
 8009990:	ee2a 0a80 	vmul.f32	s0, s21, s0
 8009994:	eef0 0a49 	vmov.f32	s1, s18
 8009998:	eeea 0a0a 	vfma.f32	s1, s20, s20
 800999c:	eeaa 0a29 	vfma.f32	s0, s20, s19
 80099a0:	eee9 0ae9 	vfms.f32	s1, s19, s19
 80099a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80099a8:	eeea 0aea 	vfms.f32	s1, s21, s21
 80099ac:	f7ff ff38 	bl	8009820 <m_rt_atan2f_snf>
 80099b0:	ed85 0a00 	vstr	s0, [r5]
 80099b4:	ed94 7a01 	vldr	s14, [r4, #4]
 80099b8:	edd4 7a03 	vldr	s15, [r4, #12]
 80099bc:	ed94 6a00 	vldr	s12, [r4]
 80099c0:	edd4 6a02 	vldr	s13, [r4, #8]
 80099c4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80099c8:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80099cc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80099d0:	eef0 8a40 	vmov.f32	s17, s0
 80099d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80099d8:	eeb1 ba69 	vneg.f32	s22, s19
 80099dc:	ee17 0a90 	vmov	r0, s15
 80099e0:	f7f6 fd56 	bl	8000490 <__aeabi_f2d>
 80099e4:	ec41 0b10 	vmov	d0, r0, r1
 80099e8:	f009 fbcc 	bl	8013184 <asin>
 80099ec:	ec51 0b10 	vmov	r0, r1, d0
 80099f0:	f7f7 f89e 	bl	8000b30 <__aeabi_d2f>
 80099f4:	eef0 0a49 	vmov.f32	s1, s18
 80099f8:	6068      	str	r0, [r5, #4]
 80099fa:	edd4 6a03 	vldr	s13, [r4, #12]
 80099fe:	ed94 0a00 	vldr	s0, [r4]
 8009a02:	ed94 7a01 	vldr	s14, [r4, #4]
 8009a06:	edd4 7a02 	vldr	s15, [r4, #8]
 8009a0a:	eeea 0aaa 	vfma.f32	s1, s21, s21
 8009a0e:	ee20 0a26 	vmul.f32	s0, s0, s13
 8009a12:	eeea 0a4a 	vfms.f32	s1, s20, s20
 8009a16:	eea7 0a27 	vfma.f32	s0, s14, s15
 8009a1a:	eeeb 0a29 	vfma.f32	s1, s22, s19
 8009a1e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009a22:	ee08 0a10 	vmov	s16, r0
 8009a26:	f7ff fefb 	bl	8009820 <m_rt_atan2f_snf>
 8009a2a:	eddf 7a7d 	vldr	s15, [pc, #500]	; 8009c20 <output_update+0x2fc>
 8009a2e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8009a32:	ee28 8a27 	vmul.f32	s16, s16, s15
 8009a36:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009a3a:	edc5 8a00 	vstr	s17, [r5]
 8009a3e:	ed85 8a01 	vstr	s16, [r5, #4]
 8009a42:	ed85 0a02 	vstr	s0, [r5, #8]
 8009a46:	ed97 7a00 	vldr	s14, [r7]
 8009a4a:	edd6 7a00 	vldr	s15, [r6]
 8009a4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009a52:	edc8 7a00 	vstr	s15, [r8]
 8009a56:	ed97 7a01 	vldr	s14, [r7, #4]
 8009a5a:	edd6 7a01 	vldr	s15, [r6, #4]
 8009a5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009a62:	edc8 7a01 	vstr	s15, [r8, #4]
 8009a66:	edd6 7a02 	vldr	s15, [r6, #8]
 8009a6a:	ed97 7a02 	vldr	s14, [r7, #8]
 8009a6e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009a72:	edc8 7a02 	vstr	s15, [r8, #8]
 8009a76:	b00b      	add	sp, #44	; 0x2c
 8009a78:	ecbd 8b0a 	vpop	{d8-d12}
 8009a7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a80:	f1b9 0f01 	cmp.w	r9, #1
 8009a84:	d018      	beq.n	8009ab8 <output_update+0x194>
 8009a86:	ed9f 6a66 	vldr	s12, [pc, #408]	; 8009c20 <output_update+0x2fc>
 8009a8a:	edd5 6a00 	vldr	s13, [r5]
 8009a8e:	ed95 7a01 	vldr	s14, [r5, #4]
 8009a92:	edd5 7a02 	vldr	s15, [r5, #8]
 8009a96:	ee66 6a86 	vmul.f32	s13, s13, s12
 8009a9a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009a9e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8009aa2:	edc5 6a00 	vstr	s13, [r5]
 8009aa6:	ed85 7a01 	vstr	s14, [r5, #4]
 8009aaa:	edc5 7a02 	vstr	s15, [r5, #8]
 8009aae:	b00b      	add	sp, #44	; 0x2c
 8009ab0:	ecbd 8b0a 	vpop	{d8-d12}
 8009ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ab8:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8009abc:	9a08      	ldr	r2, [sp, #32]
 8009abe:	9b07      	ldr	r3, [sp, #28]
 8009ac0:	6032      	str	r2, [r6, #0]
 8009ac2:	eef1 7a67 	vneg.f32	s15, s15
 8009ac6:	6073      	str	r3, [r6, #4]
 8009ac8:	edc6 7a02 	vstr	s15, [r6, #8]
 8009acc:	edd4 7a02 	vldr	s15, [r4, #8]
 8009ad0:	edd4 8a00 	vldr	s17, [r4]
 8009ad4:	ed94 9a01 	vldr	s18, [r4, #4]
 8009ad8:	ed94 8a03 	vldr	s16, [r4, #12]
 8009adc:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009ae0:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8009ae4:	eea8 7aa8 	vfma.f32	s14, s17, s17
 8009ae8:	eef0 ca00 	vmov.f32	s25, #0	; 0x40000000  2.0
 8009aec:	eef0 6a4c 	vmov.f32	s13, s24
 8009af0:	eee7 6a6c 	vfms.f32	s13, s14, s25
 8009af4:	ee68 9a89 	vmul.f32	s19, s17, s18
 8009af8:	ee16 0a90 	vmov	r0, s13
 8009afc:	eee7 9ac8 	vfms.f32	s19, s15, s16
 8009b00:	eef1 aa67 	vneg.f32	s21, s15
 8009b04:	f7f6 fcc4 	bl	8000490 <__aeabi_f2d>
 8009b08:	ee79 7aa9 	vadd.f32	s15, s19, s19
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	460b      	mov	r3, r1
 8009b10:	ee17 0a90 	vmov	r0, s15
 8009b14:	ec43 2b1b 	vmov	d11, r2, r3
 8009b18:	f7f6 fcba 	bl	8000490 <__aeabi_f2d>
 8009b1c:	eeb0 1a4b 	vmov.f32	s2, s22
 8009b20:	eef0 1a6b 	vmov.f32	s3, s23
 8009b24:	ee69 9a09 	vmul.f32	s19, s18, s18
 8009b28:	ec41 0b10 	vmov	d0, r0, r1
 8009b2c:	eee8 9aa8 	vfma.f32	s19, s17, s17
 8009b30:	f009 fb5c 	bl	80131ec <atan2>
 8009b34:	eea9 caec 	vfms.f32	s24, s19, s25
 8009b38:	ec51 0b10 	vmov	r0, r1, d0
 8009b3c:	ee29 aa08 	vmul.f32	s20, s18, s16
 8009b40:	f7f6 fff6 	bl	8000b30 <__aeabi_d2f>
 8009b44:	eea8 aaaa 	vfma.f32	s20, s17, s21
 8009b48:	4603      	mov	r3, r0
 8009b4a:	ee1c 0a10 	vmov	r0, s24
 8009b4e:	ee09 3a90 	vmov	s19, r3
 8009b52:	f7f6 fc9d 	bl	8000490 <__aeabi_f2d>
 8009b56:	ee7a 7a0a 	vadd.f32	s15, s20, s20
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	ee17 0a90 	vmov	r0, s15
 8009b62:	ec43 2b1b 	vmov	d11, r2, r3
 8009b66:	f7f6 fc93 	bl	8000490 <__aeabi_f2d>
 8009b6a:	eeb0 1a4b 	vmov.f32	s2, s22
 8009b6e:	eef0 1a6b 	vmov.f32	s3, s23
 8009b72:	ec41 0b10 	vmov	d0, r0, r1
 8009b76:	f009 fb39 	bl	80131ec <atan2>
 8009b7a:	ee28 8a68 	vnmul.f32	s16, s16, s17
 8009b7e:	ec51 0b10 	vmov	r0, r1, d0
 8009b82:	f7f6 ffd5 	bl	8000b30 <__aeabi_d2f>
 8009b86:	eeaa 8a89 	vfma.f32	s16, s21, s18
 8009b8a:	ee07 0a90 	vmov	s15, r0
 8009b8e:	eef1 8a67 	vneg.f32	s17, s15
 8009b92:	ee78 7a08 	vadd.f32	s15, s16, s16
 8009b96:	eeb1 9a69 	vneg.f32	s18, s19
 8009b9a:	ee17 0a90 	vmov	r0, s15
 8009b9e:	f7f6 fc77 	bl	8000490 <__aeabi_f2d>
 8009ba2:	ec41 0b10 	vmov	d0, r0, r1
 8009ba6:	f009 faed 	bl	8013184 <asin>
 8009baa:	ec51 0b10 	vmov	r0, r1, d0
 8009bae:	f7f6 ffbf 	bl	8000b30 <__aeabi_d2f>
 8009bb2:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 8009bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bba:	bfc8      	it	gt
 8009bbc:	ed9f 9a19 	vldrgt	s18, [pc, #100]	; 8009c24 <output_update+0x300>
 8009bc0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8009c20 <output_update+0x2fc>
 8009bc4:	ee07 0a90 	vmov	s15, r0
 8009bc8:	bfc8      	it	gt
 8009bca:	ee39 9a69 	vsubgt.f32	s18, s18, s19
 8009bce:	ee68 8a87 	vmul.f32	s17, s17, s14
 8009bd2:	ee29 9a07 	vmul.f32	s18, s18, s14
 8009bd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009bda:	ed85 9a00 	vstr	s18, [r5]
 8009bde:	edc5 8a01 	vstr	s17, [r5, #4]
 8009be2:	edc5 7a02 	vstr	s15, [r5, #8]
 8009be6:	ed97 7a01 	vldr	s14, [r7, #4]
 8009bea:	edd6 7a00 	vldr	s15, [r6]
 8009bee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009bf2:	edc8 7a00 	vstr	s15, [r8]
 8009bf6:	ed97 7a00 	vldr	s14, [r7]
 8009bfa:	edd6 7a01 	vldr	s15, [r6, #4]
 8009bfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c02:	edc8 7a01 	vstr	s15, [r8, #4]
 8009c06:	edd6 7a02 	vldr	s15, [r6, #8]
 8009c0a:	ed97 7a02 	vldr	s14, [r7, #8]
 8009c0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009c12:	edc8 7a02 	vstr	s15, [r8, #8]
 8009c16:	b00b      	add	sp, #44	; 0x2c
 8009c18:	ecbd 8b0a 	vpop	{d8-d12}
 8009c1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c20:	42652ee1 	.word	0x42652ee1
 8009c24:	40c90e56 	.word	0x40c90e56

08009c28 <iNemo_setOrientation.constprop.0>:
 8009c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c2c:	4a70      	ldr	r2, [pc, #448]	; (8009df0 <iNemo_setOrientation.constprop.0+0x1c8>)
 8009c2e:	4b71      	ldr	r3, [pc, #452]	; (8009df4 <iNemo_setOrientation.constprop.0+0x1cc>)
 8009c30:	f892 e000 	ldrb.w	lr, [r2]
 8009c34:	7915      	ldrb	r5, [r2, #4]
 8009c36:	7857      	ldrb	r7, [r2, #1]
 8009c38:	7954      	ldrb	r4, [r2, #5]
 8009c3a:	f892 c009 	ldrb.w	ip, [r2, #9]
 8009c3e:	f1ae 0642 	sub.w	r6, lr, #66	; 0x42
 8009c42:	2100      	movs	r1, #0
 8009c44:	2e17      	cmp	r6, #23
 8009c46:	bf98      	it	ls
 8009c48:	f10e 0e20 	addls.w	lr, lr, #32
 8009c4c:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
 8009c50:	f883 10ac 	strb.w	r1, [r3, #172]	; 0xac
 8009c54:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
 8009c58:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
 8009c5c:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
 8009c60:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 8009c64:	f883 10b8 	strb.w	r1, [r3, #184]	; 0xb8
 8009c68:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
 8009c6c:	f883 10c4 	strb.w	r1, [r3, #196]	; 0xc4
 8009c70:	f1a5 0142 	sub.w	r1, r5, #66	; 0x42
 8009c74:	bf98      	it	ls
 8009c76:	fa5f fe8e 	uxtbls.w	lr, lr
 8009c7a:	2917      	cmp	r1, #23
 8009c7c:	7a11      	ldrb	r1, [r2, #8]
 8009c7e:	7896      	ldrb	r6, [r2, #2]
 8009c80:	f1a1 0042 	sub.w	r0, r1, #66	; 0x42
 8009c84:	bf9c      	itt	ls
 8009c86:	3520      	addls	r5, #32
 8009c88:	b2ed      	uxtbls	r5, r5
 8009c8a:	2817      	cmp	r0, #23
 8009c8c:	bf98      	it	ls
 8009c8e:	3120      	addls	r1, #32
 8009c90:	f1a7 0042 	sub.w	r0, r7, #66	; 0x42
 8009c94:	bf98      	it	ls
 8009c96:	b2c9      	uxtbls	r1, r1
 8009c98:	2817      	cmp	r0, #23
 8009c9a:	bf98      	it	ls
 8009c9c:	3720      	addls	r7, #32
 8009c9e:	f1a4 0042 	sub.w	r0, r4, #66	; 0x42
 8009ca2:	bf98      	it	ls
 8009ca4:	b2ff      	uxtbls	r7, r7
 8009ca6:	2817      	cmp	r0, #23
 8009ca8:	bf98      	it	ls
 8009caa:	3420      	addls	r4, #32
 8009cac:	f1ac 0042 	sub.w	r0, ip, #66	; 0x42
 8009cb0:	bf98      	it	ls
 8009cb2:	b2e4      	uxtbls	r4, r4
 8009cb4:	2817      	cmp	r0, #23
 8009cb6:	bf98      	it	ls
 8009cb8:	f10c 0c20 	addls.w	ip, ip, #32
 8009cbc:	f1a6 0042 	sub.w	r0, r6, #66	; 0x42
 8009cc0:	bf98      	it	ls
 8009cc2:	fa5f fc8c 	uxtbls.w	ip, ip
 8009cc6:	2817      	cmp	r0, #23
 8009cc8:	7990      	ldrb	r0, [r2, #6]
 8009cca:	7a92      	ldrb	r2, [r2, #10]
 8009ccc:	f1a0 0842 	sub.w	r8, r0, #66	; 0x42
 8009cd0:	bf9c      	itt	ls
 8009cd2:	3620      	addls	r6, #32
 8009cd4:	b2f6      	uxtbls	r6, r6
 8009cd6:	f1b8 0f17 	cmp.w	r8, #23
 8009cda:	bf98      	it	ls
 8009cdc:	3020      	addls	r0, #32
 8009cde:	f1a2 0842 	sub.w	r8, r2, #66	; 0x42
 8009ce2:	bf98      	it	ls
 8009ce4:	b2c0      	uxtbls	r0, r0
 8009ce6:	f1b8 0f17 	cmp.w	r8, #23
 8009cea:	bf98      	it	ls
 8009cec:	3220      	addls	r2, #32
 8009cee:	f1ae 0e64 	sub.w	lr, lr, #100	; 0x64
 8009cf2:	bf98      	it	ls
 8009cf4:	b2d2      	uxtbls	r2, r2
 8009cf6:	f1be 0f13 	cmp.w	lr, #19
 8009cfa:	d80f      	bhi.n	8009d1c <iNemo_setOrientation.constprop.0+0xf4>
 8009cfc:	e8df f00e 	tbb	[pc, lr]
 8009d00:	0e0eac0a 	.word	0x0e0eac0a
 8009d04:	0e0e0e0e 	.word	0x0e0e0e0e
 8009d08:	0eb10e0e 	.word	0x0eb10e0e
 8009d0c:	b60e0e0e 	.word	0xb60e0e0e
 8009d10:	c00ebb0e 	.word	0xc00ebb0e
 8009d14:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8009d18:	f883 e0aa 	strb.w	lr, [r3, #170]	; 0xaa
 8009d1c:	3f64      	subs	r7, #100	; 0x64
 8009d1e:	2f13      	cmp	r7, #19
 8009d20:	d80e      	bhi.n	8009d40 <iNemo_setOrientation.constprop.0+0x118>
 8009d22:	e8df f007 	tbb	[pc, r7]
 8009d26:	b20a      	.short	0xb20a
 8009d28:	0d0d0d0d 	.word	0x0d0d0d0d
 8009d2c:	0d0d0d0d 	.word	0x0d0d0d0d
 8009d30:	0d0d0db6 	.word	0x0d0d0db6
 8009d34:	be0dba0d 	.word	0xbe0dba0d
 8009d38:	c20d      	.short	0xc20d
 8009d3a:	27ff      	movs	r7, #255	; 0xff
 8009d3c:	f883 70ab 	strb.w	r7, [r3, #171]	; 0xab
 8009d40:	3e64      	subs	r6, #100	; 0x64
 8009d42:	2e13      	cmp	r6, #19
 8009d44:	d80e      	bhi.n	8009d64 <iNemo_setOrientation.constprop.0+0x13c>
 8009d46:	e8df f006 	tbb	[pc, r6]
 8009d4a:	b40a      	.short	0xb40a
 8009d4c:	0d0d0d0d 	.word	0x0d0d0d0d
 8009d50:	0d0d0d0d 	.word	0x0d0d0d0d
 8009d54:	0d0d0db8 	.word	0x0d0d0db8
 8009d58:	c00dbc0d 	.word	0xc00dbc0d
 8009d5c:	c40d      	.short	0xc40d
 8009d5e:	26ff      	movs	r6, #255	; 0xff
 8009d60:	f883 60ac 	strb.w	r6, [r3, #172]	; 0xac
 8009d64:	3d64      	subs	r5, #100	; 0x64
 8009d66:	2d13      	cmp	r5, #19
 8009d68:	d80e      	bhi.n	8009d88 <iNemo_setOrientation.constprop.0+0x160>
 8009d6a:	e8df f005 	tbb	[pc, r5]
 8009d6e:	b60a      	.short	0xb60a
 8009d70:	0d0d0d0d 	.word	0x0d0d0d0d
 8009d74:	0d0d0d0d 	.word	0x0d0d0d0d
 8009d78:	0d0d0dba 	.word	0x0d0d0dba
 8009d7c:	c20dbe0d 	.word	0xc20dbe0d
 8009d80:	c60d      	.short	0xc60d
 8009d82:	25ff      	movs	r5, #255	; 0xff
 8009d84:	f883 50c2 	strb.w	r5, [r3, #194]	; 0xc2
 8009d88:	3c64      	subs	r4, #100	; 0x64
 8009d8a:	2c13      	cmp	r4, #19
 8009d8c:	d80e      	bhi.n	8009dac <iNemo_setOrientation.constprop.0+0x184>
 8009d8e:	e8df f004 	tbb	[pc, r4]
 8009d92:	b80a      	.short	0xb80a
 8009d94:	0d0d0d0d 	.word	0x0d0d0d0d
 8009d98:	0d0d0d0d 	.word	0x0d0d0d0d
 8009d9c:	0d0d0dbc 	.word	0x0d0d0dbc
 8009da0:	c40dc00d 	.word	0xc40dc00d
 8009da4:	c80d      	.short	0xc80d
 8009da6:	24ff      	movs	r4, #255	; 0xff
 8009da8:	f883 40c3 	strb.w	r4, [r3, #195]	; 0xc3
 8009dac:	3864      	subs	r0, #100	; 0x64
 8009dae:	2813      	cmp	r0, #19
 8009db0:	d80e      	bhi.n	8009dd0 <iNemo_setOrientation.constprop.0+0x1a8>
 8009db2:	e8df f000 	tbb	[pc, r0]
 8009db6:	ba0a      	.short	0xba0a
 8009db8:	0d0d0d0d 	.word	0x0d0d0d0d
 8009dbc:	0d0d0d0d 	.word	0x0d0d0d0d
 8009dc0:	0d0d0dbe 	.word	0x0d0d0dbe
 8009dc4:	c60dc20d 	.word	0xc60dc20d
 8009dc8:	ca0d      	.short	0xca0d
 8009dca:	20ff      	movs	r0, #255	; 0xff
 8009dcc:	f883 00c4 	strb.w	r0, [r3, #196]	; 0xc4
 8009dd0:	3964      	subs	r1, #100	; 0x64
 8009dd2:	2913      	cmp	r1, #19
 8009dd4:	d813      	bhi.n	8009dfe <iNemo_setOrientation.constprop.0+0x1d6>
 8009dd6:	e8df f001 	tbb	[pc, r1]
 8009dda:	bc0f      	.short	0xbc0f
 8009ddc:	12121212 	.word	0x12121212
 8009de0:	12121212 	.word	0x12121212
 8009de4:	121212c0 	.word	0x121212c0
 8009de8:	c812c412 	.word	0xc812c412
 8009dec:	cc12      	.short	0xcc12
 8009dee:	bf00      	nop
 8009df0:	20000000 	.word	0x20000000
 8009df4:	20001698 	.word	0x20001698
 8009df8:	21ff      	movs	r1, #255	; 0xff
 8009dfa:	f883 10b6 	strb.w	r1, [r3, #182]	; 0xb6
 8009dfe:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 8009e02:	f1bc 0f13 	cmp.w	ip, #19
 8009e06:	d80e      	bhi.n	8009e26 <iNemo_setOrientation.constprop.0+0x1fe>
 8009e08:	e8df f00c 	tbb	[pc, ip]
 8009e0c:	0d0db70a 	.word	0x0d0db70a
 8009e10:	0d0d0d0d 	.word	0x0d0d0d0d
 8009e14:	0dbb0d0d 	.word	0x0dbb0d0d
 8009e18:	bf0d0d0d 	.word	0xbf0d0d0d
 8009e1c:	c70dc30d 	.word	0xc70dc30d
 8009e20:	21ff      	movs	r1, #255	; 0xff
 8009e22:	f883 10b7 	strb.w	r1, [r3, #183]	; 0xb7
 8009e26:	3a64      	subs	r2, #100	; 0x64
 8009e28:	2a13      	cmp	r2, #19
 8009e2a:	d80e      	bhi.n	8009e4a <iNemo_setOrientation.constprop.0+0x222>
 8009e2c:	e8df f002 	tbb	[pc, r2]
 8009e30:	0d0db90a 	.word	0x0d0db90a
 8009e34:	0d0d0d0d 	.word	0x0d0d0d0d
 8009e38:	0dbe0d0d 	.word	0x0dbe0d0d
 8009e3c:	c30d0d0d 	.word	0xc30d0d0d
 8009e40:	0f0dc80d 	.word	0x0f0dc80d
 8009e44:	22ff      	movs	r2, #255	; 0xff
 8009e46:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8009e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e4e:	22ff      	movs	r2, #255	; 0xff
 8009e50:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8009e54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e58:	f04f 0e01 	mov.w	lr, #1
 8009e5c:	f883 e0a4 	strb.w	lr, [r3, #164]	; 0xa4
 8009e60:	e75c      	b.n	8009d1c <iNemo_setOrientation.constprop.0+0xf4>
 8009e62:	f04f 0e01 	mov.w	lr, #1
 8009e66:	f883 e0a7 	strb.w	lr, [r3, #167]	; 0xa7
 8009e6a:	e757      	b.n	8009d1c <iNemo_setOrientation.constprop.0+0xf4>
 8009e6c:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8009e70:	f883 e0a7 	strb.w	lr, [r3, #167]	; 0xa7
 8009e74:	e752      	b.n	8009d1c <iNemo_setOrientation.constprop.0+0xf4>
 8009e76:	f04f 0e01 	mov.w	lr, #1
 8009e7a:	f883 e0aa 	strb.w	lr, [r3, #170]	; 0xaa
 8009e7e:	e74d      	b.n	8009d1c <iNemo_setOrientation.constprop.0+0xf4>
 8009e80:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8009e84:	f883 e0a4 	strb.w	lr, [r3, #164]	; 0xa4
 8009e88:	e748      	b.n	8009d1c <iNemo_setOrientation.constprop.0+0xf4>
 8009e8a:	2701      	movs	r7, #1
 8009e8c:	f883 70a5 	strb.w	r7, [r3, #165]	; 0xa5
 8009e90:	e756      	b.n	8009d40 <iNemo_setOrientation.constprop.0+0x118>
 8009e92:	2701      	movs	r7, #1
 8009e94:	f883 70a8 	strb.w	r7, [r3, #168]	; 0xa8
 8009e98:	e752      	b.n	8009d40 <iNemo_setOrientation.constprop.0+0x118>
 8009e9a:	27ff      	movs	r7, #255	; 0xff
 8009e9c:	f883 70a8 	strb.w	r7, [r3, #168]	; 0xa8
 8009ea0:	e74e      	b.n	8009d40 <iNemo_setOrientation.constprop.0+0x118>
 8009ea2:	2701      	movs	r7, #1
 8009ea4:	f883 70ab 	strb.w	r7, [r3, #171]	; 0xab
 8009ea8:	e74a      	b.n	8009d40 <iNemo_setOrientation.constprop.0+0x118>
 8009eaa:	27ff      	movs	r7, #255	; 0xff
 8009eac:	f883 70a5 	strb.w	r7, [r3, #165]	; 0xa5
 8009eb0:	e746      	b.n	8009d40 <iNemo_setOrientation.constprop.0+0x118>
 8009eb2:	2601      	movs	r6, #1
 8009eb4:	f883 60a6 	strb.w	r6, [r3, #166]	; 0xa6
 8009eb8:	e754      	b.n	8009d64 <iNemo_setOrientation.constprop.0+0x13c>
 8009eba:	2601      	movs	r6, #1
 8009ebc:	f883 60a9 	strb.w	r6, [r3, #169]	; 0xa9
 8009ec0:	e750      	b.n	8009d64 <iNemo_setOrientation.constprop.0+0x13c>
 8009ec2:	26ff      	movs	r6, #255	; 0xff
 8009ec4:	f883 60a9 	strb.w	r6, [r3, #169]	; 0xa9
 8009ec8:	e74c      	b.n	8009d64 <iNemo_setOrientation.constprop.0+0x13c>
 8009eca:	2601      	movs	r6, #1
 8009ecc:	f883 60ac 	strb.w	r6, [r3, #172]	; 0xac
 8009ed0:	e748      	b.n	8009d64 <iNemo_setOrientation.constprop.0+0x13c>
 8009ed2:	26ff      	movs	r6, #255	; 0xff
 8009ed4:	f883 60a6 	strb.w	r6, [r3, #166]	; 0xa6
 8009ed8:	e744      	b.n	8009d64 <iNemo_setOrientation.constprop.0+0x13c>
 8009eda:	2501      	movs	r5, #1
 8009edc:	f883 50bc 	strb.w	r5, [r3, #188]	; 0xbc
 8009ee0:	e752      	b.n	8009d88 <iNemo_setOrientation.constprop.0+0x160>
 8009ee2:	2501      	movs	r5, #1
 8009ee4:	f883 50bf 	strb.w	r5, [r3, #191]	; 0xbf
 8009ee8:	e74e      	b.n	8009d88 <iNemo_setOrientation.constprop.0+0x160>
 8009eea:	25ff      	movs	r5, #255	; 0xff
 8009eec:	f883 50bf 	strb.w	r5, [r3, #191]	; 0xbf
 8009ef0:	e74a      	b.n	8009d88 <iNemo_setOrientation.constprop.0+0x160>
 8009ef2:	2501      	movs	r5, #1
 8009ef4:	f883 50c2 	strb.w	r5, [r3, #194]	; 0xc2
 8009ef8:	e746      	b.n	8009d88 <iNemo_setOrientation.constprop.0+0x160>
 8009efa:	25ff      	movs	r5, #255	; 0xff
 8009efc:	f883 50bc 	strb.w	r5, [r3, #188]	; 0xbc
 8009f00:	e742      	b.n	8009d88 <iNemo_setOrientation.constprop.0+0x160>
 8009f02:	2401      	movs	r4, #1
 8009f04:	f883 40bd 	strb.w	r4, [r3, #189]	; 0xbd
 8009f08:	e750      	b.n	8009dac <iNemo_setOrientation.constprop.0+0x184>
 8009f0a:	2401      	movs	r4, #1
 8009f0c:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
 8009f10:	e74c      	b.n	8009dac <iNemo_setOrientation.constprop.0+0x184>
 8009f12:	24ff      	movs	r4, #255	; 0xff
 8009f14:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
 8009f18:	e748      	b.n	8009dac <iNemo_setOrientation.constprop.0+0x184>
 8009f1a:	2401      	movs	r4, #1
 8009f1c:	f883 40c3 	strb.w	r4, [r3, #195]	; 0xc3
 8009f20:	e744      	b.n	8009dac <iNemo_setOrientation.constprop.0+0x184>
 8009f22:	24ff      	movs	r4, #255	; 0xff
 8009f24:	f883 40bd 	strb.w	r4, [r3, #189]	; 0xbd
 8009f28:	e740      	b.n	8009dac <iNemo_setOrientation.constprop.0+0x184>
 8009f2a:	2001      	movs	r0, #1
 8009f2c:	f883 00be 	strb.w	r0, [r3, #190]	; 0xbe
 8009f30:	e74e      	b.n	8009dd0 <iNemo_setOrientation.constprop.0+0x1a8>
 8009f32:	2001      	movs	r0, #1
 8009f34:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
 8009f38:	e74a      	b.n	8009dd0 <iNemo_setOrientation.constprop.0+0x1a8>
 8009f3a:	20ff      	movs	r0, #255	; 0xff
 8009f3c:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
 8009f40:	e746      	b.n	8009dd0 <iNemo_setOrientation.constprop.0+0x1a8>
 8009f42:	2001      	movs	r0, #1
 8009f44:	f883 00c4 	strb.w	r0, [r3, #196]	; 0xc4
 8009f48:	e742      	b.n	8009dd0 <iNemo_setOrientation.constprop.0+0x1a8>
 8009f4a:	20ff      	movs	r0, #255	; 0xff
 8009f4c:	f883 00be 	strb.w	r0, [r3, #190]	; 0xbe
 8009f50:	e73e      	b.n	8009dd0 <iNemo_setOrientation.constprop.0+0x1a8>
 8009f52:	2101      	movs	r1, #1
 8009f54:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
 8009f58:	e751      	b.n	8009dfe <iNemo_setOrientation.constprop.0+0x1d6>
 8009f5a:	2101      	movs	r1, #1
 8009f5c:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
 8009f60:	e74d      	b.n	8009dfe <iNemo_setOrientation.constprop.0+0x1d6>
 8009f62:	21ff      	movs	r1, #255	; 0xff
 8009f64:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
 8009f68:	e749      	b.n	8009dfe <iNemo_setOrientation.constprop.0+0x1d6>
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	f883 10b6 	strb.w	r1, [r3, #182]	; 0xb6
 8009f70:	e745      	b.n	8009dfe <iNemo_setOrientation.constprop.0+0x1d6>
 8009f72:	21ff      	movs	r1, #255	; 0xff
 8009f74:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
 8009f78:	e741      	b.n	8009dfe <iNemo_setOrientation.constprop.0+0x1d6>
 8009f7a:	2101      	movs	r1, #1
 8009f7c:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
 8009f80:	e751      	b.n	8009e26 <iNemo_setOrientation.constprop.0+0x1fe>
 8009f82:	2101      	movs	r1, #1
 8009f84:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
 8009f88:	e74d      	b.n	8009e26 <iNemo_setOrientation.constprop.0+0x1fe>
 8009f8a:	21ff      	movs	r1, #255	; 0xff
 8009f8c:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
 8009f90:	e749      	b.n	8009e26 <iNemo_setOrientation.constprop.0+0x1fe>
 8009f92:	2101      	movs	r1, #1
 8009f94:	f883 10b7 	strb.w	r1, [r3, #183]	; 0xb7
 8009f98:	e745      	b.n	8009e26 <iNemo_setOrientation.constprop.0+0x1fe>
 8009f9a:	21ff      	movs	r1, #255	; 0xff
 8009f9c:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
 8009fa0:	e741      	b.n	8009e26 <iNemo_setOrientation.constprop.0+0x1fe>
 8009fa2:	2201      	movs	r2, #1
 8009fa4:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8009fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fac:	2201      	movs	r2, #1
 8009fae:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 8009fb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fb6:	22ff      	movs	r2, #255	; 0xff
 8009fb8:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 8009fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8009fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fca:	bf00      	nop

08009fcc <iNemo_setOrientation_6X.constprop.0>:
 8009fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd0:	4a70      	ldr	r2, [pc, #448]	; (800a194 <iNemo_setOrientation_6X.constprop.0+0x1c8>)
 8009fd2:	4b71      	ldr	r3, [pc, #452]	; (800a198 <iNemo_setOrientation_6X.constprop.0+0x1cc>)
 8009fd4:	f892 e000 	ldrb.w	lr, [r2]
 8009fd8:	7915      	ldrb	r5, [r2, #4]
 8009fda:	7857      	ldrb	r7, [r2, #1]
 8009fdc:	7954      	ldrb	r4, [r2, #5]
 8009fde:	f892 c009 	ldrb.w	ip, [r2, #9]
 8009fe2:	f1ae 0642 	sub.w	r6, lr, #66	; 0x42
 8009fe6:	2100      	movs	r1, #0
 8009fe8:	2e17      	cmp	r6, #23
 8009fea:	bf98      	it	ls
 8009fec:	f10e 0e20 	addls.w	lr, lr, #32
 8009ff0:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
 8009ff4:	f883 10d0 	strb.w	r1, [r3, #208]	; 0xd0
 8009ff8:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 8009ffc:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
 800a000:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 800a004:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
 800a008:	f883 10dc 	strb.w	r1, [r3, #220]	; 0xdc
 800a00c:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
 800a010:	f883 10e8 	strb.w	r1, [r3, #232]	; 0xe8
 800a014:	f1a5 0142 	sub.w	r1, r5, #66	; 0x42
 800a018:	bf98      	it	ls
 800a01a:	fa5f fe8e 	uxtbls.w	lr, lr
 800a01e:	2917      	cmp	r1, #23
 800a020:	7a11      	ldrb	r1, [r2, #8]
 800a022:	7896      	ldrb	r6, [r2, #2]
 800a024:	f1a1 0042 	sub.w	r0, r1, #66	; 0x42
 800a028:	bf9c      	itt	ls
 800a02a:	3520      	addls	r5, #32
 800a02c:	b2ed      	uxtbls	r5, r5
 800a02e:	2817      	cmp	r0, #23
 800a030:	bf98      	it	ls
 800a032:	3120      	addls	r1, #32
 800a034:	f1a7 0042 	sub.w	r0, r7, #66	; 0x42
 800a038:	bf98      	it	ls
 800a03a:	b2c9      	uxtbls	r1, r1
 800a03c:	2817      	cmp	r0, #23
 800a03e:	bf98      	it	ls
 800a040:	3720      	addls	r7, #32
 800a042:	f1a4 0042 	sub.w	r0, r4, #66	; 0x42
 800a046:	bf98      	it	ls
 800a048:	b2ff      	uxtbls	r7, r7
 800a04a:	2817      	cmp	r0, #23
 800a04c:	bf98      	it	ls
 800a04e:	3420      	addls	r4, #32
 800a050:	f1ac 0042 	sub.w	r0, ip, #66	; 0x42
 800a054:	bf98      	it	ls
 800a056:	b2e4      	uxtbls	r4, r4
 800a058:	2817      	cmp	r0, #23
 800a05a:	bf98      	it	ls
 800a05c:	f10c 0c20 	addls.w	ip, ip, #32
 800a060:	f1a6 0042 	sub.w	r0, r6, #66	; 0x42
 800a064:	bf98      	it	ls
 800a066:	fa5f fc8c 	uxtbls.w	ip, ip
 800a06a:	2817      	cmp	r0, #23
 800a06c:	7990      	ldrb	r0, [r2, #6]
 800a06e:	7a92      	ldrb	r2, [r2, #10]
 800a070:	f1a0 0842 	sub.w	r8, r0, #66	; 0x42
 800a074:	bf9c      	itt	ls
 800a076:	3620      	addls	r6, #32
 800a078:	b2f6      	uxtbls	r6, r6
 800a07a:	f1b8 0f17 	cmp.w	r8, #23
 800a07e:	bf98      	it	ls
 800a080:	3020      	addls	r0, #32
 800a082:	f1a2 0842 	sub.w	r8, r2, #66	; 0x42
 800a086:	bf98      	it	ls
 800a088:	b2c0      	uxtbls	r0, r0
 800a08a:	f1b8 0f17 	cmp.w	r8, #23
 800a08e:	bf98      	it	ls
 800a090:	3220      	addls	r2, #32
 800a092:	f1ae 0e64 	sub.w	lr, lr, #100	; 0x64
 800a096:	bf98      	it	ls
 800a098:	b2d2      	uxtbls	r2, r2
 800a09a:	f1be 0f13 	cmp.w	lr, #19
 800a09e:	d80f      	bhi.n	800a0c0 <iNemo_setOrientation_6X.constprop.0+0xf4>
 800a0a0:	e8df f00e 	tbb	[pc, lr]
 800a0a4:	0e0eac0a 	.word	0x0e0eac0a
 800a0a8:	0e0e0e0e 	.word	0x0e0e0e0e
 800a0ac:	0eb10e0e 	.word	0x0eb10e0e
 800a0b0:	b60e0e0e 	.word	0xb60e0e0e
 800a0b4:	c00ebb0e 	.word	0xc00ebb0e
 800a0b8:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800a0bc:	f883 e0ce 	strb.w	lr, [r3, #206]	; 0xce
 800a0c0:	3f64      	subs	r7, #100	; 0x64
 800a0c2:	2f13      	cmp	r7, #19
 800a0c4:	d80e      	bhi.n	800a0e4 <iNemo_setOrientation_6X.constprop.0+0x118>
 800a0c6:	e8df f007 	tbb	[pc, r7]
 800a0ca:	b20a      	.short	0xb20a
 800a0cc:	0d0d0d0d 	.word	0x0d0d0d0d
 800a0d0:	0d0d0d0d 	.word	0x0d0d0d0d
 800a0d4:	0d0d0db6 	.word	0x0d0d0db6
 800a0d8:	be0dba0d 	.word	0xbe0dba0d
 800a0dc:	c20d      	.short	0xc20d
 800a0de:	27ff      	movs	r7, #255	; 0xff
 800a0e0:	f883 70cf 	strb.w	r7, [r3, #207]	; 0xcf
 800a0e4:	3e64      	subs	r6, #100	; 0x64
 800a0e6:	2e13      	cmp	r6, #19
 800a0e8:	d80e      	bhi.n	800a108 <iNemo_setOrientation_6X.constprop.0+0x13c>
 800a0ea:	e8df f006 	tbb	[pc, r6]
 800a0ee:	b40a      	.short	0xb40a
 800a0f0:	0d0d0d0d 	.word	0x0d0d0d0d
 800a0f4:	0d0d0d0d 	.word	0x0d0d0d0d
 800a0f8:	0d0d0db8 	.word	0x0d0d0db8
 800a0fc:	c00dbc0d 	.word	0xc00dbc0d
 800a100:	c40d      	.short	0xc40d
 800a102:	26ff      	movs	r6, #255	; 0xff
 800a104:	f883 60d0 	strb.w	r6, [r3, #208]	; 0xd0
 800a108:	3d64      	subs	r5, #100	; 0x64
 800a10a:	2d13      	cmp	r5, #19
 800a10c:	d80e      	bhi.n	800a12c <iNemo_setOrientation_6X.constprop.0+0x160>
 800a10e:	e8df f005 	tbb	[pc, r5]
 800a112:	b60a      	.short	0xb60a
 800a114:	0d0d0d0d 	.word	0x0d0d0d0d
 800a118:	0d0d0d0d 	.word	0x0d0d0d0d
 800a11c:	0d0d0dba 	.word	0x0d0d0dba
 800a120:	c20dbe0d 	.word	0xc20dbe0d
 800a124:	c60d      	.short	0xc60d
 800a126:	25ff      	movs	r5, #255	; 0xff
 800a128:	f883 50e6 	strb.w	r5, [r3, #230]	; 0xe6
 800a12c:	3c64      	subs	r4, #100	; 0x64
 800a12e:	2c13      	cmp	r4, #19
 800a130:	d80e      	bhi.n	800a150 <iNemo_setOrientation_6X.constprop.0+0x184>
 800a132:	e8df f004 	tbb	[pc, r4]
 800a136:	b80a      	.short	0xb80a
 800a138:	0d0d0d0d 	.word	0x0d0d0d0d
 800a13c:	0d0d0d0d 	.word	0x0d0d0d0d
 800a140:	0d0d0dbc 	.word	0x0d0d0dbc
 800a144:	c40dc00d 	.word	0xc40dc00d
 800a148:	c80d      	.short	0xc80d
 800a14a:	24ff      	movs	r4, #255	; 0xff
 800a14c:	f883 40e7 	strb.w	r4, [r3, #231]	; 0xe7
 800a150:	3864      	subs	r0, #100	; 0x64
 800a152:	2813      	cmp	r0, #19
 800a154:	d80e      	bhi.n	800a174 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 800a156:	e8df f000 	tbb	[pc, r0]
 800a15a:	ba0a      	.short	0xba0a
 800a15c:	0d0d0d0d 	.word	0x0d0d0d0d
 800a160:	0d0d0d0d 	.word	0x0d0d0d0d
 800a164:	0d0d0dbe 	.word	0x0d0d0dbe
 800a168:	c60dc20d 	.word	0xc60dc20d
 800a16c:	ca0d      	.short	0xca0d
 800a16e:	20ff      	movs	r0, #255	; 0xff
 800a170:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
 800a174:	3964      	subs	r1, #100	; 0x64
 800a176:	2913      	cmp	r1, #19
 800a178:	d813      	bhi.n	800a1a2 <iNemo_setOrientation_6X.constprop.0+0x1d6>
 800a17a:	e8df f001 	tbb	[pc, r1]
 800a17e:	bc0f      	.short	0xbc0f
 800a180:	12121212 	.word	0x12121212
 800a184:	12121212 	.word	0x12121212
 800a188:	121212c0 	.word	0x121212c0
 800a18c:	c812c412 	.word	0xc812c412
 800a190:	cc12      	.short	0xcc12
 800a192:	bf00      	nop
 800a194:	20000000 	.word	0x20000000
 800a198:	20001698 	.word	0x20001698
 800a19c:	21ff      	movs	r1, #255	; 0xff
 800a19e:	f883 10da 	strb.w	r1, [r3, #218]	; 0xda
 800a1a2:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 800a1a6:	f1bc 0f13 	cmp.w	ip, #19
 800a1aa:	d80e      	bhi.n	800a1ca <iNemo_setOrientation_6X.constprop.0+0x1fe>
 800a1ac:	e8df f00c 	tbb	[pc, ip]
 800a1b0:	0d0db70a 	.word	0x0d0db70a
 800a1b4:	0d0d0d0d 	.word	0x0d0d0d0d
 800a1b8:	0dbb0d0d 	.word	0x0dbb0d0d
 800a1bc:	bf0d0d0d 	.word	0xbf0d0d0d
 800a1c0:	c70dc30d 	.word	0xc70dc30d
 800a1c4:	21ff      	movs	r1, #255	; 0xff
 800a1c6:	f883 10db 	strb.w	r1, [r3, #219]	; 0xdb
 800a1ca:	3a64      	subs	r2, #100	; 0x64
 800a1cc:	2a13      	cmp	r2, #19
 800a1ce:	d80e      	bhi.n	800a1ee <iNemo_setOrientation_6X.constprop.0+0x222>
 800a1d0:	e8df f002 	tbb	[pc, r2]
 800a1d4:	0d0db90a 	.word	0x0d0db90a
 800a1d8:	0d0d0d0d 	.word	0x0d0d0d0d
 800a1dc:	0dbe0d0d 	.word	0x0dbe0d0d
 800a1e0:	c30d0d0d 	.word	0xc30d0d0d
 800a1e4:	0f0dc80d 	.word	0x0f0dc80d
 800a1e8:	22ff      	movs	r2, #255	; 0xff
 800a1ea:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800a1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1f2:	22ff      	movs	r2, #255	; 0xff
 800a1f4:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 800a1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1fc:	f04f 0e01 	mov.w	lr, #1
 800a200:	f883 e0c8 	strb.w	lr, [r3, #200]	; 0xc8
 800a204:	e75c      	b.n	800a0c0 <iNemo_setOrientation_6X.constprop.0+0xf4>
 800a206:	f04f 0e01 	mov.w	lr, #1
 800a20a:	f883 e0cb 	strb.w	lr, [r3, #203]	; 0xcb
 800a20e:	e757      	b.n	800a0c0 <iNemo_setOrientation_6X.constprop.0+0xf4>
 800a210:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800a214:	f883 e0cb 	strb.w	lr, [r3, #203]	; 0xcb
 800a218:	e752      	b.n	800a0c0 <iNemo_setOrientation_6X.constprop.0+0xf4>
 800a21a:	f04f 0e01 	mov.w	lr, #1
 800a21e:	f883 e0ce 	strb.w	lr, [r3, #206]	; 0xce
 800a222:	e74d      	b.n	800a0c0 <iNemo_setOrientation_6X.constprop.0+0xf4>
 800a224:	f04f 0eff 	mov.w	lr, #255	; 0xff
 800a228:	f883 e0c8 	strb.w	lr, [r3, #200]	; 0xc8
 800a22c:	e748      	b.n	800a0c0 <iNemo_setOrientation_6X.constprop.0+0xf4>
 800a22e:	2701      	movs	r7, #1
 800a230:	f883 70c9 	strb.w	r7, [r3, #201]	; 0xc9
 800a234:	e756      	b.n	800a0e4 <iNemo_setOrientation_6X.constprop.0+0x118>
 800a236:	2701      	movs	r7, #1
 800a238:	f883 70cc 	strb.w	r7, [r3, #204]	; 0xcc
 800a23c:	e752      	b.n	800a0e4 <iNemo_setOrientation_6X.constprop.0+0x118>
 800a23e:	27ff      	movs	r7, #255	; 0xff
 800a240:	f883 70cc 	strb.w	r7, [r3, #204]	; 0xcc
 800a244:	e74e      	b.n	800a0e4 <iNemo_setOrientation_6X.constprop.0+0x118>
 800a246:	2701      	movs	r7, #1
 800a248:	f883 70cf 	strb.w	r7, [r3, #207]	; 0xcf
 800a24c:	e74a      	b.n	800a0e4 <iNemo_setOrientation_6X.constprop.0+0x118>
 800a24e:	27ff      	movs	r7, #255	; 0xff
 800a250:	f883 70c9 	strb.w	r7, [r3, #201]	; 0xc9
 800a254:	e746      	b.n	800a0e4 <iNemo_setOrientation_6X.constprop.0+0x118>
 800a256:	2601      	movs	r6, #1
 800a258:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
 800a25c:	e754      	b.n	800a108 <iNemo_setOrientation_6X.constprop.0+0x13c>
 800a25e:	2601      	movs	r6, #1
 800a260:	f883 60cd 	strb.w	r6, [r3, #205]	; 0xcd
 800a264:	e750      	b.n	800a108 <iNemo_setOrientation_6X.constprop.0+0x13c>
 800a266:	26ff      	movs	r6, #255	; 0xff
 800a268:	f883 60cd 	strb.w	r6, [r3, #205]	; 0xcd
 800a26c:	e74c      	b.n	800a108 <iNemo_setOrientation_6X.constprop.0+0x13c>
 800a26e:	2601      	movs	r6, #1
 800a270:	f883 60d0 	strb.w	r6, [r3, #208]	; 0xd0
 800a274:	e748      	b.n	800a108 <iNemo_setOrientation_6X.constprop.0+0x13c>
 800a276:	26ff      	movs	r6, #255	; 0xff
 800a278:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
 800a27c:	e744      	b.n	800a108 <iNemo_setOrientation_6X.constprop.0+0x13c>
 800a27e:	2501      	movs	r5, #1
 800a280:	f883 50e0 	strb.w	r5, [r3, #224]	; 0xe0
 800a284:	e752      	b.n	800a12c <iNemo_setOrientation_6X.constprop.0+0x160>
 800a286:	2501      	movs	r5, #1
 800a288:	f883 50e3 	strb.w	r5, [r3, #227]	; 0xe3
 800a28c:	e74e      	b.n	800a12c <iNemo_setOrientation_6X.constprop.0+0x160>
 800a28e:	25ff      	movs	r5, #255	; 0xff
 800a290:	f883 50e3 	strb.w	r5, [r3, #227]	; 0xe3
 800a294:	e74a      	b.n	800a12c <iNemo_setOrientation_6X.constprop.0+0x160>
 800a296:	2501      	movs	r5, #1
 800a298:	f883 50e6 	strb.w	r5, [r3, #230]	; 0xe6
 800a29c:	e746      	b.n	800a12c <iNemo_setOrientation_6X.constprop.0+0x160>
 800a29e:	25ff      	movs	r5, #255	; 0xff
 800a2a0:	f883 50e0 	strb.w	r5, [r3, #224]	; 0xe0
 800a2a4:	e742      	b.n	800a12c <iNemo_setOrientation_6X.constprop.0+0x160>
 800a2a6:	2401      	movs	r4, #1
 800a2a8:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
 800a2ac:	e750      	b.n	800a150 <iNemo_setOrientation_6X.constprop.0+0x184>
 800a2ae:	2401      	movs	r4, #1
 800a2b0:	f883 40e4 	strb.w	r4, [r3, #228]	; 0xe4
 800a2b4:	e74c      	b.n	800a150 <iNemo_setOrientation_6X.constprop.0+0x184>
 800a2b6:	24ff      	movs	r4, #255	; 0xff
 800a2b8:	f883 40e4 	strb.w	r4, [r3, #228]	; 0xe4
 800a2bc:	e748      	b.n	800a150 <iNemo_setOrientation_6X.constprop.0+0x184>
 800a2be:	2401      	movs	r4, #1
 800a2c0:	f883 40e7 	strb.w	r4, [r3, #231]	; 0xe7
 800a2c4:	e744      	b.n	800a150 <iNemo_setOrientation_6X.constprop.0+0x184>
 800a2c6:	24ff      	movs	r4, #255	; 0xff
 800a2c8:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
 800a2cc:	e740      	b.n	800a150 <iNemo_setOrientation_6X.constprop.0+0x184>
 800a2ce:	2001      	movs	r0, #1
 800a2d0:	f883 00e2 	strb.w	r0, [r3, #226]	; 0xe2
 800a2d4:	e74e      	b.n	800a174 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 800a2d6:	2001      	movs	r0, #1
 800a2d8:	f883 00e5 	strb.w	r0, [r3, #229]	; 0xe5
 800a2dc:	e74a      	b.n	800a174 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 800a2de:	20ff      	movs	r0, #255	; 0xff
 800a2e0:	f883 00e5 	strb.w	r0, [r3, #229]	; 0xe5
 800a2e4:	e746      	b.n	800a174 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 800a2e6:	2001      	movs	r0, #1
 800a2e8:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
 800a2ec:	e742      	b.n	800a174 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 800a2ee:	20ff      	movs	r0, #255	; 0xff
 800a2f0:	f883 00e2 	strb.w	r0, [r3, #226]	; 0xe2
 800a2f4:	e73e      	b.n	800a174 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 800a2f6:	2101      	movs	r1, #1
 800a2f8:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
 800a2fc:	e751      	b.n	800a1a2 <iNemo_setOrientation_6X.constprop.0+0x1d6>
 800a2fe:	2101      	movs	r1, #1
 800a300:	f883 10d7 	strb.w	r1, [r3, #215]	; 0xd7
 800a304:	e74d      	b.n	800a1a2 <iNemo_setOrientation_6X.constprop.0+0x1d6>
 800a306:	21ff      	movs	r1, #255	; 0xff
 800a308:	f883 10d7 	strb.w	r1, [r3, #215]	; 0xd7
 800a30c:	e749      	b.n	800a1a2 <iNemo_setOrientation_6X.constprop.0+0x1d6>
 800a30e:	2101      	movs	r1, #1
 800a310:	f883 10da 	strb.w	r1, [r3, #218]	; 0xda
 800a314:	e745      	b.n	800a1a2 <iNemo_setOrientation_6X.constprop.0+0x1d6>
 800a316:	21ff      	movs	r1, #255	; 0xff
 800a318:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
 800a31c:	e741      	b.n	800a1a2 <iNemo_setOrientation_6X.constprop.0+0x1d6>
 800a31e:	2101      	movs	r1, #1
 800a320:	f883 10d5 	strb.w	r1, [r3, #213]	; 0xd5
 800a324:	e751      	b.n	800a1ca <iNemo_setOrientation_6X.constprop.0+0x1fe>
 800a326:	2101      	movs	r1, #1
 800a328:	f883 10d8 	strb.w	r1, [r3, #216]	; 0xd8
 800a32c:	e74d      	b.n	800a1ca <iNemo_setOrientation_6X.constprop.0+0x1fe>
 800a32e:	21ff      	movs	r1, #255	; 0xff
 800a330:	f883 10d8 	strb.w	r1, [r3, #216]	; 0xd8
 800a334:	e749      	b.n	800a1ca <iNemo_setOrientation_6X.constprop.0+0x1fe>
 800a336:	2101      	movs	r1, #1
 800a338:	f883 10db 	strb.w	r1, [r3, #219]	; 0xdb
 800a33c:	e745      	b.n	800a1ca <iNemo_setOrientation_6X.constprop.0+0x1fe>
 800a33e:	21ff      	movs	r1, #255	; 0xff
 800a340:	f883 10d5 	strb.w	r1, [r3, #213]	; 0xd5
 800a344:	e741      	b.n	800a1ca <iNemo_setOrientation_6X.constprop.0+0x1fe>
 800a346:	2201      	movs	r2, #1
 800a348:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 800a34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a350:	2201      	movs	r2, #1
 800a352:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 800a356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a35a:	22ff      	movs	r2, #255	; 0xff
 800a35c:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 800a360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a364:	2201      	movs	r2, #1
 800a366:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800a36a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a36e:	bf00      	nop

0800a370 <MotionDI_setKnobs.part.0>:
 800a370:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a372:	e9d0 160b 	ldrd	r1, r6, [r0, #44]	; 0x2c
 800a376:	b091      	sub	sp, #68	; 0x44
 800a378:	4b3c      	ldr	r3, [pc, #240]	; (800a46c <MotionDI_setKnobs.part.0+0xfc>)
 800a37a:	f8cd 6031 	str.w	r6, [sp, #49]	; 0x31
 800a37e:	461a      	mov	r2, r3
 800a380:	4604      	mov	r4, r0
 800a382:	f8cd 102d 	str.w	r1, [sp, #45]	; 0x2d
 800a386:	f8bd 7031 	ldrh.w	r7, [sp, #49]	; 0x31
 800a38a:	4d39      	ldr	r5, [pc, #228]	; (800a470 <MotionDI_setKnobs.part.0+0x100>)
 800a38c:	f832 0f08 	ldrh.w	r0, [r2, #8]!
 800a390:	809f      	strh	r7, [r3, #4]
 800a392:	f8bd 702d 	ldrh.w	r7, [sp, #45]	; 0x2d
 800a396:	6a26      	ldr	r6, [r4, #32]
 800a398:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a39a:	801f      	strh	r7, [r3, #0]
 800a39c:	f89d 702f 	ldrb.w	r7, [sp, #47]	; 0x2f
 800a3a0:	709f      	strb	r7, [r3, #2]
 800a3a2:	f8d5 e0f0 	ldr.w	lr, [r5, #240]	; 0xf0
 800a3a6:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 800a3aa:	f8ad 0035 	strh.w	r0, [sp, #53]	; 0x35
 800a3ae:	f8c5 6128 	str.w	r6, [r5, #296]	; 0x128
 800a3b2:	7890      	ldrb	r0, [r2, #2]
 800a3b4:	f8c5 60ec 	str.w	r6, [r5, #236]	; 0xec
 800a3b8:	f8c5 1134 	str.w	r1, [r5, #308]	; 0x134
 800a3bc:	f894 6029 	ldrb.w	r6, [r4, #41]	; 0x29
 800a3c0:	f8c5 10f8 	str.w	r1, [r5, #248]	; 0xf8
 800a3c4:	2100      	movs	r1, #0
 800a3c6:	f89d c033 	ldrb.w	ip, [sp, #51]	; 0x33
 800a3ca:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
 800a3ce:	f8c5 e12c 	str.w	lr, [r5, #300]	; 0x12c
 800a3d2:	f885 113d 	strb.w	r1, [r5, #317]	; 0x13d
 800a3d6:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
 800a3da:	f885 7161 	strb.w	r7, [r5, #353]	; 0x161
 800a3de:	f885 6162 	strb.w	r6, [r5, #354]	; 0x162
 800a3e2:	f885 7125 	strb.w	r7, [r5, #293]	; 0x125
 800a3e6:	f885 6126 	strb.w	r6, [r5, #294]	; 0x126
 800a3ea:	f885 1101 	strb.w	r1, [r5, #257]	; 0x101
 800a3ee:	f8bd 1035 	ldrh.w	r1, [sp, #53]	; 0x35
 800a3f2:	8119      	strh	r1, [r3, #8]
 800a3f4:	f883 c006 	strb.w	ip, [r3, #6]
 800a3f8:	7090      	strb	r0, [r2, #2]
 800a3fa:	f7ff fc15 	bl	8009c28 <iNemo_setOrientation.constprop.0>
 800a3fe:	f7ff fde5 	bl	8009fcc <iNemo_setOrientation_6X.constprop.0>
 800a402:	4a1c      	ldr	r2, [pc, #112]	; (800a474 <MotionDI_setKnobs.part.0+0x104>)
 800a404:	f8d2 3464 	ldr.w	r3, [r2, #1124]	; 0x464
 800a408:	1e59      	subs	r1, r3, #1
 800a40a:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800a40e:	d211      	bcs.n	800a434 <MotionDI_setKnobs.part.0+0xc4>
 800a410:	3b0a      	subs	r3, #10
 800a412:	b29b      	uxth	r3, r3
 800a414:	2b5a      	cmp	r3, #90	; 0x5a
 800a416:	bf8c      	ite	hi
 800a418:	2300      	movhi	r3, #0
 800a41a:	2301      	movls	r3, #1
 800a41c:	6821      	ldr	r1, [r4, #0]
 800a41e:	7013      	strb	r3, [r2, #0]
 800a420:	f502 638d 	add.w	r3, r2, #1128	; 0x468
 800a424:	4814      	ldr	r0, [pc, #80]	; (800a478 <MotionDI_setKnobs.part.0+0x108>)
 800a426:	6019      	str	r1, [r3, #0]
 800a428:	f502 618c 	add.w	r1, r2, #1120	; 0x460
 800a42c:	2301      	movs	r3, #1
 800a42e:	6008      	str	r0, [r1, #0]
 800a430:	f882 346c 	strb.w	r3, [r2, #1132]	; 0x46c
 800a434:	68e3      	ldr	r3, [r4, #12]
 800a436:	6920      	ldr	r0, [r4, #16]
 800a438:	6961      	ldr	r1, [r4, #20]
 800a43a:	69a2      	ldr	r2, [r4, #24]
 800a43c:	606b      	str	r3, [r5, #4]
 800a43e:	4e0f      	ldr	r6, [pc, #60]	; (800a47c <MotionDI_setKnobs.part.0+0x10c>)
 800a440:	68a3      	ldr	r3, [r4, #8]
 800a442:	6168      	str	r0, [r5, #20]
 800a444:	60a9      	str	r1, [r5, #8]
 800a446:	60ea      	str	r2, [r5, #12]
 800a448:	602b      	str	r3, [r5, #0]
 800a44a:	f104 0730 	add.w	r7, r4, #48	; 0x30
 800a44e:	6820      	ldr	r0, [r4, #0]
 800a450:	6861      	ldr	r1, [r4, #4]
 800a452:	68a2      	ldr	r2, [r4, #8]
 800a454:	68e3      	ldr	r3, [r4, #12]
 800a456:	4635      	mov	r5, r6
 800a458:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a45a:	3410      	adds	r4, #16
 800a45c:	42bc      	cmp	r4, r7
 800a45e:	462e      	mov	r6, r5
 800a460:	d1f5      	bne.n	800a44e <MotionDI_setKnobs.part.0+0xde>
 800a462:	6820      	ldr	r0, [r4, #0]
 800a464:	6028      	str	r0, [r5, #0]
 800a466:	b011      	add	sp, #68	; 0x44
 800a468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a46a:	bf00      	nop
 800a46c:	20000000 	.word	0x20000000
 800a470:	20001698 	.word	0x20001698
 800a474:	20002130 	.word	0x20002130
 800a478:	3a83126f 	.word	0x3a83126f
 800a47c:	200017fc 	.word	0x200017fc

0800a480 <getAccStats.constprop.0>:
 800a480:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a484:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800a488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a48c:	2400      	movs	r4, #0
 800a48e:	6014      	str	r4, [r2, #0]
 800a490:	601c      	str	r4, [r3, #0]
 800a492:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a494:	4f68      	ldr	r7, [pc, #416]	; (800a638 <getAccStats.constprop.0+0x1b8>)
 800a496:	2500      	movs	r5, #0
 800a498:	7025      	strb	r5, [r4, #0]
 800a49a:	f8b7 c050 	ldrh.w	ip, [r7, #80]	; 0x50
 800a49e:	f8b7 4052 	ldrh.w	r4, [r7, #82]	; 0x52
 800a4a2:	ed9f 4a66 	vldr	s8, [pc, #408]	; 800a63c <getAccStats.constprop.0+0x1bc>
 800a4a6:	f9b7 5058 	ldrsh.w	r5, [r7, #88]	; 0x58
 800a4aa:	45a4      	cmp	ip, r4
 800a4ac:	ee23 4a84 	vmul.f32	s8, s7, s8
 800a4b0:	f105 0501 	add.w	r5, r5, #1
 800a4b4:	f000 80b2 	beq.w	800a61c <getAccStats.constprop.0+0x19c>
 800a4b8:	eba5 050c 	sub.w	r5, r5, ip
 800a4bc:	fb95 faf4 	sdiv	sl, r5, r4
 800a4c0:	fb04 551a 	mls	r5, r4, sl, r5
 800a4c4:	fa0f fa85 	sxth.w	sl, r5
 800a4c8:	f1ba 0f00 	cmp.w	sl, #0
 800a4cc:	bfbc      	itt	lt
 800a4ce:	192d      	addlt	r5, r5, r4
 800a4d0:	fa0f fa85 	sxthlt.w	sl, r5
 800a4d4:	f1bc 0f00 	cmp.w	ip, #0
 800a4d8:	f000 80aa 	beq.w	800a630 <getAccStats.constprop.0+0x1b0>
 800a4dc:	f9b0 9000 	ldrsh.w	r9, [r0]
 800a4e0:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 800a4e4:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 800a4e8:	2600      	movs	r6, #0
 800a4ea:	e018      	b.n	800a51e <getAccStats.constprop.0+0x9e>
 800a4ec:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a4ee:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a4f0:	7824      	ldrb	r4, [r4, #0]
 800a4f2:	3401      	adds	r4, #1
 800a4f4:	702c      	strb	r4, [r5, #0]
 800a4f6:	edd3 7a00 	vldr	s15, [r3]
 800a4fa:	f8b7 c050 	ldrh.w	ip, [r7, #80]	; 0x50
 800a4fe:	eee7 7a07 	vfma.f32	s15, s14, s14
 800a502:	3601      	adds	r6, #1
 800a504:	b2b4      	uxth	r4, r6
 800a506:	45a4      	cmp	ip, r4
 800a508:	edc3 7a00 	vstr	s15, [r3]
 800a50c:	d967      	bls.n	800a5de <getAccStats.constprop.0+0x15e>
 800a50e:	f9b0 9000 	ldrsh.w	r9, [r0]
 800a512:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 800a516:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 800a51a:	f8b7 4052 	ldrh.w	r4, [r7, #82]	; 0x52
 800a51e:	edd1 4a04 	vldr	s9, [r1, #16]
 800a522:	ed91 5a00 	vldr	s10, [r1]
 800a526:	edd1 5a08 	vldr	s11, [r1, #32]
 800a52a:	ed92 6a00 	vldr	s12, [r2]
 800a52e:	fa1a fb86 	uxtah	fp, sl, r6
 800a532:	fb9b f5f4 	sdiv	r5, fp, r4
 800a536:	fb04 b415 	mls	r4, r4, r5, fp
 800a53a:	b224      	sxth	r4, r4
 800a53c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a540:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800a544:	f9b4 b062 	ldrsh.w	fp, [r4, #98]	; 0x62
 800a548:	f9b4 5060 	ldrsh.w	r5, [r4, #96]	; 0x60
 800a54c:	f9b4 4064 	ldrsh.w	r4, [r4, #100]	; 0x64
 800a550:	ebab 0b08 	sub.w	fp, fp, r8
 800a554:	ee06 ba90 	vmov	s13, fp
 800a558:	eba5 0509 	sub.w	r5, r5, r9
 800a55c:	ee07 5a10 	vmov	s14, r5
 800a560:	eba4 040e 	sub.w	r4, r4, lr
 800a564:	ee07 4a90 	vmov	s15, r4
 800a568:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a56c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a570:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800a574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a578:	ee27 7a05 	vmul.f32	s14, s14, s10
 800a57c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800a580:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a584:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800a588:	ee16 5a90 	vmov	r5, s13
 800a58c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a590:	ee17 ba10 	vmov	fp, s14
 800a594:	ee17 4a90 	vmov	r4, s15
 800a598:	fb05 f505 	mul.w	r5, r5, r5
 800a59c:	fb0b 5b0b 	mla	fp, fp, fp, r5
 800a5a0:	fb04 b404 	mla	r4, r4, r4, fp
 800a5a4:	ee07 4a90 	vmov	s15, r4
 800a5a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5ac:	eef1 6ae7 	vsqrt.f32	s13, s15
 800a5b0:	ee36 7ae3 	vsub.f32	s14, s13, s7
 800a5b4:	ee76 7a26 	vadd.f32	s15, s12, s13
 800a5b8:	eef0 6ac7 	vabs.f32	s13, s14
 800a5bc:	eeb4 4ae6 	vcmpe.f32	s8, s13
 800a5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5c4:	edc2 7a00 	vstr	s15, [r2]
 800a5c8:	d490      	bmi.n	800a4ec <getAccStats.constprop.0+0x6c>
 800a5ca:	edd3 7a00 	vldr	s15, [r3]
 800a5ce:	eee7 7a07 	vfma.f32	s15, s14, s14
 800a5d2:	3601      	adds	r6, #1
 800a5d4:	b2b4      	uxth	r4, r6
 800a5d6:	45a4      	cmp	ip, r4
 800a5d8:	edc3 7a00 	vstr	s15, [r3]
 800a5dc:	d89d      	bhi.n	800a51a <getAccStats.constprop.0+0x9a>
 800a5de:	ee07 ca10 	vmov	s14, ip
 800a5e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a5e6:	eddf 6a16 	vldr	s13, [pc, #88]	; 800a640 <getAccStats.constprop.0+0x1c0>
 800a5ea:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800a5ee:	eef1 7ac6 	vsqrt.f32	s15, s12
 800a5f2:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a5f6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5fe:	bfb8      	it	lt
 800a600:	eef0 7a66 	vmovlt.f32	s15, s13
 800a604:	edc3 7a00 	vstr	s15, [r3]
 800a608:	edd2 7a00 	vldr	s15, [r2]
 800a60c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a610:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800a614:	edc2 7a00 	vstr	s15, [r2]
 800a618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a61c:	fb95 fafc 	sdiv	sl, r5, ip
 800a620:	fb0c 551a 	mls	r5, ip, sl, r5
 800a624:	fa0f fa85 	sxth.w	sl, r5
 800a628:	f1bc 0f00 	cmp.w	ip, #0
 800a62c:	f47f af56 	bne.w	800a4dc <getAccStats.constprop.0+0x5c>
 800a630:	edd3 7a00 	vldr	s15, [r3]
 800a634:	e7d3      	b.n	800a5de <getAccStats.constprop.0+0x15e>
 800a636:	bf00      	nop
 800a638:	20002130 	.word	0x20002130
 800a63c:	3e4ccccd 	.word	0x3e4ccccd
 800a640:	3ca3d70a 	.word	0x3ca3d70a
 800a644:	00000000 	.word	0x00000000

0800a648 <iNemo_quat2heading>:
 800a648:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800a64c:	460e      	mov	r6, r1
 800a64e:	ed2d 8b08 	vpush	{d8-d11}
 800a652:	2b00      	cmp	r3, #0
 800a654:	d15b      	bne.n	800a70e <iNemo_quat2heading+0xc6>
 800a656:	edd2 6a00 	vldr	s13, [r2]
 800a65a:	edd2 7a01 	vldr	s15, [r2, #4]
 800a65e:	4dba      	ldr	r5, [pc, #744]	; (800a948 <iNemo_quat2heading+0x300>)
 800a660:	ed92 7a02 	vldr	s14, [r2, #8]
 800a664:	edd0 9a00 	vldr	s19, [r0]
 800a668:	f8d5 4198 	ldr.w	r4, [r5, #408]	; 0x198
 800a66c:	ed90 aa01 	vldr	s20, [r0, #4]
 800a670:	edd0 8a02 	vldr	s17, [r0, #8]
 800a674:	ed90 8a03 	vldr	s16, [r0, #12]
 800a678:	eef0 aae6 	vabs.f32	s21, s13
 800a67c:	eeb0 9ae7 	vabs.f32	s18, s15
 800a680:	eef4 aac9 	vcmpe.f32	s21, s18
 800a684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a688:	eeb0 bac7 	vabs.f32	s22, s14
 800a68c:	f340 80b4 	ble.w	800a7f8 <iNemo_quat2heading+0x1b0>
 800a690:	eef4 aacb 	vcmpe.f32	s21, s22
 800a694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a698:	f340 80ae 	ble.w	800a7f8 <iNemo_quat2heading+0x1b0>
 800a69c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a6a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6a4:	ee1a 0a90 	vmov	r0, s21
 800a6a8:	f340 81b3 	ble.w	800aa12 <iNemo_quat2heading+0x3ca>
 800a6ac:	f7f5 fef0 	bl	8000490 <__aeabi_f2d>
 800a6b0:	4680      	mov	r8, r0
 800a6b2:	ee19 0a10 	vmov	r0, s18
 800a6b6:	4689      	mov	r9, r1
 800a6b8:	f7f5 feea 	bl	8000490 <__aeabi_f2d>
 800a6bc:	a39e      	add	r3, pc, #632	; (adr r3, 800a938 <iNemo_quat2heading+0x2f0>)
 800a6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c2:	f7f5 ff3d 	bl	8000540 <__aeabi_dmul>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	460b      	mov	r3, r1
 800a6ca:	4640      	mov	r0, r8
 800a6cc:	4649      	mov	r1, r9
 800a6ce:	f7f6 f9c7 	bl	8000a60 <__aeabi_dcmpgt>
 800a6d2:	b188      	cbz	r0, 800a6f8 <iNemo_quat2heading+0xb0>
 800a6d4:	ee1b 0a10 	vmov	r0, s22
 800a6d8:	f7f5 feda 	bl	8000490 <__aeabi_f2d>
 800a6dc:	a396      	add	r3, pc, #600	; (adr r3, 800a938 <iNemo_quat2heading+0x2f0>)
 800a6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e2:	f7f5 ff2d 	bl	8000540 <__aeabi_dmul>
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	4640      	mov	r0, r8
 800a6ec:	4649      	mov	r1, r9
 800a6ee:	f7f6 f9b7 	bl	8000a60 <__aeabi_dcmpgt>
 800a6f2:	2800      	cmp	r0, #0
 800a6f4:	f040 81b9 	bne.w	800aa6a <iNemo_quat2heading+0x422>
 800a6f8:	2c05      	cmp	r4, #5
 800a6fa:	f200 81ba 	bhi.w	800aa72 <iNemo_quat2heading+0x42a>
 800a6fe:	e8df f014 	tbh	[pc, r4, lsl #1]
 800a702:	00b2      	.short	0x00b2
 800a704:	005f00e7 	.word	0x005f00e7
 800a708:	005f0156 	.word	0x005f0156
 800a70c:	00b2      	.short	0x00b2
 800a70e:	edd2 6a01 	vldr	s13, [r2, #4]
 800a712:	edd2 7a00 	vldr	s15, [r2]
 800a716:	edd0 8a02 	vldr	s17, [r0, #8]
 800a71a:	4d8b      	ldr	r5, [pc, #556]	; (800a948 <iNemo_quat2heading+0x300>)
 800a71c:	ed92 7a02 	vldr	s14, [r2, #8]
 800a720:	edd0 9a01 	vldr	s19, [r0, #4]
 800a724:	f8d5 4198 	ldr.w	r4, [r5, #408]	; 0x198
 800a728:	ed90 aa00 	vldr	s20, [r0]
 800a72c:	ed90 8a03 	vldr	s16, [r0, #12]
 800a730:	eef0 aae6 	vabs.f32	s21, s13
 800a734:	eeb0 9ae7 	vabs.f32	s18, s15
 800a738:	eef4 aac9 	vcmpe.f32	s21, s18
 800a73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a740:	eef1 8a68 	vneg.f32	s17, s17
 800a744:	eeb0 bac7 	vabs.f32	s22, s14
 800a748:	dd04      	ble.n	800a754 <iNemo_quat2heading+0x10c>
 800a74a:	eef4 aacb 	vcmpe.f32	s21, s22
 800a74e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a752:	dca3      	bgt.n	800a69c <iNemo_quat2heading+0x54>
 800a754:	eeb4 9acb 	vcmpe.f32	s18, s22
 800a758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a75c:	f300 8086 	bgt.w	800a86c <iNemo_quat2heading+0x224>
 800a760:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800a764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a768:	ee1b 0a10 	vmov	r0, s22
 800a76c:	d450      	bmi.n	800a810 <iNemo_quat2heading+0x1c8>
 800a76e:	f7f5 fe8f 	bl	8000490 <__aeabi_f2d>
 800a772:	4680      	mov	r8, r0
 800a774:	ee19 0a10 	vmov	r0, s18
 800a778:	4689      	mov	r9, r1
 800a77a:	f7f5 fe89 	bl	8000490 <__aeabi_f2d>
 800a77e:	a36e      	add	r3, pc, #440	; (adr r3, 800a938 <iNemo_quat2heading+0x2f0>)
 800a780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a784:	f7f5 fedc 	bl	8000540 <__aeabi_dmul>
 800a788:	4602      	mov	r2, r0
 800a78a:	460b      	mov	r3, r1
 800a78c:	4640      	mov	r0, r8
 800a78e:	4649      	mov	r1, r9
 800a790:	f7f6 f966 	bl	8000a60 <__aeabi_dcmpgt>
 800a794:	2800      	cmp	r0, #0
 800a796:	d0af      	beq.n	800a6f8 <iNemo_quat2heading+0xb0>
 800a798:	ee1a 0a90 	vmov	r0, s21
 800a79c:	f7f5 fe78 	bl	8000490 <__aeabi_f2d>
 800a7a0:	a365      	add	r3, pc, #404	; (adr r3, 800a938 <iNemo_quat2heading+0x2f0>)
 800a7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a6:	f7f5 fecb 	bl	8000540 <__aeabi_dmul>
 800a7aa:	4602      	mov	r2, r0
 800a7ac:	460b      	mov	r3, r1
 800a7ae:	4640      	mov	r0, r8
 800a7b0:	4649      	mov	r1, r9
 800a7b2:	f7f6 f955 	bl	8000a60 <__aeabi_dcmpgt>
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	d09e      	beq.n	800a6f8 <iNemo_quat2heading+0xb0>
 800a7ba:	2302      	movs	r3, #2
 800a7bc:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 800a7c0:	ed96 0a00 	vldr	s0, [r6]
 800a7c4:	eddf 7a61 	vldr	s15, [pc, #388]	; 800a94c <iNemo_quat2heading+0x304>
 800a7c8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a7cc:	eddf 7a60 	vldr	s15, [pc, #384]	; 800a950 <iNemo_quat2heading+0x308>
 800a7d0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7d8:	bfa8      	it	ge
 800a7da:	ee30 0a67 	vsubge.f32	s0, s0, s15
 800a7de:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e6:	d503      	bpl.n	800a7f0 <iNemo_quat2heading+0x1a8>
 800a7e8:	eddf 7a59 	vldr	s15, [pc, #356]	; 800a950 <iNemo_quat2heading+0x308>
 800a7ec:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a7f0:	ecbd 8b08 	vpop	{d8-d11}
 800a7f4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a7f8:	eeb4 9acb 	vcmpe.f32	s18, s22
 800a7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a800:	dc34      	bgt.n	800a86c <iNemo_quat2heading+0x224>
 800a802:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800a806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a80a:	ee1b 0a10 	vmov	r0, s22
 800a80e:	ddae      	ble.n	800a76e <iNemo_quat2heading+0x126>
 800a810:	f7f5 fe3e 	bl	8000490 <__aeabi_f2d>
 800a814:	4680      	mov	r8, r0
 800a816:	ee19 0a10 	vmov	r0, s18
 800a81a:	4689      	mov	r9, r1
 800a81c:	f7f5 fe38 	bl	8000490 <__aeabi_f2d>
 800a820:	a345      	add	r3, pc, #276	; (adr r3, 800a938 <iNemo_quat2heading+0x2f0>)
 800a822:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a826:	f7f5 fe8b 	bl	8000540 <__aeabi_dmul>
 800a82a:	4602      	mov	r2, r0
 800a82c:	460b      	mov	r3, r1
 800a82e:	4640      	mov	r0, r8
 800a830:	4649      	mov	r1, r9
 800a832:	f7f6 f915 	bl	8000a60 <__aeabi_dcmpgt>
 800a836:	2800      	cmp	r0, #0
 800a838:	f43f af5e 	beq.w	800a6f8 <iNemo_quat2heading+0xb0>
 800a83c:	ee1a 0a90 	vmov	r0, s21
 800a840:	f7f5 fe26 	bl	8000490 <__aeabi_f2d>
 800a844:	a33c      	add	r3, pc, #240	; (adr r3, 800a938 <iNemo_quat2heading+0x2f0>)
 800a846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a84a:	f7f5 fe79 	bl	8000540 <__aeabi_dmul>
 800a84e:	4602      	mov	r2, r0
 800a850:	460b      	mov	r3, r1
 800a852:	4640      	mov	r0, r8
 800a854:	4649      	mov	r1, r9
 800a856:	f7f6 f903 	bl	8000a60 <__aeabi_dcmpgt>
 800a85a:	2800      	cmp	r0, #0
 800a85c:	f43f af4c 	beq.w	800a6f8 <iNemo_quat2heading+0xb0>
 800a860:	2300      	movs	r3, #0
 800a862:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 800a866:	ed96 0a00 	vldr	s0, [r6]
 800a86a:	e7af      	b.n	800a7cc <iNemo_quat2heading+0x184>
 800a86c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a874:	ee19 0a10 	vmov	r0, s18
 800a878:	dd6e      	ble.n	800a958 <iNemo_quat2heading+0x310>
 800a87a:	f7f5 fe09 	bl	8000490 <__aeabi_f2d>
 800a87e:	4680      	mov	r8, r0
 800a880:	ee1a 0a90 	vmov	r0, s21
 800a884:	4689      	mov	r9, r1
 800a886:	f7f5 fe03 	bl	8000490 <__aeabi_f2d>
 800a88a:	a32b      	add	r3, pc, #172	; (adr r3, 800a938 <iNemo_quat2heading+0x2f0>)
 800a88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a890:	f7f5 fe56 	bl	8000540 <__aeabi_dmul>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	4640      	mov	r0, r8
 800a89a:	4649      	mov	r1, r9
 800a89c:	f7f6 f8e0 	bl	8000a60 <__aeabi_dcmpgt>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	f43f af29 	beq.w	800a6f8 <iNemo_quat2heading+0xb0>
 800a8a6:	ee1b 0a10 	vmov	r0, s22
 800a8aa:	f7f5 fdf1 	bl	8000490 <__aeabi_f2d>
 800a8ae:	a322      	add	r3, pc, #136	; (adr r3, 800a938 <iNemo_quat2heading+0x2f0>)
 800a8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b4:	f7f5 fe44 	bl	8000540 <__aeabi_dmul>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	4640      	mov	r0, r8
 800a8be:	4649      	mov	r1, r9
 800a8c0:	f7f6 f8ce 	bl	8000a60 <__aeabi_dcmpgt>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	f43f af17 	beq.w	800a6f8 <iNemo_quat2heading+0xb0>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 800a8d0:	ee68 7a08 	vmul.f32	s15, s16, s16
 800a8d4:	ee28 8a28 	vmul.f32	s16, s16, s17
 800a8d8:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800a8dc:	eeaa 8a29 	vfma.f32	s16, s20, s19
 800a8e0:	eeea 7a4a 	vfms.f32	s15, s20, s20
 800a8e4:	eee8 7ae8 	vfms.f32	s15, s17, s17
 800a8e8:	ee17 0a90 	vmov	r0, s15
 800a8ec:	f7f5 fdd0 	bl	8000490 <__aeabi_f2d>
 800a8f0:	ee78 7a08 	vadd.f32	s15, s16, s16
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	ee17 0a90 	vmov	r0, s15
 800a8fc:	ec43 2b18 	vmov	d8, r2, r3
 800a900:	f7f5 fdc6 	bl	8000490 <__aeabi_f2d>
 800a904:	eeb0 1a48 	vmov.f32	s2, s16
 800a908:	eef0 1a68 	vmov.f32	s3, s17
 800a90c:	ec41 0b10 	vmov	d0, r0, r1
 800a910:	f008 fc6c 	bl	80131ec <atan2>
 800a914:	a30a      	add	r3, pc, #40	; (adr r3, 800a940 <iNemo_quat2heading+0x2f8>)
 800a916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91a:	ec51 0b10 	vmov	r0, r1, d0
 800a91e:	f7f5 fe0f 	bl	8000540 <__aeabi_dmul>
 800a922:	4b0c      	ldr	r3, [pc, #48]	; (800a954 <iNemo_quat2heading+0x30c>)
 800a924:	2200      	movs	r2, #0
 800a926:	f7f5 fc53 	bl	80001d0 <__aeabi_dsub>
 800a92a:	f7f6 f901 	bl	8000b30 <__aeabi_d2f>
 800a92e:	ee00 0a10 	vmov	s0, r0
 800a932:	e74b      	b.n	800a7cc <iNemo_quat2heading+0x184>
 800a934:	f3af 8000 	nop.w
 800a938:	e0000000 	.word	0xe0000000
 800a93c:	3ff6b851 	.word	0x3ff6b851
 800a940:	20000000 	.word	0x20000000
 800a944:	404ca5dc 	.word	0x404ca5dc
 800a948:	20001698 	.word	0x20001698
 800a94c:	43340000 	.word	0x43340000
 800a950:	43b40000 	.word	0x43b40000
 800a954:	40568000 	.word	0x40568000
 800a958:	f7f5 fd9a 	bl	8000490 <__aeabi_f2d>
 800a95c:	4680      	mov	r8, r0
 800a95e:	ee1a 0a90 	vmov	r0, s21
 800a962:	4689      	mov	r9, r1
 800a964:	f7f5 fd94 	bl	8000490 <__aeabi_f2d>
 800a968:	a343      	add	r3, pc, #268	; (adr r3, 800aa78 <iNemo_quat2heading+0x430>)
 800a96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96e:	f7f5 fde7 	bl	8000540 <__aeabi_dmul>
 800a972:	4602      	mov	r2, r0
 800a974:	460b      	mov	r3, r1
 800a976:	4640      	mov	r0, r8
 800a978:	4649      	mov	r1, r9
 800a97a:	f7f6 f871 	bl	8000a60 <__aeabi_dcmpgt>
 800a97e:	2800      	cmp	r0, #0
 800a980:	f43f aeba 	beq.w	800a6f8 <iNemo_quat2heading+0xb0>
 800a984:	ee1b 0a10 	vmov	r0, s22
 800a988:	f7f5 fd82 	bl	8000490 <__aeabi_f2d>
 800a98c:	a33a      	add	r3, pc, #232	; (adr r3, 800aa78 <iNemo_quat2heading+0x430>)
 800a98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a992:	f7f5 fdd5 	bl	8000540 <__aeabi_dmul>
 800a996:	4602      	mov	r2, r0
 800a998:	460b      	mov	r3, r1
 800a99a:	4640      	mov	r0, r8
 800a99c:	4649      	mov	r1, r9
 800a99e:	f7f6 f85f 	bl	8000a60 <__aeabi_dcmpgt>
 800a9a2:	2800      	cmp	r0, #0
 800a9a4:	f43f aea8 	beq.w	800a6f8 <iNemo_quat2heading+0xb0>
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 800a9ae:	ee68 7a08 	vmul.f32	s15, s16, s16
 800a9b2:	ee28 8a28 	vmul.f32	s16, s16, s17
 800a9b6:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800a9ba:	eeaa 8a29 	vfma.f32	s16, s20, s19
 800a9be:	eeea 7a4a 	vfms.f32	s15, s20, s20
 800a9c2:	eee8 7ae8 	vfms.f32	s15, s17, s17
 800a9c6:	ee17 0a90 	vmov	r0, s15
 800a9ca:	f7f5 fd61 	bl	8000490 <__aeabi_f2d>
 800a9ce:	ee78 7a08 	vadd.f32	s15, s16, s16
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	ee17 0a90 	vmov	r0, s15
 800a9da:	ec43 2b18 	vmov	d8, r2, r3
 800a9de:	f7f5 fd57 	bl	8000490 <__aeabi_f2d>
 800a9e2:	eeb0 1a48 	vmov.f32	s2, s16
 800a9e6:	eef0 1a68 	vmov.f32	s3, s17
 800a9ea:	ec41 0b10 	vmov	d0, r0, r1
 800a9ee:	f008 fbfd 	bl	80131ec <atan2>
 800a9f2:	a325      	add	r3, pc, #148	; (adr r3, 800aa88 <iNemo_quat2heading+0x440>)
 800a9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f8:	ec51 0b10 	vmov	r0, r1, d0
 800a9fc:	f7f5 fda0 	bl	8000540 <__aeabi_dmul>
 800aa00:	4b1f      	ldr	r3, [pc, #124]	; (800aa80 <iNemo_quat2heading+0x438>)
 800aa02:	2200      	movs	r2, #0
 800aa04:	f7f5 fbe6 	bl	80001d4 <__adddf3>
 800aa08:	f7f6 f892 	bl	8000b30 <__aeabi_d2f>
 800aa0c:	ee00 0a10 	vmov	s0, r0
 800aa10:	e6dc      	b.n	800a7cc <iNemo_quat2heading+0x184>
 800aa12:	f7f5 fd3d 	bl	8000490 <__aeabi_f2d>
 800aa16:	4680      	mov	r8, r0
 800aa18:	ee19 0a10 	vmov	r0, s18
 800aa1c:	4689      	mov	r9, r1
 800aa1e:	f7f5 fd37 	bl	8000490 <__aeabi_f2d>
 800aa22:	a315      	add	r3, pc, #84	; (adr r3, 800aa78 <iNemo_quat2heading+0x430>)
 800aa24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa28:	f7f5 fd8a 	bl	8000540 <__aeabi_dmul>
 800aa2c:	4602      	mov	r2, r0
 800aa2e:	460b      	mov	r3, r1
 800aa30:	4640      	mov	r0, r8
 800aa32:	4649      	mov	r1, r9
 800aa34:	f7f6 f814 	bl	8000a60 <__aeabi_dcmpgt>
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	f43f ae5d 	beq.w	800a6f8 <iNemo_quat2heading+0xb0>
 800aa3e:	ee1b 0a10 	vmov	r0, s22
 800aa42:	f7f5 fd25 	bl	8000490 <__aeabi_f2d>
 800aa46:	a30c      	add	r3, pc, #48	; (adr r3, 800aa78 <iNemo_quat2heading+0x430>)
 800aa48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa4c:	f7f5 fd78 	bl	8000540 <__aeabi_dmul>
 800aa50:	4602      	mov	r2, r0
 800aa52:	460b      	mov	r3, r1
 800aa54:	4640      	mov	r0, r8
 800aa56:	4649      	mov	r1, r9
 800aa58:	f7f6 f802 	bl	8000a60 <__aeabi_dcmpgt>
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	f43f ae4b 	beq.w	800a6f8 <iNemo_quat2heading+0xb0>
 800aa62:	2305      	movs	r3, #5
 800aa64:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 800aa68:	e6fd      	b.n	800a866 <iNemo_quat2heading+0x21e>
 800aa6a:	2304      	movs	r3, #4
 800aa6c:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 800aa70:	e6a6      	b.n	800a7c0 <iNemo_quat2heading+0x178>
 800aa72:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800aa84 <iNemo_quat2heading+0x43c>
 800aa76:	e6bb      	b.n	800a7f0 <iNemo_quat2heading+0x1a8>
 800aa78:	e0000000 	.word	0xe0000000
 800aa7c:	3ff6b851 	.word	0x3ff6b851
 800aa80:	40568000 	.word	0x40568000
 800aa84:	00000000 	.word	0x00000000
 800aa88:	20000000 	.word	0x20000000
 800aa8c:	404ca5dc 	.word	0x404ca5dc

0800aa90 <m_kalman_3gyro.isra.0.constprop.0>:
 800aa90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa94:	4cd4      	ldr	r4, [pc, #848]	; (800ade8 <m_kalman_3gyro.isra.0.constprop.0+0x358>)
 800aa96:	ed2d 8b10 	vpush	{d8-d15}
 800aa9a:	468e      	mov	lr, r1
 800aa9c:	4691      	mov	r9, r2
 800aa9e:	4680      	mov	r8, r0
 800aaa0:	469a      	mov	sl, r3
 800aaa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aaa4:	f2ad 6d24 	subw	sp, sp, #1572	; 0x624
 800aaa8:	aeb2      	add	r6, sp, #712	; 0x2c8
 800aaaa:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800aaac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aaae:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800aab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aab2:	f89d 5690 	ldrb.w	r5, [sp, #1680]	; 0x690
 800aab6:	9518      	str	r5, [sp, #96]	; 0x60
 800aab8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800aaba:	f89d 5694 	ldrb.w	r5, [sp, #1684]	; 0x694
 800aabe:	9509      	str	r5, [sp, #36]	; 0x24
 800aac0:	4625      	mov	r5, r4
 800aac2:	afbf      	add	r7, sp, #764	; 0x2fc
 800aac4:	f855 3b04 	ldr.w	r3, [r5], #4
 800aac8:	6033      	str	r3, [r6, #0]
 800aaca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aacc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800aace:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aad0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800aad2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aad4:	f104 0c38 	add.w	ip, r4, #56	; 0x38
 800aad8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800aada:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aade:	aecc      	add	r6, sp, #816	; 0x330
 800aae0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800aae2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aae6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800aae8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aaec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800aaee:	682a      	ldr	r2, [r5, #0]
 800aaf0:	f8dc 3000 	ldr.w	r3, [ip]
 800aaf4:	603a      	str	r2, [r7, #0]
 800aaf6:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 800aafa:	6033      	str	r3, [r6, #0]
 800aafc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800aafe:	add9      	add	r5, sp, #868	; 0x364
 800ab00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab02:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ab04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab06:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ab08:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 800ab0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab0e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ab10:	683f      	ldr	r7, [r7, #0]
 800ab12:	602f      	str	r7, [r5, #0]
 800ab14:	ad94      	add	r5, sp, #592	; 0x250
 800ab16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ab1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab1c:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ab20:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
 800ab24:	e885 0003 	stmia.w	r5, {r0, r1}
 800ab28:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ab2a:	ad9e      	add	r5, sp, #632	; 0x278
 800ab2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab2e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ab30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab32:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ab36:	f104 06f0 	add.w	r6, r4, #240	; 0xf0
 800ab3a:	e885 0003 	stmia.w	r5, {r0, r1}
 800ab3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ab40:	ada8      	add	r5, sp, #672	; 0x2a0
 800ab42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab44:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ab46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab48:	e896 0003 	ldmia.w	r6, {r0, r1}
 800ab4c:	f504 768c 	add.w	r6, r4, #280	; 0x118
 800ab50:	e885 0003 	stmia.w	r5, {r0, r1}
 800ab54:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ab56:	ad59      	add	r5, sp, #356	; 0x164
 800ab58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab5a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800ab5e:	f8dd 66c4 	ldr.w	r6, [sp, #1732]	; 0x6c4
 800ab62:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 800ab66:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800ab6a:	2500      	movs	r5, #0
 800ab6c:	7035      	strb	r5, [r6, #0]
 800ab6e:	f8dd 66c8 	ldr.w	r6, [sp, #1736]	; 0x6c8
 800ab72:	7035      	strb	r5, [r6, #0]
 800ab74:	f8dd 66cc 	ldr.w	r6, [sp, #1740]	; 0x6cc
 800ab78:	f504 749a 	add.w	r4, r4, #308	; 0x134
 800ab7c:	7035      	strb	r5, [r6, #0]
 800ab7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab80:	ed9e 8a01 	vldr	s16, [lr, #4]
 800ab84:	edde ba00 	vldr	s23, [lr]
 800ab88:	ed9e ca02 	vldr	s24, [lr, #8]
 800ab8c:	ed8d 1a11 	vstr	s2, [sp, #68]	; 0x44
 800ab90:	ee68 7a08 	vmul.f32	s15, s16, s16
 800ab94:	ad60      	add	r5, sp, #384	; 0x180
 800ab96:	eeeb 7aab 	vfma.f32	s15, s23, s23
 800ab9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab9c:	eeec 7a0c 	vfma.f32	s15, s24, s24
 800aba0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800aba4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800aba8:	ee17 0a90 	vmov	r0, s15
 800abac:	eeb0 aa61 	vmov.f32	s20, s3
 800abb0:	ed8d 2a39 	vstr	s4, [sp, #228]	; 0xe4
 800abb4:	ed8d 8a2d 	vstr	s16, [sp, #180]	; 0xb4
 800abb8:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 800abbc:	edcd 0a0e 	vstr	s1, [sp, #56]	; 0x38
 800abc0:	edcd ba2c 	vstr	s23, [sp, #176]	; 0xb0
 800abc4:	ed8d ca2e 	vstr	s24, [sp, #184]	; 0xb8
 800abc8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800abcc:	f8cd a020 	str.w	sl, [sp, #32]
 800abd0:	f7f5 fc5e 	bl	8000490 <__aeabi_f2d>
 800abd4:	ec41 0b10 	vmov	d0, r0, r1
 800abd8:	f008 fb52 	bl	8013280 <sqrt>
 800abdc:	ec51 0b10 	vmov	r0, r1, d0
 800abe0:	f7f5 ffa6 	bl	8000b30 <__aeabi_d2f>
 800abe4:	ed99 9a01 	vldr	s18, [r9, #4]
 800abe8:	edd9 9a00 	vldr	s19, [r9]
 800abec:	edd9 8a02 	vldr	s17, [r9, #8]
 800abf0:	4b7e      	ldr	r3, [pc, #504]	; (800adec <m_kalman_3gyro.isra.0.constprop.0+0x35c>)
 800abf2:	ee69 7a09 	vmul.f32	s15, s18, s18
 800abf6:	f8c3 019c 	str.w	r0, [r3, #412]	; 0x19c
 800abfa:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800abfe:	4644      	mov	r4, r8
 800ac00:	ee0c 0a90 	vmov	s25, r0
 800ac04:	eee8 7aa8 	vfma.f32	s15, s17, s17
 800ac08:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800ac0c:	ee17 0a90 	vmov	r0, s15
 800ac10:	f7f5 fc3e 	bl	8000490 <__aeabi_f2d>
 800ac14:	ec41 0b10 	vmov	d0, r0, r1
 800ac18:	f008 fb32 	bl	8013280 <sqrt>
 800ac1c:	ec51 0b10 	vmov	r0, r1, d0
 800ac20:	f7f5 ff86 	bl	8000b30 <__aeabi_d2f>
 800ac24:	ee0a 0a90 	vmov	s21, r0
 800ac28:	eecb da2c 	vdiv.f32	s27, s22, s25
 800ac2c:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 800ac30:	ab56      	add	r3, sp, #344	; 0x158
 800ac32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800ac36:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ac3a:	f893 58cd 	ldrb.w	r5, [r3, #2253]	; 0x8cd
 800ac3e:	eecb 7a2a 	vdiv.f32	s15, s22, s21
 800ac42:	ee2d ea88 	vmul.f32	s28, s27, s16
 800ac46:	ee27 9a89 	vmul.f32	s18, s15, s18
 800ac4a:	eeb0 7a48 	vmov.f32	s14, s16
 800ac4e:	ee67 9aa9 	vmul.f32	s19, s15, s19
 800ac52:	ee2b 8aad 	vmul.f32	s16, s23, s27
 800ac56:	ee2e da09 	vmul.f32	s26, s28, s18
 800ac5a:	ee6d da8c 	vmul.f32	s27, s27, s24
 800ac5e:	eea8 da29 	vfma.f32	s26, s16, s19
 800ac62:	ee67 8aa8 	vmul.f32	s17, s15, s17
 800ac66:	ed8d 8a3d 	vstr	s16, [sp, #244]	; 0xf4
 800ac6a:	eea8 daad 	vfma.f32	s26, s17, s27
 800ac6e:	ed8d ea3e 	vstr	s28, [sp, #248]	; 0xf8
 800ac72:	edcd da3f 	vstr	s27, [sp, #252]	; 0xfc
 800ac76:	edcd ba53 	vstr	s23, [sp, #332]	; 0x14c
 800ac7a:	ed8d 7a54 	vstr	s14, [sp, #336]	; 0x150
 800ac7e:	ed8d ca55 	vstr	s24, [sp, #340]	; 0x154
 800ac82:	2d00      	cmp	r5, #0
 800ac84:	f001 8116 	beq.w	800beb4 <m_kalman_3gyro.isra.0.constprop.0+0x1424>
 800ac88:	f50d 63d5 	add.w	r3, sp, #1704	; 0x6a8
 800ac8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ac90:	f7f5 ff4e 	bl	8000b30 <__aeabi_d2f>
 800ac94:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ac98:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800adf0 <m_kalman_3gyro.isra.0.constprop.0+0x360>
 800ac9c:	f503 7817 	add.w	r8, r3, #604	; 0x25c
 800aca0:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800aca4:	9310      	str	r3, [sp, #64]	; 0x40
 800aca6:	ab43      	add	r3, sp, #268	; 0x10c
 800aca8:	9307      	str	r3, [sp, #28]
 800acaa:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800acae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800acb2:	9321      	str	r3, [sp, #132]	; 0x84
 800acb4:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800acb8:	f503 6a81 	add.w	sl, r3, #1032	; 0x408
 800acbc:	f203 4b0c 	addw	fp, r3, #1036	; 0x40c
 800acc0:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800acc4:	933a      	str	r3, [sp, #232]	; 0xe8
 800acc6:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800acca:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800acce:	9334      	str	r3, [sp, #208]	; 0xd0
 800acd0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800acd4:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800acd8:	932b      	str	r3, [sp, #172]	; 0xac
 800acda:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800acde:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800ace2:	9335      	str	r3, [sp, #212]	; 0xd4
 800ace4:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ace8:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800acec:	9336      	str	r3, [sp, #216]	; 0xd8
 800acee:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800acf2:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800acf6:	9337      	str	r3, [sp, #220]	; 0xdc
 800acf8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800acfc:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 800ad00:	9338      	str	r3, [sp, #224]	; 0xe0
 800ad02:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ad06:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800ad0a:	931e      	str	r3, [sp, #120]	; 0x78
 800ad0c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ad10:	f203 4334 	addw	r3, r3, #1076	; 0x434
 800ad14:	931f      	str	r3, [sp, #124]	; 0x7c
 800ad16:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ad1a:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800ad1e:	9330      	str	r3, [sp, #192]	; 0xc0
 800ad20:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ad24:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 800ad28:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad2a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ad2e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ad32:	9312      	str	r3, [sp, #72]	; 0x48
 800ad34:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ad38:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800ad3c:	9320      	str	r3, [sp, #128]	; 0x80
 800ad3e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ad42:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800ad46:	ee0b 0a10 	vmov	s22, r0
 800ad4a:	9319      	str	r3, [sp, #100]	; 0x64
 800ad4c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ad50:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800ad54:	f203 434c 	addw	r3, r3, #1100	; 0x44c
 800ad58:	931a      	str	r3, [sp, #104]	; 0x68
 800ad5a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ad5e:	eddf 4a25 	vldr	s9, [pc, #148]	; 800adf4 <m_kalman_3gyro.isra.0.constprop.0+0x364>
 800ad62:	ed9f 5a25 	vldr	s10, [pc, #148]	; 800adf8 <m_kalman_3gyro.isra.0.constprop.0+0x368>
 800ad66:	eddf 5a25 	vldr	s11, [pc, #148]	; 800adfc <m_kalman_3gyro.isra.0.constprop.0+0x36c>
 800ad6a:	ed9f 6a25 	vldr	s12, [pc, #148]	; 800ae00 <m_kalman_3gyro.isra.0.constprop.0+0x370>
 800ad6e:	f203 4384 	addw	r3, r3, #1156	; 0x484
 800ad72:	edd3 6a00 	vldr	s13, [r3]
 800ad76:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ad78:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800ad7c:	edd3 7a00 	vldr	s15, [r3]
 800ad80:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ad84:	eee7 6a85 	vfma.f32	s13, s15, s10
 800ad88:	f203 46cc 	addw	r6, r3, #1228	; 0x4cc
 800ad8c:	f503 659e 	add.w	r5, r3, #1264	; 0x4f0
 800ad90:	ed96 4a00 	vldr	s8, [r6]
 800ad94:	edd5 7a00 	vldr	s15, [r5]
 800ad98:	eee4 6a25 	vfma.f32	s13, s8, s11
 800ad9c:	f50d 65d5 	add.w	r5, sp, #1704	; 0x6a8
 800ada0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ada4:	ed95 3b00 	vldr	d3, [r5]
 800ada8:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800adac:	eee7 6a86 	vfma.f32	s13, s15, s12
 800adb0:	f204 4764 	addw	r7, r4, #1124	; 0x464
 800adb4:	f504 6691 	add.w	r6, r4, #1160	; 0x488
 800adb8:	ed84 3b0e 	vstr	d3, [r4, #56]	; 0x38
 800adbc:	f504 659a 	add.w	r5, r4, #1232	; 0x4d0
 800adc0:	f204 4cf4 	addw	ip, r4, #1268	; 0x4f4
 800adc4:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800adc6:	9731      	str	r7, [sp, #196]	; 0xc4
 800adc8:	ed84 7a00 	vstr	s14, [r4]
 800adcc:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800add0:	edc4 6af8 	vstr	s13, [r4, #992]	; 0x3e0
 800add4:	edd6 7a00 	vldr	s15, [r6]
 800add8:	edd7 3a00 	vldr	s7, [r7]
 800addc:	ed95 4a00 	vldr	s8, [r5]
 800ade0:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800ade4:	e00e      	b.n	800ae04 <m_kalman_3gyro.isra.0.constprop.0+0x374>
 800ade6:	bf00      	nop
 800ade8:	08014f40 	.word	0x08014f40
 800adec:	20001698 	.word	0x20001698
 800adf0:	3ca3d70a 	.word	0x3ca3d70a
 800adf4:	bdcccccd 	.word	0xbdcccccd
 800adf8:	be4ccccd 	.word	0xbe4ccccd
 800adfc:	3dcccccd 	.word	0x3dcccccd
 800ae00:	3e4ccccd 	.word	0x3e4ccccd
 800ae04:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 800ae08:	ed9c 7a00 	vldr	s14, [ip]
 800ae0c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800ae10:	f204 478c 	addw	r7, r4, #1164	; 0x48c
 800ae14:	eee3 7a85 	vfma.f32	s15, s7, s10
 800ae18:	f504 648d 	add.w	r4, r4, #1128	; 0x468
 800ae1c:	941b      	str	r4, [sp, #108]	; 0x6c
 800ae1e:	f505 649f 	add.w	r4, r5, #1272	; 0x4f8
 800ae22:	eee4 7a25 	vfma.f32	s15, s8, s11
 800ae26:	f205 46d4 	addw	r6, r5, #1236	; 0x4d4
 800ae2a:	9400      	str	r4, [sp, #0]
 800ae2c:	f505 6492 	add.w	r4, r5, #1168	; 0x490
 800ae30:	f205 456c 	addw	r5, r5, #1132	; 0x46c
 800ae34:	951c      	str	r5, [sp, #112]	; 0x70
 800ae36:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 800ae3a:	eee7 7a06 	vfma.f32	s15, s14, s12
 800ae3e:	f205 4efc 	addw	lr, r5, #1276	; 0x4fc
 800ae42:	f505 6c9b 	add.w	ip, r5, #1240	; 0x4d8
 800ae46:	f205 4994 	addw	r9, r5, #1172	; 0x494
 800ae4a:	f505 658e 	add.w	r5, r5, #1136	; 0x470
 800ae4e:	951d      	str	r5, [sp, #116]	; 0x74
 800ae50:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 800ae54:	edc5 7af9 	vstr	s15, [r5, #996]	; 0x3e4
 800ae58:	ed97 7a00 	vldr	s14, [r7]
 800ae5c:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800ae5e:	ed96 4a00 	vldr	s8, [r6]
 800ae62:	edd7 3a00 	vldr	s7, [r7]
 800ae66:	9f07      	ldr	r7, [sp, #28]
 800ae68:	ee27 7a24 	vmul.f32	s14, s14, s9
 800ae6c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 800ae70:	eea3 7a85 	vfma.f32	s14, s7, s10
 800ae74:	f505 6293 	add.w	r2, r5, #1176	; 0x498
 800ae78:	f205 46dc 	addw	r6, r5, #1244	; 0x4dc
 800ae7c:	f505 63a0 	add.w	r3, r5, #1280	; 0x500
 800ae80:	eea4 7a25 	vfma.f32	s14, s8, s11
 800ae84:	9d00      	ldr	r5, [sp, #0]
 800ae86:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800ae8a:	ed95 4a00 	vldr	s8, [r5]
 800ae8e:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 800ae92:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800ae96:	eea4 7a06 	vfma.f32	s14, s8, s12
 800ae9a:	f201 4774 	addw	r7, r1, #1140	; 0x474
 800ae9e:	9732      	str	r7, [sp, #200]	; 0xc8
 800aea0:	f501 619c 	add.w	r1, r1, #1248	; 0x4e0
 800aea4:	ed85 7afa 	vstr	s14, [r5, #1000]	; 0x3e8
 800aea8:	ed94 4a00 	vldr	s8, [r4]
 800aeac:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800aeb0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800aeb2:	f204 449c 	addw	r4, r4, #1180	; 0x49c
 800aeb6:	9423      	str	r4, [sp, #140]	; 0x8c
 800aeb8:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800aebc:	edd5 3a00 	vldr	s7, [r5]
 800aec0:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 800aec4:	ee24 4a24 	vmul.f32	s8, s8, s9
 800aec8:	f504 648f 	add.w	r4, r4, #1144	; 0x478
 800aecc:	9413      	str	r4, [sp, #76]	; 0x4c
 800aece:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800aed2:	eea3 4a85 	vfma.f32	s8, s7, s10
 800aed6:	f204 44e4 	addw	r4, r4, #1252	; 0x4e4
 800aeda:	9426      	str	r4, [sp, #152]	; 0x98
 800aedc:	eddc 3a00 	vldr	s7, [ip]
 800aee0:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800aee4:	f505 6ca1 	add.w	ip, r5, #1288	; 0x508
 800aee8:	eea3 4aa5 	vfma.f32	s8, s7, s11
 800aeec:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 800aef0:	f504 6c94 	add.w	ip, r4, #1184	; 0x4a0
 800aef4:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800aef8:	edde 3a00 	vldr	s7, [lr]
 800aefc:	f8cd c090 	str.w	ip, [sp, #144]	; 0x90
 800af00:	f204 4c7c 	addw	ip, r4, #1148	; 0x47c
 800af04:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 800af08:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 800af0c:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800af10:	eea3 4a86 	vfma.f32	s8, s7, s12
 800af14:	f505 6c9d 	add.w	ip, r5, #1256	; 0x4e8
 800af18:	f8cd c09c 	str.w	ip, [sp, #156]	; 0x9c
 800af1c:	f204 5c0c 	addw	ip, r4, #1292	; 0x50c
 800af20:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800af24:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800af26:	ed84 4afb 	vstr	s8, [r4, #1004]	; 0x3ec
 800af2a:	ed99 4a00 	vldr	s8, [r9]
 800af2e:	edd5 3a00 	vldr	s7, [r5]
 800af32:	f8cd c0a8 	str.w	ip, [sp, #168]	; 0xa8
 800af36:	ee24 4a24 	vmul.f32	s8, s8, s9
 800af3a:	f200 5004 	addw	r0, r0, #1284	; 0x504
 800af3e:	eea3 4a85 	vfma.f32	s8, s7, s10
 800af42:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 800af46:	edd6 3a00 	vldr	s7, [r6]
 800af4a:	f8dd 66d0 	ldr.w	r6, [sp, #1744]	; 0x6d0
 800af4e:	eea3 4aa5 	vfma.f32	s8, s7, s11
 800af52:	f204 4ca4 	addw	ip, r4, #1188	; 0x4a4
 800af56:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
 800af5a:	edd3 3a00 	vldr	s7, [r3]
 800af5e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800af62:	eea3 4a86 	vfma.f32	s8, s7, s12
 800af66:	f504 6c90 	add.w	ip, r4, #1152	; 0x480
 800af6a:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800af6e:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 800af72:	ed83 4afc 	vstr	s8, [r3, #1008]	; 0x3f0
 800af76:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800af7a:	edd2 7a00 	vldr	s15, [r2]
 800af7e:	ed97 4a00 	vldr	s8, [r7]
 800af82:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800af86:	eee6 3aa6 	vfma.f32	s7, s13, s13
 800af8a:	f205 4cec 	addw	ip, r5, #1260	; 0x4ec
 800af8e:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
 800af92:	eee4 7a05 	vfma.f32	s15, s8, s10
 800af96:	46a4      	mov	ip, r4
 800af98:	f50c 7c0e 	add.w	ip, ip, #568	; 0x238
 800af9c:	eef0 6a63 	vmov.f32	s13, s7
 800afa0:	edd1 3a00 	vldr	s7, [r1]
 800afa4:	ed90 4a00 	vldr	s8, [r0]
 800afa8:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 800afac:	eee3 7aa5 	vfma.f32	s15, s7, s11
 800afb0:	469c      	mov	ip, r3
 800afb2:	f503 7705 	add.w	r7, r3, #532	; 0x214
 800afb6:	eee7 6a07 	vfma.f32	s13, s14, s14
 800afba:	f506 66a2 	add.w	r6, r6, #1296	; 0x510
 800afbe:	963b      	str	r6, [sp, #236]	; 0xec
 800afc0:	eee4 7a06 	vfma.f32	s15, s8, s12
 800afc4:	9733      	str	r7, [sp, #204]	; 0xcc
 800afc6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800afca:	ee16 0a90 	vmov	r0, s13
 800afce:	edc3 7afd 	vstr	s15, [r3, #1012]	; 0x3f4
 800afd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800afd4:	edd3 7a00 	vldr	s15, [r3]
 800afd8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800afda:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800afde:	ed93 4a00 	vldr	s8, [r3]
 800afe2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800afe4:	eee4 7a05 	vfma.f32	s15, s8, s10
 800afe8:	edd3 6a00 	vldr	s13, [r3]
 800afec:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 800afee:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800aff0:	ed95 7a00 	vldr	s14, [r5]
 800aff4:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800aff6:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800affa:	ee2e ca68 	vnmul.f32	s24, s28, s17
 800affe:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b002:	eea9 ca2d 	vfma.f32	s24, s18, s27
 800b006:	edcc 7afe 	vstr	s15, [ip, #1016]	; 0x3f8
 800b00a:	edd3 7a00 	vldr	s15, [r3]
 800b00e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b010:	edd5 6a00 	vldr	s13, [r5]
 800b014:	ed93 4a00 	vldr	s8, [r3]
 800b018:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800b01a:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800b01c:	ed93 7a00 	vldr	s14, [r3]
 800b020:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b022:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800b026:	eee4 7a05 	vfma.f32	s15, s8, s10
 800b02a:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800b02e:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b032:	edcc 7aff 	vstr	s15, [ip, #1020]	; 0x3fc
 800b036:	edd5 ba00 	vldr	s23, [r5]
 800b03a:	edd3 6a00 	vldr	s13, [r3]
 800b03e:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800b040:	edd6 7a00 	vldr	s15, [r6]
 800b044:	ed95 7a00 	vldr	s14, [r5]
 800b048:	ee6b baa4 	vmul.f32	s23, s23, s9
 800b04c:	eee6 ba85 	vfma.f32	s23, s13, s10
 800b050:	eee7 ba25 	vfma.f32	s23, s14, s11
 800b054:	eee7 ba86 	vfma.f32	s23, s15, s12
 800b058:	edc4 ba00 	vstr	s23, [r4]
 800b05c:	f7f5 fa18 	bl	8000490 <__aeabi_f2d>
 800b060:	ec41 0b10 	vmov	d0, r0, r1
 800b064:	f008 f90c 	bl	8013280 <sqrt>
 800b068:	ec51 0b10 	vmov	r0, r1, d0
 800b06c:	f7f5 fd60 	bl	8000b30 <__aeabi_d2f>
 800b070:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800b074:	4cb4      	ldr	r4, [pc, #720]	; (800b348 <m_kalman_3gyro.isra.0.constprop.0+0x8b8>)
 800b076:	edd2 7afc 	vldr	s15, [r2, #1008]	; 0x3f0
 800b07a:	edd2 6afb 	vldr	s13, [r2, #1004]	; 0x3ec
 800b07e:	ed92 7afd 	vldr	s14, [r2, #1012]	; 0x3f4
 800b082:	900c      	str	r0, [sp, #48]	; 0x30
 800b084:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b088:	ee0e 0a90 	vmov	s29, r0
 800b08c:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800b090:	f8c4 01a0 	str.w	r0, [r4, #416]	; 0x1a0
 800b094:	eee7 7a07 	vfma.f32	s15, s14, s14
 800b098:	ee17 0a90 	vmov	r0, s15
 800b09c:	f7f5 f9f8 	bl	8000490 <__aeabi_f2d>
 800b0a0:	ec41 0b10 	vmov	d0, r0, r1
 800b0a4:	f008 f8ec 	bl	8013280 <sqrt>
 800b0a8:	ec51 0b10 	vmov	r0, r1, d0
 800b0ac:	f7f5 fd40 	bl	8000b30 <__aeabi_d2f>
 800b0b0:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800b0b4:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
 800b0b8:	edd2 7aff 	vldr	s15, [r2, #1020]	; 0x3fc
 800b0bc:	ed92 7afe 	vldr	s14, [r2, #1016]	; 0x3f8
 800b0c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b0c4:	ee0f 0a90 	vmov	s31, r0
 800b0c8:	eee7 7a07 	vfma.f32	s15, s14, s14
 800b0cc:	eeeb 7aab 	vfma.f32	s15, s23, s23
 800b0d0:	ee6d bae9 	vnmul.f32	s23, s27, s19
 800b0d4:	ee17 0a90 	vmov	r0, s15
 800b0d8:	f7f5 f9da 	bl	8000490 <__aeabi_f2d>
 800b0dc:	ec41 0b10 	vmov	d0, r0, r1
 800b0e0:	f008 f8ce 	bl	8013280 <sqrt>
 800b0e4:	eee8 ba88 	vfma.f32	s23, s17, s16
 800b0e8:	ec51 0b10 	vmov	r0, r1, d0
 800b0ec:	f7f5 fd20 	bl	8000b30 <__aeabi_d2f>
 800b0f0:	ee29 8a48 	vnmul.f32	s16, s18, s16
 800b0f4:	ee6b 7aab 	vmul.f32	s15, s23, s23
 800b0f8:	eeae 8a29 	vfma.f32	s16, s28, s19
 800b0fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b0fe:	9017      	str	r0, [sp, #92]	; 0x5c
 800b100:	eeec 7a0c 	vfma.f32	s15, s24, s24
 800b104:	ee07 0a10 	vmov	s14, r0
 800b108:	eee8 7a08 	vfma.f32	s15, s16, s16
 800b10c:	edc2 ea00 	vstr	s29, [r2]
 800b110:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800b114:	edca fa00 	vstr	s31, [sl]
 800b118:	ee17 0a90 	vmov	r0, s15
 800b11c:	ed8b 7a00 	vstr	s14, [fp]
 800b120:	ed84 7a6a 	vstr	s14, [r4, #424]	; 0x1a8
 800b124:	edc2 9a90 	vstr	s19, [r2, #576]	; 0x240
 800b128:	ed82 9a93 	vstr	s18, [r2, #588]	; 0x24c
 800b12c:	edc2 8a96 	vstr	s17, [r2, #600]	; 0x258
 800b130:	f7f5 f9ae 	bl	8000490 <__aeabi_f2d>
 800b134:	ec41 0b10 	vmov	d0, r0, r1
 800b138:	f008 f8a2 	bl	8013280 <sqrt>
 800b13c:	ec51 0b10 	vmov	r0, r1, d0
 800b140:	f7f5 fcf6 	bl	8000b30 <__aeabi_d2f>
 800b144:	ee07 0a90 	vmov	s15, r0
 800b148:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b14c:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800b150:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b154:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b156:	aa79      	add	r2, sp, #484	; 0x1e4
 800b158:	4638      	mov	r0, r7
 800b15a:	ee2c ca27 	vmul.f32	s24, s24, s15
 800b15e:	ee6b baa7 	vmul.f32	s23, s23, s15
 800b162:	ee28 8a27 	vmul.f32	s16, s16, s15
 800b166:	ee6c ea68 	vnmul.f32	s29, s24, s17
 800b16a:	ee28 fa49 	vnmul.f32	s30, s16, s18
 800b16e:	ee2b eae9 	vnmul.f32	s28, s23, s19
 800b172:	eea8 faab 	vfma.f32	s30, s17, s23
 800b176:	eee9 ea88 	vfma.f32	s29, s19, s16
 800b17a:	eea9 ea0c 	vfma.f32	s28, s18, s24
 800b17e:	ed83 ca8f 	vstr	s24, [r3, #572]	; 0x23c
 800b182:	edc3 ba92 	vstr	s23, [r3, #584]	; 0x248
 800b186:	ed83 8a95 	vstr	s16, [r3, #596]	; 0x254
 800b18a:	ed83 fa8e 	vstr	s30, [r3, #568]	; 0x238
 800b18e:	edc3 ea91 	vstr	s29, [r3, #580]	; 0x244
 800b192:	ed83 ea94 	vstr	s28, [r3, #592]	; 0x250
 800b196:	f7fd f9d7 	bl	8008548 <m_mldivide>
 800b19a:	a879      	add	r0, sp, #484	; 0x1e4
 800b19c:	a947      	add	r1, sp, #284	; 0x11c
 800b19e:	f7fd ffe7 	bl	8009170 <m_dcm2q_eml>
 800b1a2:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b1a6:	f5a3 70ae 	sub.w	r0, r3, #348	; 0x15c
 800b1aa:	f8d3 23ac 	ldr.w	r2, [r3, #940]	; 0x3ac
 800b1ae:	f8d3 13b0 	ldr.w	r1, [r3, #944]	; 0x3b0
 800b1b2:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 800b1b6:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800b1ba:	f8c3 13bc 	str.w	r1, [r3, #956]	; 0x3bc
 800b1be:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
 800b1c2:	3b0c      	subs	r3, #12
 800b1c4:	4298      	cmp	r0, r3
 800b1c6:	d1f0      	bne.n	800b1aa <m_kalman_3gyro.isra.0.constprop.0+0x71a>
 800b1c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b1cc:	ee87 6a8a 	vdiv.f32	s12, s15, s20
 800b1d0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b1d4:	f8cd 80bc 	str.w	r8, [sp, #188]	; 0xbc
 800b1d8:	ac40      	add	r4, sp, #256	; 0x100
 800b1da:	f508 72ae 	add.w	r2, r8, #348	; 0x15c
 800b1de:	4641      	mov	r1, r8
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	eddd 6a47 	vldr	s13, [sp, #284]	; 0x11c
 800b1e6:	ed9d 7a48 	vldr	s14, [sp, #288]	; 0x120
 800b1ea:	eddd 7a49 	vldr	s15, [sp, #292]	; 0x124
 800b1ee:	eddf 5a57 	vldr	s11, [pc, #348]	; 800b34c <m_kalman_3gyro.isra.0.constprop.0+0x8bc>
 800b1f2:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800b1f6:	ee37 7a07 	vadd.f32	s14, s14, s14
 800b1fa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b1fe:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b202:	ee27 7a06 	vmul.f32	s14, s14, s12
 800b206:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b20a:	ed9f 6a51 	vldr	s12, [pc, #324]	; 800b350 <m_kalman_3gyro.isra.0.constprop.0+0x8c0>
 800b20e:	edc3 6a97 	vstr	s13, [r3, #604]	; 0x25c
 800b212:	ed83 7a98 	vstr	s14, [r3, #608]	; 0x260
 800b216:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264
 800b21a:	edd1 6a00 	vldr	s13, [r1]
 800b21e:	3001      	adds	r0, #1
 800b220:	eef0 7a66 	vmov.f32	s15, s13
 800b224:	460b      	mov	r3, r1
 800b226:	330c      	adds	r3, #12
 800b228:	ed93 7a00 	vldr	s14, [r3]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b232:	d1f8      	bne.n	800b226 <m_kalman_3gyro.isra.0.constprop.0+0x796>
 800b234:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800b238:	460b      	mov	r3, r1
 800b23a:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800b23e:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800b242:	edd3 7a03 	vldr	s15, [r3, #12]
 800b246:	330c      	adds	r3, #12
 800b248:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b24c:	4293      	cmp	r3, r2
 800b24e:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800b252:	d1f6      	bne.n	800b242 <m_kalman_3gyro.isra.0.constprop.0+0x7b2>
 800b254:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b258:	2803      	cmp	r0, #3
 800b25a:	f101 0104 	add.w	r1, r1, #4
 800b25e:	ece4 6a01 	vstmia	r4!, {s13}
 800b262:	f103 0204 	add.w	r2, r3, #4
 800b266:	d1d8      	bne.n	800b21a <m_kalman_3gyro.isra.0.constprop.0+0x78a>
 800b268:	9840      	ldr	r0, [sp, #256]	; 0x100
 800b26a:	f7f5 f911 	bl	8000490 <__aeabi_f2d>
 800b26e:	ec41 0b10 	vmov	d0, r0, r1
 800b272:	f008 f805 	bl	8013280 <sqrt>
 800b276:	ec51 0b10 	vmov	r0, r1, d0
 800b27a:	f7f5 fc59 	bl	8000b30 <__aeabi_d2f>
 800b27e:	ee0d 0a90 	vmov	s27, r0
 800b282:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b284:	edcd da40 	vstr	s27, [sp, #256]	; 0x100
 800b288:	f7f5 f902 	bl	8000490 <__aeabi_f2d>
 800b28c:	ec41 0b10 	vmov	d0, r0, r1
 800b290:	f007 fff6 	bl	8013280 <sqrt>
 800b294:	ec51 0b10 	vmov	r0, r1, d0
 800b298:	f7f5 fc4a 	bl	8000b30 <__aeabi_d2f>
 800b29c:	ee0a 0a10 	vmov	s20, r0
 800b2a0:	9842      	ldr	r0, [sp, #264]	; 0x108
 800b2a2:	ed8d aa41 	vstr	s20, [sp, #260]	; 0x104
 800b2a6:	f7f5 f8f3 	bl	8000490 <__aeabi_f2d>
 800b2aa:	ec41 0b10 	vmov	d0, r0, r1
 800b2ae:	f007 ffe7 	bl	8013280 <sqrt>
 800b2b2:	ee2a aa0a 	vmul.f32	s20, s20, s20
 800b2b6:	ec51 0b10 	vmov	r0, r1, d0
 800b2ba:	f7f5 fc39 	bl	8000b30 <__aeabi_d2f>
 800b2be:	eead aaad 	vfma.f32	s20, s27, s27
 800b2c2:	9042      	str	r0, [sp, #264]	; 0x108
 800b2c4:	f8cd 8010 	str.w	r8, [sp, #16]
 800b2c8:	ee07 0a90 	vmov	s15, r0
 800b2cc:	eea7 aaa7 	vfma.f32	s20, s15, s15
 800b2d0:	f20d 4adc 	addw	sl, sp, #1244	; 0x4dc
 800b2d4:	f50d 7b66 	add.w	fp, sp, #920	; 0x398
 800b2d8:	ee1a 0a10 	vmov	r0, s20
 800b2dc:	f7f5 f8d8 	bl	8000490 <__aeabi_f2d>
 800b2e0:	ec41 0b10 	vmov	d0, r0, r1
 800b2e4:	f007 ffcc 	bl	8013280 <sqrt>
 800b2e8:	ec51 0b10 	vmov	r0, r1, d0
 800b2ec:	f7f5 fc20 	bl	8000b30 <__aeabi_d2f>
 800b2f0:	4b15      	ldr	r3, [pc, #84]	; (800b348 <m_kalman_3gyro.isra.0.constprop.0+0x8b8>)
 800b2f2:	ed93 aa27 	vldr	s20, [r3, #156]	; 0x9c
 800b2f6:	edd3 da28 	vldr	s27, [r3, #160]	; 0xa0
 800b2fa:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b2fe:	f8c3 03c4 	str.w	r0, [r3, #964]	; 0x3c4
 800b302:	f20d 3397 	addw	r3, sp, #919	; 0x397
 800b306:	f1c3 0301 	rsb	r3, r3, #1
 800b30a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b30c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b310:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800b314:	9306      	str	r3, [sp, #24]
 800b316:	2300      	movs	r3, #0
 800b318:	9305      	str	r3, [sp, #20]
 800b31a:	9b05      	ldr	r3, [sp, #20]
 800b31c:	9a04      	ldr	r2, [sp, #16]
 800b31e:	3301      	adds	r3, #1
 800b320:	9305      	str	r3, [sp, #20]
 800b322:	4653      	mov	r3, sl
 800b324:	f852 1b0c 	ldr.w	r1, [r2], #12
 800b328:	f843 1b04 	str.w	r1, [r3], #4
 800b32c:	f20d 5154 	addw	r1, sp, #1364	; 0x554
 800b330:	428b      	cmp	r3, r1
 800b332:	d1f7      	bne.n	800b324 <m_kalman_3gyro.isra.0.constprop.0+0x894>
 800b334:	2101      	movs	r1, #1
 800b336:	221e      	movs	r2, #30
 800b338:	a88b      	add	r0, sp, #556	; 0x22c
 800b33a:	f007 fdbf 	bl	8012ebc <memset>
 800b33e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b340:	f20d 3397 	addw	r3, sp, #919	; 0x397
 800b344:	e00a      	b.n	800b35c <m_kalman_3gyro.isra.0.constprop.0+0x8cc>
 800b346:	bf00      	nop
 800b348:	20001698 	.word	0x20001698
 800b34c:	3d088889 	.word	0x3d088889
 800b350:	3d0d3dcb 	.word	0x3d0d3dcb
 800b354:	3f333333 	.word	0x3f333333
 800b358:	3f4ccccd 	.word	0x3f4ccccd
 800b35c:	18ca      	adds	r2, r1, r3
 800b35e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b362:	f20d 32b5 	addw	r2, sp, #949	; 0x3b5
 800b366:	4293      	cmp	r3, r2
 800b368:	d1f8      	bne.n	800b35c <m_kalman_3gyro.isra.0.constprop.0+0x8cc>
 800b36a:	ed9a 7a00 	vldr	s14, [sl]
 800b36e:	edda 7a01 	vldr	s15, [sl, #4]
 800b372:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b376:	ed9a 7a02 	vldr	s14, [sl, #8]
 800b37a:	edda 7a03 	vldr	s15, [sl, #12]
 800b37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b382:	bf88      	it	hi
 800b384:	f44f 7381 	movhi.w	r3, #258	; 0x102
 800b388:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b38c:	ed9a 7a04 	vldr	s14, [sl, #16]
 800b390:	edda 7a05 	vldr	s15, [sl, #20]
 800b394:	bf88      	it	hi
 800b396:	f8ab 3000 	strhhi.w	r3, [fp]
 800b39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b39e:	bf88      	it	hi
 800b3a0:	f44f 7341 	movhi.w	r3, #772	; 0x304
 800b3a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b3a8:	ed9a 7a06 	vldr	s14, [sl, #24]
 800b3ac:	edda 7a07 	vldr	s15, [sl, #28]
 800b3b0:	bf88      	it	hi
 800b3b2:	f8ab 3002 	strhhi.w	r3, [fp, #2]
 800b3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3ba:	bf88      	it	hi
 800b3bc:	f240 5306 	movwhi	r3, #1286	; 0x506
 800b3c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b3c4:	ed9a 7a08 	vldr	s14, [sl, #32]
 800b3c8:	edda 7a09 	vldr	s15, [sl, #36]	; 0x24
 800b3cc:	bf88      	it	hi
 800b3ce:	f8ab 3004 	strhhi.w	r3, [fp, #4]
 800b3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3d6:	bf88      	it	hi
 800b3d8:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 800b3dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b3e0:	ed9a 7a0a 	vldr	s14, [sl, #40]	; 0x28
 800b3e4:	edda 7a0b 	vldr	s15, [sl, #44]	; 0x2c
 800b3e8:	bf88      	it	hi
 800b3ea:	f8ab 3006 	strhhi.w	r3, [fp, #6]
 800b3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3f2:	bf88      	it	hi
 800b3f4:	f640 130a 	movwhi	r3, #2314	; 0x90a
 800b3f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b3fc:	ed9a 7a0c 	vldr	s14, [sl, #48]	; 0x30
 800b400:	edda 7a0d 	vldr	s15, [sl, #52]	; 0x34
 800b404:	bf88      	it	hi
 800b406:	f8ab 3008 	strhhi.w	r3, [fp, #8]
 800b40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b40e:	bf88      	it	hi
 800b410:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 800b414:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b418:	ed9a 7a0e 	vldr	s14, [sl, #56]	; 0x38
 800b41c:	edda 7a0f 	vldr	s15, [sl, #60]	; 0x3c
 800b420:	bf88      	it	hi
 800b422:	f8ab 300a 	strhhi.w	r3, [fp, #10]
 800b426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b42a:	bf88      	it	hi
 800b42c:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 800b430:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b434:	ed9a 7a10 	vldr	s14, [sl, #64]	; 0x40
 800b438:	edda 7a11 	vldr	s15, [sl, #68]	; 0x44
 800b43c:	bf88      	it	hi
 800b43e:	f8ab 300c 	strhhi.w	r3, [fp, #12]
 800b442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b446:	bf88      	it	hi
 800b448:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 800b44c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b450:	ed9a 7a12 	vldr	s14, [sl, #72]	; 0x48
 800b454:	edda 7a13 	vldr	s15, [sl, #76]	; 0x4c
 800b458:	bf88      	it	hi
 800b45a:	f8ab 300e 	strhhi.w	r3, [fp, #14]
 800b45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b462:	bf88      	it	hi
 800b464:	f241 1312 	movwhi	r3, #4370	; 0x1112
 800b468:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b46c:	ed9a 7a14 	vldr	s14, [sl, #80]	; 0x50
 800b470:	edda 7a15 	vldr	s15, [sl, #84]	; 0x54
 800b474:	bf88      	it	hi
 800b476:	f8ab 3010 	strhhi.w	r3, [fp, #16]
 800b47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b47e:	bf88      	it	hi
 800b480:	f241 3314 	movwhi	r3, #4884	; 0x1314
 800b484:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b488:	bf88      	it	hi
 800b48a:	f8ab 3012 	strhhi.w	r3, [fp, #18]
 800b48e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b492:	bf84      	itt	hi
 800b494:	f241 5316 	movwhi	r3, #5398	; 0x1516
 800b498:	f8ab 3014 	strhhi.w	r3, [fp, #20]
 800b49c:	ed9a 7a16 	vldr	s14, [sl, #88]	; 0x58
 800b4a0:	edda 7a17 	vldr	s15, [sl, #92]	; 0x5c
 800b4a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4a8:	ed9a 7a18 	vldr	s14, [sl, #96]	; 0x60
 800b4ac:	edda 7a19 	vldr	s15, [sl, #100]	; 0x64
 800b4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4b4:	bf88      	it	hi
 800b4b6:	f241 7318 	movwhi	r3, #5912	; 0x1718
 800b4ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4be:	ed9a 7a1a 	vldr	s14, [sl, #104]	; 0x68
 800b4c2:	edda 7a1b 	vldr	s15, [sl, #108]	; 0x6c
 800b4c6:	bf88      	it	hi
 800b4c8:	f8ab 3016 	strhhi.w	r3, [fp, #22]
 800b4cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4d0:	bf88      	it	hi
 800b4d2:	f641 131a 	movwhi	r3, #6426	; 0x191a
 800b4d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4da:	ed9a 7a1c 	vldr	s14, [sl, #112]	; 0x70
 800b4de:	edda 7a1d 	vldr	s15, [sl, #116]	; 0x74
 800b4e2:	bf88      	it	hi
 800b4e4:	f8ab 3018 	strhhi.w	r3, [fp, #24]
 800b4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ec:	bf88      	it	hi
 800b4ee:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 800b4f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b4f6:	bf88      	it	hi
 800b4f8:	f8ab 301a 	strhhi.w	r3, [fp, #26]
 800b4fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b500:	bf84      	itt	hi
 800b502:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 800b506:	f8ab 301c 	strhhi.w	r3, [fp, #28]
 800b50a:	2304      	movs	r3, #4
 800b50c:	9303      	str	r3, [sp, #12]
 800b50e:	2302      	movs	r3, #2
 800b510:	9301      	str	r3, [sp, #4]
 800b512:	9a01      	ldr	r2, [sp, #4]
 800b514:	9202      	str	r2, [sp, #8]
 800b516:	4613      	mov	r3, r2
 800b518:	f102 0901 	add.w	r9, r2, #1
 800b51c:	2b1e      	cmp	r3, #30
 800b51e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b522:	9201      	str	r2, [sp, #4]
 800b524:	bf18      	it	ne
 800b526:	2701      	movne	r7, #1
 800b528:	d050      	beq.n	800b5cc <m_kalman_3gyro.isra.0.constprop.0+0xb3c>
 800b52a:	9b01      	ldr	r3, [sp, #4]
 800b52c:	9700      	str	r7, [sp, #0]
 800b52e:	443b      	add	r3, r7
 800b530:	2b1f      	cmp	r3, #31
 800b532:	bfa8      	it	ge
 800b534:	231f      	movge	r3, #31
 800b536:	463a      	mov	r2, r7
 800b538:	eba3 0802 	sub.w	r8, r3, r2
 800b53c:	f1b8 0f00 	cmp.w	r8, #0
 800b540:	461f      	mov	r7, r3
 800b542:	dd3d      	ble.n	800b5c0 <m_kalman_3gyro.isra.0.constprop.0+0xb30>
 800b544:	4616      	mov	r6, r2
 800b546:	464d      	mov	r5, r9
 800b548:	2401      	movs	r4, #1
 800b54a:	e008      	b.n	800b55e <m_kalman_3gyro.isra.0.constprop.0+0xace>
 800b54c:	3501      	adds	r5, #1
 800b54e:	42af      	cmp	r7, r5
 800b550:	f80c 2c01 	strb.w	r2, [ip, #-1]
 800b554:	f000 8402 	beq.w	800bd5c <m_kalman_3gyro.isra.0.constprop.0+0x12cc>
 800b558:	3401      	adds	r4, #1
 800b55a:	45a0      	cmp	r8, r4
 800b55c:	db29      	blt.n	800b5b2 <m_kalman_3gyro.isra.0.constprop.0+0xb22>
 800b55e:	f106 3eff 	add.w	lr, r6, #4294967295
 800b562:	1e69      	subs	r1, r5, #1
 800b564:	f91b 300e 	ldrsb.w	r3, [fp, lr]
 800b568:	f91b 2001 	ldrsb.w	r2, [fp, r1]
 800b56c:	eb0a 0c83 	add.w	ip, sl, r3, lsl #2
 800b570:	eb0a 0082 	add.w	r0, sl, r2, lsl #2
 800b574:	ed1c 7a01 	vldr	s14, [ip, #-4]
 800b578:	ed50 7a01 	vldr	s15, [r0, #-4]
 800b57c:	a88b      	add	r0, sp, #556	; 0x22c
 800b57e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b582:	eb00 0c04 	add.w	ip, r0, r4
 800b586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b58a:	4660      	mov	r0, ip
 800b58c:	d8de      	bhi.n	800b54c <m_kalman_3gyro.isra.0.constprop.0+0xabc>
 800b58e:	3601      	adds	r6, #1
 800b590:	454e      	cmp	r6, r9
 800b592:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800b596:	d1df      	bne.n	800b558 <m_kalman_3gyro.isra.0.constprop.0+0xac8>
 800b598:	42bd      	cmp	r5, r7
 800b59a:	eba7 0205 	sub.w	r2, r7, r5
 800b59e:	4459      	add	r1, fp
 800b5a0:	dada      	bge.n	800b558 <m_kalman_3gyro.isra.0.constprop.0+0xac8>
 800b5a2:	443c      	add	r4, r7
 800b5a4:	1b64      	subs	r4, r4, r5
 800b5a6:	3401      	adds	r4, #1
 800b5a8:	f007 fc7a 	bl	8012ea0 <memcpy>
 800b5ac:	45a0      	cmp	r8, r4
 800b5ae:	463d      	mov	r5, r7
 800b5b0:	dad5      	bge.n	800b55e <m_kalman_3gyro.isra.0.constprop.0+0xace>
 800b5b2:	9b00      	ldr	r3, [sp, #0]
 800b5b4:	1e58      	subs	r0, r3, #1
 800b5b6:	4458      	add	r0, fp
 800b5b8:	4642      	mov	r2, r8
 800b5ba:	a98b      	add	r1, sp, #556	; 0x22c
 800b5bc:	f007 fc70 	bl	8012ea0 <memcpy>
 800b5c0:	9b02      	ldr	r3, [sp, #8]
 800b5c2:	eb07 0903 	add.w	r9, r7, r3
 800b5c6:	f1b9 0f1e 	cmp.w	r9, #30
 800b5ca:	ddae      	ble.n	800b52a <m_kalman_3gyro.isra.0.constprop.0+0xa9a>
 800b5cc:	9b03      	ldr	r3, [sp, #12]
 800b5ce:	3b01      	subs	r3, #1
 800b5d0:	9303      	str	r3, [sp, #12]
 800b5d2:	d19e      	bne.n	800b512 <m_kalman_3gyro.isra.0.constprop.0+0xa82>
 800b5d4:	f99b 200e 	ldrsb.w	r2, [fp, #14]
 800b5d8:	f99b 300f 	ldrsb.w	r3, [fp, #15]
 800b5dc:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800b5e0:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800b5e4:	ed52 7a01 	vldr	s15, [r2, #-4]
 800b5e8:	ed13 7a01 	vldr	s14, [r3, #-4]
 800b5ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b5f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5f4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b5f8:	bf4c      	ite	mi
 800b5fa:	2201      	movmi	r2, #1
 800b5fc:	2200      	movpl	r2, #0
 800b5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b602:	bf4c      	ite	mi
 800b604:	2301      	movmi	r3, #1
 800b606:	2300      	movpl	r3, #0
 800b608:	429a      	cmp	r2, r3
 800b60a:	f000 83b5 	beq.w	800bd78 <m_kalman_3gyro.isra.0.constprop.0+0x12e8>
 800b60e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b612:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b616:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b61a:	9b06      	ldr	r3, [sp, #24]
 800b61c:	ece3 7a01 	vstmia	r3!, {s15}
 800b620:	9306      	str	r3, [sp, #24]
 800b622:	9b04      	ldr	r3, [sp, #16]
 800b624:	3304      	adds	r3, #4
 800b626:	9304      	str	r3, [sp, #16]
 800b628:	9b05      	ldr	r3, [sp, #20]
 800b62a:	2b03      	cmp	r3, #3
 800b62c:	f47f ae75 	bne.w	800b31a <m_kalman_3gyro.isra.0.constprop.0+0x88a>
 800b630:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b634:	ed1f aab9 	vldr	s20, [pc, #-740]	; 800b354 <m_kalman_3gyro.isra.0.constprop.0+0x8c4>
 800b638:	edd3 7af3 	vldr	s15, [r3, #972]	; 0x3cc
 800b63c:	edd3 6af2 	vldr	s13, [r3, #968]	; 0x3c8
 800b640:	ed93 7af4 	vldr	s14, [r3, #976]	; 0x3d0
 800b644:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b648:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800b64c:	eee7 7a07 	vfma.f32	s15, s14, s14
 800b650:	ee17 0a90 	vmov	r0, s15
 800b654:	f7f4 ff1c 	bl	8000490 <__aeabi_f2d>
 800b658:	ec41 0b10 	vmov	d0, r0, r1
 800b65c:	f007 fe10 	bl	8013280 <sqrt>
 800b660:	ec51 0b10 	vmov	r0, r1, d0
 800b664:	f7f5 fa64 	bl	8000b30 <__aeabi_d2f>
 800b668:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 800b66c:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800b670:	eddd 4a17 	vldr	s9, [sp, #92]	; 0x5c
 800b674:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800b676:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800b67a:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800b67e:	ee6f 7aa6 	vmul.f32	s15, s31, s13
 800b682:	ee86 7a07 	vdiv.f32	s14, s12, s14
 800b686:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
 800b68a:	ed83 7a00 	vstr	s14, [r3]
 800b68e:	eec7 5a86 	vdiv.f32	s11, s15, s12
 800b692:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800b694:	ee24 5aa6 	vmul.f32	s10, s9, s13
 800b698:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 800b69c:	edc3 5a00 	vstr	s11, [r3]
 800b6a0:	ee85 6a06 	vdiv.f32	s12, s10, s12
 800b6a4:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800b6a6:	ee77 7a25 	vadd.f32	s15, s14, s11
 800b6aa:	ee0d 0a90 	vmov	s27, r0
 800b6ae:	ee24 aa8a 	vmul.f32	s20, s9, s20
 800b6b2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b6b6:	eeaf aa87 	vfma.f32	s20, s31, s14
 800b6ba:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b6be:	ee2d 7a87 	vmul.f32	s14, s27, s14
 800b6c2:	ed83 6a00 	vstr	s12, [r3]
 800b6c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b6cc:	ed5f 5ade 	vldr	s11, [pc, #-888]	; 800b358 <m_kalman_3gyro.isra.0.constprop.0+0x8c8>
 800b6d0:	ed83 7a00 	vstr	s14, [r3]
 800b6d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b6d8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b6da:	ee2a aa25 	vmul.f32	s20, s20, s11
 800b6de:	edc3 7a00 	vstr	s15, [r3]
 800b6e2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800b6e4:	ed83 aa00 	vstr	s20, [r3]
 800b6e8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b6ec:	f893 38ce 	ldrb.w	r3, [r3, #2254]	; 0x8ce
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	f000 8360 	beq.w	800bdb6 <m_kalman_3gyro.isra.0.constprop.0+0x1326>
 800b6f6:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b6fa:	f603 06c4 	addw	r6, r3, #2244	; 0x8c4
 800b6fe:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 800b702:	9300      	str	r3, [sp, #0]
 800b704:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b708:	f503 690c 	add.w	r9, r3, #2240	; 0x8c0
 800b70c:	f603 08bc 	addw	r8, r3, #2236	; 0x8bc
 800b710:	f603 07b8 	addw	r7, r3, #2232	; 0x8b8
 800b714:	ed96 7a00 	vldr	s14, [r6]
 800b718:	9b00      	ldr	r3, [sp, #0]
 800b71a:	ed8d 7a05 	vstr	s14, [sp, #20]
 800b71e:	ed83 7a00 	vstr	s14, [r3]
 800b722:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b726:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800b72a:	f7f5 fa01 	bl	8000b30 <__aeabi_d2f>
 800b72e:	ed99 6a00 	vldr	s12, [r9]
 800b732:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800b736:	ed86 6a00 	vstr	s12, [r6]
 800b73a:	4603      	mov	r3, r0
 800b73c:	e9d2 0108 	ldrd	r0, r1, [r2, #32]
 800b740:	ed8d 6a04 	vstr	s12, [sp, #16]
 800b744:	9301      	str	r3, [sp, #4]
 800b746:	f7f5 f9f3 	bl	8000b30 <__aeabi_d2f>
 800b74a:	edd8 7a00 	vldr	s15, [r8]
 800b74e:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800b752:	edc9 7a00 	vstr	s15, [r9]
 800b756:	4603      	mov	r3, r0
 800b758:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
 800b75c:	edcd 7a02 	vstr	s15, [sp, #8]
 800b760:	9300      	str	r3, [sp, #0]
 800b762:	f7f5 f9e5 	bl	8000b30 <__aeabi_d2f>
 800b766:	eddd 7a02 	vldr	s15, [sp, #8]
 800b76a:	ed9d 6a04 	vldr	s12, [sp, #16]
 800b76e:	edd7 6a00 	vldr	s13, [r7]
 800b772:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b776:	edc8 6a00 	vstr	s13, [r8]
 800b77a:	ee07 0a10 	vmov	s14, r0
 800b77e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b782:	ed9d 7a00 	vldr	s14, [sp]
 800b786:	edcd 6a00 	vstr	s13, [sp]
 800b78a:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b78e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b792:	edcd 7a02 	vstr	s15, [sp, #8]
 800b796:	f7f5 f9cb 	bl	8000b30 <__aeabi_d2f>
 800b79a:	eddd 6a00 	vldr	s13, [sp]
 800b79e:	eddd 7a02 	vldr	s15, [sp, #8]
 800b7a2:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b7a6:	ee07 0a10 	vmov	s14, r0
 800b7aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b7ae:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b7b2:	ed9d 7a05 	vldr	s14, [sp, #20]
 800b7b6:	eddd 6a01 	vldr	s13, [sp, #4]
 800b7ba:	ed87 aa00 	vstr	s20, [r7]
 800b7be:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b7c2:	edcd 7a00 	vstr	s15, [sp]
 800b7c6:	f7f5 f9b3 	bl	8000b30 <__aeabi_d2f>
 800b7ca:	eddd 7a00 	vldr	s15, [sp]
 800b7ce:	9935      	ldr	r1, [sp, #212]	; 0xd4
 800b7d0:	ee07 0a10 	vmov	s14, r0
 800b7d4:	eeea 7a07 	vfma.f32	s15, s20, s14
 800b7d8:	2200      	movs	r2, #0
 800b7da:	2300      	movs	r3, #0
 800b7dc:	edc1 7a00 	vstr	s15, [r1]
 800b7e0:	f50d 61d5 	add.w	r1, sp, #1704	; 0x6a8
 800b7e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7e8:	eeb0 aa67 	vmov.f32	s20, s15
 800b7ec:	f7f5 f924 	bl	8000a38 <__aeabi_dcmple>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	f040 84e8 	bne.w	800c1c6 <m_kalman_3gyro.isra.0.constprop.0+0x1736>
 800b7f6:	f50d 61d5 	add.w	r1, sp, #1704	; 0x6a8
 800b7fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7fe:	4bb4      	ldr	r3, [pc, #720]	; (800bad0 <m_kalman_3gyro.isra.0.constprop.0+0x1040>)
 800b800:	2200      	movs	r2, #0
 800b802:	f7f5 f905 	bl	8000a10 <__aeabi_dcmpeq>
 800b806:	2800      	cmp	r0, #0
 800b808:	f042 8524 	bne.w	800e254 <m_kalman_3gyro.isra.0.constprop.0+0x37c4>
 800b80c:	eddd 6acc 	vldr	s13, [sp, #816]	; 0x330
 800b810:	ed9d 7ab3 	vldr	s14, [sp, #716]	; 0x2cc
 800b814:	eddd 7acd 	vldr	s15, [sp, #820]	; 0x334
 800b818:	ed9d 6ab4 	vldr	s12, [sp, #720]	; 0x2d0
 800b81c:	eddd 5ab2 	vldr	s11, [sp, #712]	; 0x2c8
 800b820:	ee66 6a8b 	vmul.f32	s13, s13, s22
 800b824:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800b828:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b82c:	edcd 6acc 	vstr	s13, [sp, #816]	; 0x330
 800b830:	ed8d 7ab3 	vstr	s14, [sp, #716]	; 0x2cc
 800b834:	eddd 6ace 	vldr	s13, [sp, #824]	; 0x338
 800b838:	ed9d 7ab5 	vldr	s14, [sp, #724]	; 0x2d4
 800b83c:	edcd 7acd 	vstr	s15, [sp, #820]	; 0x334
 800b840:	eddd 7acf 	vldr	s15, [sp, #828]	; 0x33c
 800b844:	ee26 6a0b 	vmul.f32	s12, s12, s22
 800b848:	ee66 6a8b 	vmul.f32	s13, s13, s22
 800b84c:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800b850:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b854:	ed8d 6ab4 	vstr	s12, [sp, #720]	; 0x2d0
 800b858:	edcd 6ace 	vstr	s13, [sp, #824]	; 0x338
 800b85c:	ed9d 6ab6 	vldr	s12, [sp, #728]	; 0x2d8
 800b860:	eddd 6ad0 	vldr	s13, [sp, #832]	; 0x340
 800b864:	ed8d 7ab5 	vstr	s14, [sp, #724]	; 0x2d4
 800b868:	edcd 7acf 	vstr	s15, [sp, #828]	; 0x33c
 800b86c:	ed9d 7ab7 	vldr	s14, [sp, #732]	; 0x2dc
 800b870:	eddd 7ad1 	vldr	s15, [sp, #836]	; 0x344
 800b874:	ee26 6a0b 	vmul.f32	s12, s12, s22
 800b878:	ee66 6a8b 	vmul.f32	s13, s13, s22
 800b87c:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800b880:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b884:	ed8d 6ab6 	vstr	s12, [sp, #728]	; 0x2d8
 800b888:	edcd 6ad0 	vstr	s13, [sp, #832]	; 0x340
 800b88c:	ed9d 6ab8 	vldr	s12, [sp, #736]	; 0x2e0
 800b890:	eddd 6ad2 	vldr	s13, [sp, #840]	; 0x348
 800b894:	ed8d 7ab7 	vstr	s14, [sp, #732]	; 0x2dc
 800b898:	edcd 7ad1 	vstr	s15, [sp, #836]	; 0x344
 800b89c:	ed9d 7ab9 	vldr	s14, [sp, #740]	; 0x2e4
 800b8a0:	eddd 7ad3 	vldr	s15, [sp, #844]	; 0x34c
 800b8a4:	ee65 5a8b 	vmul.f32	s11, s11, s22
 800b8a8:	ee26 6a0b 	vmul.f32	s12, s12, s22
 800b8ac:	ee66 6a8b 	vmul.f32	s13, s13, s22
 800b8b0:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800b8b4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b8b8:	ed8d 6ab8 	vstr	s12, [sp, #736]	; 0x2e0
 800b8bc:	edcd 6ad2 	vstr	s13, [sp, #840]	; 0x348
 800b8c0:	ed8d 7ab9 	vstr	s14, [sp, #740]	; 0x2e4
 800b8c4:	edcd 7ad3 	vstr	s15, [sp, #844]	; 0x34c
 800b8c8:	edcd 5ab2 	vstr	s11, [sp, #712]	; 0x2c8
 800b8cc:	eddd 5aba 	vldr	s11, [sp, #744]	; 0x2e8
 800b8d0:	eddd 7ad4 	vldr	s15, [sp, #848]	; 0x350
 800b8d4:	ed9d 6abb 	vldr	s12, [sp, #748]	; 0x2ec
 800b8d8:	eddd 6ad5 	vldr	s13, [sp, #852]	; 0x354
 800b8dc:	ed9d 7abc 	vldr	s14, [sp, #752]	; 0x2f0
 800b8e0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b8e4:	ee26 6a0b 	vmul.f32	s12, s12, s22
 800b8e8:	edcd 7ad4 	vstr	s15, [sp, #848]	; 0x350
 800b8ec:	eddd 7ad6 	vldr	s15, [sp, #856]	; 0x358
 800b8f0:	ed8d 6abb 	vstr	s12, [sp, #748]	; 0x2ec
 800b8f4:	ee66 6a8b 	vmul.f32	s13, s13, s22
 800b8f8:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800b8fc:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b900:	ed9d 6abd 	vldr	s12, [sp, #756]	; 0x2f4
 800b904:	edcd 6ad5 	vstr	s13, [sp, #852]	; 0x354
 800b908:	ed8d 7abc 	vstr	s14, [sp, #752]	; 0x2f0
 800b90c:	eddd 6ad7 	vldr	s13, [sp, #860]	; 0x35c
 800b910:	ed9d 7abe 	vldr	s14, [sp, #760]	; 0x2f8
 800b914:	edcd 7ad6 	vstr	s15, [sp, #856]	; 0x358
 800b918:	eddd 7ad8 	vldr	s15, [sp, #864]	; 0x360
 800b91c:	ee65 5a8b 	vmul.f32	s11, s11, s22
 800b920:	ee26 6a0b 	vmul.f32	s12, s12, s22
 800b924:	ee66 6a8b 	vmul.f32	s13, s13, s22
 800b928:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800b92c:	ee27 ba8b 	vmul.f32	s22, s15, s22
 800b930:	a9bf      	add	r1, sp, #764	; 0x2fc
 800b932:	edcd 5aba 	vstr	s11, [sp, #744]	; 0x2e8
 800b936:	ed8d 6abd 	vstr	s12, [sp, #756]	; 0x2f4
 800b93a:	edcd 6ad7 	vstr	s13, [sp, #860]	; 0x35c
 800b93e:	a8b2      	add	r0, sp, #712	; 0x2c8
 800b940:	ed8d 7abe 	vstr	s14, [sp, #760]	; 0x2f8
 800b944:	eeb0 0a4a 	vmov.f32	s0, s20
 800b948:	ed8d bad8 	vstr	s22, [sp, #864]	; 0x360
 800b94c:	f7fd ff1a 	bl	8009784 <m_interp1q_constrain>
 800b950:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b952:	eeb0 6a40 	vmov.f32	s12, s0
 800b956:	ed83 0a00 	vstr	s0, [r3]
 800b95a:	a9d9      	add	r1, sp, #868	; 0x364
 800b95c:	a8cc      	add	r0, sp, #816	; 0x330
 800b95e:	eeb0 0a4a 	vmov.f32	s0, s20
 800b962:	f7fd ff0f 	bl	8009784 <m_interp1q_constrain>
 800b966:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b968:	ed83 0a00 	vstr	s0, [r3]
 800b96c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b970:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800b974:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b976:	ee7c 7ae7 	vsub.f32	s15, s25, s15
 800b97a:	ed83 6a00 	vstr	s12, [r3]
 800b97e:	eef0 7ae7 	vabs.f32	s15, s15
 800b982:	ee17 0a90 	vmov	r0, s15
 800b986:	f7f4 fd83 	bl	8000490 <__aeabi_f2d>
 800b98a:	ec41 0b10 	vmov	d0, r0, r1
 800b98e:	f007 fa9f 	bl	8012ed0 <floor>
 800b992:	ec51 0b10 	vmov	r0, r1, d0
 800b996:	f7f5 f883 	bl	8000aa0 <__aeabi_d2iz>
 800b99a:	f8dd 36c4 	ldr.w	r3, [sp, #1732]	; 0x6c4
 800b99e:	7018      	strb	r0, [r3, #0]
 800b9a0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b9a4:	ed93 ba2d 	vldr	s22, [r3, #180]	; 0xb4
 800b9a8:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800b9ac:	4b49      	ldr	r3, [pc, #292]	; (800bad4 <m_kalman_3gyro.isra.0.constprop.0+0x1044>)
 800b9ae:	ee3c bacb 	vsub.f32	s22, s25, s22
 800b9b2:	ee7d 7a67 	vsub.f32	s15, s26, s15
 800b9b6:	eeb0 bacb 	vabs.f32	s22, s22
 800b9ba:	eef0 7ae7 	vabs.f32	s15, s15
 800b9be:	ee77 7a8b 	vadd.f32	s15, s15, s22
 800b9c2:	ed83 ba6b 	vstr	s22, [r3, #428]	; 0x1ac
 800b9c6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800b9c8:	edcd 7a00 	vstr	s15, [sp]
 800b9cc:	edc3 7a00 	vstr	s15, [r3]
 800b9d0:	ee17 0a90 	vmov	r0, s15
 800b9d4:	f7f4 fd5c 	bl	8000490 <__aeabi_f2d>
 800b9d8:	a33b      	add	r3, pc, #236	; (adr r3, 800bac8 <m_kalman_3gyro.isra.0.constprop.0+0x1038>)
 800b9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9de:	f7f5 f83f 	bl	8000a60 <__aeabi_dcmpgt>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	f000 83ec 	beq.w	800c1c0 <m_kalman_3gyro.isra.0.constprop.0+0x1730>
 800b9e8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800bad8 <m_kalman_3gyro.isra.0.constprop.0+0x1048>
 800b9ec:	eddd 7a00 	vldr	s15, [sp]
 800b9f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b9f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9f8:	f302 8362 	bgt.w	800e0c0 <m_kalman_3gyro.isra.0.constprop.0+0x3630>
 800b9fc:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800badc <m_kalman_3gyro.isra.0.constprop.0+0x104c>
 800ba00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba04:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800ba08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba0c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800ba10:	ee17 0a10 	vmov	r0, s14
 800ba14:	f7f4 fd3c 	bl	8000490 <__aeabi_f2d>
 800ba18:	4606      	mov	r6, r0
 800ba1a:	460f      	mov	r7, r1
 800ba1c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ba20:	ee7c 7ae7 	vsub.f32	s15, s25, s15
 800ba24:	eef0 7ae7 	vabs.f32	s15, s15
 800ba28:	ee17 0a90 	vmov	r0, s15
 800ba2c:	f7f4 fd30 	bl	8000490 <__aeabi_f2d>
 800ba30:	4b2b      	ldr	r3, [pc, #172]	; (800bae0 <m_kalman_3gyro.isra.0.constprop.0+0x1050>)
 800ba32:	2200      	movs	r2, #0
 800ba34:	f7f4 fbcc 	bl	80001d0 <__aeabi_dsub>
 800ba38:	4632      	mov	r2, r6
 800ba3a:	463b      	mov	r3, r7
 800ba3c:	4604      	mov	r4, r0
 800ba3e:	460d      	mov	r5, r1
 800ba40:	f7f5 f804 	bl	8000a4c <__aeabi_dcmpge>
 800ba44:	b908      	cbnz	r0, 800ba4a <m_kalman_3gyro.isra.0.constprop.0+0xfba>
 800ba46:	4634      	mov	r4, r6
 800ba48:	463d      	mov	r5, r7
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	f7f5 f86f 	bl	8000b30 <__aeabi_d2f>
 800ba52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba54:	6018      	str	r0, [r3, #0]
 800ba56:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ba5a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ba5e:	b19b      	cbz	r3, 800ba88 <m_kalman_3gyro.isra.0.constprop.0+0xff8>
 800ba60:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ba64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ba68:	b973      	cbnz	r3, 800ba88 <m_kalman_3gyro.isra.0.constprop.0+0xff8>
 800ba6a:	ed9d 7a39 	vldr	s14, [sp, #228]	; 0xe4
 800ba6e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ba70:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ba74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba78:	ed93 7a00 	vldr	s14, [r3]
 800ba7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ba80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba84:	f102 84b9 	bmi.w	800e3fa <m_kalman_3gyro.isra.0.constprop.0+0x396a>
 800ba88:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ba8c:	3340      	adds	r3, #64	; 0x40
 800ba8e:	9304      	str	r3, [sp, #16]
 800ba90:	9b07      	ldr	r3, [sp, #28]
 800ba92:	edd3 7a00 	vldr	s15, [r3]
 800ba96:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ba9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba9e:	f04f 0400 	mov.w	r4, #0
 800baa2:	d123      	bne.n	800baec <m_kalman_3gyro.isra.0.constprop.0+0x105c>
 800baa4:	edd3 7a01 	vldr	s15, [r3, #4]
 800baa8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800baac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bab0:	4619      	mov	r1, r3
 800bab2:	d11b      	bne.n	800baec <m_kalman_3gyro.isra.0.constprop.0+0x105c>
 800bab4:	edd3 7a02 	vldr	s15, [r3, #8]
 800bab8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800babc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bac0:	f002 8425 	beq.w	800e30e <m_kalman_3gyro.isra.0.constprop.0+0x387e>
 800bac4:	e012      	b.n	800baec <m_kalman_3gyro.isra.0.constprop.0+0x105c>
 800bac6:	bf00      	nop
 800bac8:	9999999a 	.word	0x9999999a
 800bacc:	3fb99999 	.word	0x3fb99999
 800bad0:	3ff00000 	.word	0x3ff00000
 800bad4:	20001698 	.word	0x20001698
 800bad8:	3fb77778 	.word	0x3fb77778
 800badc:	3dcccccd 	.word	0x3dcccccd
 800bae0:	3fe00000 	.word	0x3fe00000
 800bae4:	3f99999a 	.word	0x3f99999a
 800bae8:	3f4ccccd 	.word	0x3f4ccccd
 800baec:	f50d 61d4 	add.w	r1, sp, #1696	; 0x6a0
 800baf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baf4:	2200      	movs	r2, #0
 800baf6:	2300      	movs	r3, #0
 800baf8:	f7f4 ff8a 	bl	8000a10 <__aeabi_dcmpeq>
 800bafc:	2800      	cmp	r0, #0
 800bafe:	d144      	bne.n	800bb8a <m_kalman_3gyro.isra.0.constprop.0+0x10fa>
 800bb00:	eddd 7a39 	vldr	s15, [sp, #228]	; 0xe4
 800bb04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bb06:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800bb0a:	edd3 7a00 	vldr	s15, [r3]
 800bb0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bb12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb16:	d538      	bpl.n	800bb8a <m_kalman_3gyro.isra.0.constprop.0+0x10fa>
 800bb18:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800bb1c:	9907      	ldr	r1, [sp, #28]
 800bb1e:	edc3 9a12 	vstr	s19, [r3, #72]	; 0x48
 800bb22:	ed83 9a15 	vstr	s18, [r3, #84]	; 0x54
 800bb26:	edc3 8a18 	vstr	s17, [r3, #96]	; 0x60
 800bb2a:	ed83 ca11 	vstr	s24, [r3, #68]	; 0x44
 800bb2e:	edc3 ba14 	vstr	s23, [r3, #80]	; 0x50
 800bb32:	ed83 8a17 	vstr	s16, [r3, #92]	; 0x5c
 800bb36:	ed83 fa10 	vstr	s30, [r3, #64]	; 0x40
 800bb3a:	edc3 ea13 	vstr	s29, [r3, #76]	; 0x4c
 800bb3e:	ed83 ea16 	vstr	s28, [r3, #88]	; 0x58
 800bb42:	9804      	ldr	r0, [sp, #16]
 800bb44:	f7fd fb14 	bl	8009170 <m_dcm2q_eml>
 800bb48:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
 800bb4c:	2201      	movs	r2, #1
 800bb4e:	700a      	strb	r2, [r1, #0]
 800bb50:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800bb54:	2300      	movs	r3, #0
 800bb56:	ed82 da2b 	vstr	s26, [r2, #172]	; 0xac
 800bb5a:	edc2 ca2d 	vstr	s25, [r2, #180]	; 0xb4
 800bb5e:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 800bb62:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
 800bb66:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800bb6a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800bb6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bb72:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800bb76:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 800bb7a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 800bb7e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 800bb82:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 800bb86:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8
 800bb8a:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800bb8e:	9904      	ldr	r1, [sp, #16]
 800bb90:	9807      	ldr	r0, [sp, #28]
 800bb92:	2300      	movs	r3, #0
 800bb94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800bb98:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800bb9c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800bba0:	f7fc feb2 	bl	8008908 <m_q2dcm_eml>
 800bba4:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800bba8:	ed93 8a2b 	vldr	s16, [r3, #172]	; 0xac
 800bbac:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bbb0:	eee8 7a48 	vfms.f32	s15, s16, s16
 800bbb4:	ee17 0a90 	vmov	r0, s15
 800bbb8:	f7f4 fc6a 	bl	8000490 <__aeabi_f2d>
 800bbbc:	ec41 0b10 	vmov	d0, r0, r1
 800bbc0:	f007 fb5e 	bl	8013280 <sqrt>
 800bbc4:	ec51 0b10 	vmov	r0, r1, d0
 800bbc8:	f7f4 ffb2 	bl	8000b30 <__aeabi_d2f>
 800bbcc:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800bbd0:	ed9d 9a57 	vldr	s18, [sp, #348]	; 0x15c
 800bbd4:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 800bbd8:	ed93 6a18 	vldr	s12, [r3, #96]	; 0x60
 800bbdc:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800bbe0:	edd3 5a15 	vldr	s11, [r3, #84]	; 0x54
 800bbe4:	ed93 4a16 	vldr	s8, [r3, #88]	; 0x58
 800bbe8:	edd3 3a13 	vldr	s7, [r3, #76]	; 0x4c
 800bbec:	eddd 9a58 	vldr	s19, [sp, #352]	; 0x160
 800bbf0:	eddd 8a56 	vldr	s17, [sp, #344]	; 0x158
 800bbf4:	ed83 da22 	vstr	s26, [r3, #136]	; 0x88
 800bbf8:	ee07 0a10 	vmov	s14, r0
 800bbfc:	ee68 4a26 	vmul.f32	s9, s16, s13
 800bc00:	ee28 5a25 	vmul.f32	s10, s16, s11
 800bc04:	eee7 4a27 	vfma.f32	s9, s14, s15
 800bc08:	ee68 7a06 	vmul.f32	s15, s16, s12
 800bc0c:	eea7 5a23 	vfma.f32	s10, s14, s7
 800bc10:	eee7 7a04 	vfma.f32	s15, s14, s8
 800bc14:	ed9d 7a55 	vldr	s14, [sp, #340]	; 0x154
 800bc18:	eddd 3a53 	vldr	s7, [sp, #332]	; 0x14c
 800bc1c:	ed9d 4a54 	vldr	s8, [sp, #336]	; 0x150
 800bc20:	edc3 7a84 	vstr	s15, [r3, #528]	; 0x210
 800bc24:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bc28:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 800bc2c:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 800bc30:	ed1f 7a54 	vldr	s14, [pc, #-336]	; 800bae4 <m_kalman_3gyro.isra.0.constprop.0+0x1054>
 800bc34:	edc3 aa23 	vstr	s21, [r3, #140]	; 0x8c
 800bc38:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800bc3c:	ee34 4a45 	vsub.f32	s8, s8, s10
 800bc40:	ee79 5a65 	vsub.f32	s11, s18, s11
 800bc44:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800bc48:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800bc4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc54:	edc3 ca24 	vstr	s25, [r3, #144]	; 0x90
 800bc58:	edc3 4a82 	vstr	s9, [r3, #520]	; 0x208
 800bc5c:	edc3 3a19 	vstr	s7, [r3, #100]	; 0x64
 800bc60:	ed83 5a83 	vstr	s10, [r3, #524]	; 0x20c
 800bc64:	ed83 4a1a 	vstr	s8, [r3, #104]	; 0x68
 800bc68:	edc3 5a1d 	vstr	s11, [r3, #116]	; 0x74
 800bc6c:	ed83 6a1e 	vstr	s12, [r3, #120]	; 0x78
 800bc70:	edc3 6a1c 	vstr	s13, [r3, #112]	; 0x70
 800bc74:	d506      	bpl.n	800bc84 <m_kalman_3gyro.isra.0.constprop.0+0x11f4>
 800bc76:	ed1f 7a64 	vldr	s14, [pc, #-400]	; 800bae8 <m_kalman_3gyro.isra.0.constprop.0+0x1058>
 800bc7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc82:	dc01      	bgt.n	800bc88 <m_kalman_3gyro.isra.0.constprop.0+0x11f8>
 800bc84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bc88:	ee7a 7ae7 	vsub.f32	s15, s21, s15
 800bc8c:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800bc8e:	eef0 7ae7 	vabs.f32	s15, s15
 800bc92:	ee3f 6aa7 	vadd.f32	s12, s31, s15
 800bc96:	edc3 7a00 	vstr	s15, [r3]
 800bc9a:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800bc9c:	a99e      	add	r1, sp, #632	; 0x278
 800bc9e:	ed83 6a00 	vstr	s12, [r3]
 800bca2:	eeb0 0a46 	vmov.f32	s0, s12
 800bca6:	a894      	add	r0, sp, #592	; 0x250
 800bca8:	f7fd fd1e 	bl	80096e8 <m_b_interp1q_constrain>
 800bcac:	a9a8      	add	r1, sp, #672	; 0x2a0
 800bcae:	eeb0 8a40 	vmov.f32	s16, s0
 800bcb2:	a894      	add	r0, sp, #592	; 0x250
 800bcb4:	eeb0 0a46 	vmov.f32	s0, s12
 800bcb8:	f7fd fd16 	bl	80096e8 <m_b_interp1q_constrain>
 800bcbc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800bcbe:	edd3 7a00 	vldr	s15, [r3]
 800bcc2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bcc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcca:	eef0 aa40 	vmov.f32	s21, s0
 800bcce:	f340 8297 	ble.w	800c200 <m_kalman_3gyro.isra.0.constprop.0+0x1770>
 800bcd2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800bcd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bcda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcde:	f142 81f3 	bpl.w	800e0c8 <m_kalman_3gyro.isra.0.constprop.0+0x3638>
 800bce2:	2107      	movs	r1, #7
 800bce4:	2402      	movs	r4, #2
 800bce6:	2301      	movs	r3, #1
 800bce8:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 800bcec:	4618      	mov	r0, r3
 800bcee:	e008      	b.n	800bd02 <m_kalman_3gyro.isra.0.constprop.0+0x1272>
 800bcf0:	ed92 7a00 	vldr	s14, [r2]
 800bcf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800bcf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcfc:	f282 84ea 	bge.w	800e6d4 <m_kalman_3gyro.isra.0.constprop.0+0x3c44>
 800bd00:	4619      	mov	r1, r3
 800bd02:	180b      	adds	r3, r1, r0
 800bd04:	eb05 0253 	add.w	r2, r5, r3, lsr #1
 800bd08:	f50d 66c4 	add.w	r6, sp, #1568	; 0x620
 800bd0c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800bd10:	42a1      	cmp	r1, r4
 800bd12:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 800bd16:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800bd1a:	d8e9      	bhi.n	800bcf0 <m_kalman_3gyro.isra.0.constprop.0+0x1260>
 800bd1c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800bd20:	3801      	subs	r0, #1
 800bd22:	0082      	lsls	r2, r0, #2
 800bd24:	3204      	adds	r2, #4
 800bd26:	ab59      	add	r3, sp, #356	; 0x164
 800bd28:	1899      	adds	r1, r3, r2
 800bd2a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800bd2e:	edd3 6a00 	vldr	s13, [r3]
 800bd32:	ed91 7a00 	vldr	s14, [r1]
 800bd36:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bd3a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800bd3e:	ab60      	add	r3, sp, #384	; 0x180
 800bd40:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bd44:	441a      	add	r2, r3
 800bd46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bd4a:	edd0 ba00 	vldr	s23, [r0]
 800bd4e:	edd2 7a00 	vldr	s15, [r2]
 800bd52:	ee77 7aeb 	vsub.f32	s15, s15, s23
 800bd56:	eee6 baa7 	vfma.f32	s23, s13, s15
 800bd5a:	e253      	b.n	800c204 <m_kalman_3gyro.isra.0.constprop.0+0x1774>
 800bd5c:	454e      	cmp	r6, r9
 800bd5e:	f6bf abfb 	bge.w	800b558 <m_kalman_3gyro.isra.0.constprop.0+0xac8>
 800bd62:	eba9 0206 	sub.w	r2, r9, r6
 800bd66:	eb0b 010e 	add.w	r1, fp, lr
 800bd6a:	444c      	add	r4, r9
 800bd6c:	1ba4      	subs	r4, r4, r6
 800bd6e:	f007 f897 	bl	8012ea0 <memcpy>
 800bd72:	464e      	mov	r6, r9
 800bd74:	f7ff bbf0 	b.w	800b558 <m_kalman_3gyro.isra.0.constprop.0+0xac8>
 800bd78:	eef4 7a4a 	vcmp.f32	s15, s20
 800bd7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd80:	f43f ac45 	beq.w	800b60e <m_kalman_3gyro.isra.0.constprop.0+0xb7e>
 800bd84:	eef4 7a6d 	vcmp.f32	s15, s27
 800bd88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd8c:	f43f ac3f 	beq.w	800b60e <m_kalman_3gyro.isra.0.constprop.0+0xb7e>
 800bd90:	eeb4 7a4a 	vcmp.f32	s14, s20
 800bd94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd98:	f43f ac39 	beq.w	800b60e <m_kalman_3gyro.isra.0.constprop.0+0xb7e>
 800bd9c:	eeb4 7a6d 	vcmp.f32	s14, s27
 800bda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda4:	f43f ac33 	beq.w	800b60e <m_kalman_3gyro.isra.0.constprop.0+0xb7e>
 800bda8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bdac:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800bdb0:	eee7 7a26 	vfma.f32	s15, s14, s13
 800bdb4:	e431      	b.n	800b61a <m_kalman_3gyro.isra.0.constprop.0+0xb8a>
 800bdb6:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800bdba:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800bdbe:	f8dd 66d0 	ldr.w	r6, [sp, #1744]	; 0x6d0
 800bdc2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800bdc6:	f602 07b8 	addw	r7, r2, #2232	; 0x8b8
 800bdca:	2301      	movs	r3, #1
 800bdcc:	f602 08bc 	addw	r8, r2, #2236	; 0x8bc
 800bdd0:	f502 690c 	add.w	r9, r2, #2240	; 0x8c0
 800bdd4:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 800bdd8:	f882 38ce 	strb.w	r3, [r2, #2254]	; 0x8ce
 800bddc:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 800bde0:	ed87 aa00 	vstr	s20, [r7]
 800bde4:	ed88 aa00 	vstr	s20, [r8]
 800bde8:	ed89 aa00 	vstr	s20, [r9]
 800bdec:	f7f4 f9f2 	bl	80001d4 <__adddf3>
 800bdf0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800bdf4:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800bdf8:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 800bdfc:	f606 06c4 	addw	r6, r6, #2244	; 0x8c4
 800be00:	9300      	str	r3, [sp, #0]
 800be02:	ed86 aa00 	vstr	s20, [r6]
 800be06:	e9d2 2308 	ldrd	r2, r3, [r2, #32]
 800be0a:	f7f4 f9e3 	bl	80001d4 <__adddf3>
 800be0e:	9b00      	ldr	r3, [sp, #0]
 800be10:	ed83 aa00 	vstr	s20, [r3]
 800be14:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800be18:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800be1c:	f7f4 f9da 	bl	80001d4 <__adddf3>
 800be20:	4622      	mov	r2, r4
 800be22:	462b      	mov	r3, r5
 800be24:	f7f4 f9d6 	bl	80001d4 <__adddf3>
 800be28:	4602      	mov	r2, r0
 800be2a:	460b      	mov	r3, r1
 800be2c:	2000      	movs	r0, #0
 800be2e:	4920      	ldr	r1, [pc, #128]	; (800beb0 <m_kalman_3gyro.isra.0.constprop.0+0x1420>)
 800be30:	f7f4 fcb0 	bl	8000794 <__aeabi_ddiv>
 800be34:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800be38:	4604      	mov	r4, r0
 800be3a:	460d      	mov	r5, r1
 800be3c:	4622      	mov	r2, r4
 800be3e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800be42:	462b      	mov	r3, r5
 800be44:	f7f4 fb7c 	bl	8000540 <__aeabi_dmul>
 800be48:	ec41 0b17 	vmov	d7, r0, r1
 800be4c:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800be50:	4622      	mov	r2, r4
 800be52:	ed81 7b02 	vstr	d7, [r1, #8]
 800be56:	462b      	mov	r3, r5
 800be58:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800be5c:	f7f4 fb70 	bl	8000540 <__aeabi_dmul>
 800be60:	ec41 0b17 	vmov	d7, r0, r1
 800be64:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800be68:	4622      	mov	r2, r4
 800be6a:	ed81 7b04 	vstr	d7, [r1, #16]
 800be6e:	462b      	mov	r3, r5
 800be70:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 800be74:	f7f4 fb64 	bl	8000540 <__aeabi_dmul>
 800be78:	ec41 0b17 	vmov	d7, r0, r1
 800be7c:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800be80:	4622      	mov	r2, r4
 800be82:	ed81 7b06 	vstr	d7, [r1, #24]
 800be86:	462b      	mov	r3, r5
 800be88:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 800be8c:	f7f4 fb58 	bl	8000540 <__aeabi_dmul>
 800be90:	4622      	mov	r2, r4
 800be92:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800be96:	462b      	mov	r3, r5
 800be98:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800be9c:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 800bea0:	f7f4 fb4e 	bl	8000540 <__aeabi_dmul>
 800bea4:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800bea8:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
 800beac:	e432      	b.n	800b714 <m_kalman_3gyro.isra.0.constprop.0+0xc84>
 800beae:	bf00      	nop
 800beb0:	3ff00000 	.word	0x3ff00000
 800beb4:	f50d 67d5 	add.w	r7, sp, #1704	; 0x6a8
 800beb8:	ed97 7b00 	vldr	d7, [r7]
 800bebc:	2101      	movs	r1, #1
 800bebe:	af43      	add	r7, sp, #268	; 0x10c
 800bec0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bec4:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
 800bec8:	2600      	movs	r6, #0
 800beca:	e9c3 5512 	strd	r5, r5, [r3, #72]	; 0x48
 800bece:	e9c3 5515 	strd	r5, r5, [r3, #84]	; 0x54
 800bed2:	645d      	str	r5, [r3, #68]	; 0x44
 800bed4:	f883 18cd 	strb.w	r1, [r3, #2253]	; 0x8cd
 800bed8:	861a      	strh	r2, [r3, #48]	; 0x30
 800beda:	65dd      	str	r5, [r3, #92]	; 0x5c
 800bedc:	ed83 ba18 	vstr	s22, [r3, #96]	; 0x60
 800bee0:	ed83 ba14 	vstr	s22, [r3, #80]	; 0x50
 800bee4:	ed83 ba10 	vstr	s22, [r3, #64]	; 0x40
 800bee8:	4629      	mov	r1, r5
 800beea:	2230      	movs	r2, #48	; 0x30
 800beec:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800bef0:	603e      	str	r6, [r7, #0]
 800bef2:	607e      	str	r6, [r7, #4]
 800bef4:	60fe      	str	r6, [r7, #12]
 800bef6:	9707      	str	r7, [sp, #28]
 800bef8:	9645      	str	r6, [sp, #276]	; 0x114
 800befa:	f006 ffdf 	bl	8012ebc <memset>
 800befe:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800bf02:	4bb7      	ldr	r3, [pc, #732]	; (800c1e0 <m_kalman_3gyro.isra.0.constprop.0+0x1750>)
 800bf04:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 800bf08:	4613      	mov	r3, r2
 800bf0a:	f8c2 6094 	str.w	r6, [r2, #148]	; 0x94
 800bf0e:	f8c2 6098 	str.w	r6, [r2, #152]	; 0x98
 800bf12:	f8c2 609c 	str.w	r6, [r2, #156]	; 0x9c
 800bf16:	ed82 ba2c 	vstr	s22, [r2, #176]	; 0xb0
 800bf1a:	ed82 ba2d 	vstr	s22, [r2, #180]	; 0xb4
 800bf1e:	4629      	mov	r1, r5
 800bf20:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800bf24:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 800bf28:	f006 ffc8 	bl	8012ebc <memset>
 800bf2c:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800bf30:	4bac      	ldr	r3, [pc, #688]	; (800c1e4 <m_kalman_3gyro.isra.0.constprop.0+0x1754>)
 800bf32:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
 800bf36:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
 800bf3a:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 800bf3e:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 800bf42:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
 800bf46:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8
 800bf4a:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 800bf4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bf52:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 800bf56:	4613      	mov	r3, r2
 800bf58:	f502 7206 	add.w	r2, r2, #536	; 0x218
 800bf5c:	2500      	movs	r5, #0
 800bf5e:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
 800bf62:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
 800bf66:	f8c3 11fc 	str.w	r1, [r3, #508]	; 0x1fc
 800bf6a:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
 800bf6e:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
 800bf72:	f8c3 5218 	str.w	r5, [r3, #536]	; 0x218
 800bf76:	f503 7817 	add.w	r8, r3, #604	; 0x25c
 800bf7a:	e9c2 5501 	strd	r5, r5, [r2, #4]
 800bf7e:	e9c2 5504 	strd	r5, r5, [r2, #16]
 800bf82:	6195      	str	r5, [r2, #24]
 800bf84:	e9c3 5590 	strd	r5, r5, [r3, #576]	; 0x240
 800bf88:	e9c3 5593 	strd	r5, r5, [r3, #588]	; 0x24c
 800bf8c:	f8c3 523c 	str.w	r5, [r3, #572]	; 0x23c
 800bf90:	f8c3 9234 	str.w	r9, [r3, #564]	; 0x234
 800bf94:	f8c3 9224 	str.w	r9, [r3, #548]	; 0x224
 800bf98:	f8c3 9214 	str.w	r9, [r3, #532]	; 0x214
 800bf9c:	f8c3 5254 	str.w	r5, [r3, #596]	; 0x254
 800bfa0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800bfa4:	4629      	mov	r1, r5
 800bfa6:	f8c3 9258 	str.w	r9, [r3, #600]	; 0x258
 800bfaa:	f8c3 9248 	str.w	r9, [r3, #584]	; 0x248
 800bfae:	f8c3 9238 	str.w	r9, [r3, #568]	; 0x238
 800bfb2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bfb6:	4640      	mov	r0, r8
 800bfb8:	f006 ff80 	bl	8012ebc <memset>
 800bfbc:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800bfc0:	2700      	movs	r7, #0
 800bfc2:	4629      	mov	r1, r5
 800bfc4:	f8c3 73c4 	str.w	r7, [r3, #964]	; 0x3c4
 800bfc8:	f8c3 73c8 	str.w	r7, [r3, #968]	; 0x3c8
 800bfcc:	f8c3 73cc 	str.w	r7, [r3, #972]	; 0x3cc
 800bfd0:	f8c3 73d0 	str.w	r7, [r3, #976]	; 0x3d0
 800bfd4:	2230      	movs	r2, #48	; 0x30
 800bfd6:	f503 7075 	add.w	r0, r3, #980	; 0x3d4
 800bfda:	f006 ff6f 	bl	8012ebc <memset>
 800bfde:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800bfe2:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800bfe6:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800bfea:	f203 4104 	addw	r1, r3, #1028	; 0x404
 800bfee:	f503 6582 	add.w	r5, r3, #1040	; 0x410
 800bff2:	f203 4614 	addw	r6, r3, #1044	; 0x414
 800bff6:	f503 6a81 	add.w	sl, r3, #1032	; 0x408
 800bffa:	f203 4b0c 	addw	fp, r3, #1036	; 0x40c
 800bffe:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800c002:	932b      	str	r3, [sp, #172]	; 0xac
 800c004:	f500 6384 	add.w	r3, r0, #1056	; 0x420
 800c008:	f200 4024 	addw	r0, r0, #1060	; 0x424
 800c00c:	9036      	str	r0, [sp, #216]	; 0xd8
 800c00e:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800c012:	600f      	str	r7, [r1, #0]
 800c014:	f500 6085 	add.w	r0, r0, #1064	; 0x428
 800c018:	9037      	str	r0, [sp, #220]	; 0xdc
 800c01a:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800c01e:	f8ca 7000 	str.w	r7, [sl]
 800c022:	f200 4c2c 	addw	ip, r0, #1068	; 0x42c
 800c026:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800c02a:	f8cd c0e0 	str.w	ip, [sp, #224]	; 0xe0
 800c02e:	f500 6c86 	add.w	ip, r0, #1072	; 0x430
 800c032:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800c036:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 800c03a:	f200 4c34 	addw	ip, r0, #1076	; 0x434
 800c03e:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800c042:	f8cb 7000 	str.w	r7, [fp]
 800c046:	953a      	str	r5, [sp, #232]	; 0xe8
 800c048:	602f      	str	r7, [r5, #0]
 800c04a:	f202 421c 	addw	r2, r2, #1052	; 0x41c
 800c04e:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800c050:	9235      	str	r2, [sp, #212]	; 0xd4
 800c052:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 800c056:	f500 6c87 	add.w	ip, r0, #1080	; 0x438
 800c05a:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800c05e:	6037      	str	r7, [r6, #0]
 800c060:	602f      	str	r7, [r5, #0]
 800c062:	9d35      	ldr	r5, [sp, #212]	; 0xd4
 800c064:	9121      	str	r1, [sp, #132]	; 0x84
 800c066:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800c06a:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 800c06e:	f50d 61d5 	add.w	r1, sp, #1704	; 0x6a8
 800c072:	f200 4c3c 	addw	ip, r0, #1084	; 0x43c
 800c076:	602f      	str	r7, [r5, #0]
 800c078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c07c:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800c080:	601a      	str	r2, [r3, #0]
 800c082:	9634      	str	r6, [sp, #208]	; 0xd0
 800c084:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800c086:	601f      	str	r7, [r3, #0]
 800c088:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800c08a:	601f      	str	r7, [r3, #0]
 800c08c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800c08e:	601f      	str	r7, [r3, #0]
 800c090:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800c092:	601f      	str	r7, [r3, #0]
 800c094:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c096:	601f      	str	r7, [r3, #0]
 800c098:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800c09a:	601f      	str	r7, [r3, #0]
 800c09c:	f8cc 9000 	str.w	r9, [ip]
 800c0a0:	f7f4 fd46 	bl	8000b30 <__aeabi_d2f>
 800c0a4:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800c0a8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800c1e8 <m_kalman_3gyro.isra.0.constprop.0+0x1758>
 800c0ac:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c0b0:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c0b4:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 800c0b8:	ee0b 0a10 	vmov	s22, r0
 800c0bc:	f501 6189 	add.w	r1, r1, #1096	; 0x448
 800c0c0:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800c0c4:	9119      	str	r1, [sp, #100]	; 0x64
 800c0c6:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800c0ca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c0ce:	ed83 7a00 	vstr	s14, [r3]
 800c0d2:	f202 4244 	addw	r2, r2, #1092	; 0x444
 800c0d6:	9312      	str	r3, [sp, #72]	; 0x48
 800c0d8:	f200 404c 	addw	r0, r0, #1100	; 0x44c
 800c0dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c0de:	901a      	str	r0, [sp, #104]	; 0x68
 800c0e0:	6017      	str	r7, [r2, #0]
 800c0e2:	f8c3 9000 	str.w	r9, [r3]
 800c0e6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c0e8:	9220      	str	r2, [sp, #128]	; 0x80
 800c0ea:	601f      	str	r7, [r3, #0]
 800c0ec:	f505 668a 	add.w	r6, r5, #1104	; 0x450
 800c0f0:	2000      	movs	r0, #0
 800c0f2:	2100      	movs	r1, #0
 800c0f4:	f505 658b 	add.w	r5, r5, #1112	; 0x458
 800c0f8:	2232      	movs	r2, #50	; 0x32
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	e9c6 0100 	strd	r0, r1, [r6]
 800c100:	e9c5 2300 	strd	r2, r3, [r5]
 800c104:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c106:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c10a:	ab70      	add	r3, sp, #448	; 0x1c0
 800c10c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c112:	ca07      	ldmia	r2, {r0, r1, r2}
 800c114:	ad73      	add	r5, sp, #460	; 0x1cc
 800c116:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c11a:	9a08      	ldr	r2, [sp, #32]
 800c11c:	edd3 7a00 	vldr	s15, [r3]
 800c120:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800c124:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800c128:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800c12c:	691f      	ldr	r7, [r3, #16]
 800c12e:	695e      	ldr	r6, [r3, #20]
 800c130:	ca07      	ldmia	r2, {r0, r1, r2}
 800c132:	ad76      	add	r5, sp, #472	; 0x1d8
 800c134:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800c138:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c13c:	699d      	ldr	r5, [r3, #24]
 800c13e:	69d8      	ldr	r0, [r3, #28]
 800c140:	6a19      	ldr	r1, [r3, #32]
 800c142:	f502 628c 	add.w	r2, r2, #1120	; 0x460
 800c146:	9210      	str	r2, [sp, #64]	; 0x40
 800c148:	4613      	mov	r3, r2
 800c14a:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c14e:	f602 0298 	addw	r2, r2, #2200	; 0x898
 800c152:	edc3 7a00 	vstr	s15, [r3]
 800c156:	f8c3 9004 	str.w	r9, [r3, #4]
 800c15a:	f8c3 e008 	str.w	lr, [r3, #8]
 800c15e:	f8c3 c00c 	str.w	ip, [r3, #12]
 800c162:	611f      	str	r7, [r3, #16]
 800c164:	615e      	str	r6, [r3, #20]
 800c166:	619d      	str	r5, [r3, #24]
 800c168:	61d8      	str	r0, [r3, #28]
 800c16a:	6219      	str	r1, [r3, #32]
 800c16c:	3324      	adds	r3, #36	; 0x24
 800c16e:	4293      	cmp	r3, r2
 800c170:	d1ef      	bne.n	800c152 <m_kalman_3gyro.isra.0.constprop.0+0x16c2>
 800c172:	f8dd 26b0 	ldr.w	r2, [sp, #1712]	; 0x6b0
 800c176:	6812      	ldr	r2, [r2, #0]
 800c178:	601a      	str	r2, [r3, #0]
 800c17a:	f8dd 36b0 	ldr.w	r3, [sp, #1712]	; 0x6b0
 800c17e:	685a      	ldr	r2, [r3, #4]
 800c180:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c184:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800c188:	601a      	str	r2, [r3, #0]
 800c18a:	f8dd 36b0 	ldr.w	r3, [sp, #1712]	; 0x6b0
 800c18e:	6899      	ldr	r1, [r3, #8]
 800c190:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c194:	f503 620a 	add.w	r2, r3, #2208	; 0x8a0
 800c198:	2300      	movs	r3, #0
 800c19a:	6011      	str	r1, [r2, #0]
 800c19c:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800c1a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c1a4:	f881 38a4 	strb.w	r3, [r1, #2212]	; 0x8a4
 800c1a8:	f8c1 38a6 	str.w	r3, [r1, #2214]	; 0x8a6
 800c1ac:	f881 38ad 	strb.w	r3, [r1, #2221]	; 0x8ad
 800c1b0:	f881 38ae 	strb.w	r3, [r1, #2222]	; 0x8ae
 800c1b4:	f8c1 38b0 	str.w	r3, [r1, #2224]	; 0x8b0
 800c1b8:	f8a1 28aa 	strh.w	r2, [r1, #2218]	; 0x8aa
 800c1bc:	f7fe bdcd 	b.w	800ad5a <m_kalman_3gyro.isra.0.constprop.0+0x2ca>
 800c1c0:	4f0a      	ldr	r7, [pc, #40]	; (800c1ec <m_kalman_3gyro.isra.0.constprop.0+0x175c>)
 800c1c2:	2600      	movs	r6, #0
 800c1c4:	e42a      	b.n	800ba1c <m_kalman_3gyro.isra.0.constprop.0+0xf8c>
 800c1c6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800c1c8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c1cc:	edc3 7a00 	vstr	s15, [r3]
 800c1d0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c1d2:	eeb0 6a67 	vmov.f32	s12, s15
 800c1d6:	edc3 7a00 	vstr	s15, [r3]
 800c1da:	f7ff bbc7 	b.w	800b96c <m_kalman_3gyro.isra.0.constprop.0+0xedc>
 800c1de:	bf00      	nop
 800c1e0:	3f666666 	.word	0x3f666666
 800c1e4:	40a00000 	.word	0x40a00000
 800c1e8:	3ca3d70a 	.word	0x3ca3d70a
 800c1ec:	3ff00000 	.word	0x3ff00000
 800c1f0:	00000000 	.word	0x00000000
 800c1f4:	3d088889 	.word	0x3d088889
 800c1f8:	42480000 	.word	0x42480000
 800c1fc:	3c23d70a 	.word	0x3c23d70a
 800c200:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 800c204:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 800c1f0 <m_kalman_3gyro.isra.0.constprop.0+0x1760>
 800c208:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c20c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800c20e:	edc3 7af5 	vstr	s15, [r3, #980]	; 0x3d4
 800c212:	edc3 7af6 	vstr	s15, [r3, #984]	; 0x3d8
 800c216:	edc3 7af7 	vstr	s15, [r3, #988]	; 0x3dc
 800c21a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c21c:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800c220:	eeb0 7a67 	vmov.f32	s14, s15
 800c224:	eef0 6a67 	vmov.f32	s13, s15
 800c228:	eeb0 6a67 	vmov.f32	s12, s15
 800c22c:	461c      	mov	r4, r3
 800c22e:	f503 6587 	add.w	r5, r3, #1080	; 0x438
 800c232:	edd3 7a06 	vldr	s15, [r3, #24]
 800c236:	edd2 5a00 	vldr	s11, [r2]
 800c23a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c23e:	3324      	adds	r3, #36	; 0x24
 800c240:	ee36 6a27 	vadd.f32	s12, s12, s15
 800c244:	320c      	adds	r2, #12
 800c246:	ed81 6af5 	vstr	s12, [r1, #980]	; 0x3d4
 800c24a:	ed53 7a02 	vldr	s15, [r3, #-8]
 800c24e:	ed52 5a02 	vldr	s11, [r2, #-8]
 800c252:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c256:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800c25a:	edc1 6af6 	vstr	s13, [r1, #984]	; 0x3d8
 800c25e:	ed53 7a01 	vldr	s15, [r3, #-4]
 800c262:	ed52 5a01 	vldr	s11, [r2, #-4]
 800c266:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c26a:	429d      	cmp	r5, r3
 800c26c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c270:	ed81 7af7 	vstr	s14, [r1, #988]	; 0x3dc
 800c274:	d1dd      	bne.n	800c232 <m_kalman_3gyro.isra.0.constprop.0+0x17a2>
 800c276:	ed5f 7a21 	vldr	s15, [pc, #-132]	; 800c1f4 <m_kalman_3gyro.isra.0.constprop.0+0x1764>
 800c27a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c27e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c280:	ee26 6a27 	vmul.f32	s12, s12, s15
 800c284:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c288:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c28c:	ed83 6af5 	vstr	s12, [r3, #980]	; 0x3d4
 800c290:	edc3 6af6 	vstr	s13, [r3, #984]	; 0x3d8
 800c294:	ed83 7af7 	vstr	s14, [r3, #988]	; 0x3dc
 800c298:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	6859      	ldr	r1, [r3, #4]
 800c2a0:	625a      	str	r2, [r3, #36]	; 0x24
 800c2a2:	689a      	ldr	r2, [r3, #8]
 800c2a4:	6299      	str	r1, [r3, #40]	; 0x28
 800c2a6:	62da      	str	r2, [r3, #44]	; 0x2c
 800c2a8:	68d9      	ldr	r1, [r3, #12]
 800c2aa:	691a      	ldr	r2, [r3, #16]
 800c2ac:	6319      	str	r1, [r3, #48]	; 0x30
 800c2ae:	635a      	str	r2, [r3, #52]	; 0x34
 800c2b0:	6959      	ldr	r1, [r3, #20]
 800c2b2:	699a      	ldr	r2, [r3, #24]
 800c2b4:	6399      	str	r1, [r3, #56]	; 0x38
 800c2b6:	63da      	str	r2, [r3, #60]	; 0x3c
 800c2b8:	69d9      	ldr	r1, [r3, #28]
 800c2ba:	6a1a      	ldr	r2, [r3, #32]
 800c2bc:	6419      	str	r1, [r3, #64]	; 0x40
 800c2be:	645a      	str	r2, [r3, #68]	; 0x44
 800c2c0:	3b24      	subs	r3, #36	; 0x24
 800c2c2:	4298      	cmp	r0, r3
 800c2c4:	d1ea      	bne.n	800c29c <m_kalman_3gyro.isra.0.constprop.0+0x180c>
 800c2c6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c2c8:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c2ca:	6813      	ldr	r3, [r2, #0]
 800c2cc:	600b      	str	r3, [r1, #0]
 800c2ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c2d0:	981c      	ldr	r0, [sp, #112]	; 0x70
 800c2d2:	680b      	ldr	r3, [r1, #0]
 800c2d4:	6003      	str	r3, [r0, #0]
 800c2d6:	9808      	ldr	r0, [sp, #32]
 800c2d8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800c2da:	6803      	ldr	r3, [r0, #0]
 800c2dc:	6033      	str	r3, [r6, #0]
 800c2de:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 800c2e0:	6853      	ldr	r3, [r2, #4]
 800c2e2:	6033      	str	r3, [r6, #0]
 800c2e4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c2e6:	684b      	ldr	r3, [r1, #4]
 800c2e8:	6033      	str	r3, [r6, #0]
 800c2ea:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800c2ec:	6843      	ldr	r3, [r0, #4]
 800c2ee:	6033      	str	r3, [r6, #0]
 800c2f0:	6893      	ldr	r3, [r2, #8]
 800c2f2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c2f4:	6013      	str	r3, [r2, #0]
 800c2f6:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800c2f8:	688b      	ldr	r3, [r1, #8]
 800c2fa:	6013      	str	r3, [r2, #0]
 800c2fc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c2fe:	6883      	ldr	r3, [r0, #8]
 800c300:	6013      	str	r3, [r2, #0]
 800c302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c304:	2b02      	cmp	r3, #2
 800c306:	f001 81a7 	beq.w	800d658 <m_kalman_3gyro.isra.0.constprop.0+0x2bc8>
 800c30a:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 800c30e:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
 800c312:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c31a:	f301 8544 	bgt.w	800dda6 <m_kalman_3gyro.isra.0.constprop.0+0x3316>
 800c31e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c320:	2b00      	cmp	r3, #0
 800c322:	f041 854c 	bne.w	800ddbe <m_kalman_3gyro.isra.0.constprop.0+0x332e>
 800c326:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c32a:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800c32e:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800c332:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c336:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
 800c33a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c33e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 800c342:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 800c346:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 800c34a:	2300      	movs	r3, #0
 800c34c:	67c1      	str	r1, [r0, #124]	; 0x7c
 800c34e:	f8a0 3202 	strh.w	r3, [r0, #514]	; 0x202
 800c352:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 800c356:	f8c0 345c 	str.w	r3, [r0, #1116]	; 0x45c
 800c35a:	2a00      	cmp	r2, #0
 800c35c:	f001 8171 	beq.w	800d642 <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 800c360:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 800c364:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 800c368:	ed5f 7a5d 	vldr	s15, [pc, #-372]	; 800c1f8 <m_kalman_3gyro.isra.0.constprop.0+0x1768>
 800c36c:	eef4 aae7 	vcmpe.f32	s21, s15
 800c370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c374:	f2c1 80e3 	blt.w	800d53e <m_kalman_3gyro.isra.0.constprop.0+0x2aae>
 800c378:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c37c:	2300      	movs	r3, #0
 800c37e:	f8a2 3202 	strh.w	r3, [r2, #514]	; 0x202
 800c382:	f882 3204 	strb.w	r3, [r2, #516]	; 0x204
 800c386:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
 800c38a:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800c38e:	9920      	ldr	r1, [sp, #128]	; 0x80
 800c390:	edd3 7a08 	vldr	s15, [r3, #32]
 800c394:	edd3 6a06 	vldr	s13, [r3, #24]
 800c398:	ed93 7a07 	vldr	s14, [r3, #28]
 800c39c:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 800c3a0:	ee66 6aaa 	vmul.f32	s13, s13, s21
 800c3a4:	ee27 7a2a 	vmul.f32	s14, s14, s21
 800c3a8:	ee67 aaaa 	vmul.f32	s21, s15, s21
 800c3ac:	edc3 6a06 	vstr	s13, [r3, #24]
 800c3b0:	ed83 7a07 	vstr	s14, [r3, #28]
 800c3b4:	edc3 aa08 	vstr	s21, [r3, #32]
 800c3b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c3ba:	edd1 7a00 	vldr	s15, [r1]
 800c3be:	ed93 6a00 	vldr	s12, [r3]
 800c3c2:	ed92 7a00 	vldr	s14, [r2]
 800c3c6:	edd2 6a01 	vldr	s13, [r2, #4]
 800c3ca:	ee26 6a27 	vmul.f32	s12, s12, s15
 800c3ce:	edd2 7a02 	vldr	s15, [r2, #8]
 800c3d2:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c3d6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c3da:	ed82 7a00 	vstr	s14, [r2]
 800c3de:	ed93 6a00 	vldr	s12, [r3]
 800c3e2:	ed91 7a00 	vldr	s14, [r1]
 800c3e6:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 800c3ea:	ee26 6a07 	vmul.f32	s12, s12, s14
 800c3ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3f2:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c3f6:	ee38 7a07 	vadd.f32	s14, s16, s14
 800c3fa:	edc2 6a01 	vstr	s13, [r2, #4]
 800c3fe:	ed93 6a00 	vldr	s12, [r3]
 800c402:	edd1 6a00 	vldr	s13, [r1]
 800c406:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c408:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c40c:	ee85 6a87 	vdiv.f32	s12, s11, s14
 800c410:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c414:	edc2 7a02 	vstr	s15, [r2, #8]
 800c418:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 800c41c:	edd3 7a00 	vldr	s15, [r3]
 800c420:	edd2 6a03 	vldr	s13, [r2, #12]
 800c424:	ed92 7a04 	vldr	s14, [r2, #16]
 800c428:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c42c:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800c430:	edc2 6a03 	vstr	s13, [r2, #12]
 800c434:	edd3 6a00 	vldr	s13, [r3]
 800c438:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 800c43c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c440:	edd2 6a05 	vldr	s13, [r2, #20]
 800c444:	ed82 7a04 	vstr	s14, [r2, #16]
 800c448:	ed93 7a00 	vldr	s14, [r3]
 800c44c:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 800c450:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c454:	ee66 6a87 	vmul.f32	s13, s13, s14
 800c458:	ee27 7a88 	vmul.f32	s14, s15, s16
 800c45c:	ed5f 7a99 	vldr	s15, [pc, #-612]	; 800c1fc <m_kalman_3gyro.isra.0.constprop.0+0x176c>
 800c460:	edc2 6a05 	vstr	s13, [r2, #20]
 800c464:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 800c468:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800c46c:	ed93 7a06 	vldr	s14, [r3, #24]
 800c470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c474:	bfa8      	it	ge
 800c476:	eef0 7a46 	vmovge.f32	s15, s12
 800c47a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c47e:	ed83 7a06 	vstr	s14, [r3, #24]
 800c482:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
 800c486:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 800c48a:	ee37 7a07 	vadd.f32	s14, s14, s14
 800c48e:	ee27 7a08 	vmul.f32	s14, s14, s16
 800c492:	ed82 7a0a 	vstr	s14, [r2, #40]	; 0x28
 800c496:	ed93 7a07 	vldr	s14, [r3, #28]
 800c49a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c49e:	ed83 7a07 	vstr	s14, [r3, #28]
 800c4a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c4a4:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
 800c4a8:	edd3 6a00 	vldr	s13, [r3]
 800c4ac:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c4ae:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c4b2:	ed82 7a0b 	vstr	s14, [r2, #44]	; 0x2c
 800c4b6:	b3cb      	cbz	r3, 800c52c <m_kalman_3gyro.isra.0.constprop.0+0x1a9c>
 800c4b8:	ed92 7a03 	vldr	s14, [r2, #12]
 800c4bc:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 800c4c0:	ee27 7a08 	vmul.f32	s14, s14, s16
 800c4c4:	ed82 7a03 	vstr	s14, [r2, #12]
 800c4c8:	ed93 7a00 	vldr	s14, [r3]
 800c4cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4d0:	ed83 7a00 	vstr	s14, [r3]
 800c4d4:	ed92 7a04 	vldr	s14, [r2, #16]
 800c4d8:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 800c4dc:	ee27 7a08 	vmul.f32	s14, s14, s16
 800c4e0:	ed82 7a04 	vstr	s14, [r2, #16]
 800c4e4:	ed93 7a01 	vldr	s14, [r3, #4]
 800c4e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4ec:	ed83 7a01 	vstr	s14, [r3, #4]
 800c4f0:	ed92 7a05 	vldr	s14, [r2, #20]
 800c4f4:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 800c4f8:	ee27 7a08 	vmul.f32	s14, s14, s16
 800c4fc:	ed82 7a05 	vstr	s14, [r2, #20]
 800c500:	ed93 7a02 	vldr	s14, [r3, #8]
 800c504:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c508:	ed83 7a02 	vstr	s14, [r3, #8]
 800c50c:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
 800c510:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 800c514:	ee37 7a07 	vadd.f32	s14, s14, s14
 800c518:	ee27 8a08 	vmul.f32	s16, s14, s16
 800c51c:	ed82 8a0a 	vstr	s16, [r2, #40]	; 0x28
 800c520:	ed93 7a07 	vldr	s14, [r3, #28]
 800c524:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c528:	edc3 7a07 	vstr	s15, [r3, #28]
 800c52c:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 800c530:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c534:	edd3 7a00 	vldr	s15, [r3]
 800c538:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c53c:	ed9d 6a2e 	vldr	s12, [sp, #184]	; 0xb8
 800c540:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 800c544:	eddd 5a2d 	vldr	s11, [sp, #180]	; 0xb4
 800c548:	ed89 6a01 	vstr	s12, [r9, #4]
 800c54c:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800c550:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 800c554:	ed83 7a2e 	vstr	s14, [r3, #184]	; 0xb8
 800c558:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 800c55c:	edc9 5a06 	vstr	s11, [r9, #24]
 800c560:	ed93 7a01 	vldr	s14, [r3, #4]
 800c564:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c568:	eee7 7a07 	vfma.f32	s15, s14, s14
 800c56c:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
 800c570:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
 800c574:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 800c578:	edd3 6a02 	vldr	s13, [r3, #8]
 800c57c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c580:	eea6 7aa6 	vfma.f32	s14, s13, s13
 800c584:	edd3 7a4c 	vldr	s15, [r3, #304]	; 0x130
 800c588:	ed82 7a42 	vstr	s14, [r2, #264]	; 0x108
 800c58c:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 800c590:	ed92 7a03 	vldr	s14, [r2, #12]
 800c594:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c598:	eee7 7a07 	vfma.f32	s15, s14, s14
 800c59c:	2300      	movs	r3, #0
 800c59e:	f8c9 3000 	str.w	r3, [r9]
 800c5a2:	ed92 7a56 	vldr	s14, [r2, #344]	; 0x158
 800c5a6:	edc2 7a4c 	vstr	s15, [r2, #304]	; 0x130
 800c5aa:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 800c5ae:	eef1 6a46 	vneg.f32	s13, s12
 800c5b2:	edc9 6a03 	vstr	s13, [r9, #12]
 800c5b6:	edd2 6a04 	vldr	s13, [r2, #16]
 800c5ba:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c5be:	eea6 7aa6 	vfma.f32	s14, s13, s13
 800c5c2:	edd2 7a60 	vldr	s15, [r2, #384]	; 0x180
 800c5c6:	edd2 6a6a 	vldr	s13, [r2, #424]	; 0x1a8
 800c5ca:	ed82 7a56 	vstr	s14, [r2, #344]	; 0x158
 800c5ce:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 800c5d2:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800c5d6:	ed92 7a05 	vldr	s14, [r2, #20]
 800c5da:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c5de:	ed9d 5a2c 	vldr	s10, [sp, #176]	; 0xb0
 800c5e2:	f8c9 3010 	str.w	r3, [r9, #16]
 800c5e6:	eee7 7a07 	vfma.f32	s15, s14, s14
 800c5ea:	ed92 7a74 	vldr	s14, [r2, #464]	; 0x1d0
 800c5ee:	edc2 7a60 	vstr	s15, [r2, #384]	; 0x180
 800c5f2:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 800c5f6:	ed92 6a06 	vldr	s12, [r2, #24]
 800c5fa:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c5fe:	eee6 6a06 	vfma.f32	s13, s12, s12
 800c602:	edd2 7a7e 	vldr	s15, [r2, #504]	; 0x1f8
 800c606:	edc2 6a6a 	vstr	s13, [r2, #424]	; 0x1a8
 800c60a:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 800c60e:	edd2 6a07 	vldr	s13, [r2, #28]
 800c612:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c616:	eea6 7aa6 	vfma.f32	s14, s13, s13
 800c61a:	eeb1 6a65 	vneg.f32	s12, s11
 800c61e:	ed82 7a74 	vstr	s14, [r2, #464]	; 0x1d0
 800c622:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 800c626:	ed92 7a08 	vldr	s14, [r2, #32]
 800c62a:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c62e:	eee7 7a07 	vfma.f32	s15, s14, s14
 800c632:	eef1 5a45 	vneg.f32	s11, s10
 800c636:	edc2 7a7e 	vstr	s15, [r2, #504]	; 0x1f8
 800c63a:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 800c63e:	edc9 5a07 	vstr	s11, [r9, #28]
 800c642:	7812      	ldrb	r2, [r2, #0]
 800c644:	f881 21fc 	strb.w	r2, [r1, #508]	; 0x1fc
 800c648:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 800c64c:	7812      	ldrb	r2, [r2, #0]
 800c64e:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 800c652:	f881 21fe 	strb.w	r2, [r1, #510]	; 0x1fe
 800c656:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 800c65a:	7852      	ldrb	r2, [r2, #1]
 800c65c:	f881 21ff 	strb.w	r2, [r1, #511]	; 0x1ff
 800c660:	f881 2200 	strb.w	r2, [r1, #512]	; 0x200
 800c664:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 800c668:	f8c9 3020 	str.w	r3, [r9, #32]
 800c66c:	938b      	str	r3, [sp, #556]	; 0x22c
 800c66e:	938f      	str	r3, [sp, #572]	; 0x23c
 800c670:	9393      	str	r3, [sp, #588]	; 0x24c
 800c672:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c674:	7852      	ldrb	r2, [r2, #1]
 800c676:	ed89 6a02 	vstr	s12, [r9, #8]
 800c67a:	eef1 6a49 	vneg.f32	s13, s18
 800c67e:	eeb1 7a69 	vneg.f32	s14, s19
 800c682:	eef1 7a68 	vneg.f32	s15, s17
 800c686:	ed89 5a05 	vstr	s10, [r9, #20]
 800c68a:	ed8d 9a91 	vstr	s18, [sp, #580]	; 0x244
 800c68e:	edcd 6a8d 	vstr	s13, [sp, #564]	; 0x234
 800c692:	edcd 9a8c 	vstr	s19, [sp, #560]	; 0x230
 800c696:	ed8d 7a8e 	vstr	s14, [sp, #568]	; 0x238
 800c69a:	edcd 8a90 	vstr	s17, [sp, #576]	; 0x240
 800c69e:	edcd 7a92 	vstr	s15, [sp, #584]	; 0x248
 800c6a2:	f881 2201 	strb.w	r2, [r1, #513]	; 0x201
 800c6a6:	b183      	cbz	r3, 800c6ca <m_kalman_3gyro.isra.0.constprop.0+0x1c3a>
 800c6a8:	b17a      	cbz	r2, 800c6ca <m_kalman_3gyro.isra.0.constprop.0+0x1c3a>
 800c6aa:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800c6ac:	ed93 7a00 	vldr	s14, [r3]
 800c6b0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c6b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6bc:	f341 86f5 	ble.w	800e4aa <m_kalman_3gyro.isra.0.constprop.0+0x3a1a>
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	f881 31ff 	strb.w	r3, [r1, #511]	; 0x1ff
 800c6c6:	f8a1 3200 	strh.w	r3, [r1, #512]	; 0x200
 800c6ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c6cc:	edd3 7a00 	vldr	s15, [r3]
 800c6d0:	eef4 7aca 	vcmpe.f32	s15, s20
 800c6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6d8:	f2c0 86ae 	blt.w	800d438 <m_kalman_3gyro.isra.0.constprop.0+0x29a8>
 800c6dc:	f50d 63d5 	add.w	r3, sp, #1704	; 0x6a8
 800c6e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	f7f4 f9ba 	bl	8000a60 <__aeabi_dcmpgt>
 800c6ec:	2800      	cmp	r0, #0
 800c6ee:	f000 86a3 	beq.w	800d438 <m_kalman_3gyro.isra.0.constprop.0+0x29a8>
 800c6f2:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	f8a2 31fc 	strh.w	r3, [r2, #508]	; 0x1fc
 800c6fc:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
 800c700:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c704:	edd2 7a24 	vldr	s15, [r2, #144]	; 0x90
 800c708:	f882 3207 	strb.w	r3, [r2, #519]	; 0x207
 800c70c:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c710:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c718:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 800c71c:	dc06      	bgt.n	800c72c <m_kalman_3gyro.isra.0.constprop.0+0x1c9c>
 800c71e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800c8b4 <m_kalman_3gyro.isra.0.constprop.0+0x1e24>
 800c722:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c72a:	d50a      	bpl.n	800c742 <m_kalman_3gyro.isra.0.constprop.0+0x1cb2>
 800c72c:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c730:	2300      	movs	r3, #0
 800c732:	f8a2 31fc 	strh.w	r3, [r2, #508]	; 0x1fc
 800c736:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
 800c73a:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 800c73e:	f882 3207 	strb.w	r3, [r2, #519]	; 0x207
 800c742:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c746:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c74a:	eef0 7ae7 	vabs.f32	s15, s15
 800c74e:	ee17 0a90 	vmov	r0, s15
 800c752:	f7f3 fe9d 	bl	8000490 <__aeabi_f2d>
 800c756:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800c75a:	4604      	mov	r4, r0
 800c75c:	6818      	ldr	r0, [r3, #0]
 800c75e:	460d      	mov	r5, r1
 800c760:	f7f3 fe96 	bl	8000490 <__aeabi_f2d>
 800c764:	4606      	mov	r6, r0
 800c766:	460f      	mov	r7, r1
 800c768:	4620      	mov	r0, r4
 800c76a:	4629      	mov	r1, r5
 800c76c:	4632      	mov	r2, r6
 800c76e:	463b      	mov	r3, r7
 800c770:	f7f4 f96c 	bl	8000a4c <__aeabi_dcmpge>
 800c774:	b908      	cbnz	r0, 800c77a <m_kalman_3gyro.isra.0.constprop.0+0x1cea>
 800c776:	4634      	mov	r4, r6
 800c778:	463d      	mov	r5, r7
 800c77a:	4620      	mov	r0, r4
 800c77c:	4629      	mov	r1, r5
 800c77e:	f7f4 f9d7 	bl	8000b30 <__aeabi_d2f>
 800c782:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800c786:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800c8b8 <m_kalman_3gyro.isra.0.constprop.0+0x1e28>
 800c78a:	6018      	str	r0, [r3, #0]
 800c78c:	6058      	str	r0, [r3, #4]
 800c78e:	6098      	str	r0, [r3, #8]
 800c790:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c794:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800c798:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c79c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7a0:	f300 8621 	bgt.w	800d3e6 <m_kalman_3gyro.isra.0.constprop.0+0x2956>
 800c7a4:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800c8bc <m_kalman_3gyro.isra.0.constprop.0+0x1e2c>
 800c7a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c7ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7b0:	f100 8619 	bmi.w	800d3e6 <m_kalman_3gyro.isra.0.constprop.0+0x2956>
 800c7b4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c7b8:	ee37 8ac8 	vsub.f32	s16, s15, s16
 800c7bc:	eef0 7ac8 	vabs.f32	s15, s16
 800c7c0:	ee17 0a90 	vmov	r0, s15
 800c7c4:	f7f3 fe64 	bl	8000490 <__aeabi_f2d>
 800c7c8:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800c7cc:	4604      	mov	r4, r0
 800c7ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800c7d0:	460d      	mov	r5, r1
 800c7d2:	f7f3 fe5d 	bl	8000490 <__aeabi_f2d>
 800c7d6:	4606      	mov	r6, r0
 800c7d8:	460f      	mov	r7, r1
 800c7da:	4620      	mov	r0, r4
 800c7dc:	4629      	mov	r1, r5
 800c7de:	4632      	mov	r2, r6
 800c7e0:	463b      	mov	r3, r7
 800c7e2:	f7f4 f933 	bl	8000a4c <__aeabi_dcmpge>
 800c7e6:	2800      	cmp	r0, #0
 800c7e8:	f001 8603 	beq.w	800e3f2 <m_kalman_3gyro.isra.0.constprop.0+0x3962>
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	4629      	mov	r1, r5
 800c7f0:	f7f4 f99e 	bl	8000b30 <__aeabi_d2f>
 800c7f4:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800c7f8:	ed93 7a03 	vldr	s14, [r3, #12]
 800c7fc:	6298      	str	r0, [r3, #40]	; 0x28
 800c7fe:	ee68 7a08 	vmul.f32	s15, s16, s16
 800c802:	ee67 6a07 	vmul.f32	s13, s14, s14
 800c806:	eef4 7ae6 	vcmpe.f32	s15, s13
 800c80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c80e:	f301 85d6 	bgt.w	800e3be <m_kalman_3gyro.isra.0.constprop.0+0x392e>
 800c812:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c816:	eeb4 bae7 	vcmpe.f32	s22, s15
 800c81a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c81e:	f340 85f5 	ble.w	800d40c <m_kalman_3gyro.isra.0.constprop.0+0x297c>
 800c822:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c826:	2300      	movs	r3, #0
 800c828:	f8a2 31fc 	strh.w	r3, [r2, #508]	; 0x1fc
 800c82c:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
 800c830:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 800c834:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 800c838:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800c83c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c840:	ee7b 6a26 	vadd.f32	s13, s22, s13
 800c844:	ee37 7a07 	vadd.f32	s14, s14, s14
 800c848:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c84c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c850:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c854:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c858:	eeb4 bae6 	vcmpe.f32	s22, s13
 800c85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c860:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 800c864:	edc2 7a0b 	vstr	s15, [r2, #44]	; 0x2c
 800c868:	dd05      	ble.n	800c876 <m_kalman_3gyro.isra.0.constprop.0+0x1de6>
 800c86a:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c86e:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 800c872:	f882 3207 	strb.w	r3, [r2, #519]	; 0x207
 800c876:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c87a:	f893 38ae 	ldrb.w	r3, [r3, #2222]	; 0x8ae
 800c87e:	2b0e      	cmp	r3, #14
 800c880:	d804      	bhi.n	800c88c <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 800c882:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c886:	3305      	adds	r3, #5
 800c888:	f882 38ae 	strb.w	r3, [r2, #2222]	; 0x8ae
 800c88c:	ab79      	add	r3, sp, #484	; 0x1e4
 800c88e:	9300      	str	r3, [sp, #0]
 800c890:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c894:	eddf 8a0a 	vldr	s17, [pc, #40]	; 800c8c0 <m_kalman_3gyro.isra.0.constprop.0+0x1e30>
 800c898:	9e03      	ldr	r6, [sp, #12]
 800c89a:	f8dd 76d0 	ldr.w	r7, [sp, #1744]	; 0x6d0
 800c89e:	3364      	adds	r3, #100	; 0x64
 800c8a0:	9301      	str	r3, [sp, #4]
 800c8a2:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c8a6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c8aa:	f50d 780b 	add.w	r8, sp, #556	; 0x22c
 800c8ae:	9302      	str	r3, [sp, #8]
 800c8b0:	e02a      	b.n	800c908 <m_kalman_3gyro.isra.0.constprop.0+0x1e78>
 800c8b2:	bf00      	nop
 800c8b4:	3e4ccccd 	.word	0x3e4ccccd
 800c8b8:	3f8f5c29 	.word	0x3f8f5c29
 800c8bc:	3f59999a 	.word	0x3f59999a
 800c8c0:	00000000 	.word	0x00000000
 800c8c4:	ed18 da03 	vldr	s26, [r8, #-12]
 800c8c8:	edd8 da00 	vldr	s27, [r8]
 800c8cc:	ed98 ea03 	vldr	s28, [r8, #12]
 800c8d0:	9b02      	ldr	r3, [sp, #8]
 800c8d2:	ee3d da0d 	vadd.f32	s26, s26, s26
 800c8d6:	ee7d daad 	vadd.f32	s27, s27, s27
 800c8da:	ee3e ea0e 	vadd.f32	s28, s28, s28
 800c8de:	5d9b      	ldrb	r3, [r3, r6]
 800c8e0:	ed8d da79 	vstr	s26, [sp, #484]	; 0x1e4
 800c8e4:	edcd da7a 	vstr	s27, [sp, #488]	; 0x1e8
 800c8e8:	ed8d ea7b 	vstr	s28, [sp, #492]	; 0x1ec
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	f040 80f1 	bne.w	800cad4 <m_kalman_3gyro.isra.0.constprop.0+0x2044>
 800c8f2:	9b00      	ldr	r3, [sp, #0]
 800c8f4:	3304      	adds	r3, #4
 800c8f6:	9300      	str	r3, [sp, #0]
 800c8f8:	9b01      	ldr	r3, [sp, #4]
 800c8fa:	3304      	adds	r3, #4
 800c8fc:	3601      	adds	r6, #1
 800c8fe:	9301      	str	r3, [sp, #4]
 800c900:	f108 0804 	add.w	r8, r8, #4
 800c904:	f109 0904 	add.w	r9, r9, #4
 800c908:	2e02      	cmp	r6, #2
 800c90a:	edcd 8a79 	vstr	s17, [sp, #484]	; 0x1e4
 800c90e:	edcd 8a7a 	vstr	s17, [sp, #488]	; 0x1e8
 800c912:	edcd 8a7b 	vstr	s17, [sp, #492]	; 0x1ec
 800c916:	edcd 8a7c 	vstr	s17, [sp, #496]	; 0x1f0
 800c91a:	edcd 8a7d 	vstr	s17, [sp, #500]	; 0x1f4
 800c91e:	edcd 8a7e 	vstr	s17, [sp, #504]	; 0x1f8
 800c922:	edcd 8a7f 	vstr	s17, [sp, #508]	; 0x1fc
 800c926:	edcd 8a80 	vstr	s17, [sp, #512]	; 0x200
 800c92a:	edcd 8a81 	vstr	s17, [sp, #516]	; 0x204
 800c92e:	f240 80ca 	bls.w	800cac6 <m_kalman_3gyro.isra.0.constprop.0+0x2036>
 800c932:	2e05      	cmp	r6, #5
 800c934:	ddc6      	ble.n	800c8c4 <m_kalman_3gyro.isra.0.constprop.0+0x1e34>
 800c936:	9b02      	ldr	r3, [sp, #8]
 800c938:	9900      	ldr	r1, [sp, #0]
 800c93a:	5d9b      	ldrb	r3, [r3, r6]
 800c93c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c940:	f841 2c0c 	str.w	r2, [r1, #-12]
 800c944:	2b00      	cmp	r3, #0
 800c946:	f040 857f 	bne.w	800d448 <m_kalman_3gyro.isra.0.constprop.0+0x29b8>
 800c94a:	2e0b      	cmp	r6, #11
 800c94c:	d1d1      	bne.n	800c8f2 <m_kalman_3gyro.isra.0.constprop.0+0x1e62>
 800c94e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c952:	edd3 8a26 	vldr	s17, [r3, #152]	; 0x98
 800c956:	ed93 9a25 	vldr	s18, [r3, #148]	; 0x94
 800c95a:	ed93 8a27 	vldr	s16, [r3, #156]	; 0x9c
 800c95e:	ee68 9aa8 	vmul.f32	s19, s17, s17
 800c962:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c966:	eee9 9a09 	vfma.f32	s19, s18, s18
 800c96a:	eee8 9a08 	vfma.f32	s19, s16, s16
 800c96e:	eef4 9ae7 	vcmpe.f32	s19, s15
 800c972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c976:	f100 860f 	bmi.w	800d598 <m_kalman_3gyro.isra.0.constprop.0+0x2b08>
 800c97a:	ed1f aa2f 	vldr	s20, [pc, #-188]	; 800c8c0 <m_kalman_3gyro.isra.0.constprop.0+0x1e30>
 800c97e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c982:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800c984:	2b00      	cmp	r3, #0
 800c986:	f000 8579 	beq.w	800d47c <m_kalman_3gyro.isra.0.constprop.0+0x29ec>
 800c98a:	f8dd 06b8 	ldr.w	r0, [sp, #1720]	; 0x6b8
 800c98e:	9907      	ldr	r1, [sp, #28]
 800c990:	2300      	movs	r3, #0
 800c992:	6003      	str	r3, [r0, #0]
 800c994:	f8dd 06b8 	ldr.w	r0, [sp, #1720]	; 0x6b8
 800c998:	600b      	str	r3, [r1, #0]
 800c99a:	6043      	str	r3, [r0, #4]
 800c99c:	f8dd 06b8 	ldr.w	r0, [sp, #1720]	; 0x6b8
 800c9a0:	604b      	str	r3, [r1, #4]
 800c9a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c9a6:	608b      	str	r3, [r1, #8]
 800c9a8:	6083      	str	r3, [r0, #8]
 800c9aa:	60ca      	str	r2, [r1, #12]
 800c9ac:	60c2      	str	r2, [r0, #12]
 800c9ae:	9f07      	ldr	r7, [sp, #28]
 800c9b0:	9904      	ldr	r1, [sp, #16]
 800c9b2:	4638      	mov	r0, r7
 800c9b4:	f7fb ffa8 	bl	8008908 <m_q2dcm_eml>
 800c9b8:	ed97 9a01 	vldr	s18, [r7, #4]
 800c9bc:	edd7 9a00 	vldr	s19, [r7]
 800c9c0:	edd7 8a02 	vldr	s17, [r7, #8]
 800c9c4:	ed97 8a03 	vldr	s16, [r7, #12]
 800c9c8:	ee69 7a09 	vmul.f32	s15, s18, s18
 800c9cc:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800c9d0:	eee8 7aa8 	vfma.f32	s15, s17, s17
 800c9d4:	eee8 7a08 	vfma.f32	s15, s16, s16
 800c9d8:	ee17 0a90 	vmov	r0, s15
 800c9dc:	f7f3 fd58 	bl	8000490 <__aeabi_f2d>
 800c9e0:	ec41 0b10 	vmov	d0, r0, r1
 800c9e4:	f006 fc4c 	bl	8013280 <sqrt>
 800c9e8:	ec51 0b10 	vmov	r0, r1, d0
 800c9ec:	f7f4 f8a0 	bl	8000b30 <__aeabi_d2f>
 800c9f0:	ee07 0a90 	vmov	s15, r0
 800c9f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9f8:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800c9fc:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ca00:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800ca02:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 800ca04:	f503 7616 	add.w	r6, r3, #600	; 0x258
 800ca08:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800ca0c:	ee29 9a27 	vmul.f32	s18, s18, s15
 800ca10:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800ca14:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ca18:	edc7 9a00 	vstr	s19, [r7]
 800ca1c:	ed87 9a01 	vstr	s18, [r7, #4]
 800ca20:	edc7 8a02 	vstr	s17, [r7, #8]
 800ca24:	ed87 8a03 	vstr	s16, [r7, #12]
 800ca28:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800ca2c:	f8dd 76b4 	ldr.w	r7, [sp, #1716]	; 0x6b4
 800ca30:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 800ca34:	6821      	ldr	r1, [r4, #0]
 800ca36:	6862      	ldr	r2, [r4, #4]
 800ca38:	68a3      	ldr	r3, [r4, #8]
 800ca3a:	68e0      	ldr	r0, [r4, #12]
 800ca3c:	60e8      	str	r0, [r5, #12]
 800ca3e:	3410      	adds	r4, #16
 800ca40:	42b4      	cmp	r4, r6
 800ca42:	6029      	str	r1, [r5, #0]
 800ca44:	606a      	str	r2, [r5, #4]
 800ca46:	60ab      	str	r3, [r5, #8]
 800ca48:	f105 0510 	add.w	r5, r5, #16
 800ca4c:	d1f2      	bne.n	800ca34 <m_kalman_3gyro.isra.0.constprop.0+0x1fa4>
 800ca4e:	6823      	ldr	r3, [r4, #0]
 800ca50:	602b      	str	r3, [r5, #0]
 800ca52:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ca56:	f8dd 26c0 	ldr.w	r2, [sp, #1728]	; 0x6c0
 800ca5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ca5e:	6013      	str	r3, [r2, #0]
 800ca60:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ca64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ca68:	6053      	str	r3, [r2, #4]
 800ca6a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ca6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ca72:	6093      	str	r3, [r2, #8]
 800ca74:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ca78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ca7c:	60d3      	str	r3, [r2, #12]
 800ca7e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ca82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ca86:	6113      	str	r3, [r2, #16]
 800ca88:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ca8c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ca90:	6153      	str	r3, [r2, #20]
 800ca92:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ca96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ca9a:	6193      	str	r3, [r2, #24]
 800ca9c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800caa0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800caa4:	61d3      	str	r3, [r2, #28]
 800caa6:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800caaa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800caae:	6213      	str	r3, [r2, #32]
 800cab0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f8dd 26bc 	ldr.w	r2, [sp, #1724]	; 0x6bc
 800cab8:	6013      	str	r3, [r2, #0]
 800caba:	f20d 6d24 	addw	sp, sp, #1572	; 0x624
 800cabe:	ecbd 8b10 	vpop	{d8-d15}
 800cac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cac6:	ed99 da00 	vldr	s26, [r9]
 800caca:	edd9 da03 	vldr	s27, [r9, #12]
 800cace:	ed99 ea06 	vldr	s28, [r9, #24]
 800cad2:	e6fd      	b.n	800c8d0 <m_kalman_3gyro.isra.0.constprop.0+0x1e40>
 800cad4:	eef0 ea68 	vmov.f32	s29, s17
 800cad8:	eef0 5a68 	vmov.f32	s11, s17
 800cadc:	eeb0 6a68 	vmov.f32	s12, s17
 800cae0:	eef0 6a68 	vmov.f32	s13, s17
 800cae4:	eef0 fa68 	vmov.f32	s31, s17
 800cae8:	eeb0 fa68 	vmov.f32	s30, s17
 800caec:	ad70      	add	r5, sp, #448	; 0x1c0
 800caee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800caf2:	9303      	str	r3, [sp, #12]
 800caf4:	462a      	mov	r2, r5
 800caf6:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 800cafa:	edc5 8a00 	vstr	s17, [r5]
 800cafe:	edc5 8a01 	vstr	s17, [r5, #4]
 800cb02:	edc5 8a02 	vstr	s17, [r5, #8]
 800cb06:	edc5 8a03 	vstr	s17, [r5, #12]
 800cb0a:	edc5 8a04 	vstr	s17, [r5, #16]
 800cb0e:	edc5 8a05 	vstr	s17, [r5, #20]
 800cb12:	edc5 8a06 	vstr	s17, [r5, #24]
 800cb16:	edc5 8a07 	vstr	s17, [r5, #28]
 800cb1a:	edc5 8a08 	vstr	s17, [r5, #32]
 800cb1e:	ecb3 7a01 	vldmia	r3!, {s14}
 800cb22:	ecf2 7a01 	vldmia	r2!, {s15}
 800cb26:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cb2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb2e:	d006      	beq.n	800cb3e <m_kalman_3gyro.isra.0.constprop.0+0x20ae>
 800cb30:	eeb5 da40 	vcmp.f32	s26, #0.0
 800cb34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb38:	bf18      	it	ne
 800cb3a:	eeed 7a07 	vfmane.f32	s15, s26, s14
 800cb3e:	ed93 7a08 	vldr	s14, [r3, #32]
 800cb42:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cb46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb4a:	d006      	beq.n	800cb5a <m_kalman_3gyro.isra.0.constprop.0+0x20ca>
 800cb4c:	eef5 da40 	vcmp.f32	s27, #0.0
 800cb50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb54:	bf18      	it	ne
 800cb56:	eeed 7a87 	vfmane.f32	s15, s27, s14
 800cb5a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800cb5e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cb62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb66:	d006      	beq.n	800cb76 <m_kalman_3gyro.isra.0.constprop.0+0x20e6>
 800cb68:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800cb6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb70:	bf18      	it	ne
 800cb72:	eeee 7a07 	vfmane.f32	s15, s28, s14
 800cb76:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800cb7a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cb7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb82:	d006      	beq.n	800cb92 <m_kalman_3gyro.isra.0.constprop.0+0x2102>
 800cb84:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800cb88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb8c:	bf18      	it	ne
 800cb8e:	eeef 7a07 	vfmane.f32	s15, s30, s14
 800cb92:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800cb96:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cb9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb9e:	d006      	beq.n	800cbae <m_kalman_3gyro.isra.0.constprop.0+0x211e>
 800cba0:	eef5 fa40 	vcmp.f32	s31, #0.0
 800cba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cba8:	bf18      	it	ne
 800cbaa:	eeef 7a87 	vfmane.f32	s15, s31, s14
 800cbae:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800cbb2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cbb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbba:	d006      	beq.n	800cbca <m_kalman_3gyro.isra.0.constprop.0+0x213a>
 800cbbc:	eef5 6a40 	vcmp.f32	s13, #0.0
 800cbc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbc4:	bf18      	it	ne
 800cbc6:	eee6 7a87 	vfmane.f32	s15, s13, s14
 800cbca:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 800cbce:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbd6:	d006      	beq.n	800cbe6 <m_kalman_3gyro.isra.0.constprop.0+0x2156>
 800cbd8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800cbdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbe0:	bf18      	it	ne
 800cbe2:	eee6 7a07 	vfmane.f32	s15, s12, s14
 800cbe6:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 800cbea:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cbee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbf2:	d006      	beq.n	800cc02 <m_kalman_3gyro.isra.0.constprop.0+0x2172>
 800cbf4:	eef5 5a40 	vcmp.f32	s11, #0.0
 800cbf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbfc:	bf18      	it	ne
 800cbfe:	eee5 7a87 	vfmane.f32	s15, s11, s14
 800cc02:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 800cc06:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cc0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc0e:	d006      	beq.n	800cc1e <m_kalman_3gyro.isra.0.constprop.0+0x218e>
 800cc10:	eef5 ea40 	vcmp.f32	s29, #0.0
 800cc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc18:	bf18      	it	ne
 800cc1a:	eeee 7a87 	vfmane.f32	s15, s29, s14
 800cc1e:	428b      	cmp	r3, r1
 800cc20:	ed42 7a01 	vstr	s15, [r2, #-4]
 800cc24:	f47f af7b 	bne.w	800cb1e <m_kalman_3gyro.isra.0.constprop.0+0x208e>
 800cc28:	eeb5 da40 	vcmp.f32	s26, #0.0
 800cc2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc30:	f000 83d6 	beq.w	800d3e0 <m_kalman_3gyro.isra.0.constprop.0+0x2950>
 800cc34:	edd5 7a00 	vldr	s15, [r5]
 800cc38:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cc3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc40:	d001      	beq.n	800cc46 <m_kalman_3gyro.isra.0.constprop.0+0x21b6>
 800cc42:	ee67 7a8d 	vmul.f32	s15, s15, s26
 800cc46:	eef5 da40 	vcmp.f32	s27, #0.0
 800cc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc4e:	ed95 ba01 	vldr	s22, [r5, #4]
 800cc52:	d006      	beq.n	800cc62 <m_kalman_3gyro.isra.0.constprop.0+0x21d2>
 800cc54:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800cc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc5c:	bf18      	it	ne
 800cc5e:	eeeb 7a2d 	vfmane.f32	s15, s22, s27
 800cc62:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800cc66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc6a:	edd5 9a02 	vldr	s19, [r5, #8]
 800cc6e:	d006      	beq.n	800cc7e <m_kalman_3gyro.isra.0.constprop.0+0x21ee>
 800cc70:	eef5 9a40 	vcmp.f32	s19, #0.0
 800cc74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc78:	bf18      	it	ne
 800cc7a:	eee9 7a8e 	vfmane.f32	s15, s19, s28
 800cc7e:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800cc82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc86:	d008      	beq.n	800cc9a <m_kalman_3gyro.isra.0.constprop.0+0x220a>
 800cc88:	ed95 7a03 	vldr	s14, [r5, #12]
 800cc8c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc94:	bf18      	it	ne
 800cc96:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 800cc9a:	eef5 fa40 	vcmp.f32	s31, #0.0
 800cc9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cca2:	d008      	beq.n	800ccb6 <m_kalman_3gyro.isra.0.constprop.0+0x2226>
 800cca4:	ed95 7a04 	vldr	s14, [r5, #16]
 800cca8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ccac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccb0:	bf18      	it	ne
 800ccb2:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 800ccb6:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ccba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccbe:	d008      	beq.n	800ccd2 <m_kalman_3gyro.isra.0.constprop.0+0x2242>
 800ccc0:	ed95 7a05 	vldr	s14, [r5, #20]
 800ccc4:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ccc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cccc:	bf18      	it	ne
 800ccce:	eee7 7a26 	vfmane.f32	s15, s14, s13
 800ccd2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ccd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccda:	d008      	beq.n	800ccee <m_kalman_3gyro.isra.0.constprop.0+0x225e>
 800ccdc:	ed95 7a06 	vldr	s14, [r5, #24]
 800cce0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cce8:	bf18      	it	ne
 800ccea:	eee7 7a06 	vfmane.f32	s15, s14, s12
 800ccee:	eef5 5a40 	vcmp.f32	s11, #0.0
 800ccf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccf6:	d008      	beq.n	800cd0a <m_kalman_3gyro.isra.0.constprop.0+0x227a>
 800ccf8:	ed95 7a07 	vldr	s14, [r5, #28]
 800ccfc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cd00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd04:	bf18      	it	ne
 800cd06:	eee7 7a25 	vfmane.f32	s15, s14, s11
 800cd0a:	eef5 ea40 	vcmp.f32	s29, #0.0
 800cd0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd12:	d008      	beq.n	800cd26 <m_kalman_3gyro.isra.0.constprop.0+0x2296>
 800cd14:	ed95 7a08 	vldr	s14, [r5, #32]
 800cd18:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cd1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd20:	bf18      	it	ne
 800cd22:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 800cd26:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800cd2a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800cd2e:	ed93 7a00 	vldr	s14, [r3]
 800cd32:	ed95 8a00 	vldr	s16, [r5]
 800cd36:	edd5 ba03 	vldr	s23, [r5, #12]
 800cd3a:	ed95 ca04 	vldr	s24, [r5, #16]
 800cd3e:	edd5 ca05 	vldr	s25, [r5, #20]
 800cd42:	edd5 aa06 	vldr	s21, [r5, #24]
 800cd46:	ed95 aa07 	vldr	s20, [r5, #28]
 800cd4a:	ed95 5a08 	vldr	s10, [r5, #32]
 800cd4e:	eee7 7a07 	vfma.f32	s15, s14, s14
 800cd52:	2e05      	cmp	r6, #5
 800cd54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd58:	ee87 9a27 	vdiv.f32	s18, s14, s15
 800cd5c:	ee2b ba09 	vmul.f32	s22, s22, s18
 800cd60:	ee69 9a89 	vmul.f32	s19, s19, s18
 800cd64:	ee29 8a08 	vmul.f32	s16, s18, s16
 800cd68:	ee69 ba2b 	vmul.f32	s23, s18, s23
 800cd6c:	ee29 ca0c 	vmul.f32	s24, s18, s24
 800cd70:	ee69 ca2c 	vmul.f32	s25, s18, s25
 800cd74:	ee69 aa2a 	vmul.f32	s21, s18, s21
 800cd78:	ee29 aa0a 	vmul.f32	s20, s18, s20
 800cd7c:	ee29 9a05 	vmul.f32	s18, s18, s10
 800cd80:	ed8d ba68 	vstr	s22, [sp, #416]	; 0x1a0
 800cd84:	edcd 9a69 	vstr	s19, [sp, #420]	; 0x1a4
 800cd88:	ed8d 8a67 	vstr	s16, [sp, #412]	; 0x19c
 800cd8c:	edcd ba6a 	vstr	s23, [sp, #424]	; 0x1a8
 800cd90:	ed8d ca6b 	vstr	s24, [sp, #428]	; 0x1ac
 800cd94:	edcd ca6c 	vstr	s25, [sp, #432]	; 0x1b0
 800cd98:	edcd aa6d 	vstr	s21, [sp, #436]	; 0x1b4
 800cd9c:	ed8d aa6e 	vstr	s20, [sp, #440]	; 0x1b8
 800cda0:	ed8d 9a6f 	vstr	s18, [sp, #444]	; 0x1bc
 800cda4:	f240 8087 	bls.w	800ceb6 <m_kalman_3gyro.isra.0.constprop.0+0x2426>
 800cda8:	9b01      	ldr	r3, [sp, #4]
 800cdaa:	eeb5 da40 	vcmp.f32	s26, #0.0
 800cdae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdb2:	ed93 7a00 	vldr	s14, [r3]
 800cdb6:	f000 835e 	beq.w	800d476 <m_kalman_3gyro.isra.0.constprop.0+0x29e6>
 800cdba:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800cdbe:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cdc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc6:	d001      	beq.n	800cdcc <m_kalman_3gyro.isra.0.constprop.0+0x233c>
 800cdc8:	ee67 7a8d 	vmul.f32	s15, s15, s26
 800cdcc:	eef5 da40 	vcmp.f32	s27, #0.0
 800cdd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdd4:	d008      	beq.n	800cde8 <m_kalman_3gyro.isra.0.constprop.0+0x2358>
 800cdd6:	ed97 5a26 	vldr	s10, [r7, #152]	; 0x98
 800cdda:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800cdde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cde2:	bf18      	it	ne
 800cde4:	eee5 7a2d 	vfmane.f32	s15, s10, s27
 800cde8:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800cdec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf0:	d008      	beq.n	800ce04 <m_kalman_3gyro.isra.0.constprop.0+0x2374>
 800cdf2:	ed97 5a27 	vldr	s10, [r7, #156]	; 0x9c
 800cdf6:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800cdfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdfe:	bf18      	it	ne
 800ce00:	eee5 7a0e 	vfmane.f32	s15, s10, s28
 800ce04:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800ce08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce0c:	d008      	beq.n	800ce20 <m_kalman_3gyro.isra.0.constprop.0+0x2390>
 800ce0e:	ed97 5a28 	vldr	s10, [r7, #160]	; 0xa0
 800ce12:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800ce16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce1a:	bf18      	it	ne
 800ce1c:	eee5 7a0f 	vfmane.f32	s15, s10, s30
 800ce20:	eef5 fa40 	vcmp.f32	s31, #0.0
 800ce24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce28:	d008      	beq.n	800ce3c <m_kalman_3gyro.isra.0.constprop.0+0x23ac>
 800ce2a:	ed97 5a29 	vldr	s10, [r7, #164]	; 0xa4
 800ce2e:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800ce32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce36:	bf18      	it	ne
 800ce38:	eee5 7a2f 	vfmane.f32	s15, s10, s31
 800ce3c:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ce40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce44:	d008      	beq.n	800ce58 <m_kalman_3gyro.isra.0.constprop.0+0x23c8>
 800ce46:	ed97 5a2a 	vldr	s10, [r7, #168]	; 0xa8
 800ce4a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800ce4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce52:	bf18      	it	ne
 800ce54:	eee5 7a26 	vfmane.f32	s15, s10, s13
 800ce58:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ce5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce60:	d008      	beq.n	800ce74 <m_kalman_3gyro.isra.0.constprop.0+0x23e4>
 800ce62:	ed97 5a2b 	vldr	s10, [r7, #172]	; 0xac
 800ce66:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800ce6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce6e:	bf18      	it	ne
 800ce70:	eee5 7a06 	vfmane.f32	s15, s10, s12
 800ce74:	eef5 5a40 	vcmp.f32	s11, #0.0
 800ce78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce7c:	d008      	beq.n	800ce90 <m_kalman_3gyro.isra.0.constprop.0+0x2400>
 800ce7e:	ed97 5a2c 	vldr	s10, [r7, #176]	; 0xb0
 800ce82:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800ce86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce8a:	bf18      	it	ne
 800ce8c:	eee5 7a25 	vfmane.f32	s15, s10, s11
 800ce90:	eef5 ea40 	vcmp.f32	s29, #0.0
 800ce94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce98:	d008      	beq.n	800ceac <m_kalman_3gyro.isra.0.constprop.0+0x241c>
 800ce9a:	ed97 5a2d 	vldr	s10, [r7, #180]	; 0xb4
 800ce9e:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800cea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cea6:	bf18      	it	ne
 800cea8:	eee5 7a2e 	vfmane.f32	s15, s10, s29
 800ceac:	9b01      	ldr	r3, [sp, #4]
 800ceae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ceb2:	edc3 7a00 	vstr	s15, [r3]
 800ceb6:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800ceba:	2100      	movs	r1, #0
 800cebc:	4658      	mov	r0, fp
 800cebe:	edcd 5a08 	vstr	s11, [sp, #32]
 800cec2:	ed8d 6a06 	vstr	s12, [sp, #24]
 800cec6:	edcd 6a05 	vstr	s13, [sp, #20]
 800ceca:	f005 fff7 	bl	8012ebc <memset>
 800cece:	eddd 5a08 	vldr	s11, [sp, #32]
 800ced2:	ed9d 6a06 	vldr	s12, [sp, #24]
 800ced6:	eddd 6a05 	vldr	s13, [sp, #20]
 800ceda:	465c      	mov	r4, fp
 800cedc:	aa67      	add	r2, sp, #412	; 0x19c
 800cede:	465b      	mov	r3, fp
 800cee0:	ecf2 7a01 	vldmia	r2!, {s15}
 800cee4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceec:	d062      	beq.n	800cfb4 <m_kalman_3gyro.isra.0.constprop.0+0x2524>
 800ceee:	eeb5 da40 	vcmp.f32	s26, #0.0
 800cef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cef6:	d005      	beq.n	800cf04 <m_kalman_3gyro.isra.0.constprop.0+0x2474>
 800cef8:	ed93 7a00 	vldr	s14, [r3]
 800cefc:	eea7 7a8d 	vfma.f32	s14, s15, s26
 800cf00:	ed83 7a00 	vstr	s14, [r3]
 800cf04:	eef5 da40 	vcmp.f32	s27, #0.0
 800cf08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf0c:	d005      	beq.n	800cf1a <m_kalman_3gyro.isra.0.constprop.0+0x248a>
 800cf0e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800cf12:	eea7 7aad 	vfma.f32	s14, s15, s27
 800cf16:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
 800cf1a:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800cf1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf22:	d005      	beq.n	800cf30 <m_kalman_3gyro.isra.0.constprop.0+0x24a0>
 800cf24:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800cf28:	eea7 7a8e 	vfma.f32	s14, s15, s28
 800cf2c:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 800cf30:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800cf34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf38:	d005      	beq.n	800cf46 <m_kalman_3gyro.isra.0.constprop.0+0x24b6>
 800cf3a:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800cf3e:	eea7 7a8f 	vfma.f32	s14, s15, s30
 800cf42:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 800cf46:	eef5 fa40 	vcmp.f32	s31, #0.0
 800cf4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf4e:	d005      	beq.n	800cf5c <m_kalman_3gyro.isra.0.constprop.0+0x24cc>
 800cf50:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800cf54:	eea7 7aaf 	vfma.f32	s14, s15, s31
 800cf58:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 800cf5c:	eef5 6a40 	vcmp.f32	s13, #0.0
 800cf60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf64:	d005      	beq.n	800cf72 <m_kalman_3gyro.isra.0.constprop.0+0x24e2>
 800cf66:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800cf6a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800cf6e:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 800cf72:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800cf76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf7a:	d005      	beq.n	800cf88 <m_kalman_3gyro.isra.0.constprop.0+0x24f8>
 800cf7c:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 800cf80:	eea7 7a86 	vfma.f32	s14, s15, s12
 800cf84:	ed83 7a36 	vstr	s14, [r3, #216]	; 0xd8
 800cf88:	eef5 5a40 	vcmp.f32	s11, #0.0
 800cf8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf90:	d005      	beq.n	800cf9e <m_kalman_3gyro.isra.0.constprop.0+0x250e>
 800cf92:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 800cf96:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800cf9a:	ed83 7a3f 	vstr	s14, [r3, #252]	; 0xfc
 800cf9e:	eef5 ea40 	vcmp.f32	s29, #0.0
 800cfa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfa6:	d005      	beq.n	800cfb4 <m_kalman_3gyro.isra.0.constprop.0+0x2524>
 800cfa8:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 800cfac:	eea7 7aae 	vfma.f32	s14, s15, s29
 800cfb0:	ed83 7a48 	vstr	s14, [r3, #288]	; 0x120
 800cfb4:	4295      	cmp	r5, r2
 800cfb6:	f103 0304 	add.w	r3, r3, #4
 800cfba:	d191      	bne.n	800cee0 <m_kalman_3gyro.isra.0.constprop.0+0x2450>
 800cfbc:	f8df e690 	ldr.w	lr, [pc, #1680]	; 800d650 <m_kalman_3gyro.isra.0.constprop.0+0x2bc0>
 800cfc0:	f8df c690 	ldr.w	ip, [pc, #1680]	; 800d654 <m_kalman_3gyro.isra.0.constprop.0+0x2bc4>
 800cfc4:	f50b 70a2 	add.w	r0, fp, #324	; 0x144
 800cfc8:	465b      	mov	r3, fp
 800cfca:	2200      	movs	r2, #0
 800cfcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfd0:	fb0e f102 	mul.w	r1, lr, r2
 800cfd4:	ebbc 0f71 	cmp.w	ip, r1, ror #1
 800cfd8:	edd3 7a00 	vldr	s15, [r3]
 800cfdc:	f0c0 81da 	bcc.w	800d394 <m_kalman_3gyro.isra.0.constprop.0+0x2904>
 800cfe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfe4:	3201      	adds	r2, #1
 800cfe6:	ece3 7a01 	vstmia	r3!, {s15}
 800cfea:	4298      	cmp	r0, r3
 800cfec:	d1f0      	bne.n	800cfd0 <m_kalman_3gyro.isra.0.constprop.0+0x2540>
 800cfee:	ed9d da03 	vldr	s26, [sp, #12]
 800cff2:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800cff6:	ee1d 1a10 	vmov	r1, s26
 800cffa:	4650      	mov	r0, sl
 800cffc:	f005 ff50 	bl	8012ea0 <memcpy>
 800d000:	2100      	movs	r1, #0
 800d002:	ee1d 0a10 	vmov	r0, s26
 800d006:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800d00a:	f005 ff57 	bl	8012ebc <memset>
 800d00e:	46bc      	mov	ip, r7
 800d010:	2000      	movs	r0, #0
 800d012:	f50d 61c4 	add.w	r1, sp, #1568	; 0x620
 800d016:	ecf4 3a01 	vldmia	r4!, {s7}
 800d01a:	ed94 4a08 	vldr	s8, [r4, #32]
 800d01e:	edd4 4a11 	vldr	s9, [r4, #68]	; 0x44
 800d022:	ed94 5a1a 	vldr	s10, [r4, #104]	; 0x68
 800d026:	edd4 5a23 	vldr	s11, [r4, #140]	; 0x8c
 800d02a:	ed94 6a2c 	vldr	s12, [r4, #176]	; 0xb0
 800d02e:	edd4 6a35 	vldr	s13, [r4, #212]	; 0xd4
 800d032:	ed94 7a3e 	vldr	s14, [r4, #248]	; 0xf8
 800d036:	edd4 7a47 	vldr	s15, [r4, #284]	; 0x11c
 800d03a:	4653      	mov	r3, sl
 800d03c:	4662      	mov	r2, ip
 800d03e:	eef5 3a40 	vcmp.f32	s7, #0.0
 800d042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d046:	d00c      	beq.n	800d062 <m_kalman_3gyro.isra.0.constprop.0+0x25d2>
 800d048:	ed93 3a00 	vldr	s6, [r3]
 800d04c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800d050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d054:	d005      	beq.n	800d062 <m_kalman_3gyro.isra.0.constprop.0+0x25d2>
 800d056:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 800d05a:	eee3 2a83 	vfma.f32	s5, s7, s6
 800d05e:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 800d062:	eeb5 4a40 	vcmp.f32	s8, #0.0
 800d066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d06a:	d00c      	beq.n	800d086 <m_kalman_3gyro.isra.0.constprop.0+0x25f6>
 800d06c:	ed93 3a01 	vldr	s6, [r3, #4]
 800d070:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800d074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d078:	d005      	beq.n	800d086 <m_kalman_3gyro.isra.0.constprop.0+0x25f6>
 800d07a:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 800d07e:	eee4 2a03 	vfma.f32	s5, s8, s6
 800d082:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 800d086:	eef5 4a40 	vcmp.f32	s9, #0.0
 800d08a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d08e:	d00c      	beq.n	800d0aa <m_kalman_3gyro.isra.0.constprop.0+0x261a>
 800d090:	ed93 3a02 	vldr	s6, [r3, #8]
 800d094:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800d098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d09c:	d005      	beq.n	800d0aa <m_kalman_3gyro.isra.0.constprop.0+0x261a>
 800d09e:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 800d0a2:	eee4 2a83 	vfma.f32	s5, s9, s6
 800d0a6:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 800d0aa:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800d0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0b2:	d00c      	beq.n	800d0ce <m_kalman_3gyro.isra.0.constprop.0+0x263e>
 800d0b4:	ed93 3a03 	vldr	s6, [r3, #12]
 800d0b8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800d0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0c0:	d005      	beq.n	800d0ce <m_kalman_3gyro.isra.0.constprop.0+0x263e>
 800d0c2:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 800d0c6:	eee5 2a03 	vfma.f32	s5, s10, s6
 800d0ca:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 800d0ce:	eef5 5a40 	vcmp.f32	s11, #0.0
 800d0d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0d6:	d00c      	beq.n	800d0f2 <m_kalman_3gyro.isra.0.constprop.0+0x2662>
 800d0d8:	ed93 3a04 	vldr	s6, [r3, #16]
 800d0dc:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800d0e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0e4:	d005      	beq.n	800d0f2 <m_kalman_3gyro.isra.0.constprop.0+0x2662>
 800d0e6:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 800d0ea:	eee5 2a83 	vfma.f32	s5, s11, s6
 800d0ee:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 800d0f2:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800d0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0fa:	d00c      	beq.n	800d116 <m_kalman_3gyro.isra.0.constprop.0+0x2686>
 800d0fc:	ed93 3a05 	vldr	s6, [r3, #20]
 800d100:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800d104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d108:	d005      	beq.n	800d116 <m_kalman_3gyro.isra.0.constprop.0+0x2686>
 800d10a:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 800d10e:	eee6 2a03 	vfma.f32	s5, s12, s6
 800d112:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 800d116:	eef5 6a40 	vcmp.f32	s13, #0.0
 800d11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d11e:	d00c      	beq.n	800d13a <m_kalman_3gyro.isra.0.constprop.0+0x26aa>
 800d120:	ed93 3a06 	vldr	s6, [r3, #24]
 800d124:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800d128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d12c:	d005      	beq.n	800d13a <m_kalman_3gyro.isra.0.constprop.0+0x26aa>
 800d12e:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 800d132:	eee6 2a83 	vfma.f32	s5, s13, s6
 800d136:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 800d13a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d142:	d00c      	beq.n	800d15e <m_kalman_3gyro.isra.0.constprop.0+0x26ce>
 800d144:	ed93 3a07 	vldr	s6, [r3, #28]
 800d148:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800d14c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d150:	d005      	beq.n	800d15e <m_kalman_3gyro.isra.0.constprop.0+0x26ce>
 800d152:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 800d156:	eee7 2a03 	vfma.f32	s5, s14, s6
 800d15a:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 800d15e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d166:	d00c      	beq.n	800d182 <m_kalman_3gyro.isra.0.constprop.0+0x26f2>
 800d168:	ed93 3a08 	vldr	s6, [r3, #32]
 800d16c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800d170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d174:	d005      	beq.n	800d182 <m_kalman_3gyro.isra.0.constprop.0+0x26f2>
 800d176:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 800d17a:	eee7 2a83 	vfma.f32	s5, s15, s6
 800d17e:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 800d182:	3324      	adds	r3, #36	; 0x24
 800d184:	4299      	cmp	r1, r3
 800d186:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800d18a:	f47f af58 	bne.w	800d03e <m_kalman_3gyro.isra.0.constprop.0+0x25ae>
 800d18e:	3001      	adds	r0, #1
 800d190:	2809      	cmp	r0, #9
 800d192:	f10c 0c04 	add.w	ip, ip, #4
 800d196:	f47f af3e 	bne.w	800d016 <m_kalman_3gyro.isra.0.constprop.0+0x2586>
 800d19a:	9b01      	ldr	r3, [sp, #4]
 800d19c:	edc5 8a01 	vstr	s17, [r5, #4]
 800d1a0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1a8:	edd3 7a00 	vldr	s15, [r3]
 800d1ac:	f000 80fc 	beq.w	800d3a8 <m_kalman_3gyro.isra.0.constprop.0+0x2918>
 800d1b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d1b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1b8:	f000 80f6 	beq.w	800d3a8 <m_kalman_3gyro.isra.0.constprop.0+0x2918>
 800d1bc:	ee27 8a88 	vmul.f32	s16, s15, s16
 800d1c0:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800d1c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1c8:	ed85 8a00 	vstr	s16, [r5]
 800d1cc:	f040 81cc 	bne.w	800d568 <m_kalman_3gyro.isra.0.constprop.0+0x2ad8>
 800d1d0:	eef5 9a40 	vcmp.f32	s19, #0.0
 800d1d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1d8:	f040 808b 	bne.w	800d2f2 <m_kalman_3gyro.isra.0.constprop.0+0x2862>
 800d1dc:	eef5 ba40 	vcmp.f32	s23, #0.0
 800d1e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1e4:	edc5 8a02 	vstr	s17, [r5, #8]
 800d1e8:	d007      	beq.n	800d1fa <m_kalman_3gyro.isra.0.constprop.0+0x276a>
 800d1ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1f2:	f041 8011 	bne.w	800e218 <m_kalman_3gyro.isra.0.constprop.0+0x3788>
 800d1f6:	eef0 ba67 	vmov.f32	s23, s15
 800d1fa:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800d1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d202:	edc5 8a03 	vstr	s17, [r5, #12]
 800d206:	f000 808a 	beq.w	800d31e <m_kalman_3gyro.isra.0.constprop.0+0x288e>
 800d20a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d212:	f041 8018 	bne.w	800e246 <m_kalman_3gyro.isra.0.constprop.0+0x37b6>
 800d216:	edc5 8a04 	vstr	s17, [r5, #16]
 800d21a:	eef0 ca67 	vmov.f32	s25, s15
 800d21e:	eeb0 ca67 	vmov.f32	s24, s15
 800d222:	eef5 aa40 	vcmp.f32	s21, #0.0
 800d226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d22a:	edc5 8a05 	vstr	s17, [r5, #20]
 800d22e:	f000 8094 	beq.w	800d35a <m_kalman_3gyro.isra.0.constprop.0+0x28ca>
 800d232:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d23a:	f040 87ea 	bne.w	800e212 <m_kalman_3gyro.isra.0.constprop.0+0x3782>
 800d23e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800d242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d246:	edc5 8a06 	vstr	s17, [r5, #24]
 800d24a:	f040 819a 	bne.w	800d582 <m_kalman_3gyro.isra.0.constprop.0+0x2af2>
 800d24e:	eef0 aa4a 	vmov.f32	s21, s20
 800d252:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800d256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d25a:	edc5 8a07 	vstr	s17, [r5, #28]
 800d25e:	f000 80f0 	beq.w	800d442 <m_kalman_3gyro.isra.0.constprop.0+0x29b2>
 800d262:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d26a:	f000 80e8 	beq.w	800d43e <m_kalman_3gyro.isra.0.constprop.0+0x29ae>
 800d26e:	eeb0 3a68 	vmov.f32	s6, s17
 800d272:	ee29 9a27 	vmul.f32	s18, s18, s15
 800d276:	edd7 3a25 	vldr	s7, [r7, #148]	; 0x94
 800d27a:	ed97 4a26 	vldr	s8, [r7, #152]	; 0x98
 800d27e:	edd7 4a27 	vldr	s9, [r7, #156]	; 0x9c
 800d282:	ed97 5a28 	vldr	s10, [r7, #160]	; 0xa0
 800d286:	edd7 5a29 	vldr	s11, [r7, #164]	; 0xa4
 800d28a:	ed97 6a2a 	vldr	s12, [r7, #168]	; 0xa8
 800d28e:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800d292:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800d296:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800d29a:	ed85 9a08 	vstr	s18, [r5, #32]
 800d29e:	ee33 8a88 	vadd.f32	s16, s7, s16
 800d2a2:	ee74 9a29 	vadd.f32	s19, s8, s19
 800d2a6:	ee74 baab 	vadd.f32	s23, s9, s23
 800d2aa:	ee35 ca0c 	vadd.f32	s24, s10, s24
 800d2ae:	ee75 caac 	vadd.f32	s25, s11, s25
 800d2b2:	ee76 aa2a 	vadd.f32	s21, s12, s21
 800d2b6:	ee36 aa8a 	vadd.f32	s20, s13, s20
 800d2ba:	ee37 7a03 	vadd.f32	s14, s14, s6
 800d2be:	ee37 9a89 	vadd.f32	s18, s15, s18
 800d2c2:	ed87 8a25 	vstr	s16, [r7, #148]	; 0x94
 800d2c6:	edc7 9a26 	vstr	s19, [r7, #152]	; 0x98
 800d2ca:	edc7 ba27 	vstr	s23, [r7, #156]	; 0x9c
 800d2ce:	ed87 ca28 	vstr	s24, [r7, #160]	; 0xa0
 800d2d2:	edc7 ca29 	vstr	s25, [r7, #164]	; 0xa4
 800d2d6:	edc7 aa2a 	vstr	s21, [r7, #168]	; 0xa8
 800d2da:	ed87 aa2b 	vstr	s20, [r7, #172]	; 0xac
 800d2de:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 800d2e2:	ed87 9a2d 	vstr	s18, [r7, #180]	; 0xb4
 800d2e6:	f7ff bb30 	b.w	800c94a <m_kalman_3gyro.isra.0.constprop.0+0x1eba>
 800d2ea:	ed9f bad8 	vldr	s22, [pc, #864]	; 800d64c <m_kalman_3gyro.isra.0.constprop.0+0x2bbc>
 800d2ee:	eeb0 8a4b 	vmov.f32	s16, s22
 800d2f2:	ee27 7aa9 	vmul.f32	s14, s15, s19
 800d2f6:	eef5 ba40 	vcmp.f32	s23, #0.0
 800d2fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2fe:	ed85 7a02 	vstr	s14, [r5, #8]
 800d302:	f040 86fe 	bne.w	800e102 <m_kalman_3gyro.isra.0.constprop.0+0x3672>
 800d306:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800d30a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d30e:	eef0 ba47 	vmov.f32	s23, s14
 800d312:	eef0 9a4b 	vmov.f32	s19, s22
 800d316:	edc5 8a03 	vstr	s17, [r5, #12]
 800d31a:	f47f af76 	bne.w	800d20a <m_kalman_3gyro.isra.0.constprop.0+0x277a>
 800d31e:	eef5 ca40 	vcmp.f32	s25, #0.0
 800d322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d326:	edc5 8a04 	vstr	s17, [r5, #16]
 800d32a:	f43f af7a 	beq.w	800d222 <m_kalman_3gyro.isra.0.constprop.0+0x2792>
 800d32e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d336:	f000 86dc 	beq.w	800e0f2 <m_kalman_3gyro.isra.0.constprop.0+0x3662>
 800d33a:	eeb0 7a68 	vmov.f32	s14, s17
 800d33e:	ee67 6aac 	vmul.f32	s13, s15, s25
 800d342:	eef5 aa40 	vcmp.f32	s21, #0.0
 800d346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d34a:	edc5 6a05 	vstr	s13, [r5, #20]
 800d34e:	f040 86bf 	bne.w	800e0d0 <m_kalman_3gyro.isra.0.constprop.0+0x3640>
 800d352:	eef0 aa66 	vmov.f32	s21, s13
 800d356:	eef0 ca47 	vmov.f32	s25, s14
 800d35a:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800d35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d362:	edc5 8a06 	vstr	s17, [r5, #24]
 800d366:	f43f af74 	beq.w	800d252 <m_kalman_3gyro.isra.0.constprop.0+0x27c2>
 800d36a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d36e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d372:	f000 8108 	beq.w	800d586 <m_kalman_3gyro.isra.0.constprop.0+0x2af6>
 800d376:	eeb0 7a68 	vmov.f32	s14, s17
 800d37a:	ee27 3a8a 	vmul.f32	s6, s15, s20
 800d37e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800d382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d386:	ed85 3a07 	vstr	s6, [r5, #28]
 800d38a:	eeb0 aa47 	vmov.f32	s20, s14
 800d38e:	f47f af70 	bne.w	800d272 <m_kalman_3gyro.isra.0.constprop.0+0x27e2>
 800d392:	e770      	b.n	800d276 <m_kalman_3gyro.isra.0.constprop.0+0x27e6>
 800d394:	eef1 7a67 	vneg.f32	s15, s15
 800d398:	ece3 7a01 	vstmia	r3!, {s15}
 800d39c:	4298      	cmp	r0, r3
 800d39e:	f102 0201 	add.w	r2, r2, #1
 800d3a2:	f47f ae15 	bne.w	800cfd0 <m_kalman_3gyro.isra.0.constprop.0+0x2540>
 800d3a6:	e622      	b.n	800cfee <m_kalman_3gyro.isra.0.constprop.0+0x255e>
 800d3a8:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800d3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3b0:	edc5 8a00 	vstr	s17, [r5]
 800d3b4:	d005      	beq.n	800d3c2 <m_kalman_3gyro.isra.0.constprop.0+0x2932>
 800d3b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d3ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3be:	f040 80d1 	bne.w	800d564 <m_kalman_3gyro.isra.0.constprop.0+0x2ad4>
 800d3c2:	eef5 9a40 	vcmp.f32	s19, #0.0
 800d3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ca:	d051      	beq.n	800d470 <m_kalman_3gyro.isra.0.constprop.0+0x29e0>
 800d3cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3d4:	d189      	bne.n	800d2ea <m_kalman_3gyro.isra.0.constprop.0+0x285a>
 800d3d6:	eef0 9a67 	vmov.f32	s19, s15
 800d3da:	eeb0 8a67 	vmov.f32	s16, s15
 800d3de:	e6fd      	b.n	800d1dc <m_kalman_3gyro.isra.0.constprop.0+0x274c>
 800d3e0:	eef0 7a4d 	vmov.f32	s15, s26
 800d3e4:	e42f      	b.n	800cc46 <m_kalman_3gyro.isra.0.constprop.0+0x21b6>
 800d3e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d3ea:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800d3ee:	eeb4 bae7 	vcmpe.f32	s22, s15
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3f8:	f882 31ff 	strb.w	r3, [r2, #511]	; 0x1ff
 800d3fc:	f8a2 3200 	strh.w	r3, [r2, #512]	; 0x200
 800d400:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 800d404:	f882 3206 	strb.w	r3, [r2, #518]	; 0x206
 800d408:	f73f aa0b 	bgt.w	800c822 <m_kalman_3gyro.isra.0.constprop.0+0x1d92>
 800d40c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d410:	f893 28ae 	ldrb.w	r2, [r3, #2222]	; 0x8ae
 800d414:	2a00      	cmp	r2, #0
 800d416:	f000 8702 	beq.w	800e21e <m_kalman_3gyro.isra.0.constprop.0+0x378e>
 800d41a:	4619      	mov	r1, r3
 800d41c:	3a01      	subs	r2, #1
 800d41e:	2300      	movs	r3, #0
 800d420:	f881 28ae 	strb.w	r2, [r1, #2222]	; 0x8ae
 800d424:	f8a1 31fc 	strh.w	r3, [r1, #508]	; 0x1fc
 800d428:	f881 31fe 	strb.w	r3, [r1, #510]	; 0x1fe
 800d42c:	f881 3205 	strb.w	r3, [r1, #517]	; 0x205
 800d430:	f881 3207 	strb.w	r3, [r1, #519]	; 0x207
 800d434:	f7ff ba2a 	b.w	800c88c <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 800d438:	2301      	movs	r3, #1
 800d43a:	f7ff b961 	b.w	800c700 <m_kalman_3gyro.isra.0.constprop.0+0x1c70>
 800d43e:	eeb0 9a67 	vmov.f32	s18, s15
 800d442:	eeb0 3a49 	vmov.f32	s6, s18
 800d446:	e716      	b.n	800d276 <m_kalman_3gyro.isra.0.constprop.0+0x27e6>
 800d448:	ed9d fa7c 	vldr	s30, [sp, #496]	; 0x1f0
 800d44c:	eddd fa7d 	vldr	s31, [sp, #500]	; 0x1f4
 800d450:	eddd 6a7e 	vldr	s13, [sp, #504]	; 0x1f8
 800d454:	ed9d 6a7f 	vldr	s12, [sp, #508]	; 0x1fc
 800d458:	eddd 5a80 	vldr	s11, [sp, #512]	; 0x200
 800d45c:	eddd ea81 	vldr	s29, [sp, #516]	; 0x204
 800d460:	eeb0 ea68 	vmov.f32	s28, s17
 800d464:	eef0 da68 	vmov.f32	s27, s17
 800d468:	eeb0 da68 	vmov.f32	s26, s17
 800d46c:	f7ff bb3e 	b.w	800caec <m_kalman_3gyro.isra.0.constprop.0+0x205c>
 800d470:	eeb0 8a69 	vmov.f32	s16, s19
 800d474:	e6b2      	b.n	800d1dc <m_kalman_3gyro.isra.0.constprop.0+0x274c>
 800d476:	eef0 7a4d 	vmov.f32	s15, s26
 800d47a:	e4a7      	b.n	800cdcc <m_kalman_3gyro.isra.0.constprop.0+0x233c>
 800d47c:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 800d480:	789b      	ldrb	r3, [r3, #2]
 800d482:	2b00      	cmp	r3, #0
 800d484:	f000 8660 	beq.w	800e148 <m_kalman_3gyro.isra.0.constprop.0+0x36b8>
 800d488:	9b07      	ldr	r3, [sp, #28]
 800d48a:	ed8d aa52 	vstr	s20, [sp, #328]	; 0x148
 800d48e:	eeea 9a0a 	vfma.f32	s19, s20, s20
 800d492:	685a      	ldr	r2, [r3, #4]
 800d494:	6899      	ldr	r1, [r3, #8]
 800d496:	681c      	ldr	r4, [r3, #0]
 800d498:	9248      	str	r2, [sp, #288]	; 0x120
 800d49a:	461d      	mov	r5, r3
 800d49c:	eeb1 9a49 	vneg.f32	s18, s18
 800d4a0:	68db      	ldr	r3, [r3, #12]
 800d4a2:	9149      	str	r1, [sp, #292]	; 0x124
 800d4a4:	eef1 8a68 	vneg.f32	s17, s17
 800d4a8:	eeb1 8a48 	vneg.f32	s16, s16
 800d4ac:	462a      	mov	r2, r5
 800d4ae:	a84f      	add	r0, sp, #316	; 0x13c
 800d4b0:	a947      	add	r1, sp, #284	; 0x11c
 800d4b2:	934a      	str	r3, [sp, #296]	; 0x128
 800d4b4:	ed8d 9a4f 	vstr	s18, [sp, #316]	; 0x13c
 800d4b8:	edcd 8a50 	vstr	s17, [sp, #320]	; 0x140
 800d4bc:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 800d4c0:	9447      	str	r4, [sp, #284]	; 0x11c
 800d4c2:	f7fb f9e7 	bl	8008894 <m_qmult_eml>
 800d4c6:	ee19 0a90 	vmov	r0, s19
 800d4ca:	ed8d 9a47 	vstr	s18, [sp, #284]	; 0x11c
 800d4ce:	edcd 8a48 	vstr	s17, [sp, #288]	; 0x120
 800d4d2:	ed8d 8a49 	vstr	s16, [sp, #292]	; 0x124
 800d4d6:	ed8d 9a4f 	vstr	s18, [sp, #316]	; 0x13c
 800d4da:	edcd 8a50 	vstr	s17, [sp, #320]	; 0x140
 800d4de:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 800d4e2:	ed8d aa52 	vstr	s20, [sp, #328]	; 0x148
 800d4e6:	ed8d aa4a 	vstr	s20, [sp, #296]	; 0x128
 800d4ea:	f7f2 ffd1 	bl	8000490 <__aeabi_f2d>
 800d4ee:	ec41 0b10 	vmov	d0, r0, r1
 800d4f2:	f005 fec5 	bl	8013280 <sqrt>
 800d4f6:	ec51 0b10 	vmov	r0, r1, d0
 800d4fa:	f7f3 fb19 	bl	8000b30 <__aeabi_d2f>
 800d4fe:	ee07 0a90 	vmov	s15, r0
 800d502:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d506:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800d50a:	ac4b      	add	r4, sp, #300	; 0x12c
 800d50c:	ee29 9a27 	vmul.f32	s18, s18, s15
 800d510:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800d514:	ee28 8a27 	vmul.f32	s16, s16, s15
 800d518:	ee6a 7a27 	vmul.f32	s15, s20, s15
 800d51c:	ed8d 9a4b 	vstr	s18, [sp, #300]	; 0x12c
 800d520:	edcd 8a4c 	vstr	s17, [sp, #304]	; 0x130
 800d524:	ed8d 8a4d 	vstr	s16, [sp, #308]	; 0x134
 800d528:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 800d52c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d52e:	f8dd 46b8 	ldr.w	r4, [sp, #1720]	; 0x6b8
 800d532:	6020      	str	r0, [r4, #0]
 800d534:	6061      	str	r1, [r4, #4]
 800d536:	60a2      	str	r2, [r4, #8]
 800d538:	60e3      	str	r3, [r4, #12]
 800d53a:	f7ff ba38 	b.w	800c9ae <m_kalman_3gyro.isra.0.constprop.0+0x1f1e>
 800d53e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d542:	f8d3 3458 	ldr.w	r3, [r3, #1112]	; 0x458
 800d546:	2b31      	cmp	r3, #49	; 0x31
 800d548:	f73e af1f 	bgt.w	800c38a <m_kalman_3gyro.isra.0.constprop.0+0x18fa>
 800d54c:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800d550:	2200      	movs	r2, #0
 800d552:	3301      	adds	r3, #1
 800d554:	f8c1 3458 	str.w	r3, [r1, #1112]	; 0x458
 800d558:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 800d55c:	f881 2204 	strb.w	r2, [r1, #516]	; 0x204
 800d560:	f7fe bf13 	b.w	800c38a <m_kalman_3gyro.isra.0.constprop.0+0x18fa>
 800d564:	eeb0 8a68 	vmov.f32	s16, s17
 800d568:	ee2b ba27 	vmul.f32	s22, s22, s15
 800d56c:	eef5 9a40 	vcmp.f32	s19, #0.0
 800d570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d574:	ed85 ba01 	vstr	s22, [r5, #4]
 800d578:	f47f aebb 	bne.w	800d2f2 <m_kalman_3gyro.isra.0.constprop.0+0x2862>
 800d57c:	eef0 9a4b 	vmov.f32	s19, s22
 800d580:	e62c      	b.n	800d1dc <m_kalman_3gyro.isra.0.constprop.0+0x274c>
 800d582:	eef0 aa67 	vmov.f32	s21, s15
 800d586:	ed9f 9a31 	vldr	s18, [pc, #196]	; 800d64c <m_kalman_3gyro.isra.0.constprop.0+0x2bbc>
 800d58a:	edc5 8a07 	vstr	s17, [r5, #28]
 800d58e:	eeb0 3a68 	vmov.f32	s6, s17
 800d592:	eeb0 aa68 	vmov.f32	s20, s17
 800d596:	e66e      	b.n	800d276 <m_kalman_3gyro.isra.0.constprop.0+0x27e6>
 800d598:	ee77 7ae9 	vsub.f32	s15, s15, s19
 800d59c:	ee17 0a90 	vmov	r0, s15
 800d5a0:	f7f2 ff76 	bl	8000490 <__aeabi_f2d>
 800d5a4:	ec41 0b10 	vmov	d0, r0, r1
 800d5a8:	f005 fe6a 	bl	8013280 <sqrt>
 800d5ac:	ec51 0b10 	vmov	r0, r1, d0
 800d5b0:	f7f3 fabe 	bl	8000b30 <__aeabi_d2f>
 800d5b4:	ee0a 0a10 	vmov	s20, r0
 800d5b8:	f7ff b9e1 	b.w	800c97e <m_kalman_3gyro.isra.0.constprop.0+0x1eee>
 800d5bc:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800d5c0:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800d5c4:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 800d5c8:	f240 1201 	movw	r2, #257	; 0x101
 800d5cc:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 800d5d0:	9908      	ldr	r1, [sp, #32]
 800d5d2:	680a      	ldr	r2, [r1, #0]
 800d5d4:	67c2      	str	r2, [r0, #124]	; 0x7c
 800d5d6:	684a      	ldr	r2, [r1, #4]
 800d5d8:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 800d5dc:	688a      	ldr	r2, [r1, #8]
 800d5de:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 800d5e2:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 800d5e6:	7013      	strb	r3, [r2, #0]
 800d5e8:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
 800d5ec:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 800d5f0:	3301      	adds	r3, #1
 800d5f2:	f8c0 345c 	str.w	r3, [r0, #1116]	; 0x45c
 800d5f6:	b16a      	cbz	r2, 800d614 <m_kalman_3gyro.isra.0.constprop.0+0x2b84>
 800d5f8:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 800d5fa:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 800d5fe:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
 800d602:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
 800d606:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800d60a:	f8c0 10a8 	str.w	r1, [r0, #168]	; 0xa8
 800d60e:	2200      	movs	r2, #0
 800d610:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
 800d614:	2b1e      	cmp	r3, #30
 800d616:	d114      	bne.n	800d642 <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 800d618:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d61c:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800d620:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d624:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800d628:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800d62c:	6018      	str	r0, [r3, #0]
 800d62e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d632:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800d636:	6019      	str	r1, [r3, #0]
 800d638:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d63c:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 800d640:	601a      	str	r2, [r3, #0]
 800d642:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 800d646:	f7fe be8f 	b.w	800c368 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 800d64a:	bf00      	nop
 800d64c:	00000000 	.word	0x00000000
 800d650:	cccccccd 	.word	0xcccccccd
 800d654:	19999999 	.word	0x19999999
 800d658:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d65c:	f603 0378 	addw	r3, r3, #2168	; 0x878
 800d660:	ed93 7a00 	vldr	s14, [r3]
 800d664:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d668:	ed8d 7a01 	vstr	s14, [sp, #4]
 800d66c:	f603 0374 	addw	r3, r3, #2164	; 0x874
 800d670:	ee67 7a07 	vmul.f32	s15, s14, s14
 800d674:	ed93 ca00 	vldr	s24, [r3]
 800d678:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d67c:	eeec 7a0c 	vfma.f32	s15, s24, s24
 800d680:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 800d684:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 800d688:	ed93 ea00 	vldr	s28, [r3]
 800d68c:	eeee 7a0e 	vfma.f32	s15, s28, s28
 800d690:	ee17 0a90 	vmov	r0, s15
 800d694:	f7f2 fefc 	bl	8000490 <__aeabi_f2d>
 800d698:	ec41 0b10 	vmov	d0, r0, r1
 800d69c:	f005 fdf0 	bl	8013280 <sqrt>
 800d6a0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d6a4:	f603 0384 	addw	r3, r3, #2180	; 0x884
 800d6a8:	ed93 da00 	vldr	s26, [r3]
 800d6ac:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d6b0:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 800d6b4:	ed93 fa00 	vldr	s30, [r3]
 800d6b8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d6bc:	ee6d 7a0d 	vmul.f32	s15, s26, s26
 800d6c0:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800d6c4:	eeef 7a0f 	vfma.f32	s15, s30, s30
 800d6c8:	edd3 ca00 	vldr	s25, [r3]
 800d6cc:	eeec 7aac 	vfma.f32	s15, s25, s25
 800d6d0:	ec57 6b10 	vmov	r6, r7, d0
 800d6d4:	ee17 0a90 	vmov	r0, s15
 800d6d8:	f7f2 feda 	bl	8000490 <__aeabi_f2d>
 800d6dc:	ec41 0b10 	vmov	d0, r0, r1
 800d6e0:	f005 fdce 	bl	8013280 <sqrt>
 800d6e4:	ec51 0b10 	vmov	r0, r1, d0
 800d6e8:	f7f3 fa22 	bl	8000b30 <__aeabi_d2f>
 800d6ec:	4be0      	ldr	r3, [pc, #896]	; (800da70 <m_kalman_3gyro.isra.0.constprop.0+0x2fe0>)
 800d6ee:	ee07 0a90 	vmov	s15, r0
 800d6f2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d6f6:	edc3 7a67 	vstr	s15, [r3, #412]	; 0x19c
 800d6fa:	4639      	mov	r1, r7
 800d6fc:	4630      	mov	r0, r6
 800d6fe:	eec6 ea27 	vdiv.f32	s29, s12, s15
 800d702:	ed8d 6a00 	vstr	s12, [sp]
 800d706:	f7f3 fa13 	bl	8000b30 <__aeabi_d2f>
 800d70a:	ed9d 6a00 	vldr	s12, [sp]
 800d70e:	ed9d 7a01 	vldr	s14, [sp, #4]
 800d712:	ee07 0a90 	vmov	s15, r0
 800d716:	eec6 7a27 	vdiv.f32	s15, s12, s15
 800d71a:	ee2e fa8f 	vmul.f32	s30, s29, s30
 800d71e:	ee67 6a8e 	vmul.f32	s13, s15, s28
 800d722:	ee6e caac 	vmul.f32	s25, s29, s25
 800d726:	ee2f ea66 	vnmul.f32	s28, s30, s13
 800d72a:	ee27 ca8c 	vmul.f32	s24, s15, s24
 800d72e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d732:	eeac ea8c 	vfma.f32	s28, s25, s24
 800d736:	ee2e da8d 	vmul.f32	s26, s29, s26
 800d73a:	ee67 eaec 	vnmul.f32	s29, s15, s25
 800d73e:	ee2e 7a0e 	vmul.f32	s14, s28, s28
 800d742:	eee6 ea8d 	vfma.f32	s29, s13, s26
 800d746:	ee2c ca4d 	vnmul.f32	s24, s24, s26
 800d74a:	eea7 ca8f 	vfma.f32	s24, s15, s30
 800d74e:	eef0 7a47 	vmov.f32	s15, s14
 800d752:	eeee 7aae 	vfma.f32	s15, s29, s29
 800d756:	eeec 7a0c 	vfma.f32	s15, s24, s24
 800d75a:	ee17 0a90 	vmov	r0, s15
 800d75e:	f7f2 fe97 	bl	8000490 <__aeabi_f2d>
 800d762:	ec41 0b10 	vmov	d0, r0, r1
 800d766:	f005 fd8b 	bl	8013280 <sqrt>
 800d76a:	ec51 0b10 	vmov	r0, r1, d0
 800d76e:	f7f3 f9df 	bl	8000b30 <__aeabi_d2f>
 800d772:	ed9d 6a00 	vldr	s12, [sp]
 800d776:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d778:	ed89 fa02 	vstr	s30, [r9, #8]
 800d77c:	ee07 0a90 	vmov	s15, r0
 800d780:	eec6 7a27 	vdiv.f32	s15, s12, s15
 800d784:	aa79      	add	r2, sp, #484	; 0x1e4
 800d786:	4648      	mov	r0, r9
 800d788:	ee2e ea27 	vmul.f32	s28, s28, s15
 800d78c:	ee2c ca27 	vmul.f32	s24, s24, s15
 800d790:	ee6e eaa7 	vmul.f32	s29, s29, s15
 800d794:	ee2f 7a4e 	vnmul.f32	s14, s30, s28
 800d798:	ee6d 6a4c 	vnmul.f32	s13, s26, s24
 800d79c:	ee6e 7aec 	vnmul.f32	s15, s29, s25
 800d7a0:	eeec 6a8e 	vfma.f32	s13, s25, s28
 800d7a4:	eeae 7a8d 	vfma.f32	s14, s29, s26
 800d7a8:	eeec 7a0f 	vfma.f32	s15, s24, s30
 800d7ac:	edc9 6a00 	vstr	s13, [r9]
 800d7b0:	ed89 7a06 	vstr	s14, [r9, #24]
 800d7b4:	edc9 7a03 	vstr	s15, [r9, #12]
 800d7b8:	edc9 ea01 	vstr	s29, [r9, #4]
 800d7bc:	ed89 ea04 	vstr	s28, [r9, #16]
 800d7c0:	ed89 ca07 	vstr	s24, [r9, #28]
 800d7c4:	ed89 da05 	vstr	s26, [r9, #20]
 800d7c8:	edc9 ca08 	vstr	s25, [r9, #32]
 800d7cc:	f7fa febc 	bl	8008548 <m_mldivide>
 800d7d0:	a947      	add	r1, sp, #284	; 0x11c
 800d7d2:	a879      	add	r0, sp, #484	; 0x1e4
 800d7d4:	f7fb fccc 	bl	8009170 <m_dcm2q_eml>
 800d7d8:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800da74 <m_kalman_3gyro.isra.0.constprop.0+0x2fe4>
 800d7dc:	9847      	ldr	r0, [sp, #284]	; 0x11c
 800d7de:	9948      	ldr	r1, [sp, #288]	; 0x120
 800d7e0:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800d7e2:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800d7e4:	904b      	str	r0, [sp, #300]	; 0x12c
 800d7e6:	eeb0 7a67 	vmov.f32	s14, s15
 800d7ea:	eef0 6a67 	vmov.f32	s13, s15
 800d7ee:	914c      	str	r1, [sp, #304]	; 0x130
 800d7f0:	924d      	str	r2, [sp, #308]	; 0x134
 800d7f2:	934e      	str	r3, [sp, #312]	; 0x138
 800d7f4:	ed94 5a06 	vldr	s10, [r4, #24]
 800d7f8:	edd4 5a07 	vldr	s11, [r4, #28]
 800d7fc:	ed94 6a08 	vldr	s12, [r4, #32]
 800d800:	3424      	adds	r4, #36	; 0x24
 800d802:	42a5      	cmp	r5, r4
 800d804:	ee76 6a85 	vadd.f32	s13, s13, s10
 800d808:	ee37 7a25 	vadd.f32	s14, s14, s11
 800d80c:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d810:	d1f0      	bne.n	800d7f4 <m_kalman_3gyro.isra.0.constprop.0+0x2d64>
 800d812:	ed9f 6a99 	vldr	s12, [pc, #612]	; 800da78 <m_kalman_3gyro.isra.0.constprop.0+0x2fe8>
 800d816:	ee27 7a06 	vmul.f32	s14, s14, s12
 800d81a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d81e:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 800d822:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 800d826:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
 800d82a:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 800d82e:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d832:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d83a:	edcd 6a3d 	vstr	s13, [sp, #244]	; 0xf4
 800d83e:	f340 8665 	ble.w	800e50c <m_kalman_3gyro.isra.0.constprop.0+0x3a7c>
 800d842:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800d846:	eef4 7aef 	vcmpe.f32	s15, s31
 800d84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d84e:	f340 87a5 	ble.w	800e79c <m_kalman_3gyro.isra.0.constprop.0+0x3d0c>
 800d852:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 800d856:	ed9d 7a17 	vldr	s14, [sp, #92]	; 0x5c
 800d85a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d85e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d862:	f77e ad5c 	ble.w	800c31e <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 800d866:	9b08      	ldr	r3, [sp, #32]
 800d868:	eddf 7a84 	vldr	s15, [pc, #528]	; 800da7c <m_kalman_3gyro.isra.0.constprop.0+0x2fec>
 800d86c:	ed93 7a00 	vldr	s14, [r3]
 800d870:	eeb0 7ac7 	vabs.f32	s14, s14
 800d874:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d87c:	f57e ad4f 	bpl.w	800c31e <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 800d880:	ed93 7a01 	vldr	s14, [r3, #4]
 800d884:	eeb0 7ac7 	vabs.f32	s14, s14
 800d888:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d890:	f57e ad45 	bpl.w	800c31e <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 800d894:	ed93 7a02 	vldr	s14, [r3, #8]
 800d898:	eeb0 7ac7 	vabs.f32	s14, s14
 800d89c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8a4:	f57e ad3b 	bpl.w	800c31e <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 800d8a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8aa:	eddf 7a75 	vldr	s15, [pc, #468]	; 800da80 <m_kalman_3gyro.isra.0.constprop.0+0x2ff0>
 800d8ae:	ed93 7a00 	vldr	s14, [r3]
 800d8b2:	eeb0 7ac7 	vabs.f32	s14, s14
 800d8b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d8ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8be:	f57e ad2e 	bpl.w	800c31e <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 800d8c2:	ed93 7a01 	vldr	s14, [r3, #4]
 800d8c6:	eeb0 7ac7 	vabs.f32	s14, s14
 800d8ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8d2:	f57e ad24 	bpl.w	800c31e <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 800d8d6:	ed93 7a02 	vldr	s14, [r3, #8]
 800d8da:	eeb0 7ac7 	vabs.f32	s14, s14
 800d8de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8e6:	f57e ad1a 	bpl.w	800c31e <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 800d8ea:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d8ee:	f8d3 2450 	ldr.w	r2, [r3, #1104]	; 0x450
 800d8f2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d8f4:	ed93 7a00 	vldr	s14, [r3]
 800d8f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d8fa:	ed93 6a00 	vldr	s12, [r3]
 800d8fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d900:	edd3 6a00 	vldr	s13, [r3]
 800d904:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d908:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800d90c:	2a09      	cmp	r2, #9
 800d90e:	f503 6198 	add.w	r1, r3, #1216	; 0x4c0
 800d912:	bfcc      	ite	gt
 800d914:	230a      	movgt	r3, #10
 800d916:	2305      	movle	r3, #5
 800d918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d91c:	bfb4      	ite	lt
 800d91e:	eef0 7a46 	vmovlt.f32	s15, s12
 800d922:	eef0 7a47 	vmovge.f32	s15, s14
 800d926:	bf98      	it	ls
 800d928:	eeb0 6a47 	vmovls.f32	s12, s14
 800d92c:	ed91 7a00 	vldr	s14, [r1]
 800d930:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800d932:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d93a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800d93e:	bfa8      	it	ge
 800d940:	eef0 7a47 	vmovge.f32	s15, s14
 800d944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d948:	bf98      	it	ls
 800d94a:	eeb0 6a47 	vmovls.f32	s12, s14
 800d94e:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d952:	ed91 7a00 	vldr	s14, [r1]
 800d956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d95a:	eef4 6ac6 	vcmpe.f32	s13, s12
 800d95e:	bfa8      	it	ge
 800d960:	eef0 7a66 	vmovge.f32	s15, s13
 800d964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d968:	bf88      	it	hi
 800d96a:	eef0 6a46 	vmovhi.f32	s13, s12
 800d96e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d976:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d97a:	bfb8      	it	lt
 800d97c:	eef0 7a47 	vmovlt.f32	s15, s14
 800d980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d984:	bf88      	it	hi
 800d986:	eeb0 7a66 	vmovhi.f32	s14, s13
 800d98a:	2b05      	cmp	r3, #5
 800d98c:	d065      	beq.n	800da5a <m_kalman_3gyro.isra.0.constprop.0+0x2fca>
 800d98e:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800d992:	f201 512c 	addw	r1, r1, #1324	; 0x52c
 800d996:	edd1 6a00 	vldr	s13, [r1]
 800d99a:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800d99e:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d9a2:	f501 61aa 	add.w	r1, r1, #1360	; 0x550
 800d9a6:	ed91 6a00 	vldr	s12, [r1]
 800d9aa:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800d9ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9b2:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d9b6:	bfa8      	it	ge
 800d9b8:	eef0 7a66 	vmovge.f32	s15, s13
 800d9bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9c0:	bf98      	it	ls
 800d9c2:	eeb0 7a66 	vmovls.f32	s14, s13
 800d9c6:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800d9ca:	f201 5174 	addw	r1, r1, #1396	; 0x574
 800d9ce:	edd1 6a00 	vldr	s13, [r1]
 800d9d2:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800d9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9da:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800d9de:	bfa8      	it	ge
 800d9e0:	eef0 7a46 	vmovge.f32	s15, s12
 800d9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9e8:	bf88      	it	hi
 800d9ea:	eeb0 6a47 	vmovhi.f32	s12, s14
 800d9ee:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d9f2:	f501 61b3 	add.w	r1, r1, #1432	; 0x598
 800d9f6:	ed91 7a00 	vldr	s14, [r1]
 800d9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9fe:	eef4 6ac6 	vcmpe.f32	s13, s12
 800da02:	bfa8      	it	ge
 800da04:	eef0 7a66 	vmovge.f32	s15, s13
 800da08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da0c:	bf88      	it	hi
 800da0e:	eef0 6a46 	vmovhi.f32	s13, s12
 800da12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800da16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da1a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800da1e:	bfa8      	it	ge
 800da20:	eef0 7a47 	vmovge.f32	s15, s14
 800da24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da28:	bf88      	it	hi
 800da2a:	eeb0 7a66 	vmovhi.f32	s14, s13
 800da2e:	2b0a      	cmp	r3, #10
 800da30:	d113      	bne.n	800da5a <m_kalman_3gyro.isra.0.constprop.0+0x2fca>
 800da32:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800da36:	f201 51bc 	addw	r1, r1, #1468	; 0x5bc
 800da3a:	edd1 6a00 	vldr	s13, [r1]
 800da3e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800da42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da46:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800da4a:	bfb8      	it	lt
 800da4c:	eef0 7a66 	vmovlt.f32	s15, s13
 800da50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da54:	bf88      	it	hi
 800da56:	eeb0 7a66 	vmovhi.f32	s14, s13
 800da5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800da5e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800da84 <m_kalman_3gyro.isra.0.constprop.0+0x2ff4>
 800da62:	eef4 7ac7 	vcmpe.f32	s15, s14
 800da66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da6a:	f73e ac58 	bgt.w	800c31e <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 800da6e:	e00b      	b.n	800da88 <m_kalman_3gyro.isra.0.constprop.0+0x2ff8>
 800da70:	20001698 	.word	0x20001698
 800da74:	00000000 	.word	0x00000000
 800da78:	3d088889 	.word	0x3d088889
 800da7c:	3e4ccccd 	.word	0x3e4ccccd
 800da80:	3f99999a 	.word	0x3f99999a
 800da84:	3be56042 	.word	0x3be56042
 800da88:	9914      	ldr	r1, [sp, #80]	; 0x50
 800da8a:	ed91 6a00 	vldr	s12, [r1]
 800da8e:	9924      	ldr	r1, [sp, #144]	; 0x90
 800da90:	ed91 7a00 	vldr	s14, [r1]
 800da94:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800da96:	edd1 6a00 	vldr	s13, [r1]
 800da9a:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800da9e:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800daa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daa6:	f201 41c4 	addw	r1, r1, #1220	; 0x4c4
 800daaa:	bfb4      	ite	lt
 800daac:	eef0 7a46 	vmovlt.f32	s15, s12
 800dab0:	eef0 7a47 	vmovge.f32	s15, s14
 800dab4:	bf98      	it	ls
 800dab6:	eeb0 6a47 	vmovls.f32	s12, s14
 800daba:	ed91 7a00 	vldr	s14, [r1]
 800dabe:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800dac0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dac8:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800dacc:	bfa8      	it	ge
 800dace:	eef0 7a47 	vmovge.f32	s15, s14
 800dad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dad6:	bf98      	it	ls
 800dad8:	eeb0 6a47 	vmovls.f32	s12, s14
 800dadc:	eef4 6ae7 	vcmpe.f32	s13, s15
 800dae0:	ed91 7a00 	vldr	s14, [r1]
 800dae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dae8:	eef4 6ac6 	vcmpe.f32	s13, s12
 800daec:	bfa8      	it	ge
 800daee:	eef0 7a66 	vmovge.f32	s15, s13
 800daf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf6:	bf88      	it	hi
 800daf8:	eef0 6a46 	vmovhi.f32	s13, s12
 800dafc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db04:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800db08:	bfa8      	it	ge
 800db0a:	eef0 7a47 	vmovge.f32	s15, s14
 800db0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db12:	bf88      	it	hi
 800db14:	eeb0 7a66 	vmovhi.f32	s14, s13
 800db18:	2b05      	cmp	r3, #5
 800db1a:	d065      	beq.n	800dbe8 <m_kalman_3gyro.isra.0.constprop.0+0x3158>
 800db1c:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800db20:	f501 61a6 	add.w	r1, r1, #1328	; 0x530
 800db24:	ed91 6a00 	vldr	s12, [r1]
 800db28:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800db2c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800db30:	f201 5154 	addw	r1, r1, #1364	; 0x554
 800db34:	edd1 6a00 	vldr	s13, [r1]
 800db38:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800db3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db40:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800db44:	bfa8      	it	ge
 800db46:	eef0 7a46 	vmovge.f32	s15, s12
 800db4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db4e:	bf88      	it	hi
 800db50:	eeb0 6a47 	vmovhi.f32	s12, s14
 800db54:	eef4 6ae7 	vcmpe.f32	s13, s15
 800db58:	f501 61af 	add.w	r1, r1, #1400	; 0x578
 800db5c:	ed91 7a00 	vldr	s14, [r1]
 800db60:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800db64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db68:	eef4 6ac6 	vcmpe.f32	s13, s12
 800db6c:	bfa8      	it	ge
 800db6e:	eef0 7a66 	vmovge.f32	s15, s13
 800db72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db76:	bf88      	it	hi
 800db78:	eef0 6a46 	vmovhi.f32	s13, s12
 800db7c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800db80:	f201 519c 	addw	r1, r1, #1436	; 0x59c
 800db84:	ed91 6a00 	vldr	s12, [r1]
 800db88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db8c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800db90:	bfa8      	it	ge
 800db92:	eef0 7a47 	vmovge.f32	s15, s14
 800db96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db9a:	bf88      	it	hi
 800db9c:	eeb0 7a66 	vmovhi.f32	s14, s13
 800dba0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800dba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dba8:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800dbac:	bfa8      	it	ge
 800dbae:	eef0 7a46 	vmovge.f32	s15, s12
 800dbb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbb6:	bf88      	it	hi
 800dbb8:	eeb0 7a46 	vmovhi.f32	s14, s12
 800dbbc:	2b0a      	cmp	r3, #10
 800dbbe:	d113      	bne.n	800dbe8 <m_kalman_3gyro.isra.0.constprop.0+0x3158>
 800dbc0:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800dbc4:	f501 61b8 	add.w	r1, r1, #1472	; 0x5c0
 800dbc8:	edd1 6a00 	vldr	s13, [r1]
 800dbcc:	eef4 7ae6 	vcmpe.f32	s15, s13
 800dbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbd4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800dbd8:	bfb8      	it	lt
 800dbda:	eef0 7a66 	vmovlt.f32	s15, s13
 800dbde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbe2:	bf88      	it	hi
 800dbe4:	eeb0 7a66 	vmovhi.f32	s14, s13
 800dbe8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dbec:	ed1f 7a5b 	vldr	s14, [pc, #-364]	; 800da84 <m_kalman_3gyro.isra.0.constprop.0+0x2ff4>
 800dbf0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dbf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dbf8:	f73e ab91 	bgt.w	800c31e <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 800dbfc:	9915      	ldr	r1, [sp, #84]	; 0x54
 800dbfe:	ed91 7a00 	vldr	s14, [r1]
 800dc02:	9925      	ldr	r1, [sp, #148]	; 0x94
 800dc04:	ed91 6a00 	vldr	s12, [r1]
 800dc08:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800dc0a:	edd1 6a00 	vldr	s13, [r1]
 800dc0e:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800dc12:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800dc16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc1a:	f501 6199 	add.w	r1, r1, #1224	; 0x4c8
 800dc1e:	bfb4      	ite	lt
 800dc20:	eef0 7a46 	vmovlt.f32	s15, s12
 800dc24:	eef0 7a47 	vmovge.f32	s15, s14
 800dc28:	bf98      	it	ls
 800dc2a:	eeb0 6a47 	vmovls.f32	s12, s14
 800dc2e:	ed91 7a00 	vldr	s14, [r1]
 800dc32:	993b      	ldr	r1, [sp, #236]	; 0xec
 800dc34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc3c:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800dc40:	bfa8      	it	ge
 800dc42:	eef0 7a47 	vmovge.f32	s15, s14
 800dc46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc4a:	bf98      	it	ls
 800dc4c:	eeb0 6a47 	vmovls.f32	s12, s14
 800dc50:	eef4 6ae7 	vcmpe.f32	s13, s15
 800dc54:	ed91 7a00 	vldr	s14, [r1]
 800dc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc5c:	eef4 6ac6 	vcmpe.f32	s13, s12
 800dc60:	bfa8      	it	ge
 800dc62:	eef0 7a66 	vmovge.f32	s15, s13
 800dc66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc6a:	bf88      	it	hi
 800dc6c:	eef0 6a46 	vmovhi.f32	s13, s12
 800dc70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dc74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc78:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800dc7c:	bfa8      	it	ge
 800dc7e:	eef0 7a47 	vmovge.f32	s15, s14
 800dc82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc86:	bf88      	it	hi
 800dc88:	eeb0 7a66 	vmovhi.f32	s14, s13
 800dc8c:	2b05      	cmp	r3, #5
 800dc8e:	d065      	beq.n	800dd5c <m_kalman_3gyro.isra.0.constprop.0+0x32cc>
 800dc90:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800dc94:	f201 5134 	addw	r1, r1, #1332	; 0x534
 800dc98:	edd1 6a00 	vldr	s13, [r1]
 800dc9c:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800dca0:	eef4 6ae7 	vcmpe.f32	s13, s15
 800dca4:	f501 61ab 	add.w	r1, r1, #1368	; 0x558
 800dca8:	ed91 6a00 	vldr	s12, [r1]
 800dcac:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800dcb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcb4:	eef4 6ac7 	vcmpe.f32	s13, s14
 800dcb8:	bfa8      	it	ge
 800dcba:	eef0 7a66 	vmovge.f32	s15, s13
 800dcbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcc2:	bf98      	it	ls
 800dcc4:	eeb0 7a66 	vmovls.f32	s14, s13
 800dcc8:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800dccc:	f201 517c 	addw	r1, r1, #1404	; 0x57c
 800dcd0:	edd1 6a00 	vldr	s13, [r1]
 800dcd4:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800dcd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcdc:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800dce0:	bfa8      	it	ge
 800dce2:	eef0 7a46 	vmovge.f32	s15, s12
 800dce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcea:	bf88      	it	hi
 800dcec:	eeb0 6a47 	vmovhi.f32	s12, s14
 800dcf0:	eef4 6ae7 	vcmpe.f32	s13, s15
 800dcf4:	f501 61b4 	add.w	r1, r1, #1440	; 0x5a0
 800dcf8:	ed91 7a00 	vldr	s14, [r1]
 800dcfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd00:	eef4 6ac6 	vcmpe.f32	s13, s12
 800dd04:	bfa8      	it	ge
 800dd06:	eef0 7a66 	vmovge.f32	s15, s13
 800dd0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd0e:	bf88      	it	hi
 800dd10:	eef0 6a46 	vmovhi.f32	s13, s12
 800dd14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd1c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800dd20:	bfa8      	it	ge
 800dd22:	eef0 7a47 	vmovge.f32	s15, s14
 800dd26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd2a:	bf88      	it	hi
 800dd2c:	eeb0 7a66 	vmovhi.f32	s14, s13
 800dd30:	2b0a      	cmp	r3, #10
 800dd32:	d113      	bne.n	800dd5c <m_kalman_3gyro.isra.0.constprop.0+0x32cc>
 800dd34:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800dd38:	f203 53c4 	addw	r3, r3, #1476	; 0x5c4
 800dd3c:	edd3 6a00 	vldr	s13, [r3]
 800dd40:	eef4 7ae6 	vcmpe.f32	s15, s13
 800dd44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd48:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800dd4c:	bfb8      	it	lt
 800dd4e:	eef0 7a66 	vmovlt.f32	s15, s13
 800dd52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd56:	bf88      	it	hi
 800dd58:	eeb0 7a66 	vmovhi.f32	s14, s13
 800dd5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dd60:	ed1f 7ab8 	vldr	s14, [pc, #-736]	; 800da84 <m_kalman_3gyro.isra.0.constprop.0+0x2ff4>
 800dd64:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dd68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd6c:	f73e aad7 	bgt.w	800c31e <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 800dd70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	f43e aad7 	beq.w	800c326 <m_kalman_3gyro.isra.0.constprop.0+0x1896>
 800dd78:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	d123      	bne.n	800ddc8 <m_kalman_3gyro.isra.0.constprop.0+0x3338>
 800dd80:	2a0a      	cmp	r2, #10
 800dd82:	f43f ac1b 	beq.w	800d5bc <m_kalman_3gyro.isra.0.constprop.0+0x2b2c>
 800dd86:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	3201      	adds	r2, #1
 800dd8e:	f8c1 2450 	str.w	r2, [r1, #1104]	; 0x450
 800dd92:	f8a1 3202 	strh.w	r3, [r1, #514]	; 0x202
 800dd96:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 800dd9a:	f8c1 345c 	str.w	r3, [r1, #1116]	; 0x45c
 800dd9e:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 800dda2:	f7fe bae1 	b.w	800c368 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 800dda6:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800ddaa:	eef4 7aef 	vcmpe.f32	s15, s31
 800ddae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddb2:	f73f ad4e 	bgt.w	800d852 <m_kalman_3gyro.isra.0.constprop.0+0x2dc2>
 800ddb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	f43e aab4 	beq.w	800c326 <m_kalman_3gyro.isra.0.constprop.0+0x1896>
 800ddbe:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	f000 837a 	beq.w	800e4bc <m_kalman_3gyro.isra.0.constprop.0+0x3a2c>
 800ddc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddca:	2b02      	cmp	r3, #2
 800ddcc:	bf08      	it	eq
 800ddce:	f50d 7902 	addeq.w	r9, sp, #520	; 0x208
 800ddd2:	f000 84e3 	beq.w	800e79c <m_kalman_3gyro.isra.0.constprop.0+0x3d0c>
 800ddd6:	2b04      	cmp	r3, #4
 800ddd8:	f040 8370 	bne.w	800e4bc <m_kalman_3gyro.isra.0.constprop.0+0x3a2c>
 800dddc:	4bd4      	ldr	r3, [pc, #848]	; (800e130 <m_kalman_3gyro.isra.0.constprop.0+0x36a0>)
 800ddde:	f893 21b0 	ldrb.w	r2, [r3, #432]	; 0x1b0
 800dde2:	2a04      	cmp	r2, #4
 800dde4:	f240 859a 	bls.w	800e91c <m_kalman_3gyro.isra.0.constprop.0+0x3e8c>
 800dde8:	48d1      	ldr	r0, [pc, #836]	; (800e130 <m_kalman_3gyro.isra.0.constprop.0+0x36a0>)
 800ddea:	eddf 7ad2 	vldr	s15, [pc, #840]	; 800e134 <m_kalman_3gyro.isra.0.constprop.0+0x36a4>
 800ddee:	ed90 7a74 	vldr	s14, [r0, #464]	; 0x1d0
 800ddf2:	ed9f 3ad1 	vldr	s6, [pc, #836]	; 800e138 <m_kalman_3gyro.isra.0.constprop.0+0x36a8>
 800ddf6:	edd0 0a71 	vldr	s1, [r0, #452]	; 0x1c4
 800ddfa:	edd0 3a73 	vldr	s7, [r0, #460]	; 0x1cc
 800ddfe:	ed80 7a71 	vstr	s14, [r0, #452]	; 0x1c4
 800de02:	ee27 7a27 	vmul.f32	s14, s14, s15
 800de06:	ed90 4a70 	vldr	s8, [r0, #448]	; 0x1c0
 800de0a:	edd0 4a72 	vldr	s9, [r0, #456]	; 0x1c8
 800de0e:	ed90 1a7f 	vldr	s2, [r0, #508]	; 0x1fc
 800de12:	edd0 1a80 	vldr	s3, [r0, #512]	; 0x200
 800de16:	ed90 2a81 	vldr	s4, [r0, #516]	; 0x204
 800de1a:	edd0 5a75 	vldr	s11, [r0, #468]	; 0x1d4
 800de1e:	edd0 2a82 	vldr	s5, [r0, #520]	; 0x208
 800de22:	ed90 6a83 	vldr	s12, [r0, #524]	; 0x20c
 800de26:	edd0 6a84 	vldr	s13, [r0, #528]	; 0x210
 800de2a:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 800de2e:	f8d0 11dc 	ldr.w	r1, [r0, #476]	; 0x1dc
 800de32:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
 800de36:	f8c0 31cc 	str.w	r3, [r0, #460]	; 0x1cc
 800de3a:	eea0 7a83 	vfma.f32	s14, s1, s6
 800de3e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800de42:	f8c0 11d0 	str.w	r1, [r0, #464]	; 0x1d0
 800de46:	ee23 5aa7 	vmul.f32	s10, s7, s15
 800de4a:	edc0 0a6e 	vstr	s1, [r0, #440]	; 0x1b8
 800de4e:	eea4 5a03 	vfma.f32	s10, s8, s6
 800de52:	f8c0 3208 	str.w	r3, [r0, #520]	; 0x208
 800de56:	f8c0 21d4 	str.w	r2, [r0, #468]	; 0x1d4
 800de5a:	edc0 3a70 	vstr	s7, [r0, #448]	; 0x1c0
 800de5e:	ed80 4a6d 	vstr	s8, [r0, #436]	; 0x1b4
 800de62:	edc0 4a6f 	vstr	s9, [r0, #444]	; 0x1bc
 800de66:	ed9f 4ab5 	vldr	s8, [pc, #724]	; 800e13c <m_kalman_3gyro.isra.0.constprop.0+0x36ac>
 800de6a:	edc0 5a72 	vstr	s11, [r0, #456]	; 0x1c8
 800de6e:	ed80 1a7c 	vstr	s2, [r0, #496]	; 0x1f0
 800de72:	edc0 2a7f 	vstr	s5, [r0, #508]	; 0x1fc
 800de76:	edc0 1a7d 	vstr	s3, [r0, #500]	; 0x1f4
 800de7a:	ed80 6a80 	vstr	s12, [r0, #512]	; 0x200
 800de7e:	ed80 2a7e 	vstr	s4, [r0, #504]	; 0x1f8
 800de82:	edc0 6a81 	vstr	s13, [r0, #516]	; 0x204
 800de86:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
 800de8a:	edd0 0a7a 	vldr	s1, [r0, #488]	; 0x1e8
 800de8e:	ed90 0a79 	vldr	s0, [r0, #484]	; 0x1e4
 800de92:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800de96:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
 800de9a:	eea0 7a84 	vfma.f32	s14, s1, s8
 800de9e:	4601      	mov	r1, r0
 800dea0:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dea2:	edc1 0a77 	vstr	s1, [r1, #476]	; 0x1dc
 800dea6:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800deaa:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800deae:	edd0 3a01 	vldr	s7, [r0, #4]
 800deb2:	edd0 0a00 	vldr	s1, [r0]
 800deb6:	eea0 5a04 	vfma.f32	s10, s0, s8
 800deba:	460a      	mov	r2, r1
 800debc:	eee4 5a83 	vfma.f32	s11, s9, s6
 800dec0:	eddf 4a9f 	vldr	s9, [pc, #636]	; 800e140 <m_kalman_3gyro.isra.0.constprop.0+0x36b0>
 800dec4:	edd2 ba88 	vldr	s23, [r2, #544]	; 0x220
 800dec8:	ed92 da89 	vldr	s26, [r2, #548]	; 0x224
 800decc:	edc2 3a7a 	vstr	s7, [r2, #488]	; 0x1e8
 800ded0:	ee26 6a27 	vmul.f32	s12, s12, s15
 800ded4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800ded8:	eef0 7a62 	vmov.f32	s15, s5
 800dedc:	eea3 7aa4 	vfma.f32	s14, s7, s9
 800dee0:	eee1 7a03 	vfma.f32	s15, s2, s6
 800dee4:	ed91 1a7b 	vldr	s2, [r1, #492]	; 0x1ec
 800dee8:	9908      	ldr	r1, [sp, #32]
 800deea:	edd2 3a8a 	vldr	s7, [r2, #552]	; 0x228
 800deee:	edd1 2a01 	vldr	s5, [r1, #4]
 800def2:	ed82 0a76 	vstr	s0, [r2, #472]	; 0x1d8
 800def6:	eea0 5aa4 	vfma.f32	s10, s1, s9
 800defa:	eee1 5a04 	vfma.f32	s11, s2, s8
 800defe:	eea1 6a83 	vfma.f32	s12, s3, s6
 800df02:	eee2 6a03 	vfma.f32	s13, s4, s6
 800df06:	edd0 1a02 	vldr	s3, [r0, #8]
 800df0a:	ed91 2a00 	vldr	s4, [r1]
 800df0e:	ed91 3a02 	vldr	s6, [r1, #8]
 800df12:	ed82 7a8c 	vstr	s14, [r2, #560]	; 0x230
 800df16:	ee27 7a07 	vmul.f32	s14, s14, s14
 800df1a:	eee1 5aa4 	vfma.f32	s11, s3, s9
 800df1e:	eeeb 7a84 	vfma.f32	s15, s23, s8
 800df22:	eead 6a04 	vfma.f32	s12, s26, s8
 800df26:	eee3 6a84 	vfma.f32	s13, s7, s8
 800df2a:	eea5 7a05 	vfma.f32	s14, s10, s10
 800df2e:	eee2 7a24 	vfma.f32	s15, s4, s9
 800df32:	eea2 6aa4 	vfma.f32	s12, s5, s9
 800df36:	eee3 6a24 	vfma.f32	s13, s6, s9
 800df3a:	eea5 7aa5 	vfma.f32	s14, s11, s11
 800df3e:	edc2 0a79 	vstr	s1, [r2, #484]	; 0x1e4
 800df42:	edc2 7a8e 	vstr	s15, [r2, #568]	; 0x238
 800df46:	ee17 0a10 	vmov	r0, s14
 800df4a:	ed82 5a8b 	vstr	s10, [r2, #556]	; 0x22c
 800df4e:	edc2 5a8d 	vstr	s11, [r2, #564]	; 0x234
 800df52:	ed82 1a78 	vstr	s2, [r2, #480]	; 0x1e0
 800df56:	edc2 1a7b 	vstr	s3, [r2, #492]	; 0x1ec
 800df5a:	edc2 ba85 	vstr	s23, [r2, #532]	; 0x214
 800df5e:	ed82 2a88 	vstr	s4, [r2, #544]	; 0x220
 800df62:	ed82 da86 	vstr	s26, [r2, #536]	; 0x218
 800df66:	edc2 2a89 	vstr	s5, [r2, #548]	; 0x224
 800df6a:	ed82 3a8a 	vstr	s6, [r2, #552]	; 0x228
 800df6e:	edc2 3a87 	vstr	s7, [r2, #540]	; 0x21c
 800df72:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
 800df76:	ed82 6a8f 	vstr	s12, [r2, #572]	; 0x23c
 800df7a:	edc2 6a90 	vstr	s13, [r2, #576]	; 0x240
 800df7e:	eeb0 ca67 	vmov.f32	s24, s15
 800df82:	eef0 ca46 	vmov.f32	s25, s12
 800df86:	eef0 da66 	vmov.f32	s27, s13
 800df8a:	f7f2 fa81 	bl	8000490 <__aeabi_f2d>
 800df8e:	ec41 0b10 	vmov	d0, r0, r1
 800df92:	f005 f975 	bl	8013280 <sqrt>
 800df96:	ec51 0b10 	vmov	r0, r1, d0
 800df9a:	f7f2 fdc9 	bl	8000b30 <__aeabi_d2f>
 800df9e:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800dfa2:	ee07 0a10 	vmov	s14, r0
 800dfa6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dfaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfae:	f77f ab48 	ble.w	800d642 <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 800dfb2:	ee6c 7a0c 	vmul.f32	s15, s24, s24
 800dfb6:	eeec 7aac 	vfma.f32	s15, s25, s25
 800dfba:	eeed 7aad 	vfma.f32	s15, s27, s27
 800dfbe:	ee17 0a90 	vmov	r0, s15
 800dfc2:	f7f2 fa65 	bl	8000490 <__aeabi_f2d>
 800dfc6:	ec41 0b10 	vmov	d0, r0, r1
 800dfca:	f005 f959 	bl	8013280 <sqrt>
 800dfce:	ec51 0b10 	vmov	r0, r1, d0
 800dfd2:	f7f2 fdad 	bl	8000b30 <__aeabi_d2f>
 800dfd6:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 800dfda:	ee07 0a10 	vmov	s14, r0
 800dfde:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dfe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfe6:	f77f ab2c 	ble.w	800d642 <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 800dfea:	9b08      	ldr	r3, [sp, #32]
 800dfec:	ed93 7a00 	vldr	s14, [r3]
 800dff0:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 800dff4:	eeb0 7ac7 	vabs.f32	s14, s14
 800dff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e000:	f57f ab1f 	bpl.w	800d642 <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 800e004:	ed93 7a01 	vldr	s14, [r3, #4]
 800e008:	eeb0 7ac7 	vabs.f32	s14, s14
 800e00c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e014:	f57f ab15 	bpl.w	800d642 <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 800e018:	ed93 7a02 	vldr	s14, [r3, #8]
 800e01c:	eeb0 7ac7 	vabs.f32	s14, s14
 800e020:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e028:	f57f ab0b 	bpl.w	800d642 <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 800e02c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e02e:	edd3 7a00 	vldr	s15, [r3]
 800e032:	eef0 7ae7 	vabs.f32	s15, s15
 800e036:	ee17 0a90 	vmov	r0, s15
 800e03a:	f7f2 fa29 	bl	8000490 <__aeabi_f2d>
 800e03e:	a33a      	add	r3, pc, #232	; (adr r3, 800e128 <m_kalman_3gyro.isra.0.constprop.0+0x3698>)
 800e040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e044:	f7f2 fcee 	bl	8000a24 <__aeabi_dcmplt>
 800e048:	2800      	cmp	r0, #0
 800e04a:	f43f aafa 	beq.w	800d642 <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 800e04e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e050:	edd3 7a01 	vldr	s15, [r3, #4]
 800e054:	eef0 7ae7 	vabs.f32	s15, s15
 800e058:	ee17 0a90 	vmov	r0, s15
 800e05c:	f7f2 fa18 	bl	8000490 <__aeabi_f2d>
 800e060:	a331      	add	r3, pc, #196	; (adr r3, 800e128 <m_kalman_3gyro.isra.0.constprop.0+0x3698>)
 800e062:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e066:	f7f2 fcdd 	bl	8000a24 <__aeabi_dcmplt>
 800e06a:	2800      	cmp	r0, #0
 800e06c:	f43f aae9 	beq.w	800d642 <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 800e070:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e072:	edd3 7a02 	vldr	s15, [r3, #8]
 800e076:	eef0 7ae7 	vabs.f32	s15, s15
 800e07a:	ee17 0a90 	vmov	r0, s15
 800e07e:	f7f2 fa07 	bl	8000490 <__aeabi_f2d>
 800e082:	a329      	add	r3, pc, #164	; (adr r3, 800e128 <m_kalman_3gyro.isra.0.constprop.0+0x3698>)
 800e084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e088:	f7f2 fccc 	bl	8000a24 <__aeabi_dcmplt>
 800e08c:	2800      	cmp	r0, #0
 800e08e:	f43f aad8 	beq.w	800d642 <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 800e092:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e096:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 800e09a:	2b0a      	cmp	r3, #10
 800e09c:	f000 84b0 	beq.w	800ea00 <m_kalman_3gyro.isra.0.constprop.0+0x3f70>
 800e0a0:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	3301      	adds	r3, #1
 800e0a8:	f8c1 3450 	str.w	r3, [r1, #1104]	; 0x450
 800e0ac:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 800e0b0:	f881 2204 	strb.w	r2, [r1, #516]	; 0x204
 800e0b4:	f8c1 245c 	str.w	r2, [r1, #1116]	; 0x45c
 800e0b8:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 800e0bc:	f7fe b954 	b.w	800c368 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 800e0c0:	4f20      	ldr	r7, [pc, #128]	; (800e144 <m_kalman_3gyro.isra.0.constprop.0+0x36b4>)
 800e0c2:	2600      	movs	r6, #0
 800e0c4:	f7fd bcaa 	b.w	800ba1c <m_kalman_3gyro.isra.0.constprop.0+0xf8c>
 800e0c8:	eef1 ba04 	vmov.f32	s23, #20	; 0x40a00000  5.0
 800e0cc:	f7fe b89a 	b.w	800c204 <m_kalman_3gyro.isra.0.constprop.0+0x1774>
 800e0d0:	eef0 ca47 	vmov.f32	s25, s14
 800e0d4:	ee27 7aaa 	vmul.f32	s14, s15, s21
 800e0d8:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800e0dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0e0:	ed85 7a06 	vstr	s14, [r5, #24]
 800e0e4:	d109      	bne.n	800e0fa <m_kalman_3gyro.isra.0.constprop.0+0x366a>
 800e0e6:	eeb0 aa47 	vmov.f32	s20, s14
 800e0ea:	eef0 aa66 	vmov.f32	s21, s13
 800e0ee:	f7ff b8b0 	b.w	800d252 <m_kalman_3gyro.isra.0.constprop.0+0x27c2>
 800e0f2:	eef0 ca67 	vmov.f32	s25, s15
 800e0f6:	f7ff b894 	b.w	800d222 <m_kalman_3gyro.isra.0.constprop.0+0x2792>
 800e0fa:	eef0 aa66 	vmov.f32	s21, s13
 800e0fe:	f7ff b93c 	b.w	800d37a <m_kalman_3gyro.isra.0.constprop.0+0x28ea>
 800e102:	eef0 9a4b 	vmov.f32	s19, s22
 800e106:	ee67 6aab 	vmul.f32	s13, s15, s23
 800e10a:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800e10e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e112:	edc5 6a03 	vstr	s13, [r5, #12]
 800e116:	d16b      	bne.n	800e1f0 <m_kalman_3gyro.isra.0.constprop.0+0x3760>
 800e118:	eeb0 ca66 	vmov.f32	s24, s13
 800e11c:	eef0 ba47 	vmov.f32	s23, s14
 800e120:	f7ff b8fd 	b.w	800d31e <m_kalman_3gyro.isra.0.constprop.0+0x288e>
 800e124:	f3af 8000 	nop.w
 800e128:	66666666 	.word	0x66666666
 800e12c:	3ff66666 	.word	0x3ff66666
 800e130:	20001698 	.word	0x20001698
 800e134:	bdcccccd 	.word	0xbdcccccd
 800e138:	be4ccccd 	.word	0xbe4ccccd
 800e13c:	3dcccccd 	.word	0x3dcccccd
 800e140:	3e4ccccd 	.word	0x3e4ccccd
 800e144:	40140000 	.word	0x40140000
 800e148:	9b07      	ldr	r3, [sp, #28]
 800e14a:	ed8d aa52 	vstr	s20, [sp, #328]	; 0x148
 800e14e:	eeea 9a0a 	vfma.f32	s19, s20, s20
 800e152:	685a      	ldr	r2, [r3, #4]
 800e154:	6899      	ldr	r1, [r3, #8]
 800e156:	681c      	ldr	r4, [r3, #0]
 800e158:	9248      	str	r2, [sp, #288]	; 0x120
 800e15a:	461d      	mov	r5, r3
 800e15c:	eeb1 9a49 	vneg.f32	s18, s18
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	9149      	str	r1, [sp, #292]	; 0x124
 800e164:	eef1 8a68 	vneg.f32	s17, s17
 800e168:	eeb1 8a48 	vneg.f32	s16, s16
 800e16c:	462a      	mov	r2, r5
 800e16e:	a84f      	add	r0, sp, #316	; 0x13c
 800e170:	a947      	add	r1, sp, #284	; 0x11c
 800e172:	934a      	str	r3, [sp, #296]	; 0x128
 800e174:	ed8d 9a4f 	vstr	s18, [sp, #316]	; 0x13c
 800e178:	edcd 8a50 	vstr	s17, [sp, #320]	; 0x140
 800e17c:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 800e180:	9447      	str	r4, [sp, #284]	; 0x11c
 800e182:	f7fa fb87 	bl	8008894 <m_qmult_eml>
 800e186:	ee19 0a90 	vmov	r0, s19
 800e18a:	ed8d 9a47 	vstr	s18, [sp, #284]	; 0x11c
 800e18e:	edcd 8a48 	vstr	s17, [sp, #288]	; 0x120
 800e192:	ed8d 8a49 	vstr	s16, [sp, #292]	; 0x124
 800e196:	ed8d 9a4f 	vstr	s18, [sp, #316]	; 0x13c
 800e19a:	edcd 8a50 	vstr	s17, [sp, #320]	; 0x140
 800e19e:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 800e1a2:	ed8d aa52 	vstr	s20, [sp, #328]	; 0x148
 800e1a6:	ed8d aa4a 	vstr	s20, [sp, #296]	; 0x128
 800e1aa:	f7f2 f971 	bl	8000490 <__aeabi_f2d>
 800e1ae:	ec41 0b10 	vmov	d0, r0, r1
 800e1b2:	f005 f865 	bl	8013280 <sqrt>
 800e1b6:	ec51 0b10 	vmov	r0, r1, d0
 800e1ba:	f7f2 fcb9 	bl	8000b30 <__aeabi_d2f>
 800e1be:	ee07 0a90 	vmov	s15, r0
 800e1c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800e1c6:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800e1ca:	ac4b      	add	r4, sp, #300	; 0x12c
 800e1cc:	ee29 9a27 	vmul.f32	s18, s18, s15
 800e1d0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800e1d4:	ee28 8a27 	vmul.f32	s16, s16, s15
 800e1d8:	ee2a aa27 	vmul.f32	s20, s20, s15
 800e1dc:	ed8d 9a4b 	vstr	s18, [sp, #300]	; 0x12c
 800e1e0:	edcd 8a4c 	vstr	s17, [sp, #304]	; 0x130
 800e1e4:	ed8d 8a4d 	vstr	s16, [sp, #308]	; 0x134
 800e1e8:	ed8d aa4e 	vstr	s20, [sp, #312]	; 0x138
 800e1ec:	f7ff b99e 	b.w	800d52c <m_kalman_3gyro.isra.0.constprop.0+0x2a9c>
 800e1f0:	eef0 ba47 	vmov.f32	s23, s14
 800e1f4:	ee27 7a8c 	vmul.f32	s14, s15, s24
 800e1f8:	eef5 ca40 	vcmp.f32	s25, #0.0
 800e1fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e200:	ed85 7a04 	vstr	s14, [r5, #16]
 800e204:	d122      	bne.n	800e24c <m_kalman_3gyro.isra.0.constprop.0+0x37bc>
 800e206:	eef0 ca47 	vmov.f32	s25, s14
 800e20a:	eeb0 ca66 	vmov.f32	s24, s13
 800e20e:	f7ff b808 	b.w	800d222 <m_kalman_3gyro.isra.0.constprop.0+0x2792>
 800e212:	eef0 6a68 	vmov.f32	s13, s17
 800e216:	e75d      	b.n	800e0d4 <m_kalman_3gyro.isra.0.constprop.0+0x3644>
 800e218:	eeb0 7a68 	vmov.f32	s14, s17
 800e21c:	e773      	b.n	800e106 <m_kalman_3gyro.isra.0.constprop.0+0x3676>
 800e21e:	f8d3 68b0 	ldr.w	r6, [r3, #2224]	; 0x8b0
 800e222:	b1ee      	cbz	r6, 800e260 <m_kalman_3gyro.isra.0.constprop.0+0x37d0>
 800e224:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800e226:	6818      	ldr	r0, [r3, #0]
 800e228:	f7f2 f932 	bl	8000490 <__aeabi_f2d>
 800e22c:	a3b5      	add	r3, pc, #724	; (adr r3, 800e504 <m_kalman_3gyro.isra.0.constprop.0+0x3a74>)
 800e22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e232:	f7f2 fc15 	bl	8000a60 <__aeabi_dcmpgt>
 800e236:	b198      	cbz	r0, 800e260 <m_kalman_3gyro.isra.0.constprop.0+0x37d0>
 800e238:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e23c:	3e01      	subs	r6, #1
 800e23e:	f8c3 68b0 	str.w	r6, [r3, #2224]	; 0x8b0
 800e242:	f7fe bb23 	b.w	800c88c <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 800e246:	eef0 6a68 	vmov.f32	s13, s17
 800e24a:	e7d3      	b.n	800e1f4 <m_kalman_3gyro.isra.0.constprop.0+0x3764>
 800e24c:	eeb0 ca66 	vmov.f32	s24, s13
 800e250:	f7ff b875 	b.w	800d33e <m_kalman_3gyro.isra.0.constprop.0+0x28ae>
 800e254:	a9bf      	add	r1, sp, #764	; 0x2fc
 800e256:	a8b2      	add	r0, sp, #712	; 0x2c8
 800e258:	eeb0 0a4a 	vmov.f32	s0, s20
 800e25c:	f7fd bb76 	b.w	800b94c <m_kalman_3gyro.isra.0.constprop.0+0xebc>
 800e260:	ee1f 0a90 	vmov	r0, s31
 800e264:	f7f2 f914 	bl	8000490 <__aeabi_f2d>
 800e268:	4604      	mov	r4, r0
 800e26a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e26c:	460d      	mov	r5, r1
 800e26e:	f7f2 f90f 	bl	8000490 <__aeabi_f2d>
 800e272:	4b9f      	ldr	r3, [pc, #636]	; (800e4f0 <m_kalman_3gyro.isra.0.constprop.0+0x3a60>)
 800e274:	2200      	movs	r2, #0
 800e276:	f7f2 f963 	bl	8000540 <__aeabi_dmul>
 800e27a:	4602      	mov	r2, r0
 800e27c:	460b      	mov	r3, r1
 800e27e:	4620      	mov	r0, r4
 800e280:	4629      	mov	r1, r5
 800e282:	f7f2 fbcf 	bl	8000a24 <__aeabi_dcmplt>
 800e286:	2800      	cmp	r0, #0
 800e288:	f43e ab00 	beq.w	800c88c <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 800e28c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e28e:	f7f2 f8ff 	bl	8000490 <__aeabi_f2d>
 800e292:	4604      	mov	r4, r0
 800e294:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e296:	460d      	mov	r5, r1
 800e298:	f7f2 f8fa 	bl	8000490 <__aeabi_f2d>
 800e29c:	4b94      	ldr	r3, [pc, #592]	; (800e4f0 <m_kalman_3gyro.isra.0.constprop.0+0x3a60>)
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f7f2 f94e 	bl	8000540 <__aeabi_dmul>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	4620      	mov	r0, r4
 800e2aa:	4629      	mov	r1, r5
 800e2ac:	f7f2 fbba 	bl	8000a24 <__aeabi_dcmplt>
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	f43e aaeb 	beq.w	800c88c <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 800e2b6:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e2b8:	f7f2 f8ea 	bl	8000490 <__aeabi_f2d>
 800e2bc:	4604      	mov	r4, r0
 800e2be:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e2c0:	460d      	mov	r5, r1
 800e2c2:	f7f2 f8e5 	bl	8000490 <__aeabi_f2d>
 800e2c6:	4602      	mov	r2, r0
 800e2c8:	460b      	mov	r3, r1
 800e2ca:	f7f1 ff83 	bl	80001d4 <__adddf3>
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	4602      	mov	r2, r0
 800e2d2:	4629      	mov	r1, r5
 800e2d4:	4620      	mov	r0, r4
 800e2d6:	f7f2 fbc3 	bl	8000a60 <__aeabi_dcmpgt>
 800e2da:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e2de:	f893 38ad 	ldrb.w	r3, [r3, #2221]	; 0x8ad
 800e2e2:	2800      	cmp	r0, #0
 800e2e4:	f000 8309 	beq.w	800e8fa <m_kalman_3gyro.isra.0.constprop.0+0x3e6a>
 800e2e8:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	2b0e      	cmp	r3, #14
 800e2f0:	f8a1 21fc 	strh.w	r2, [r1, #508]	; 0x1fc
 800e2f4:	f881 21fe 	strb.w	r2, [r1, #510]	; 0x1fe
 800e2f8:	f881 2205 	strb.w	r2, [r1, #517]	; 0x205
 800e2fc:	f881 2207 	strb.w	r2, [r1, #519]	; 0x207
 800e300:	f200 83af 	bhi.w	800ea62 <m_kalman_3gyro.isra.0.constprop.0+0x3fd2>
 800e304:	3303      	adds	r3, #3
 800e306:	f881 38ad 	strb.w	r3, [r1, #2221]	; 0x8ad
 800e30a:	f7fe babf 	b.w	800c88c <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 800e30e:	edd3 7a03 	vldr	s15, [r3, #12]
 800e312:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e31a:	f47d abe7 	bne.w	800baec <m_kalman_3gyro.isra.0.constprop.0+0x105c>
 800e31e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e322:	9804      	ldr	r0, [sp, #16]
 800e324:	645c      	str	r4, [r3, #68]	; 0x44
 800e326:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 800e32a:	649c      	str	r4, [r3, #72]	; 0x48
 800e32c:	64dc      	str	r4, [r3, #76]	; 0x4c
 800e32e:	655c      	str	r4, [r3, #84]	; 0x54
 800e330:	659c      	str	r4, [r3, #88]	; 0x58
 800e332:	65dc      	str	r4, [r3, #92]	; 0x5c
 800e334:	641d      	str	r5, [r3, #64]	; 0x40
 800e336:	651d      	str	r5, [r3, #80]	; 0x50
 800e338:	661d      	str	r5, [r3, #96]	; 0x60
 800e33a:	f7fa ff19 	bl	8009170 <m_dcm2q_eml>
 800e33e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e342:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e346:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
 800e34a:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
 800e34e:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
 800e352:	f8dd 36b0 	ldr.w	r3, [sp, #1712]	; 0x6b0
 800e356:	681a      	ldr	r2, [r3, #0]
 800e358:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
 800e35c:	f8dd 26b0 	ldr.w	r2, [sp, #1712]	; 0x6b0
 800e360:	4b64      	ldr	r3, [pc, #400]	; (800e4f4 <m_kalman_3gyro.isra.0.constprop.0+0x3a64>)
 800e362:	6852      	ldr	r2, [r2, #4]
 800e364:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
 800e368:	f8dd 26b0 	ldr.w	r2, [sp, #1712]	; 0x6b0
 800e36c:	6892      	ldr	r2, [r2, #8]
 800e36e:	f8c1 30ac 	str.w	r3, [r1, #172]	; 0xac
 800e372:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e376:	f8c1 20a8 	str.w	r2, [r1, #168]	; 0xa8
 800e37a:	f8c1 50b0 	str.w	r5, [r1, #176]	; 0xb0
 800e37e:	f8c1 50b4 	str.w	r5, [r1, #180]	; 0xb4
 800e382:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800e386:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 800e38a:	2100      	movs	r1, #0
 800e38c:	f004 fd96 	bl	8012ebc <memset>
 800e390:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800e394:	4b58      	ldr	r3, [pc, #352]	; (800e4f8 <m_kalman_3gyro.isra.0.constprop.0+0x3a68>)
 800e396:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 800e39a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e39e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 800e3a2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
 800e3a6:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
 800e3aa:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 800e3ae:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 800e3b2:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
 800e3b6:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8
 800e3ba:	f7fd bb97 	b.w	800baec <m_kalman_3gyro.isra.0.constprop.0+0x105c>
 800e3be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e3c2:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3ca:	f77e aa22 	ble.w	800c812 <m_kalman_3gyro.isra.0.constprop.0+0x1d82>
 800e3ce:	ed93 6a04 	vldr	s12, [r3, #16]
 800e3d2:	edd3 6a05 	vldr	s13, [r3, #20]
 800e3d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e3da:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e3de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e3e2:	ed83 7a03 	vstr	s14, [r3, #12]
 800e3e6:	ed83 6a04 	vstr	s12, [r3, #16]
 800e3ea:	edc3 7a05 	vstr	s15, [r3, #20]
 800e3ee:	f7fe ba10 	b.w	800c812 <m_kalman_3gyro.isra.0.constprop.0+0x1d82>
 800e3f2:	4634      	mov	r4, r6
 800e3f4:	463d      	mov	r5, r7
 800e3f6:	f7fe b9f9 	b.w	800c7ec <m_kalman_3gyro.isra.0.constprop.0+0x1d5c>
 800e3fa:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e3fe:	9907      	ldr	r1, [sp, #28]
 800e400:	edc3 9a12 	vstr	s19, [r3, #72]	; 0x48
 800e404:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800e408:	ed83 9a15 	vstr	s18, [r3, #84]	; 0x54
 800e40c:	edc3 8a18 	vstr	s17, [r3, #96]	; 0x60
 800e410:	ed83 ca11 	vstr	s24, [r3, #68]	; 0x44
 800e414:	edc3 ba14 	vstr	s23, [r3, #80]	; 0x50
 800e418:	ed83 8a17 	vstr	s16, [r3, #92]	; 0x5c
 800e41c:	ed83 fa10 	vstr	s30, [r3, #64]	; 0x40
 800e420:	edc3 ea13 	vstr	s29, [r3, #76]	; 0x4c
 800e424:	ed83 ea16 	vstr	s28, [r3, #88]	; 0x58
 800e428:	9004      	str	r0, [sp, #16]
 800e42a:	f7fa fea1 	bl	8009170 <m_dcm2q_eml>
 800e42e:	eddf 7a33 	vldr	s15, [pc, #204]	; 800e4fc <m_kalman_3gyro.isra.0.constprop.0+0x3a6c>
 800e432:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e436:	eef4 aae7 	vcmpe.f32	s21, s15
 800e43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e43e:	ed83 da2b 	vstr	s26, [r3, #172]	; 0xac
 800e442:	f140 814a 	bpl.w	800e6da <m_kalman_3gyro.isra.0.constprop.0+0x3c4a>
 800e446:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800e500 <m_kalman_3gyro.isra.0.constprop.0+0x3a70>
 800e44a:	eef4 aae7 	vcmpe.f32	s21, s15
 800e44e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e452:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e456:	bfc8      	it	gt
 800e458:	eef0 7a6a 	vmovgt.f32	s15, s21
 800e45c:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800e460:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800e464:	2100      	movs	r1, #0
 800e466:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 800e46a:	f004 fd27 	bl	8012ebc <memset>
 800e46e:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800e472:	4b21      	ldr	r3, [pc, #132]	; (800e4f8 <m_kalman_3gyro.isra.0.constprop.0+0x3a68>)
 800e474:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 800e478:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 800e47c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800e480:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 800e484:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
 800e488:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
 800e48c:	f8c0 31a8 	str.w	r3, [r0, #424]	; 0x1a8
 800e490:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
 800e494:	f8c0 31f8 	str.w	r3, [r0, #504]	; 0x1f8
 800e498:	f8dd 36cc 	ldr.w	r3, [sp, #1740]	; 0x6cc
 800e49c:	2100      	movs	r1, #0
 800e49e:	2201      	movs	r2, #1
 800e4a0:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
 800e4a4:	701a      	strb	r2, [r3, #0]
 800e4a6:	f7fd baf3 	b.w	800ba90 <m_kalman_3gyro.isra.0.constprop.0+0x1000>
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	f240 1301 	movw	r3, #257	; 0x101
 800e4b0:	f881 21ff 	strb.w	r2, [r1, #511]	; 0x1ff
 800e4b4:	f8a1 3200 	strh.w	r3, [r1, #512]	; 0x200
 800e4b8:	f7fe b907 	b.w	800c6ca <m_kalman_3gyro.isra.0.constprop.0+0x1c3a>
 800e4bc:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e4c0:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e4c4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800e4c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e4cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800e4d0:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
 800e4da:	67ca      	str	r2, [r1, #124]	; 0x7c
 800e4dc:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 800e4e0:	f8c1 3450 	str.w	r3, [r1, #1104]	; 0x450
 800e4e4:	f8c1 345c 	str.w	r3, [r1, #1116]	; 0x45c
 800e4e8:	f7fd bf3e 	b.w	800c368 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 800e4ec:	f3af 8000 	nop.w
 800e4f0:	3ff80000 	.word	0x3ff80000
 800e4f4:	3f666666 	.word	0x3f666666
 800e4f8:	40a00000 	.word	0x40a00000
 800e4fc:	3f99999a 	.word	0x3f99999a
 800e500:	3f4ccccd 	.word	0x3f4ccccd
 800e504:	33333333 	.word	0x33333333
 800e508:	3fd33333 	.word	0x3fd33333
 800e50c:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e510:	2301      	movs	r3, #1
 800e512:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 800e516:	f240 1201 	movw	r2, #257	; 0x101
 800e51a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e51c:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 800e520:	edd3 7a00 	vldr	s15, [r3]
 800e524:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800e528:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e52c:	eeb4 aae7 	vcmpe.f32	s20, s15
 800e530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e534:	f200 80d4 	bhi.w	800e6e0 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 800e538:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e53c:	f893 38a4 	ldrb.w	r3, [r3, #2212]	; 0x8a4
 800e540:	2b00      	cmp	r3, #0
 800e542:	f000 81a2 	beq.w	800e88a <m_kalman_3gyro.isra.0.constprop.0+0x3dfa>
 800e546:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800e54a:	edd3 6a06 	vldr	s13, [r3, #24]
 800e54e:	ed93 7a07 	vldr	s14, [r3, #28]
 800e552:	edd3 7a08 	vldr	s15, [r3, #32]
 800e556:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e55a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e55e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e562:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e566:	edc3 6a06 	vstr	s13, [r3, #24]
 800e56a:	ed83 7a07 	vstr	s14, [r3, #28]
 800e56e:	edc3 7a08 	vstr	s15, [r3, #32]
 800e572:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e576:	f8b3 38a6 	ldrh.w	r3, [r3, #2214]	; 0x8a6
 800e57a:	3301      	adds	r3, #1
 800e57c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e580:	f000 81fa 	beq.w	800e978 <m_kalman_3gyro.isra.0.constprop.0+0x3ee8>
 800e584:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800e588:	2b31      	cmp	r3, #49	; 0x31
 800e58a:	f8a2 38a6 	strh.w	r3, [r2, #2214]	; 0x8a6
 800e58e:	f200 81f3 	bhi.w	800e978 <m_kalman_3gyro.isra.0.constprop.0+0x3ee8>
 800e592:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e596:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
 800e59a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e59e:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 800e5a2:	f000 81de 	beq.w	800e962 <m_kalman_3gyro.isra.0.constprop.0+0x3ed2>
 800e5a6:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 800e5aa:	f040 80b4 	bne.w	800e716 <m_kalman_3gyro.isra.0.constprop.0+0x3c86>
 800e5ae:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e5b2:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800e5b6:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800e5ba:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e5be:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	f884 38a4 	strb.w	r3, [r4, #2212]	; 0x8a4
 800e5c8:	f604 0398 	addw	r3, r4, #2200	; 0x898
 800e5cc:	6018      	str	r0, [r3, #0]
 800e5ce:	f604 039c 	addw	r3, r4, #2204	; 0x89c
 800e5d2:	6019      	str	r1, [r3, #0]
 800e5d4:	f504 630a 	add.w	r3, r4, #2208	; 0x8a0
 800e5d8:	601a      	str	r2, [r3, #0]
 800e5da:	eddd 7a4c 	vldr	s15, [sp, #304]	; 0x130
 800e5de:	eddd 6a4b 	vldr	s13, [sp, #300]	; 0x12c
 800e5e2:	ed9d 7a4d 	vldr	s14, [sp, #308]	; 0x134
 800e5e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e5ea:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e5ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e5f2:	ee37 7a07 	vadd.f32	s14, s14, s14
 800e5f6:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800e5fa:	eee7 7a07 	vfma.f32	s15, s14, s14
 800e5fe:	ee17 0a90 	vmov	r0, s15
 800e602:	f7f1 ff45 	bl	8000490 <__aeabi_f2d>
 800e606:	ec41 0b10 	vmov	d0, r0, r1
 800e60a:	f004 fe39 	bl	8013280 <sqrt>
 800e60e:	ec51 0b10 	vmov	r0, r1, d0
 800e612:	f7f2 fa8d 	bl	8000b30 <__aeabi_d2f>
 800e616:	f7f1 ff3b 	bl	8000490 <__aeabi_f2d>
 800e61a:	a3f7      	add	r3, pc, #988	; (adr r3, 800e9f8 <m_kalman_3gyro.isra.0.constprop.0+0x3f68>)
 800e61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e620:	f7f2 fa00 	bl	8000a24 <__aeabi_dcmplt>
 800e624:	2800      	cmp	r0, #0
 800e626:	f000 8124 	beq.w	800e872 <m_kalman_3gyro.isra.0.constprop.0+0x3de2>
 800e62a:	f50d 63d4 	add.w	r3, sp, #1696	; 0x6a0
 800e62e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e632:	2200      	movs	r2, #0
 800e634:	2300      	movs	r3, #0
 800e636:	f7f2 f9eb 	bl	8000a10 <__aeabi_dcmpeq>
 800e63a:	2800      	cmp	r0, #0
 800e63c:	f000 81b4 	beq.w	800e9a8 <m_kalman_3gyro.isra.0.constprop.0+0x3f18>
 800e640:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e644:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 800e648:	2b32      	cmp	r3, #50	; 0x32
 800e64a:	f040 81ae 	bne.w	800e9aa <m_kalman_3gyro.isra.0.constprop.0+0x3f1a>
 800e64e:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800e652:	ed9f 7ae5 	vldr	s14, [pc, #916]	; 800e9e8 <m_kalman_3gyro.isra.0.constprop.0+0x3f58>
 800e656:	edd3 7a06 	vldr	s15, [r3, #24]
 800e65a:	f8dd 1688 	ldr.w	r1, [sp, #1672]	; 0x688
 800e65e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e662:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e666:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800e66a:	edc1 7a06 	vstr	s15, [r1, #24]
 800e66e:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e672:	2201      	movs	r2, #1
 800e674:	f881 2202 	strb.w	r2, [r1, #514]	; 0x202
 800e678:	f8dd 1688 	ldr.w	r1, [sp, #1672]	; 0x688
 800e67c:	edd1 7a07 	vldr	s15, [r1, #28]
 800e680:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e688:	edc1 7a07 	vstr	s15, [r1, #28]
 800e68c:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e690:	f881 2203 	strb.w	r2, [r1, #515]	; 0x203
 800e694:	f8dd 1688 	ldr.w	r1, [sp, #1672]	; 0x688
 800e698:	edd1 7a08 	vldr	s15, [r1, #32]
 800e69c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e6a0:	edc1 7a08 	vstr	s15, [r1, #32]
 800e6a4:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e6a8:	f881 2204 	strb.w	r2, [r1, #516]	; 0x204
 800e6ac:	f000 81de 	beq.w	800ea6c <m_kalman_3gyro.isra.0.constprop.0+0x3fdc>
 800e6b0:	3301      	adds	r3, #1
 800e6b2:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800e6b6:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800e6ba:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
 800e6be:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800e6c0:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800e6c2:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800e6c4:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
 800e6c8:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
 800e6cc:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
 800e6d0:	f7fd be4a 	b.w	800c368 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 800e6d4:	1c5c      	adds	r4, r3, #1
 800e6d6:	f7fd bb09 	b.w	800bcec <m_kalman_3gyro.isra.0.constprop.0+0x125c>
 800e6da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e6de:	e6bd      	b.n	800e45c <m_kalman_3gyro.isra.0.constprop.0+0x39cc>
 800e6e0:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800e6e4:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 800e6e8:	edd3 6a06 	vldr	s13, [r3, #24]
 800e6ec:	ed93 7a07 	vldr	s14, [r3, #28]
 800e6f0:	edd3 7a08 	vldr	s15, [r3, #32]
 800e6f4:	ee66 6aab 	vmul.f32	s13, s13, s23
 800e6f8:	ee27 7a2b 	vmul.f32	s14, s14, s23
 800e6fc:	ee67 baab 	vmul.f32	s23, s15, s23
 800e700:	edc2 6a06 	vstr	s13, [r2, #24]
 800e704:	ed82 7a07 	vstr	s14, [r2, #28]
 800e708:	edc2 ba08 	vstr	s23, [r2, #32]
 800e70c:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800e710:	2300      	movs	r3, #0
 800e712:	f8a2 38a6 	strh.w	r3, [r2, #2214]	; 0x8a6
 800e716:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e71a:	f893 38a4 	ldrb.w	r3, [r3, #2212]	; 0x8a4
 800e71e:	2b00      	cmp	r3, #0
 800e720:	f47f af5b 	bne.w	800e5da <m_kalman_3gyro.isra.0.constprop.0+0x3b4a>
 800e724:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800e728:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800e72c:	b32a      	cbz	r2, 800e77a <m_kalman_3gyro.isra.0.constprop.0+0x3cea>
 800e72e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800e732:	eef4 dae7 	vcmpe.f32	s27, s15
 800e736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e73a:	d51e      	bpl.n	800e77a <m_kalman_3gyro.isra.0.constprop.0+0x3cea>
 800e73c:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800e740:	ed92 7af1 	vldr	s14, [r2, #964]	; 0x3c4
 800e744:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800e748:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e74c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e750:	d513      	bpl.n	800e77a <m_kalman_3gyro.isra.0.constprop.0+0x3cea>
 800e752:	4610      	mov	r0, r2
 800e754:	f8d2 13d8 	ldr.w	r1, [r2, #984]	; 0x3d8
 800e758:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 800e75c:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 800e760:	f8d0 13d4 	ldr.w	r1, [r0, #980]	; 0x3d4
 800e764:	67c1      	str	r1, [r0, #124]	; 0x7c
 800e766:	f8dd 16c8 	ldr.w	r1, [sp, #1736]	; 0x6c8
 800e76a:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 800e76e:	2201      	movs	r2, #1
 800e770:	700a      	strb	r2, [r1, #0]
 800e772:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 800e776:	f7fd bdf7 	b.w	800c368 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 800e77a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e77e:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 800e782:	2b1e      	cmp	r3, #30
 800e784:	f000 808c 	beq.w	800e8a0 <m_kalman_3gyro.isra.0.constprop.0+0x3e10>
 800e788:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e78c:	3301      	adds	r3, #1
 800e78e:	2200      	movs	r2, #0
 800e790:	f8c1 3454 	str.w	r3, [r1, #1108]	; 0x454
 800e794:	f8c1 245c 	str.w	r2, [r1, #1116]	; 0x45c
 800e798:	f7fd bde6 	b.w	800c368 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 800e79c:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 800e7a6:	f240 1201 	movw	r2, #257	; 0x101
 800e7aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e7ac:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 800e7b0:	edd3 7a00 	vldr	s15, [r3]
 800e7b4:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800e7b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e7bc:	eef4 7aca 	vcmpe.f32	s15, s20
 800e7c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7c4:	f6bf aeb8 	bge.w	800e538 <m_kalman_3gyro.isra.0.constprop.0+0x3aa8>
 800e7c8:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 800e7cc:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
 800e7d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e7d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7d8:	dd82      	ble.n	800e6e0 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 800e7da:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800e7de:	eef4 7aef 	vcmpe.f32	s15, s31
 800e7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7e6:	f77f af7b 	ble.w	800e6e0 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 800e7ea:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 800e7ee:	eddd 5a17 	vldr	s11, [sp, #92]	; 0x5c
 800e7f2:	eef4 7ae5 	vcmpe.f32	s15, s11
 800e7f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7fa:	f77f af71 	ble.w	800e6e0 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 800e7fe:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e802:	eef4 dae6 	vcmpe.f32	s27, s13
 800e806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e80a:	f57f af69 	bpl.w	800e6e0 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 800e80e:	ed9d 6a0d 	vldr	s12, [sp, #52]	; 0x34
 800e812:	ee87 7a06 	vdiv.f32	s14, s14, s12
 800e816:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
 800e81a:	ee8f 6a86 	vdiv.f32	s12, s31, s12
 800e81e:	eec5 7aa7 	vdiv.f32	s15, s11, s15
 800e822:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e826:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 800e82a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e82e:	eef4 7ac6 	vcmpe.f32	s15, s12
 800e832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e836:	f57f af53 	bpl.w	800e6e0 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 800e83a:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800e83e:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 800e842:	ed93 6a06 	vldr	s12, [r3, #24]
 800e846:	ed93 7a07 	vldr	s14, [r3, #28]
 800e84a:	edd3 7a08 	vldr	s15, [r3, #32]
 800e84e:	ee26 6a26 	vmul.f32	s12, s12, s13
 800e852:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e856:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e85a:	ed82 6a06 	vstr	s12, [r2, #24]
 800e85e:	ed82 7a07 	vstr	s14, [r2, #28]
 800e862:	edc2 6a08 	vstr	s13, [r2, #32]
 800e866:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800e86a:	2300      	movs	r3, #0
 800e86c:	f8a2 38a6 	strh.w	r3, [r2, #2214]	; 0x8a6
 800e870:	e751      	b.n	800e716 <m_kalman_3gyro.isra.0.constprop.0+0x3c86>
 800e872:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e876:	f8c3 0450 	str.w	r0, [r3, #1104]	; 0x450
 800e87a:	f8a3 0202 	strh.w	r0, [r3, #514]	; 0x202
 800e87e:	f883 0204 	strb.w	r0, [r3, #516]	; 0x204
 800e882:	f8c3 045c 	str.w	r0, [r3, #1116]	; 0x45c
 800e886:	f7fd bd6f 	b.w	800c368 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 800e88a:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800e88e:	ed9f 6a57 	vldr	s12, [pc, #348]	; 800e9ec <m_kalman_3gyro.isra.0.constprop.0+0x3f5c>
 800e892:	edd3 6a06 	vldr	s13, [r3, #24]
 800e896:	ed93 7a07 	vldr	s14, [r3, #28]
 800e89a:	edd3 7a08 	vldr	s15, [r3, #32]
 800e89e:	e65c      	b.n	800e55a <m_kalman_3gyro.isra.0.constprop.0+0x3aca>
 800e8a0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e8a4:	f8b3 38a6 	ldrh.w	r3, [r3, #2214]	; 0x8a6
 800e8a8:	2b27      	cmp	r3, #39	; 0x27
 800e8aa:	f200 80f6 	bhi.w	800ea9a <m_kalman_3gyro.isra.0.constprop.0+0x400a>
 800e8ae:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e8b2:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e8b6:	f8d3 23d8 	ldr.w	r2, [r3, #984]	; 0x3d8
 800e8ba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800e8be:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 800e8c2:	f8d1 23d4 	ldr.w	r2, [r1, #980]	; 0x3d4
 800e8c6:	67ca      	str	r2, [r1, #124]	; 0x7c
 800e8c8:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 800e8cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	7013      	strb	r3, [r2, #0]
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	f8b3 38a8 	ldrh.w	r3, [r3, #2216]	; 0x8a8
 800e8da:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e8de:	2201      	movs	r2, #1
 800e8e0:	4413      	add	r3, r2
 800e8e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8e6:	bf14      	ite	ne
 800e8e8:	b29b      	uxthne	r3, r3
 800e8ea:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 800e8ee:	f8c1 245c 	str.w	r2, [r1, #1116]	; 0x45c
 800e8f2:	f8a1 38a8 	strh.w	r3, [r1, #2216]	; 0x8a8
 800e8f6:	f7fd bd37 	b.w	800c368 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d063      	beq.n	800e9c6 <m_kalman_3gyro.isra.0.constprop.0+0x3f36>
 800e8fe:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800e902:	3b01      	subs	r3, #1
 800e904:	f882 38ad 	strb.w	r3, [r2, #2221]	; 0x8ad
 800e908:	f8a2 01fc 	strh.w	r0, [r2, #508]	; 0x1fc
 800e90c:	f882 01fe 	strb.w	r0, [r2, #510]	; 0x1fe
 800e910:	f882 0205 	strb.w	r0, [r2, #517]	; 0x205
 800e914:	f882 0207 	strb.w	r0, [r2, #519]	; 0x207
 800e918:	f7fd bfb8 	b.w	800c88c <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 800e91c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e91e:	4f34      	ldr	r7, [pc, #208]	; (800e9f0 <m_kalman_3gyro.isra.0.constprop.0+0x3f60>)
 800e920:	6801      	ldr	r1, [r0, #0]
 800e922:	6846      	ldr	r6, [r0, #4]
 800e924:	6885      	ldr	r5, [r0, #8]
 800e926:	9808      	ldr	r0, [sp, #32]
 800e928:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800e92c:	3201      	adds	r2, #1
 800e92e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800e932:	f887 21b0 	strb.w	r2, [r7, #432]	; 0x1b0
 800e936:	4602      	mov	r2, r0
 800e938:	6804      	ldr	r4, [r0, #0]
 800e93a:	f8c3 11b4 	str.w	r1, [r3, #436]	; 0x1b4
 800e93e:	6840      	ldr	r0, [r0, #4]
 800e940:	6891      	ldr	r1, [r2, #8]
 800e942:	f8c3 61b8 	str.w	r6, [r3, #440]	; 0x1b8
 800e946:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
 800e94a:	f8c3 41f0 	str.w	r4, [r3, #496]	; 0x1f0
 800e94e:	f8c3 01f4 	str.w	r0, [r3, #500]	; 0x1f4
 800e952:	f8c3 11f8 	str.w	r1, [r3, #504]	; 0x1f8
 800e956:	f8dd 36c8 	ldr.w	r3, [sp, #1736]	; 0x6c8
 800e95a:	2200      	movs	r2, #0
 800e95c:	701a      	strb	r2, [r3, #0]
 800e95e:	f7fe b8ac 	b.w	800caba <m_kalman_3gyro.isra.0.constprop.0+0x202a>
 800e962:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800e966:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800e96a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
 800e96e:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
 800e972:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 800e976:	e6ce      	b.n	800e716 <m_kalman_3gyro.isra.0.constprop.0+0x3c86>
 800e978:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e97c:	f893 38a4 	ldrb.w	r3, [r3, #2212]	; 0x8a4
 800e980:	2b00      	cmp	r3, #0
 800e982:	f47f ae06 	bne.w	800e592 <m_kalman_3gyro.isra.0.constprop.0+0x3b02>
 800e986:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 800e9f4 <m_kalman_3gyro.isra.0.constprop.0+0x3f64>
 800e98a:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800e98e:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e992:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e996:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e99a:	edc3 6a06 	vstr	s13, [r3, #24]
 800e99e:	ed83 7a07 	vstr	s14, [r3, #28]
 800e9a2:	edc3 7a08 	vstr	s15, [r3, #32]
 800e9a6:	e5f4      	b.n	800e592 <m_kalman_3gyro.isra.0.constprop.0+0x3b02>
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	3301      	adds	r3, #1
 800e9b2:	f8c1 3450 	str.w	r3, [r1, #1104]	; 0x450
 800e9b6:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 800e9ba:	f881 2204 	strb.w	r2, [r1, #516]	; 0x204
 800e9be:	f8c1 245c 	str.w	r2, [r1, #1116]	; 0x45c
 800e9c2:	f7fd bcd1 	b.w	800c368 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 800e9c6:	2e00      	cmp	r6, #0
 800e9c8:	d078      	beq.n	800eabc <m_kalman_3gyro.isra.0.constprop.0+0x402c>
 800e9ca:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800e9ce:	f8a2 31fc 	strh.w	r3, [r2, #508]	; 0x1fc
 800e9d2:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
 800e9d6:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 800e9da:	f882 3207 	strb.w	r3, [r2, #519]	; 0x207
 800e9de:	f7fd bf55 	b.w	800c88c <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 800e9e2:	bf00      	nop
 800e9e4:	f3af 8000 	nop.w
 800e9e8:	3e4ccccd 	.word	0x3e4ccccd
 800e9ec:	3eaaaaab 	.word	0x3eaaaaab
 800e9f0:	20001698 	.word	0x20001698
 800e9f4:	3f19999a 	.word	0x3f19999a
 800e9f8:	47ae147b 	.word	0x47ae147b
 800e9fc:	3f747ae1 	.word	0x3f747ae1
 800ea00:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800ea04:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800ea08:	2301      	movs	r3, #1
 800ea0a:	f240 1201 	movw	r2, #257	; 0x101
 800ea0e:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 800ea12:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 800ea16:	9908      	ldr	r1, [sp, #32]
 800ea18:	680a      	ldr	r2, [r1, #0]
 800ea1a:	67c2      	str	r2, [r0, #124]	; 0x7c
 800ea1c:	684a      	ldr	r2, [r1, #4]
 800ea1e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 800ea22:	688a      	ldr	r2, [r1, #8]
 800ea24:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 800ea28:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 800ea2c:	7013      	strb	r3, [r2, #0]
 800ea2e:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
 800ea32:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 800ea36:	3301      	adds	r3, #1
 800ea38:	f8c0 345c 	str.w	r3, [r0, #1116]	; 0x45c
 800ea3c:	2a00      	cmp	r2, #0
 800ea3e:	f43e ade9 	beq.w	800d614 <m_kalman_3gyro.isra.0.constprop.0+0x2b84>
 800ea42:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 800ea46:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800ea4a:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
 800ea4e:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
 800ea52:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 800ea54:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
 800ea58:	2200      	movs	r2, #0
 800ea5a:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
 800ea5e:	f7fe bdd9 	b.w	800d614 <m_kalman_3gyro.isra.0.constprop.0+0x2b84>
 800ea62:	2364      	movs	r3, #100	; 0x64
 800ea64:	f8c1 38b0 	str.w	r3, [r1, #2224]	; 0x8b0
 800ea68:	f7fd bf10 	b.w	800c88c <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 800ea6c:	460b      	mov	r3, r1
 800ea6e:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
 800ea72:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800ea76:	f8d1 10a4 	ldr.w	r1, [r1, #164]	; 0xa4
 800ea7a:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800ea7e:	6018      	str	r0, [r3, #0]
 800ea80:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ea84:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800ea88:	6019      	str	r1, [r3, #0]
 800ea8a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ea8e:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 800ea92:	601a      	str	r2, [r3, #0]
 800ea94:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800ea98:	e60b      	b.n	800e6b2 <m_kalman_3gyro.isra.0.constprop.0+0x3c22>
 800ea9a:	9a08      	ldr	r2, [sp, #32]
 800ea9c:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800eaa0:	6813      	ldr	r3, [r2, #0]
 800eaa2:	67cb      	str	r3, [r1, #124]	; 0x7c
 800eaa4:	6853      	ldr	r3, [r2, #4]
 800eaa6:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800eaaa:	6892      	ldr	r2, [r2, #8]
 800eaac:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
 800eab0:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 800eab4:	2301      	movs	r3, #1
 800eab6:	7013      	strb	r3, [r2, #0]
 800eab8:	460b      	mov	r3, r1
 800eaba:	e70c      	b.n	800e8d6 <m_kalman_3gyro.isra.0.constprop.0+0x3e46>
 800eabc:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800eac0:	edd3 6a00 	vldr	s13, [r3]
 800eac4:	ed93 7a01 	vldr	s14, [r3, #4]
 800eac8:	edd3 7a02 	vldr	s15, [r3, #8]
 800eacc:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800ead0:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ead4:	ee27 7a06 	vmul.f32	s14, s14, s12
 800ead8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800eadc:	edc3 6a00 	vstr	s13, [r3]
 800eae0:	ed83 7a01 	vstr	s14, [r3, #4]
 800eae4:	edc3 7a02 	vstr	s15, [r3, #8]
 800eae8:	f7fd bed0 	b.w	800c88c <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>

0800eaec <SpacePointAlgorithm.isra.0>:
 800eaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaf0:	ed2d 8b10 	vpush	{d8-d15}
 800eaf4:	b0bb      	sub	sp, #236	; 0xec
 800eaf6:	f8df e3e8 	ldr.w	lr, [pc, #1000]	; 800eee0 <SpacePointAlgorithm.isra.0+0x3f4>
 800eafa:	f89d 5160 	ldrb.w	r5, [sp, #352]	; 0x160
 800eafe:	9515      	str	r5, [sp, #84]	; 0x54
 800eb00:	f89d 5168 	ldrb.w	r5, [sp, #360]	; 0x168
 800eb04:	9516      	str	r5, [sp, #88]	; 0x58
 800eb06:	f89d 516c 	ldrb.w	r5, [sp, #364]	; 0x16c
 800eb0a:	9517      	str	r5, [sp, #92]	; 0x5c
 800eb0c:	f89d 5170 	ldrb.w	r5, [sp, #368]	; 0x170
 800eb10:	9518      	str	r5, [sp, #96]	; 0x60
 800eb12:	4681      	mov	r9, r0
 800eb14:	460e      	mov	r6, r1
 800eb16:	4692      	mov	sl, r2
 800eb18:	461d      	mov	r5, r3
 800eb1a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800eb1e:	f10d 0c7c 	add.w	ip, sp, #124	; 0x7c
 800eb22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800eb26:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800eb2a:	9f69      	ldr	r7, [sp, #420]	; 0x1a4
 800eb2c:	ed8d 1a19 	vstr	s2, [sp, #100]	; 0x64
 800eb30:	e88c 0003 	stmia.w	ip, {r0, r1}
 800eb34:	e9dd 0156 	ldrd	r0, r1, [sp, #344]	; 0x158
 800eb38:	eef0 ba40 	vmov.f32	s23, s0
 800eb3c:	eeb0 ea60 	vmov.f32	s28, s1
 800eb40:	eef0 da61 	vmov.f32	s27, s3
 800eb44:	eeb0 ba42 	vmov.f32	s22, s4
 800eb48:	eef0 9a62 	vmov.f32	s19, s5
 800eb4c:	eeb0 aa43 	vmov.f32	s20, s6
 800eb50:	eef0 aa63 	vmov.f32	s21, s7
 800eb54:	f7f1 ffec 	bl	8000b30 <__aeabi_d2f>
 800eb58:	f897 38cc 	ldrb.w	r3, [r7, #2252]	; 0x8cc
 800eb5c:	9c54      	ldr	r4, [sp, #336]	; 0x150
 800eb5e:	f89d b164 	ldrb.w	fp, [sp, #356]	; 0x164
 800eb62:	f8dd 8190 	ldr.w	r8, [sp, #400]	; 0x190
 800eb66:	ee0c 0a90 	vmov	s25, r0
 800eb6a:	b923      	cbnz	r3, 800eb76 <SpacePointAlgorithm.isra.0+0x8a>
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	2301      	movs	r3, #1
 800eb70:	603a      	str	r2, [r7, #0]
 800eb72:	f887 38cc 	strb.w	r3, [r7, #2252]	; 0x8cc
 800eb76:	eddf 7ace 	vldr	s15, [pc, #824]	; 800eeb0 <SpacePointAlgorithm.isra.0+0x3c4>
 800eb7a:	eec7 7aab 	vdiv.f32	s15, s15, s23
 800eb7e:	ee17 0a90 	vmov	r0, s15
 800eb82:	f7f1 fc85 	bl	8000490 <__aeabi_f2d>
 800eb86:	ec41 0b10 	vmov	d0, r0, r1
 800eb8a:	f004 fb79 	bl	8013280 <sqrt>
 800eb8e:	ec51 0b10 	vmov	r0, r1, d0
 800eb92:	f7f1 ffcd 	bl	8000b30 <__aeabi_d2f>
 800eb96:	eddf 4ac7 	vldr	s9, [pc, #796]	; 800eeb4 <SpacePointAlgorithm.isra.0+0x3c8>
 800eb9a:	ed95 5a00 	vldr	s10, [r5]
 800eb9e:	edd5 5a01 	vldr	s11, [r5, #4]
 800eba2:	ed95 6a02 	vldr	s12, [r5, #8]
 800eba6:	eddf 6ac4 	vldr	s13, [pc, #784]	; 800eeb8 <SpacePointAlgorithm.isra.0+0x3cc>
 800ebaa:	ed9d 1a20 	vldr	s2, [sp, #128]	; 0x80
 800ebae:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 800ebb2:	eddd ea22 	vldr	s29, [sp, #136]	; 0x88
 800ebb6:	ed9d da23 	vldr	s26, [sp, #140]	; 0x8c
 800ebba:	ed9d 9a24 	vldr	s18, [sp, #144]	; 0x90
 800ebbe:	ee07 0a90 	vmov	s15, r0
 800ebc2:	ee25 5a24 	vmul.f32	s10, s10, s9
 800ebc6:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800ebca:	ee26 6a24 	vmul.f32	s12, s12, s9
 800ebce:	ee86 8aa7 	vdiv.f32	s16, s13, s15
 800ebd2:	ee27 fa81 	vmul.f32	s30, s15, s2
 800ebd6:	ee67 fa87 	vmul.f32	s31, s15, s14
 800ebda:	ee67 8aae 	vmul.f32	s17, s15, s29
 800ebde:	ee27 da8d 	vmul.f32	s26, s15, s26
 800ebe2:	ee27 9a89 	vmul.f32	s18, s15, s18
 800ebe6:	ed85 5a00 	vstr	s10, [r5]
 800ebea:	edc5 5a01 	vstr	s11, [r5, #4]
 800ebee:	ed85 6a02 	vstr	s12, [r5, #8]
 800ebf2:	f1bb 0f04 	cmp.w	fp, #4
 800ebf6:	f200 812f 	bhi.w	800ee58 <SpacePointAlgorithm.isra.0+0x36c>
 800ebfa:	e8df f01b 	tbh	[pc, fp, lsl #1]
 800ebfe:	0140      	.short	0x0140
 800ec00:	0122014d 	.word	0x0122014d
 800ec04:	0005012d 	.word	0x0005012d
 800ec08:	ed9f caac 	vldr	s24, [pc, #688]	; 800eebc <SpacePointAlgorithm.isra.0+0x3d0>
 800ec0c:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
 800ec10:	e9dd 015e 	ldrd	r0, r1, [sp, #376]	; 0x178
 800ec14:	2200      	movs	r2, #0
 800ec16:	2300      	movs	r3, #0
 800ec18:	f7f1 fefa 	bl	8000a10 <__aeabi_dcmpeq>
 800ec1c:	ed97 7a00 	vldr	s14, [r7]
 800ec20:	b168      	cbz	r0, 800ec3e <SpacePointAlgorithm.isra.0+0x152>
 800ec22:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800ec26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec2a:	f340 80ee 	ble.w	800ee0a <SpacePointAlgorithm.isra.0+0x31e>
 800ec2e:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800ec32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ec36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec3a:	f140 80e6 	bpl.w	800ee0a <SpacePointAlgorithm.isra.0+0x31e>
 800ec3e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ec42:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800ec46:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec4a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800ec4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec52:	edc7 7a00 	vstr	s15, [r7]
 800ec56:	f100 80ef 	bmi.w	800ee38 <SpacePointAlgorithm.isra.0+0x34c>
 800ec5a:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 800ec5e:	eec6 4a27 	vdiv.f32	s9, s12, s15
 800ec62:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800eec0 <SpacePointAlgorithm.isra.0+0x3d4>
 800ec66:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ec6a:	ee2b da0d 	vmul.f32	s26, s22, s26
 800ec6e:	eddf 7a95 	vldr	s15, [pc, #596]	; 800eec4 <SpacePointAlgorithm.isra.0+0x3d8>
 800ec72:	ee2d da07 	vmul.f32	s26, s26, s14
 800ec76:	ee27 fa0f 	vmul.f32	s30, s14, s30
 800ec7a:	ee68 4a24 	vmul.f32	s9, s16, s9
 800ec7e:	ee27 7a2f 	vmul.f32	s14, s14, s31
 800ec82:	ee6e eaa8 	vmul.f32	s29, s29, s17
 800ec86:	ee29 9a27 	vmul.f32	s18, s18, s15
 800ec8a:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 800ec8e:	edd6 7a01 	vldr	s15, [r6, #4]
 800ec92:	ed94 4a09 	vldr	s8, [r4, #36]	; 0x24
 800ec96:	ed94 6a03 	vldr	s12, [r4, #12]
 800ec9a:	ed96 5a00 	vldr	s10, [r6]
 800ec9e:	edd4 5a05 	vldr	s11, [r4, #20]
 800eca2:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 800eca6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ecaa:	edd4 6a04 	vldr	s13, [r4, #16]
 800ecae:	ed8d 7a32 	vstr	s14, [sp, #200]	; 0xc8
 800ecb2:	ee35 5a44 	vsub.f32	s10, s10, s8
 800ecb6:	ee27 6a86 	vmul.f32	s12, s15, s12
 800ecba:	ed94 4a00 	vldr	s8, [r4]
 800ecbe:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800ecc2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ecc6:	eea5 6a04 	vfma.f32	s12, s10, s8
 800ecca:	462b      	mov	r3, r5
 800eccc:	ad1a      	add	r5, sp, #104	; 0x68
 800ecce:	ed94 4a02 	vldr	s8, [r4, #8]
 800ecd2:	edcd 4a25 	vstr	s9, [sp, #148]	; 0x94
 800ecd6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ecda:	edd4 5a01 	vldr	s11, [r4, #4]
 800ecde:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 800ece2:	eeb0 7a66 	vmov.f32	s14, s13
 800ece6:	eea5 7a25 	vfma.f32	s14, s10, s11
 800ecea:	a92e      	add	r1, sp, #184	; 0xb8
 800ecec:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 800eee4 <SpacePointAlgorithm.isra.0+0x3f8>
 800ecf0:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 800ecf4:	edd6 5a02 	vldr	s11, [r6, #8]
 800ecf8:	ed8d fa2e 	vstr	s30, [sp, #184]	; 0xb8
 800ecfc:	eee4 7a05 	vfma.f32	s15, s8, s10
 800ed00:	f8df e1e4 	ldr.w	lr, [pc, #484]	; 800eee8 <SpacePointAlgorithm.isra.0+0x3fc>
 800ed04:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800ed08:	ed94 4a07 	vldr	s8, [r4, #28]
 800ed0c:	edd4 6a06 	vldr	s13, [r4, #24]
 800ed10:	ed94 5a08 	vldr	s10, [r4, #32]
 800ed14:	ed8d fa2f 	vstr	s30, [sp, #188]	; 0xbc
 800ed18:	eea4 7a25 	vfma.f32	s14, s8, s11
 800ed1c:	ac25      	add	r4, sp, #148	; 0x94
 800ed1e:	4652      	mov	r2, sl
 800ed20:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ed24:	4648      	mov	r0, r9
 800ed26:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 800eeec <SpacePointAlgorithm.isra.0+0x400>
 800ed2a:	ed8d 7a1d 	vstr	s14, [sp, #116]	; 0x74
 800ed2e:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800ed32:	eeb7 2a08 	vmov.f32	s4, #120	; 0x3fc00000  1.5
 800ed36:	ee2b ba02 	vmul.f32	s22, s22, s4
 800ed3a:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 800ed3e:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 800ed42:	ed8d fa30 	vstr	s30, [sp, #192]	; 0xc0
 800ed46:	edcd ea34 	vstr	s29, [sp, #208]	; 0xd0
 800ed4a:	edcd ea35 	vstr	s29, [sp, #212]	; 0xd4
 800ed4e:	edcd ea36 	vstr	s29, [sp, #216]	; 0xd8
 800ed52:	ed8d da37 	vstr	s26, [sp, #220]	; 0xdc
 800ed56:	ed8d 9a38 	vstr	s18, [sp, #224]	; 0xe0
 800ed5a:	ed8d ba39 	vstr	s22, [sp, #228]	; 0xe4
 800ed5e:	edcd 4a27 	vstr	s9, [sp, #156]	; 0x9c
 800ed62:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800ed64:	9602      	str	r6, [sp, #8]
 800ed66:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800ed68:	f88d 6068 	strb.w	r6, [sp, #104]	; 0x68
 800ed6c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ed6e:	f88d 6069 	strb.w	r6, [sp, #105]	; 0x69
 800ed72:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800ed74:	f88d 606a 	strb.w	r6, [sp, #106]	; 0x6a
 800ed78:	9e68      	ldr	r6, [sp, #416]	; 0x1a0
 800ed7a:	9611      	str	r6, [sp, #68]	; 0x44
 800ed7c:	ed9d 7b60 	vldr	d7, [sp, #384]	; 0x180
 800ed80:	9e67      	ldr	r6, [sp, #412]	; 0x19c
 800ed82:	9610      	str	r6, [sp, #64]	; 0x40
 800ed84:	9e66      	ldr	r6, [sp, #408]	; 0x198
 800ed86:	9504      	str	r5, [sp, #16]
 800ed88:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ed8c:	e9cd 860e 	strd	r8, r6, [sp, #56]	; 0x38
 800ed90:	ed9d 7b5e 	vldr	d7, [sp, #376]	; 0x178
 800ed94:	9e63      	ldr	r6, [sp, #396]	; 0x18c
 800ed96:	960c      	str	r6, [sp, #48]	; 0x30
 800ed98:	9e62      	ldr	r6, [sp, #392]	; 0x188
 800ed9a:	960b      	str	r6, [sp, #44]	; 0x2c
 800ed9c:	ad1b      	add	r5, sp, #108	; 0x6c
 800ed9e:	9e55      	ldr	r6, [sp, #340]	; 0x154
 800eda0:	f8cd b00c 	str.w	fp, [sp, #12]
 800eda4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eda8:	e9cd 1400 	strd	r1, r4, [sp]
 800edac:	eeb0 2a6c 	vmov.f32	s4, s25
 800edb0:	eef0 1a6b 	vmov.f32	s3, s23
 800edb4:	eeb0 1a6a 	vmov.f32	s2, s21
 800edb8:	eef0 0a4a 	vmov.f32	s1, s20
 800edbc:	eeb0 0a69 	vmov.f32	s0, s19
 800edc0:	a91c      	add	r1, sp, #112	; 0x70
 800edc2:	ed8d ca28 	vstr	s24, [sp, #160]	; 0xa0
 800edc6:	ed8d ca29 	vstr	s24, [sp, #164]	; 0xa4
 800edca:	ed8d ca2a 	vstr	s24, [sp, #168]	; 0xa8
 800edce:	9712      	str	r7, [sp, #72]	; 0x48
 800edd0:	960a      	str	r6, [sp, #40]	; 0x28
 800edd2:	950d      	str	r5, [sp, #52]	; 0x34
 800edd4:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
 800edd8:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
 800eddc:	f8cd 90b4 	str.w	r9, [sp, #180]	; 0xb4
 800ede0:	f7fb fe56 	bl	800aa90 <m_kalman_3gyro.isra.0.constprop.0>
 800ede4:	9862      	ldr	r0, [sp, #392]	; 0x188
 800ede6:	4621      	mov	r1, r4
 800ede8:	f7f9 fd8e 	bl	8008908 <m_q2dcm_eml>
 800edec:	9a65      	ldr	r2, [sp, #404]	; 0x194
 800edee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800edf2:	6013      	str	r3, [r2, #0]
 800edf4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800edf8:	6053      	str	r3, [r2, #4]
 800edfa:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800edfe:	6093      	str	r3, [r2, #8]
 800ee00:	b03b      	add	sp, #236	; 0xec
 800ee02:	ecbd 8b10 	vpop	{d8-d15}
 800ee06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee0a:	eddf 7a2f 	vldr	s15, [pc, #188]	; 800eec8 <SpacePointAlgorithm.isra.0+0x3dc>
 800ee0e:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
 800ee12:	ee7d daa7 	vadd.f32	s27, s27, s15
 800ee16:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800eec4 <SpacePointAlgorithm.isra.0+0x3d8>
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	ee27 fa0f 	vmul.f32	s30, s14, s30
 800ee20:	eec8 4a2d 	vdiv.f32	s9, s16, s27
 800ee24:	603b      	str	r3, [r7, #0]
 800ee26:	ee2e 7a2f 	vmul.f32	s14, s28, s31
 800ee2a:	ee6e eaa8 	vmul.f32	s29, s29, s17
 800ee2e:	ee2b da0d 	vmul.f32	s26, s22, s26
 800ee32:	ee29 9a27 	vmul.f32	s18, s18, s15
 800ee36:	e728      	b.n	800ec8a <SpacePointAlgorithm.isra.0+0x19e>
 800ee38:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800eecc <SpacePointAlgorithm.isra.0+0x3e0>
 800ee3c:	eef1 4a04 	vmov.f32	s9, #20	; 0x40a00000  5.0
 800ee40:	e713      	b.n	800ec6a <SpacePointAlgorithm.isra.0+0x17e>
 800ee42:	ee69 9aac 	vmul.f32	s19, s19, s25
 800ee46:	ee2a aa2c 	vmul.f32	s20, s20, s25
 800ee4a:	ee6a aaac 	vmul.f32	s21, s21, s25
 800ee4e:	ed9f ca20 	vldr	s24, [pc, #128]	; 800eed0 <SpacePointAlgorithm.isra.0+0x3e4>
 800ee52:	eef1 ea04 	vmov.f32	s29, #20	; 0x40a00000  5.0
 800ee56:	e6db      	b.n	800ec10 <SpacePointAlgorithm.isra.0+0x124>
 800ee58:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800eed4 <SpacePointAlgorithm.isra.0+0x3e8>
 800ee5c:	ed9f ca1e 	vldr	s24, [pc, #120]	; 800eed8 <SpacePointAlgorithm.isra.0+0x3ec>
 800ee60:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800ee64:	ee2a aa27 	vmul.f32	s20, s20, s15
 800ee68:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800ee6c:	ee69 9aac 	vmul.f32	s19, s19, s25
 800ee70:	ee2a aa2c 	vmul.f32	s20, s20, s25
 800ee74:	ee6a aaac 	vmul.f32	s21, s21, s25
 800ee78:	eef6 ea00 	vmov.f32	s29, #96	; 0x3f000000  0.5
 800ee7c:	e6c8      	b.n	800ec10 <SpacePointAlgorithm.isra.0+0x124>
 800ee7e:	eddf 7a17 	vldr	s15, [pc, #92]	; 800eedc <SpacePointAlgorithm.isra.0+0x3f0>
 800ee82:	ed9f ca15 	vldr	s24, [pc, #84]	; 800eed8 <SpacePointAlgorithm.isra.0+0x3ec>
 800ee86:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800ee8a:	ee2a aa27 	vmul.f32	s20, s20, s15
 800ee8e:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800ee92:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
 800ee96:	e6bb      	b.n	800ec10 <SpacePointAlgorithm.isra.0+0x124>
 800ee98:	ee69 9aac 	vmul.f32	s19, s19, s25
 800ee9c:	ee2a aa2c 	vmul.f32	s20, s20, s25
 800eea0:	ee6a aaac 	vmul.f32	s21, s21, s25
 800eea4:	ed9f ca05 	vldr	s24, [pc, #20]	; 800eebc <SpacePointAlgorithm.isra.0+0x3d0>
 800eea8:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
 800eeac:	e6b0      	b.n	800ec10 <SpacePointAlgorithm.isra.0+0x124>
 800eeae:	bf00      	nop
 800eeb0:	3c03126f 	.word	0x3c03126f
 800eeb4:	3c8efa35 	.word	0x3c8efa35
 800eeb8:	3b656042 	.word	0x3b656042
 800eebc:	3ac49ba6 	.word	0x3ac49ba6
 800eec0:	3d4ccccd 	.word	0x3d4ccccd
 800eec4:	3f333333 	.word	0x3f333333
 800eec8:	358637bd 	.word	0x358637bd
 800eecc:	3e4ccccd 	.word	0x3e4ccccd
 800eed0:	3727c5ac 	.word	0x3727c5ac
 800eed4:	42c80000 	.word	0x42c80000
 800eed8:	3a83126f 	.word	0x3a83126f
 800eedc:	3dcccccd 	.word	0x3dcccccd
 800eee0:	080150c0 	.word	0x080150c0
 800eee4:	3b449ba6 	.word	0x3b449ba6
 800eee8:	3c23d70a 	.word	0x3c23d70a
 800eeec:	3a9d4952 	.word	0x3a9d4952

0800eef0 <MotionDI_Initialize>:
 800eef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eef4:	4a12      	ldr	r2, [pc, #72]	; (800ef40 <MotionDI_Initialize+0x50>)
 800eef6:	4913      	ldr	r1, [pc, #76]	; (800ef44 <MotionDI_Initialize+0x54>)
 800eef8:	6813      	ldr	r3, [r2, #0]
 800eefa:	f023 0301 	bic.w	r3, r3, #1
 800eefe:	ed2d 8b02 	vpush	{d8}
 800ef02:	6013      	str	r3, [r2, #0]
 800ef04:	680b      	ldr	r3, [r1, #0]
 800ef06:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800ef0a:	4013      	ands	r3, r2
 800ef0c:	f24c 2440 	movw	r4, #49728	; 0xc240
 800ef10:	42a3      	cmp	r3, r4
 800ef12:	b091      	sub	sp, #68	; 0x44
 800ef14:	4607      	mov	r7, r0
 800ef16:	d01f      	beq.n	800ef58 <MotionDI_Initialize+0x68>
 800ef18:	680b      	ldr	r3, [r1, #0]
 800ef1a:	f24c 2170 	movw	r1, #49776	; 0xc270
 800ef1e:	4013      	ands	r3, r2
 800ef20:	428b      	cmp	r3, r1
 800ef22:	d019      	beq.n	800ef58 <MotionDI_Initialize+0x68>
 800ef24:	4b08      	ldr	r3, [pc, #32]	; (800ef48 <MotionDI_Initialize+0x58>)
 800ef26:	2201      	movs	r2, #1
 800ef28:	601a      	str	r2, [r3, #0]
 800ef2a:	681a      	ldr	r2, [r3, #0]
 800ef2c:	2a00      	cmp	r2, #0
 800ef2e:	d1fc      	bne.n	800ef2a <MotionDI_Initialize+0x3a>
 800ef30:	4b06      	ldr	r3, [pc, #24]	; (800ef4c <MotionDI_Initialize+0x5c>)
 800ef32:	4a07      	ldr	r2, [pc, #28]	; (800ef50 <MotionDI_Initialize+0x60>)
 800ef34:	601a      	str	r2, [r3, #0]
 800ef36:	681a      	ldr	r2, [r3, #0]
 800ef38:	4b06      	ldr	r3, [pc, #24]	; (800ef54 <MotionDI_Initialize+0x64>)
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d02b      	beq.n	800ef96 <MotionDI_Initialize+0xa6>
 800ef3e:	e7fe      	b.n	800ef3e <MotionDI_Initialize+0x4e>
 800ef40:	e0002000 	.word	0xe0002000
 800ef44:	e000ed00 	.word	0xe000ed00
 800ef48:	40023008 	.word	0x40023008
 800ef4c:	40023000 	.word	0x40023000
 800ef50:	f407a5c2 	.word	0xf407a5c2
 800ef54:	b5e8b5cd 	.word	0xb5e8b5cd
 800ef58:	4be3      	ldr	r3, [pc, #908]	; (800f2e8 <MotionDI_Initialize+0x3f8>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d1e1      	bne.n	800ef24 <MotionDI_Initialize+0x34>
 800ef60:	4ae2      	ldr	r2, [pc, #904]	; (800f2ec <MotionDI_Initialize+0x3fc>)
 800ef62:	6813      	ldr	r3, [r2, #0]
 800ef64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ef68:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ef6c:	d006      	beq.n	800ef7c <MotionDI_Initialize+0x8c>
 800ef6e:	6813      	ldr	r3, [r2, #0]
 800ef70:	f240 4283 	movw	r2, #1155	; 0x483
 800ef74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	d1d3      	bne.n	800ef24 <MotionDI_Initialize+0x34>
 800ef7c:	4bdc      	ldr	r3, [pc, #880]	; (800f2f0 <MotionDI_Initialize+0x400>)
 800ef7e:	2201      	movs	r2, #1
 800ef80:	601a      	str	r2, [r3, #0]
 800ef82:	681a      	ldr	r2, [r3, #0]
 800ef84:	2a00      	cmp	r2, #0
 800ef86:	d1fc      	bne.n	800ef82 <MotionDI_Initialize+0x92>
 800ef88:	4bda      	ldr	r3, [pc, #872]	; (800f2f4 <MotionDI_Initialize+0x404>)
 800ef8a:	4adb      	ldr	r2, [pc, #876]	; (800f2f8 <MotionDI_Initialize+0x408>)
 800ef8c:	601a      	str	r2, [r3, #0]
 800ef8e:	681a      	ldr	r2, [r3, #0]
 800ef90:	4bda      	ldr	r3, [pc, #872]	; (800f2fc <MotionDI_Initialize+0x40c>)
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d1d3      	bne.n	800ef3e <MotionDI_Initialize+0x4e>
 800ef96:	4cda      	ldr	r4, [pc, #872]	; (800f300 <MotionDI_Initialize+0x410>)
 800ef98:	4dda      	ldr	r5, [pc, #872]	; (800f304 <MotionDI_Initialize+0x414>)
 800ef9a:	f8d7 c000 	ldr.w	ip, [r7]
 800ef9e:	4bda      	ldr	r3, [pc, #872]	; (800f308 <MotionDI_Initialize+0x418>)
 800efa0:	49da      	ldr	r1, [pc, #872]	; (800f30c <MotionDI_Initialize+0x41c>)
 800efa2:	f504 62c9 	add.w	r2, r4, #1608	; 0x648
 800efa6:	2001      	movs	r0, #1
 800efa8:	f8c2 c000 	str.w	ip, [r2]
 800efac:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
 800efb0:	f884 0644 	strb.w	r0, [r4, #1604]	; 0x644
 800efb4:	652a      	str	r2, [r5, #80]	; 0x50
 800efb6:	2014      	movs	r0, #20
 800efb8:	f505 628c 	add.w	r2, r5, #1120	; 0x460
 800efbc:	f505 6b8d 	add.w	fp, r5, #1128	; 0x468
 800efc0:	2600      	movs	r6, #0
 800efc2:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800efc6:	f8c5 0464 	str.w	r0, [r5, #1124]	; 0x464
 800efca:	f44f 00dc 	mov.w	r0, #7208960	; 0x6e0000
 800efce:	6011      	str	r1, [r2, #0]
 800efd0:	f8c5 01c8 	str.w	r0, [r5, #456]	; 0x1c8
 800efd4:	2230      	movs	r2, #48	; 0x30
 800efd6:	f8cb 3000 	str.w	r3, [fp]
 800efda:	f8a5 c058 	strh.w	ip, [r5, #88]	; 0x58
 800efde:	f105 0014 	add.w	r0, r5, #20
 800efe2:	4631      	mov	r1, r6
 800efe4:	702e      	strb	r6, [r5, #0]
 800efe6:	f885 646c 	strb.w	r6, [r5, #1132]	; 0x46c
 800efea:	f885 604c 	strb.w	r6, [r5, #76]	; 0x4c
 800efee:	656e      	str	r6, [r5, #84]	; 0x54
 800eff0:	64ae      	str	r6, [r5, #72]	; 0x48
 800eff2:	f003 ff63 	bl	8012ebc <memset>
 800eff6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800effa:	f44f 7281 	mov.w	r2, #258	; 0x102
 800effe:	82aa      	strh	r2, [r5, #20]
 800f000:	626b      	str	r3, [r5, #36]	; 0x24
 800f002:	636b      	str	r3, [r5, #52]	; 0x34
 800f004:	646b      	str	r3, [r5, #68]	; 0x44
 800f006:	ed97 0a00 	vldr	s0, [r7]
 800f00a:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 800f310 <MotionDI_Initialize+0x420>
 800f00e:	612e      	str	r6, [r5, #16]
 800f010:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800f014:	f884 664c 	strb.w	r6, [r4, #1612]	; 0x64c
 800f018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f01c:	ee17 2a90 	vmov	r2, s15
 800f020:	1e53      	subs	r3, r2, #1
 800f022:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f026:	d20b      	bcs.n	800f040 <MotionDI_Initialize+0x150>
 800f028:	f1a2 030a 	sub.w	r3, r2, #10
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	2b5a      	cmp	r3, #90	; 0x5a
 800f030:	bf8c      	ite	hi
 800f032:	2300      	movhi	r3, #0
 800f034:	2301      	movls	r3, #1
 800f036:	f8c5 2464 	str.w	r2, [r5, #1124]	; 0x464
 800f03a:	702b      	strb	r3, [r5, #0]
 800f03c:	ed97 0a00 	vldr	s0, [r7]
 800f040:	4eb4      	ldr	r6, [pc, #720]	; (800f314 <MotionDI_Initialize+0x424>)
 800f042:	eddf 6ab5 	vldr	s13, [pc, #724]	; 800f318 <MotionDI_Initialize+0x428>
 800f046:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800f31c <MotionDI_Initialize+0x42c>
 800f04a:	4fb5      	ldr	r7, [pc, #724]	; (800f320 <MotionDI_Initialize+0x430>)
 800f04c:	f7f9 f9ce 	bl	80083ec <iNemoEngine_gbias_init>
 800f050:	f20f 296c 	addw	r9, pc, #620	; 0x26c
 800f054:	e9d9 8900 	ldrd	r8, r9, [r9]
 800f058:	ed9f 0b9b 	vldr	d0, [pc, #620]	; 800f2c8 <MotionDI_Initialize+0x3d8>
 800f05c:	ed9f 1b9c 	vldr	d1, [pc, #624]	; 800f2d0 <MotionDI_Initialize+0x3e0>
 800f060:	ed9f 2b9d 	vldr	d2, [pc, #628]	; 800f2d8 <MotionDI_Initialize+0x3e8>
 800f064:	ed9f 5b9e 	vldr	d5, [pc, #632]	; 800f2e0 <MotionDI_Initialize+0x3f0>
 800f068:	eddf 7aae 	vldr	s15, [pc, #696]	; 800f324 <MotionDI_Initialize+0x434>
 800f06c:	eddf 4aae 	vldr	s9, [pc, #696]	; 800f328 <MotionDI_Initialize+0x438>
 800f070:	ed9f 6aae 	vldr	s12, [pc, #696]	; 800f32c <MotionDI_Initialize+0x43c>
 800f074:	ed9f 3aae 	vldr	s6, [pc, #696]	; 800f330 <MotionDI_Initialize+0x440>
 800f078:	eddf 3aae 	vldr	s7, [pc, #696]	; 800f334 <MotionDI_Initialize+0x444>
 800f07c:	ed9f 4aae 	vldr	s8, [pc, #696]	; 800f338 <MotionDI_Initialize+0x448>
 800f080:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 800f348 <MotionDI_Initialize+0x458>
 800f084:	edc6 7a87 	vstr	s15, [r6, #540]	; 0x21c
 800f088:	f241 1ab6 	movw	sl, #4534	; 0x11b6
 800f08c:	f241 13b4 	movw	r3, #4532	; 0x11b4
 800f090:	2500      	movs	r5, #0
 800f092:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f096:	f606 00e8 	addw	r0, r6, #2280	; 0x8e8
 800f09a:	210a      	movs	r1, #10
 800f09c:	f886 18e0 	strb.w	r1, [r6, #2272]	; 0x8e0
 800f0a0:	ed86 0b08 	vstr	d0, [r6, #32]
 800f0a4:	ed86 1b0c 	vstr	d1, [r6, #48]	; 0x30
 800f0a8:	ed86 2b0e 	vstr	d2, [r6, #56]	; 0x38
 800f0ac:	ed86 5b06 	vstr	d5, [r6, #24]
 800f0b0:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
 800f0b4:	613d      	str	r5, [r7, #16]
 800f0b6:	753d      	strb	r5, [r7, #20]
 800f0b8:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
 800f0bc:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
 800f0c0:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
 800f0c4:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
 800f0c8:	52f5      	strh	r5, [r6, r3]
 800f0ca:	607d      	str	r5, [r7, #4]
 800f0cc:	723d      	strb	r5, [r7, #8]
 800f0ce:	61fd      	str	r5, [r7, #28]
 800f0d0:	f887 5020 	strb.w	r5, [r7, #32]
 800f0d4:	62bd      	str	r5, [r7, #40]	; 0x28
 800f0d6:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
 800f0da:	637d      	str	r5, [r7, #52]	; 0x34
 800f0dc:	f887 5038 	strb.w	r5, [r7, #56]	; 0x38
 800f0e0:	edc6 7a88 	vstr	s15, [r6, #544]	; 0x220
 800f0e4:	edc4 4a27 	vstr	s9, [r4, #156]	; 0x9c
 800f0e8:	ed84 6a28 	vstr	s12, [r4, #160]	; 0xa0
 800f0ec:	f806 500a 	strb.w	r5, [r6, sl]
 800f0f0:	ed9f 6a92 	vldr	s12, [pc, #584]	; 800f33c <MotionDI_Initialize+0x44c>
 800f0f4:	f8c4 5650 	str.w	r5, [r4, #1616]	; 0x650
 800f0f8:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
 800f0fc:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
 800f100:	f8a6 58dc 	strh.w	r5, [r6, #2268]	; 0x8dc
 800f104:	f886 58de 	strb.w	r5, [r6, #2270]	; 0x8de
 800f108:	ed86 8a86 	vstr	s16, [r6, #536]	; 0x218
 800f10c:	643d      	str	r5, [r7, #64]	; 0x40
 800f10e:	ed80 5b02 	vstr	d5, [r0, #8]
 800f112:	ed9f 5a8b 	vldr	s10, [pc, #556]	; 800f340 <MotionDI_Initialize+0x450>
 800f116:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800f344 <MotionDI_Initialize+0x454>
 800f11a:	ed80 8a82 	vstr	s16, [r0, #520]	; 0x208
 800f11e:	f507 7168 	add.w	r1, r7, #928	; 0x3a0
 800f122:	e9c0 8906 	strd	r8, r9, [r0, #24]
 800f126:	eef2 4a04 	vmov.f32	s9, #36	; 0x41200000  10.0
 800f12a:	f04f 0801 	mov.w	r8, #1
 800f12e:	f04f 0902 	mov.w	r9, #2
 800f132:	f44f 7c00 	mov.w	ip, #512	; 0x200
 800f136:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800f13a:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 800f13e:	ed80 0b04 	vstr	d0, [r0, #16]
 800f142:	ed80 1b08 	vstr	d1, [r0, #32]
 800f146:	ed80 2b0a 	vstr	d2, [r0, #40]	; 0x28
 800f14a:	f88e 80c0 	strb.w	r8, [lr, #192]	; 0xc0
 800f14e:	edc0 7a83 	vstr	s15, [r0, #524]	; 0x20c
 800f152:	edc0 7a84 	vstr	s15, [r0, #528]	; 0x210
 800f156:	f887 5044 	strb.w	r5, [r7, #68]	; 0x44
 800f15a:	edc4 7aaf 	vstr	s15, [r4, #700]	; 0x2bc
 800f15e:	edc4 7ab0 	vstr	s15, [r4, #704]	; 0x2c0
 800f162:	edc4 7ab1 	vstr	s15, [r4, #708]	; 0x2c4
 800f166:	edc4 7ab3 	vstr	s15, [r4, #716]	; 0x2cc
 800f16a:	edc4 7ab4 	vstr	s15, [r4, #720]	; 0x2d0
 800f16e:	edc4 7ab5 	vstr	s15, [r4, #724]	; 0x2d4
 800f172:	edc4 7ab7 	vstr	s15, [r4, #732]	; 0x2dc
 800f176:	edc4 7ab8 	vstr	s15, [r4, #736]	; 0x2e0
 800f17a:	edc4 7ab9 	vstr	s15, [r4, #740]	; 0x2e4
 800f17e:	edc4 7abb 	vstr	s15, [r4, #748]	; 0x2ec
 800f182:	edc4 7abc 	vstr	s15, [r4, #752]	; 0x2f0
 800f186:	edc4 7abd 	vstr	s15, [r4, #756]	; 0x2f4
 800f18a:	edc4 7abf 	vstr	s15, [r4, #764]	; 0x2fc
 800f18e:	edc4 7ac0 	vstr	s15, [r4, #768]	; 0x300
 800f192:	edc4 7ac1 	vstr	s15, [r4, #772]	; 0x304
 800f196:	edc4 7ac3 	vstr	s15, [r4, #780]	; 0x30c
 800f19a:	edc4 7ac4 	vstr	s15, [r4, #784]	; 0x310
 800f19e:	ed84 8ab2 	vstr	s16, [r4, #712]	; 0x2c8
 800f1a2:	ed84 8ab6 	vstr	s16, [r4, #728]	; 0x2d8
 800f1a6:	ed84 8aba 	vstr	s16, [r4, #744]	; 0x2e8
 800f1aa:	ed84 8abe 	vstr	s16, [r4, #760]	; 0x2f8
 800f1ae:	ed84 8ac2 	vstr	s16, [r4, #776]	; 0x308
 800f1b2:	edc4 7ac5 	vstr	s15, [r4, #788]	; 0x314
 800f1b6:	ed84 3a3b 	vstr	s6, [r4, #236]	; 0xec
 800f1ba:	edc4 3a3c 	vstr	s7, [r4, #240]	; 0xf0
 800f1be:	ed84 4a3d 	vstr	s8, [r4, #244]	; 0xf4
 800f1c2:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 800f1c6:	edc4 4a3f 	vstr	s9, [r4, #252]	; 0xfc
 800f1ca:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800f1ce:	edc4 7ac7 	vstr	s15, [r4, #796]	; 0x31c
 800f1d2:	edc4 7ac8 	vstr	s15, [r4, #800]	; 0x320
 800f1d6:	edc4 7ac9 	vstr	s15, [r4, #804]	; 0x324
 800f1da:	edc4 7acb 	vstr	s15, [r4, #812]	; 0x32c
 800f1de:	edc4 7acc 	vstr	s15, [r4, #816]	; 0x330
 800f1e2:	edc4 7acd 	vstr	s15, [r4, #820]	; 0x334
 800f1e6:	edc4 7aa1 	vstr	s15, [r4, #644]	; 0x284
 800f1ea:	edc4 7aa2 	vstr	s15, [r4, #648]	; 0x288
 800f1ee:	edc4 7aa3 	vstr	s15, [r4, #652]	; 0x28c
 800f1f2:	edc4 7aa5 	vstr	s15, [r4, #660]	; 0x294
 800f1f6:	edc4 7aa6 	vstr	s15, [r4, #664]	; 0x298
 800f1fa:	edc4 7aa7 	vstr	s15, [r4, #668]	; 0x29c
 800f1fe:	edc4 7aa9 	vstr	s15, [r4, #676]	; 0x2a4
 800f202:	edc4 7aaa 	vstr	s15, [r4, #680]	; 0x2a8
 800f206:	edc4 7aab 	vstr	s15, [r4, #684]	; 0x2ac
 800f20a:	edc4 7aac 	vstr	s15, [r4, #688]	; 0x2b0
 800f20e:	edc4 7aad 	vstr	s15, [r4, #692]	; 0x2b4
 800f212:	edc4 7aae 	vstr	s15, [r4, #696]	; 0x2b8
 800f216:	ed84 8ac6 	vstr	s16, [r4, #792]	; 0x318
 800f21a:	ed84 8aca 	vstr	s16, [r4, #808]	; 0x328
 800f21e:	ed84 8ace 	vstr	s16, [r4, #824]	; 0x338
 800f222:	ed84 8aa0 	vstr	s16, [r4, #640]	; 0x280
 800f226:	ed84 8aa4 	vstr	s16, [r4, #656]	; 0x290
 800f22a:	ed84 8aa8 	vstr	s16, [r4, #672]	; 0x2a0
 800f22e:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
 800f232:	ed84 8a43 	vstr	s16, [r4, #268]	; 0x10c
 800f236:	f884 8110 	strb.w	r8, [r4, #272]	; 0x110
 800f23a:	edc4 6a48 	vstr	s13, [r4, #288]	; 0x120
 800f23e:	ed84 5a45 	vstr	s10, [r4, #276]	; 0x114
 800f242:	edc4 5a46 	vstr	s11, [r4, #280]	; 0x118
 800f246:	ed84 6a47 	vstr	s12, [r4, #284]	; 0x11c
 800f24a:	f8a4 c124 	strh.w	ip, [r4, #292]	; 0x124
 800f24e:	ed81 8a21 	vstr	s16, [r1, #132]	; 0x84
 800f252:	ed81 8a25 	vstr	s16, [r1, #148]	; 0x94
 800f256:	ed81 8a29 	vstr	s16, [r1, #164]	; 0xa4
 800f25a:	ed81 8a2d 	vstr	s16, [r1, #180]	; 0xb4
 800f25e:	ed81 8a31 	vstr	s16, [r1, #196]	; 0xc4
 800f262:	edc6 7a2c 	vstr	s15, [r6, #176]	; 0xb0
 800f266:	edc6 7a2d 	vstr	s15, [r6, #180]	; 0xb4
 800f26a:	edc6 7a2e 	vstr	s15, [r6, #184]	; 0xb8
 800f26e:	f884 9108 	strb.w	r9, [r4, #264]	; 0x108
 800f272:	edc1 7a1e 	vstr	s15, [r1, #120]	; 0x78
 800f276:	edc1 7a1f 	vstr	s15, [r1, #124]	; 0x7c
 800f27a:	edc1 7a20 	vstr	s15, [r1, #128]	; 0x80
 800f27e:	edc1 7a22 	vstr	s15, [r1, #136]	; 0x88
 800f282:	edc1 7a23 	vstr	s15, [r1, #140]	; 0x8c
 800f286:	edc1 7a24 	vstr	s15, [r1, #144]	; 0x90
 800f28a:	edc1 7a26 	vstr	s15, [r1, #152]	; 0x98
 800f28e:	edc1 7a27 	vstr	s15, [r1, #156]	; 0x9c
 800f292:	edc1 7a28 	vstr	s15, [r1, #160]	; 0xa0
 800f296:	edc1 7a2a 	vstr	s15, [r1, #168]	; 0xa8
 800f29a:	edc1 7a2b 	vstr	s15, [r1, #172]	; 0xac
 800f29e:	edc1 7a2c 	vstr	s15, [r1, #176]	; 0xb0
 800f2a2:	edc1 7a2e 	vstr	s15, [r1, #184]	; 0xb8
 800f2a6:	edc1 7a2f 	vstr	s15, [r1, #188]	; 0xbc
 800f2aa:	edc1 7a30 	vstr	s15, [r1, #192]	; 0xc0
 800f2ae:	edc1 7a32 	vstr	s15, [r1, #200]	; 0xc8
 800f2b2:	edc1 7a33 	vstr	s15, [r1, #204]	; 0xcc
 800f2b6:	f884 5126 	strb.w	r5, [r4, #294]	; 0x126
 800f2ba:	edc1 7a34 	vstr	s15, [r1, #208]	; 0xd0
 800f2be:	e04d      	b.n	800f35c <MotionDI_Initialize+0x46c>
 800f2c0:	00000000 	.word	0x00000000
 800f2c4:	3fbfdfb7 	.word	0x3fbfdfb7
 800f2c8:	20000000 	.word	0x20000000
 800f2cc:	3fc55a40 	.word	0x3fc55a40
 800f2d0:	c0000000 	.word	0xc0000000
 800f2d4:	3fb2875e 	.word	0x3fb2875e
 800f2d8:	60000000 	.word	0x60000000
 800f2dc:	3f9f1fed 	.word	0x3f9f1fed
 800f2e0:	60000000 	.word	0x60000000
 800f2e4:	3fc76cab 	.word	0x3fc76cab
 800f2e8:	e0042000 	.word	0xe0042000
 800f2ec:	5c001000 	.word	0x5c001000
 800f2f0:	58024c08 	.word	0x58024c08
 800f2f4:	58024c00 	.word	0x58024c00
 800f2f8:	f407a5c2 	.word	0xf407a5c2
 800f2fc:	b5e8b5cd 	.word	0xb5e8b5cd
 800f300:	20001698 	.word	0x20001698
 800f304:	20002130 	.word	0x20002130
 800f308:	3e4ccccd 	.word	0x3e4ccccd
 800f30c:	3a83126f 	.word	0x3a83126f
 800f310:	447a0000 	.word	0x447a0000
 800f314:	20000000 	.word	0x20000000
 800f318:	3dcccccd 	.word	0x3dcccccd
 800f31c:	3f2ac083 	.word	0x3f2ac083
 800f320:	2000173c 	.word	0x2000173c
 800f324:	00000000 	.word	0x00000000
 800f328:	7f800000 	.word	0x7f800000
 800f32c:	ff800000 	.word	0xff800000
 800f330:	3f639581 	.word	0x3f639581
 800f334:	402ab021 	.word	0x402ab021
 800f338:	3f13f7cf 	.word	0x3f13f7cf
 800f33c:	39b24207 	.word	0x39b24207
 800f340:	39712c28 	.word	0x39712c28
 800f344:	3a09a027 	.word	0x3a09a027
 800f348:	200010f8 	.word	0x200010f8
 800f34c:	3a51b717 	.word	0x3a51b717
 800f350:	3a378034 	.word	0x3a378034
 800f354:	3b378034 	.word	0x3b378034
 800f358:	3f666666 	.word	0x3f666666
 800f35c:	ed84 3a4a 	vstr	s6, [r4, #296]	; 0x128
 800f360:	edc4 3a4b 	vstr	s7, [r4, #300]	; 0x12c
 800f364:	ed84 4a4c 	vstr	s8, [r4, #304]	; 0x130
 800f368:	edc4 4a4e 	vstr	s9, [r4, #312]	; 0x138
 800f36c:	ed84 7a4d 	vstr	s14, [r4, #308]	; 0x134
 800f370:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
 800f374:	ed81 8a35 	vstr	s16, [r1, #212]	; 0xd4
 800f378:	ed81 8a39 	vstr	s16, [r1, #228]	; 0xe4
 800f37c:	ed81 8a3d 	vstr	s16, [r1, #244]	; 0xf4
 800f380:	ed81 8a0f 	vstr	s16, [r1, #60]	; 0x3c
 800f384:	ed81 8a13 	vstr	s16, [r1, #76]	; 0x4c
 800f388:	ed81 8a17 	vstr	s16, [r1, #92]	; 0x5c
 800f38c:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
 800f390:	edc1 7a37 	vstr	s15, [r1, #220]	; 0xdc
 800f394:	edc1 7a38 	vstr	s15, [r1, #224]	; 0xe0
 800f398:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
 800f39c:	edc1 7a3b 	vstr	s15, [r1, #236]	; 0xec
 800f3a0:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
 800f3a4:	edc1 7a10 	vstr	s15, [r1, #64]	; 0x40
 800f3a8:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
 800f3ac:	edc1 7a12 	vstr	s15, [r1, #72]	; 0x48
 800f3b0:	edc1 7a14 	vstr	s15, [r1, #80]	; 0x50
 800f3b4:	edc1 7a15 	vstr	s15, [r1, #84]	; 0x54
 800f3b8:	edc1 7a16 	vstr	s15, [r1, #88]	; 0x58
 800f3bc:	edc1 7a18 	vstr	s15, [r1, #96]	; 0x60
 800f3c0:	edc1 7a19 	vstr	s15, [r1, #100]	; 0x64
 800f3c4:	edc1 7a1a 	vstr	s15, [r1, #104]	; 0x68
 800f3c8:	edc1 7a1b 	vstr	s15, [r1, #108]	; 0x6c
 800f3cc:	edc1 7a1c 	vstr	s15, [r1, #112]	; 0x70
 800f3d0:	edc1 7a1d 	vstr	s15, [r1, #116]	; 0x74
 800f3d4:	f8c4 8140 	str.w	r8, [r4, #320]	; 0x140
 800f3d8:	ed84 8a52 	vstr	s16, [r4, #328]	; 0x148
 800f3dc:	f884 814c 	strb.w	r8, [r4, #332]	; 0x14c
 800f3e0:	f8a4 c160 	strh.w	ip, [r4, #352]	; 0x160
 800f3e4:	edc4 6a57 	vstr	s13, [r4, #348]	; 0x15c
 800f3e8:	ed84 5a54 	vstr	s10, [r4, #336]	; 0x150
 800f3ec:	edc4 5a55 	vstr	s11, [r4, #340]	; 0x154
 800f3f0:	ed84 6a56 	vstr	s12, [r4, #344]	; 0x158
 800f3f4:	edc0 7a28 	vstr	s15, [r0, #160]	; 0xa0
 800f3f8:	edc0 7a29 	vstr	s15, [r0, #164]	; 0xa4
 800f3fc:	edc0 7a2a 	vstr	s15, [r0, #168]	; 0xa8
 800f400:	f884 9144 	strb.w	r9, [r4, #324]	; 0x144
 800f404:	f884 5162 	strb.w	r5, [r4, #354]	; 0x162
 800f408:	f7fa fc0e 	bl	8009c28 <iNemo_setOrientation.constprop.0>
 800f40c:	f7fa fdde 	bl	8009fcc <iNemo_setOrientation_6X.constprop.0>
 800f410:	4631      	mov	r1, r6
 800f412:	ed5f 4a32 	vldr	s9, [pc, #-200]	; 800f34c <MotionDI_Initialize+0x45c>
 800f416:	f831 3f04 	ldrh.w	r3, [r1, #4]!
 800f41a:	ed1f 5a33 	vldr	s10, [pc, #-204]	; 800f350 <MotionDI_Initialize+0x460>
 800f41e:	ed5f 5a33 	vldr	s11, [pc, #-204]	; 800f354 <MotionDI_Initialize+0x464>
 800f422:	ed5f 7a33 	vldr	s15, [pc, #-204]	; 800f358 <MotionDI_Initialize+0x468>
 800f426:	f891 e002 	ldrb.w	lr, [r1, #2]
 800f42a:	f8b6 c000 	ldrh.w	ip, [r6]
 800f42e:	78b0      	ldrb	r0, [r6, #2]
 800f430:	494f      	ldr	r1, [pc, #316]	; (800f570 <MotionDI_Initialize+0x680>)
 800f432:	f8ad 3031 	strh.w	r3, [sp, #49]	; 0x31
 800f436:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 800f43a:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800f43e:	edc4 6a57 	vstr	s13, [r4, #348]	; 0x15c
 800f442:	edc4 6a48 	vstr	s13, [r4, #288]	; 0x120
 800f446:	edc4 4a54 	vstr	s9, [r4, #336]	; 0x150
 800f44a:	edc4 4a45 	vstr	s9, [r4, #276]	; 0x114
 800f44e:	ed84 5a55 	vstr	s10, [r4, #340]	; 0x154
 800f452:	ed84 5a46 	vstr	s10, [r4, #280]	; 0x118
 800f456:	edc4 5a56 	vstr	s11, [r4, #344]	; 0x158
 800f45a:	edc4 5a47 	vstr	s11, [r4, #284]	; 0x11c
 800f45e:	ed84 6a4b 	vstr	s12, [r4, #300]	; 0x12c
 800f462:	ed84 6a3c 	vstr	s12, [r4, #240]	; 0xf0
 800f466:	ed84 7a4d 	vstr	s14, [r4, #308]	; 0x134
 800f46a:	f884 9161 	strb.w	r9, [r4, #353]	; 0x161
 800f46e:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 800f472:	f884 9125 	strb.w	r9, [r4, #293]	; 0x125
 800f476:	f8c4 2101 	str.w	r2, [r4, #257]	; 0x101
 800f47a:	ed84 7a62 	vstr	s14, [r4, #392]	; 0x188
 800f47e:	f88d e033 	strb.w	lr, [sp, #51]	; 0x33
 800f482:	f8ad c02d 	strh.w	ip, [sp, #45]	; 0x2d
 800f486:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800f48a:	edc4 7a4a 	vstr	s15, [r4, #296]	; 0x128
 800f48e:	edc4 7a3b 	vstr	s15, [r4, #236]	; 0xec
 800f492:	edc4 7a61 	vstr	s15, [r4, #388]	; 0x184
 800f496:	f8c4 113d 	str.w	r1, [r4, #317]	; 0x13d
 800f49a:	f884 5162 	strb.w	r5, [r4, #354]	; 0x162
 800f49e:	f884 5126 	strb.w	r5, [r4, #294]	; 0x126
 800f4a2:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 800f4a6:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
 800f4aa:	f8a4 918c 	strh.w	r9, [r4, #396]	; 0x18c
 800f4ae:	f8dd 1031 	ldr.w	r1, [sp, #49]	; 0x31
 800f4b2:	f8dd 202d 	ldr.w	r2, [sp, #45]	; 0x2d
 800f4b6:	ed94 7a02 	vldr	s14, [r4, #8]
 800f4ba:	edd4 7a03 	vldr	s15, [r4, #12]
 800f4be:	f8db 0000 	ldr.w	r0, [fp]
 800f4c2:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 800f574 <MotionDI_Initialize+0x684>
 800f4c6:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 800f578 <MotionDI_Initialize+0x688>
 800f4ca:	f8d4 9014 	ldr.w	r9, [r4, #20]
 800f4ce:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
 800f4d2:	f507 6bb6 	add.w	fp, r7, #1456	; 0x5b0
 800f4d6:	e9c4 2164 	strd	r2, r1, [r4, #400]	; 0x190
 800f4da:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 800f4de:	ed84 7a5e 	vstr	s14, [r4, #376]	; 0x178
 800f4e2:	edc4 7a5f 	vstr	s15, [r4, #380]	; 0x17c
 800f4e6:	f8c4 e16c 	str.w	lr, [r4, #364]	; 0x16c
 800f4ea:	f8c4 c170 	str.w	ip, [r4, #368]	; 0x170
 800f4ee:	f8c4 9174 	str.w	r9, [r4, #372]	; 0x174
 800f4f2:	f7fa ff3d 	bl	800a370 <MotionDI_setKnobs.part.0>
 800f4f6:	f207 59e4 	addw	r9, r7, #1508	; 0x5e4
 800f4fa:	4629      	mov	r1, r5
 800f4fc:	4658      	mov	r0, fp
 800f4fe:	2234      	movs	r2, #52	; 0x34
 800f500:	f003 fcdc 	bl	8012ebc <memset>
 800f504:	4629      	mov	r1, r5
 800f506:	4648      	mov	r0, r9
 800f508:	2234      	movs	r2, #52	; 0x34
 800f50a:	ed8b 8a03 	vstr	s16, [fp, #12]
 800f50e:	ed8b 8a07 	vstr	s16, [fp, #28]
 800f512:	ed8b 8a0b 	vstr	s16, [fp, #44]	; 0x2c
 800f516:	f884 5684 	strb.w	r5, [r4, #1668]	; 0x684
 800f51a:	f003 fccf 	bl	8012ebc <memset>
 800f51e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800f568 <MotionDI_Initialize+0x678>
 800f522:	f241 13b4 	movw	r3, #4532	; 0x11b4
 800f526:	f207 621c 	addw	r2, r7, #1564	; 0x61c
 800f52a:	2000      	movs	r0, #0
 800f52c:	f207 672c 	addw	r7, r7, #1580	; 0x62c
 800f530:	2100      	movs	r1, #0
 800f532:	e9c2 0100 	strd	r0, r1, [r2]
 800f536:	ed87 7b00 	vstr	d7, [r7]
 800f53a:	52f5      	strh	r5, [r6, r3]
 800f53c:	f806 500a 	strb.w	r5, [r6, sl]
 800f540:	ed89 8a03 	vstr	s16, [r9, #12]
 800f544:	ed89 8a07 	vstr	s16, [r9, #28]
 800f548:	ed89 8a0b 	vstr	s16, [r9, #44]	; 0x2c
 800f54c:	f8c4 86cc 	str.w	r8, [r4, #1740]	; 0x6cc
 800f550:	f884 56b8 	strb.w	r5, [r4, #1720]	; 0x6b8
 800f554:	f884 56c8 	strb.w	r5, [r4, #1736]	; 0x6c8
 800f558:	b011      	add	sp, #68	; 0x44
 800f55a:	ecbd 8b02 	vpop	{d8}
 800f55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f562:	bf00      	nop
 800f564:	f3af 8000 	nop.w
 800f568:	00000000 	.word	0x00000000
 800f56c:	fff80000 	.word	0xfff80000
 800f570:	01010001 	.word	0x01010001
 800f574:	3a2c7da2 	.word	0x3a2c7da2
 800f578:	3e051eb8 	.word	0x3e051eb8

0800f57c <MotionDI_setKnobs>:
 800f57c:	4b03      	ldr	r3, [pc, #12]	; (800f58c <MotionDI_setKnobs+0x10>)
 800f57e:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 800f582:	b903      	cbnz	r3, 800f586 <MotionDI_setKnobs+0xa>
 800f584:	4770      	bx	lr
 800f586:	f7fa bef3 	b.w	800a370 <MotionDI_setKnobs.part.0>
 800f58a:	bf00      	nop
 800f58c:	20001698 	.word	0x20001698

0800f590 <MotionDI_getKnobs>:
 800f590:	4a22      	ldr	r2, [pc, #136]	; (800f61c <MotionDI_getKnobs+0x8c>)
 800f592:	f892 3644 	ldrb.w	r3, [r2, #1604]	; 0x644
 800f596:	b903      	cbnz	r3, 800f59a <MotionDI_getKnobs+0xa>
 800f598:	4770      	bx	lr
 800f59a:	b470      	push	{r4, r5, r6}
 800f59c:	4920      	ldr	r1, [pc, #128]	; (800f620 <MotionDI_getKnobs+0x90>)
 800f59e:	f892 5126 	ldrb.w	r5, [r2, #294]	; 0x126
 800f5a2:	880b      	ldrh	r3, [r1, #0]
 800f5a4:	f892 6125 	ldrb.w	r6, [r2, #293]	; 0x125
 800f5a8:	f880 5029 	strb.w	r5, [r0, #41]	; 0x29
 800f5ac:	b091      	sub	sp, #68	; 0x44
 800f5ae:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
 800f5b2:	f8ad 302d 	strh.w	r3, [sp, #45]	; 0x2d
 800f5b6:	460b      	mov	r3, r1
 800f5b8:	7889      	ldrb	r1, [r1, #2]
 800f5ba:	f833 4f04 	ldrh.w	r4, [r3, #4]!
 800f5be:	f8ad 4031 	strh.w	r4, [sp, #49]	; 0x31
 800f5c2:	789b      	ldrb	r3, [r3, #2]
 800f5c4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800f5ce:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 800f5d2:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 800f5d6:	f8dd 3031 	ldr.w	r3, [sp, #49]	; 0x31
 800f5da:	f8d2 10f8 	ldr.w	r1, [r2, #248]	; 0xf8
 800f5de:	f8d2 40ec 	ldr.w	r4, [r2, #236]	; 0xec
 800f5e2:	f8dd 502d 	ldr.w	r5, [sp, #45]	; 0x2d
 800f5e6:	6303      	str	r3, [r0, #48]	; 0x30
 800f5e8:	4b0e      	ldr	r3, [pc, #56]	; (800f624 <MotionDI_getKnobs+0x94>)
 800f5ea:	62c5      	str	r5, [r0, #44]	; 0x2c
 800f5ec:	6204      	str	r4, [r0, #32]
 800f5ee:	6241      	str	r1, [r0, #36]	; 0x24
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	6003      	str	r3, [r0, #0]
 800f5f4:	f892 4168 	ldrb.w	r4, [r2, #360]	; 0x168
 800f5f8:	68d3      	ldr	r3, [r2, #12]
 800f5fa:	6855      	ldr	r5, [r2, #4]
 800f5fc:	6891      	ldr	r1, [r2, #8]
 800f5fe:	7104      	strb	r4, [r0, #4]
 800f600:	6816      	ldr	r6, [r2, #0]
 800f602:	6954      	ldr	r4, [r2, #20]
 800f604:	6086      	str	r6, [r0, #8]
 800f606:	60c5      	str	r5, [r0, #12]
 800f608:	6104      	str	r4, [r0, #16]
 800f60a:	6141      	str	r1, [r0, #20]
 800f60c:	6183      	str	r3, [r0, #24]
 800f60e:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
 800f612:	7703      	strb	r3, [r0, #28]
 800f614:	b011      	add	sp, #68	; 0x44
 800f616:	bc70      	pop	{r4, r5, r6}
 800f618:	4770      	bx	lr
 800f61a:	bf00      	nop
 800f61c:	20001698 	.word	0x20001698
 800f620:	20000000 	.word	0x20000000
 800f624:	20002598 	.word	0x20002598

0800f628 <MotionDI_update>:
 800f628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f62c:	ed2d 8b10 	vpush	{d8-d15}
 800f630:	4cd2      	ldr	r4, [pc, #840]	; (800f97c <MotionDI_update+0x354>)
 800f632:	f894 3644 	ldrb.w	r3, [r4, #1604]	; 0x644
 800f636:	f2ad 4da4 	subw	sp, sp, #1188	; 0x4a4
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	f000 8197 	beq.w	800f96e <MotionDI_update+0x346>
 800f640:	2300      	movs	r3, #0
 800f642:	4681      	mov	r9, r0
 800f644:	460d      	mov	r5, r1
 800f646:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f64a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f64e:	f7f1 fbcd 	bl	8000dec <__aeabi_ldivmod>
 800f652:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
 800f656:	9017      	str	r0, [sp, #92]	; 0x5c
 800f658:	2b01      	cmp	r3, #1
 800f65a:	f000 81a7 	beq.w	800f9ac <MotionDI_update+0x384>
 800f65e:	2b02      	cmp	r3, #2
 800f660:	f000 81a9 	beq.w	800f9b6 <MotionDI_update+0x38e>
 800f664:	ab58      	add	r3, sp, #352	; 0x160
 800f666:	9318      	str	r3, [sp, #96]	; 0x60
 800f668:	ab65      	add	r3, sp, #404	; 0x194
 800f66a:	f50d 7b01 	add.w	fp, sp, #516	; 0x204
 800f66e:	931c      	str	r3, [sp, #112]	; 0x70
 800f670:	f204 6754 	addw	r7, r4, #1620	; 0x654
 800f674:	f894 8180 	ldrb.w	r8, [r4, #384]	; 0x180
 800f678:	f1b8 0f01 	cmp.w	r8, #1
 800f67c:	f000 85de 	beq.w	801023c <MotionDI_update+0xc14>
 800f680:	f1b8 0f02 	cmp.w	r8, #2
 800f684:	f000 85df 	beq.w	8010246 <MotionDI_update+0xc1e>
 800f688:	4ebd      	ldr	r6, [pc, #756]	; (800f980 <MotionDI_update+0x358>)
 800f68a:	f8df 8314 	ldr.w	r8, [pc, #788]	; 800f9a0 <MotionDI_update+0x378>
 800f68e:	edd7 0a00 	vldr	s1, [r7]
 800f692:	ed97 1a01 	vldr	s2, [r7, #4]
 800f696:	edd7 1a02 	vldr	s3, [r7, #8]
 800f69a:	ed97 2a03 	vldr	s4, [r7, #12]
 800f69e:	edd7 2a07 	vldr	s5, [r7, #28]
 800f6a2:	ed97 3a0b 	vldr	s6, [r7, #44]	; 0x2c
 800f6a6:	f8d8 3000 	ldr.w	r3, [r8]
 800f6aa:	682f      	ldr	r7, [r5, #0]
 800f6ac:	edd5 6a02 	vldr	s13, [r5, #8]
 800f6b0:	ed95 7a03 	vldr	s14, [r5, #12]
 800f6b4:	edd5 7a04 	vldr	s15, [r5, #16]
 800f6b8:	ed95 5a05 	vldr	s10, [r5, #20]
 800f6bc:	edd5 5a06 	vldr	s11, [r5, #24]
 800f6c0:	ed95 6a07 	vldr	s12, [r5, #28]
 800f6c4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800f6c8:	686d      	ldr	r5, [r5, #4]
 800f6ca:	edd6 3a00 	vldr	s7, [r6]
 800f6ce:	ed96 4a01 	vldr	s8, [r6, #4]
 800f6d2:	edd6 4a02 	vldr	s9, [r6, #8]
 800f6d6:	1afb      	subs	r3, r7, r3
 800f6d8:	931a      	str	r3, [sp, #104]	; 0x68
 800f6da:	eb65 0302 	sbc.w	r3, r5, r2
 800f6de:	931b      	str	r3, [sp, #108]	; 0x6c
 800f6e0:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800f6e4:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800f6e8:	ee37 7a41 	vsub.f32	s14, s14, s2
 800f6ec:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800f6f0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f6f2:	ee66 6a82 	vmul.f32	s13, s13, s4
 800f6f6:	ee27 7a22 	vmul.f32	s14, s14, s5
 800f6fa:	ee67 7a83 	vmul.f32	s15, s15, s6
 800f6fe:	ee35 5a63 	vsub.f32	s10, s10, s7
 800f702:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800f706:	ee36 6a64 	vsub.f32	s12, s12, s9
 800f70a:	2800      	cmp	r0, #0
 800f70c:	edc3 6a03 	vstr	s13, [r3, #12]
 800f710:	ed83 7a04 	vstr	s14, [r3, #16]
 800f714:	edc3 7a05 	vstr	s15, [r3, #20]
 800f718:	ed83 5a06 	vstr	s10, [r3, #24]
 800f71c:	edc3 5a07 	vstr	s11, [r3, #28]
 800f720:	ed83 6a08 	vstr	s12, [r3, #32]
 800f724:	f171 0300 	sbcs.w	r3, r1, #0
 800f728:	f2c0 86c1 	blt.w	80104ae <MotionDI_update+0xe86>
 800f72c:	f7f1 fb20 	bl	8000d70 <__aeabi_l2f>
 800f730:	eddf 7a94 	vldr	s15, [pc, #592]	; 800f984 <MotionDI_update+0x35c>
 800f734:	ee07 0a10 	vmov	s14, r0
 800f738:	ee27 9a27 	vmul.f32	s18, s14, s15
 800f73c:	ab5b      	add	r3, sp, #364	; 0x16c
 800f73e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f742:	4e91      	ldr	r6, [pc, #580]	; (800f988 <MotionDI_update+0x360>)
 800f744:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f746:	f8c8 7000 	str.w	r7, [r8]
 800f74a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800f74e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f752:	f1a6 070c 	sub.w	r7, r6, #12
 800f756:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800f75a:	aa5e      	add	r2, sp, #376	; 0x178
 800f75c:	ca07      	ldmia	r2, {r0, r1, r2}
 800f75e:	3718      	adds	r7, #24
 800f760:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800f764:	aa5b      	add	r2, sp, #364	; 0x16c
 800f766:	ca07      	ldmia	r2, {r0, r1, r2}
 800f768:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 800f76c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800f770:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f774:	f506 73fa 	add.w	r3, r6, #500	; 0x1f4
 800f778:	f8c8 5004 	str.w	r5, [r8, #4]
 800f77c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f780:	ab5e      	add	r3, sp, #376	; 0x178
 800f782:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f786:	f8d4 36d8 	ldr.w	r3, [r4, #1752]	; 0x6d8
 800f78a:	f506 7503 	add.w	r5, r6, #524	; 0x20c
 800f78e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800f792:	b183      	cbz	r3, 800f7b6 <MotionDI_update+0x18e>
 800f794:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 800f798:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
 800f79c:	431a      	orrs	r2, r3
 800f79e:	07d5      	lsls	r5, r2, #31
 800f7a0:	f141 80ea 	bpl.w	8010978 <MotionDI_update+0x1350>
 800f7a4:	4979      	ldr	r1, [pc, #484]	; (800f98c <MotionDI_update+0x364>)
 800f7a6:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
 800f7aa:	2a00      	cmp	r2, #0
 800f7ac:	f341 8231 	ble.w	8010c12 <MotionDI_update+0x15ea>
 800f7b0:	3a01      	subs	r2, #1
 800f7b2:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
 800f7b6:	f8d4 3650 	ldr.w	r3, [r4, #1616]	; 0x650
 800f7ba:	931d      	str	r3, [sp, #116]	; 0x74
 800f7bc:	f8d4 36cc 	ldr.w	r3, [r4, #1740]	; 0x6cc
 800f7c0:	931e      	str	r3, [sp, #120]	; 0x78
 800f7c2:	b133      	cbz	r3, 800f7d2 <MotionDI_update+0x1aa>
 800f7c4:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 800f7c8:	f003 0301 	and.w	r3, r3, #1
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f041 80f3 	bne.w	80109b8 <MotionDI_update+0x1390>
 800f7d2:	ab84      	add	r3, sp, #528	; 0x210
 800f7d4:	931a      	str	r3, [sp, #104]	; 0x68
 800f7d6:	ab90      	add	r3, sp, #576	; 0x240
 800f7d8:	9317      	str	r3, [sp, #92]	; 0x5c
 800f7da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f7dc:	b123      	cbz	r3, 800f7e8 <MotionDI_update+0x1c0>
 800f7de:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 800f7e2:	07d8      	lsls	r0, r3, #31
 800f7e4:	f101 836e 	bmi.w	8010ec4 <MotionDI_update+0x189c>
 800f7e8:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 800f9a4 <MotionDI_update+0x37c>
 800f7ec:	4f68      	ldr	r7, [pc, #416]	; (800f990 <MotionDI_update+0x368>)
 800f7ee:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800f7f2:	f5a7 7800 	sub.w	r8, r7, #512	; 0x200
 800f7f6:	ad93      	add	r5, sp, #588	; 0x24c
 800f7f8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800f7fc:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800f800:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800f802:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 800f806:	f508 73fa 	add.w	r3, r8, #500	; 0x1f4
 800f80a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f80e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f810:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f814:	f508 721f 	add.w	r2, r8, #636	; 0x27c
 800f818:	ca07      	ldmia	r2, {r0, r1, r2}
 800f81a:	ad97      	add	r5, sp, #604	; 0x25c
 800f81c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800f820:	f508 7222 	add.w	r2, r8, #648	; 0x288
 800f824:	ca07      	ldmia	r2, {r0, r1, r2}
 800f826:	f1a8 030c 	sub.w	r3, r8, #12
 800f82a:	ad9a      	add	r5, sp, #616	; 0x268
 800f82c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800f830:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f834:	f108 077c 	add.w	r7, r8, #124	; 0x7c
 800f838:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 800f83c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800f840:	af88      	add	r7, sp, #544	; 0x220
 800f842:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800f846:	f103 0294 	add.w	r2, r3, #148	; 0x94
 800f84a:	ca07      	ldmia	r2, {r0, r1, r2}
 800f84c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800f84e:	f50d 7e0b 	add.w	lr, sp, #556	; 0x22c
 800f852:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 800f856:	4661      	mov	r1, ip
 800f858:	4618      	mov	r0, r3
 800f85a:	462a      	mov	r2, r5
 800f85c:	f7f9 fe50 	bl	8009500 <quatErr2EulerErr>
 800f860:	f508 70fa 	add.w	r0, r8, #500	; 0x1f4
 800f864:	682b      	ldr	r3, [r5, #0]
 800f866:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
 800f86a:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 800f86e:	462a      	mov	r2, r5
 800f870:	f7f9 fe46 	bl	8009500 <quatErr2EulerErr>
 800f874:	682a      	ldr	r2, [r5, #0]
 800f876:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
 800f87a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800f87c:	f8cb 2074 	str.w	r2, [fp, #116]	; 0x74
 800f880:	a893      	add	r0, sp, #588	; 0x24c
 800f882:	aa97      	add	r2, sp, #604	; 0x25c
 800f884:	f7fa fee0 	bl	800a648 <iNemo_quat2heading>
 800f888:	463a      	mov	r2, r7
 800f88a:	981a      	ldr	r0, [sp, #104]	; 0x68
 800f88c:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 800f890:	ed8b 0a1c 	vstr	s0, [fp, #112]	; 0x70
 800f894:	4659      	mov	r1, fp
 800f896:	f7fa fed7 	bl	800a648 <iNemo_quat2heading>
 800f89a:	ab5b      	add	r3, sp, #364	; 0x16c
 800f89c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f8a0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f8a2:	ed8b 0a0d 	vstr	s0, [fp, #52]	; 0x34
 800f8a6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800f8aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f8ae:	f5a8 7782 	sub.w	r7, r8, #260	; 0x104
 800f8b2:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800f8b6:	aa5e      	add	r2, sp, #376	; 0x178
 800f8b8:	ca07      	ldmia	r2, {r0, r1, r2}
 800f8ba:	3718      	adds	r7, #24
 800f8bc:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800f8c0:	aa5b      	add	r2, sp, #364	; 0x16c
 800f8c2:	ca07      	ldmia	r2, {r0, r1, r2}
 800f8c4:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 800f8c8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800f8cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f8d0:	f1a7 030c 	sub.w	r3, r7, #12
 800f8d4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f8d8:	ab5e      	add	r3, sp, #376	; 0x178
 800f8da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f8de:	f107 030c 	add.w	r3, r7, #12
 800f8e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f8e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	f040 872b 	bne.w	8010744 <MotionDI_update+0x111c>
 800f8ee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	f040 85e0 	bne.w	80104b6 <MotionDI_update+0xe8e>
 800f8f6:	4b26      	ldr	r3, [pc, #152]	; (800f990 <MotionDI_update+0x368>)
 800f8f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f8fa:	ac93      	add	r4, sp, #588	; 0x24c
 800f8fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f900:	4b24      	ldr	r3, [pc, #144]	; (800f994 <MotionDI_update+0x36c>)
 800f902:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f906:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f908:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f90c:	4a22      	ldr	r2, [pc, #136]	; (800f998 <MotionDI_update+0x370>)
 800f90e:	ca07      	ldmia	r2, {r0, r1, r2}
 800f910:	ac97      	add	r4, sp, #604	; 0x25c
 800f912:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f916:	4a21      	ldr	r2, [pc, #132]	; (800f99c <MotionDI_update+0x374>)
 800f918:	ca07      	ldmia	r2, {r0, r1, r2}
 800f91a:	ac9a      	add	r4, sp, #616	; 0x268
 800f91c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f920:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f922:	ab97      	add	r3, sp, #604	; 0x25c
 800f924:	f8c9 0000 	str.w	r0, [r9]
 800f928:	f8c9 1004 	str.w	r1, [r9, #4]
 800f92c:	f8c9 2008 	str.w	r2, [r9, #8]
 800f930:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f932:	4623      	mov	r3, r4
 800f934:	f8c9 001c 	str.w	r0, [r9, #28]
 800f938:	f8c9 1020 	str.w	r1, [r9, #32]
 800f93c:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
 800f940:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f942:	f8db 6048 	ldr.w	r6, [fp, #72]	; 0x48
 800f946:	f8db 504c 	ldr.w	r5, [fp, #76]	; 0x4c
 800f94a:	f8db 4050 	ldr.w	r4, [fp, #80]	; 0x50
 800f94e:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
 800f952:	f8c9 600c 	str.w	r6, [r9, #12]
 800f956:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
 800f95a:	f8c9 102c 	str.w	r1, [r9, #44]	; 0x2c
 800f95e:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 800f962:	f8c9 5010 	str.w	r5, [r9, #16]
 800f966:	f8c9 4014 	str.w	r4, [r9, #20]
 800f96a:	f8c9 3018 	str.w	r3, [r9, #24]
 800f96e:	f20d 4da4 	addw	sp, sp, #1188	; 0x4a4
 800f972:	ecbd 8b10 	vpop	{d8-d15}
 800f976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f97a:	bf00      	nop
 800f97c:	20001698 	.word	0x20001698
 800f980:	20001d20 	.word	0x20001d20
 800f984:	358637bd 	.word	0x358637bd
 800f988:	200018f4 	.word	0x200018f4
 800f98c:	200010f8 	.word	0x200010f8
 800f990:	20001bec 	.word	0x20001bec
 800f994:	20001be0 	.word	0x20001be0
 800f998:	20001c68 	.word	0x20001c68
 800f99c:	20001c74 	.word	0x20001c74
 800f9a0:	20001d58 	.word	0x20001d58
 800f9a4:	20001ad0 	.word	0x20001ad0
 800f9a8:	447a0000 	.word	0x447a0000
 800f9ac:	f894 3684 	ldrb.w	r3, [r4, #1668]	; 0x684
 800f9b0:	2b03      	cmp	r3, #3
 800f9b2:	f43f ae57 	beq.w	800f664 <MotionDI_update+0x3c>
 800f9b6:	ed95 7a02 	vldr	s14, [r5, #8]
 800f9ba:	ed5f 6a05 	vldr	s13, [pc, #-20]	; 800f9a8 <MotionDI_update+0x380>
 800f9be:	f894 064c 	ldrb.w	r0, [r4, #1612]	; 0x64c
 800f9c2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800f9c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ca:	bfb4      	ite	lt
 800f9cc:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 800f9d0:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 800f9d4:	eee7 7a26 	vfma.f32	s15, s14, s13
 800f9d8:	af36      	add	r7, sp, #216	; 0xd8
 800f9da:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 800f9a8 <MotionDI_update+0x380>
 800f9de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f9e2:	ee17 3a90 	vmov	r3, s15
 800f9e6:	edd5 7a03 	vldr	s15, [r5, #12]
 800f9ea:	603b      	str	r3, [r7, #0]
 800f9ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f9f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9f4:	bfb4      	ite	lt
 800f9f6:	eebe 7a00 	vmovlt.f32	s14, #224	; 0xbf000000 -0.5
 800f9fa:	eeb6 7a00 	vmovge.f32	s14, #96	; 0x3f000000  0.5
 800f9fe:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800fa02:	ed5f 6a17 	vldr	s13, [pc, #-92]	; 800f9a8 <MotionDI_update+0x380>
 800fa06:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800fa0a:	ed95 7a04 	vldr	s14, [r5, #16]
 800fa0e:	edc7 7a01 	vstr	s15, [r7, #4]
 800fa12:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800fa16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa1a:	ee17 1a90 	vmov	r1, s15
 800fa1e:	bfac      	ite	ge
 800fa20:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 800fa24:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 800fa28:	eee7 7a26 	vfma.f32	s15, s14, s13
 800fa2c:	2809      	cmp	r0, #9
 800fa2e:	bf9c      	itt	ls
 800fa30:	3001      	addls	r0, #1
 800fa32:	f884 064c 	strbls.w	r0, [r4, #1612]	; 0x64c
 800fa36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa3a:	48de      	ldr	r0, [pc, #888]	; (800fdb4 <MotionDI_update+0x78c>)
 800fa3c:	edc7 7a02 	vstr	s15, [r7, #8]
 800fa40:	ee17 2a90 	vmov	r2, s15
 800fa44:	f647 77fe 	movw	r7, #32766	; 0x7ffe
 800fa48:	42bb      	cmp	r3, r7
 800fa4a:	bfa8      	it	ge
 800fa4c:	463b      	movge	r3, r7
 800fa4e:	42ba      	cmp	r2, r7
 800fa50:	bfa8      	it	ge
 800fa52:	463a      	movge	r2, r7
 800fa54:	4283      	cmp	r3, r0
 800fa56:	bfb8      	it	lt
 800fa58:	4603      	movlt	r3, r0
 800fa5a:	4281      	cmp	r1, r0
 800fa5c:	f2c0 8794 	blt.w	8010988 <MotionDI_update+0x1360>
 800fa60:	428f      	cmp	r7, r1
 800fa62:	bfa8      	it	ge
 800fa64:	460f      	movge	r7, r1
 800fa66:	fa0f fe87 	sxth.w	lr, r7
 800fa6a:	4ed3      	ldr	r6, [pc, #844]	; (800fdb8 <MotionDI_update+0x790>)
 800fa6c:	48d1      	ldr	r0, [pc, #836]	; (800fdb4 <MotionDI_update+0x78c>)
 800fa6e:	f8b6 11c8 	ldrh.w	r1, [r6, #456]	; 0x1c8
 800fa72:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800fa74:	f8c6 71c4 	str.w	r7, [r6, #452]	; 0x1c4
 800fa78:	4282      	cmp	r2, r0
 800fa7a:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 800fa7e:	eb06 0c4c 	add.w	ip, r6, ip, lsl #1
 800fa82:	bfb8      	it	lt
 800fa84:	4602      	movlt	r2, r0
 800fa86:	3101      	adds	r1, #1
 800fa88:	f8b6 01ca 	ldrh.w	r0, [r6, #458]	; 0x1ca
 800fa8c:	f8ac e1ce 	strh.w	lr, [ip, #462]	; 0x1ce
 800fa90:	b289      	uxth	r1, r1
 800fa92:	b21b      	sxth	r3, r3
 800fa94:	4281      	cmp	r1, r0
 800fa96:	f8ac 31cc 	strh.w	r3, [ip, #460]	; 0x1cc
 800fa9a:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 800fa9e:	7833      	ldrb	r3, [r6, #0]
 800faa0:	f8a6 11c8 	strh.w	r1, [r6, #456]	; 0x1c8
 800faa4:	b212      	sxth	r2, r2
 800faa6:	bf88      	it	hi
 800faa8:	2100      	movhi	r1, #0
 800faaa:	f8ac 21d0 	strh.w	r2, [ip, #464]	; 0x1d0
 800faae:	f8ad 20ec 	strh.w	r2, [sp, #236]	; 0xec
 800fab2:	9739      	str	r7, [sp, #228]	; 0xe4
 800fab4:	f8ad e0ea 	strh.w	lr, [sp, #234]	; 0xea
 800fab8:	9720      	str	r7, [sp, #128]	; 0x80
 800faba:	bf88      	it	hi
 800fabc:	f8a6 11c8 	strhhi.w	r1, [r6, #456]	; 0x1c8
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	f001 81bb 	beq.w	8010e3c <MotionDI_update+0x1814>
 800fac6:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 800faca:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 800face:	4313      	orrs	r3, r2
 800fad0:	f001 8343 	beq.w	801115a <MotionDI_update+0x1b32>
 800fad4:	e9dd 7317 	ldrd	r7, r3, [sp, #92]	; 0x5c
 800fad8:	ebb7 0a03 	subs.w	sl, r7, r3
 800fadc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800fade:	f04f 0200 	mov.w	r2, #0
 800fae2:	eb62 0b03 	sbc.w	fp, r2, r3
 800fae6:	f1bb 0f00 	cmp.w	fp, #0
 800faea:	bf08      	it	eq
 800faec:	f5ba 7f7a 	cmpeq.w	sl, #1000	; 0x3e8
 800faf0:	f0c1 81a1 	bcc.w	8010e36 <MotionDI_update+0x180e>
 800faf4:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 800faf8:	fb03 f301 	mul.w	r3, r3, r1
 800fafc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800fb00:	bf34      	ite	cc
 800fb02:	2300      	movcc	r3, #0
 800fb04:	2301      	movcs	r3, #1
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	f001 8195 	beq.w	8010e36 <MotionDI_update+0x180e>
 800fb0c:	f50d 7b01 	add.w	fp, sp, #516	; 0x204
 800fb10:	49aa      	ldr	r1, [pc, #680]	; (800fdbc <MotionDI_update+0x794>)
 800fb12:	4658      	mov	r0, fp
 800fb14:	f44f 7227 	mov.w	r2, #668	; 0x29c
 800fb18:	f003 f9c2 	bl	8012ea0 <memcpy>
 800fb1c:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 800fb20:	9322      	str	r3, [sp, #136]	; 0x88
 800fb22:	2b02      	cmp	r3, #2
 800fb24:	f241 8613 	bls.w	801174e <MotionDI_update+0x2126>
 800fb28:	f8b6 2050 	ldrh.w	r2, [r6, #80]	; 0x50
 800fb2c:	9221      	str	r2, [sp, #132]	; 0x84
 800fb2e:	2a00      	cmp	r2, #0
 800fb30:	f001 845a 	beq.w	80113e8 <MotionDI_update+0x1dc0>
 800fb34:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 800fb38:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800fb3c:	eddf 7aa0 	vldr	s15, [pc, #640]	; 800fdc0 <MotionDI_update+0x798>
 800fb40:	ee28 8a27 	vmul.f32	s16, s16, s15
 800fb44:	eeb0 0a48 	vmov.f32	s0, s16
 800fb48:	f003 fa86 	bl	8013058 <roundf>
 800fb4c:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800fb4e:	9325      	str	r3, [sp, #148]	; 0x94
 800fb50:	eefc 8ac0 	vcvt.u32.f32	s17, s0
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	f002 8127 	beq.w	8011da8 <MotionDI_update+0x2780>
 800fb5a:	ee18 1a90 	vmov	r1, s17
 800fb5e:	4a99      	ldr	r2, [pc, #612]	; (800fdc4 <MotionDI_update+0x79c>)
 800fb60:	1acb      	subs	r3, r1, r3
 800fb62:	4293      	cmp	r3, r2
 800fb64:	f242 8247 	bls.w	8011ff6 <MotionDI_update+0x29ce>
 800fb68:	2300      	movs	r3, #0
 800fb6a:	7533      	strb	r3, [r6, #20]
 800fb6c:	4a96      	ldr	r2, [pc, #600]	; (800fdc8 <MotionDI_update+0x7a0>)
 800fb6e:	f896 346c 	ldrb.w	r3, [r6, #1132]	; 0x46c
 800fb72:	edd2 7a00 	vldr	s15, [r2]
 800fb76:	9318      	str	r3, [sp, #96]	; 0x60
 800fb78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fb7c:	2b01      	cmp	r3, #1
 800fb7e:	ee87 ca27 	vdiv.f32	s24, s14, s15
 800fb82:	f002 81d0 	beq.w	8011f26 <MotionDI_update+0x28fe>
 800fb86:	ee6c ba0c 	vmul.f32	s23, s24, s24
 800fb8a:	ed9f 2a90 	vldr	s4, [pc, #576]	; 800fdcc <MotionDI_update+0x7a4>
 800fb8e:	ee2b 2a82 	vmul.f32	s4, s23, s4
 800fb92:	f9bb 700a 	ldrsh.w	r7, [fp, #10]
 800fb96:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800fb98:	f9bb 3008 	ldrsh.w	r3, [fp, #8]
 800fb9c:	f9bb 800c 	ldrsh.w	r8, [fp, #12]
 800fba0:	eddf ca8b 	vldr	s25, [pc, #556]	; 800fdd0 <MotionDI_update+0x7a8>
 800fba4:	eddf 3a8b 	vldr	s7, [pc, #556]	; 800fdd4 <MotionDI_update+0x7ac>
 800fba8:	eddf 1a8b 	vldr	s3, [pc, #556]	; 800fdd8 <MotionDI_update+0x7b0>
 800fbac:	ed9f 3a8b 	vldr	s6, [pc, #556]	; 800fddc <MotionDI_update+0x7b4>
 800fbb0:	f8cd b0a4 	str.w	fp, [sp, #164]	; 0xa4
 800fbb4:	ee07 7a90 	vmov	s15, r7
 800fbb8:	ee0f 3a90 	vmov	s31, r3
 800fbbc:	eeb8 eae7 	vcvt.f32.s32	s28, s15
 800fbc0:	0853      	lsrs	r3, r2, #1
 800fbc2:	ee07 8a90 	vmov	s15, r8
 800fbc6:	4293      	cmp	r3, r2
 800fbc8:	eef8 daef 	vcvt.f32.s32	s27, s31
 800fbcc:	eeb8 fae7 	vcvt.f32.s32	s30, s15
 800fbd0:	931c      	str	r3, [sp, #112]	; 0x70
 800fbd2:	bf28      	it	cs
 800fbd4:	4613      	movcs	r3, r2
 800fbd6:	469a      	mov	sl, r3
 800fbd8:	ee6c ca2c 	vmul.f32	s25, s24, s25
 800fbdc:	ee13 3a90 	vmov	r3, s7
 800fbe0:	eeb0 5a6d 	vmov.f32	s10, s27
 800fbe4:	eef0 4a6d 	vmov.f32	s9, s27
 800fbe8:	eeb0 4a4e 	vmov.f32	s8, s28
 800fbec:	eeb0 0a4e 	vmov.f32	s0, s28
 800fbf0:	eeb0 1a4f 	vmov.f32	s2, s30
 800fbf4:	eef0 0a4f 	vmov.f32	s1, s30
 800fbf8:	eef0 2a61 	vmov.f32	s5, s3
 800fbfc:	46de      	mov	lr, fp
 800fbfe:	f9be 100a 	ldrsh.w	r1, [lr, #10]
 800fc02:	f9be 0008 	ldrsh.w	r0, [lr, #8]
 800fc06:	f9be 200c 	ldrsh.w	r2, [lr, #12]
 800fc0a:	fb01 fc01 	mul.w	ip, r1, r1
 800fc0e:	fb00 cc00 	mla	ip, r0, r0, ip
 800fc12:	fb02 cc02 	mla	ip, r2, r2, ip
 800fc16:	ee07 ca90 	vmov	s15, ip
 800fc1a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800fc1e:	eeb8 9a63 	vcvt.f32.u32	s18, s7
 800fc22:	eef1 5ac6 	vsqrt.f32	s11, s12
 800fc26:	3301      	adds	r3, #1
 800fc28:	b29b      	uxth	r3, r3
 800fc2a:	f10e 0e06 	add.w	lr, lr, #6
 800fc2e:	ee07 0a90 	vmov	s15, r0
 800fc32:	eef8 9a43 	vcvt.f32.u32	s19, s6
 800fc36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800fc3a:	eeb4 9ae5 	vcmpe.f32	s18, s11
 800fc3e:	ee07 1a90 	vmov	s15, r1
 800fc42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc46:	eef4 9ae5 	vcmpe.f32	s19, s11
 800fc4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fc4e:	bf48      	it	mi
 800fc50:	eefc 3ae5 	vcvtmi.u32.f32	s7, s11
 800fc54:	ee07 2a90 	vmov	s15, r2
 800fc58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc5c:	eeb4 5ae6 	vcmpe.f32	s10, s13
 800fc60:	bfc8      	it	gt
 800fc62:	eebc 3ae5 	vcvtgt.u32.f32	s6, s11
 800fc66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc6a:	eef4 4ae6 	vcmpe.f32	s9, s13
 800fc6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc72:	bfb8      	it	lt
 800fc74:	eeb0 5a66 	vmovlt.f32	s10, s13
 800fc78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc7c:	eeb4 4ac7 	vcmpe.f32	s8, s14
 800fc80:	bf88      	it	hi
 800fc82:	eef0 4a66 	vmovhi.f32	s9, s13
 800fc86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc8a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800fc8e:	bfb8      	it	lt
 800fc90:	eeb0 4a47 	vmovlt.f32	s8, s14
 800fc94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc98:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800fc9c:	bf88      	it	hi
 800fc9e:	eeb0 0a47 	vmovhi.f32	s0, s14
 800fca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fca6:	eef4 0ae7 	vcmpe.f32	s1, s15
 800fcaa:	bfb8      	it	lt
 800fcac:	eeb0 1a67 	vmovlt.f32	s2, s15
 800fcb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcb4:	bf88      	it	hi
 800fcb6:	eef0 0a67 	vmovhi.f32	s1, s15
 800fcba:	4553      	cmp	r3, sl
 800fcbc:	ee72 2aa5 	vadd.f32	s5, s5, s11
 800fcc0:	ee71 1a86 	vadd.f32	s3, s3, s12
 800fcc4:	d39b      	bcc.n	800fbfe <MotionDI_update+0x5d6>
 800fcc6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800fcc8:	4293      	cmp	r3, r2
 800fcca:	f082 81c2 	bcs.w	8012052 <MotionDI_update+0x2a2a>
 800fcce:	3a01      	subs	r2, #1
 800fcd0:	1ad2      	subs	r2, r2, r3
 800fcd2:	fa13 fe82 	uxtah	lr, r3, r2
 800fcd6:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
 800fcda:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fcde:	f10b 0e06 	add.w	lr, fp, #6
 800fce2:	eddf 9a3d 	vldr	s19, [pc, #244]	; 800fdd8 <MotionDI_update+0x7b0>
 800fce6:	eb0b 0c43 	add.w	ip, fp, r3, lsl #1
 800fcea:	eb0e 0e42 	add.w	lr, lr, r2, lsl #1
 800fcee:	f9bc 200a 	ldrsh.w	r2, [ip, #10]
 800fcf2:	f9bc 1008 	ldrsh.w	r1, [ip, #8]
 800fcf6:	f9bc 300c 	ldrsh.w	r3, [ip, #12]
 800fcfa:	fb02 f002 	mul.w	r0, r2, r2
 800fcfe:	fb01 0001 	mla	r0, r1, r1, r0
 800fd02:	fb03 0003 	mla	r0, r3, r3, r0
 800fd06:	ee07 0a90 	vmov	s15, r0
 800fd0a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800fd0e:	eeb8 9a63 	vcvt.f32.u32	s18, s7
 800fd12:	eef1 5ac6 	vsqrt.f32	s11, s12
 800fd16:	f10c 0c06 	add.w	ip, ip, #6
 800fd1a:	ee07 1a90 	vmov	s15, r1
 800fd1e:	eeb8 aa43 	vcvt.f32.u32	s20, s6
 800fd22:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800fd26:	eef4 5ac9 	vcmpe.f32	s11, s18
 800fd2a:	ee07 2a90 	vmov	s15, r2
 800fd2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd32:	eef4 5aca 	vcmpe.f32	s11, s20
 800fd36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fd3a:	bfc8      	it	gt
 800fd3c:	eefc 3ae5 	vcvtgt.u32.f32	s7, s11
 800fd40:	ee07 3a90 	vmov	s15, r3
 800fd44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd48:	eeb4 5ae6 	vcmpe.f32	s10, s13
 800fd4c:	bf48      	it	mi
 800fd4e:	eebc 3ae5 	vcvtmi.u32.f32	s6, s11
 800fd52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd56:	eef4 4ae6 	vcmpe.f32	s9, s13
 800fd5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd5e:	bfb8      	it	lt
 800fd60:	eeb0 5a66 	vmovlt.f32	s10, s13
 800fd64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd68:	eeb4 4ac7 	vcmpe.f32	s8, s14
 800fd6c:	bf88      	it	hi
 800fd6e:	eef0 4a66 	vmovhi.f32	s9, s13
 800fd72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd76:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800fd7a:	bfb8      	it	lt
 800fd7c:	eeb0 4a47 	vmovlt.f32	s8, s14
 800fd80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd84:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800fd88:	bf88      	it	hi
 800fd8a:	eeb0 0a47 	vmovhi.f32	s0, s14
 800fd8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd92:	eef4 0ae7 	vcmpe.f32	s1, s15
 800fd96:	bfb8      	it	lt
 800fd98:	eeb0 1a67 	vmovlt.f32	s2, s15
 800fd9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda0:	bf88      	it	hi
 800fda2:	eef0 0a67 	vmovhi.f32	s1, s15
 800fda6:	45e6      	cmp	lr, ip
 800fda8:	ee79 9aa5 	vadd.f32	s19, s19, s11
 800fdac:	ee71 1a86 	vadd.f32	s3, s3, s12
 800fdb0:	d19d      	bne.n	800fcee <MotionDI_update+0x6c6>
 800fdb2:	e015      	b.n	800fde0 <MotionDI_update+0x7b8>
 800fdb4:	ffff8002 	.word	0xffff8002
 800fdb8:	20002130 	.word	0x20002130
 800fdbc:	200022f4 	.word	0x200022f4
 800fdc0:	3a83126f 	.word	0x3a83126f
 800fdc4:	00278d00 	.word	0x00278d00
 800fdc8:	20002590 	.word	0x20002590
 800fdcc:	3ca3d70a 	.word	0x3ca3d70a
 800fdd0:	3dcccccd 	.word	0x3dcccccd
	...
 800fddc:	fffffffe 	.word	0xfffffffe
 800fde0:	ee75 7a64 	vsub.f32	s15, s10, s9
 800fde4:	eef4 cae7 	vcmpe.f32	s25, s15
 800fde8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdec:	f101 87fa 	bmi.w	8011de4 <MotionDI_update+0x27bc>
 800fdf0:	ee74 7a40 	vsub.f32	s15, s8, s0
 800fdf4:	eef4 cae7 	vcmpe.f32	s25, s15
 800fdf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdfc:	f101 87f2 	bmi.w	8011de4 <MotionDI_update+0x27bc>
 800fe00:	ee71 7a60 	vsub.f32	s15, s2, s1
 800fe04:	eef4 cae7 	vcmpe.f32	s25, s15
 800fe08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe0c:	f101 87ea 	bmi.w	8011de4 <MotionDI_update+0x27bc>
 800fe10:	2301      	movs	r3, #1
 800fe12:	9328      	str	r3, [sp, #160]	; 0xa0
 800fe14:	9922      	ldr	r1, [sp, #136]	; 0x88
 800fe16:	ee07 1a90 	vmov	s15, r1
 800fe1a:	ee39 7aa2 	vadd.f32	s14, s19, s5
 800fe1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe22:	1e4b      	subs	r3, r1, #1
 800fe24:	ee87 da27 	vdiv.f32	s26, s14, s15
 800fe28:	9323      	str	r3, [sp, #140]	; 0x8c
 800fe2a:	ee07 3a10 	vmov	s14, r3
 800fe2e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800fe32:	ee2d 7a0d 	vmul.f32	s14, s26, s26
 800fe36:	eee7 1ac7 	vfms.f32	s3, s15, s14
 800fe3a:	ee81 7aa6 	vdiv.f32	s14, s3, s13
 800fe3e:	eeb4 7ac2 	vcmpe.f32	s14, s4
 800fe42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe46:	f301 8482 	bgt.w	801174e <MotionDI_update+0x2126>
 800fe4a:	4b53      	ldr	r3, [pc, #332]	; (800ff98 <MotionDI_update+0x970>)
 800fe4c:	ee13 2a10 	vmov	r2, s6
 800fe50:	ed93 7a00 	vldr	s14, [r3]
 800fe54:	ee13 3a90 	vmov	r3, s7
 800fe58:	1a9b      	subs	r3, r3, r2
 800fe5a:	ee07 3a90 	vmov	s15, r3
 800fe5e:	ee2c 7a07 	vmul.f32	s14, s24, s14
 800fe62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fe6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe6e:	f101 846e 	bmi.w	801174e <MotionDI_update+0x2126>
 800fe72:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fe74:	1aca      	subs	r2, r1, r3
 800fe76:	ee07 2a10 	vmov	s14, r2
 800fe7a:	ee07 3a90 	vmov	s15, r3
 800fe7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fe82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe86:	eec9 6a87 	vdiv.f32	s13, s19, s14
 800fe8a:	ee82 7aa7 	vdiv.f32	s14, s5, s15
 800fe8e:	ee77 7a66 	vsub.f32	s15, s14, s13
 800fe92:	eef0 7ae7 	vabs.f32	s15, s15
 800fe96:	eef4 cae7 	vcmpe.f32	s25, s15
 800fe9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe9e:	f101 8456 	bmi.w	801174e <MotionDI_update+0x2126>
 800fea2:	ee7d 7a4c 	vsub.f32	s15, s26, s24
 800fea6:	eef0 7ae7 	vabs.f32	s15, s15
 800feaa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800feae:	eeb4 cae7 	vcmpe.f32	s24, s15
 800feb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800feb6:	f101 844a 	bmi.w	801174e <MotionDI_update+0x2126>
 800feba:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 800febe:	eddf 7a37 	vldr	s15, [pc, #220]	; 800ff9c <MotionDI_update+0x974>
 800fec2:	ee07 3a10 	vmov	s14, r3
 800fec6:	eeb8 9a47 	vcvt.f32.u32	s18, s14
 800feca:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 800fece:	ee69 7a27 	vmul.f32	s15, s18, s15
 800fed2:	f50d 7a03 	add.w	sl, sp, #524	; 0x20c
 800fed6:	ee17 0a90 	vmov	r0, s15
 800feda:	f7f0 fad9 	bl	8000490 <__aeabi_f2d>
 800fede:	ec41 0b10 	vmov	d0, r0, r1
 800fee2:	f003 f985 	bl	80131f0 <exp>
 800fee6:	ec51 0b10 	vmov	r0, r1, d0
 800feea:	f7f0 fe21 	bl	8000b30 <__aeabi_d2f>
 800feee:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800ffa0 <MotionDI_update+0x978>
 800fef2:	9922      	ldr	r1, [sp, #136]	; 0x88
 800fef4:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
 800fef8:	eec7 7a09 	vdiv.f32	s15, s14, s18
 800fefc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800ff00:	0052      	lsls	r2, r2, #1
 800ff02:	1f93      	subs	r3, r2, #6
 800ff04:	4453      	add	r3, sl
 800ff06:	3a0c      	subs	r2, #12
 800ff08:	9318      	str	r3, [sp, #96]	; 0x60
 800ff0a:	eb0a 0302 	add.w	r3, sl, r2
 800ff0e:	931c      	str	r3, [sp, #112]	; 0x70
 800ff10:	b20b      	sxth	r3, r1
 800ff12:	9324      	str	r3, [sp, #144]	; 0x90
 800ff14:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800ff18:	971d      	str	r7, [sp, #116]	; 0x74
 800ff1a:	2303      	movs	r3, #3
 800ff1c:	ee09 0a90 	vmov	s19, r0
 800ff20:	ee0a 0a90 	vmov	s21, r0
 800ff24:	ee7a 6a69 	vsub.f32	s13, s20, s19
 800ff28:	ee39 7aca 	vsub.f32	s14, s19, s20
 800ff2c:	eed7 aaa6 	vfnms.f32	s21, s15, s13
 800ff30:	931f      	str	r3, [sp, #124]	; 0x7c
 800ff32:	46c4      	mov	ip, r8
 800ff34:	eea7 aa87 	vfma.f32	s20, s15, s14
 800ff38:	9527      	str	r5, [sp, #156]	; 0x9c
 800ff3a:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
 800ff3e:	eef0 ea6d 	vmov.f32	s29, s27
 800ff42:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 800ff46:	eef0 da4e 	vmov.f32	s27, s28
 800ff4a:	eeb0 9a4f 	vmov.f32	s18, s30
 800ff4e:	465a      	mov	r2, fp
 800ff50:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
 800ff54:	f9b2 000e 	ldrsh.w	r0, [r2, #14]
 800ff58:	f9b2 1012 	ldrsh.w	r1, [r2, #18]
 800ff5c:	ee1f 2a90 	vmov	r2, s31
 800ff60:	4402      	add	r2, r0
 800ff62:	ee00 2a10 	vmov	s0, r2
 800ff66:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800ff68:	441a      	add	r2, r3
 800ff6a:	4663      	mov	r3, ip
 800ff6c:	440b      	add	r3, r1
 800ff6e:	ee0f 2a10 	vmov	s30, r2
 800ff72:	ee0e 3a10 	vmov	s28, r3
 800ff76:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800ff7a:	eeb8 facf 	vcvt.f32.s32	s30, s30
 800ff7e:	eeb8 eace 	vcvt.f32.s32	s28, s28
 800ff82:	f04f 0800 	mov.w	r8, #0
 800ff86:	ee20 0a0b 	vmul.f32	s0, s0, s22
 800ff8a:	ee2f fa0b 	vmul.f32	s30, s30, s22
 800ff8e:	ee2e ea0b 	vmul.f32	s28, s28, s22
 800ff92:	4647      	mov	r7, r8
 800ff94:	e020      	b.n	800ffd8 <MotionDI_update+0x9b0>
 800ff96:	bf00      	nop
 800ff98:	20002598 	.word	0x20002598
 800ff9c:	bdd5e54c 	.word	0xbdd5e54c
 800ffa0:	41193238 	.word	0x41193238
 800ffa4:	f93a 0013 	ldrsh.w	r0, [sl, r3, lsl #1]
 800ffa8:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800ffac:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800ffb0:	ee07 0a90 	vmov	s15, r0
 800ffb4:	eeb0 0a6e 	vmov.f32	s0, s29
 800ffb8:	eef8 eae7 	vcvt.f32.s32	s29, s15
 800ffbc:	ee07 1a90 	vmov	s15, r1
 800ffc0:	eeb0 fa6d 	vmov.f32	s30, s27
 800ffc4:	eef8 dae7 	vcvt.f32.s32	s27, s15
 800ffc8:	ee07 3a90 	vmov	s15, r3
 800ffcc:	eeb0 ea49 	vmov.f32	s28, s18
 800ffd0:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 800ffd4:	ea4f 0748 	mov.w	r7, r8, lsl #1
 800ffd8:	4447      	add	r7, r8
 800ffda:	007d      	lsls	r5, r7, #1
 800ffdc:	3506      	adds	r5, #6
 800ffde:	ee6e eaaa 	vmul.f32	s29, s29, s21
 800ffe2:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 800ffe6:	eee9 ea80 	vfma.f32	s29, s19, s0
 800ffea:	4455      	add	r5, sl
 800ffec:	f108 0801 	add.w	r8, r8, #1
 800fff0:	ee07 3a90 	vmov	s15, r3
 800fff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fff8:	ee6d daaa 	vmul.f32	s27, s27, s21
 800fffc:	eeea ea27 	vfma.f32	s29, s20, s15
 8010000:	f003 f82a 	bl	8013058 <roundf>
 8010004:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8010008:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801000c:	ee07 3a90 	vmov	s15, r3
 8010010:	eee9 da8f 	vfma.f32	s27, s19, s30
 8010014:	fa0f f888 	sxth.w	r8, r8
 8010018:	ee17 3a10 	vmov	r3, s14
 801001c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010020:	f82a 3017 	strh.w	r3, [sl, r7, lsl #1]
 8010024:	eeb0 0a4f 	vmov.f32	s0, s30
 8010028:	eeea da27 	vfma.f32	s27, s20, s15
 801002c:	f003 f814 	bl	8013058 <roundf>
 8010030:	ee29 9a2a 	vmul.f32	s18, s18, s21
 8010034:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8010038:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801003c:	ee07 3a90 	vmov	s15, r3
 8010040:	eea9 9a8e 	vfma.f32	s18, s19, s28
 8010044:	eb0a 0747 	add.w	r7, sl, r7, lsl #1
 8010048:	ee17 3a10 	vmov	r3, s14
 801004c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010050:	807b      	strh	r3, [r7, #2]
 8010052:	eeb0 0a4e 	vmov.f32	s0, s28
 8010056:	eeaa 9a27 	vfma.f32	s18, s20, s15
 801005a:	f002 fffd 	bl	8013058 <roundf>
 801005e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010062:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8010066:	ee10 1a10 	vmov	r1, s0
 801006a:	45c1      	cmp	r9, r8
 801006c:	eb0a 0243 	add.w	r2, sl, r3, lsl #1
 8010070:	80b9      	strh	r1, [r7, #4]
 8010072:	dc97      	bgt.n	800ffa4 <MotionDI_update+0x97c>
 8010074:	eeb0 0a6e 	vmov.f32	s0, s29
 8010078:	f002 ffee 	bl	8013058 <roundf>
 801007c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010080:	eeb0 0a6d 	vmov.f32	s0, s27
 8010084:	ee17 3a90 	vmov	r3, s15
 8010088:	b21f      	sxth	r7, r3
 801008a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801008c:	801f      	strh	r7, [r3, #0]
 801008e:	f002 ffe3 	bl	8013058 <roundf>
 8010092:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8010096:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8010098:	ee17 1a90 	vmov	r1, s15
 801009c:	b20d      	sxth	r5, r1
 801009e:	eeb0 0a49 	vmov.f32	s0, s18
 80100a2:	8055      	strh	r5, [r2, #2]
 80100a4:	f002 ffd8 	bl	8013058 <roundf>
 80100a8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80100ac:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80100ae:	9818      	ldr	r0, [sp, #96]	; 0x60
 80100b0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80100b4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80100b8:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 80100bc:	ee10 ca10 	vmov	ip, s0
 80100c0:	fa0f f38c 	sxth.w	r3, ip
 80100c4:	8083      	strh	r3, [r0, #4]
 80100c6:	19c8      	adds	r0, r1, r7
 80100c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80100ca:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 80100ce:	442a      	add	r2, r5
 80100d0:	18cb      	adds	r3, r1, r3
 80100d2:	ee0e 0a10 	vmov	s28, r0
 80100d6:	ee0d 2a90 	vmov	s27, r2
 80100da:	ee09 3a10 	vmov	s18, r3
 80100de:	eeb8 eace 	vcvt.f32.s32	s28, s28
 80100e2:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 80100e6:	eef8 daed 	vcvt.f32.s32	s27, s27
 80100ea:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80100ee:	ee2e ea0b 	vmul.f32	s28, s28, s22
 80100f2:	ee6d da8b 	vmul.f32	s27, s27, s22
 80100f6:	eb08 0548 	add.w	r5, r8, r8, lsl #1
 80100fa:	006d      	lsls	r5, r5, #1
 80100fc:	f1a5 070c 	sub.w	r7, r5, #12
 8010100:	3d06      	subs	r5, #6
 8010102:	f93a 3007 	ldrsh.w	r3, [sl, r7]
 8010106:	ee07 3a90 	vmov	s15, r3
 801010a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801010e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010112:	ee07 3a10 	vmov	s14, r3
 8010116:	ee67 7a8a 	vmul.f32	s15, s15, s20
 801011a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801011e:	4457      	add	r7, sl
 8010120:	eeea 7a87 	vfma.f32	s15, s21, s14
 8010124:	eb0a 0b05 	add.w	fp, sl, r5
 8010128:	f108 38ff 	add.w	r8, r8, #4294967295
 801012c:	eeb0 0a4e 	vmov.f32	s0, s28
 8010130:	eee9 7a8e 	vfma.f32	s15, s19, s28
 8010134:	fa0f f888 	sxth.w	r8, r8
 8010138:	eeb0 ea67 	vmov.f32	s28, s15
 801013c:	f002 ff8c 	bl	8013058 <roundf>
 8010140:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010144:	ee07 3a90 	vmov	s15, r3
 8010148:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
 801014c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010150:	ee07 3a10 	vmov	s14, r3
 8010154:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8010158:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801015c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010160:	eeea 7a87 	vfma.f32	s15, s21, s14
 8010164:	ee10 3a10 	vmov	r3, s0
 8010168:	eee9 7aad 	vfma.f32	s15, s19, s27
 801016c:	f82a 3005 	strh.w	r3, [sl, r5]
 8010170:	eeb0 0a6d 	vmov.f32	s0, s27
 8010174:	eef0 da67 	vmov.f32	s27, s15
 8010178:	f002 ff6e 	bl	8013058 <roundf>
 801017c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8010180:	ee07 3a90 	vmov	s15, r3
 8010184:	f9bb 3004 	ldrsh.w	r3, [fp, #4]
 8010188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801018c:	ee06 3a90 	vmov	s13, r3
 8010190:	ee67 7a8a 	vmul.f32	s15, s15, s20
 8010194:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010198:	eeb0 7a40 	vmov.f32	s14, s0
 801019c:	eeea 7aa6 	vfma.f32	s15, s21, s13
 80101a0:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80101a4:	eee9 7a89 	vfma.f32	s15, s19, s18
 80101a8:	ee17 3a10 	vmov	r3, s14
 80101ac:	eeb0 0a49 	vmov.f32	s0, s18
 80101b0:	f8ab 3002 	strh.w	r3, [fp, #2]
 80101b4:	eeb0 9a67 	vmov.f32	s18, s15
 80101b8:	f002 ff4e 	bl	8013058 <roundf>
 80101bc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80101c0:	f1b8 0f01 	cmp.w	r8, #1
 80101c4:	ee10 3a10 	vmov	r3, s0
 80101c8:	f8ab 3004 	strh.w	r3, [fp, #4]
 80101cc:	dc93      	bgt.n	80100f6 <MotionDI_update+0xace>
 80101ce:	eeb0 0a4e 	vmov.f32	s0, s28
 80101d2:	f002 ff41 	bl	8013058 <roundf>
 80101d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80101da:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 80101dc:	ee17 3a90 	vmov	r3, s15
 80101e0:	b21f      	sxth	r7, r3
 80101e2:	eeb0 0a6d 	vmov.f32	s0, s27
 80101e6:	812f      	strh	r7, [r5, #8]
 80101e8:	f002 ff36 	bl	8013058 <roundf>
 80101ec:	eebd fac0 	vcvt.s32.f32	s30, s0
 80101f0:	eeb0 0a49 	vmov.f32	s0, s18
 80101f4:	ee1f 3a10 	vmov	r3, s30
 80101f8:	b21a      	sxth	r2, r3
 80101fa:	816a      	strh	r2, [r5, #10]
 80101fc:	921d      	str	r2, [sp, #116]	; 0x74
 80101fe:	f002 ff2b 	bl	8013058 <roundf>
 8010202:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8010204:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8010208:	3b01      	subs	r3, #1
 801020a:	b29b      	uxth	r3, r3
 801020c:	461a      	mov	r2, r3
 801020e:	931f      	str	r3, [sp, #124]	; 0x7c
 8010210:	ee10 3a10 	vmov	r3, s0
 8010214:	b21b      	sxth	r3, r3
 8010216:	ee0f 7a90 	vmov	s31, r7
 801021a:	469c      	mov	ip, r3
 801021c:	81ab      	strh	r3, [r5, #12]
 801021e:	2a00      	cmp	r2, #0
 8010220:	f001 82b5 	beq.w	801178e <MotionDI_update+0x2166>
 8010224:	eddd 7a1d 	vldr	s15, [sp, #116]	; 0x74
 8010228:	eef8 dae7 	vcvt.f32.s32	s27, s15
 801022c:	ee07 3a90 	vmov	s15, r3
 8010230:	eef8 eaef 	vcvt.f32.s32	s29, s31
 8010234:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8010238:	462a      	mov	r2, r5
 801023a:	e689      	b.n	800ff50 <MotionDI_update+0x928>
 801023c:	f894 36b8 	ldrb.w	r3, [r4, #1720]	; 0x6b8
 8010240:	2b03      	cmp	r3, #3
 8010242:	f43f aa21 	beq.w	800f688 <MotionDI_update+0x60>
 8010246:	462a      	mov	r2, r5
 8010248:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801024a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801024e:	f8cb 1000 	str.w	r1, [fp]
 8010252:	6851      	ldr	r1, [r2, #4]
 8010254:	6892      	ldr	r2, [r2, #8]
 8010256:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8010258:	edd4 2a23 	vldr	s5, [r4, #140]	; 0x8c
 801025c:	ed94 2a24 	vldr	s4, [r4, #144]	; 0x90
 8010260:	edc6 2a00 	vstr	s5, [r6]
 8010264:	ab82      	add	r3, sp, #520	; 0x208
 8010266:	c307      	stmia	r3!, {r0, r1, r2}
 8010268:	462e      	mov	r6, r5
 801026a:	edd4 1a25 	vldr	s3, [r4, #148]	; 0x94
 801026e:	f856 0f14 	ldr.w	r0, [r6, #20]!
 8010272:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 8010276:	6871      	ldr	r1, [r6, #4]
 8010278:	68b2      	ldr	r2, [r6, #8]
 801027a:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801027c:	ed86 2a01 	vstr	s4, [r6, #4]
 8010280:	ae85      	add	r6, sp, #532	; 0x214
 8010282:	c607      	stmia	r6!, {r0, r1, r2}
 8010284:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8010286:	edc6 1a02 	vstr	s3, [r6, #8]
 801028a:	b913      	cbnz	r3, 8010292 <MotionDI_update+0xc6a>
 801028c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801028e:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
 8010292:	eddb 6a01 	vldr	s13, [fp, #4]
 8010296:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
 801029a:	ed94 8a16 	vldr	s16, [r4, #88]	; 0x58
 801029e:	ed9b 7a02 	vldr	s14, [fp, #8]
 80102a2:	ed94 3a19 	vldr	s6, [r4, #100]	; 0x64
 80102a6:	eddb 7a03 	vldr	s15, [fp, #12]
 80102aa:	edd4 3a1a 	vldr	s7, [r4, #104]	; 0x68
 80102ae:	eddb 4a04 	vldr	s9, [fp, #16]
 80102b2:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
 80102b6:	ed9b 5a05 	vldr	s10, [fp, #20]
 80102ba:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 80102be:	eddb 5a06 	vldr	s11, [fp, #24]
 80102c2:	edd4 0a0c 	vldr	s1, [r4, #48]	; 0x30
 80102c6:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 80102ca:	ed94 9a15 	vldr	s18, [r4, #84]	; 0x54
 80102ce:	edd4 8a17 	vldr	s17, [r4, #92]	; 0x5c
 80102d2:	eea6 6aa6 	vfma.f32	s12, s13, s13
 80102d6:	3301      	adds	r3, #1
 80102d8:	3201      	adds	r2, #1
 80102da:	eea7 3a07 	vfma.f32	s6, s14, s14
 80102de:	b21b      	sxth	r3, r3
 80102e0:	b212      	sxth	r2, r2
 80102e2:	eeb0 4a46 	vmov.f32	s8, s12
 80102e6:	ed94 6a07 	vldr	s12, [r4, #28]
 80102ea:	8323      	strh	r3, [r4, #24]
 80102ec:	eee7 3aa7 	vfma.f32	s7, s15, s15
 80102f0:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 80102f4:	eea4 1aa4 	vfma.f32	s2, s9, s9
 80102f8:	eea5 0a05 	vfma.f32	s0, s10, s10
 80102fc:	eee5 0aa5 	vfma.f32	s1, s11, s11
 8010300:	ee37 7a08 	vadd.f32	s14, s14, s16
 8010304:	ee74 4a86 	vadd.f32	s9, s9, s12
 8010308:	ed94 8a08 	vldr	s16, [r4, #32]
 801030c:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8010310:	ed84 4a18 	vstr	s8, [r4, #96]	; 0x60
 8010314:	ee76 6a89 	vadd.f32	s13, s13, s18
 8010318:	ee77 7aa8 	vadd.f32	s15, s15, s17
 801031c:	ee35 5a08 	vadd.f32	s10, s10, s16
 8010320:	ee75 5a86 	vadd.f32	s11, s11, s12
 8010324:	edc4 6a15 	vstr	s13, [r4, #84]	; 0x54
 8010328:	ed84 3a19 	vstr	s6, [r4, #100]	; 0x64
 801032c:	ed84 7a16 	vstr	s14, [r4, #88]	; 0x58
 8010330:	edc4 3a1a 	vstr	s7, [r4, #104]	; 0x68
 8010334:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
 8010338:	ed84 1a0a 	vstr	s2, [r4, #40]	; 0x28
 801033c:	edc4 4a07 	vstr	s9, [r4, #28]
 8010340:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
 8010344:	ed84 5a08 	vstr	s10, [r4, #32]
 8010348:	edc4 5a09 	vstr	s11, [r4, #36]	; 0x24
 801034c:	edc4 0a0c 	vstr	s1, [r4, #48]	; 0x30
 8010350:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 8010354:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8010356:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 801035a:	4288      	cmp	r0, r1
 801035c:	f4ff a994 	bcc.w	800f688 <MotionDI_update+0x60>
 8010360:	2a00      	cmp	r2, #0
 8010362:	f341 81d1 	ble.w	8011708 <MotionDI_update+0x20e0>
 8010366:	ee06 2a10 	vmov	s12, r2
 801036a:	eeb8 8ac6 	vcvt.f32.s32	s16, s12
 801036e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8010372:	ee88 6a88 	vdiv.f32	s12, s17, s16
 8010376:	2b00      	cmp	r3, #0
 8010378:	edd4 9a1d 	vldr	s19, [r4, #116]	; 0x74
 801037c:	ee26 3a03 	vmul.f32	s6, s12, s6
 8010380:	ee63 3a86 	vmul.f32	s7, s7, s12
 8010384:	ee26 7a07 	vmul.f32	s14, s12, s14
 8010388:	ee67 7a86 	vmul.f32	s15, s15, s12
 801038c:	ee66 6a26 	vmul.f32	s13, s12, s13
 8010390:	ee33 9a83 	vadd.f32	s18, s7, s6
 8010394:	ee26 6a04 	vmul.f32	s12, s12, s8
 8010398:	ed94 4a1e 	vldr	s8, [r4, #120]	; 0x78
 801039c:	ed84 6a18 	vstr	s12, [r4, #96]	; 0x60
 80103a0:	eea7 9a47 	vfms.f32	s18, s14, s14
 80103a4:	ee77 9a69 	vsub.f32	s19, s14, s19
 80103a8:	ee37 4ac4 	vsub.f32	s8, s15, s8
 80103ac:	eef0 9ae9 	vabs.f32	s19, s19
 80103b0:	eeb0 4ac4 	vabs.f32	s8, s8
 80103b4:	ee34 4a29 	vadd.f32	s8, s8, s19
 80103b8:	edd4 9a1c 	vldr	s19, [r4, #112]	; 0x70
 80103bc:	edc4 6a15 	vstr	s13, [r4, #84]	; 0x54
 80103c0:	eea6 6ae6 	vfms.f32	s12, s13, s13
 80103c4:	eea7 9ae7 	vfms.f32	s18, s15, s15
 80103c8:	ee76 6ae9 	vsub.f32	s13, s13, s19
 80103cc:	ee36 6a09 	vadd.f32	s12, s12, s18
 80103d0:	eef0 6ae6 	vabs.f32	s13, s13
 80103d4:	ee74 6a26 	vadd.f32	s13, s8, s13
 80103d8:	ed84 7a16 	vstr	s14, [r4, #88]	; 0x58
 80103dc:	ed84 3a19 	vstr	s6, [r4, #100]	; 0x64
 80103e0:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
 80103e4:	edc4 3a1a 	vstr	s7, [r4, #104]	; 0x68
 80103e8:	f341 81c5 	ble.w	8011776 <MotionDI_update+0x214e>
 80103ec:	ee07 3a90 	vmov	s15, r3
 80103f0:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 80103f4:	ed94 4a0e 	vldr	s8, [r4, #56]	; 0x38
 80103f8:	ed94 3a0f 	vldr	s6, [r4, #60]	; 0x3c
 80103fc:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 8010400:	6921      	ldr	r1, [r4, #16]
 8010402:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8010406:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
 801040a:	ee27 0a00 	vmul.f32	s0, s14, s0
 801040e:	ee60 0a87 	vmul.f32	s1, s1, s14
 8010412:	ee27 5a05 	vmul.f32	s10, s14, s10
 8010416:	ee70 3a80 	vadd.f32	s7, s1, s0
 801041a:	ee65 5a87 	vmul.f32	s11, s11, s14
 801041e:	eee5 3a45 	vfms.f32	s7, s10, s10
 8010422:	ee64 4a87 	vmul.f32	s9, s9, s14
 8010426:	ee21 1a07 	vmul.f32	s2, s2, s14
 801042a:	ee35 3a43 	vsub.f32	s6, s10, s6
 801042e:	ee34 7ac4 	vsub.f32	s14, s9, s8
 8010432:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8010436:	eeb0 4a41 	vmov.f32	s8, s2
 801043a:	eee5 3ae5 	vfms.f32	s7, s11, s11
 801043e:	eea4 4ae4 	vfms.f32	s8, s9, s9
 8010442:	eeb0 3ac3 	vabs.f32	s6, s6
 8010446:	eef0 7ae7 	vabs.f32	s15, s15
 801044a:	ee77 7a83 	vadd.f32	s15, s15, s6
 801044e:	eeb0 7ac7 	vabs.f32	s14, s14
 8010452:	ee74 3a23 	vadd.f32	s7, s8, s7
 8010456:	ee37 7a87 	vadd.f32	s14, s15, s14
 801045a:	edc4 4a07 	vstr	s9, [r4, #28]
 801045e:	ed84 1a0a 	vstr	s2, [r4, #40]	; 0x28
 8010462:	ed84 5a08 	vstr	s10, [r4, #32]
 8010466:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
 801046a:	edc4 5a09 	vstr	s11, [r4, #36]	; 0x24
 801046e:	edc4 0a0c 	vstr	s1, [r4, #48]	; 0x30
 8010472:	f280 845b 	bge.w	8010d2c <MotionDI_update+0x1704>
 8010476:	3b01      	subs	r3, #1
 8010478:	ee07 3a90 	vmov	s15, r3
 801047c:	ee69 3a23 	vmul.f32	s7, s18, s7
 8010480:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010484:	edd4 5a01 	vldr	s11, [r4, #4]
 8010488:	ee83 5aa7 	vdiv.f32	s10, s7, s15
 801048c:	eeb4 5ae5 	vcmpe.f32	s10, s11
 8010490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010494:	f140 844a 	bpl.w	8010d2c <MotionDI_update+0x1704>
 8010498:	edd4 7a02 	vldr	s15, [r4, #8]
 801049c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80104a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104a4:	bf4c      	ite	mi
 80104a6:	2301      	movmi	r3, #1
 80104a8:	2300      	movpl	r3, #0
 80104aa:	f000 bc40 	b.w	8010d2e <MotionDI_update+0x1706>
 80104ae:	ed9f 9a9c 	vldr	s18, [pc, #624]	; 8010720 <MotionDI_update+0x10f8>
 80104b2:	f7ff b943 	b.w	800f73c <MotionDI_update+0x114>
 80104b6:	ad3f      	add	r5, sp, #252	; 0xfc
 80104b8:	a846      	add	r0, sp, #280	; 0x118
 80104ba:	2300      	movs	r3, #0
 80104bc:	4999      	ldr	r1, [pc, #612]	; (8010724 <MotionDI_update+0x10fc>)
 80104be:	901d      	str	r0, [sp, #116]	; 0x74
 80104c0:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 80104c4:	602b      	str	r3, [r5, #0]
 80104c6:	606b      	str	r3, [r5, #4]
 80104c8:	60ab      	str	r3, [r5, #8]
 80104ca:	af36      	add	r7, sp, #216	; 0xd8
 80104cc:	f894 2161 	ldrb.w	r2, [r4, #353]	; 0x161
 80104d0:	edc5 aa03 	vstr	s21, [r5, #12]
 80104d4:	951f      	str	r5, [sp, #124]	; 0x7c
 80104d6:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80104d8:	9218      	str	r2, [sp, #96]	; 0x60
 80104da:	4638      	mov	r0, r7
 80104dc:	f501 7265 	add.w	r2, r1, #916	; 0x394
 80104e0:	602b      	str	r3, [r5, #0]
 80104e2:	606b      	str	r3, [r5, #4]
 80104e4:	60ab      	str	r3, [r5, #8]
 80104e6:	edc5 aa03 	vstr	s21, [r5, #12]
 80104ea:	f7f7 ffcb 	bl	8008484 <rotVect>
 80104ee:	4a8e      	ldr	r2, [pc, #568]	; (8010728 <MotionDI_update+0x1100>)
 80104f0:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 80104f4:	f5a2 7162 	sub.w	r1, r2, #904	; 0x388
 80104f8:	4650      	mov	r0, sl
 80104fa:	f7f7 ffc3 	bl	8008484 <rotVect>
 80104fe:	4a8b      	ldr	r2, [pc, #556]	; (801072c <MotionDI_update+0x1104>)
 8010500:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8010504:	4640      	mov	r0, r8
 8010506:	f5a2 715f 	sub.w	r1, r2, #892	; 0x37c
 801050a:	f7f7 ffbb 	bl	8008484 <rotVect>
 801050e:	4b88      	ldr	r3, [pc, #544]	; (8010730 <MotionDI_update+0x1108>)
 8010510:	edd7 7a00 	vldr	s15, [r7]
 8010514:	ed97 7a01 	vldr	s14, [r7, #4]
 8010518:	ed9a 8a00 	vldr	s16, [sl]
 801051c:	edda 8a01 	vldr	s17, [sl, #4]
 8010520:	ed98 ba02 	vldr	s22, [r8, #8]
 8010524:	edd8 9a00 	vldr	s19, [r8]
 8010528:	ed98 aa01 	vldr	s20, [r8, #4]
 801052c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8010530:	edc8 9a01 	vstr	s19, [r8, #4]
 8010534:	eeb1 ca67 	vneg.f32	s24, s15
 8010538:	eef1 ca47 	vneg.f32	s25, s14
 801053c:	eeb1 8a48 	vneg.f32	s16, s16
 8010540:	eef1 8a68 	vneg.f32	s17, s17
 8010544:	eef1 ba4b 	vneg.f32	s23, s22
 8010548:	ed87 ca01 	vstr	s24, [r7, #4]
 801054c:	edc7 ca00 	vstr	s25, [r7]
 8010550:	ed8a 8a01 	vstr	s16, [sl, #4]
 8010554:	edca 8a00 	vstr	s17, [sl]
 8010558:	edc8 ba02 	vstr	s23, [r8, #8]
 801055c:	ed88 aa00 	vstr	s20, [r8]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d057      	beq.n	8010614 <MotionDI_update+0xfec>
 8010564:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010568:	ed97 da02 	vldr	s26, [r7, #8]
 801056c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8010570:	eeed 7a0d 	vfma.f32	s15, s26, s26
 8010574:	ee17 0a90 	vmov	r0, s15
 8010578:	f7ef ff8a 	bl	8000490 <__aeabi_f2d>
 801057c:	ec41 0b10 	vmov	d0, r0, r1
 8010580:	f002 fe7e 	bl	8013280 <sqrt>
 8010584:	ec51 0b10 	vmov	r0, r1, d0
 8010588:	f7f0 fad2 	bl	8000b30 <__aeabi_d2f>
 801058c:	ee0d 0a90 	vmov	s27, r0
 8010590:	f7ef ff7e 	bl	8000490 <__aeabi_f2d>
 8010594:	a360      	add	r3, pc, #384	; (adr r3, 8010718 <MotionDI_update+0x10f0>)
 8010596:	e9d3 2300 	ldrd	r2, r3, [r3]
 801059a:	f7f0 fa43 	bl	8000a24 <__aeabi_dcmplt>
 801059e:	b938      	cbnz	r0, 80105b0 <MotionDI_update+0xf88>
 80105a0:	eeca 7aad 	vdiv.f32	s15, s21, s27
 80105a4:	ee6c caa7 	vmul.f32	s25, s25, s15
 80105a8:	ee2c ca27 	vmul.f32	s24, s24, s15
 80105ac:	ee2d da27 	vmul.f32	s26, s26, s15
 80105b0:	ee69 7aa9 	vmul.f32	s15, s19, s19
 80105b4:	edc7 ca00 	vstr	s25, [r7]
 80105b8:	eeea 7a0a 	vfma.f32	s15, s20, s20
 80105bc:	ed87 ca01 	vstr	s24, [r7, #4]
 80105c0:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 80105c4:	ed87 da02 	vstr	s26, [r7, #8]
 80105c8:	ee17 0a90 	vmov	r0, s15
 80105cc:	f7ef ff60 	bl	8000490 <__aeabi_f2d>
 80105d0:	ec41 0b10 	vmov	d0, r0, r1
 80105d4:	f002 fe54 	bl	8013280 <sqrt>
 80105d8:	ec51 0b10 	vmov	r0, r1, d0
 80105dc:	f7f0 faa8 	bl	8000b30 <__aeabi_d2f>
 80105e0:	ee0a 0a90 	vmov	s21, r0
 80105e4:	f7ef ff54 	bl	8000490 <__aeabi_f2d>
 80105e8:	a34b      	add	r3, pc, #300	; (adr r3, 8010718 <MotionDI_update+0x10f0>)
 80105ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105ee:	f7f0 fa19 	bl	8000a24 <__aeabi_dcmplt>
 80105f2:	b948      	cbnz	r0, 8010608 <MotionDI_update+0xfe0>
 80105f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80105f8:	eec7 7a2a 	vdiv.f32	s15, s14, s21
 80105fc:	ee2a aa27 	vmul.f32	s20, s20, s15
 8010600:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8010604:	ee6b baa7 	vmul.f32	s23, s23, s15
 8010608:	ed88 aa00 	vstr	s20, [r8]
 801060c:	edc8 9a01 	vstr	s19, [r8, #4]
 8010610:	edc8 ba02 	vstr	s23, [r8, #8]
 8010614:	f894 2161 	ldrb.w	r2, [r4, #353]	; 0x161
 8010618:	2a00      	cmp	r2, #0
 801061a:	f000 81b8 	beq.w	801098e <MotionDI_update+0x1366>
 801061e:	ee07 2a90 	vmov	s15, r2
 8010622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010626:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 801062a:	ee88 8a27 	vdiv.f32	s16, s16, s15
 801062e:	f8df 8110 	ldr.w	r8, [pc, #272]	; 8010740 <MotionDI_update+0x1118>
 8010632:	f894 3144 	ldrb.w	r3, [r4, #324]	; 0x144
 8010636:	3301      	adds	r3, #1
 8010638:	b2db      	uxtb	r3, r3
 801063a:	fbb3 f1f2 	udiv	r1, r3, r2
 801063e:	fb02 3311 	mls	r3, r2, r1, r3
 8010642:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
 8010646:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
 801064a:	ed9a 7a02 	vldr	s14, [sl, #8]
 801064e:	ed98 6a0e 	vldr	s12, [r8, #56]	; 0x38
 8010652:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8010656:	ed98 7a0c 	vldr	s14, [r8, #48]	; 0x30
 801065a:	edd8 7a0d 	vldr	s15, [r8, #52]	; 0x34
 801065e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8010662:	ee77 8a28 	vadd.f32	s17, s14, s17
 8010666:	ee37 8a88 	vadd.f32	s16, s15, s16
 801066a:	edc8 6a0e 	vstr	s13, [r8, #56]	; 0x38
 801066e:	edc8 8a0c 	vstr	s17, [r8, #48]	; 0x30
 8010672:	ed88 8a0d 	vstr	s16, [r8, #52]	; 0x34
 8010676:	2a00      	cmp	r2, #0
 8010678:	f040 8587 	bne.w	801118a <MotionDI_update+0x1b62>
 801067c:	4a2d      	ldr	r2, [pc, #180]	; (8010734 <MotionDI_update+0x110c>)
 801067e:	9220      	str	r2, [sp, #128]	; 0x80
 8010680:	f102 0318 	add.w	r3, r2, #24
 8010684:	9301      	str	r3, [sp, #4]
 8010686:	4611      	mov	r1, r2
 8010688:	f1a2 0360 	sub.w	r3, r2, #96	; 0x60
 801068c:	9300      	str	r3, [sp, #0]
 801068e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010690:	f1a2 0310 	sub.w	r3, r2, #16
 8010694:	3940      	subs	r1, #64	; 0x40
 8010696:	3a20      	subs	r2, #32
 8010698:	f7f8 fee4 	bl	8009464 <SpacePointGyroPropRedist>
 801069c:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
 80106a0:	2b01      	cmp	r3, #1
 80106a2:	f001 8027 	beq.w	80116f4 <MotionDI_update+0x20cc>
 80106a6:	4b24      	ldr	r3, [pc, #144]	; (8010738 <MotionDI_update+0x1110>)
 80106a8:	f894 c162 	ldrb.w	ip, [r4, #354]	; 0x162
 80106ac:	f8cd c004 	str.w	ip, [sp, #4]
 80106b0:	f103 020c 	add.w	r2, r3, #12
 80106b4:	9200      	str	r2, [sp, #0]
 80106b6:	f1a3 007c 	sub.w	r0, r3, #124	; 0x7c
 80106ba:	f1a3 0288 	sub.w	r2, r3, #136	; 0x88
 80106be:	4639      	mov	r1, r7
 80106c0:	f7f9 f930 	bl	8009924 <output_update>
 80106c4:	f894 2160 	ldrb.w	r2, [r4, #352]	; 0x160
 80106c8:	2300      	movs	r3, #0
 80106ca:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
 80106ce:	0793      	lsls	r3, r2, #30
 80106d0:	d40a      	bmi.n	80106e8 <MotionDI_update+0x10c0>
 80106d2:	f894 1144 	ldrb.w	r1, [r4, #324]	; 0x144
 80106d6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80106d8:	fbb1 f3f0 	udiv	r3, r1, r0
 80106dc:	fb00 1613 	mls	r6, r0, r3, r1
 80106e0:	f016 0fff 	tst.w	r6, #255	; 0xff
 80106e4:	f000 8687 	beq.w	80113f6 <MotionDI_update+0x1dce>
 80106e8:	4a14      	ldr	r2, [pc, #80]	; (801073c <MotionDI_update+0x1114>)
 80106ea:	981d      	ldr	r0, [sp, #116]	; 0x74
 80106ec:	4611      	mov	r1, r2
 80106ee:	f7f8 f8d1 	bl	8008894 <m_qmult_eml>
 80106f2:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
 80106f6:	2b01      	cmp	r3, #1
 80106f8:	f47f a8fd 	bne.w	800f8f6 <MotionDI_update+0x2ce>
 80106fc:	9920      	ldr	r1, [sp, #128]	; 0x80
 80106fe:	edd1 7a08 	vldr	s15, [r1, #32]
 8010702:	698a      	ldr	r2, [r1, #24]
 8010704:	69cb      	ldr	r3, [r1, #28]
 8010706:	618b      	str	r3, [r1, #24]
 8010708:	eef1 7a67 	vneg.f32	s15, s15
 801070c:	61ca      	str	r2, [r1, #28]
 801070e:	edc1 7a08 	vstr	s15, [r1, #32]
 8010712:	f7ff b8f0 	b.w	800f8f6 <MotionDI_update+0x2ce>
 8010716:	bf00      	nop
 8010718:	a0b5ed8d 	.word	0xa0b5ed8d
 801071c:	3eb0c6f7 	.word	0x3eb0c6f7
 8010720:	3c23d70a 	.word	0x3c23d70a
 8010724:	20001760 	.word	0x20001760
 8010728:	20001b00 	.word	0x20001b00
 801072c:	20001ae8 	.word	0x20001ae8
 8010730:	200010f8 	.word	0x200010f8
 8010734:	20001bd4 	.word	0x20001bd4
 8010738:	20001c68 	.word	0x20001c68
 801073c:	20001b84 	.word	0x20001b84
 8010740:	20001adc 	.word	0x20001adc
 8010744:	ad46      	add	r5, sp, #280	; 0x118
 8010746:	951d      	str	r5, [sp, #116]	; 0x74
 8010748:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801074a:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 801074e:	9218      	str	r2, [sp, #96]	; 0x60
 8010750:	af36      	add	r7, sp, #216	; 0xd8
 8010752:	2300      	movs	r3, #0
 8010754:	4632      	mov	r2, r6
 8010756:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 801075a:	4638      	mov	r0, r7
 801075c:	f5a8 712c 	sub.w	r1, r8, #688	; 0x2b0
 8010760:	ae3f      	add	r6, sp, #252	; 0xfc
 8010762:	602b      	str	r3, [r5, #0]
 8010764:	606b      	str	r3, [r5, #4]
 8010766:	60ab      	str	r3, [r5, #8]
 8010768:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 801076c:	933f      	str	r3, [sp, #252]	; 0xfc
 801076e:	9340      	str	r3, [sp, #256]	; 0x100
 8010770:	9341      	str	r3, [sp, #260]	; 0x104
 8010772:	edc5 9a03 	vstr	s19, [r5, #12]
 8010776:	961f      	str	r6, [sp, #124]	; 0x7c
 8010778:	edcd 9a42 	vstr	s19, [sp, #264]	; 0x108
 801077c:	f7f7 fe82 	bl	8008484 <rotVect>
 8010780:	f1a8 02ec 	sub.w	r2, r8, #236	; 0xec
 8010784:	f5a2 71d6 	sub.w	r1, r2, #428	; 0x1ac
 8010788:	4650      	mov	r0, sl
 801078a:	f502 753b 	add.w	r5, r2, #748	; 0x2ec
 801078e:	f7f7 fe79 	bl	8008484 <rotVect>
 8010792:	a83c      	add	r0, sp, #240	; 0xf0
 8010794:	3a18      	subs	r2, #24
 8010796:	f2a5 41a4 	subw	r1, r5, #1188	; 0x4a4
 801079a:	f7f7 fe73 	bl	8008484 <rotVect>
 801079e:	4b82      	ldr	r3, [pc, #520]	; (80109a8 <MotionDI_update+0x1380>)
 80107a0:	edd7 7a00 	vldr	s15, [r7]
 80107a4:	edd7 5a01 	vldr	s11, [r7, #4]
 80107a8:	edda ba00 	vldr	s23, [sl]
 80107ac:	ed9a 7a01 	vldr	s14, [sl, #4]
 80107b0:	ed9d ba3e 	vldr	s22, [sp, #248]	; 0xf8
 80107b4:	ed9d 8a3c 	vldr	s16, [sp, #240]	; 0xf0
 80107b8:	eddd 8a3d 	vldr	s17, [sp, #244]	; 0xf4
 80107bc:	f893 38e0 	ldrb.w	r3, [r3, #2272]	; 0x8e0
 80107c0:	ed8d 8a3d 	vstr	s16, [sp, #244]	; 0xf4
 80107c4:	eeb1 aa67 	vneg.f32	s20, s15
 80107c8:	eef1 aa65 	vneg.f32	s21, s11
 80107cc:	eef1 ba6b 	vneg.f32	s23, s23
 80107d0:	eeb1 ca47 	vneg.f32	s24, s14
 80107d4:	eeb1 da4b 	vneg.f32	s26, s22
 80107d8:	ed87 aa01 	vstr	s20, [r7, #4]
 80107dc:	edc7 aa00 	vstr	s21, [r7]
 80107e0:	edca ba01 	vstr	s23, [sl, #4]
 80107e4:	ed8a ca00 	vstr	s24, [sl]
 80107e8:	ed8d da3e 	vstr	s26, [sp, #248]	; 0xf8
 80107ec:	edcd 8a3c 	vstr	s17, [sp, #240]	; 0xf0
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d045      	beq.n	8010880 <MotionDI_update+0x1258>
 80107f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80107f8:	edd7 ca02 	vldr	s25, [r7, #8]
 80107fc:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8010800:	eeec 7aac 	vfma.f32	s15, s25, s25
 8010804:	ee17 0a90 	vmov	r0, s15
 8010808:	f7ef fe42 	bl	8000490 <__aeabi_f2d>
 801080c:	ec41 0b10 	vmov	d0, r0, r1
 8010810:	f002 fd36 	bl	8013280 <sqrt>
 8010814:	ec51 0b10 	vmov	r0, r1, d0
 8010818:	f7f0 f98a 	bl	8000b30 <__aeabi_d2f>
 801081c:	ee07 0a90 	vmov	s15, r0
 8010820:	ee89 6aa7 	vdiv.f32	s12, s19, s15
 8010824:	ee68 7a08 	vmul.f32	s15, s16, s16
 8010828:	ee66 aa2a 	vmul.f32	s21, s12, s21
 801082c:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8010830:	ee26 aa0a 	vmul.f32	s20, s12, s20
 8010834:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 8010838:	ee26 6a2c 	vmul.f32	s12, s12, s25
 801083c:	ee17 0a90 	vmov	r0, s15
 8010840:	ed87 6a02 	vstr	s12, [r7, #8]
 8010844:	edc7 aa00 	vstr	s21, [r7]
 8010848:	ed87 aa01 	vstr	s20, [r7, #4]
 801084c:	f7ef fe20 	bl	8000490 <__aeabi_f2d>
 8010850:	ec41 0b10 	vmov	d0, r0, r1
 8010854:	f002 fd14 	bl	8013280 <sqrt>
 8010858:	ec51 0b10 	vmov	r0, r1, d0
 801085c:	f7f0 f968 	bl	8000b30 <__aeabi_d2f>
 8010860:	ee07 0a90 	vmov	s15, r0
 8010864:	eec9 6aa7 	vdiv.f32	s13, s19, s15
 8010868:	ee66 8aa8 	vmul.f32	s17, s13, s17
 801086c:	ee26 8a88 	vmul.f32	s16, s13, s16
 8010870:	ee66 6a8d 	vmul.f32	s13, s13, s26
 8010874:	edcd 8a3c 	vstr	s17, [sp, #240]	; 0xf0
 8010878:	ed8d 8a3d 	vstr	s16, [sp, #244]	; 0xf4
 801087c:	edcd 6a3e 	vstr	s13, [sp, #248]	; 0xf8
 8010880:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 8010884:	2a00      	cmp	r2, #0
 8010886:	f000 8088 	beq.w	801099a <MotionDI_update+0x1372>
 801088a:	ee07 2a90 	vmov	s15, r2
 801088e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8010892:	ee8c ca06 	vdiv.f32	s24, s24, s12
 8010896:	eecb ba86 	vdiv.f32	s23, s23, s12
 801089a:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
 801089e:	f894 1104 	ldrb.w	r1, [r4, #260]	; 0x104
 80108a2:	3301      	adds	r3, #1
 80108a4:	b2db      	uxtb	r3, r3
 80108a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80108aa:	fb02 3310 	mls	r3, r2, r0, r3
 80108ae:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
 80108b2:	ed9a 5a02 	vldr	s10, [sl, #8]
 80108b6:	edd4 5a9f 	vldr	s11, [r4, #636]	; 0x27c
 80108ba:	ed94 7a9d 	vldr	s14, [r4, #628]	; 0x274
 80108be:	edd4 7a9e 	vldr	s15, [r4, #632]	; 0x278
 80108c2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80108c6:	ee37 7a0c 	vadd.f32	s14, s14, s24
 80108ca:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80108ce:	ee77 7aab 	vadd.f32	s15, s15, s23
 80108d2:	edc4 6a9f 	vstr	s13, [r4, #636]	; 0x27c
 80108d6:	ed84 7a9d 	vstr	s14, [r4, #628]	; 0x274
 80108da:	edc4 7a9e 	vstr	s15, [r4, #632]	; 0x278
 80108de:	2900      	cmp	r1, #0
 80108e0:	f040 8446 	bne.w	8011170 <MotionDI_update+0x1b48>
 80108e4:	4931      	ldr	r1, [pc, #196]	; (80109ac <MotionDI_update+0x1384>)
 80108e6:	981d      	ldr	r0, [sp, #116]	; 0x74
 80108e8:	f101 0350 	add.w	r3, r1, #80	; 0x50
 80108ec:	e9cd 1800 	strd	r1, r8, [sp]
 80108f0:	f101 0240 	add.w	r2, r1, #64	; 0x40
 80108f4:	3120      	adds	r1, #32
 80108f6:	f7f8 fdb5 	bl	8009464 <SpacePointGyroPropRedist>
 80108fa:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 80108fe:	2b01      	cmp	r3, #1
 8010900:	f000 86eb 	beq.w	80116da <MotionDI_update+0x20b2>
 8010904:	4b2a      	ldr	r3, [pc, #168]	; (80109b0 <MotionDI_update+0x1388>)
 8010906:	f894 6126 	ldrb.w	r6, [r4, #294]	; 0x126
 801090a:	9601      	str	r6, [sp, #4]
 801090c:	f103 020c 	add.w	r2, r3, #12
 8010910:	9200      	str	r2, [sp, #0]
 8010912:	4639      	mov	r1, r7
 8010914:	f1a3 0288 	sub.w	r2, r3, #136	; 0x88
 8010918:	f1a3 007c 	sub.w	r0, r3, #124	; 0x7c
 801091c:	f7f9 f802 	bl	8009924 <output_update>
 8010920:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
 8010924:	2300      	movs	r3, #0
 8010926:	0791      	lsls	r1, r2, #30
 8010928:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
 801092c:	d40a      	bmi.n	8010944 <MotionDI_update+0x131c>
 801092e:	f894 1108 	ldrb.w	r1, [r4, #264]	; 0x108
 8010932:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010934:	fbb1 f3f0 	udiv	r3, r1, r0
 8010938:	fb00 1313 	mls	r3, r0, r3, r1
 801093c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010940:	f000 860e 	beq.w	8011560 <MotionDI_update+0x1f38>
 8010944:	4a1b      	ldr	r2, [pc, #108]	; (80109b4 <MotionDI_update+0x138c>)
 8010946:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010948:	4611      	mov	r1, r2
 801094a:	f7f7 ffa3 	bl	8008894 <m_qmult_eml>
 801094e:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 8010952:	2b01      	cmp	r3, #1
 8010954:	f47e afcb 	bne.w	800f8ee <MotionDI_update+0x2c6>
 8010958:	edd4 7ad7 	vldr	s15, [r4, #860]	; 0x35c
 801095c:	f8d4 2354 	ldr.w	r2, [r4, #852]	; 0x354
 8010960:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
 8010964:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
 8010968:	eef1 7a67 	vneg.f32	s15, s15
 801096c:	f8c4 2358 	str.w	r2, [r4, #856]	; 0x358
 8010970:	edc4 7ad7 	vstr	s15, [r4, #860]	; 0x35c
 8010974:	f7fe bfbb 	b.w	800f8ee <MotionDI_update+0x2c6>
 8010978:	f8d4 36cc 	ldr.w	r3, [r4, #1740]	; 0x6cc
 801097c:	931e      	str	r3, [sp, #120]	; 0x78
 801097e:	f8d4 3650 	ldr.w	r3, [r4, #1616]	; 0x650
 8010982:	931d      	str	r3, [sp, #116]	; 0x74
 8010984:	f7fe bf25 	b.w	800f7d2 <MotionDI_update+0x1aa>
 8010988:	46be      	mov	lr, r7
 801098a:	f7ff b86e 	b.w	800fa6a <MotionDI_update+0x442>
 801098e:	2201      	movs	r2, #1
 8010990:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
 8010994:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010998:	e649      	b.n	801062e <MotionDI_update+0x1006>
 801099a:	2201      	movs	r2, #1
 801099c:	f884 2125 	strb.w	r2, [r4, #293]	; 0x125
 80109a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80109a4:	e779      	b.n	801089a <MotionDI_update+0x1272>
 80109a6:	bf00      	nop
 80109a8:	20000000 	.word	0x20000000
 80109ac:	20001974 	.word	0x20001974
 80109b0:	20001a68 	.word	0x20001a68
 80109b4:	20001984 	.word	0x20001984
 80109b8:	4ad2      	ldr	r2, [pc, #840]	; (8010d04 <MotionDI_update+0x16dc>)
 80109ba:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 80109be:	2300      	movs	r3, #0
 80109c0:	f5a2 7165 	sub.w	r1, r2, #916	; 0x394
 80109c4:	a83c      	add	r0, sp, #240	; 0xf0
 80109c6:	e9ca 3300 	strd	r3, r3, [sl]
 80109ca:	f8ca 3008 	str.w	r3, [sl, #8]
 80109ce:	f7f7 fd59 	bl	8008484 <rotVect>
 80109d2:	4acd      	ldr	r2, [pc, #820]	; (8010d08 <MotionDI_update+0x16e0>)
 80109d4:	ab3f      	add	r3, sp, #252	; 0xfc
 80109d6:	4618      	mov	r0, r3
 80109d8:	f5a2 7162 	sub.w	r1, r2, #904	; 0x388
 80109dc:	931f      	str	r3, [sp, #124]	; 0x7c
 80109de:	f7f7 fd51 	bl	8008484 <rotVect>
 80109e2:	4bca      	ldr	r3, [pc, #808]	; (8010d0c <MotionDI_update+0x16e4>)
 80109e4:	eddd 7a3c 	vldr	s15, [sp, #240]	; 0xf0
 80109e8:	ed9d 7a3d 	vldr	s14, [sp, #244]	; 0xf4
 80109ec:	ed90 8a00 	vldr	s16, [r0]
 80109f0:	edd0 8a01 	vldr	s17, [r0, #4]
 80109f4:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80109f8:	eef1 9a67 	vneg.f32	s19, s15
 80109fc:	eeb1 aa47 	vneg.f32	s20, s14
 8010a00:	eeb1 8a48 	vneg.f32	s16, s16
 8010a04:	eef1 8a68 	vneg.f32	s17, s17
 8010a08:	edcd 9a3d 	vstr	s19, [sp, #244]	; 0xf4
 8010a0c:	ed8d aa3c 	vstr	s20, [sp, #240]	; 0xf0
 8010a10:	ed80 8a01 	vstr	s16, [r0, #4]
 8010a14:	edc0 8a00 	vstr	s17, [r0]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	f040 83d6 	bne.w	80111ca <MotionDI_update+0x1ba2>
 8010a1e:	eddd aa3e 	vldr	s21, [sp, #248]	; 0xf8
 8010a22:	ed9f babb 	vldr	s22, [pc, #748]	; 8010d10 <MotionDI_update+0x16e8>
 8010a26:	4dbb      	ldr	r5, [pc, #748]	; (8010d14 <MotionDI_update+0x16ec>)
 8010a28:	f894 2161 	ldrb.w	r2, [r4, #353]	; 0x161
 8010a2c:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 8010d28 <MotionDI_update+0x1700>
 8010a30:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 8010a34:	f8d8 1078 	ldr.w	r1, [r8, #120]	; 0x78
 8010a38:	f8d8 0080 	ldr.w	r0, [r8, #128]	; 0x80
 8010a3c:	f8d8 c084 	ldr.w	ip, [r8, #132]	; 0x84
 8010a40:	f8c8 1088 	str.w	r1, [r8, #136]	; 0x88
 8010a44:	ee00 2a10 	vmov	s0, r2
 8010a48:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8010a4c:	f8d8 207c 	ldr.w	r2, [r8, #124]	; 0x7c
 8010a50:	f8c8 208c 	str.w	r2, [r8, #140]	; 0x8c
 8010a54:	ee20 0a09 	vmul.f32	s0, s0, s18
 8010a58:	f043 0302 	orr.w	r3, r3, #2
 8010a5c:	f083 0301 	eor.w	r3, r3, #1
 8010a60:	4641      	mov	r1, r8
 8010a62:	22f8      	movs	r2, #248	; 0xf8
 8010a64:	f8c8 0090 	str.w	r0, [r8, #144]	; 0x90
 8010a68:	4658      	mov	r0, fp
 8010a6a:	ed8d 0a20 	vstr	s0, [sp, #128]	; 0x80
 8010a6e:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
 8010a72:	f8c8 c094 	str.w	ip, [r8, #148]	; 0x94
 8010a76:	f002 fa13 	bl	8012ea0 <memcpy>
 8010a7a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010a7c:	f8cb 500c 	str.w	r5, [fp, #12]
 8010a80:	6892      	ldr	r2, [r2, #8]
 8010a82:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
 8010a86:	2300      	movs	r3, #0
 8010a88:	f508 7ef9 	add.w	lr, r8, #498	; 0x1f2
 8010a8c:	f208 1cf1 	addw	ip, r8, #497	; 0x1f1
 8010a90:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8010a92:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
 8010a96:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 8010a9a:	f108 02c8 	add.w	r2, r8, #200	; 0xc8
 8010a9e:	f508 71f8 	add.w	r1, r8, #496	; 0x1f0
 8010aa2:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 8010aa6:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
 8010aaa:	ed8b aa06 	vstr	s20, [fp, #24]
 8010aae:	edcb 9a07 	vstr	s19, [fp, #28]
 8010ab2:	edcb aa08 	vstr	s21, [fp, #32]
 8010ab6:	ed8b ba05 	vstr	s22, [fp, #20]
 8010aba:	edcb 8a09 	vstr	s17, [fp, #36]	; 0x24
 8010abe:	ed8b 8a0a 	vstr	s16, [fp, #40]	; 0x28
 8010ac2:	4f95      	ldr	r7, [pc, #596]	; (8010d18 <MotionDI_update+0x16f0>)
 8010ac4:	9510      	str	r5, [sp, #64]	; 0x40
 8010ac6:	e9cd ce13 	strd	ip, lr, [sp, #76]	; 0x4c
 8010aca:	920f      	str	r2, [sp, #60]	; 0x3c
 8010acc:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8010ad0:	9112      	str	r1, [sp, #72]	; 0x48
 8010ad2:	f8cb 3010 	str.w	r3, [fp, #16]
 8010ad6:	ab46      	add	r3, sp, #280	; 0x118
 8010ad8:	9715      	str	r7, [sp, #84]	; 0x54
 8010ada:	930e      	str	r3, [sp, #56]	; 0x38
 8010adc:	f7ef fcd8 	bl	8000490 <__aeabi_f2d>
 8010ae0:	edd4 3a56 	vldr	s7, [r4, #344]	; 0x158
 8010ae4:	ed94 3a55 	vldr	s6, [r4, #340]	; 0x154
 8010ae8:	edd4 2a54 	vldr	s5, [r4, #336]	; 0x150
 8010aec:	edcd 3a1f 	vstr	s7, [sp, #124]	; 0x7c
 8010af0:	4602      	mov	r2, r0
 8010af2:	460b      	mov	r3, r1
 8010af4:	f894 0142 	ldrb.w	r0, [r4, #322]	; 0x142
 8010af8:	ed8d 3a1a 	vstr	s6, [sp, #104]	; 0x68
 8010afc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010b00:	edcd 2a17 	vstr	s5, [sp, #92]	; 0x5c
 8010b04:	f7ef fca2 	bl	800044c <__aeabi_ui2d>
 8010b08:	460b      	mov	r3, r1
 8010b0a:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 8010b0e:	9108      	str	r1, [sp, #32]
 8010b10:	f894 113f 	ldrb.w	r1, [r4, #319]	; 0x13f
 8010b14:	9107      	str	r1, [sp, #28]
 8010b16:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
 8010b1a:	9106      	str	r1, [sp, #24]
 8010b1c:	f894 113d 	ldrb.w	r1, [r4, #317]	; 0x13d
 8010b20:	9105      	str	r1, [sp, #20]
 8010b22:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
 8010b26:	9104      	str	r1, [sp, #16]
 8010b28:	4602      	mov	r2, r0
 8010b2a:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
 8010b2e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010b32:	f7ef fcad 	bl	8000490 <__aeabi_f2d>
 8010b36:	ed94 2a4d 	vldr	s4, [r4, #308]	; 0x134
 8010b3a:	edd4 1a4c 	vldr	s3, [r4, #304]	; 0x130
 8010b3e:	ed9d 3a1a 	vldr	s6, [sp, #104]	; 0x68
 8010b42:	eddd 2a17 	vldr	s5, [sp, #92]	; 0x5c
 8010b46:	ed9d 0a20 	vldr	s0, [sp, #128]	; 0x80
 8010b4a:	eddd 3a1f 	vldr	s7, [sp, #124]	; 0x7c
 8010b4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010b52:	ad90      	add	r5, sp, #576	; 0x240
 8010b54:	f50d 7c1c 	add.w	ip, sp, #624	; 0x270
 8010b58:	a984      	add	r1, sp, #528	; 0x210
 8010b5a:	ed94 1a4b 	vldr	s2, [r4, #300]	; 0x12c
 8010b5e:	edd4 0a4a 	vldr	s1, [r4, #296]	; 0x128
 8010b62:	9517      	str	r5, [sp, #92]	; 0x5c
 8010b64:	e9cd 5c00 	strd	r5, ip, [sp]
 8010b68:	ab8d      	add	r3, sp, #564	; 0x234
 8010b6a:	aa87      	add	r2, sp, #540	; 0x21c
 8010b6c:	a8a3      	add	r0, sp, #652	; 0x28c
 8010b6e:	911a      	str	r1, [sp, #104]	; 0x68
 8010b70:	f7fd ffbc 	bl	800eaec <SpacePointAlgorithm.isra.0>
 8010b74:	f894 3636 	ldrb.w	r3, [r4, #1590]	; 0x636
 8010b78:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8010b7c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8010b80:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8010b84:	f8c8 01f4 	str.w	r0, [r8, #500]	; 0x1f4
 8010b88:	f108 05f8 	add.w	r5, r8, #248	; 0xf8
 8010b8c:	2b01      	cmp	r3, #1
 8010b8e:	f8c8 11f8 	str.w	r1, [r8, #504]	; 0x1f8
 8010b92:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
 8010b96:	9f46      	ldr	r7, [sp, #280]	; 0x118
 8010b98:	9847      	ldr	r0, [sp, #284]	; 0x11c
 8010b9a:	9948      	ldr	r1, [sp, #288]	; 0x120
 8010b9c:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8010b9e:	9520      	str	r5, [sp, #128]	; 0x80
 8010ba0:	d115      	bne.n	8010bce <MotionDI_update+0x15a6>
 8010ba2:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
 8010ba6:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
 8010baa:	4a58      	ldr	r2, [pc, #352]	; (8010d0c <MotionDI_update+0x16e4>)
 8010bac:	f8c8 7078 	str.w	r7, [r8, #120]	; 0x78
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 8010bb6:	f8c8 1080 	str.w	r1, [r8, #128]	; 0x80
 8010bba:	f8c8 7088 	str.w	r7, [r8, #136]	; 0x88
 8010bbe:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
 8010bc2:	f8c8 1090 	str.w	r1, [r8, #144]	; 0x90
 8010bc6:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
 8010bca:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
 8010bce:	eddf 7a53 	vldr	s15, [pc, #332]	; 8010d1c <MotionDI_update+0x16f4>
 8010bd2:	ed9a 6a00 	vldr	s12, [sl]
 8010bd6:	edda 6a01 	vldr	s13, [sl, #4]
 8010bda:	ed9a 7a02 	vldr	s14, [sl, #8]
 8010bde:	f894 3635 	ldrb.w	r3, [r4, #1589]	; 0x635
 8010be2:	ee26 5a27 	vmul.f32	s10, s12, s15
 8010be6:	ee66 5aa7 	vmul.f32	s11, s13, s15
 8010bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010bee:	ed88 5a1b 	vstr	s10, [r8, #108]	; 0x6c
 8010bf2:	edc8 5a1c 	vstr	s11, [r8, #112]	; 0x70
 8010bf6:	edc8 7a1d 	vstr	s15, [r8, #116]	; 0x74
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	f000 82db 	beq.w	80111b6 <MotionDI_update+0x1b8e>
 8010c00:	f894 36ec 	ldrb.w	r3, [r4, #1772]	; 0x6ec
 8010c04:	2b09      	cmp	r3, #9
 8010c06:	f200 83e0 	bhi.w	80113ca <MotionDI_update+0x1da2>
 8010c0a:	3301      	adds	r3, #1
 8010c0c:	f884 36ec 	strb.w	r3, [r4, #1772]	; 0x6ec
 8010c10:	e2d3      	b.n	80111ba <MotionDI_update+0x1b92>
 8010c12:	f8d4 2650 	ldr.w	r2, [r4, #1616]	; 0x650
 8010c16:	f8d4 e6dc 	ldr.w	lr, [r4, #1756]	; 0x6dc
 8010c1a:	921d      	str	r2, [sp, #116]	; 0x74
 8010c1c:	2a00      	cmp	r2, #0
 8010c1e:	f040 837d 	bne.w	801131c <MotionDI_update+0x1cf4>
 8010c22:	f10e 0c01 	add.w	ip, lr, #1
 8010c26:	f8d4 26cc 	ldr.w	r2, [r4, #1740]	; 0x6cc
 8010c2a:	921e      	str	r2, [sp, #120]	; 0x78
 8010c2c:	2a00      	cmp	r2, #0
 8010c2e:	f000 8544 	beq.w	80116ba <MotionDI_update+0x2092>
 8010c32:	ee07 ca90 	vmov	s15, ip
 8010c36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c3e:	eec7 5a27 	vdiv.f32	s11, s14, s15
 8010c42:	4f37      	ldr	r7, [pc, #220]	; (8010d20 <MotionDI_update+0x16f8>)
 8010c44:	4a37      	ldr	r2, [pc, #220]	; (8010d24 <MotionDI_update+0x16fc>)
 8010c46:	f8c4 c6dc 	str.w	ip, [r4, #1756]	; 0x6dc
 8010c4a:	463d      	mov	r5, r7
 8010c4c:	4611      	mov	r1, r2
 8010c4e:	4610      	mov	r0, r2
 8010c50:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
 8010c54:	f101 0104 	add.w	r1, r1, #4
 8010c58:	f100 0008 	add.w	r0, r0, #8
 8010c5c:	ecb5 7a01 	vldmia	r5!, {s14}
 8010c60:	ed92 4a00 	vldr	s8, [r2]
 8010c64:	edd1 4a00 	vldr	s9, [r1]
 8010c68:	ed90 5a00 	vldr	s10, [r0]
 8010c6c:	ed95 6a00 	vldr	s12, [r5]
 8010c70:	edd7 6a02 	vldr	s13, [r7, #8]
 8010c74:	ee07 ea90 	vmov	s15, lr
 8010c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010c7c:	eea7 7a84 	vfma.f32	s14, s15, s8
 8010c80:	eea7 6aa4 	vfma.f32	s12, s15, s9
 8010c84:	eee7 6a85 	vfma.f32	s13, s15, s10
 8010c88:	ee26 6a25 	vmul.f32	s12, s12, s11
 8010c8c:	ee67 7a25 	vmul.f32	s15, s14, s11
 8010c90:	ee26 7aa5 	vmul.f32	s14, s13, s11
 8010c94:	ed81 6a00 	vstr	s12, [r1]
 8010c98:	edc2 7a00 	vstr	s15, [r2]
 8010c9c:	ed80 7a00 	vstr	s14, [r0]
 8010ca0:	f47e ad92 	bne.w	800f7c8 <MotionDI_update+0x1a0>
 8010ca4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010ca6:	b16b      	cbz	r3, 8010cc4 <MotionDI_update+0x169c>
 8010ca8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010cac:	ee26 6a26 	vmul.f32	s12, s12, s13
 8010cb0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010cb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010cb8:	ed84 6a46 	vstr	s12, [r4, #280]	; 0x118
 8010cbc:	ed84 7a47 	vstr	s14, [r4, #284]	; 0x11c
 8010cc0:	edc4 7a45 	vstr	s15, [r4, #276]	; 0x114
 8010cc4:	edd1 6a00 	vldr	s13, [r1]
 8010cc8:	ed90 7a00 	vldr	s14, [r0]
 8010ccc:	edd2 7a00 	vldr	s15, [r2]
 8010cd0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8010cd4:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010cd8:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010cdc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010ce0:	edc4 6a55 	vstr	s13, [r4, #340]	; 0x154
 8010ce4:	ed84 7a56 	vstr	s14, [r4, #344]	; 0x158
 8010ce8:	edc4 7a54 	vstr	s15, [r4, #336]	; 0x150
 8010cec:	2300      	movs	r3, #0
 8010cee:	2500      	movs	r5, #0
 8010cf0:	6013      	str	r3, [r2, #0]
 8010cf2:	600b      	str	r3, [r1, #0]
 8010cf4:	6003      	str	r3, [r0, #0]
 8010cf6:	f8c4 56dc 	str.w	r5, [r4, #1756]	; 0x6dc
 8010cfa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010cfc:	f8c4 56d8 	str.w	r5, [r4, #1752]	; 0x6d8
 8010d00:	f7fe bd5f 	b.w	800f7c2 <MotionDI_update+0x19a>
 8010d04:	20001af4 	.word	0x20001af4
 8010d08:	20001b00 	.word	0x20001b00
 8010d0c:	200010f8 	.word	0x200010f8
 8010d10:	bf333333 	.word	0xbf333333
 8010d14:	3f333333 	.word	0x3f333333
 8010d18:	200008e8 	.word	0x200008e8
 8010d1c:	42652ee1 	.word	0x42652ee1
 8010d20:	20000cec 	.word	0x20000cec
 8010d24:	20001d78 	.word	0x20001d78
 8010d28:	20001adc 	.word	0x20001adc
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8010d32:	f2c0 8328 	blt.w	8011386 <MotionDI_update+0x1d5e>
 8010d36:	f04f 0a00 	mov.w	sl, #0
 8010d3a:	4e5f      	ldr	r6, [pc, #380]	; (8010eb8 <MotionDI_update+0x1890>)
 8010d3c:	f8a4 a088 	strh.w	sl, [r4, #136]	; 0x88
 8010d40:	f1a6 0c1c 	sub.w	ip, r6, #28
 8010d44:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010d48:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010d4a:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8010d4e:	f1a6 0e64 	sub.w	lr, r6, #100	; 0x64
 8010d52:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8010d56:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010d5a:	f1a6 0c48 	sub.w	ip, r6, #72	; 0x48
 8010d5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010d62:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8010d66:	2300      	movs	r3, #0
 8010d68:	f04f 0e00 	mov.w	lr, #0
 8010d6c:	f1ba 0f01 	cmp.w	sl, #1
 8010d70:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8010d74:	bf98      	it	ls
 8010d76:	f206 660c 	addwls	r6, r6, #1548	; 0x60c
 8010d7a:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
 8010d7e:	f8c4 e060 	str.w	lr, [r4, #96]	; 0x60
 8010d82:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 8010d86:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
 8010d8a:	f8c4 e064 	str.w	lr, [r4, #100]	; 0x64
 8010d8e:	f8c4 e05c 	str.w	lr, [r4, #92]	; 0x5c
 8010d92:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
 8010d96:	8323      	strh	r3, [r4, #24]
 8010d98:	f8c4 e01c 	str.w	lr, [r4, #28]
 8010d9c:	f8c4 e028 	str.w	lr, [r4, #40]	; 0x28
 8010da0:	f8c4 e020 	str.w	lr, [r4, #32]
 8010da4:	f8c4 e02c 	str.w	lr, [r4, #44]	; 0x2c
 8010da8:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
 8010dac:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
 8010db0:	f67e ac6b 	bls.w	800f68a <MotionDI_update+0x62>
 8010db4:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
 8010db8:	ed94 9a0e 	vldr	s18, [r4, #56]	; 0x38
 8010dbc:	edd4 8a0f 	vldr	s17, [r4, #60]	; 0x3c
 8010dc0:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	f000 84cb 	beq.w	8011760 <MotionDI_update+0x2138>
 8010dca:	ee71 1a88 	vadd.f32	s3, s3, s16
 8010dce:	ee72 2a89 	vadd.f32	s5, s5, s18
 8010dd2:	ee32 2a28 	vadd.f32	s4, s4, s17
 8010dd6:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8010dda:	ee22 9a88 	vmul.f32	s18, s5, s16
 8010dde:	ee62 8a08 	vmul.f32	s17, s4, s16
 8010de2:	ee21 8a88 	vmul.f32	s16, s3, s16
 8010de6:	ed84 9a23 	vstr	s18, [r4, #140]	; 0x8c
 8010dea:	edc4 8a24 	vstr	s17, [r4, #144]	; 0x90
 8010dee:	ed84 8a25 	vstr	s16, [r4, #148]	; 0x94
 8010df2:	4e32      	ldr	r6, [pc, #200]	; (8010ebc <MotionDI_update+0x1894>)
 8010df4:	2224      	movs	r2, #36	; 0x24
 8010df6:	f106 0010 	add.w	r0, r6, #16
 8010dfa:	2100      	movs	r1, #0
 8010dfc:	f002 f85e 	bl	8012ebc <memset>
 8010e00:	f894 26c8 	ldrb.w	r2, [r4, #1736]	; 0x6c8
 8010e04:	ed86 9a00 	vstr	s18, [r6]
 8010e08:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8010e0c:	2a01      	cmp	r2, #1
 8010e0e:	edc6 8a01 	vstr	s17, [r6, #4]
 8010e12:	ed86 8a02 	vstr	s16, [r6, #8]
 8010e16:	60f3      	str	r3, [r6, #12]
 8010e18:	61f3      	str	r3, [r6, #28]
 8010e1a:	62f3      	str	r3, [r6, #44]	; 0x2c
 8010e1c:	f240 81c3 	bls.w	80111a6 <MotionDI_update+0x1b7e>
 8010e20:	2303      	movs	r3, #3
 8010e22:	f1b8 0f01 	cmp.w	r8, #1
 8010e26:	f884 36b8 	strb.w	r3, [r4, #1720]	; 0x6b8
 8010e2a:	bf04      	itt	eq
 8010e2c:	2300      	moveq	r3, #0
 8010e2e:	f884 3180 	strbeq.w	r3, [r4, #384]	; 0x180
 8010e32:	f7fe bc2a 	b.w	800f68a <MotionDI_update+0x62>
 8010e36:	4288      	cmp	r0, r1
 8010e38:	f43e ae68 	beq.w	800fb0c <MotionDI_update+0x4e4>
 8010e3c:	7d33      	ldrb	r3, [r6, #20]
 8010e3e:	f50d 7b01 	add.w	fp, sp, #516	; 0x204
 8010e42:	aa58      	add	r2, sp, #352	; 0x160
 8010e44:	9218      	str	r2, [sp, #96]	; 0x60
 8010e46:	aa33      	add	r2, sp, #204	; 0xcc
 8010e48:	921e      	str	r2, [sp, #120]	; 0x78
 8010e4a:	aa65      	add	r2, sp, #404	; 0x194
 8010e4c:	921c      	str	r2, [sp, #112]	; 0x70
 8010e4e:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 8010e52:	edd6 6a07 	vldr	s13, [r6, #28]
 8010e56:	ed96 7a08 	vldr	s14, [r6, #32]
 8010e5a:	edd6 7a06 	vldr	s15, [r6, #24]
 8010e5e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8010e60:	f8ca 2000 	str.w	r2, [sl]
 8010e64:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8010e68:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010e6a:	f884 3684 	strb.w	r3, [r4, #1668]	; 0x684
 8010e6e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8010e72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010e76:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8010e78:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8010e7a:	edc2 6a01 	vstr	s13, [r2, #4]
 8010e7e:	ed82 7a02 	vstr	s14, [r2, #8]
 8010e82:	edc2 7a00 	vstr	s15, [r2]
 8010e86:	f8ca 3004 	str.w	r3, [sl, #4]
 8010e8a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8010e8c:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8010e8e:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8010e90:	f8ca 1008 	str.w	r1, [sl, #8]
 8010e94:	f8ca 200c 	str.w	r2, [sl, #12]
 8010e98:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 8010e9a:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8010e9c:	f8ca 3010 	str.w	r3, [sl, #16]
 8010ea0:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010ea2:	4f07      	ldr	r7, [pc, #28]	; (8010ec0 <MotionDI_update+0x1898>)
 8010ea4:	f8ca 0014 	str.w	r0, [sl, #20]
 8010ea8:	f8ca 1018 	str.w	r1, [sl, #24]
 8010eac:	f8ca 201c 	str.w	r2, [sl, #28]
 8010eb0:	f8ca 3020 	str.w	r3, [sl, #32]
 8010eb4:	f7fe bbde 	b.w	800f674 <MotionDI_update+0x4c>
 8010eb8:	20001704 	.word	0x20001704
 8010ebc:	20001d20 	.word	0x20001d20
 8010ec0:	20001cec 	.word	0x20001cec
 8010ec4:	4ad6      	ldr	r2, [pc, #856]	; (8011220 <MotionDI_update+0x1bf8>)
 8010ec6:	4dd7      	ldr	r5, [pc, #860]	; (8011224 <MotionDI_update+0x1bfc>)
 8010ec8:	af36      	add	r7, sp, #216	; 0xd8
 8010eca:	2300      	movs	r3, #0
 8010ecc:	f5a2 71dc 	sub.w	r1, r2, #440	; 0x1b8
 8010ed0:	a839      	add	r0, sp, #228	; 0xe4
 8010ed2:	e9c7 3300 	strd	r3, r3, [r7]
 8010ed6:	60bb      	str	r3, [r7, #8]
 8010ed8:	f7f7 fad4 	bl	8008484 <rotVect>
 8010edc:	4ad2      	ldr	r2, [pc, #840]	; (8011228 <MotionDI_update+0x1c00>)
 8010ede:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8010ee2:	f5a2 71d6 	sub.w	r1, r2, #428	; 0x1ac
 8010ee6:	4640      	mov	r0, r8
 8010ee8:	f7f7 facc 	bl	8008484 <rotVect>
 8010eec:	4acf      	ldr	r2, [pc, #828]	; (801122c <MotionDI_update+0x1c04>)
 8010eee:	a83f      	add	r0, sp, #252	; 0xfc
 8010ef0:	f5a2 71d0 	sub.w	r1, r2, #416	; 0x1a0
 8010ef4:	f7f7 fac6 	bl	8008484 <rotVect>
 8010ef8:	eddd 7a39 	vldr	s15, [sp, #228]	; 0xe4
 8010efc:	ed9d 7a3a 	vldr	s14, [sp, #232]	; 0xe8
 8010f00:	edd8 9a00 	vldr	s19, [r8]
 8010f04:	ed98 aa01 	vldr	s20, [r8, #4]
 8010f08:	ed9d ba41 	vldr	s22, [sp, #260]	; 0x104
 8010f0c:	ed9d 8a3f 	vldr	s16, [sp, #252]	; 0xfc
 8010f10:	eddd 8a40 	vldr	s17, [sp, #256]	; 0x100
 8010f14:	f895 38e0 	ldrb.w	r3, [r5, #2272]	; 0x8e0
 8010f18:	9327      	str	r3, [sp, #156]	; 0x9c
 8010f1a:	eeb1 ca67 	vneg.f32	s24, s15
 8010f1e:	eef1 ca47 	vneg.f32	s25, s14
 8010f22:	eef1 9a69 	vneg.f32	s19, s19
 8010f26:	eeb1 aa4a 	vneg.f32	s20, s20
 8010f2a:	eef1 ba4b 	vneg.f32	s23, s22
 8010f2e:	ed8d 8a40 	vstr	s16, [sp, #256]	; 0x100
 8010f32:	ed8d ca3a 	vstr	s24, [sp, #232]	; 0xe8
 8010f36:	edcd ca39 	vstr	s25, [sp, #228]	; 0xe4
 8010f3a:	edc8 9a01 	vstr	s19, [r8, #4]
 8010f3e:	ed88 aa00 	vstr	s20, [r8]
 8010f42:	edcd ba41 	vstr	s23, [sp, #260]	; 0x104
 8010f46:	edcd 8a3f 	vstr	s17, [sp, #252]	; 0xfc
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	f040 819d 	bne.w	801128a <MotionDI_update+0x1c62>
 8010f50:	eddd aa3b 	vldr	s21, [sp, #236]	; 0xec
 8010f54:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 8010f58:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 8010f5c:	49b4      	ldr	r1, [pc, #720]	; (8011230 <MotionDI_update+0x1c08>)
 8010f5e:	edd4 7ab0 	vldr	s15, [r4, #704]	; 0x2c0
 8010f62:	f8d4 e2c4 	ldr.w	lr, [r4, #708]	; 0x2c4
 8010f66:	f8d4 c2c8 	ldr.w	ip, [r4, #712]	; 0x2c8
 8010f6a:	edc4 7ab4 	vstr	s15, [r4, #720]	; 0x2d0
 8010f6e:	ee00 2a10 	vmov	s0, r2
 8010f72:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8010f76:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
 8010f7a:	f8c4 22cc 	str.w	r2, [r4, #716]	; 0x2cc
 8010f7e:	ee20 0a09 	vmul.f32	s0, s0, s18
 8010f82:	f043 0302 	orr.w	r3, r3, #2
 8010f86:	f501 7af9 	add.w	sl, r1, #498	; 0x1f2
 8010f8a:	f083 0301 	eor.w	r3, r3, #1
 8010f8e:	22f8      	movs	r2, #248	; 0xf8
 8010f90:	4658      	mov	r0, fp
 8010f92:	ed8d 0a26 	vstr	s0, [sp, #152]	; 0x98
 8010f96:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
 8010f9a:	f8c4 e2d4 	str.w	lr, [r4, #724]	; 0x2d4
 8010f9e:	f8c4 c2d8 	str.w	ip, [r4, #728]	; 0x2d8
 8010fa2:	f001 ff7d 	bl	8012ea0 <memcpy>
 8010fa6:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8010faa:	f8d5 c0c4 	ldr.w	ip, [r5, #196]	; 0xc4
 8010fae:	f8d5 80c0 	ldr.w	r8, [r5, #192]	; 0xc0
 8010fb2:	edd5 7a2f 	vldr	s15, [r5, #188]	; 0xbc
 8010fb6:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
 8010fba:	f10a 3eff 	add.w	lr, sl, #4294967295
 8010fbe:	edcb ca06 	vstr	s25, [fp, #24]
 8010fc2:	ed8b ca07 	vstr	s24, [fp, #28]
 8010fc6:	edcb aa08 	vstr	s21, [fp, #32]
 8010fca:	edcb 8a03 	vstr	s17, [fp, #12]
 8010fce:	ed8b 8a04 	vstr	s16, [fp, #16]
 8010fd2:	edcb ba05 	vstr	s23, [fp, #20]
 8010fd6:	ed8b aa09 	vstr	s20, [fp, #36]	; 0x24
 8010fda:	edcb 9a0a 	vstr	s19, [fp, #40]	; 0x28
 8010fde:	e9cd ea13 	strd	lr, sl, [sp, #76]	; 0x4c
 8010fe2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010fe4:	4993      	ldr	r1, [pc, #588]	; (8011234 <MotionDI_update+0x1c0c>)
 8010fe6:	9210      	str	r2, [sp, #64]	; 0x40
 8010fe8:	2300      	movs	r3, #0
 8010fea:	f1aa 0002 	sub.w	r0, sl, #2
 8010fee:	9012      	str	r0, [sp, #72]	; 0x48
 8010ff0:	9711      	str	r7, [sp, #68]	; 0x44
 8010ff2:	f8c4 838c 	str.w	r8, [r4, #908]	; 0x38c
 8010ff6:	f8c4 c390 	str.w	ip, [r4, #912]	; 0x390
 8010ffa:	edc4 7ae2 	vstr	s15, [r4, #904]	; 0x388
 8010ffe:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
 8011002:	f8c4 3278 	str.w	r3, [r4, #632]	; 0x278
 8011006:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 801100a:	9115      	str	r1, [sp, #84]	; 0x54
 801100c:	edd4 3a47 	vldr	s7, [r4, #284]	; 0x11c
 8011010:	ed94 3a46 	vldr	s6, [r4, #280]	; 0x118
 8011014:	edd4 2a45 	vldr	s5, [r4, #276]	; 0x114
 8011018:	edcd 3a25 	vstr	s7, [sp, #148]	; 0x94
 801101c:	f5aa 7395 	sub.w	r3, sl, #298	; 0x12a
 8011020:	ed8d 3a24 	vstr	s6, [sp, #144]	; 0x90
 8011024:	edcd 2a23 	vstr	s5, [sp, #140]	; 0x8c
 8011028:	ed94 2a3e 	vldr	s4, [r4, #248]	; 0xf8
 801102c:	edd4 1a3d 	vldr	s3, [r4, #244]	; 0xf4
 8011030:	ed94 1a3c 	vldr	s2, [r4, #240]	; 0xf0
 8011034:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 8011038:	930f      	str	r3, [sp, #60]	; 0x3c
 801103a:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
 801103e:	ed8d 2a22 	vstr	s4, [sp, #136]	; 0x88
 8011042:	f50d 788c 	add.w	r8, sp, #280	; 0x118
 8011046:	edcd 1a21 	vstr	s3, [sp, #132]	; 0x84
 801104a:	ed8d 1a20 	vstr	s2, [sp, #128]	; 0x80
 801104e:	edcd 0a1f 	vstr	s1, [sp, #124]	; 0x7c
 8011052:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8011056:	f7ef fa1b 	bl	8000490 <__aeabi_f2d>
 801105a:	4602      	mov	r2, r0
 801105c:	460b      	mov	r3, r1
 801105e:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
 8011062:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8011066:	f7ef f9f1 	bl	800044c <__aeabi_ui2d>
 801106a:	460b      	mov	r3, r1
 801106c:	f894 1104 	ldrb.w	r1, [r4, #260]	; 0x104
 8011070:	9108      	str	r1, [sp, #32]
 8011072:	f894 1103 	ldrb.w	r1, [r4, #259]	; 0x103
 8011076:	9107      	str	r1, [sp, #28]
 8011078:	f894 1102 	ldrb.w	r1, [r4, #258]	; 0x102
 801107c:	9106      	str	r1, [sp, #24]
 801107e:	f894 1101 	ldrb.w	r1, [r4, #257]	; 0x101
 8011082:	9105      	str	r1, [sp, #20]
 8011084:	f894 1100 	ldrb.w	r1, [r4, #256]	; 0x100
 8011088:	9104      	str	r1, [sp, #16]
 801108a:	4602      	mov	r2, r0
 801108c:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
 8011090:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8011094:	f7ef f9fc 	bl	8000490 <__aeabi_f2d>
 8011098:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801109a:	9300      	str	r3, [sp, #0]
 801109c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80110a0:	a99c      	add	r1, sp, #624	; 0x270
 80110a2:	ab8d      	add	r3, sp, #564	; 0x234
 80110a4:	aa87      	add	r2, sp, #540	; 0x21c
 80110a6:	a8a3      	add	r0, sp, #652	; 0x28c
 80110a8:	9101      	str	r1, [sp, #4]
 80110aa:	ed9d 0a26 	vldr	s0, [sp, #152]	; 0x98
 80110ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 80110b0:	eddd 3a25 	vldr	s7, [sp, #148]	; 0x94
 80110b4:	ed9d 3a24 	vldr	s6, [sp, #144]	; 0x90
 80110b8:	eddd 2a23 	vldr	s5, [sp, #140]	; 0x8c
 80110bc:	ed9d 2a22 	vldr	s4, [sp, #136]	; 0x88
 80110c0:	eddd 1a21 	vldr	s3, [sp, #132]	; 0x84
 80110c4:	ed9d 1a20 	vldr	s2, [sp, #128]	; 0x80
 80110c8:	eddd 0a1f 	vldr	s1, [sp, #124]	; 0x7c
 80110cc:	f7fd fd0e 	bl	800eaec <SpacePointAlgorithm.isra.0>
 80110d0:	46d4      	mov	ip, sl
 80110d2:	f8d5 10c8 	ldr.w	r1, [r5, #200]	; 0xc8
 80110d6:	f894 3436 	ldrb.w	r3, [r4, #1078]	; 0x436
 80110da:	f84c 1f02 	str.w	r1, [ip, #2]!
 80110de:	f10a 0106 	add.w	r1, sl, #6
 80110e2:	f10a 0a0a 	add.w	sl, sl, #10
 80110e6:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
 80110ea:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 80110ee:	6008      	str	r0, [r1, #0]
 80110f0:	2b01      	cmp	r3, #1
 80110f2:	f8ca 2000 	str.w	r2, [sl]
 80110f6:	f8d8 e000 	ldr.w	lr, [r8]
 80110fa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80110fe:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8011102:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8011106:	f000 830c 	beq.w	8011722 <MotionDI_update+0x20fa>
 801110a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801110c:	3b01      	subs	r3, #1
 801110e:	b2db      	uxtb	r3, r3
 8011110:	2b08      	cmp	r3, #8
 8011112:	bf98      	it	ls
 8011114:	f885 38e0 	strbls.w	r3, [r5, #2272]	; 0x8e0
 8011118:	eddf 7a47 	vldr	s15, [pc, #284]	; 8011238 <MotionDI_update+0x1c10>
 801111c:	ed97 6a00 	vldr	s12, [r7]
 8011120:	edd7 6a01 	vldr	s13, [r7, #4]
 8011124:	ed97 7a02 	vldr	s14, [r7, #8]
 8011128:	f894 3435 	ldrb.w	r3, [r4, #1077]	; 0x435
 801112c:	ee26 5a27 	vmul.f32	s10, s12, s15
 8011130:	ee66 5aa7 	vmul.f32	s11, s13, s15
 8011134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011138:	ed84 5aac 	vstr	s10, [r4, #688]	; 0x2b0
 801113c:	edc4 5aad 	vstr	s11, [r4, #692]	; 0x2b4
 8011140:	edc4 7aae 	vstr	s15, [r4, #696]	; 0x2b8
 8011144:	2b00      	cmp	r3, #0
 8011146:	d07f      	beq.n	8011248 <MotionDI_update+0x1c20>
 8011148:	f894 36ed 	ldrb.w	r3, [r4, #1773]	; 0x6ed
 801114c:	2b09      	cmp	r3, #9
 801114e:	f200 8144 	bhi.w	80113da <MotionDI_update+0x1db2>
 8011152:	3301      	adds	r3, #1
 8011154:	f884 36ed 	strb.w	r3, [r4, #1773]	; 0x6ed
 8011158:	e078      	b.n	801124c <MotionDI_update+0x1c24>
 801115a:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 801115e:	fb03 f301 	mul.w	r3, r3, r1
 8011162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011166:	bf34      	ite	cc
 8011168:	2300      	movcc	r3, #0
 801116a:	2301      	movcs	r3, #1
 801116c:	f7fe bccb 	b.w	800fb06 <MotionDI_update+0x4de>
 8011170:	4b32      	ldr	r3, [pc, #200]	; (801123c <MotionDI_update+0x1c14>)
 8011172:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8011174:	9200      	str	r2, [sp, #0]
 8011176:	4651      	mov	r1, sl
 8011178:	f1a3 020c 	sub.w	r2, r3, #12
 801117c:	4618      	mov	r0, r3
 801117e:	eeb0 0a49 	vmov.f32	s0, s18
 8011182:	f7f8 f8df 	bl	8009344 <SpacePointGyroProp>
 8011186:	f7ff bbad 	b.w	80108e4 <MotionDI_update+0x12bc>
 801118a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801118c:	9200      	str	r2, [sp, #0]
 801118e:	f108 0378 	add.w	r3, r8, #120	; 0x78
 8011192:	eeb0 0a49 	vmov.f32	s0, s18
 8011196:	4651      	mov	r1, sl
 8011198:	4618      	mov	r0, r3
 801119a:	f108 026c 	add.w	r2, r8, #108	; 0x6c
 801119e:	f7f8 f8d1 	bl	8009344 <SpacePointGyroProp>
 80111a2:	f7ff ba6b 	b.w	801067c <MotionDI_update+0x1054>
 80111a6:	3201      	adds	r2, #1
 80111a8:	2302      	movs	r3, #2
 80111aa:	f884 26c8 	strb.w	r2, [r4, #1736]	; 0x6c8
 80111ae:	f884 36b8 	strb.w	r3, [r4, #1720]	; 0x6b8
 80111b2:	f7fe ba6a 	b.w	800f68a <MotionDI_update+0x62>
 80111b6:	f884 36ec 	strb.w	r3, [r4, #1772]	; 0x6ec
 80111ba:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 80111be:	f083 0302 	eor.w	r3, r3, #2
 80111c2:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
 80111c6:	f7fe bb08 	b.w	800f7da <MotionDI_update+0x1b2>
 80111ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80111ce:	eddd aa3e 	vldr	s21, [sp, #248]	; 0xf8
 80111d2:	ed9f ba1b 	vldr	s22, [pc, #108]	; 8011240 <MotionDI_update+0x1c18>
 80111d6:	4d1b      	ldr	r5, [pc, #108]	; (8011244 <MotionDI_update+0x1c1c>)
 80111d8:	eee7 7a07 	vfma.f32	s15, s14, s14
 80111dc:	eeea 7aaa 	vfma.f32	s15, s21, s21
 80111e0:	ee17 0a90 	vmov	r0, s15
 80111e4:	f7ef f954 	bl	8000490 <__aeabi_f2d>
 80111e8:	ec41 0b10 	vmov	d0, r0, r1
 80111ec:	f002 f848 	bl	8013280 <sqrt>
 80111f0:	ec51 0b10 	vmov	r0, r1, d0
 80111f4:	f7ef fc9c 	bl	8000b30 <__aeabi_d2f>
 80111f8:	ee07 0a90 	vmov	s15, r0
 80111fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011200:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8011204:	ee2a aa27 	vmul.f32	s20, s20, s15
 8011208:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801120c:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8011210:	ed8d aa3c 	vstr	s20, [sp, #240]	; 0xf0
 8011214:	edcd 9a3d 	vstr	s19, [sp, #244]	; 0xf4
 8011218:	edcd aa3e 	vstr	s21, [sp, #248]	; 0xf8
 801121c:	e404      	b.n	8010a28 <MotionDI_update+0x1400>
 801121e:	bf00      	nop
 8011220:	200018f4 	.word	0x200018f4
 8011224:	20000000 	.word	0x20000000
 8011228:	20001900 	.word	0x20001900
 801122c:	200018e8 	.word	0x200018e8
 8011230:	200018dc 	.word	0x200018dc
 8011234:	20000010 	.word	0x20000010
 8011238:	42652ee1 	.word	0x42652ee1
 801123c:	20001954 	.word	0x20001954
 8011240:	bf3504f3 	.word	0xbf3504f3
 8011244:	3f3504f3 	.word	0x3f3504f3
 8011248:	f884 36ed 	strb.w	r3, [r4, #1773]	; 0x6ed
 801124c:	4bc0      	ldr	r3, [pc, #768]	; (8011550 <MotionDI_update+0x1f28>)
 801124e:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
 8011252:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8011256:	6098      	str	r0, [r3, #8]
 8011258:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
 801125c:	f843 1b04 	str.w	r1, [r3], #4
 8011260:	f8d5 10c0 	ldr.w	r1, [r5, #192]	; 0xc0
 8011264:	6019      	str	r1, [r3, #0]
 8011266:	f8d5 70a4 	ldr.w	r7, [r5, #164]	; 0xa4
 801126a:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
 801126e:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8011272:	f8c4 73e8 	str.w	r7, [r4, #1000]	; 0x3e8
 8011276:	f082 0302 	eor.w	r3, r2, #2
 801127a:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
 801127e:	f8c4 03ec 	str.w	r0, [r4, #1004]	; 0x3ec
 8011282:	f8c4 13f0 	str.w	r1, [r4, #1008]	; 0x3f0
 8011286:	f7fe bab1 	b.w	800f7ec <MotionDI_update+0x1c4>
 801128a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801128e:	eddd aa3b 	vldr	s21, [sp, #236]	; 0xec
 8011292:	eee7 7a07 	vfma.f32	s15, s14, s14
 8011296:	eeb7 da00 	vmov.f32	s26, #112	; 0x3f800000  1.0
 801129a:	eeea 7aaa 	vfma.f32	s15, s21, s21
 801129e:	ee17 0a90 	vmov	r0, s15
 80112a2:	f7ef f8f5 	bl	8000490 <__aeabi_f2d>
 80112a6:	ec41 0b10 	vmov	d0, r0, r1
 80112aa:	f001 ffe9 	bl	8013280 <sqrt>
 80112ae:	ec51 0b10 	vmov	r0, r1, d0
 80112b2:	f7ef fc3d 	bl	8000b30 <__aeabi_d2f>
 80112b6:	ee07 0a90 	vmov	s15, r0
 80112ba:	ee8d 7a27 	vdiv.f32	s14, s26, s15
 80112be:	ee68 7a08 	vmul.f32	s15, s16, s16
 80112c2:	ee6c ca87 	vmul.f32	s25, s25, s14
 80112c6:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80112ca:	ee2c ca07 	vmul.f32	s24, s24, s14
 80112ce:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 80112d2:	ee6a aa87 	vmul.f32	s21, s21, s14
 80112d6:	ee17 0a90 	vmov	r0, s15
 80112da:	edcd ca39 	vstr	s25, [sp, #228]	; 0xe4
 80112de:	ed8d ca3a 	vstr	s24, [sp, #232]	; 0xe8
 80112e2:	edcd aa3b 	vstr	s21, [sp, #236]	; 0xec
 80112e6:	f7ef f8d3 	bl	8000490 <__aeabi_f2d>
 80112ea:	ec41 0b10 	vmov	d0, r0, r1
 80112ee:	f001 ffc7 	bl	8013280 <sqrt>
 80112f2:	ec51 0b10 	vmov	r0, r1, d0
 80112f6:	f7ef fc1b 	bl	8000b30 <__aeabi_d2f>
 80112fa:	ee07 0a90 	vmov	s15, r0
 80112fe:	eecd 7a27 	vdiv.f32	s15, s26, s15
 8011302:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011306:	ee28 8a27 	vmul.f32	s16, s16, s15
 801130a:	ee6b baa7 	vmul.f32	s23, s23, s15
 801130e:	edcd 8a3f 	vstr	s17, [sp, #252]	; 0xfc
 8011312:	ed8d 8a40 	vstr	s16, [sp, #256]	; 0x100
 8011316:	edcd ba41 	vstr	s23, [sp, #260]	; 0x104
 801131a:	e61b      	b.n	8010f54 <MotionDI_update+0x192c>
 801131c:	f10e 0c01 	add.w	ip, lr, #1
 8011320:	ee07 ca90 	vmov	s15, ip
 8011324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011328:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801132c:	ee87 6a27 	vdiv.f32	s12, s14, s15
 8011330:	4d88      	ldr	r5, [pc, #544]	; (8011554 <MotionDI_update+0x1f2c>)
 8011332:	4628      	mov	r0, r5
 8011334:	f206 4284 	addw	r2, r6, #1156	; 0x484
 8011338:	f506 6191 	add.w	r1, r6, #1160	; 0x488
 801133c:	ecf0 6a01 	vldmia	r0!, {s13}
 8011340:	ed92 4a00 	vldr	s8, [r2]
 8011344:	ed90 7a00 	vldr	s14, [r0]
 8011348:	edd1 4a00 	vldr	s9, [r1]
 801134c:	edd5 7a02 	vldr	s15, [r5, #8]
 8011350:	ee05 ea90 	vmov	s11, lr
 8011354:	f206 408c 	addw	r0, r6, #1164	; 0x48c
 8011358:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 801135c:	ed90 5a00 	vldr	s10, [r0]
 8011360:	eee5 6a84 	vfma.f32	s13, s11, s8
 8011364:	eea5 7aa4 	vfma.f32	s14, s11, s9
 8011368:	eee5 7a85 	vfma.f32	s15, s11, s10
 801136c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011370:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011374:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011378:	edc2 6a00 	vstr	s13, [r2]
 801137c:	ed81 7a00 	vstr	s14, [r1]
 8011380:	edc0 7a00 	vstr	s15, [r0]
 8011384:	e44f      	b.n	8010c26 <MotionDI_update+0x15fe>
 8011386:	3a01      	subs	r2, #1
 8011388:	ee07 2a90 	vmov	s15, r2
 801138c:	ee28 6a06 	vmul.f32	s12, s16, s12
 8011390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011394:	ed94 7a00 	vldr	s14, [r4]
 8011398:	eec6 5a27 	vdiv.f32	s11, s12, s15
 801139c:	eef4 5ac7 	vcmpe.f32	s11, s14
 80113a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113a4:	f57f acc7 	bpl.w	8010d36 <MotionDI_update+0x170e>
 80113a8:	edd4 7a03 	vldr	s15, [r4, #12]
 80113ac:	eef4 6ae7 	vcmpe.f32	s13, s15
 80113b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113b4:	f57f acbf 	bpl.w	8010d36 <MotionDI_update+0x170e>
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	f43f acbc 	beq.w	8010d36 <MotionDI_update+0x170e>
 80113be:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 80113c2:	3301      	adds	r3, #1
 80113c4:	fa1f fa83 	uxth.w	sl, r3
 80113c8:	e4b7      	b.n	8010d3a <MotionDI_update+0x1712>
 80113ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80113cc:	ed83 6a22 	vstr	s12, [r3, #136]	; 0x88
 80113d0:	edc3 6a23 	vstr	s13, [r3, #140]	; 0x8c
 80113d4:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 80113d8:	e6ef      	b.n	80111ba <MotionDI_update+0x1b92>
 80113da:	ed84 6af1 	vstr	s12, [r4, #964]	; 0x3c4
 80113de:	edc4 6af2 	vstr	s13, [r4, #968]	; 0x3c8
 80113e2:	ed84 7af3 	vstr	s14, [r4, #972]	; 0x3cc
 80113e6:	e731      	b.n	801124c <MotionDI_update+0x1c24>
 80113e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80113ec:	6572      	str	r2, [r6, #84]	; 0x54
 80113ee:	f8a6 3058 	strh.w	r3, [r6, #88]	; 0x58
 80113f2:	f7fe bb9f 	b.w	800fb34 <MotionDI_update+0x50c>
 80113f6:	e9dd 701c 	ldrd	r7, r0, [sp, #112]	; 0x70
 80113fa:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 80113fe:	f8d8 108c 	ldr.w	r1, [r8, #140]	; 0x8c
 8011402:	f8c8 3098 	str.w	r3, [r8, #152]	; 0x98
 8011406:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 801140a:	f8d8 6094 	ldr.w	r6, [r8, #148]	; 0x94
 801140e:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 8011412:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
 8011416:	4950      	ldr	r1, [pc, #320]	; (8011558 <MotionDI_update+0x1f30>)
 8011418:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
 801141c:	f042 0301 	orr.w	r3, r2, #1
 8011420:	463a      	mov	r2, r7
 8011422:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
 8011426:	f7f7 fa35 	bl	8008894 <m_qmult_eml>
 801142a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801142c:	494b      	ldr	r1, [pc, #300]	; (801155c <MotionDI_update+0x1f34>)
 801142e:	462a      	mov	r2, r5
 8011430:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8011434:	f7f7 fa2e 	bl	8008894 <m_qmult_eml>
 8011438:	4629      	mov	r1, r5
 801143a:	4638      	mov	r0, r7
 801143c:	f7f7 fa2a 	bl	8008894 <m_qmult_eml>
 8011440:	ed95 9a01 	vldr	s18, [r5, #4]
 8011444:	edd5 9a00 	vldr	s19, [r5]
 8011448:	edd5 8a02 	vldr	s17, [r5, #8]
 801144c:	ed95 8a03 	vldr	s16, [r5, #12]
 8011450:	ee69 7a09 	vmul.f32	s15, s18, s18
 8011454:	eee9 7aa9 	vfma.f32	s15, s19, s19
 8011458:	eee8 7aa8 	vfma.f32	s15, s17, s17
 801145c:	eee8 7a08 	vfma.f32	s15, s16, s16
 8011460:	ee17 0a90 	vmov	r0, s15
 8011464:	f7ef f814 	bl	8000490 <__aeabi_f2d>
 8011468:	ec41 0b10 	vmov	d0, r0, r1
 801146c:	f001 ff08 	bl	8013280 <sqrt>
 8011470:	ec51 0b10 	vmov	r0, r1, d0
 8011474:	f7ef fb5c 	bl	8000b30 <__aeabi_d2f>
 8011478:	f894 3161 	ldrb.w	r3, [r4, #353]	; 0x161
 801147c:	ed98 6a33 	vldr	s12, [r8, #204]	; 0xcc
 8011480:	edd8 6a32 	vldr	s13, [r8, #200]	; 0xc8
 8011484:	edd8 4a34 	vldr	s9, [r8, #208]	; 0xd0
 8011488:	f8d8 10ac 	ldr.w	r1, [r8, #172]	; 0xac
 801148c:	f8d8 20b0 	ldr.w	r2, [r8, #176]	; 0xb0
 8011490:	f8c8 10bc 	str.w	r1, [r8, #188]	; 0xbc
 8011494:	ee07 3a10 	vmov	s14, r3
 8011498:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801149c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80114a0:	eec5 7a07 	vdiv.f32	s15, s10, s14
 80114a4:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 80114a8:	f8c8 30b8 	str.w	r3, [r8, #184]	; 0xb8
 80114ac:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
 80114b0:	f8c8 20c0 	str.w	r2, [r8, #192]	; 0xc0
 80114b4:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
 80114b8:	ee07 0a10 	vmov	s14, r0
 80114bc:	eec5 5a07 	vdiv.f32	s11, s10, s14
 80114c0:	ee27 6a86 	vmul.f32	s12, s15, s12
 80114c4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80114c8:	ee26 7a06 	vmul.f32	s14, s12, s12
 80114cc:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80114d0:	eea6 7aa6 	vfma.f32	s14, s13, s13
 80114d4:	ee69 9aa5 	vmul.f32	s19, s19, s11
 80114d8:	eea7 7aa7 	vfma.f32	s14, s15, s15
 80114dc:	ee29 9a25 	vmul.f32	s18, s18, s11
 80114e0:	ee68 8aa5 	vmul.f32	s17, s17, s11
 80114e4:	ee28 8a25 	vmul.f32	s16, s16, s11
 80114e8:	eeb4 7ac5 	vcmpe.f32	s14, s10
 80114ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114f0:	ed88 6a37 	vstr	s12, [r8, #220]	; 0xdc
 80114f4:	edc8 6a36 	vstr	s13, [r8, #216]	; 0xd8
 80114f8:	edc8 7a38 	vstr	s15, [r8, #224]	; 0xe0
 80114fc:	edc5 9a00 	vstr	s19, [r5]
 8011500:	edc8 9a1e 	vstr	s19, [r8, #120]	; 0x78
 8011504:	ed85 9a01 	vstr	s18, [r5, #4]
 8011508:	ed88 9a1f 	vstr	s18, [r8, #124]	; 0x7c
 801150c:	edc5 8a02 	vstr	s17, [r5, #8]
 8011510:	edc8 8a20 	vstr	s17, [r8, #128]	; 0x80
 8011514:	ed85 8a03 	vstr	s16, [r5, #12]
 8011518:	ed88 8a21 	vstr	s16, [r8, #132]	; 0x84
 801151c:	f100 846a 	bmi.w	8011df4 <MotionDI_update+0x27cc>
 8011520:	2000      	movs	r0, #0
 8011522:	2300      	movs	r3, #0
 8011524:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8011528:	f8c8 00e4 	str.w	r0, [r8, #228]	; 0xe4
 801152c:	f8c8 30a8 	str.w	r3, [r8, #168]	; 0xa8
 8011530:	f8c8 30ac 	str.w	r3, [r8, #172]	; 0xac
 8011534:	f8c8 30b0 	str.w	r3, [r8, #176]	; 0xb0
 8011538:	f8c8 30e8 	str.w	r3, [r8, #232]	; 0xe8
 801153c:	f8c8 30ec 	str.w	r3, [r8, #236]	; 0xec
 8011540:	f8c8 30f0 	str.w	r3, [r8, #240]	; 0xf0
 8011544:	f8c8 20b4 	str.w	r2, [r8, #180]	; 0xb4
 8011548:	f8c8 20f4 	str.w	r2, [r8, #244]	; 0xf4
 801154c:	f7ff b8d1 	b.w	80106f2 <MotionDI_update+0x10ca>
 8011550:	20001a98 	.word	0x20001a98
 8011554:	20000414 	.word	0x20000414
 8011558:	20001b84 	.word	0x20001b84
 801155c:	20001b64 	.word	0x20001b64
 8011560:	e9dd 701c 	ldrd	r7, r0, [sp, #112]	; 0x70
 8011564:	f8d4 32cc 	ldr.w	r3, [r4, #716]	; 0x2cc
 8011568:	f8d4 12d0 	ldr.w	r1, [r4, #720]	; 0x2d0
 801156c:	f8c4 32dc 	str.w	r3, [r4, #732]	; 0x2dc
 8011570:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 8011574:	f8d4 62d8 	ldr.w	r6, [r4, #728]	; 0x2d8
 8011578:	f8c4 12e0 	str.w	r1, [r4, #736]	; 0x2e0
 801157c:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8011580:	49a2      	ldr	r1, [pc, #648]	; (801180c <MotionDI_update+0x21e4>)
 8011582:	f8c4 62e8 	str.w	r6, [r4, #744]	; 0x2e8
 8011586:	f042 0301 	orr.w	r3, r2, #1
 801158a:	463a      	mov	r2, r7
 801158c:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
 8011590:	f7f7 f980 	bl	8008894 <m_qmult_eml>
 8011594:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8011596:	499e      	ldr	r1, [pc, #632]	; (8011810 <MotionDI_update+0x21e8>)
 8011598:	462a      	mov	r2, r5
 801159a:	f101 0040 	add.w	r0, r1, #64	; 0x40
 801159e:	f7f7 f979 	bl	8008894 <m_qmult_eml>
 80115a2:	4629      	mov	r1, r5
 80115a4:	4638      	mov	r0, r7
 80115a6:	f7f7 f975 	bl	8008894 <m_qmult_eml>
 80115aa:	edd5 9a01 	vldr	s19, [r5, #4]
 80115ae:	ed95 aa00 	vldr	s20, [r5]
 80115b2:	edd5 8a02 	vldr	s17, [r5, #8]
 80115b6:	ed95 8a03 	vldr	s16, [r5, #12]
 80115ba:	ee69 7aa9 	vmul.f32	s15, s19, s19
 80115be:	eeea 7a0a 	vfma.f32	s15, s20, s20
 80115c2:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80115c6:	eee8 7a08 	vfma.f32	s15, s16, s16
 80115ca:	ee17 0a90 	vmov	r0, s15
 80115ce:	f7ee ff5f 	bl	8000490 <__aeabi_f2d>
 80115d2:	ec41 0b10 	vmov	d0, r0, r1
 80115d6:	f001 fe53 	bl	8013280 <sqrt>
 80115da:	ec51 0b10 	vmov	r0, r1, d0
 80115de:	f7ef faa7 	bl	8000b30 <__aeabi_d2f>
 80115e2:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
 80115e6:	ed94 6ac4 	vldr	s12, [r4, #784]	; 0x310
 80115ea:	edd4 6ac3 	vldr	s13, [r4, #780]	; 0x30c
 80115ee:	edd4 4ac5 	vldr	s9, [r4, #788]	; 0x314
 80115f2:	f8d4 12f0 	ldr.w	r1, [r4, #752]	; 0x2f0
 80115f6:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
 80115fa:	f8c4 1300 	str.w	r1, [r4, #768]	; 0x300
 80115fe:	ee07 3a10 	vmov	s14, r3
 8011602:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8011606:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801160a:	eec5 7a07 	vdiv.f32	s15, s10, s14
 801160e:	f8d4 32ec 	ldr.w	r3, [r4, #748]	; 0x2ec
 8011612:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
 8011616:	f8d4 32f8 	ldr.w	r3, [r4, #760]	; 0x2f8
 801161a:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
 801161e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
 8011622:	ee07 0a10 	vmov	s14, r0
 8011626:	eec5 5a07 	vdiv.f32	s11, s10, s14
 801162a:	ee27 6a86 	vmul.f32	s12, s15, s12
 801162e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8011632:	ee26 7a06 	vmul.f32	s14, s12, s12
 8011636:	ee67 7aa4 	vmul.f32	s15, s15, s9
 801163a:	eea6 7aa6 	vfma.f32	s14, s13, s13
 801163e:	ee25 aa8a 	vmul.f32	s20, s11, s20
 8011642:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8011646:	ee65 9aa9 	vmul.f32	s19, s11, s19
 801164a:	ee65 8aa8 	vmul.f32	s17, s11, s17
 801164e:	ee28 8a25 	vmul.f32	s16, s16, s11
 8011652:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8011656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801165a:	ed84 6ac8 	vstr	s12, [r4, #800]	; 0x320
 801165e:	edc4 6ac7 	vstr	s13, [r4, #796]	; 0x31c
 8011662:	edc4 7ac9 	vstr	s15, [r4, #804]	; 0x324
 8011666:	ed85 aa00 	vstr	s20, [r5]
 801166a:	ed84 aaaf 	vstr	s20, [r4, #700]	; 0x2bc
 801166e:	edc5 9a01 	vstr	s19, [r5, #4]
 8011672:	edc4 9ab0 	vstr	s19, [r4, #704]	; 0x2c0
 8011676:	edc5 8a02 	vstr	s17, [r5, #8]
 801167a:	edc4 8ab1 	vstr	s17, [r4, #708]	; 0x2c4
 801167e:	ed85 8a03 	vstr	s16, [r5, #12]
 8011682:	ed84 8ab2 	vstr	s16, [r4, #712]	; 0x2c8
 8011686:	f100 83c5 	bmi.w	8011e14 <MotionDI_update+0x27ec>
 801168a:	2000      	movs	r0, #0
 801168c:	2300      	movs	r3, #0
 801168e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8011692:	f8c4 0328 	str.w	r0, [r4, #808]	; 0x328
 8011696:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
 801169a:	f8c4 32f0 	str.w	r3, [r4, #752]	; 0x2f0
 801169e:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
 80116a2:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
 80116a6:	f8c4 3330 	str.w	r3, [r4, #816]	; 0x330
 80116aa:	f8c4 3334 	str.w	r3, [r4, #820]	; 0x334
 80116ae:	f8c4 22f8 	str.w	r2, [r4, #760]	; 0x2f8
 80116b2:	f8c4 2338 	str.w	r2, [r4, #824]	; 0x338
 80116b6:	f7ff b94a 	b.w	801094e <MotionDI_update+0x1326>
 80116ba:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
 80116be:	f8c4 c6dc 	str.w	ip, [r4, #1756]	; 0x6dc
 80116c2:	f47e a886 	bne.w	800f7d2 <MotionDI_update+0x1aa>
 80116c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	f040 84e4 	bne.w	8012096 <MotionDI_update+0x2a6e>
 80116ce:	4a51      	ldr	r2, [pc, #324]	; (8011814 <MotionDI_update+0x21ec>)
 80116d0:	1d11      	adds	r1, r2, #4
 80116d2:	f102 0008 	add.w	r0, r2, #8
 80116d6:	f7ff bb09 	b.w	8010cec <MotionDI_update+0x16c4>
 80116da:	2300      	movs	r3, #0
 80116dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80116e0:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
 80116e4:	f8c4 3358 	str.w	r3, [r4, #856]	; 0x358
 80116e8:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
 80116ec:	f8c4 2360 	str.w	r2, [r4, #864]	; 0x360
 80116f0:	f7ff b908 	b.w	8010904 <MotionDI_update+0x12dc>
 80116f4:	9920      	ldr	r1, [sp, #128]	; 0x80
 80116f6:	2300      	movs	r3, #0
 80116f8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80116fc:	618b      	str	r3, [r1, #24]
 80116fe:	61cb      	str	r3, [r1, #28]
 8011700:	620b      	str	r3, [r1, #32]
 8011702:	624a      	str	r2, [r1, #36]	; 0x24
 8011704:	f7fe bfcf 	b.w	80106a6 <MotionDI_update+0x107e>
 8011708:	2300      	movs	r3, #0
 801170a:	6563      	str	r3, [r4, #84]	; 0x54
 801170c:	6623      	str	r3, [r4, #96]	; 0x60
 801170e:	65a3      	str	r3, [r4, #88]	; 0x58
 8011710:	6663      	str	r3, [r4, #100]	; 0x64
 8011712:	65e3      	str	r3, [r4, #92]	; 0x5c
 8011714:	66a3      	str	r3, [r4, #104]	; 0x68
 8011716:	2300      	movs	r3, #0
 8011718:	4e3f      	ldr	r6, [pc, #252]	; (8011818 <MotionDI_update+0x21f0>)
 801171a:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 801171e:	f7fd bfb4 	b.w	800f68a <MotionDI_update+0x62>
 8011722:	2300      	movs	r3, #0
 8011724:	f8c4 e2bc 	str.w	lr, [r4, #700]	; 0x2bc
 8011728:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
 801172c:	f8c4 12c4 	str.w	r1, [r4, #708]	; 0x2c4
 8011730:	f8c4 22c8 	str.w	r2, [r4, #712]	; 0x2c8
 8011734:	f8c4 e2cc 	str.w	lr, [r4, #716]	; 0x2cc
 8011738:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
 801173c:	f8c4 12d4 	str.w	r1, [r4, #724]	; 0x2d4
 8011740:	f8c4 22d8 	str.w	r2, [r4, #728]	; 0x2d8
 8011744:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
 8011748:	f885 38e0 	strb.w	r3, [r5, #2272]	; 0x8e0
 801174c:	e4e4      	b.n	8011118 <MotionDI_update+0x1af0>
 801174e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011750:	60b2      	str	r2, [r6, #8]
 8011752:	2300      	movs	r3, #0
 8011754:	60f3      	str	r3, [r6, #12]
 8011756:	f8a6 31c8 	strh.w	r3, [r6, #456]	; 0x1c8
 801175a:	7d33      	ldrb	r3, [r6, #20]
 801175c:	f7ff bb71 	b.w	8010e42 <MotionDI_update+0x181a>
 8011760:	2301      	movs	r3, #1
 8011762:	ed84 9a23 	vstr	s18, [r4, #140]	; 0x8c
 8011766:	edc4 8a24 	vstr	s17, [r4, #144]	; 0x90
 801176a:	ed84 8a25 	vstr	s16, [r4, #148]	; 0x94
 801176e:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
 8011772:	f7ff bb3e 	b.w	8010df2 <MotionDI_update+0x17ca>
 8011776:	2300      	movs	r3, #0
 8011778:	61e3      	str	r3, [r4, #28]
 801177a:	62a3      	str	r3, [r4, #40]	; 0x28
 801177c:	6223      	str	r3, [r4, #32]
 801177e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011780:	6263      	str	r3, [r4, #36]	; 0x24
 8011782:	6323      	str	r3, [r4, #48]	; 0x30
 8011784:	2300      	movs	r3, #0
 8011786:	4e24      	ldr	r6, [pc, #144]	; (8011818 <MotionDI_update+0x21f0>)
 8011788:	8323      	strh	r3, [r4, #24]
 801178a:	f7fd bf7e 	b.w	800f68a <MotionDI_update+0x62>
 801178e:	6d70      	ldr	r0, [r6, #84]	; 0x54
 8011790:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8011792:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8011794:	4698      	mov	r8, r3
 8011796:	f500 4372 	add.w	r3, r0, #61952	; 0xf200
 801179a:	3330      	adds	r3, #48	; 0x30
 801179c:	429a      	cmp	r2, r3
 801179e:	46ab      	mov	fp, r5
 80117a0:	e9dd 9526 	ldrd	r9, r5, [sp, #152]	; 0x98
 80117a4:	f200 83c7 	bhi.w	8011f36 <MotionDI_update+0x290e>
 80117a8:	f9b6 2058 	ldrsh.w	r2, [r6, #88]	; 0x58
 80117ac:	f8b6 3052 	ldrh.w	r3, [r6, #82]	; 0x52
 80117b0:	9324      	str	r3, [sp, #144]	; 0x90
 80117b2:	e9cd 021c 	strd	r0, r2, [sp, #112]	; 0x70
 80117b6:	931f      	str	r3, [sp, #124]	; 0x7c
 80117b8:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
 80117bc:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 80117c0:	f9bb 0012 	ldrsh.w	r0, [fp, #18]
 80117c4:	eddf 7a15 	vldr	s15, [pc, #84]	; 801181c <MotionDI_update+0x21f4>
 80117c8:	ed9f 5a15 	vldr	s10, [pc, #84]	; 8011820 <MotionDI_update+0x21f8>
 80117cc:	eddf 5a15 	vldr	s11, [pc, #84]	; 8011824 <MotionDI_update+0x21fc>
 80117d0:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 80117d4:	ee1f 2a90 	vmov	r2, s31
 80117d8:	1bc9      	subs	r1, r1, r7
 80117da:	1a9b      	subs	r3, r3, r2
 80117dc:	fb01 f101 	mul.w	r1, r1, r1
 80117e0:	fb03 1103 	mla	r1, r3, r3, r1
 80117e4:	eba0 0308 	sub.w	r3, r0, r8
 80117e8:	fb03 1303 	mla	r3, r3, r3, r1
 80117ec:	2201      	movs	r2, #1
 80117ee:	9318      	str	r3, [sp, #96]	; 0x60
 80117f0:	2300      	movs	r3, #0
 80117f2:	e9cd 9526 	strd	r9, r5, [sp, #152]	; 0x98
 80117f6:	ee6b baa7 	vmul.f32	s23, s23, s15
 80117fa:	ee2c 5a05 	vmul.f32	s10, s24, s10
 80117fe:	4611      	mov	r1, r2
 8011800:	931e      	str	r3, [sp, #120]	; 0x78
 8011802:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8011806:	4684      	mov	ip, r0
 8011808:	e016      	b.n	8011838 <MotionDI_update+0x2210>
 801180a:	bf00      	nop
 801180c:	20001984 	.word	0x20001984
 8011810:	20001964 	.word	0x20001964
 8011814:	20001d78 	.word	0x20001d78
 8011818:	20001d20 	.word	0x20001d20
 801181c:	3c23d70a 	.word	0x3c23d70a
 8011820:	3e99999a 	.word	0x3e99999a
 8011824:	3f6b851f 	.word	0x3f6b851f
 8011828:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 801182c:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8011830:	ed8d 7a18 	vstr	s14, [sp, #96]	; 0x60
 8011834:	f9b3 c00c 	ldrsh.w	ip, [r3, #12]
 8011838:	1c4b      	adds	r3, r1, #1
 801183a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801183e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8011842:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 8011846:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
 801184a:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
 801184e:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8011852:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 8011856:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801185a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801185e:	eba8 0805 	sub.w	r8, r8, r5
 8011862:	fb08 f808 	mul.w	r8, r8, r8
 8011866:	1bc0      	subs	r0, r0, r7
 8011868:	fb00 8000 	mla	r0, r0, r0, r8
 801186c:	eba3 030c 	sub.w	r3, r3, ip
 8011870:	fb03 0303 	mla	r3, r3, r3, r0
 8011874:	ee07 3a10 	vmov	s14, r3
 8011878:	eef8 7a47 	vcvt.f32.u32	s15, s14
 801187c:	eef4 bae7 	vcmpe.f32	s23, s15
 8011880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011884:	d445      	bmi.n	8011912 <MotionDI_update+0x22ea>
 8011886:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 801188a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801188e:	eef4 bae7 	vcmpe.f32	s23, s15
 8011892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011896:	d43c      	bmi.n	8011912 <MotionDI_update+0x22ea>
 8011898:	fb05 f905 	mul.w	r9, r5, r5
 801189c:	fb07 9907 	mla	r9, r7, r7, r9
 80118a0:	fb0c 990c 	mla	r9, ip, ip, r9
 80118a4:	ee07 9a90 	vmov	s15, r9
 80118a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80118ac:	eef1 6ae7 	vsqrt.f32	s13, s15
 80118b0:	ee36 6acc 	vsub.f32	s12, s13, s24
 80118b4:	eeb0 6ac6 	vabs.f32	s12, s12
 80118b8:	eeb4 5ac6 	vcmpe.f32	s10, s12
 80118bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118c0:	d427      	bmi.n	8011912 <MotionDI_update+0x22ea>
 80118c2:	ee76 6acd 	vsub.f32	s13, s13, s26
 80118c6:	eef0 6ae6 	vabs.f32	s13, s13
 80118ca:	eef4 cae6 	vcmpe.f32	s25, s13
 80118ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118d2:	d41e      	bmi.n	8011912 <MotionDI_update+0x22ea>
 80118d4:	9821      	ldr	r0, [sp, #132]	; 0x84
 80118d6:	2800      	cmp	r0, #0
 80118d8:	f040 82ab 	bne.w	8011e32 <MotionDI_update+0x280a>
 80118dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80118de:	2b00      	cmp	r3, #0
 80118e0:	f040 837c 	bne.w	8011fdc <MotionDI_update+0x29b4>
 80118e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80118e6:	1a59      	subs	r1, r3, r1
 80118e8:	f101 39ff 	add.w	r9, r1, #4294967295
 80118ec:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 80118f0:	4601      	mov	r1, r0
 80118f2:	9820      	ldr	r0, [sp, #128]	; 0x80
 80118f4:	fb03 0319 	mls	r3, r3, r9, r0
 80118f8:	931c      	str	r3, [sp, #112]	; 0x70
 80118fa:	2301      	movs	r3, #1
 80118fc:	9321      	str	r3, [sp, #132]	; 0x84
 80118fe:	931e      	str	r3, [sp, #120]	; 0x78
 8011900:	2300      	movs	r3, #0
 8011902:	65f1      	str	r1, [r6, #92]	; 0x5c
 8011904:	f8a6 7060 	strh.w	r7, [r6, #96]	; 0x60
 8011908:	f8a6 5062 	strh.w	r5, [r6, #98]	; 0x62
 801190c:	f8a6 c064 	strh.w	ip, [r6, #100]	; 0x64
 8011910:	931d      	str	r3, [sp, #116]	; 0x74
 8011912:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011914:	3201      	adds	r2, #1
 8011916:	b212      	sxth	r2, r2
 8011918:	4293      	cmp	r3, r2
 801191a:	4611      	mov	r1, r2
 801191c:	dc84      	bgt.n	8011828 <MotionDI_update+0x2200>
 801191e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011920:	f896 804c 	ldrb.w	r8, [r6, #76]	; 0x4c
 8011924:	f8a6 3050 	strh.w	r3, [r6, #80]	; 0x50
 8011928:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801192a:	ea43 0808 	orr.w	r8, r3, r8
 801192e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011930:	f8a6 3058 	strh.w	r3, [r6, #88]	; 0x58
 8011934:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011936:	6573      	str	r3, [r6, #84]	; 0x54
 8011938:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801193a:	f886 804c 	strb.w	r8, [r6, #76]	; 0x4c
 801193e:	e9dd 9526 	ldrd	r9, r5, [sp, #152]	; 0x98
 8011942:	2b00      	cmp	r3, #0
 8011944:	f040 81c4 	bne.w	8011cd0 <MotionDI_update+0x26a8>
 8011948:	f1b8 0f00 	cmp.w	r8, #0
 801194c:	f000 835d 	beq.w	801200a <MotionDI_update+0x29e2>
 8011950:	6937      	ldr	r7, [r6, #16]
 8011952:	b1df      	cbz	r7, 801198c <MotionDI_update+0x2364>
 8011954:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011956:	f7ee fd79 	bl	800044c <__aeabi_ui2d>
 801195a:	a3d3      	add	r3, pc, #844	; (adr r3, 8011ca8 <MotionDI_update+0x2680>)
 801195c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011960:	f7ee fdee 	bl	8000540 <__aeabi_dmul>
 8011964:	4602      	mov	r2, r0
 8011966:	4638      	mov	r0, r7
 8011968:	4688      	mov	r8, r1
 801196a:	4617      	mov	r7, r2
 801196c:	f7ee fd6e 	bl	800044c <__aeabi_ui2d>
 8011970:	4602      	mov	r2, r0
 8011972:	460b      	mov	r3, r1
 8011974:	4638      	mov	r0, r7
 8011976:	4641      	mov	r1, r8
 8011978:	f7ee fc2a 	bl	80001d0 <__aeabi_dsub>
 801197c:	2200      	movs	r2, #0
 801197e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011982:	f7ef f84f 	bl	8000a24 <__aeabi_dcmplt>
 8011986:	2800      	cmp	r0, #0
 8011988:	f040 836a 	bne.w	8012060 <MotionDI_update+0x2a38>
 801198c:	f896 346c 	ldrb.w	r3, [r6, #1132]	; 0x46c
 8011990:	2b01      	cmp	r3, #1
 8011992:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011994:	f000 8361 	beq.w	801205a <MotionDI_update+0x2a32>
 8011998:	2b0a      	cmp	r3, #10
 801199a:	f240 8361 	bls.w	8012060 <MotionDI_update+0x2a38>
 801199e:	4ac4      	ldr	r2, [pc, #784]	; (8011cb0 <MotionDI_update+0x2688>)
 80119a0:	edd2 9a00 	vldr	s19, [r2]
 80119a4:	aa58      	add	r2, sp, #352	; 0x160
 80119a6:	2100      	movs	r1, #0
 80119a8:	2300      	movs	r3, #0
 80119aa:	9218      	str	r2, [sp, #96]	; 0x60
 80119ac:	4610      	mov	r0, r2
 80119ae:	2234      	movs	r2, #52	; 0x34
 80119b0:	932b      	str	r3, [sp, #172]	; 0xac
 80119b2:	932c      	str	r3, [sp, #176]	; 0xb0
 80119b4:	932d      	str	r3, [sp, #180]	; 0xb4
 80119b6:	932e      	str	r3, [sp, #184]	; 0xb8
 80119b8:	f88d 10aa 	strb.w	r1, [sp, #170]	; 0xaa
 80119bc:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 80119c0:	912f      	str	r1, [sp, #188]	; 0xbc
 80119c2:	f8ad 10c0 	strh.w	r1, [sp, #192]	; 0xc0
 80119c6:	9131      	str	r1, [sp, #196]	; 0xc4
 80119c8:	f8ad 10c8 	strh.w	r1, [sp, #200]	; 0xc8
 80119cc:	f001 fa76 	bl	8012ebc <memset>
 80119d0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80119d2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80119d4:	4293      	cmp	r3, r2
 80119d6:	f000 8382 	beq.w	80120de <MotionDI_update+0x2ab6>
 80119da:	461a      	mov	r2, r3
 80119dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80119de:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80119e0:	3301      	adds	r3, #1
 80119e2:	1a9b      	subs	r3, r3, r2
 80119e4:	fb93 f2f1 	sdiv	r2, r3, r1
 80119e8:	fb01 3312 	mls	r3, r1, r2, r3
 80119ec:	fa0f fa83 	sxth.w	sl, r3
 80119f0:	f1ba 0f00 	cmp.w	sl, #0
 80119f4:	da03      	bge.n	80119fe <MotionDI_update+0x23d6>
 80119f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80119f8:	441a      	add	r2, r3
 80119fa:	fa0f fa82 	sxth.w	sl, r2
 80119fe:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 8011a02:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011a06:	f9b3 0062 	ldrsh.w	r0, [r3, #98]	; 0x62
 8011a0a:	f9b3 c060 	ldrsh.w	ip, [r3, #96]	; 0x60
 8011a0e:	f9b3 7064 	ldrsh.w	r7, [r3, #100]	; 0x64
 8011a12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011a14:	4602      	mov	r2, r0
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	f000 8382 	beq.w	8012120 <MotionDI_update+0x2af8>
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
 8011a22:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 8011a26:	951d      	str	r5, [sp, #116]	; 0x74
 8011a28:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
 8011a2c:	4611      	mov	r1, r2
 8011a2e:	46d3      	mov	fp, sl
 8011a30:	4686      	mov	lr, r0
 8011a32:	46e0      	mov	r8, ip
 8011a34:	463d      	mov	r5, r7
 8011a36:	4682      	mov	sl, r0
 8011a38:	4459      	add	r1, fp
 8011a3a:	fb91 f3f9 	sdiv	r3, r1, r9
 8011a3e:	fb09 1313 	mls	r3, r9, r3, r1
 8011a42:	b21b      	sxth	r3, r3
 8011a44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011a48:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011a4c:	3201      	adds	r2, #1
 8011a4e:	f9b3 0060 	ldrsh.w	r0, [r3, #96]	; 0x60
 8011a52:	f9b3 1062 	ldrsh.w	r1, [r3, #98]	; 0x62
 8011a56:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8011a5a:	4584      	cmp	ip, r0
 8011a5c:	bfb8      	it	lt
 8011a5e:	4684      	movlt	ip, r0
 8011a60:	4580      	cmp	r8, r0
 8011a62:	bfa8      	it	ge
 8011a64:	4680      	movge	r8, r0
 8011a66:	458a      	cmp	sl, r1
 8011a68:	bfb8      	it	lt
 8011a6a:	468a      	movlt	sl, r1
 8011a6c:	458e      	cmp	lr, r1
 8011a6e:	bfa8      	it	ge
 8011a70:	468e      	movge	lr, r1
 8011a72:	429f      	cmp	r7, r3
 8011a74:	bfb8      	it	lt
 8011a76:	461f      	movlt	r7, r3
 8011a78:	429d      	cmp	r5, r3
 8011a7a:	bfa8      	it	ge
 8011a7c:	461d      	movge	r5, r3
 8011a7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011a80:	b212      	sxth	r2, r2
 8011a82:	429a      	cmp	r2, r3
 8011a84:	4611      	mov	r1, r2
 8011a86:	dbd7      	blt.n	8011a38 <MotionDI_update+0x2410>
 8011a88:	ebac 0808 	sub.w	r8, ip, r8
 8011a8c:	ee07 8a90 	vmov	s15, r8
 8011a90:	4629      	mov	r1, r5
 8011a92:	e9dd 951c 	ldrd	r9, r5, [sp, #112]	; 0x70
 8011a96:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8011a9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011a9e:	4652      	mov	r2, sl
 8011aa0:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8011cb4 <MotionDI_update+0x268c>
 8011aa4:	ed9f 6a84 	vldr	s12, [pc, #528]	; 8011cb8 <MotionDI_update+0x2690>
 8011aa8:	eec7 5a29 	vdiv.f32	s11, s14, s19
 8011aac:	ee25 6a86 	vmul.f32	s12, s11, s12
 8011ab0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8011ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ab8:	f300 82b8 	bgt.w	801202c <MotionDI_update+0x2a04>
 8011abc:	eba2 0e0e 	sub.w	lr, r2, lr
 8011ac0:	ee07 ea10 	vmov	s14, lr
 8011ac4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8011ac8:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8011acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ad0:	f300 82ac 	bgt.w	801202c <MotionDI_update+0x2a04>
 8011ad4:	1a7f      	subs	r7, r7, r1
 8011ad6:	ee07 7a10 	vmov	s14, r7
 8011ada:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011ade:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8011ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ae6:	f300 82a1 	bgt.w	801202c <MotionDI_update+0x2a04>
 8011aea:	eeb0 6a04 	vmov.f32	s12, #4	; 0x40200000  2.5
 8011aee:	ee65 5a86 	vmul.f32	s11, s11, s12
 8011af2:	eef4 5ae7 	vcmpe.f32	s11, s15
 8011af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011afa:	f100 8297 	bmi.w	801202c <MotionDI_update+0x2a04>
 8011afe:	eef4 6ae5 	vcmpe.f32	s13, s11
 8011b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b06:	f300 8291 	bgt.w	801202c <MotionDI_update+0x2a04>
 8011b0a:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8011b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b12:	f300 828b 	bgt.w	801202c <MotionDI_update+0x2a04>
 8011b16:	edd6 6a06 	vldr	s13, [r6, #24]
 8011b1a:	ed96 7a07 	vldr	s14, [r6, #28]
 8011b1e:	edd6 7a08 	vldr	s15, [r6, #32]
 8011b22:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8011b26:	f10d 03ab 	add.w	r3, sp, #171	; 0xab
 8011b2a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8011b2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011b32:	9300      	str	r3, [sp, #0]
 8011b34:	ee16 3a90 	vmov	r3, s13
 8011b38:	ee17 1a90 	vmov	r1, s15
 8011b3c:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
 8011b40:	ee17 3a10 	vmov	r3, s14
 8011b44:	f8ad 10c8 	strh.w	r1, [sp, #200]	; 0xc8
 8011b48:	f8ad 30c6 	strh.w	r3, [sp, #198]	; 0xc6
 8011b4c:	495b      	ldr	r1, [pc, #364]	; (8011cbc <MotionDI_update+0x2694>)
 8011b4e:	aa2d      	add	r2, sp, #180	; 0xb4
 8011b50:	eeb0 0a69 	vmov.f32	s0, s19
 8011b54:	a831      	add	r0, sp, #196	; 0xc4
 8011b56:	ab2e      	add	r3, sp, #184	; 0xb8
 8011b58:	f7f8 fc92 	bl	800a480 <getAccStats.constprop.0>
 8011b5c:	eddf 7a58 	vldr	s15, [pc, #352]	; 8011cc0 <MotionDI_update+0x2698>
 8011b60:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 8011b64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b6c:	f140 82e4 	bpl.w	8012138 <MotionDI_update+0x2b10>
 8011b70:	f896 346c 	ldrb.w	r3, [r6, #1132]	; 0x46c
 8011b74:	2b01      	cmp	r3, #1
 8011b76:	f000 82df 	beq.w	8012138 <MotionDI_update+0x2b10>
 8011b7a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	f000 82db 	beq.w	8012138 <MotionDI_update+0x2b10>
 8011b82:	7d33      	ldrb	r3, [r6, #20]
 8011b84:	2b03      	cmp	r3, #3
 8011b86:	f001 8123 	beq.w	8012dd0 <MotionDI_update+0x37a8>
 8011b8a:	f8df c138 	ldr.w	ip, [pc, #312]	; 8011cc4 <MotionDI_update+0x269c>
 8011b8e:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8011b90:	edc6 8a04 	vstr	s17, [r6, #16]
 8011b94:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011b98:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011b9a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011b9e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011ba0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011ba4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011ba6:	f8dc 2000 	ldr.w	r2, [ip]
 8011baa:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8011bac:	603a      	str	r2, [r7, #0]
 8011bae:	2103      	movs	r1, #3
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	7531      	strb	r1, [r6, #20]
 8011bb4:	f886 204c 	strb.w	r2, [r6, #76]	; 0x4c
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	f041 8104 	bne.w	8012dc6 <MotionDI_update+0x379e>
 8011bbe:	ab33      	add	r3, sp, #204	; 0xcc
 8011bc0:	931e      	str	r3, [sp, #120]	; 0x78
 8011bc2:	ab65      	add	r3, sp, #404	; 0x194
 8011bc4:	931c      	str	r3, [sp, #112]	; 0x70
 8011bc6:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8011bca:	4f3e      	ldr	r7, [pc, #248]	; (8011cc4 <MotionDI_update+0x269c>)
 8011bcc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011bd0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011bd2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011bd6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011bd8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011bdc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011bde:	f8dc 3000 	ldr.w	r3, [ip]
 8011be2:	603b      	str	r3, [r7, #0]
 8011be4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8011be6:	4f38      	ldr	r7, [pc, #224]	; (8011cc8 <MotionDI_update+0x26a0>)
 8011be8:	f7ee fc30 	bl	800044c <__aeabi_ui2d>
 8011bec:	a32e      	add	r3, pc, #184	; (adr r3, 8011ca8 <MotionDI_update+0x2680>)
 8011bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf2:	f7ee fca5 	bl	8000540 <__aeabi_dmul>
 8011bf6:	f7ee ff7b 	bl	8000af0 <__aeabi_d2uiz>
 8011bfa:	edd6 6a07 	vldr	s13, [r6, #28]
 8011bfe:	ed96 7a08 	vldr	s14, [r6, #32]
 8011c02:	edd6 7a06 	vldr	s15, [r6, #24]
 8011c06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011c08:	f8d6 c028 	ldr.w	ip, [r6, #40]	; 0x28
 8011c0c:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8011c0e:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8011c10:	64b0      	str	r0, [r6, #72]	; 0x48
 8011c12:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8011c16:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8011c1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8011c1e:	edc3 6a01 	vstr	s13, [r3, #4]
 8011c22:	ed83 7a02 	vstr	s14, [r3, #8]
 8011c26:	edc3 7a00 	vstr	s15, [r3]
 8011c2a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8011c2c:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8011c2e:	61fb      	str	r3, [r7, #28]
 8011c30:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 8011c34:	eddf 4a25 	vldr	s9, [pc, #148]	; 8011ccc <MotionDI_update+0x26a4>
 8011c38:	f8d6 e024 	ldr.w	lr, [r6, #36]	; 0x24
 8011c3c:	f8c7 c010 	str.w	ip, [r7, #16]
 8011c40:	6178      	str	r0, [r7, #20]
 8011c42:	f8d6 c03c 	ldr.w	ip, [r6, #60]	; 0x3c
 8011c46:	6c30      	ldr	r0, [r6, #64]	; 0x40
 8011c48:	61b9      	str	r1, [r7, #24]
 8011c4a:	623a      	str	r2, [r7, #32]
 8011c4c:	6c71      	ldr	r1, [r6, #68]	; 0x44
 8011c4e:	f8c7 e00c 	str.w	lr, [r7, #12]
 8011c52:	2200      	movs	r2, #0
 8011c54:	eeb8 5ae6 	vcvt.f32.s32	s10, s13
 8011c58:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8011c5c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8011c60:	e9c6 3202 	strd	r3, r2, [r6, #8]
 8011c64:	f8c7 c024 	str.w	ip, [r7, #36]	; 0x24
 8011c68:	62b8      	str	r0, [r7, #40]	; 0x28
 8011c6a:	f8a6 21c8 	strh.w	r2, [r6, #456]	; 0x1c8
 8011c6e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8011c70:	f894 1168 	ldrb.w	r1, [r4, #360]	; 0x168
 8011c74:	7d33      	ldrb	r3, [r6, #20]
 8011c76:	f884 3684 	strb.w	r3, [r4, #1668]	; 0x684
 8011c7a:	ee65 6a24 	vmul.f32	s13, s10, s9
 8011c7e:	ee26 7a24 	vmul.f32	s14, s12, s9
 8011c82:	ee65 7aa4 	vmul.f32	s15, s11, s9
 8011c86:	2901      	cmp	r1, #1
 8011c88:	edc7 6a01 	vstr	s13, [r7, #4]
 8011c8c:	edc7 7a00 	vstr	s15, [r7]
 8011c90:	ed87 7a02 	vstr	s14, [r7, #8]
 8011c94:	f47d acee 	bne.w	800f674 <MotionDI_update+0x4c>
 8011c98:	2b03      	cmp	r3, #3
 8011c9a:	f47d aceb 	bne.w	800f674 <MotionDI_update+0x4c>
 8011c9e:	f884 2168 	strb.w	r2, [r4, #360]	; 0x168
 8011ca2:	f7fd bce7 	b.w	800f674 <MotionDI_update+0x4c>
 8011ca6:	bf00      	nop
 8011ca8:	d2f1a9fc 	.word	0xd2f1a9fc
 8011cac:	3f50624d 	.word	0x3f50624d
 8011cb0:	20002590 	.word	0x20002590
 8011cb4:	3f8ccccd 	.word	0x3f8ccccd
 8011cb8:	3f99999a 	.word	0x3f99999a
 8011cbc:	20002154 	.word	0x20002154
 8011cc0:	3d23d70a 	.word	0x3d23d70a
 8011cc4:	20002144 	.word	0x20002144
 8011cc8:	20001cec 	.word	0x20001cec
 8011ccc:	3a83126f 	.word	0x3a83126f
 8011cd0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	f47f ae38 	bne.w	8011948 <MotionDI_update+0x2320>
 8011cd8:	461a      	mov	r2, r3
 8011cda:	4bd0      	ldr	r3, [pc, #832]	; (801201c <MotionDI_update+0x29f4>)
 8011cdc:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 8011ce0:	edd3 7a00 	vldr	s15, [r3]
 8011ce4:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 8011ce6:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8011cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011cf2:	4611      	mov	r1, r2
 8011cf4:	4610      	mov	r0, r2
 8011cf6:	4613      	mov	r3, r2
 8011cf8:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
 8011cfc:	3101      	adds	r1, #1
 8011cfe:	f9b7 9008 	ldrsh.w	r9, [r7, #8]
 8011d02:	f9b7 800a 	ldrsh.w	r8, [r7, #10]
 8011d06:	f9b7 e00c 	ldrsh.w	lr, [r7, #12]
 8011d0a:	fa1f fc81 	uxth.w	ip, r1
 8011d0e:	45e2      	cmp	sl, ip
 8011d10:	444a      	add	r2, r9
 8011d12:	4443      	add	r3, r8
 8011d14:	4470      	add	r0, lr
 8011d16:	f107 0706 	add.w	r7, r7, #6
 8011d1a:	d8ef      	bhi.n	8011cfc <MotionDI_update+0x26d4>
 8011d1c:	9922      	ldr	r1, [sp, #136]	; 0x88
 8011d1e:	fb92 f2f1 	sdiv	r2, r2, r1
 8011d22:	ee07 2a90 	vmov	s15, r2
 8011d26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011d2a:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011d2e:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 8011d32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d3a:	f100 81ec 	bmi.w	8012116 <MotionDI_update+0x2aee>
 8011d3e:	eef1 6a47 	vneg.f32	s13, s14
 8011d42:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d4a:	dd03      	ble.n	8011d54 <MotionDI_update+0x272c>
 8011d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011d50:	edc6 7a06 	vstr	s15, [r6, #24]
 8011d54:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011d56:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d5a:	ee07 3a90 	vmov	s15, r3
 8011d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011d62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d6a:	f100 81cf 	bmi.w	801210c <MotionDI_update+0x2ae4>
 8011d6e:	eef1 6a47 	vneg.f32	s13, s14
 8011d72:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d7a:	dd03      	ble.n	8011d84 <MotionDI_update+0x275c>
 8011d7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011d80:	edc6 7a07 	vstr	s15, [r6, #28]
 8011d84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011d86:	fb90 f3f3 	sdiv	r3, r0, r3
 8011d8a:	ee07 3a90 	vmov	s15, r3
 8011d8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011d92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d9a:	f140 81ab 	bpl.w	80120f4 <MotionDI_update+0x2acc>
 8011d9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011da2:	edc6 7a08 	vstr	s15, [r6, #32]
 8011da6:	e5cf      	b.n	8011948 <MotionDI_update+0x2320>
 8011da8:	7d33      	ldrb	r3, [r6, #20]
 8011daa:	2b03      	cmp	r3, #3
 8011dac:	f47d aede 	bne.w	800fb6c <MotionDI_update+0x544>
 8011db0:	6932      	ldr	r2, [r6, #16]
 8011db2:	2a00      	cmp	r2, #0
 8011db4:	f43d aeda 	beq.w	800fb6c <MotionDI_update+0x544>
 8011db8:	ee07 2a90 	vmov	s15, r2
 8011dbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011dc0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8011dc4:	ee78 7a67 	vsub.f32	s15, s16, s15
 8011dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dd0:	f77d aecc 	ble.w	800fb6c <MotionDI_update+0x544>
 8011dd4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8011dd6:	2200      	movs	r2, #0
 8011dd8:	e9c6 1202 	strd	r1, r2, [r6, #8]
 8011ddc:	f8a6 21c8 	strh.w	r2, [r6, #456]	; 0x1c8
 8011de0:	f7ff b82f 	b.w	8010e42 <MotionDI_update+0x181a>
 8011de4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011de6:	2b01      	cmp	r3, #1
 8011de8:	f43f acb1 	beq.w	801174e <MotionDI_update+0x2126>
 8011dec:	2300      	movs	r3, #0
 8011dee:	9328      	str	r3, [sp, #160]	; 0xa0
 8011df0:	f7fe b810 	b.w	800fe14 <MotionDI_update+0x7ec>
 8011df4:	ee75 7a47 	vsub.f32	s15, s10, s14
 8011df8:	ee17 0a90 	vmov	r0, s15
 8011dfc:	f7ee fb48 	bl	8000490 <__aeabi_f2d>
 8011e00:	ec41 0b10 	vmov	d0, r0, r1
 8011e04:	f001 fa3c 	bl	8013280 <sqrt>
 8011e08:	ec51 0b10 	vmov	r0, r1, d0
 8011e0c:	f7ee fe90 	bl	8000b30 <__aeabi_d2f>
 8011e10:	f7ff bb87 	b.w	8011522 <MotionDI_update+0x1efa>
 8011e14:	ee75 7a47 	vsub.f32	s15, s10, s14
 8011e18:	ee17 0a90 	vmov	r0, s15
 8011e1c:	f7ee fb38 	bl	8000490 <__aeabi_f2d>
 8011e20:	ec41 0b10 	vmov	d0, r0, r1
 8011e24:	f001 fa2c 	bl	8013280 <sqrt>
 8011e28:	ec51 0b10 	vmov	r0, r1, d0
 8011e2c:	f7ee fe80 	bl	8000b30 <__aeabi_d2f>
 8011e30:	e42c      	b.n	801168c <MotionDI_update+0x2064>
 8011e32:	4603      	mov	r3, r0
 8011e34:	9824      	ldr	r0, [sp, #144]	; 0x90
 8011e36:	4283      	cmp	r3, r0
 8011e38:	f000 8118 	beq.w	801206c <MotionDI_update+0x2a44>
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011e40:	3301      	adds	r3, #1
 8011e42:	eba3 0a00 	sub.w	sl, r3, r0
 8011e46:	fb9a f9fe 	sdiv	r9, sl, lr
 8011e4a:	fb0e a919 	mls	r9, lr, r9, sl
 8011e4e:	9318      	str	r3, [sp, #96]	; 0x60
 8011e50:	fa0f f389 	sxth.w	r3, r9
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	da03      	bge.n	8011e60 <MotionDI_update+0x2838>
 8011e58:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011e5a:	4499      	add	r9, r3
 8011e5c:	fa0f f389 	sxth.w	r3, r9
 8011e60:	9821      	ldr	r0, [sp, #132]	; 0x84
 8011e62:	f100 3aff 	add.w	sl, r0, #4294967295
 8011e66:	fa0f f08a 	sxth.w	r0, sl
 8011e6a:	2800      	cmp	r0, #0
 8011e6c:	fa1f fa8a 	uxth.w	sl, sl
 8011e70:	db2a      	blt.n	8011ec8 <MotionDI_update+0x28a0>
 8011e72:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 8011e76:	4418      	add	r0, r3
 8011e78:	ebaa 0a00 	sub.w	sl, sl, r0
 8011e7c:	fb90 f3fe 	sdiv	r3, r0, lr
 8011e80:	fb0e 0313 	mls	r3, lr, r3, r0
 8011e84:	b21b      	sxth	r3, r3
 8011e86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011e8a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011e8e:	3801      	subs	r0, #1
 8011e90:	f8b3 9062 	ldrh.w	r9, [r3, #98]	; 0x62
 8011e94:	f8b3 8060 	ldrh.w	r8, [r3, #96]	; 0x60
 8011e98:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011e9c:	fb19 f905 	smulbb	r9, r9, r5
 8011ea0:	fb17 9808 	smlabb	r8, r7, r8, r9
 8011ea4:	fb1c 8303 	smlabb	r3, ip, r3, r8
 8011ea8:	ee07 3a90 	vmov	s15, r3
 8011eac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011eb0:	eb0a 0300 	add.w	r3, sl, r0
 8011eb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011eb8:	eef4 7ae5 	vcmpe.f32	s15, s11
 8011ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ec0:	f73f ad27 	bgt.w	8011912 <MotionDI_update+0x22ea>
 8011ec4:	041b      	lsls	r3, r3, #16
 8011ec6:	d5d9      	bpl.n	8011e7c <MotionDI_update+0x2854>
 8011ec8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011eca:	fb93 f9fe 	sdiv	r9, r3, lr
 8011ece:	fb0e 3919 	mls	r9, lr, r9, r3
 8011ed2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011ed4:	fa0f f089 	sxth.w	r0, r9
 8011ed8:	eba3 0901 	sub.w	r9, r3, r1
 8011edc:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 8011ee0:	9318      	str	r3, [sp, #96]	; 0x60
 8011ee2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011ee4:	901d      	str	r0, [sp, #116]	; 0x74
 8011ee6:	f103 0801 	add.w	r8, r3, #1
 8011eea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011eec:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8011ef0:	f109 30ff 	add.w	r0, r9, #4294967295
 8011ef4:	4699      	mov	r9, r3
 8011ef6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011ef8:	eba9 0903 	sub.w	r9, r9, r3
 8011efc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011efe:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8011f02:	45f0      	cmp	r8, lr
 8011f04:	fb03 9310 	mls	r3, r3, r0, r9
 8011f08:	bfa8      	it	ge
 8011f0a:	46f0      	movge	r8, lr
 8011f0c:	fa1f f088 	uxth.w	r0, r8
 8011f10:	65cb      	str	r3, [r1, #92]	; 0x5c
 8011f12:	2301      	movs	r3, #1
 8011f14:	9021      	str	r0, [sp, #132]	; 0x84
 8011f16:	f8a1 7060 	strh.w	r7, [r1, #96]	; 0x60
 8011f1a:	f8a1 5062 	strh.w	r5, [r1, #98]	; 0x62
 8011f1e:	f8a1 c064 	strh.w	ip, [r1, #100]	; 0x64
 8011f22:	931e      	str	r3, [sp, #120]	; 0x78
 8011f24:	e4f5      	b.n	8011912 <MotionDI_update+0x22ea>
 8011f26:	ee6c ba0c 	vmul.f32	s23, s24, s24
 8011f2a:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 8012020 <MotionDI_update+0x29f8>
 8011f2e:	ee2b 2a82 	vmul.f32	s4, s23, s4
 8011f32:	f7fd be2e 	b.w	800fb92 <MotionDI_update+0x56a>
 8011f36:	f64e 2360 	movw	r3, #60000	; 0xea60
 8011f3a:	429a      	cmp	r2, r3
 8011f3c:	bf14      	ite	ne
 8011f3e:	f5a2 436a 	subne.w	r3, r2, #59904	; 0xea00
 8011f42:	9b1f      	ldreq	r3, [sp, #124]	; 0x7c
 8011f44:	f9b6 2058 	ldrsh.w	r2, [r6, #88]	; 0x58
 8011f48:	921d      	str	r2, [sp, #116]	; 0x74
 8011f4a:	bf18      	it	ne
 8011f4c:	3b60      	subne	r3, #96	; 0x60
 8011f4e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011f50:	931c      	str	r3, [sp, #112]	; 0x70
 8011f52:	f8b6 3052 	ldrh.w	r3, [r6, #82]	; 0x52
 8011f56:	9324      	str	r3, [sp, #144]	; 0x90
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	f000 80b6 	beq.w	80120ca <MotionDI_update+0x2aa2>
 8011f5e:	4619      	mov	r1, r3
 8011f60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011f62:	911f      	str	r1, [sp, #124]	; 0x7c
 8011f64:	3301      	adds	r3, #1
 8011f66:	1a9a      	subs	r2, r3, r2
 8011f68:	fb92 fcf1 	sdiv	ip, r2, r1
 8011f6c:	fb01 231c 	mls	r3, r1, ip, r2
 8011f70:	b21a      	sxth	r2, r3
 8011f72:	2a00      	cmp	r2, #0
 8011f74:	bfbc      	itt	lt
 8011f76:	18ca      	addlt	r2, r1, r3
 8011f78:	b212      	sxthlt	r2, r2
 8011f7a:	9921      	ldr	r1, [sp, #132]	; 0x84
 8011f7c:	b20b      	sxth	r3, r1
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	dd28      	ble.n	8011fd4 <MotionDI_update+0x29ac>
 8011f82:	f101 3cff 	add.w	ip, r1, #4294967295
 8011f86:	460b      	mov	r3, r1
 8011f88:	fa1f fc8c 	uxth.w	ip, ip
 8011f8c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011f8e:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 8011f92:	f10c 0c01 	add.w	ip, ip, #1
 8011f96:	46aa      	mov	sl, r5
 8011f98:	1a40      	subs	r0, r0, r1
 8011f9a:	4494      	add	ip, r2
 8011f9c:	461d      	mov	r5, r3
 8011f9e:	e002      	b.n	8011fa6 <MotionDI_update+0x297e>
 8011fa0:	3201      	adds	r2, #1
 8011fa2:	4594      	cmp	ip, r2
 8011fa4:	d011      	beq.n	8011fca <MotionDI_update+0x29a2>
 8011fa6:	fb92 f3fe 	sdiv	r3, r2, lr
 8011faa:	fb0e 2313 	mls	r3, lr, r3, r2
 8011fae:	b21b      	sxth	r3, r3
 8011fb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011fb4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011fb8:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011fba:	1841      	adds	r1, r0, r1
 8011fbc:	65d9      	str	r1, [r3, #92]	; 0x5c
 8011fbe:	d5ef      	bpl.n	8011fa0 <MotionDI_update+0x2978>
 8011fc0:	2d00      	cmp	r5, #0
 8011fc2:	d0ed      	beq.n	8011fa0 <MotionDI_update+0x2978>
 8011fc4:	3d01      	subs	r5, #1
 8011fc6:	b2ad      	uxth	r5, r5
 8011fc8:	e7ea      	b.n	8011fa0 <MotionDI_update+0x2978>
 8011fca:	462b      	mov	r3, r5
 8011fcc:	9521      	str	r5, [sp, #132]	; 0x84
 8011fce:	f8a6 3050 	strh.w	r3, [r6, #80]	; 0x50
 8011fd2:	4655      	mov	r5, sl
 8011fd4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011fd6:	6573      	str	r3, [r6, #84]	; 0x54
 8011fd8:	f7ff bbee 	b.w	80117b8 <MotionDI_update+0x2190>
 8011fdc:	9820      	ldr	r0, [sp, #128]	; 0x80
 8011fde:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011fe0:	4680      	mov	r8, r0
 8011fe2:	981c      	ldr	r0, [sp, #112]	; 0x70
 8011fe4:	1a59      	subs	r1, r3, r1
 8011fe6:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 8011fea:	3901      	subs	r1, #1
 8011fec:	eba8 0900 	sub.w	r9, r8, r0
 8011ff0:	fb03 9111 	mls	r1, r3, r1, r9
 8011ff4:	e481      	b.n	80118fa <MotionDI_update+0x22d2>
 8011ff6:	4a0b      	ldr	r2, [pc, #44]	; (8012024 <MotionDI_update+0x29fc>)
 8011ff8:	4293      	cmp	r3, r2
 8011ffa:	d941      	bls.n	8012080 <MotionDI_update+0x2a58>
 8011ffc:	7d33      	ldrb	r3, [r6, #20]
 8011ffe:	3b00      	subs	r3, #0
 8012000:	bf18      	it	ne
 8012002:	2301      	movne	r3, #1
 8012004:	7533      	strb	r3, [r6, #20]
 8012006:	f7fd bdb1 	b.w	800fb6c <MotionDI_update+0x544>
 801200a:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 801200e:	f8c6 800c 	str.w	r8, [r6, #12]
 8012012:	f8a6 81c8 	strh.w	r8, [r6, #456]	; 0x1c8
 8012016:	60b3      	str	r3, [r6, #8]
 8012018:	f7ff bb9f 	b.w	801175a <MotionDI_update+0x2132>
 801201c:	20002590 	.word	0x20002590
 8012020:	3a03126f 	.word	0x3a03126f
 8012024:	000d2f00 	.word	0x000d2f00
 8012028:	00000000 	.word	0x00000000
 801202c:	ab33      	add	r3, sp, #204	; 0xcc
 801202e:	931e      	str	r3, [sp, #120]	; 0x78
 8012030:	ab65      	add	r3, sp, #404	; 0x194
 8012032:	931c      	str	r3, [sp, #112]	; 0x70
 8012034:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 8012038:	2300      	movs	r3, #0
 801203a:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 801203e:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 8012042:	60b3      	str	r3, [r6, #8]
 8012044:	2300      	movs	r3, #0
 8012046:	60f3      	str	r3, [r6, #12]
 8012048:	f8a6 31c8 	strh.w	r3, [r6, #456]	; 0x1c8
 801204c:	7d33      	ldrb	r3, [r6, #20]
 801204e:	f7fe bf00 	b.w	8010e52 <MotionDI_update+0x182a>
 8012052:	ed5f 9a0b 	vldr	s19, [pc, #-44]	; 8012028 <MotionDI_update+0x2a00>
 8012056:	f7fd bec3 	b.w	800fde0 <MotionDI_update+0x7b8>
 801205a:	2b05      	cmp	r3, #5
 801205c:	f63f ac9f 	bhi.w	801199e <MotionDI_update+0x2376>
 8012060:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 8012064:	60b3      	str	r3, [r6, #8]
 8012066:	2300      	movs	r3, #0
 8012068:	f7ff bb74 	b.w	8011754 <MotionDI_update+0x212c>
 801206c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801206e:	3301      	adds	r3, #1
 8012070:	fb93 f9fe 	sdiv	r9, r3, lr
 8012074:	fb0e 3919 	mls	r9, lr, r9, r3
 8012078:	9318      	str	r3, [sp, #96]	; 0x60
 801207a:	fa0f f389 	sxth.w	r3, r9
 801207e:	e6ef      	b.n	8011e60 <MotionDI_update+0x2838>
 8012080:	4a2a      	ldr	r2, [pc, #168]	; (801212c <MotionDI_update+0x2b04>)
 8012082:	4293      	cmp	r3, r2
 8012084:	f67f ae90 	bls.w	8011da8 <MotionDI_update+0x2780>
 8012088:	7d33      	ldrb	r3, [r6, #20]
 801208a:	2b02      	cmp	r3, #2
 801208c:	bf28      	it	cs
 801208e:	2302      	movcs	r3, #2
 8012090:	7533      	strb	r3, [r6, #20]
 8012092:	f7fd bd6b 	b.w	800fb6c <MotionDI_update+0x544>
 8012096:	4926      	ldr	r1, [pc, #152]	; (8012130 <MotionDI_update+0x2b08>)
 8012098:	4608      	mov	r0, r1
 801209a:	460a      	mov	r2, r1
 801209c:	ed32 7a01 	vldmdb	r2!, {s14}
 80120a0:	edd1 7a00 	vldr	s15, [r1]
 80120a4:	edd0 6a01 	vldr	s13, [r0, #4]
 80120a8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80120ac:	ee66 6a86 	vmul.f32	s13, s13, s12
 80120b0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80120b4:	ee67 7a86 	vmul.f32	s15, s15, s12
 80120b8:	3004      	adds	r0, #4
 80120ba:	edc4 6a47 	vstr	s13, [r4, #284]	; 0x11c
 80120be:	ed84 7a45 	vstr	s14, [r4, #276]	; 0x114
 80120c2:	edc4 7a46 	vstr	s15, [r4, #280]	; 0x118
 80120c6:	f7fe be11 	b.w	8010cec <MotionDI_update+0x16c4>
 80120ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80120cc:	3301      	adds	r3, #1
 80120ce:	4611      	mov	r1, r2
 80120d0:	fb93 fcf2 	sdiv	ip, r3, r2
 80120d4:	fb02 321c 	mls	r2, r2, ip, r3
 80120d8:	b212      	sxth	r2, r2
 80120da:	911f      	str	r1, [sp, #124]	; 0x7c
 80120dc:	e74d      	b.n	8011f7a <MotionDI_update+0x2952>
 80120de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80120e0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80120e2:	f103 0801 	add.w	r8, r3, #1
 80120e6:	fb98 f3f2 	sdiv	r3, r8, r2
 80120ea:	fb02 8313 	mls	r3, r2, r3, r8
 80120ee:	fa0f fa83 	sxth.w	sl, r3
 80120f2:	e484      	b.n	80119fe <MotionDI_update+0x23d6>
 80120f4:	eef1 6a47 	vneg.f32	s13, s14
 80120f8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80120fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012100:	bf44      	itt	mi
 8012102:	ee77 7a27 	vaddmi.f32	s15, s14, s15
 8012106:	edc6 7a08 	vstrmi	s15, [r6, #32]
 801210a:	e41d      	b.n	8011948 <MotionDI_update+0x2320>
 801210c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012110:	edc6 7a07 	vstr	s15, [r6, #28]
 8012114:	e636      	b.n	8011d84 <MotionDI_update+0x275c>
 8012116:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801211a:	edc6 7a06 	vstr	s15, [r6, #24]
 801211e:	e619      	b.n	8011d54 <MotionDI_update+0x272c>
 8012120:	eddf 7a04 	vldr	s15, [pc, #16]	; 8012134 <MotionDI_update+0x2b0c>
 8012124:	4639      	mov	r1, r7
 8012126:	4686      	mov	lr, r0
 8012128:	e4ba      	b.n	8011aa0 <MotionDI_update+0x2478>
 801212a:	bf00      	nop
 801212c:	00069780 	.word	0x00069780
 8012130:	20001d7c 	.word	0x20001d7c
 8012134:	00000000 	.word	0x00000000
 8012138:	4bb8      	ldr	r3, [pc, #736]	; (801241c <MotionDI_update+0x2df4>)
 801213a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801213e:	ab33      	add	r3, sp, #204	; 0xcc
 8012140:	931e      	str	r3, [sp, #120]	; 0x78
 8012142:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8012146:	f8ad 10d0 	strh.w	r1, [sp, #208]	; 0xd0
 801214a:	af3f      	add	r7, sp, #252	; 0xfc
 801214c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801214e:	971f      	str	r7, [sp, #124]	; 0x7c
 8012150:	6008      	str	r0, [r1, #0]
 8012152:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8012156:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8012158:	f88d c0d2 	strb.w	ip, [sp, #210]	; 0xd2
 801215c:	af65      	add	r7, sp, #404	; 0x194
 801215e:	f50d 7c8c 	add.w	ip, sp, #280	; 0x118
 8012162:	2300      	movs	r3, #0
 8012164:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 8012168:	971c      	str	r7, [sp, #112]	; 0x70
 801216a:	4619      	mov	r1, r3
 801216c:	e9c8 3300 	strd	r3, r3, [r8]
 8012170:	e9c0 3300 	strd	r3, r3, [r0]
 8012174:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8012178:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801217c:	f8c8 3008 	str.w	r3, [r8, #8]
 8012180:	6183      	str	r3, [r0, #24]
 8012182:	e9dd 031c 	ldrd	r0, r3, [sp, #112]	; 0x70
 8012186:	2200      	movs	r2, #0
 8012188:	f04f 5c7e 	mov.w	ip, #1065353216	; 0x3f800000
 801218c:	605a      	str	r2, [r3, #4]
 801218e:	609a      	str	r2, [r3, #8]
 8012190:	60da      	str	r2, [r3, #12]
 8012192:	615a      	str	r2, [r3, #20]
 8012194:	619a      	str	r2, [r3, #24]
 8012196:	61da      	str	r2, [r3, #28]
 8012198:	601a      	str	r2, [r3, #0]
 801219a:	f8c3 c010 	str.w	ip, [r3, #16]
 801219e:	2270      	movs	r2, #112	; 0x70
 80121a0:	f8c3 c020 	str.w	ip, [r3, #32]
 80121a4:	f000 fe8a 	bl	8012ebc <memset>
 80121a8:	f8b6 2050 	ldrh.w	r2, [r6, #80]	; 0x50
 80121ac:	f8b6 1052 	ldrh.w	r1, [r6, #82]	; 0x52
 80121b0:	f9b6 3058 	ldrsh.w	r3, [r6, #88]	; 0x58
 80121b4:	428a      	cmp	r2, r1
 80121b6:	f103 0301 	add.w	r3, r3, #1
 80121ba:	f000 8616 	beq.w	8012dea <MotionDI_update+0x37c2>
 80121be:	1a9b      	subs	r3, r3, r2
 80121c0:	fb93 f0f1 	sdiv	r0, r3, r1
 80121c4:	fb01 3310 	mls	r3, r1, r0, r3
 80121c8:	b21f      	sxth	r7, r3
 80121ca:	2f00      	cmp	r7, #0
 80121cc:	bfbc      	itt	lt
 80121ce:	185b      	addlt	r3, r3, r1
 80121d0:	b21f      	sxthlt	r7, r3
 80121d2:	2a00      	cmp	r2, #0
 80121d4:	f000 85ef 	beq.w	8012db6 <MotionDI_update+0x378e>
 80121d8:	eddf 6a91 	vldr	s13, [pc, #580]	; 8012420 <MotionDI_update+0x2df8>
 80121dc:	2000      	movs	r0, #0
 80121de:	eeb0 6a66 	vmov.f32	s12, s13
 80121e2:	eef0 5a66 	vmov.f32	s11, s13
 80121e6:	eb00 0c07 	add.w	ip, r0, r7
 80121ea:	fb9c f3f1 	sdiv	r3, ip, r1
 80121ee:	fb01 c313 	mls	r3, r1, r3, ip
 80121f2:	b2db      	uxtb	r3, r3
 80121f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80121f8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80121fc:	3001      	adds	r0, #1
 80121fe:	f9b3 c060 	ldrsh.w	ip, [r3, #96]	; 0x60
 8012202:	ee05 ca10 	vmov	s10, ip
 8012206:	f9b3 c062 	ldrsh.w	ip, [r3, #98]	; 0x62
 801220a:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 801220e:	ee07 ca10 	vmov	s14, ip
 8012212:	ee07 3a90 	vmov	s15, r3
 8012216:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 801221a:	b2c3      	uxtb	r3, r0
 801221c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012220:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012224:	429a      	cmp	r2, r3
 8012226:	ee75 5a85 	vadd.f32	s11, s11, s10
 801222a:	ee36 6a07 	vadd.f32	s12, s12, s14
 801222e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8012232:	4618      	mov	r0, r3
 8012234:	d8d7      	bhi.n	80121e6 <MotionDI_update+0x2bbe>
 8012236:	ee07 2a10 	vmov	s14, r2
 801223a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801223e:	eddf 7a78 	vldr	s15, [pc, #480]	; 8012420 <MotionDI_update+0x2df8>
 8012242:	ee86 aa07 	vdiv.f32	s20, s12, s14
 8012246:	2000      	movs	r0, #0
 8012248:	ee86 9a87 	vdiv.f32	s18, s13, s14
 801224c:	eec5 aa87 	vdiv.f32	s21, s11, s14
 8012250:	eef0 3a67 	vmov.f32	s7, s15
 8012254:	eeb0 4a67 	vmov.f32	s8, s15
 8012258:	eef0 4a67 	vmov.f32	s9, s15
 801225c:	eeb0 5a67 	vmov.f32	s10, s15
 8012260:	eef0 5a67 	vmov.f32	s11, s15
 8012264:	eb00 0c07 	add.w	ip, r0, r7
 8012268:	fb9c f3f1 	sdiv	r3, ip, r1
 801226c:	fb01 c313 	mls	r3, r1, r3, ip
 8012270:	b2db      	uxtb	r3, r3
 8012272:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012276:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801227a:	3001      	adds	r0, #1
 801227c:	f9b3 c060 	ldrsh.w	ip, [r3, #96]	; 0x60
 8012280:	ee06 ca10 	vmov	s12, ip
 8012284:	f9b3 c062 	ldrsh.w	ip, [r3, #98]	; 0x62
 8012288:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 801228c:	ee06 ca90 	vmov	s13, ip
 8012290:	ee07 3a10 	vmov	s14, r3
 8012294:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012298:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801229c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80122a0:	ee36 6a6a 	vsub.f32	s12, s12, s21
 80122a4:	ee76 6aca 	vsub.f32	s13, s13, s20
 80122a8:	ee37 7a49 	vsub.f32	s14, s14, s18
 80122ac:	b2c3      	uxtb	r3, r0
 80122ae:	429a      	cmp	r2, r3
 80122b0:	eee6 5a06 	vfma.f32	s11, s12, s12
 80122b4:	4618      	mov	r0, r3
 80122b6:	eea6 5a26 	vfma.f32	s10, s12, s13
 80122ba:	eea6 4aa6 	vfma.f32	s8, s13, s13
 80122be:	eee6 4a07 	vfma.f32	s9, s12, s14
 80122c2:	eee6 3a87 	vfma.f32	s7, s13, s14
 80122c6:	eee7 7a07 	vfma.f32	s15, s14, s14
 80122ca:	d8cb      	bhi.n	8012264 <MotionDI_update+0x2c3c>
 80122cc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80122ce:	edc3 5a00 	vstr	s11, [r3]
 80122d2:	ed83 5a01 	vstr	s10, [r3, #4]
 80122d6:	edc3 4a02 	vstr	s9, [r3, #8]
 80122da:	ed83 4a03 	vstr	s8, [r3, #12]
 80122de:	edc3 3a04 	vstr	s7, [r3, #16]
 80122e2:	edc3 7a05 	vstr	s15, [r3, #20]
 80122e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80122e8:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 80122ec:	6819      	ldr	r1, [r3, #0]
 80122ee:	68da      	ldr	r2, [r3, #12]
 80122f0:	f8ca 1000 	str.w	r1, [sl]
 80122f4:	4618      	mov	r0, r3
 80122f6:	695b      	ldr	r3, [r3, #20]
 80122f8:	f8ca 3020 	str.w	r3, [sl, #32]
 80122fc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80122fe:	6841      	ldr	r1, [r0, #4]
 8012300:	691b      	ldr	r3, [r3, #16]
 8012302:	f8ca 2010 	str.w	r2, [sl, #16]
 8012306:	f8ca 1004 	str.w	r1, [sl, #4]
 801230a:	6882      	ldr	r2, [r0, #8]
 801230c:	f8ca 100c 	str.w	r1, [sl, #12]
 8012310:	4650      	mov	r0, sl
 8012312:	4641      	mov	r1, r8
 8012314:	f8ca 2008 	str.w	r2, [sl, #8]
 8012318:	f8ca 2018 	str.w	r2, [sl, #24]
 801231c:	f8ca 3014 	str.w	r3, [sl, #20]
 8012320:	f8ca 301c 	str.w	r3, [sl, #28]
 8012324:	f7f6 fb52 	bl	80089cc <st_accCal_MEMS_EIG3>
 8012328:	edd8 7a01 	vldr	s15, [r8, #4]
 801232c:	edd8 6a00 	vldr	s13, [r8]
 8012330:	ed98 7a02 	vldr	s14, [r8, #8]
 8012334:	eef0 7ae7 	vabs.f32	s15, s15
 8012338:	eef0 6ae6 	vabs.f32	s13, s13
 801233c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012344:	eeb0 7ac7 	vabs.f32	s14, s14
 8012348:	bfb4      	ite	lt
 801234a:	eeb0 6a66 	vmovlt.f32	s12, s13
 801234e:	eeb0 6a67 	vmovge.f32	s12, s15
 8012352:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8012356:	bf88      	it	hi
 8012358:	eef0 7a66 	vmovhi.f32	s15, s13
 801235c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012360:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012364:	bfa8      	it	ge
 8012366:	eeb0 6a47 	vmovge.f32	s12, s14
 801236a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801236e:	bf88      	it	hi
 8012370:	eef0 7a47 	vmovhi.f32	s15, s14
 8012374:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8012378:	ee67 7a87 	vmul.f32	s15, s15, s14
 801237c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8012380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012384:	f73f ae58 	bgt.w	8012038 <MotionDI_update+0x2a10>
 8012388:	eddf 7a25 	vldr	s15, [pc, #148]	; 8012420 <MotionDI_update+0x2df8>
 801238c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801238e:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8012390:	f8b6 1050 	ldrh.w	r1, [r6, #80]	; 0x50
 8012394:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 8012398:	2200      	movs	r2, #0
 801239a:	e9c0 2200 	strd	r2, r2, [r0]
 801239e:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80123a2:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 80123a6:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 80123aa:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 80123ae:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 80123b2:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 80123b6:	6102      	str	r2, [r0, #16]
 80123b8:	6142      	str	r2, [r0, #20]
 80123ba:	6182      	str	r2, [r0, #24]
 80123bc:	2900      	cmp	r1, #0
 80123be:	f000 80be 	beq.w	801253e <MotionDI_update+0x2f16>
 80123c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80123c4:	f8b6 c052 	ldrh.w	ip, [r6, #82]	; 0x52
 80123c8:	edd3 fa00 	vldr	s31, [r3]
 80123cc:	ed93 fa07 	vldr	s30, [r3, #28]
 80123d0:	edd3 ea0d 	vldr	s29, [r3, #52]	; 0x34
 80123d4:	edd3 ca01 	vldr	s25, [r3, #4]
 80123d8:	ed93 ca02 	vldr	s24, [r3, #8]
 80123dc:	edd3 ba08 	vldr	s23, [r3, #32]
 80123e0:	ed93 ba03 	vldr	s22, [r3, #12]
 80123e4:	ed93 0a04 	vldr	s0, [r3, #16]
 80123e8:	edd3 0a05 	vldr	s1, [r3, #20]
 80123ec:	ed93 1a09 	vldr	s2, [r3, #36]	; 0x24
 80123f0:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 80123f4:	ed93 2a0b 	vldr	s4, [r3, #44]	; 0x2c
 80123f8:	edd3 2a0e 	vldr	s5, [r3, #56]	; 0x38
 80123fc:	ed93 3a0f 	vldr	s6, [r3, #60]	; 0x3c
 8012400:	edd3 3a10 	vldr	s7, [r3, #64]	; 0x40
 8012404:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8012408:	eeb0 4a67 	vmov.f32	s8, s15
 801240c:	eeb0 da67 	vmov.f32	s26, s15
 8012410:	eef0 da67 	vmov.f32	s27, s15
 8012414:	eeb0 ea67 	vmov.f32	s28, s15
 8012418:	4660      	mov	r0, ip
 801241a:	e003      	b.n	8012424 <MotionDI_update+0x2dfc>
 801241c:	0801514c 	.word	0x0801514c
 8012420:	00000000 	.word	0x00000000
 8012424:	eb02 0c07 	add.w	ip, r2, r7
 8012428:	fb9c f3f0 	sdiv	r3, ip, r0
 801242c:	fb00 c313 	mls	r3, r0, r3, ip
 8012430:	b2db      	uxtb	r3, r3
 8012432:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012436:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801243a:	3201      	adds	r2, #1
 801243c:	f9b3 c060 	ldrsh.w	ip, [r3, #96]	; 0x60
 8012440:	ee06 ca10 	vmov	s12, ip
 8012444:	f9b3 c062 	ldrsh.w	ip, [r3, #98]	; 0x62
 8012448:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 801244c:	ee06 ca90 	vmov	s13, ip
 8012450:	ee07 3a10 	vmov	s14, r3
 8012454:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012458:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801245c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012460:	ee36 6a6a 	vsub.f32	s12, s12, s21
 8012464:	ee37 7a49 	vsub.f32	s14, s14, s18
 8012468:	ee76 6aca 	vsub.f32	s13, s13, s20
 801246c:	ee66 4a06 	vmul.f32	s9, s12, s12
 8012470:	ee26 5aa6 	vmul.f32	s10, s13, s13
 8012474:	ee67 5a07 	vmul.f32	s11, s14, s14
 8012478:	eea6 ba24 	vfma.f32	s22, s12, s9
 801247c:	b2d3      	uxtb	r3, r2
 801247e:	4299      	cmp	r1, r3
 8012480:	eee7 0a24 	vfma.f32	s1, s14, s9
 8012484:	461a      	mov	r2, r3
 8012486:	eea6 1a05 	vfma.f32	s2, s12, s10
 801248a:	eea7 2a05 	vfma.f32	s4, s14, s10
 801248e:	eee4 faa4 	vfma.f32	s31, s9, s9
 8012492:	eea6 0aa4 	vfma.f32	s0, s13, s9
 8012496:	eea5 fa05 	vfma.f32	s30, s10, s10
 801249a:	eee6 1a85 	vfma.f32	s3, s13, s10
 801249e:	eee6 2a25 	vfma.f32	s5, s12, s11
 80124a2:	eee7 3a25 	vfma.f32	s7, s14, s11
 80124a6:	ee3e ea24 	vadd.f32	s28, s28, s9
 80124aa:	ee7d da85 	vadd.f32	s27, s27, s10
 80124ae:	ee66 4a26 	vmul.f32	s9, s12, s13
 80124b2:	ee26 5a07 	vmul.f32	s10, s12, s14
 80124b6:	ee26 6a87 	vmul.f32	s12, s13, s14
 80124ba:	ed9d 7a20 	vldr	s14, [sp, #128]	; 0x80
 80124be:	ee37 7a05 	vadd.f32	s14, s14, s10
 80124c2:	eee5 eaa5 	vfma.f32	s29, s11, s11
 80124c6:	eea6 3aa5 	vfma.f32	s6, s13, s11
 80124ca:	eee4 caa4 	vfma.f32	s25, s9, s9
 80124ce:	eea5 ca05 	vfma.f32	s24, s10, s10
 80124d2:	eee6 ba06 	vfma.f32	s23, s12, s12
 80124d6:	ee3d da25 	vadd.f32	s26, s26, s11
 80124da:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80124de:	ee34 4a06 	vadd.f32	s8, s8, s12
 80124e2:	ed8d 7a20 	vstr	s14, [sp, #128]	; 0x80
 80124e6:	d89d      	bhi.n	8012424 <MotionDI_update+0x2dfc>
 80124e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80124ea:	edc3 fa00 	vstr	s31, [r3]
 80124ee:	ed83 fa07 	vstr	s30, [r3, #28]
 80124f2:	edc3 ea0d 	vstr	s29, [r3, #52]	; 0x34
 80124f6:	ed83 ea12 	vstr	s28, [r3, #72]	; 0x48
 80124fa:	edc3 da16 	vstr	s27, [r3, #88]	; 0x58
 80124fe:	ed83 da19 	vstr	s26, [r3, #100]	; 0x64
 8012502:	edc3 ca01 	vstr	s25, [r3, #4]
 8012506:	ed83 ca02 	vstr	s24, [r3, #8]
 801250a:	edc3 ba08 	vstr	s23, [r3, #32]
 801250e:	ed83 ba03 	vstr	s22, [r3, #12]
 8012512:	ed83 0a04 	vstr	s0, [r3, #16]
 8012516:	edc3 0a05 	vstr	s1, [r3, #20]
 801251a:	ed83 1a09 	vstr	s2, [r3, #36]	; 0x24
 801251e:	edc3 1a0a 	vstr	s3, [r3, #40]	; 0x28
 8012522:	ed83 2a0b 	vstr	s4, [r3, #44]	; 0x2c
 8012526:	edc3 2a0e 	vstr	s5, [r3, #56]	; 0x38
 801252a:	ed83 3a0f 	vstr	s6, [r3, #60]	; 0x3c
 801252e:	edc3 3a10 	vstr	s7, [r3, #64]	; 0x40
 8012532:	ed83 4a17 	vstr	s8, [r3, #92]	; 0x5c
 8012536:	ed83 7a14 	vstr	s14, [r3, #80]	; 0x50
 801253a:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 801253e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012540:	f8cd a098 	str.w	sl, [sp, #152]	; 0x98
 8012544:	4617      	mov	r7, r2
 8012546:	ee07 1a90 	vmov	s15, r1
 801254a:	2300      	movs	r3, #0
 801254c:	f8d2 c048 	ldr.w	ip, [r2, #72]	; 0x48
 8012550:	6d90      	ldr	r0, [r2, #88]	; 0x58
 8012552:	657b      	str	r3, [r7, #84]	; 0x54
 8012554:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8012556:	663b      	str	r3, [r7, #96]	; 0x60
 8012558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801255c:	66bb      	str	r3, [r7, #104]	; 0x68
 801255e:	e9cd 9523 	strd	r9, r5, [sp, #140]	; 0x8c
 8012562:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8012564:	647a      	str	r2, [r7, #68]	; 0x44
 8012566:	2201      	movs	r2, #1
 8012568:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 801256c:	f8c7 c018 	str.w	ip, [r7, #24]
 8012570:	6338      	str	r0, [r7, #48]	; 0x30
 8012572:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
 8012576:	2100      	movs	r1, #0
 8012578:	4692      	mov	sl, r2
 801257a:	469b      	mov	fp, r3
 801257c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012580:	fb0a f303 	mul.w	r3, sl, r3
 8012584:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8012588:	f81b 2b01 	ldrb.w	r2, [fp], #1
 801258c:	9220      	str	r2, [sp, #128]	; 0x80
 801258e:	105b      	asrs	r3, r3, #1
 8012590:	425b      	negs	r3, r3
 8012592:	1c8f      	adds	r7, r1, #2
 8012594:	1ccd      	adds	r5, r1, #3
 8012596:	1d0a      	adds	r2, r1, #4
 8012598:	f101 0e05 	add.w	lr, r1, #5
 801259c:	eb07 0803 	add.w	r8, r7, r3
 80125a0:	462f      	mov	r7, r5
 80125a2:	4615      	mov	r5, r2
 80125a4:	4672      	mov	r2, lr
 80125a6:	441a      	add	r2, r3
 80125a8:	9222      	str	r2, [sp, #136]	; 0x88
 80125aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80125ac:	f101 0c01 	add.w	ip, r1, #1
 80125b0:	18c8      	adds	r0, r1, r3
 80125b2:	eb0c 0903 	add.w	r9, ip, r3
 80125b6:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 80125ba:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80125bc:	981c      	ldr	r0, [sp, #112]	; 0x70
 80125be:	ed9c 7a00 	vldr	s14, [ip]
 80125c2:	fb12 fe02 	smulbb	lr, r2, r2
 80125c6:	ee07 ea90 	vmov	s15, lr
 80125ca:	441d      	add	r5, r3
 80125cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80125d0:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80125d4:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80125d6:	9221      	str	r2, [sp, #132]	; 0x84
 80125d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80125dc:	441f      	add	r7, r3
 80125de:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80125e2:	f1ba 0f07 	cmp.w	sl, #7
 80125e6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 80125ea:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80125ee:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80125f2:	9222      	str	r2, [sp, #136]	; 0x88
 80125f4:	edcc 7a00 	vstr	s15, [ip]
 80125f8:	fa5f fe8a 	uxtb.w	lr, sl
 80125fc:	d06e      	beq.n	80126dc <MotionDI_update+0x30b4>
 80125fe:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8012600:	f89b c000 	ldrb.w	ip, [fp]
 8012604:	ed99 7a00 	vldr	s14, [r9]
 8012608:	fb1c fc05 	smulbb	ip, ip, r5
 801260c:	ee07 ca90 	vmov	s15, ip
 8012610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012614:	f101 0c06 	add.w	ip, r1, #6
 8012618:	ee67 7a87 	vmul.f32	s15, s15, s14
 801261c:	4463      	add	r3, ip
 801261e:	f1be 0f06 	cmp.w	lr, #6
 8012622:	462a      	mov	r2, r5
 8012624:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8012628:	edc9 7a00 	vstr	s15, [r9]
 801262c:	d056      	beq.n	80126dc <MotionDI_update+0x30b4>
 801262e:	f89b c001 	ldrb.w	ip, [fp, #1]
 8012632:	ed98 7a00 	vldr	s14, [r8]
 8012636:	fb1c f005 	smulbb	r0, ip, r5
 801263a:	ee07 0a90 	vmov	s15, r0
 801263e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012642:	f1be 0f05 	cmp.w	lr, #5
 8012646:	ee67 7a87 	vmul.f32	s15, s15, s14
 801264a:	edc8 7a00 	vstr	s15, [r8]
 801264e:	d045      	beq.n	80126dc <MotionDI_update+0x30b4>
 8012650:	f89b c002 	ldrb.w	ip, [fp, #2]
 8012654:	ed97 7a00 	vldr	s14, [r7]
 8012658:	fb1c f005 	smulbb	r0, ip, r5
 801265c:	ee07 0a90 	vmov	s15, r0
 8012660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012664:	f1be 0f04 	cmp.w	lr, #4
 8012668:	ee67 7a87 	vmul.f32	s15, s15, s14
 801266c:	edc7 7a00 	vstr	s15, [r7]
 8012670:	d034      	beq.n	80126dc <MotionDI_update+0x30b4>
 8012672:	9821      	ldr	r0, [sp, #132]	; 0x84
 8012674:	f89b 7003 	ldrb.w	r7, [fp, #3]
 8012678:	ed90 7a00 	vldr	s14, [r0]
 801267c:	fb17 f005 	smulbb	r0, r7, r5
 8012680:	ee07 0a90 	vmov	s15, r0
 8012684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012688:	9821      	ldr	r0, [sp, #132]	; 0x84
 801268a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801268e:	f1be 0f03 	cmp.w	lr, #3
 8012692:	edc0 7a00 	vstr	s15, [r0]
 8012696:	d021      	beq.n	80126dc <MotionDI_update+0x30b4>
 8012698:	9822      	ldr	r0, [sp, #136]	; 0x88
 801269a:	f89b 5004 	ldrb.w	r5, [fp, #4]
 801269e:	ed90 7a00 	vldr	s14, [r0]
 80126a2:	fb15 f002 	smulbb	r0, r5, r2
 80126a6:	ee07 0a90 	vmov	s15, r0
 80126aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80126ae:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80126b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80126b4:	f1be 0f01 	cmp.w	lr, #1
 80126b8:	edc2 7a00 	vstr	s15, [r2]
 80126bc:	d10e      	bne.n	80126dc <MotionDI_update+0x30b4>
 80126be:	f89b 2005 	ldrb.w	r2, [fp, #5]
 80126c2:	9820      	ldr	r0, [sp, #128]	; 0x80
 80126c4:	ed93 7a00 	vldr	s14, [r3]
 80126c8:	fb12 f200 	smulbb	r2, r2, r0
 80126cc:	ee07 2a90 	vmov	s15, r2
 80126d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80126d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80126d8:	edc3 7a00 	vstr	s15, [r3]
 80126dc:	f10a 0a01 	add.w	sl, sl, #1
 80126e0:	f1ba 0f08 	cmp.w	sl, #8
 80126e4:	f101 0108 	add.w	r1, r1, #8
 80126e8:	f47f af48 	bne.w	801257c <MotionDI_update+0x2f54>
 80126ec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80126ee:	e9dd 9523 	ldrd	r9, r5, [sp, #140]	; 0x8c
 80126f2:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
 80126f6:	4613      	mov	r3, r2
 80126f8:	edd3 6a00 	vldr	s13, [r3]
 80126fc:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 8012700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012704:	ece3 7a01 	vstmia	r3!, {s15}
 8012708:	455b      	cmp	r3, fp
 801270a:	d1f5      	bne.n	80126f8 <MotionDI_update+0x30d0>
 801270c:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 801270e:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 8012712:	4638      	mov	r0, r7
 8012714:	4641      	mov	r1, r8
 8012716:	f7f6 fa4b 	bl	8008bb0 <st_accCal_MEMS_ellipsoidFit7>
 801271a:	ed98 5a04 	vldr	s10, [r8, #16]
 801271e:	ed98 3a01 	vldr	s6, [r8, #4]
 8012722:	edd8 4a03 	vldr	s9, [r8, #12]
 8012726:	ed97 6a07 	vldr	s12, [r7, #28]
 801272a:	edd8 3a00 	vldr	s7, [r8]
 801272e:	edd7 ca01 	vldr	s25, [r7, #4]
 8012732:	edd8 5a05 	vldr	s11, [r8, #20]
 8012736:	ed98 4a02 	vldr	s8, [r8, #8]
 801273a:	edd7 6a08 	vldr	s13, [r7, #32]
 801273e:	ed97 0a02 	vldr	s0, [r7, #8]
 8012742:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8012746:	ed97 1a03 	vldr	s2, [r7, #12]
 801274a:	ed97 da00 	vldr	s26, [r7]
 801274e:	edd8 2a06 	vldr	s5, [r8, #24]
 8012752:	edd7 1a04 	vldr	s3, [r7, #16]
 8012756:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 801275a:	eef1 7a45 	vneg.f32	s15, s10
 801275e:	eec7 ba83 	vdiv.f32	s23, s15, s6
 8012762:	ee23 6a06 	vmul.f32	s12, s6, s12
 8012766:	eef1 7a64 	vneg.f32	s15, s9
 801276a:	ee87 caa3 	vdiv.f32	s24, s15, s7
 801276e:	eea3 6aac 	vfma.f32	s12, s7, s25
 8012772:	eef1 7a65 	vneg.f32	s15, s11
 8012776:	eea4 6a26 	vfma.f32	s12, s8, s13
 801277a:	ee63 6a26 	vmul.f32	s13, s6, s13
 801277e:	ee87 ba84 	vdiv.f32	s22, s15, s8
 8012782:	eee3 6a80 	vfma.f32	s13, s7, s0
 8012786:	ee64 7a00 	vmul.f32	s15, s8, s0
 801278a:	eeb0 0a66 	vmov.f32	s0, s13
 801278e:	eee3 7a2c 	vfma.f32	s15, s6, s25
 8012792:	eef0 6a46 	vmov.f32	s13, s12
 8012796:	eee4 6a87 	vfma.f32	s13, s9, s14
 801279a:	ee23 7a07 	vmul.f32	s14, s6, s14
 801279e:	ee25 2a2b 	vmul.f32	s4, s10, s23
 80127a2:	eee3 7a8d 	vfma.f32	s15, s7, s26
 80127a6:	eea3 7a81 	vfma.f32	s14, s7, s2
 80127aa:	eea4 2a8c 	vfma.f32	s4, s9, s24
 80127ae:	eee4 7a81 	vfma.f32	s15, s9, s2
 80127b2:	eeb0 1a47 	vmov.f32	s2, s14
 80127b6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80127ba:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 80127be:	edd7 ca0b 	vldr	s25, [r7, #44]	; 0x2c
 80127c2:	ee32 2a82 	vadd.f32	s4, s5, s4
 80127c6:	eee5 6a07 	vfma.f32	s13, s10, s14
 80127ca:	ee23 7a07 	vmul.f32	s14, s6, s14
 80127ce:	eea5 2a8b 	vfma.f32	s4, s11, s22
 80127d2:	eea3 7aa1 	vfma.f32	s14, s7, s3
 80127d6:	eee5 7a21 	vfma.f32	s15, s10, s3
 80127da:	eeb0 2ac2 	vabs.f32	s4, s4
 80127de:	eeb1 dac2 	vsqrt.f32	s26, s4
 80127e2:	eef0 1a47 	vmov.f32	s3, s14
 80127e6:	ed97 2a05 	vldr	s4, [r7, #20]
 80127ea:	ee22 7a86 	vmul.f32	s14, s5, s12
 80127ee:	eee5 7a82 	vfma.f32	s15, s11, s4
 80127f2:	eea5 7aac 	vfma.f32	s14, s11, s25
 80127f6:	eea4 0a20 	vfma.f32	s0, s8, s1
 80127fa:	edd7 0a06 	vldr	s1, [r7, #24]
 80127fe:	ee37 7a26 	vadd.f32	s14, s14, s13
 8012802:	eee2 7aa0 	vfma.f32	s15, s5, s1
 8012806:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 801280a:	ee27 7a03 	vmul.f32	s14, s14, s6
 801280e:	eea4 0aa6 	vfma.f32	s0, s9, s13
 8012812:	eea4 1a26 	vfma.f32	s2, s8, s13
 8012816:	ee63 6a2c 	vmul.f32	s13, s6, s25
 801281a:	eea3 7aa7 	vfma.f32	s14, s7, s15
 801281e:	eee3 6a82 	vfma.f32	s13, s7, s4
 8012822:	edd7 ca11 	vldr	s25, [r7, #68]	; 0x44
 8012826:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 801282a:	ed97 2a12 	vldr	s4, [r7, #72]	; 0x48
 801282e:	ee23 6a06 	vmul.f32	s12, s6, s12
 8012832:	eea5 0a27 	vfma.f32	s0, s10, s15
 8012836:	eea3 6aa0 	vfma.f32	s12, s7, s1
 801283a:	eee4 1a27 	vfma.f32	s3, s8, s15
 801283e:	eef0 0a66 	vmov.f32	s1, s13
 8012842:	ee62 7aac 	vmul.f32	s15, s5, s25
 8012846:	eef0 6a47 	vmov.f32	s13, s14
 801284a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 801284e:	eee5 7a87 	vfma.f32	s15, s11, s14
 8012852:	eea4 1a82 	vfma.f32	s2, s9, s4
 8012856:	eee4 0a07 	vfma.f32	s1, s8, s14
 801285a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801285e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8012862:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 8012866:	eeb0 2a41 	vmov.f32	s4, s2
 801286a:	eea5 2a07 	vfma.f32	s4, s10, s14
 801286e:	eee4 1a87 	vfma.f32	s3, s9, s14
 8012872:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 8012876:	ee22 7a80 	vmul.f32	s14, s5, s0
 801287a:	eea4 6a2c 	vfma.f32	s12, s8, s25
 801287e:	eea5 7a81 	vfma.f32	s14, s11, s2
 8012882:	eee4 6a27 	vfma.f32	s13, s8, s15
 8012886:	eef1 dac3 	vsqrt.f32	s27, s6
 801288a:	eeb1 3ae3 	vsqrt.f32	s6, s7
 801288e:	eef1 3ac4 	vsqrt.f32	s7, s8
 8012892:	ee37 4a02 	vadd.f32	s8, s14, s4
 8012896:	eef0 7a46 	vmov.f32	s15, s12
 801289a:	eee4 7a80 	vfma.f32	s15, s9, s0
 801289e:	eee4 6a84 	vfma.f32	s13, s9, s8
 80128a2:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 80128a6:	ed97 4a16 	vldr	s8, [r7, #88]	; 0x58
 80128aa:	eeb0 2a60 	vmov.f32	s4, s1
 80128ae:	eea4 2a81 	vfma.f32	s4, s9, s2
 80128b2:	eee5 1a04 	vfma.f32	s3, s10, s8
 80128b6:	edd7 4a17 	vldr	s9, [r7, #92]	; 0x5c
 80128ba:	ed97 1a1a 	vldr	s2, [r7, #104]	; 0x68
 80128be:	ee22 4a80 	vmul.f32	s8, s5, s0
 80128c2:	ee69 ca8d 	vmul.f32	s25, s19, s26
 80128c6:	eea5 4aa4 	vfma.f32	s8, s11, s9
 80128ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80128ce:	ee34 4a21 	vadd.f32	s8, s8, s3
 80128d2:	ee87 6a2c 	vdiv.f32	s12, s14, s25
 80128d6:	eea5 2a24 	vfma.f32	s4, s10, s9
 80128da:	eee5 7a00 	vfma.f32	s15, s10, s0
 80128de:	eee5 6a04 	vfma.f32	s13, s10, s8
 80128e2:	ee62 4a81 	vmul.f32	s9, s5, s2
 80128e6:	ed97 5a19 	vldr	s10, [r7, #100]	; 0x64
 80128ea:	eee5 4a85 	vfma.f32	s9, s11, s10
 80128ee:	eee5 7a81 	vfma.f32	s15, s11, s2
 80128f2:	ee74 4a82 	vadd.f32	s9, s9, s4
 80128f6:	ed97 5a1b 	vldr	s10, [r7, #108]	; 0x6c
 80128fa:	eee5 6aa4 	vfma.f32	s13, s11, s9
 80128fe:	eee2 7a85 	vfma.f32	s15, s5, s10
 8012902:	ee66 da2d 	vmul.f32	s27, s12, s27
 8012906:	eee2 6aa7 	vfma.f32	s13, s5, s15
 801290a:	ee26 ea23 	vmul.f32	s28, s12, s7
 801290e:	ee26 6a03 	vmul.f32	s12, s12, s6
 8012912:	eef4 dac7 	vcmpe.f32	s27, s14
 8012916:	eef0 5a66 	vmov.f32	s11, s13
 801291a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801291e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012922:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8012926:	bf4c      	ite	mi
 8012928:	ee37 7a6d 	vsubmi.f32	s14, s14, s27
 801292c:	ee3d 7ac7 	vsubpl.f32	s14, s27, s14
 8012930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012934:	bf4c      	ite	mi
 8012936:	ee76 6ac6 	vsubmi.f32	s13, s13, s12
 801293a:	ee76 6a66 	vsubpl.f32	s13, s12, s13
 801293e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012942:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8012946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801294a:	eeb4 eae7 	vcmpe.f32	s28, s15
 801294e:	bfb8      	it	lt
 8012950:	eeb0 7a66 	vmovlt.f32	s14, s13
 8012954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012958:	bf4c      	ite	mi
 801295a:	ee77 7ace 	vsubmi.f32	s15, s15, s28
 801295e:	ee7e 7a67 	vsubpl.f32	s15, s28, s15
 8012962:	eddf 6af2 	vldr	s13, [pc, #968]	; 8012d2c <MotionDI_update+0x3704>
 8012966:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801296e:	bfa8      	it	ge
 8012970:	eef0 7a47 	vmovge.f32	s15, s14
 8012974:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801297c:	f57f ab5c 	bpl.w	8012038 <MotionDI_update+0x2a10>
 8012980:	ee3e 7a2d 	vadd.f32	s14, s28, s27
 8012984:	eddf 4aea 	vldr	s9, [pc, #936]	; 8012d30 <MotionDI_update+0x3708>
 8012988:	eddf 6aea 	vldr	s13, [pc, #936]	; 8012d34 <MotionDI_update+0x370c>
 801298c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012990:	eeb0 4a4e 	vmov.f32	s8, s28
 8012994:	eea7 4a64 	vfms.f32	s8, s14, s9
 8012998:	eeb0 7ac4 	vabs.f32	s14, s8
 801299c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80129a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129a4:	bfa8      	it	ge
 80129a6:	eef0 7a47 	vmovge.f32	s15, s14
 80129aa:	eef4 7ae6 	vcmpe.f32	s15, s13
 80129ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129b2:	f57f ab41 	bpl.w	8012038 <MotionDI_update+0x2a10>
 80129b6:	eef0 7ae5 	vabs.f32	s15, s11
 80129ba:	ee87 7a85 	vdiv.f32	s14, s15, s10
 80129be:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 80129c2:	eef1 5ac7 	vsqrt.f32	s11, s14
 80129c6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80129ca:	eef1 7ae5 	vsqrt.f32	s15, s11
 80129ce:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80129d2:	eec7 ca8d 	vdiv.f32	s25, s15, s26
 80129d6:	eef4 cac7 	vcmpe.f32	s25, s14
 80129da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129de:	f73f ab2b 	bgt.w	8012038 <MotionDI_update+0x2a10>
 80129e2:	eddf ead5 	vldr	s29, [pc, #852]	; 8012d38 <MotionDI_update+0x3710>
 80129e6:	ed9f dad5 	vldr	s26, [pc, #852]	; 8012d3c <MotionDI_update+0x3714>
 80129ea:	ee26 0a2e 	vmul.f32	s0, s12, s29
 80129ee:	f000 fb33 	bl	8013058 <roundf>
 80129f2:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 80129f4:	ee60 7a0d 	vmul.f32	s15, s0, s26
 80129f8:	ee2d 0aae 	vmul.f32	s0, s27, s29
 80129fc:	edc7 7a00 	vstr	s15, [r7]
 8012a00:	f000 fb2a 	bl	8013058 <roundf>
 8012a04:	ee60 7a0d 	vmul.f32	s15, s0, s26
 8012a08:	ee2e 0a2e 	vmul.f32	s0, s28, s29
 8012a0c:	edc7 7a04 	vstr	s15, [r7, #16]
 8012a10:	f000 fb22 	bl	8013058 <roundf>
 8012a14:	ee60 7a0d 	vmul.f32	s15, s0, s26
 8012a18:	ee3c 0a2a 	vadd.f32	s0, s24, s21
 8012a1c:	edc7 7a08 	vstr	s15, [r7, #32]
 8012a20:	971d      	str	r7, [sp, #116]	; 0x74
 8012a22:	f000 fb19 	bl	8013058 <roundf>
 8012a26:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012a2a:	ee3b 0a8a 	vadd.f32	s0, s23, s20
 8012a2e:	ee17 3a90 	vmov	r3, s15
 8012a32:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
 8012a36:	f000 fb0f 	bl	8013058 <roundf>
 8012a3a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012a3e:	ee3b 0a09 	vadd.f32	s0, s22, s18
 8012a42:	ee17 3a90 	vmov	r3, s15
 8012a46:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
 8012a4a:	f000 fb05 	bl	8013058 <roundf>
 8012a4e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8012a52:	f10d 03aa 	add.w	r3, sp, #170	; 0xaa
 8012a56:	ee17 7a90 	vmov	r7, s15
 8012a5a:	9300      	str	r3, [sp, #0]
 8012a5c:	991d      	ldr	r1, [sp, #116]	; 0x74
 8012a5e:	edc6 8a04 	vstr	s17, [r6, #16]
 8012a62:	aa2b      	add	r2, sp, #172	; 0xac
 8012a64:	ab2c      	add	r3, sp, #176	; 0xb0
 8012a66:	eeb0 0a69 	vmov.f32	s0, s19
 8012a6a:	a82f      	add	r0, sp, #188	; 0xbc
 8012a6c:	f8ad 70c0 	strh.w	r7, [sp, #192]	; 0xc0
 8012a70:	f7f7 fd06 	bl	800a480 <getAccStats.constprop.0>
 8012a74:	f8b6 1050 	ldrh.w	r1, [r6, #80]	; 0x50
 8012a78:	f89d 20aa 	ldrb.w	r2, [sp, #170]	; 0xaa
 8012a7c:	eddf 6ab0 	vldr	s13, [pc, #704]	; 8012d40 <MotionDI_update+0x3718>
 8012a80:	231e      	movs	r3, #30
 8012a82:	fb03 f301 	mul.w	r3, r3, r1
 8012a86:	ee07 3a90 	vmov	s15, r3
 8012a8a:	ee07 2a10 	vmov	s14, r2
 8012a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012a92:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012a96:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012a9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012aa2:	f73f aac9 	bgt.w	8012038 <MotionDI_update+0x2a10>
 8012aa6:	eddd 3a2c 	vldr	s7, [sp, #176]	; 0xb0
 8012aaa:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8012d44 <MotionDI_update+0x371c>
 8012aae:	eef4 3ae7 	vcmpe.f32	s7, s15
 8012ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ab6:	f73f aabf 	bgt.w	8012038 <MotionDI_update+0x2a10>
 8012aba:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8012abe:	eef4 3ae7 	vcmpe.f32	s7, s15
 8012ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ac6:	dd04      	ble.n	8012ad2 <MotionDI_update+0x34aa>
 8012ac8:	f89d 30ab 	ldrb.w	r3, [sp, #171]	; 0xab
 8012acc:	4293      	cmp	r3, r2
 8012ace:	f67f aab3 	bls.w	8012038 <MotionDI_update+0x2a10>
 8012ad2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d170      	bne.n	8012bba <MotionDI_update+0x3592>
 8012ad8:	f9bd 20bc 	ldrsh.w	r2, [sp, #188]	; 0xbc
 8012adc:	f896 346c 	ldrb.w	r3, [r6, #1132]	; 0x46c
 8012ae0:	f9bd 10c0 	ldrsh.w	r1, [sp, #192]	; 0xc0
 8012ae4:	ed96 1a06 	vldr	s2, [r6, #24]
 8012ae8:	edd6 1a07 	vldr	s3, [r6, #28]
 8012aec:	eddf 2a91 	vldr	s5, [pc, #580]	; 8012d34 <MotionDI_update+0x370c>
 8012af0:	ed96 2a08 	vldr	s4, [r6, #32]
 8012af4:	ee06 2a90 	vmov	s13, r2
 8012af8:	f9bd 20be 	ldrsh.w	r2, [sp, #190]	; 0xbe
 8012afc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8012b00:	ee07 2a10 	vmov	s14, r2
 8012b04:	2b01      	cmp	r3, #1
 8012b06:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012b0a:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8012b0e:	bf18      	it	ne
 8012b10:	eef0 5a46 	vmovne.f32	s11, s12
 8012b14:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012b16:	eeb1 3a04 	vmov.f32	s6, #20	; 0x40a00000  5.0
 8012b1a:	ee33 3a65 	vsub.f32	s6, s6, s11
 8012b1e:	ee07 1a90 	vmov	s15, r1
 8012b22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012b26:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8012b2a:	ed92 4a00 	vldr	s8, [r2]
 8012b2e:	edd2 4a04 	vldr	s9, [r2, #16]
 8012b32:	ed92 5a08 	vldr	s10, [r2, #32]
 8012b36:	eee1 6a03 	vfma.f32	s13, s2, s6
 8012b3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012b3e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8012b42:	ee34 4a46 	vsub.f32	s8, s8, s12
 8012b46:	eea3 7a21 	vfma.f32	s14, s6, s3
 8012b4a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012b4e:	ee24 4a22 	vmul.f32	s8, s8, s5
 8012b52:	eee3 7a02 	vfma.f32	s15, s6, s4
 8012b56:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8012b5a:	eeb0 3a46 	vmov.f32	s6, s12
 8012b5e:	eea5 3a84 	vfma.f32	s6, s11, s8
 8012b62:	ee74 4ac6 	vsub.f32	s9, s9, s12
 8012b66:	ee35 5a46 	vsub.f32	s10, s10, s12
 8012b6a:	ee27 7a22 	vmul.f32	s14, s14, s5
 8012b6e:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8012b72:	ee64 4aa2 	vmul.f32	s9, s9, s5
 8012b76:	ee16 3a90 	vmov	r3, s13
 8012b7a:	ee25 5a22 	vmul.f32	s10, s10, s5
 8012b7e:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8012b82:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8012b86:	eeb0 4a43 	vmov.f32	s8, s6
 8012b8a:	eeb0 3a46 	vmov.f32	s6, s12
 8012b8e:	eea4 3aa5 	vfma.f32	s6, s9, s11
 8012b92:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
 8012b96:	eea5 6a25 	vfma.f32	s12, s10, s11
 8012b9a:	ee17 3a10 	vmov	r3, s14
 8012b9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012ba2:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
 8012ba6:	ee17 3a90 	vmov	r3, s15
 8012baa:	ed82 4a00 	vstr	s8, [r2]
 8012bae:	f8ad 30c0 	strh.w	r3, [sp, #192]	; 0xc0
 8012bb2:	ed82 3a04 	vstr	s6, [r2, #16]
 8012bb6:	ed82 6a08 	vstr	s12, [r2, #32]
 8012bba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012bbe:	ee77 caec 	vsub.f32	s25, s15, s25
 8012bc2:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 8012bc6:	eddf 5a60 	vldr	s11, [pc, #384]	; 8012d48 <MotionDI_update+0x3720>
 8012bca:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8012bcc:	ee83 6aac 	vdiv.f32	s12, s7, s25
 8012bd0:	ee06 3a90 	vmov	s13, r3
 8012bd4:	f9bd 30be 	ldrsh.w	r3, [sp, #190]	; 0xbe
 8012bd8:	ee07 3a10 	vmov	s14, r3
 8012bdc:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8012be0:	ee07 3a90 	vmov	s15, r3
 8012be4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8012be6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012bea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012bf2:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8012bf6:	6818      	ldr	r0, [r3, #0]
 8012bf8:	6919      	ldr	r1, [r3, #16]
 8012bfa:	f8d3 c020 	ldr.w	ip, [r3, #32]
 8012bfe:	edc7 6a01 	vstr	s13, [r7, #4]
 8012c02:	f240 1303 	movw	r3, #259	; 0x103
 8012c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c0a:	ed87 7a02 	vstr	s14, [r7, #8]
 8012c0e:	edc7 7a03 	vstr	s15, [r7, #12]
 8012c12:	6138      	str	r0, [r7, #16]
 8012c14:	6239      	str	r1, [r7, #32]
 8012c16:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 8012c1a:	803b      	strh	r3, [r7, #0]
 8012c1c:	f340 80ad 	ble.w	8012d7a <MotionDI_update+0x3752>
 8012c20:	2302      	movs	r3, #2
 8012c22:	703b      	strb	r3, [r7, #0]
 8012c24:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8012c26:	2200      	movs	r2, #0
 8012c28:	f886 204c 	strb.w	r2, [r6, #76]	; 0x4c
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	f43e afca 	beq.w	8011bc6 <MotionDI_update+0x259e>
 8012c32:	7d32      	ldrb	r2, [r6, #20]
 8012c34:	2a03      	cmp	r2, #3
 8012c36:	f47e afc6 	bne.w	8011bc6 <MotionDI_update+0x259e>
 8012c3a:	ee07 3a90 	vmov	s15, r3
 8012c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c42:	eddf 6a42 	vldr	s13, [pc, #264]	; 8012d4c <MotionDI_update+0x3724>
 8012c46:	ee38 6a67 	vsub.f32	s12, s16, s15
 8012c4a:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8012c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c52:	f100 808f 	bmi.w	8012d74 <MotionDI_update+0x374c>
 8012c56:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8012d50 <MotionDI_update+0x3728>
 8012c5a:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8012c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c62:	f140 8096 	bpl.w	8012d92 <MotionDI_update+0x376a>
 8012c66:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8012c6a:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8012d54 <MotionDI_update+0x372c>
 8012c6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012c72:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012c76:	eee7 7a26 	vfma.f32	s15, s14, s13
 8012c7a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012c7c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8012c80:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012c84:	ed9f 8a34 	vldr	s16, [pc, #208]	; 8012d58 <MotionDI_update+0x3730>
 8012c88:	ed93 7a04 	vldr	s14, [r3, #16]
 8012c8c:	ed96 6a09 	vldr	s12, [r6, #36]	; 0x24
 8012c90:	ed93 0a01 	vldr	s0, [r3, #4]
 8012c94:	edd6 6a06 	vldr	s13, [r6, #24]
 8012c98:	eef4 7ac8 	vcmpe.f32	s15, s16
 8012c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ca0:	bfa8      	it	ge
 8012ca2:	eeb0 8a67 	vmovge.f32	s16, s15
 8012ca6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012caa:	ee78 8ac8 	vsub.f32	s17, s17, s16
 8012cae:	461f      	mov	r7, r3
 8012cb0:	ee68 7a87 	vmul.f32	s15, s17, s14
 8012cb4:	ee28 0a80 	vmul.f32	s0, s17, s0
 8012cb8:	eee8 7a06 	vfma.f32	s15, s16, s12
 8012cbc:	eea8 0a26 	vfma.f32	s0, s16, s13
 8012cc0:	edc6 7a09 	vstr	s15, [r6, #36]	; 0x24
 8012cc4:	f000 f9c8 	bl	8013058 <roundf>
 8012cc8:	edd7 7a08 	vldr	s15, [r7, #32]
 8012ccc:	ed97 7a02 	vldr	s14, [r7, #8]
 8012cd0:	ed96 6a0d 	vldr	s12, [r6, #52]	; 0x34
 8012cd4:	edd6 6a07 	vldr	s13, [r6, #28]
 8012cd8:	ed86 0a06 	vstr	s0, [r6, #24]
 8012cdc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8012ce0:	ee28 7a87 	vmul.f32	s14, s17, s14
 8012ce4:	eee8 7a06 	vfma.f32	s15, s16, s12
 8012ce8:	eea8 7a26 	vfma.f32	s14, s16, s13
 8012cec:	edc6 7a0d 	vstr	s15, [r6, #52]	; 0x34
 8012cf0:	eeb0 0a47 	vmov.f32	s0, s14
 8012cf4:	f000 f9b0 	bl	8013058 <roundf>
 8012cf8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8012cfc:	edd6 6a11 	vldr	s13, [r6, #68]	; 0x44
 8012d00:	ed97 6a03 	vldr	s12, [r7, #12]
 8012d04:	ed96 7a08 	vldr	s14, [r6, #32]
 8012d08:	ed86 0a07 	vstr	s0, [r6, #28]
 8012d0c:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8012d10:	ee28 0a86 	vmul.f32	s0, s17, s12
 8012d14:	eee8 7a26 	vfma.f32	s15, s16, s13
 8012d18:	eea8 0a07 	vfma.f32	s0, s16, s14
 8012d1c:	edc6 7a11 	vstr	s15, [r6, #68]	; 0x44
 8012d20:	f000 f99a 	bl	8013058 <roundf>
 8012d24:	ed86 0a08 	vstr	s0, [r6, #32]
 8012d28:	e022      	b.n	8012d70 <MotionDI_update+0x3748>
 8012d2a:	bf00      	nop
 8012d2c:	3e99999a 	.word	0x3e99999a
 8012d30:	3eaaaaab 	.word	0x3eaaaaab
 8012d34:	3e4ccccd 	.word	0x3e4ccccd
 8012d38:	49742400 	.word	0x49742400
 8012d3c:	358637bd 	.word	0x358637bd
 8012d40:	3c23d70a 	.word	0x3c23d70a
 8012d44:	3e19999a 	.word	0x3e19999a
 8012d48:	3d75c28f 	.word	0x3d75c28f
 8012d4c:	42f00000 	.word	0x42f00000
 8012d50:	45e10000 	.word	0x45e10000
 8012d54:	38941a9d 	.word	0x38941a9d
 8012d58:	00000000 	.word	0x00000000
 8012d5c:	3df5c28f 	.word	0x3df5c28f
 8012d60:	47a8c000 	.word	0x47a8c000
 8012d64:	367e3344 	.word	0x367e3344
 8012d68:	7fc00000 	.word	0x7fc00000
 8012d6c:	3dcccccd 	.word	0x3dcccccd
 8012d70:	f7fe bf38 	b.w	8011be4 <MotionDI_update+0x25bc>
 8012d74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012d78:	e77f      	b.n	8012c7a <MotionDI_update+0x3652>
 8012d7a:	ed5f 7a08 	vldr	s15, [pc, #-32]	; 8012d5c <MotionDI_update+0x3734>
 8012d7e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8012d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d86:	f77f af4d 	ble.w	8012c24 <MotionDI_update+0x35fc>
 8012d8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012d8c:	2301      	movs	r3, #1
 8012d8e:	7013      	strb	r3, [r2, #0]
 8012d90:	e748      	b.n	8012c24 <MotionDI_update+0x35fc>
 8012d92:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 8012d60 <MotionDI_update+0x3738>
 8012d96:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8012d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d9e:	d52b      	bpl.n	8012df8 <MotionDI_update+0x37d0>
 8012da0:	ee37 7a48 	vsub.f32	s14, s14, s16
 8012da4:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 8012d64 <MotionDI_update+0x373c>
 8012da8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012dac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012db0:	eee7 7a26 	vfma.f32	s15, s14, s13
 8012db4:	e761      	b.n	8012c7a <MotionDI_update+0x3652>
 8012db6:	ed1f 9a14 	vldr	s18, [pc, #-80]	; 8012d68 <MotionDI_update+0x3740>
 8012dba:	eeb0 aa49 	vmov.f32	s20, s18
 8012dbe:	eef0 aa49 	vmov.f32	s21, s18
 8012dc2:	f7ff ba90 	b.w	80122e6 <MotionDI_update+0x2cbe>
 8012dc6:	aa33      	add	r2, sp, #204	; 0xcc
 8012dc8:	921e      	str	r2, [sp, #120]	; 0x78
 8012dca:	aa65      	add	r2, sp, #404	; 0x194
 8012dcc:	921c      	str	r2, [sp, #112]	; 0x70
 8012dce:	e734      	b.n	8012c3a <MotionDI_update+0x3612>
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 8012dd6:	ab33      	add	r3, sp, #204	; 0xcc
 8012dd8:	931e      	str	r3, [sp, #120]	; 0x78
 8012dda:	ab65      	add	r3, sp, #404	; 0x194
 8012ddc:	edc6 8a04 	vstr	s17, [r6, #16]
 8012de0:	931c      	str	r3, [sp, #112]	; 0x70
 8012de2:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 8012de6:	f7ff b92a 	b.w	801203e <MotionDI_update+0x2a16>
 8012dea:	fb93 f7f2 	sdiv	r7, r3, r2
 8012dee:	fb02 3317 	mls	r3, r2, r7, r3
 8012df2:	b21f      	sxth	r7, r3
 8012df4:	f7ff b9ed 	b.w	80121d2 <MotionDI_update+0x2baa>
 8012df8:	ed5f 7a24 	vldr	s15, [pc, #-144]	; 8012d6c <MotionDI_update+0x3744>
 8012dfc:	e73d      	b.n	8012c7a <MotionDI_update+0x3652>
 8012dfe:	bf00      	nop

08012e00 <MotionDI_GetLibVersion>:
 8012e00:	4b10      	ldr	r3, [pc, #64]	; (8012e44 <MotionDI_GetLibVersion+0x44>)
 8012e02:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 8012e06:	b90b      	cbnz	r3, 8012e0c <MotionDI_GetLibVersion+0xc>
 8012e08:	4618      	mov	r0, r3
 8012e0a:	4770      	bx	lr
 8012e0c:	b470      	push	{r4, r5, r6}
 8012e0e:	4e0e      	ldr	r6, [pc, #56]	; (8012e48 <MotionDI_GetLibVersion+0x48>)
 8012e10:	4604      	mov	r4, r0
 8012e12:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012e14:	b08b      	sub	sp, #44	; 0x2c
 8012e16:	ad01      	add	r5, sp, #4
 8012e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012e1a:	6833      	ldr	r3, [r6, #0]
 8012e1c:	f825 3b02 	strh.w	r3, [r5], #2
 8012e20:	0c1b      	lsrs	r3, r3, #16
 8012e22:	702b      	strb	r3, [r5, #0]
 8012e24:	ad01      	add	r5, sp, #4
 8012e26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012e28:	882e      	ldrh	r6, [r5, #0]
 8012e2a:	60e3      	str	r3, [r4, #12]
 8012e2c:	78ad      	ldrb	r5, [r5, #2]
 8012e2e:	6020      	str	r0, [r4, #0]
 8012e30:	2312      	movs	r3, #18
 8012e32:	4618      	mov	r0, r3
 8012e34:	6061      	str	r1, [r4, #4]
 8012e36:	60a2      	str	r2, [r4, #8]
 8012e38:	8226      	strh	r6, [r4, #16]
 8012e3a:	74a5      	strb	r5, [r4, #18]
 8012e3c:	b00b      	add	sp, #44	; 0x2c
 8012e3e:	bc70      	pop	{r4, r5, r6}
 8012e40:	4770      	bx	lr
 8012e42:	bf00      	nop
 8012e44:	20001698 	.word	0x20001698
 8012e48:	080150d8 	.word	0x080150d8

08012e4c <__errno>:
 8012e4c:	4b01      	ldr	r3, [pc, #4]	; (8012e54 <__errno+0x8>)
 8012e4e:	6818      	ldr	r0, [r3, #0]
 8012e50:	4770      	bx	lr
 8012e52:	bf00      	nop
 8012e54:	20001614 	.word	0x20001614

08012e58 <__libc_init_array>:
 8012e58:	b570      	push	{r4, r5, r6, lr}
 8012e5a:	4d0d      	ldr	r5, [pc, #52]	; (8012e90 <__libc_init_array+0x38>)
 8012e5c:	4c0d      	ldr	r4, [pc, #52]	; (8012e94 <__libc_init_array+0x3c>)
 8012e5e:	1b64      	subs	r4, r4, r5
 8012e60:	10a4      	asrs	r4, r4, #2
 8012e62:	2600      	movs	r6, #0
 8012e64:	42a6      	cmp	r6, r4
 8012e66:	d109      	bne.n	8012e7c <__libc_init_array+0x24>
 8012e68:	4d0b      	ldr	r5, [pc, #44]	; (8012e98 <__libc_init_array+0x40>)
 8012e6a:	4c0c      	ldr	r4, [pc, #48]	; (8012e9c <__libc_init_array+0x44>)
 8012e6c:	f002 f85a 	bl	8014f24 <_init>
 8012e70:	1b64      	subs	r4, r4, r5
 8012e72:	10a4      	asrs	r4, r4, #2
 8012e74:	2600      	movs	r6, #0
 8012e76:	42a6      	cmp	r6, r4
 8012e78:	d105      	bne.n	8012e86 <__libc_init_array+0x2e>
 8012e7a:	bd70      	pop	{r4, r5, r6, pc}
 8012e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e80:	4798      	blx	r3
 8012e82:	3601      	adds	r6, #1
 8012e84:	e7ee      	b.n	8012e64 <__libc_init_array+0xc>
 8012e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e8a:	4798      	blx	r3
 8012e8c:	3601      	adds	r6, #1
 8012e8e:	e7f2      	b.n	8012e76 <__libc_init_array+0x1e>
 8012e90:	080155d0 	.word	0x080155d0
 8012e94:	080155d0 	.word	0x080155d0
 8012e98:	080155d0 	.word	0x080155d0
 8012e9c:	080155d4 	.word	0x080155d4

08012ea0 <memcpy>:
 8012ea0:	440a      	add	r2, r1
 8012ea2:	4291      	cmp	r1, r2
 8012ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8012ea8:	d100      	bne.n	8012eac <memcpy+0xc>
 8012eaa:	4770      	bx	lr
 8012eac:	b510      	push	{r4, lr}
 8012eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012eb6:	4291      	cmp	r1, r2
 8012eb8:	d1f9      	bne.n	8012eae <memcpy+0xe>
 8012eba:	bd10      	pop	{r4, pc}

08012ebc <memset>:
 8012ebc:	4402      	add	r2, r0
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	4293      	cmp	r3, r2
 8012ec2:	d100      	bne.n	8012ec6 <memset+0xa>
 8012ec4:	4770      	bx	lr
 8012ec6:	f803 1b01 	strb.w	r1, [r3], #1
 8012eca:	e7f9      	b.n	8012ec0 <memset+0x4>
 8012ecc:	0000      	movs	r0, r0
	...

08012ed0 <floor>:
 8012ed0:	ec51 0b10 	vmov	r0, r1, d0
 8012ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ed8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012edc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012ee0:	2e13      	cmp	r6, #19
 8012ee2:	ee10 5a10 	vmov	r5, s0
 8012ee6:	ee10 8a10 	vmov	r8, s0
 8012eea:	460c      	mov	r4, r1
 8012eec:	dc32      	bgt.n	8012f54 <floor+0x84>
 8012eee:	2e00      	cmp	r6, #0
 8012ef0:	da14      	bge.n	8012f1c <floor+0x4c>
 8012ef2:	a333      	add	r3, pc, #204	; (adr r3, 8012fc0 <floor+0xf0>)
 8012ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef8:	f7ed f96c 	bl	80001d4 <__adddf3>
 8012efc:	2200      	movs	r2, #0
 8012efe:	2300      	movs	r3, #0
 8012f00:	f7ed fdae 	bl	8000a60 <__aeabi_dcmpgt>
 8012f04:	b138      	cbz	r0, 8012f16 <floor+0x46>
 8012f06:	2c00      	cmp	r4, #0
 8012f08:	da57      	bge.n	8012fba <floor+0xea>
 8012f0a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012f0e:	431d      	orrs	r5, r3
 8012f10:	d001      	beq.n	8012f16 <floor+0x46>
 8012f12:	4c2d      	ldr	r4, [pc, #180]	; (8012fc8 <floor+0xf8>)
 8012f14:	2500      	movs	r5, #0
 8012f16:	4621      	mov	r1, r4
 8012f18:	4628      	mov	r0, r5
 8012f1a:	e025      	b.n	8012f68 <floor+0x98>
 8012f1c:	4f2b      	ldr	r7, [pc, #172]	; (8012fcc <floor+0xfc>)
 8012f1e:	4137      	asrs	r7, r6
 8012f20:	ea01 0307 	and.w	r3, r1, r7
 8012f24:	4303      	orrs	r3, r0
 8012f26:	d01f      	beq.n	8012f68 <floor+0x98>
 8012f28:	a325      	add	r3, pc, #148	; (adr r3, 8012fc0 <floor+0xf0>)
 8012f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f2e:	f7ed f951 	bl	80001d4 <__adddf3>
 8012f32:	2200      	movs	r2, #0
 8012f34:	2300      	movs	r3, #0
 8012f36:	f7ed fd93 	bl	8000a60 <__aeabi_dcmpgt>
 8012f3a:	2800      	cmp	r0, #0
 8012f3c:	d0eb      	beq.n	8012f16 <floor+0x46>
 8012f3e:	2c00      	cmp	r4, #0
 8012f40:	bfbe      	ittt	lt
 8012f42:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012f46:	fa43 f606 	asrlt.w	r6, r3, r6
 8012f4a:	19a4      	addlt	r4, r4, r6
 8012f4c:	ea24 0407 	bic.w	r4, r4, r7
 8012f50:	2500      	movs	r5, #0
 8012f52:	e7e0      	b.n	8012f16 <floor+0x46>
 8012f54:	2e33      	cmp	r6, #51	; 0x33
 8012f56:	dd0b      	ble.n	8012f70 <floor+0xa0>
 8012f58:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012f5c:	d104      	bne.n	8012f68 <floor+0x98>
 8012f5e:	ee10 2a10 	vmov	r2, s0
 8012f62:	460b      	mov	r3, r1
 8012f64:	f7ed f936 	bl	80001d4 <__adddf3>
 8012f68:	ec41 0b10 	vmov	d0, r0, r1
 8012f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012f70:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012f74:	f04f 33ff 	mov.w	r3, #4294967295
 8012f78:	fa23 f707 	lsr.w	r7, r3, r7
 8012f7c:	4207      	tst	r7, r0
 8012f7e:	d0f3      	beq.n	8012f68 <floor+0x98>
 8012f80:	a30f      	add	r3, pc, #60	; (adr r3, 8012fc0 <floor+0xf0>)
 8012f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f86:	f7ed f925 	bl	80001d4 <__adddf3>
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	f7ed fd67 	bl	8000a60 <__aeabi_dcmpgt>
 8012f92:	2800      	cmp	r0, #0
 8012f94:	d0bf      	beq.n	8012f16 <floor+0x46>
 8012f96:	2c00      	cmp	r4, #0
 8012f98:	da02      	bge.n	8012fa0 <floor+0xd0>
 8012f9a:	2e14      	cmp	r6, #20
 8012f9c:	d103      	bne.n	8012fa6 <floor+0xd6>
 8012f9e:	3401      	adds	r4, #1
 8012fa0:	ea25 0507 	bic.w	r5, r5, r7
 8012fa4:	e7b7      	b.n	8012f16 <floor+0x46>
 8012fa6:	2301      	movs	r3, #1
 8012fa8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012fac:	fa03 f606 	lsl.w	r6, r3, r6
 8012fb0:	4435      	add	r5, r6
 8012fb2:	4545      	cmp	r5, r8
 8012fb4:	bf38      	it	cc
 8012fb6:	18e4      	addcc	r4, r4, r3
 8012fb8:	e7f2      	b.n	8012fa0 <floor+0xd0>
 8012fba:	2500      	movs	r5, #0
 8012fbc:	462c      	mov	r4, r5
 8012fbe:	e7aa      	b.n	8012f16 <floor+0x46>
 8012fc0:	8800759c 	.word	0x8800759c
 8012fc4:	7e37e43c 	.word	0x7e37e43c
 8012fc8:	bff00000 	.word	0xbff00000
 8012fcc:	000fffff 	.word	0x000fffff

08012fd0 <cosf>:
 8012fd0:	ee10 3a10 	vmov	r3, s0
 8012fd4:	b507      	push	{r0, r1, r2, lr}
 8012fd6:	4a1e      	ldr	r2, [pc, #120]	; (8013050 <cosf+0x80>)
 8012fd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012fdc:	4293      	cmp	r3, r2
 8012fde:	dc06      	bgt.n	8012fee <cosf+0x1e>
 8012fe0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8013054 <cosf+0x84>
 8012fe4:	b003      	add	sp, #12
 8012fe6:	f85d eb04 	ldr.w	lr, [sp], #4
 8012fea:	f001 b8ed 	b.w	80141c8 <__kernel_cosf>
 8012fee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012ff2:	db04      	blt.n	8012ffe <cosf+0x2e>
 8012ff4:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012ff8:	b003      	add	sp, #12
 8012ffa:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ffe:	4668      	mov	r0, sp
 8013000:	f000 ffa2 	bl	8013f48 <__ieee754_rem_pio2f>
 8013004:	f000 0003 	and.w	r0, r0, #3
 8013008:	2801      	cmp	r0, #1
 801300a:	d009      	beq.n	8013020 <cosf+0x50>
 801300c:	2802      	cmp	r0, #2
 801300e:	d010      	beq.n	8013032 <cosf+0x62>
 8013010:	b9b0      	cbnz	r0, 8013040 <cosf+0x70>
 8013012:	eddd 0a01 	vldr	s1, [sp, #4]
 8013016:	ed9d 0a00 	vldr	s0, [sp]
 801301a:	f001 f8d5 	bl	80141c8 <__kernel_cosf>
 801301e:	e7eb      	b.n	8012ff8 <cosf+0x28>
 8013020:	eddd 0a01 	vldr	s1, [sp, #4]
 8013024:	ed9d 0a00 	vldr	s0, [sp]
 8013028:	f001 fba4 	bl	8014774 <__kernel_sinf>
 801302c:	eeb1 0a40 	vneg.f32	s0, s0
 8013030:	e7e2      	b.n	8012ff8 <cosf+0x28>
 8013032:	eddd 0a01 	vldr	s1, [sp, #4]
 8013036:	ed9d 0a00 	vldr	s0, [sp]
 801303a:	f001 f8c5 	bl	80141c8 <__kernel_cosf>
 801303e:	e7f5      	b.n	801302c <cosf+0x5c>
 8013040:	eddd 0a01 	vldr	s1, [sp, #4]
 8013044:	ed9d 0a00 	vldr	s0, [sp]
 8013048:	2001      	movs	r0, #1
 801304a:	f001 fb93 	bl	8014774 <__kernel_sinf>
 801304e:	e7d3      	b.n	8012ff8 <cosf+0x28>
 8013050:	3f490fd8 	.word	0x3f490fd8
 8013054:	00000000 	.word	0x00000000

08013058 <roundf>:
 8013058:	ee10 0a10 	vmov	r0, s0
 801305c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8013060:	3a7f      	subs	r2, #127	; 0x7f
 8013062:	2a16      	cmp	r2, #22
 8013064:	dc15      	bgt.n	8013092 <roundf+0x3a>
 8013066:	2a00      	cmp	r2, #0
 8013068:	da08      	bge.n	801307c <roundf+0x24>
 801306a:	3201      	adds	r2, #1
 801306c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8013070:	d101      	bne.n	8013076 <roundf+0x1e>
 8013072:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8013076:	ee00 3a10 	vmov	s0, r3
 801307a:	4770      	bx	lr
 801307c:	4907      	ldr	r1, [pc, #28]	; (801309c <roundf+0x44>)
 801307e:	4111      	asrs	r1, r2
 8013080:	4208      	tst	r0, r1
 8013082:	d0fa      	beq.n	801307a <roundf+0x22>
 8013084:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013088:	4113      	asrs	r3, r2
 801308a:	4403      	add	r3, r0
 801308c:	ea23 0301 	bic.w	r3, r3, r1
 8013090:	e7f1      	b.n	8013076 <roundf+0x1e>
 8013092:	2a80      	cmp	r2, #128	; 0x80
 8013094:	d1f1      	bne.n	801307a <roundf+0x22>
 8013096:	ee30 0a00 	vadd.f32	s0, s0, s0
 801309a:	4770      	bx	lr
 801309c:	007fffff 	.word	0x007fffff

080130a0 <sinf>:
 80130a0:	ee10 3a10 	vmov	r3, s0
 80130a4:	b507      	push	{r0, r1, r2, lr}
 80130a6:	4a1f      	ldr	r2, [pc, #124]	; (8013124 <sinf+0x84>)
 80130a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80130ac:	4293      	cmp	r3, r2
 80130ae:	dc07      	bgt.n	80130c0 <sinf+0x20>
 80130b0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8013128 <sinf+0x88>
 80130b4:	2000      	movs	r0, #0
 80130b6:	b003      	add	sp, #12
 80130b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80130bc:	f001 bb5a 	b.w	8014774 <__kernel_sinf>
 80130c0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80130c4:	db04      	blt.n	80130d0 <sinf+0x30>
 80130c6:	ee30 0a40 	vsub.f32	s0, s0, s0
 80130ca:	b003      	add	sp, #12
 80130cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80130d0:	4668      	mov	r0, sp
 80130d2:	f000 ff39 	bl	8013f48 <__ieee754_rem_pio2f>
 80130d6:	f000 0003 	and.w	r0, r0, #3
 80130da:	2801      	cmp	r0, #1
 80130dc:	d00a      	beq.n	80130f4 <sinf+0x54>
 80130de:	2802      	cmp	r0, #2
 80130e0:	d00f      	beq.n	8013102 <sinf+0x62>
 80130e2:	b9c0      	cbnz	r0, 8013116 <sinf+0x76>
 80130e4:	eddd 0a01 	vldr	s1, [sp, #4]
 80130e8:	ed9d 0a00 	vldr	s0, [sp]
 80130ec:	2001      	movs	r0, #1
 80130ee:	f001 fb41 	bl	8014774 <__kernel_sinf>
 80130f2:	e7ea      	b.n	80130ca <sinf+0x2a>
 80130f4:	eddd 0a01 	vldr	s1, [sp, #4]
 80130f8:	ed9d 0a00 	vldr	s0, [sp]
 80130fc:	f001 f864 	bl	80141c8 <__kernel_cosf>
 8013100:	e7e3      	b.n	80130ca <sinf+0x2a>
 8013102:	eddd 0a01 	vldr	s1, [sp, #4]
 8013106:	ed9d 0a00 	vldr	s0, [sp]
 801310a:	2001      	movs	r0, #1
 801310c:	f001 fb32 	bl	8014774 <__kernel_sinf>
 8013110:	eeb1 0a40 	vneg.f32	s0, s0
 8013114:	e7d9      	b.n	80130ca <sinf+0x2a>
 8013116:	eddd 0a01 	vldr	s1, [sp, #4]
 801311a:	ed9d 0a00 	vldr	s0, [sp]
 801311e:	f001 f853 	bl	80141c8 <__kernel_cosf>
 8013122:	e7f5      	b.n	8013110 <sinf+0x70>
 8013124:	3f490fd8 	.word	0x3f490fd8
 8013128:	00000000 	.word	0x00000000

0801312c <tanf>:
 801312c:	ee10 3a10 	vmov	r3, s0
 8013130:	b507      	push	{r0, r1, r2, lr}
 8013132:	4a12      	ldr	r2, [pc, #72]	; (801317c <tanf+0x50>)
 8013134:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013138:	4293      	cmp	r3, r2
 801313a:	dc07      	bgt.n	801314c <tanf+0x20>
 801313c:	eddf 0a10 	vldr	s1, [pc, #64]	; 8013180 <tanf+0x54>
 8013140:	2001      	movs	r0, #1
 8013142:	b003      	add	sp, #12
 8013144:	f85d eb04 	ldr.w	lr, [sp], #4
 8013148:	f001 bb5c 	b.w	8014804 <__kernel_tanf>
 801314c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8013150:	db04      	blt.n	801315c <tanf+0x30>
 8013152:	ee30 0a40 	vsub.f32	s0, s0, s0
 8013156:	b003      	add	sp, #12
 8013158:	f85d fb04 	ldr.w	pc, [sp], #4
 801315c:	4668      	mov	r0, sp
 801315e:	f000 fef3 	bl	8013f48 <__ieee754_rem_pio2f>
 8013162:	0040      	lsls	r0, r0, #1
 8013164:	f000 0002 	and.w	r0, r0, #2
 8013168:	eddd 0a01 	vldr	s1, [sp, #4]
 801316c:	ed9d 0a00 	vldr	s0, [sp]
 8013170:	f1c0 0001 	rsb	r0, r0, #1
 8013174:	f001 fb46 	bl	8014804 <__kernel_tanf>
 8013178:	e7ed      	b.n	8013156 <tanf+0x2a>
 801317a:	bf00      	nop
 801317c:	3f490fda 	.word	0x3f490fda
 8013180:	00000000 	.word	0x00000000

08013184 <asin>:
 8013184:	b538      	push	{r3, r4, r5, lr}
 8013186:	ed2d 8b02 	vpush	{d8}
 801318a:	ec55 4b10 	vmov	r4, r5, d0
 801318e:	f000 f8cf 	bl	8013330 <__ieee754_asin>
 8013192:	4622      	mov	r2, r4
 8013194:	462b      	mov	r3, r5
 8013196:	4620      	mov	r0, r4
 8013198:	4629      	mov	r1, r5
 801319a:	eeb0 8a40 	vmov.f32	s16, s0
 801319e:	eef0 8a60 	vmov.f32	s17, s1
 80131a2:	f7ed fc67 	bl	8000a74 <__aeabi_dcmpun>
 80131a6:	b9a8      	cbnz	r0, 80131d4 <asin+0x50>
 80131a8:	ec45 4b10 	vmov	d0, r4, r5
 80131ac:	f001 fddc 	bl	8014d68 <fabs>
 80131b0:	4b0c      	ldr	r3, [pc, #48]	; (80131e4 <asin+0x60>)
 80131b2:	ec51 0b10 	vmov	r0, r1, d0
 80131b6:	2200      	movs	r2, #0
 80131b8:	f7ed fc52 	bl	8000a60 <__aeabi_dcmpgt>
 80131bc:	b150      	cbz	r0, 80131d4 <asin+0x50>
 80131be:	f7ff fe45 	bl	8012e4c <__errno>
 80131c2:	ecbd 8b02 	vpop	{d8}
 80131c6:	2321      	movs	r3, #33	; 0x21
 80131c8:	6003      	str	r3, [r0, #0]
 80131ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131ce:	4806      	ldr	r0, [pc, #24]	; (80131e8 <asin+0x64>)
 80131d0:	f001 bdde 	b.w	8014d90 <nan>
 80131d4:	eeb0 0a48 	vmov.f32	s0, s16
 80131d8:	eef0 0a68 	vmov.f32	s1, s17
 80131dc:	ecbd 8b02 	vpop	{d8}
 80131e0:	bd38      	pop	{r3, r4, r5, pc}
 80131e2:	bf00      	nop
 80131e4:	3ff00000 	.word	0x3ff00000
 80131e8:	08015154 	.word	0x08015154

080131ec <atan2>:
 80131ec:	f000 bab4 	b.w	8013758 <__ieee754_atan2>

080131f0 <exp>:
 80131f0:	b538      	push	{r3, r4, r5, lr}
 80131f2:	ed2d 8b02 	vpush	{d8}
 80131f6:	ec55 4b10 	vmov	r4, r5, d0
 80131fa:	f000 fb79 	bl	80138f0 <__ieee754_exp>
 80131fe:	eeb0 8a40 	vmov.f32	s16, s0
 8013202:	eef0 8a60 	vmov.f32	s17, s1
 8013206:	ec45 4b10 	vmov	d0, r4, r5
 801320a:	f001 fdb6 	bl	8014d7a <finite>
 801320e:	b168      	cbz	r0, 801322c <exp+0x3c>
 8013210:	a317      	add	r3, pc, #92	; (adr r3, 8013270 <exp+0x80>)
 8013212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013216:	4620      	mov	r0, r4
 8013218:	4629      	mov	r1, r5
 801321a:	f7ed fc21 	bl	8000a60 <__aeabi_dcmpgt>
 801321e:	b160      	cbz	r0, 801323a <exp+0x4a>
 8013220:	f7ff fe14 	bl	8012e4c <__errno>
 8013224:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8013260 <exp+0x70>
 8013228:	2322      	movs	r3, #34	; 0x22
 801322a:	6003      	str	r3, [r0, #0]
 801322c:	eeb0 0a48 	vmov.f32	s0, s16
 8013230:	eef0 0a68 	vmov.f32	s1, s17
 8013234:	ecbd 8b02 	vpop	{d8}
 8013238:	bd38      	pop	{r3, r4, r5, pc}
 801323a:	a30f      	add	r3, pc, #60	; (adr r3, 8013278 <exp+0x88>)
 801323c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013240:	4620      	mov	r0, r4
 8013242:	4629      	mov	r1, r5
 8013244:	f7ed fbee 	bl	8000a24 <__aeabi_dcmplt>
 8013248:	2800      	cmp	r0, #0
 801324a:	d0ef      	beq.n	801322c <exp+0x3c>
 801324c:	f7ff fdfe 	bl	8012e4c <__errno>
 8013250:	2322      	movs	r3, #34	; 0x22
 8013252:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8013268 <exp+0x78>
 8013256:	6003      	str	r3, [r0, #0]
 8013258:	e7e8      	b.n	801322c <exp+0x3c>
 801325a:	bf00      	nop
 801325c:	f3af 8000 	nop.w
 8013260:	00000000 	.word	0x00000000
 8013264:	7ff00000 	.word	0x7ff00000
	...
 8013270:	fefa39ef 	.word	0xfefa39ef
 8013274:	40862e42 	.word	0x40862e42
 8013278:	d52d3051 	.word	0xd52d3051
 801327c:	c0874910 	.word	0xc0874910

08013280 <sqrt>:
 8013280:	b538      	push	{r3, r4, r5, lr}
 8013282:	ed2d 8b02 	vpush	{d8}
 8013286:	ec55 4b10 	vmov	r4, r5, d0
 801328a:	f000 fcb3 	bl	8013bf4 <__ieee754_sqrt>
 801328e:	4622      	mov	r2, r4
 8013290:	462b      	mov	r3, r5
 8013292:	4620      	mov	r0, r4
 8013294:	4629      	mov	r1, r5
 8013296:	eeb0 8a40 	vmov.f32	s16, s0
 801329a:	eef0 8a60 	vmov.f32	s17, s1
 801329e:	f7ed fbe9 	bl	8000a74 <__aeabi_dcmpun>
 80132a2:	b990      	cbnz	r0, 80132ca <sqrt+0x4a>
 80132a4:	2200      	movs	r2, #0
 80132a6:	2300      	movs	r3, #0
 80132a8:	4620      	mov	r0, r4
 80132aa:	4629      	mov	r1, r5
 80132ac:	f7ed fbba 	bl	8000a24 <__aeabi_dcmplt>
 80132b0:	b158      	cbz	r0, 80132ca <sqrt+0x4a>
 80132b2:	f7ff fdcb 	bl	8012e4c <__errno>
 80132b6:	2321      	movs	r3, #33	; 0x21
 80132b8:	6003      	str	r3, [r0, #0]
 80132ba:	2200      	movs	r2, #0
 80132bc:	2300      	movs	r3, #0
 80132be:	4610      	mov	r0, r2
 80132c0:	4619      	mov	r1, r3
 80132c2:	f7ed fa67 	bl	8000794 <__aeabi_ddiv>
 80132c6:	ec41 0b18 	vmov	d8, r0, r1
 80132ca:	eeb0 0a48 	vmov.f32	s0, s16
 80132ce:	eef0 0a68 	vmov.f32	s1, s17
 80132d2:	ecbd 8b02 	vpop	{d8}
 80132d6:	bd38      	pop	{r3, r4, r5, pc}

080132d8 <acosf>:
 80132d8:	b508      	push	{r3, lr}
 80132da:	ed2d 8b02 	vpush	{d8}
 80132de:	eeb0 8a40 	vmov.f32	s16, s0
 80132e2:	f000 fd39 	bl	8013d58 <__ieee754_acosf>
 80132e6:	eeb4 8a48 	vcmp.f32	s16, s16
 80132ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132ee:	eef0 8a40 	vmov.f32	s17, s0
 80132f2:	d615      	bvs.n	8013320 <acosf+0x48>
 80132f4:	eeb0 0a48 	vmov.f32	s0, s16
 80132f8:	f001 fd52 	bl	8014da0 <fabsf>
 80132fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013300:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013308:	dd0a      	ble.n	8013320 <acosf+0x48>
 801330a:	f7ff fd9f 	bl	8012e4c <__errno>
 801330e:	ecbd 8b02 	vpop	{d8}
 8013312:	2321      	movs	r3, #33	; 0x21
 8013314:	6003      	str	r3, [r0, #0]
 8013316:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801331a:	4804      	ldr	r0, [pc, #16]	; (801332c <acosf+0x54>)
 801331c:	f001 bd8a 	b.w	8014e34 <nanf>
 8013320:	eeb0 0a68 	vmov.f32	s0, s17
 8013324:	ecbd 8b02 	vpop	{d8}
 8013328:	bd08      	pop	{r3, pc}
 801332a:	bf00      	nop
 801332c:	08015154 	.word	0x08015154

08013330 <__ieee754_asin>:
 8013330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013334:	ed2d 8b04 	vpush	{d8-d9}
 8013338:	ec55 4b10 	vmov	r4, r5, d0
 801333c:	4bcc      	ldr	r3, [pc, #816]	; (8013670 <__ieee754_asin+0x340>)
 801333e:	b083      	sub	sp, #12
 8013340:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8013344:	4598      	cmp	r8, r3
 8013346:	9501      	str	r5, [sp, #4]
 8013348:	dd35      	ble.n	80133b6 <__ieee754_asin+0x86>
 801334a:	ee10 3a10 	vmov	r3, s0
 801334e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8013352:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8013356:	ea58 0303 	orrs.w	r3, r8, r3
 801335a:	d117      	bne.n	801338c <__ieee754_asin+0x5c>
 801335c:	a3aa      	add	r3, pc, #680	; (adr r3, 8013608 <__ieee754_asin+0x2d8>)
 801335e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013362:	ee10 0a10 	vmov	r0, s0
 8013366:	4629      	mov	r1, r5
 8013368:	f7ed f8ea 	bl	8000540 <__aeabi_dmul>
 801336c:	a3a8      	add	r3, pc, #672	; (adr r3, 8013610 <__ieee754_asin+0x2e0>)
 801336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013372:	4606      	mov	r6, r0
 8013374:	460f      	mov	r7, r1
 8013376:	4620      	mov	r0, r4
 8013378:	4629      	mov	r1, r5
 801337a:	f7ed f8e1 	bl	8000540 <__aeabi_dmul>
 801337e:	4602      	mov	r2, r0
 8013380:	460b      	mov	r3, r1
 8013382:	4630      	mov	r0, r6
 8013384:	4639      	mov	r1, r7
 8013386:	f7ec ff25 	bl	80001d4 <__adddf3>
 801338a:	e00b      	b.n	80133a4 <__ieee754_asin+0x74>
 801338c:	ee10 2a10 	vmov	r2, s0
 8013390:	462b      	mov	r3, r5
 8013392:	ee10 0a10 	vmov	r0, s0
 8013396:	4629      	mov	r1, r5
 8013398:	f7ec ff1a 	bl	80001d0 <__aeabi_dsub>
 801339c:	4602      	mov	r2, r0
 801339e:	460b      	mov	r3, r1
 80133a0:	f7ed f9f8 	bl	8000794 <__aeabi_ddiv>
 80133a4:	4604      	mov	r4, r0
 80133a6:	460d      	mov	r5, r1
 80133a8:	ec45 4b10 	vmov	d0, r4, r5
 80133ac:	b003      	add	sp, #12
 80133ae:	ecbd 8b04 	vpop	{d8-d9}
 80133b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133b6:	4baf      	ldr	r3, [pc, #700]	; (8013674 <__ieee754_asin+0x344>)
 80133b8:	4598      	cmp	r8, r3
 80133ba:	dc11      	bgt.n	80133e0 <__ieee754_asin+0xb0>
 80133bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80133c0:	f280 80ae 	bge.w	8013520 <__ieee754_asin+0x1f0>
 80133c4:	a394      	add	r3, pc, #592	; (adr r3, 8013618 <__ieee754_asin+0x2e8>)
 80133c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133ca:	ee10 0a10 	vmov	r0, s0
 80133ce:	4629      	mov	r1, r5
 80133d0:	f7ec ff00 	bl	80001d4 <__adddf3>
 80133d4:	4ba8      	ldr	r3, [pc, #672]	; (8013678 <__ieee754_asin+0x348>)
 80133d6:	2200      	movs	r2, #0
 80133d8:	f7ed fb42 	bl	8000a60 <__aeabi_dcmpgt>
 80133dc:	2800      	cmp	r0, #0
 80133de:	d1e3      	bne.n	80133a8 <__ieee754_asin+0x78>
 80133e0:	ec45 4b10 	vmov	d0, r4, r5
 80133e4:	f001 fcc0 	bl	8014d68 <fabs>
 80133e8:	49a3      	ldr	r1, [pc, #652]	; (8013678 <__ieee754_asin+0x348>)
 80133ea:	ec53 2b10 	vmov	r2, r3, d0
 80133ee:	2000      	movs	r0, #0
 80133f0:	f7ec feee 	bl	80001d0 <__aeabi_dsub>
 80133f4:	4ba1      	ldr	r3, [pc, #644]	; (801367c <__ieee754_asin+0x34c>)
 80133f6:	2200      	movs	r2, #0
 80133f8:	f7ed f8a2 	bl	8000540 <__aeabi_dmul>
 80133fc:	a388      	add	r3, pc, #544	; (adr r3, 8013620 <__ieee754_asin+0x2f0>)
 80133fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013402:	4604      	mov	r4, r0
 8013404:	460d      	mov	r5, r1
 8013406:	f7ed f89b 	bl	8000540 <__aeabi_dmul>
 801340a:	a387      	add	r3, pc, #540	; (adr r3, 8013628 <__ieee754_asin+0x2f8>)
 801340c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013410:	f7ec fee0 	bl	80001d4 <__adddf3>
 8013414:	4622      	mov	r2, r4
 8013416:	462b      	mov	r3, r5
 8013418:	f7ed f892 	bl	8000540 <__aeabi_dmul>
 801341c:	a384      	add	r3, pc, #528	; (adr r3, 8013630 <__ieee754_asin+0x300>)
 801341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013422:	f7ec fed5 	bl	80001d0 <__aeabi_dsub>
 8013426:	4622      	mov	r2, r4
 8013428:	462b      	mov	r3, r5
 801342a:	f7ed f889 	bl	8000540 <__aeabi_dmul>
 801342e:	a382      	add	r3, pc, #520	; (adr r3, 8013638 <__ieee754_asin+0x308>)
 8013430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013434:	f7ec fece 	bl	80001d4 <__adddf3>
 8013438:	4622      	mov	r2, r4
 801343a:	462b      	mov	r3, r5
 801343c:	f7ed f880 	bl	8000540 <__aeabi_dmul>
 8013440:	a37f      	add	r3, pc, #508	; (adr r3, 8013640 <__ieee754_asin+0x310>)
 8013442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013446:	f7ec fec3 	bl	80001d0 <__aeabi_dsub>
 801344a:	4622      	mov	r2, r4
 801344c:	462b      	mov	r3, r5
 801344e:	f7ed f877 	bl	8000540 <__aeabi_dmul>
 8013452:	a37d      	add	r3, pc, #500	; (adr r3, 8013648 <__ieee754_asin+0x318>)
 8013454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013458:	f7ec febc 	bl	80001d4 <__adddf3>
 801345c:	4622      	mov	r2, r4
 801345e:	462b      	mov	r3, r5
 8013460:	f7ed f86e 	bl	8000540 <__aeabi_dmul>
 8013464:	a37a      	add	r3, pc, #488	; (adr r3, 8013650 <__ieee754_asin+0x320>)
 8013466:	e9d3 2300 	ldrd	r2, r3, [r3]
 801346a:	ec41 0b18 	vmov	d8, r0, r1
 801346e:	4620      	mov	r0, r4
 8013470:	4629      	mov	r1, r5
 8013472:	f7ed f865 	bl	8000540 <__aeabi_dmul>
 8013476:	a378      	add	r3, pc, #480	; (adr r3, 8013658 <__ieee754_asin+0x328>)
 8013478:	e9d3 2300 	ldrd	r2, r3, [r3]
 801347c:	f7ec fea8 	bl	80001d0 <__aeabi_dsub>
 8013480:	4622      	mov	r2, r4
 8013482:	462b      	mov	r3, r5
 8013484:	f7ed f85c 	bl	8000540 <__aeabi_dmul>
 8013488:	a375      	add	r3, pc, #468	; (adr r3, 8013660 <__ieee754_asin+0x330>)
 801348a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801348e:	f7ec fea1 	bl	80001d4 <__adddf3>
 8013492:	4622      	mov	r2, r4
 8013494:	462b      	mov	r3, r5
 8013496:	f7ed f853 	bl	8000540 <__aeabi_dmul>
 801349a:	a373      	add	r3, pc, #460	; (adr r3, 8013668 <__ieee754_asin+0x338>)
 801349c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134a0:	f7ec fe96 	bl	80001d0 <__aeabi_dsub>
 80134a4:	4622      	mov	r2, r4
 80134a6:	462b      	mov	r3, r5
 80134a8:	f7ed f84a 	bl	8000540 <__aeabi_dmul>
 80134ac:	4b72      	ldr	r3, [pc, #456]	; (8013678 <__ieee754_asin+0x348>)
 80134ae:	2200      	movs	r2, #0
 80134b0:	f7ec fe90 	bl	80001d4 <__adddf3>
 80134b4:	ec45 4b10 	vmov	d0, r4, r5
 80134b8:	4606      	mov	r6, r0
 80134ba:	460f      	mov	r7, r1
 80134bc:	f000 fb9a 	bl	8013bf4 <__ieee754_sqrt>
 80134c0:	4b6f      	ldr	r3, [pc, #444]	; (8013680 <__ieee754_asin+0x350>)
 80134c2:	4598      	cmp	r8, r3
 80134c4:	ec5b ab10 	vmov	sl, fp, d0
 80134c8:	f340 80dc 	ble.w	8013684 <__ieee754_asin+0x354>
 80134cc:	4632      	mov	r2, r6
 80134ce:	463b      	mov	r3, r7
 80134d0:	ec51 0b18 	vmov	r0, r1, d8
 80134d4:	f7ed f95e 	bl	8000794 <__aeabi_ddiv>
 80134d8:	4652      	mov	r2, sl
 80134da:	465b      	mov	r3, fp
 80134dc:	f7ed f830 	bl	8000540 <__aeabi_dmul>
 80134e0:	4652      	mov	r2, sl
 80134e2:	465b      	mov	r3, fp
 80134e4:	f7ec fe76 	bl	80001d4 <__adddf3>
 80134e8:	4602      	mov	r2, r0
 80134ea:	460b      	mov	r3, r1
 80134ec:	f7ec fe72 	bl	80001d4 <__adddf3>
 80134f0:	a347      	add	r3, pc, #284	; (adr r3, 8013610 <__ieee754_asin+0x2e0>)
 80134f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134f6:	f7ec fe6b 	bl	80001d0 <__aeabi_dsub>
 80134fa:	4602      	mov	r2, r0
 80134fc:	460b      	mov	r3, r1
 80134fe:	a142      	add	r1, pc, #264	; (adr r1, 8013608 <__ieee754_asin+0x2d8>)
 8013500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013504:	f7ec fe64 	bl	80001d0 <__aeabi_dsub>
 8013508:	9b01      	ldr	r3, [sp, #4]
 801350a:	2b00      	cmp	r3, #0
 801350c:	bfdc      	itt	le
 801350e:	4602      	movle	r2, r0
 8013510:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 8013514:	4604      	mov	r4, r0
 8013516:	460d      	mov	r5, r1
 8013518:	bfdc      	itt	le
 801351a:	4614      	movle	r4, r2
 801351c:	461d      	movle	r5, r3
 801351e:	e743      	b.n	80133a8 <__ieee754_asin+0x78>
 8013520:	ee10 2a10 	vmov	r2, s0
 8013524:	ee10 0a10 	vmov	r0, s0
 8013528:	462b      	mov	r3, r5
 801352a:	4629      	mov	r1, r5
 801352c:	f7ed f808 	bl	8000540 <__aeabi_dmul>
 8013530:	a33b      	add	r3, pc, #236	; (adr r3, 8013620 <__ieee754_asin+0x2f0>)
 8013532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013536:	4606      	mov	r6, r0
 8013538:	460f      	mov	r7, r1
 801353a:	f7ed f801 	bl	8000540 <__aeabi_dmul>
 801353e:	a33a      	add	r3, pc, #232	; (adr r3, 8013628 <__ieee754_asin+0x2f8>)
 8013540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013544:	f7ec fe46 	bl	80001d4 <__adddf3>
 8013548:	4632      	mov	r2, r6
 801354a:	463b      	mov	r3, r7
 801354c:	f7ec fff8 	bl	8000540 <__aeabi_dmul>
 8013550:	a337      	add	r3, pc, #220	; (adr r3, 8013630 <__ieee754_asin+0x300>)
 8013552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013556:	f7ec fe3b 	bl	80001d0 <__aeabi_dsub>
 801355a:	4632      	mov	r2, r6
 801355c:	463b      	mov	r3, r7
 801355e:	f7ec ffef 	bl	8000540 <__aeabi_dmul>
 8013562:	a335      	add	r3, pc, #212	; (adr r3, 8013638 <__ieee754_asin+0x308>)
 8013564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013568:	f7ec fe34 	bl	80001d4 <__adddf3>
 801356c:	4632      	mov	r2, r6
 801356e:	463b      	mov	r3, r7
 8013570:	f7ec ffe6 	bl	8000540 <__aeabi_dmul>
 8013574:	a332      	add	r3, pc, #200	; (adr r3, 8013640 <__ieee754_asin+0x310>)
 8013576:	e9d3 2300 	ldrd	r2, r3, [r3]
 801357a:	f7ec fe29 	bl	80001d0 <__aeabi_dsub>
 801357e:	4632      	mov	r2, r6
 8013580:	463b      	mov	r3, r7
 8013582:	f7ec ffdd 	bl	8000540 <__aeabi_dmul>
 8013586:	a330      	add	r3, pc, #192	; (adr r3, 8013648 <__ieee754_asin+0x318>)
 8013588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801358c:	f7ec fe22 	bl	80001d4 <__adddf3>
 8013590:	4632      	mov	r2, r6
 8013592:	463b      	mov	r3, r7
 8013594:	f7ec ffd4 	bl	8000540 <__aeabi_dmul>
 8013598:	a32d      	add	r3, pc, #180	; (adr r3, 8013650 <__ieee754_asin+0x320>)
 801359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801359e:	4680      	mov	r8, r0
 80135a0:	4689      	mov	r9, r1
 80135a2:	4630      	mov	r0, r6
 80135a4:	4639      	mov	r1, r7
 80135a6:	f7ec ffcb 	bl	8000540 <__aeabi_dmul>
 80135aa:	a32b      	add	r3, pc, #172	; (adr r3, 8013658 <__ieee754_asin+0x328>)
 80135ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135b0:	f7ec fe0e 	bl	80001d0 <__aeabi_dsub>
 80135b4:	4632      	mov	r2, r6
 80135b6:	463b      	mov	r3, r7
 80135b8:	f7ec ffc2 	bl	8000540 <__aeabi_dmul>
 80135bc:	a328      	add	r3, pc, #160	; (adr r3, 8013660 <__ieee754_asin+0x330>)
 80135be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135c2:	f7ec fe07 	bl	80001d4 <__adddf3>
 80135c6:	4632      	mov	r2, r6
 80135c8:	463b      	mov	r3, r7
 80135ca:	f7ec ffb9 	bl	8000540 <__aeabi_dmul>
 80135ce:	a326      	add	r3, pc, #152	; (adr r3, 8013668 <__ieee754_asin+0x338>)
 80135d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135d4:	f7ec fdfc 	bl	80001d0 <__aeabi_dsub>
 80135d8:	4632      	mov	r2, r6
 80135da:	463b      	mov	r3, r7
 80135dc:	f7ec ffb0 	bl	8000540 <__aeabi_dmul>
 80135e0:	4b25      	ldr	r3, [pc, #148]	; (8013678 <__ieee754_asin+0x348>)
 80135e2:	2200      	movs	r2, #0
 80135e4:	f7ec fdf6 	bl	80001d4 <__adddf3>
 80135e8:	4602      	mov	r2, r0
 80135ea:	460b      	mov	r3, r1
 80135ec:	4640      	mov	r0, r8
 80135ee:	4649      	mov	r1, r9
 80135f0:	f7ed f8d0 	bl	8000794 <__aeabi_ddiv>
 80135f4:	4622      	mov	r2, r4
 80135f6:	462b      	mov	r3, r5
 80135f8:	f7ec ffa2 	bl	8000540 <__aeabi_dmul>
 80135fc:	4602      	mov	r2, r0
 80135fe:	460b      	mov	r3, r1
 8013600:	4620      	mov	r0, r4
 8013602:	4629      	mov	r1, r5
 8013604:	e6bf      	b.n	8013386 <__ieee754_asin+0x56>
 8013606:	bf00      	nop
 8013608:	54442d18 	.word	0x54442d18
 801360c:	3ff921fb 	.word	0x3ff921fb
 8013610:	33145c07 	.word	0x33145c07
 8013614:	3c91a626 	.word	0x3c91a626
 8013618:	8800759c 	.word	0x8800759c
 801361c:	7e37e43c 	.word	0x7e37e43c
 8013620:	0dfdf709 	.word	0x0dfdf709
 8013624:	3f023de1 	.word	0x3f023de1
 8013628:	7501b288 	.word	0x7501b288
 801362c:	3f49efe0 	.word	0x3f49efe0
 8013630:	b5688f3b 	.word	0xb5688f3b
 8013634:	3fa48228 	.word	0x3fa48228
 8013638:	0e884455 	.word	0x0e884455
 801363c:	3fc9c155 	.word	0x3fc9c155
 8013640:	03eb6f7d 	.word	0x03eb6f7d
 8013644:	3fd4d612 	.word	0x3fd4d612
 8013648:	55555555 	.word	0x55555555
 801364c:	3fc55555 	.word	0x3fc55555
 8013650:	b12e9282 	.word	0xb12e9282
 8013654:	3fb3b8c5 	.word	0x3fb3b8c5
 8013658:	1b8d0159 	.word	0x1b8d0159
 801365c:	3fe6066c 	.word	0x3fe6066c
 8013660:	9c598ac8 	.word	0x9c598ac8
 8013664:	40002ae5 	.word	0x40002ae5
 8013668:	1c8a2d4b 	.word	0x1c8a2d4b
 801366c:	40033a27 	.word	0x40033a27
 8013670:	3fefffff 	.word	0x3fefffff
 8013674:	3fdfffff 	.word	0x3fdfffff
 8013678:	3ff00000 	.word	0x3ff00000
 801367c:	3fe00000 	.word	0x3fe00000
 8013680:	3fef3332 	.word	0x3fef3332
 8013684:	ee10 2a10 	vmov	r2, s0
 8013688:	ee10 0a10 	vmov	r0, s0
 801368c:	465b      	mov	r3, fp
 801368e:	4659      	mov	r1, fp
 8013690:	f7ec fda0 	bl	80001d4 <__adddf3>
 8013694:	4632      	mov	r2, r6
 8013696:	463b      	mov	r3, r7
 8013698:	ec41 0b19 	vmov	d9, r0, r1
 801369c:	ec51 0b18 	vmov	r0, r1, d8
 80136a0:	f7ed f878 	bl	8000794 <__aeabi_ddiv>
 80136a4:	4602      	mov	r2, r0
 80136a6:	460b      	mov	r3, r1
 80136a8:	ec51 0b19 	vmov	r0, r1, d9
 80136ac:	f7ec ff48 	bl	8000540 <__aeabi_dmul>
 80136b0:	f04f 0800 	mov.w	r8, #0
 80136b4:	4606      	mov	r6, r0
 80136b6:	460f      	mov	r7, r1
 80136b8:	4642      	mov	r2, r8
 80136ba:	465b      	mov	r3, fp
 80136bc:	4640      	mov	r0, r8
 80136be:	4659      	mov	r1, fp
 80136c0:	f7ec ff3e 	bl	8000540 <__aeabi_dmul>
 80136c4:	4602      	mov	r2, r0
 80136c6:	460b      	mov	r3, r1
 80136c8:	4620      	mov	r0, r4
 80136ca:	4629      	mov	r1, r5
 80136cc:	f7ec fd80 	bl	80001d0 <__aeabi_dsub>
 80136d0:	4642      	mov	r2, r8
 80136d2:	4604      	mov	r4, r0
 80136d4:	460d      	mov	r5, r1
 80136d6:	465b      	mov	r3, fp
 80136d8:	4650      	mov	r0, sl
 80136da:	4659      	mov	r1, fp
 80136dc:	f7ec fd7a 	bl	80001d4 <__adddf3>
 80136e0:	4602      	mov	r2, r0
 80136e2:	460b      	mov	r3, r1
 80136e4:	4620      	mov	r0, r4
 80136e6:	4629      	mov	r1, r5
 80136e8:	f7ed f854 	bl	8000794 <__aeabi_ddiv>
 80136ec:	4602      	mov	r2, r0
 80136ee:	460b      	mov	r3, r1
 80136f0:	f7ec fd70 	bl	80001d4 <__adddf3>
 80136f4:	4602      	mov	r2, r0
 80136f6:	460b      	mov	r3, r1
 80136f8:	a113      	add	r1, pc, #76	; (adr r1, 8013748 <__ieee754_asin+0x418>)
 80136fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80136fe:	f7ec fd67 	bl	80001d0 <__aeabi_dsub>
 8013702:	4602      	mov	r2, r0
 8013704:	460b      	mov	r3, r1
 8013706:	4630      	mov	r0, r6
 8013708:	4639      	mov	r1, r7
 801370a:	f7ec fd61 	bl	80001d0 <__aeabi_dsub>
 801370e:	4642      	mov	r2, r8
 8013710:	4604      	mov	r4, r0
 8013712:	460d      	mov	r5, r1
 8013714:	465b      	mov	r3, fp
 8013716:	4640      	mov	r0, r8
 8013718:	4659      	mov	r1, fp
 801371a:	f7ec fd5b 	bl	80001d4 <__adddf3>
 801371e:	4602      	mov	r2, r0
 8013720:	460b      	mov	r3, r1
 8013722:	a10b      	add	r1, pc, #44	; (adr r1, 8013750 <__ieee754_asin+0x420>)
 8013724:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013728:	f7ec fd52 	bl	80001d0 <__aeabi_dsub>
 801372c:	4602      	mov	r2, r0
 801372e:	460b      	mov	r3, r1
 8013730:	4620      	mov	r0, r4
 8013732:	4629      	mov	r1, r5
 8013734:	f7ec fd4c 	bl	80001d0 <__aeabi_dsub>
 8013738:	4602      	mov	r2, r0
 801373a:	460b      	mov	r3, r1
 801373c:	a104      	add	r1, pc, #16	; (adr r1, 8013750 <__ieee754_asin+0x420>)
 801373e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013742:	e6df      	b.n	8013504 <__ieee754_asin+0x1d4>
 8013744:	f3af 8000 	nop.w
 8013748:	33145c07 	.word	0x33145c07
 801374c:	3c91a626 	.word	0x3c91a626
 8013750:	54442d18 	.word	0x54442d18
 8013754:	3fe921fb 	.word	0x3fe921fb

08013758 <__ieee754_atan2>:
 8013758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801375c:	ec57 6b11 	vmov	r6, r7, d1
 8013760:	4273      	negs	r3, r6
 8013762:	f8df e184 	ldr.w	lr, [pc, #388]	; 80138e8 <__ieee754_atan2+0x190>
 8013766:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801376a:	4333      	orrs	r3, r6
 801376c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8013770:	4573      	cmp	r3, lr
 8013772:	ec51 0b10 	vmov	r0, r1, d0
 8013776:	ee11 8a10 	vmov	r8, s2
 801377a:	d80a      	bhi.n	8013792 <__ieee754_atan2+0x3a>
 801377c:	4244      	negs	r4, r0
 801377e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013782:	4304      	orrs	r4, r0
 8013784:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8013788:	4574      	cmp	r4, lr
 801378a:	ee10 9a10 	vmov	r9, s0
 801378e:	468c      	mov	ip, r1
 8013790:	d907      	bls.n	80137a2 <__ieee754_atan2+0x4a>
 8013792:	4632      	mov	r2, r6
 8013794:	463b      	mov	r3, r7
 8013796:	f7ec fd1d 	bl	80001d4 <__adddf3>
 801379a:	ec41 0b10 	vmov	d0, r0, r1
 801379e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137a2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80137a6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80137aa:	4334      	orrs	r4, r6
 80137ac:	d103      	bne.n	80137b6 <__ieee754_atan2+0x5e>
 80137ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80137b2:	f001 b939 	b.w	8014a28 <atan>
 80137b6:	17bc      	asrs	r4, r7, #30
 80137b8:	f004 0402 	and.w	r4, r4, #2
 80137bc:	ea53 0909 	orrs.w	r9, r3, r9
 80137c0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80137c4:	d107      	bne.n	80137d6 <__ieee754_atan2+0x7e>
 80137c6:	2c02      	cmp	r4, #2
 80137c8:	d060      	beq.n	801388c <__ieee754_atan2+0x134>
 80137ca:	2c03      	cmp	r4, #3
 80137cc:	d1e5      	bne.n	801379a <__ieee754_atan2+0x42>
 80137ce:	a142      	add	r1, pc, #264	; (adr r1, 80138d8 <__ieee754_atan2+0x180>)
 80137d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137d4:	e7e1      	b.n	801379a <__ieee754_atan2+0x42>
 80137d6:	ea52 0808 	orrs.w	r8, r2, r8
 80137da:	d106      	bne.n	80137ea <__ieee754_atan2+0x92>
 80137dc:	f1bc 0f00 	cmp.w	ip, #0
 80137e0:	da5f      	bge.n	80138a2 <__ieee754_atan2+0x14a>
 80137e2:	a13f      	add	r1, pc, #252	; (adr r1, 80138e0 <__ieee754_atan2+0x188>)
 80137e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80137e8:	e7d7      	b.n	801379a <__ieee754_atan2+0x42>
 80137ea:	4572      	cmp	r2, lr
 80137ec:	d10f      	bne.n	801380e <__ieee754_atan2+0xb6>
 80137ee:	4293      	cmp	r3, r2
 80137f0:	f104 34ff 	add.w	r4, r4, #4294967295
 80137f4:	d107      	bne.n	8013806 <__ieee754_atan2+0xae>
 80137f6:	2c02      	cmp	r4, #2
 80137f8:	d84c      	bhi.n	8013894 <__ieee754_atan2+0x13c>
 80137fa:	4b35      	ldr	r3, [pc, #212]	; (80138d0 <__ieee754_atan2+0x178>)
 80137fc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013800:	e9d4 0100 	ldrd	r0, r1, [r4]
 8013804:	e7c9      	b.n	801379a <__ieee754_atan2+0x42>
 8013806:	2c02      	cmp	r4, #2
 8013808:	d848      	bhi.n	801389c <__ieee754_atan2+0x144>
 801380a:	4b32      	ldr	r3, [pc, #200]	; (80138d4 <__ieee754_atan2+0x17c>)
 801380c:	e7f6      	b.n	80137fc <__ieee754_atan2+0xa4>
 801380e:	4573      	cmp	r3, lr
 8013810:	d0e4      	beq.n	80137dc <__ieee754_atan2+0x84>
 8013812:	1a9b      	subs	r3, r3, r2
 8013814:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8013818:	ea4f 5223 	mov.w	r2, r3, asr #20
 801381c:	da1e      	bge.n	801385c <__ieee754_atan2+0x104>
 801381e:	2f00      	cmp	r7, #0
 8013820:	da01      	bge.n	8013826 <__ieee754_atan2+0xce>
 8013822:	323c      	adds	r2, #60	; 0x3c
 8013824:	db1e      	blt.n	8013864 <__ieee754_atan2+0x10c>
 8013826:	4632      	mov	r2, r6
 8013828:	463b      	mov	r3, r7
 801382a:	f7ec ffb3 	bl	8000794 <__aeabi_ddiv>
 801382e:	ec41 0b10 	vmov	d0, r0, r1
 8013832:	f001 fa99 	bl	8014d68 <fabs>
 8013836:	f001 f8f7 	bl	8014a28 <atan>
 801383a:	ec51 0b10 	vmov	r0, r1, d0
 801383e:	2c01      	cmp	r4, #1
 8013840:	d013      	beq.n	801386a <__ieee754_atan2+0x112>
 8013842:	2c02      	cmp	r4, #2
 8013844:	d015      	beq.n	8013872 <__ieee754_atan2+0x11a>
 8013846:	2c00      	cmp	r4, #0
 8013848:	d0a7      	beq.n	801379a <__ieee754_atan2+0x42>
 801384a:	a319      	add	r3, pc, #100	; (adr r3, 80138b0 <__ieee754_atan2+0x158>)
 801384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013850:	f7ec fcbe 	bl	80001d0 <__aeabi_dsub>
 8013854:	a318      	add	r3, pc, #96	; (adr r3, 80138b8 <__ieee754_atan2+0x160>)
 8013856:	e9d3 2300 	ldrd	r2, r3, [r3]
 801385a:	e014      	b.n	8013886 <__ieee754_atan2+0x12e>
 801385c:	a118      	add	r1, pc, #96	; (adr r1, 80138c0 <__ieee754_atan2+0x168>)
 801385e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013862:	e7ec      	b.n	801383e <__ieee754_atan2+0xe6>
 8013864:	2000      	movs	r0, #0
 8013866:	2100      	movs	r1, #0
 8013868:	e7e9      	b.n	801383e <__ieee754_atan2+0xe6>
 801386a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801386e:	4619      	mov	r1, r3
 8013870:	e793      	b.n	801379a <__ieee754_atan2+0x42>
 8013872:	a30f      	add	r3, pc, #60	; (adr r3, 80138b0 <__ieee754_atan2+0x158>)
 8013874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013878:	f7ec fcaa 	bl	80001d0 <__aeabi_dsub>
 801387c:	4602      	mov	r2, r0
 801387e:	460b      	mov	r3, r1
 8013880:	a10d      	add	r1, pc, #52	; (adr r1, 80138b8 <__ieee754_atan2+0x160>)
 8013882:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013886:	f7ec fca3 	bl	80001d0 <__aeabi_dsub>
 801388a:	e786      	b.n	801379a <__ieee754_atan2+0x42>
 801388c:	a10a      	add	r1, pc, #40	; (adr r1, 80138b8 <__ieee754_atan2+0x160>)
 801388e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013892:	e782      	b.n	801379a <__ieee754_atan2+0x42>
 8013894:	a10c      	add	r1, pc, #48	; (adr r1, 80138c8 <__ieee754_atan2+0x170>)
 8013896:	e9d1 0100 	ldrd	r0, r1, [r1]
 801389a:	e77e      	b.n	801379a <__ieee754_atan2+0x42>
 801389c:	2000      	movs	r0, #0
 801389e:	2100      	movs	r1, #0
 80138a0:	e77b      	b.n	801379a <__ieee754_atan2+0x42>
 80138a2:	a107      	add	r1, pc, #28	; (adr r1, 80138c0 <__ieee754_atan2+0x168>)
 80138a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80138a8:	e777      	b.n	801379a <__ieee754_atan2+0x42>
 80138aa:	bf00      	nop
 80138ac:	f3af 8000 	nop.w
 80138b0:	33145c07 	.word	0x33145c07
 80138b4:	3ca1a626 	.word	0x3ca1a626
 80138b8:	54442d18 	.word	0x54442d18
 80138bc:	400921fb 	.word	0x400921fb
 80138c0:	54442d18 	.word	0x54442d18
 80138c4:	3ff921fb 	.word	0x3ff921fb
 80138c8:	54442d18 	.word	0x54442d18
 80138cc:	3fe921fb 	.word	0x3fe921fb
 80138d0:	08015158 	.word	0x08015158
 80138d4:	08015170 	.word	0x08015170
 80138d8:	54442d18 	.word	0x54442d18
 80138dc:	c00921fb 	.word	0xc00921fb
 80138e0:	54442d18 	.word	0x54442d18
 80138e4:	bff921fb 	.word	0xbff921fb
 80138e8:	7ff00000 	.word	0x7ff00000
 80138ec:	00000000 	.word	0x00000000

080138f0 <__ieee754_exp>:
 80138f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138f4:	ec55 4b10 	vmov	r4, r5, d0
 80138f8:	49b5      	ldr	r1, [pc, #724]	; (8013bd0 <__ieee754_exp+0x2e0>)
 80138fa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80138fe:	428b      	cmp	r3, r1
 8013900:	ed2d 8b04 	vpush	{d8-d9}
 8013904:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8013908:	d93d      	bls.n	8013986 <__ieee754_exp+0x96>
 801390a:	49b2      	ldr	r1, [pc, #712]	; (8013bd4 <__ieee754_exp+0x2e4>)
 801390c:	428b      	cmp	r3, r1
 801390e:	d918      	bls.n	8013942 <__ieee754_exp+0x52>
 8013910:	ee10 3a10 	vmov	r3, s0
 8013914:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8013918:	4313      	orrs	r3, r2
 801391a:	d009      	beq.n	8013930 <__ieee754_exp+0x40>
 801391c:	ee10 2a10 	vmov	r2, s0
 8013920:	462b      	mov	r3, r5
 8013922:	4620      	mov	r0, r4
 8013924:	4629      	mov	r1, r5
 8013926:	f7ec fc55 	bl	80001d4 <__adddf3>
 801392a:	4604      	mov	r4, r0
 801392c:	460d      	mov	r5, r1
 801392e:	e002      	b.n	8013936 <__ieee754_exp+0x46>
 8013930:	b10e      	cbz	r6, 8013936 <__ieee754_exp+0x46>
 8013932:	2400      	movs	r4, #0
 8013934:	2500      	movs	r5, #0
 8013936:	ecbd 8b04 	vpop	{d8-d9}
 801393a:	ec45 4b10 	vmov	d0, r4, r5
 801393e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013942:	a38d      	add	r3, pc, #564	; (adr r3, 8013b78 <__ieee754_exp+0x288>)
 8013944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013948:	ee10 0a10 	vmov	r0, s0
 801394c:	4629      	mov	r1, r5
 801394e:	f7ed f887 	bl	8000a60 <__aeabi_dcmpgt>
 8013952:	4607      	mov	r7, r0
 8013954:	b130      	cbz	r0, 8013964 <__ieee754_exp+0x74>
 8013956:	ecbd 8b04 	vpop	{d8-d9}
 801395a:	2000      	movs	r0, #0
 801395c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013960:	f001 b857 	b.w	8014a12 <__math_oflow>
 8013964:	a386      	add	r3, pc, #536	; (adr r3, 8013b80 <__ieee754_exp+0x290>)
 8013966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801396a:	4620      	mov	r0, r4
 801396c:	4629      	mov	r1, r5
 801396e:	f7ed f859 	bl	8000a24 <__aeabi_dcmplt>
 8013972:	2800      	cmp	r0, #0
 8013974:	f000 808b 	beq.w	8013a8e <__ieee754_exp+0x19e>
 8013978:	ecbd 8b04 	vpop	{d8-d9}
 801397c:	4638      	mov	r0, r7
 801397e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013982:	f001 b83d 	b.w	8014a00 <__math_uflow>
 8013986:	4a94      	ldr	r2, [pc, #592]	; (8013bd8 <__ieee754_exp+0x2e8>)
 8013988:	4293      	cmp	r3, r2
 801398a:	f240 80ac 	bls.w	8013ae6 <__ieee754_exp+0x1f6>
 801398e:	4a93      	ldr	r2, [pc, #588]	; (8013bdc <__ieee754_exp+0x2ec>)
 8013990:	4293      	cmp	r3, r2
 8013992:	d87c      	bhi.n	8013a8e <__ieee754_exp+0x19e>
 8013994:	4b92      	ldr	r3, [pc, #584]	; (8013be0 <__ieee754_exp+0x2f0>)
 8013996:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801399a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801399e:	ee10 0a10 	vmov	r0, s0
 80139a2:	4629      	mov	r1, r5
 80139a4:	f7ec fc14 	bl	80001d0 <__aeabi_dsub>
 80139a8:	4b8e      	ldr	r3, [pc, #568]	; (8013be4 <__ieee754_exp+0x2f4>)
 80139aa:	00f7      	lsls	r7, r6, #3
 80139ac:	443b      	add	r3, r7
 80139ae:	ed93 7b00 	vldr	d7, [r3]
 80139b2:	f1c6 0a01 	rsb	sl, r6, #1
 80139b6:	4680      	mov	r8, r0
 80139b8:	4689      	mov	r9, r1
 80139ba:	ebaa 0a06 	sub.w	sl, sl, r6
 80139be:	eeb0 8a47 	vmov.f32	s16, s14
 80139c2:	eef0 8a67 	vmov.f32	s17, s15
 80139c6:	ec53 2b18 	vmov	r2, r3, d8
 80139ca:	4640      	mov	r0, r8
 80139cc:	4649      	mov	r1, r9
 80139ce:	f7ec fbff 	bl	80001d0 <__aeabi_dsub>
 80139d2:	4604      	mov	r4, r0
 80139d4:	460d      	mov	r5, r1
 80139d6:	4622      	mov	r2, r4
 80139d8:	462b      	mov	r3, r5
 80139da:	4620      	mov	r0, r4
 80139dc:	4629      	mov	r1, r5
 80139de:	f7ec fdaf 	bl	8000540 <__aeabi_dmul>
 80139e2:	a369      	add	r3, pc, #420	; (adr r3, 8013b88 <__ieee754_exp+0x298>)
 80139e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139e8:	4606      	mov	r6, r0
 80139ea:	460f      	mov	r7, r1
 80139ec:	f7ec fda8 	bl	8000540 <__aeabi_dmul>
 80139f0:	a367      	add	r3, pc, #412	; (adr r3, 8013b90 <__ieee754_exp+0x2a0>)
 80139f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139f6:	f7ec fbeb 	bl	80001d0 <__aeabi_dsub>
 80139fa:	4632      	mov	r2, r6
 80139fc:	463b      	mov	r3, r7
 80139fe:	f7ec fd9f 	bl	8000540 <__aeabi_dmul>
 8013a02:	a365      	add	r3, pc, #404	; (adr r3, 8013b98 <__ieee754_exp+0x2a8>)
 8013a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a08:	f7ec fbe4 	bl	80001d4 <__adddf3>
 8013a0c:	4632      	mov	r2, r6
 8013a0e:	463b      	mov	r3, r7
 8013a10:	f7ec fd96 	bl	8000540 <__aeabi_dmul>
 8013a14:	a362      	add	r3, pc, #392	; (adr r3, 8013ba0 <__ieee754_exp+0x2b0>)
 8013a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a1a:	f7ec fbd9 	bl	80001d0 <__aeabi_dsub>
 8013a1e:	4632      	mov	r2, r6
 8013a20:	463b      	mov	r3, r7
 8013a22:	f7ec fd8d 	bl	8000540 <__aeabi_dmul>
 8013a26:	a360      	add	r3, pc, #384	; (adr r3, 8013ba8 <__ieee754_exp+0x2b8>)
 8013a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a2c:	f7ec fbd2 	bl	80001d4 <__adddf3>
 8013a30:	4632      	mov	r2, r6
 8013a32:	463b      	mov	r3, r7
 8013a34:	f7ec fd84 	bl	8000540 <__aeabi_dmul>
 8013a38:	4602      	mov	r2, r0
 8013a3a:	460b      	mov	r3, r1
 8013a3c:	4620      	mov	r0, r4
 8013a3e:	4629      	mov	r1, r5
 8013a40:	f7ec fbc6 	bl	80001d0 <__aeabi_dsub>
 8013a44:	4602      	mov	r2, r0
 8013a46:	460b      	mov	r3, r1
 8013a48:	4606      	mov	r6, r0
 8013a4a:	460f      	mov	r7, r1
 8013a4c:	4620      	mov	r0, r4
 8013a4e:	4629      	mov	r1, r5
 8013a50:	f7ec fd76 	bl	8000540 <__aeabi_dmul>
 8013a54:	ec41 0b19 	vmov	d9, r0, r1
 8013a58:	f1ba 0f00 	cmp.w	sl, #0
 8013a5c:	d15d      	bne.n	8013b1a <__ieee754_exp+0x22a>
 8013a5e:	2200      	movs	r2, #0
 8013a60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013a64:	4630      	mov	r0, r6
 8013a66:	4639      	mov	r1, r7
 8013a68:	f7ec fbb2 	bl	80001d0 <__aeabi_dsub>
 8013a6c:	4602      	mov	r2, r0
 8013a6e:	460b      	mov	r3, r1
 8013a70:	ec51 0b19 	vmov	r0, r1, d9
 8013a74:	f7ec fe8e 	bl	8000794 <__aeabi_ddiv>
 8013a78:	4622      	mov	r2, r4
 8013a7a:	462b      	mov	r3, r5
 8013a7c:	f7ec fba8 	bl	80001d0 <__aeabi_dsub>
 8013a80:	4602      	mov	r2, r0
 8013a82:	460b      	mov	r3, r1
 8013a84:	2000      	movs	r0, #0
 8013a86:	4958      	ldr	r1, [pc, #352]	; (8013be8 <__ieee754_exp+0x2f8>)
 8013a88:	f7ec fba2 	bl	80001d0 <__aeabi_dsub>
 8013a8c:	e74d      	b.n	801392a <__ieee754_exp+0x3a>
 8013a8e:	4857      	ldr	r0, [pc, #348]	; (8013bec <__ieee754_exp+0x2fc>)
 8013a90:	a347      	add	r3, pc, #284	; (adr r3, 8013bb0 <__ieee754_exp+0x2c0>)
 8013a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a96:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8013a9a:	4629      	mov	r1, r5
 8013a9c:	4620      	mov	r0, r4
 8013a9e:	f7ec fd4f 	bl	8000540 <__aeabi_dmul>
 8013aa2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013aa6:	f7ec fb95 	bl	80001d4 <__adddf3>
 8013aaa:	f7ec fff9 	bl	8000aa0 <__aeabi_d2iz>
 8013aae:	4682      	mov	sl, r0
 8013ab0:	f7ec fcdc 	bl	800046c <__aeabi_i2d>
 8013ab4:	a340      	add	r3, pc, #256	; (adr r3, 8013bb8 <__ieee754_exp+0x2c8>)
 8013ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aba:	4606      	mov	r6, r0
 8013abc:	460f      	mov	r7, r1
 8013abe:	f7ec fd3f 	bl	8000540 <__aeabi_dmul>
 8013ac2:	4602      	mov	r2, r0
 8013ac4:	460b      	mov	r3, r1
 8013ac6:	4620      	mov	r0, r4
 8013ac8:	4629      	mov	r1, r5
 8013aca:	f7ec fb81 	bl	80001d0 <__aeabi_dsub>
 8013ace:	a33c      	add	r3, pc, #240	; (adr r3, 8013bc0 <__ieee754_exp+0x2d0>)
 8013ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ad4:	4680      	mov	r8, r0
 8013ad6:	4689      	mov	r9, r1
 8013ad8:	4630      	mov	r0, r6
 8013ada:	4639      	mov	r1, r7
 8013adc:	f7ec fd30 	bl	8000540 <__aeabi_dmul>
 8013ae0:	ec41 0b18 	vmov	d8, r0, r1
 8013ae4:	e76f      	b.n	80139c6 <__ieee754_exp+0xd6>
 8013ae6:	4a42      	ldr	r2, [pc, #264]	; (8013bf0 <__ieee754_exp+0x300>)
 8013ae8:	4293      	cmp	r3, r2
 8013aea:	d811      	bhi.n	8013b10 <__ieee754_exp+0x220>
 8013aec:	a336      	add	r3, pc, #216	; (adr r3, 8013bc8 <__ieee754_exp+0x2d8>)
 8013aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013af2:	ee10 0a10 	vmov	r0, s0
 8013af6:	4629      	mov	r1, r5
 8013af8:	f7ec fb6c 	bl	80001d4 <__adddf3>
 8013afc:	4b3a      	ldr	r3, [pc, #232]	; (8013be8 <__ieee754_exp+0x2f8>)
 8013afe:	2200      	movs	r2, #0
 8013b00:	f7ec ffae 	bl	8000a60 <__aeabi_dcmpgt>
 8013b04:	b138      	cbz	r0, 8013b16 <__ieee754_exp+0x226>
 8013b06:	4b38      	ldr	r3, [pc, #224]	; (8013be8 <__ieee754_exp+0x2f8>)
 8013b08:	2200      	movs	r2, #0
 8013b0a:	4620      	mov	r0, r4
 8013b0c:	4629      	mov	r1, r5
 8013b0e:	e70a      	b.n	8013926 <__ieee754_exp+0x36>
 8013b10:	f04f 0a00 	mov.w	sl, #0
 8013b14:	e75f      	b.n	80139d6 <__ieee754_exp+0xe6>
 8013b16:	4682      	mov	sl, r0
 8013b18:	e75d      	b.n	80139d6 <__ieee754_exp+0xe6>
 8013b1a:	4632      	mov	r2, r6
 8013b1c:	463b      	mov	r3, r7
 8013b1e:	2000      	movs	r0, #0
 8013b20:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8013b24:	f7ec fb54 	bl	80001d0 <__aeabi_dsub>
 8013b28:	4602      	mov	r2, r0
 8013b2a:	460b      	mov	r3, r1
 8013b2c:	ec51 0b19 	vmov	r0, r1, d9
 8013b30:	f7ec fe30 	bl	8000794 <__aeabi_ddiv>
 8013b34:	4602      	mov	r2, r0
 8013b36:	460b      	mov	r3, r1
 8013b38:	ec51 0b18 	vmov	r0, r1, d8
 8013b3c:	f7ec fb48 	bl	80001d0 <__aeabi_dsub>
 8013b40:	4642      	mov	r2, r8
 8013b42:	464b      	mov	r3, r9
 8013b44:	f7ec fb44 	bl	80001d0 <__aeabi_dsub>
 8013b48:	4602      	mov	r2, r0
 8013b4a:	460b      	mov	r3, r1
 8013b4c:	2000      	movs	r0, #0
 8013b4e:	4926      	ldr	r1, [pc, #152]	; (8013be8 <__ieee754_exp+0x2f8>)
 8013b50:	f7ec fb3e 	bl	80001d0 <__aeabi_dsub>
 8013b54:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8013b58:	4592      	cmp	sl, r2
 8013b5a:	db02      	blt.n	8013b62 <__ieee754_exp+0x272>
 8013b5c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8013b60:	e6e3      	b.n	801392a <__ieee754_exp+0x3a>
 8013b62:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8013b66:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8013b6a:	2200      	movs	r2, #0
 8013b6c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8013b70:	f7ec fce6 	bl	8000540 <__aeabi_dmul>
 8013b74:	e6d9      	b.n	801392a <__ieee754_exp+0x3a>
 8013b76:	bf00      	nop
 8013b78:	fefa39ef 	.word	0xfefa39ef
 8013b7c:	40862e42 	.word	0x40862e42
 8013b80:	d52d3051 	.word	0xd52d3051
 8013b84:	c0874910 	.word	0xc0874910
 8013b88:	72bea4d0 	.word	0x72bea4d0
 8013b8c:	3e663769 	.word	0x3e663769
 8013b90:	c5d26bf1 	.word	0xc5d26bf1
 8013b94:	3ebbbd41 	.word	0x3ebbbd41
 8013b98:	af25de2c 	.word	0xaf25de2c
 8013b9c:	3f11566a 	.word	0x3f11566a
 8013ba0:	16bebd93 	.word	0x16bebd93
 8013ba4:	3f66c16c 	.word	0x3f66c16c
 8013ba8:	5555553e 	.word	0x5555553e
 8013bac:	3fc55555 	.word	0x3fc55555
 8013bb0:	652b82fe 	.word	0x652b82fe
 8013bb4:	3ff71547 	.word	0x3ff71547
 8013bb8:	fee00000 	.word	0xfee00000
 8013bbc:	3fe62e42 	.word	0x3fe62e42
 8013bc0:	35793c76 	.word	0x35793c76
 8013bc4:	3dea39ef 	.word	0x3dea39ef
 8013bc8:	8800759c 	.word	0x8800759c
 8013bcc:	7e37e43c 	.word	0x7e37e43c
 8013bd0:	40862e41 	.word	0x40862e41
 8013bd4:	7fefffff 	.word	0x7fefffff
 8013bd8:	3fd62e42 	.word	0x3fd62e42
 8013bdc:	3ff0a2b1 	.word	0x3ff0a2b1
 8013be0:	08015198 	.word	0x08015198
 8013be4:	080151a8 	.word	0x080151a8
 8013be8:	3ff00000 	.word	0x3ff00000
 8013bec:	08015188 	.word	0x08015188
 8013bf0:	3defffff 	.word	0x3defffff

08013bf4 <__ieee754_sqrt>:
 8013bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bf8:	ec55 4b10 	vmov	r4, r5, d0
 8013bfc:	4e55      	ldr	r6, [pc, #340]	; (8013d54 <__ieee754_sqrt+0x160>)
 8013bfe:	43ae      	bics	r6, r5
 8013c00:	ee10 0a10 	vmov	r0, s0
 8013c04:	ee10 3a10 	vmov	r3, s0
 8013c08:	462a      	mov	r2, r5
 8013c0a:	4629      	mov	r1, r5
 8013c0c:	d110      	bne.n	8013c30 <__ieee754_sqrt+0x3c>
 8013c0e:	ee10 2a10 	vmov	r2, s0
 8013c12:	462b      	mov	r3, r5
 8013c14:	f7ec fc94 	bl	8000540 <__aeabi_dmul>
 8013c18:	4602      	mov	r2, r0
 8013c1a:	460b      	mov	r3, r1
 8013c1c:	4620      	mov	r0, r4
 8013c1e:	4629      	mov	r1, r5
 8013c20:	f7ec fad8 	bl	80001d4 <__adddf3>
 8013c24:	4604      	mov	r4, r0
 8013c26:	460d      	mov	r5, r1
 8013c28:	ec45 4b10 	vmov	d0, r4, r5
 8013c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c30:	2d00      	cmp	r5, #0
 8013c32:	dc10      	bgt.n	8013c56 <__ieee754_sqrt+0x62>
 8013c34:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8013c38:	4330      	orrs	r0, r6
 8013c3a:	d0f5      	beq.n	8013c28 <__ieee754_sqrt+0x34>
 8013c3c:	b15d      	cbz	r5, 8013c56 <__ieee754_sqrt+0x62>
 8013c3e:	ee10 2a10 	vmov	r2, s0
 8013c42:	462b      	mov	r3, r5
 8013c44:	ee10 0a10 	vmov	r0, s0
 8013c48:	f7ec fac2 	bl	80001d0 <__aeabi_dsub>
 8013c4c:	4602      	mov	r2, r0
 8013c4e:	460b      	mov	r3, r1
 8013c50:	f7ec fda0 	bl	8000794 <__aeabi_ddiv>
 8013c54:	e7e6      	b.n	8013c24 <__ieee754_sqrt+0x30>
 8013c56:	1512      	asrs	r2, r2, #20
 8013c58:	d074      	beq.n	8013d44 <__ieee754_sqrt+0x150>
 8013c5a:	07d4      	lsls	r4, r2, #31
 8013c5c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8013c60:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8013c64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8013c68:	bf5e      	ittt	pl
 8013c6a:	0fda      	lsrpl	r2, r3, #31
 8013c6c:	005b      	lslpl	r3, r3, #1
 8013c6e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8013c72:	2400      	movs	r4, #0
 8013c74:	0fda      	lsrs	r2, r3, #31
 8013c76:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8013c7a:	107f      	asrs	r7, r7, #1
 8013c7c:	005b      	lsls	r3, r3, #1
 8013c7e:	2516      	movs	r5, #22
 8013c80:	4620      	mov	r0, r4
 8013c82:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8013c86:	1886      	adds	r6, r0, r2
 8013c88:	428e      	cmp	r6, r1
 8013c8a:	bfde      	ittt	le
 8013c8c:	1b89      	suble	r1, r1, r6
 8013c8e:	18b0      	addle	r0, r6, r2
 8013c90:	18a4      	addle	r4, r4, r2
 8013c92:	0049      	lsls	r1, r1, #1
 8013c94:	3d01      	subs	r5, #1
 8013c96:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8013c9a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8013c9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013ca2:	d1f0      	bne.n	8013c86 <__ieee754_sqrt+0x92>
 8013ca4:	462a      	mov	r2, r5
 8013ca6:	f04f 0e20 	mov.w	lr, #32
 8013caa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013cae:	4281      	cmp	r1, r0
 8013cb0:	eb06 0c05 	add.w	ip, r6, r5
 8013cb4:	dc02      	bgt.n	8013cbc <__ieee754_sqrt+0xc8>
 8013cb6:	d113      	bne.n	8013ce0 <__ieee754_sqrt+0xec>
 8013cb8:	459c      	cmp	ip, r3
 8013cba:	d811      	bhi.n	8013ce0 <__ieee754_sqrt+0xec>
 8013cbc:	f1bc 0f00 	cmp.w	ip, #0
 8013cc0:	eb0c 0506 	add.w	r5, ip, r6
 8013cc4:	da43      	bge.n	8013d4e <__ieee754_sqrt+0x15a>
 8013cc6:	2d00      	cmp	r5, #0
 8013cc8:	db41      	blt.n	8013d4e <__ieee754_sqrt+0x15a>
 8013cca:	f100 0801 	add.w	r8, r0, #1
 8013cce:	1a09      	subs	r1, r1, r0
 8013cd0:	459c      	cmp	ip, r3
 8013cd2:	bf88      	it	hi
 8013cd4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8013cd8:	eba3 030c 	sub.w	r3, r3, ip
 8013cdc:	4432      	add	r2, r6
 8013cde:	4640      	mov	r0, r8
 8013ce0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8013ce4:	f1be 0e01 	subs.w	lr, lr, #1
 8013ce8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8013cec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013cf0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013cf4:	d1db      	bne.n	8013cae <__ieee754_sqrt+0xba>
 8013cf6:	430b      	orrs	r3, r1
 8013cf8:	d006      	beq.n	8013d08 <__ieee754_sqrt+0x114>
 8013cfa:	1c50      	adds	r0, r2, #1
 8013cfc:	bf13      	iteet	ne
 8013cfe:	3201      	addne	r2, #1
 8013d00:	3401      	addeq	r4, #1
 8013d02:	4672      	moveq	r2, lr
 8013d04:	f022 0201 	bicne.w	r2, r2, #1
 8013d08:	1063      	asrs	r3, r4, #1
 8013d0a:	0852      	lsrs	r2, r2, #1
 8013d0c:	07e1      	lsls	r1, r4, #31
 8013d0e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8013d12:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8013d16:	bf48      	it	mi
 8013d18:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8013d1c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8013d20:	4614      	mov	r4, r2
 8013d22:	e781      	b.n	8013c28 <__ieee754_sqrt+0x34>
 8013d24:	0ad9      	lsrs	r1, r3, #11
 8013d26:	3815      	subs	r0, #21
 8013d28:	055b      	lsls	r3, r3, #21
 8013d2a:	2900      	cmp	r1, #0
 8013d2c:	d0fa      	beq.n	8013d24 <__ieee754_sqrt+0x130>
 8013d2e:	02cd      	lsls	r5, r1, #11
 8013d30:	d50a      	bpl.n	8013d48 <__ieee754_sqrt+0x154>
 8013d32:	f1c2 0420 	rsb	r4, r2, #32
 8013d36:	fa23 f404 	lsr.w	r4, r3, r4
 8013d3a:	1e55      	subs	r5, r2, #1
 8013d3c:	4093      	lsls	r3, r2
 8013d3e:	4321      	orrs	r1, r4
 8013d40:	1b42      	subs	r2, r0, r5
 8013d42:	e78a      	b.n	8013c5a <__ieee754_sqrt+0x66>
 8013d44:	4610      	mov	r0, r2
 8013d46:	e7f0      	b.n	8013d2a <__ieee754_sqrt+0x136>
 8013d48:	0049      	lsls	r1, r1, #1
 8013d4a:	3201      	adds	r2, #1
 8013d4c:	e7ef      	b.n	8013d2e <__ieee754_sqrt+0x13a>
 8013d4e:	4680      	mov	r8, r0
 8013d50:	e7bd      	b.n	8013cce <__ieee754_sqrt+0xda>
 8013d52:	bf00      	nop
 8013d54:	7ff00000 	.word	0x7ff00000

08013d58 <__ieee754_acosf>:
 8013d58:	b508      	push	{r3, lr}
 8013d5a:	ee10 3a10 	vmov	r3, s0
 8013d5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013d62:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8013d66:	ed2d 8b0c 	vpush	{d8-d13}
 8013d6a:	d10a      	bne.n	8013d82 <__ieee754_acosf+0x2a>
 8013d6c:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8013f04 <__ieee754_acosf+0x1ac>
 8013d70:	ed9f 8a65 	vldr	s16, [pc, #404]	; 8013f08 <__ieee754_acosf+0x1b0>
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	bfd8      	it	le
 8013d78:	eeb0 0a48 	vmovle.f32	s0, s16
 8013d7c:	ecbd 8b0c 	vpop	{d8-d13}
 8013d80:	bd08      	pop	{r3, pc}
 8013d82:	dd04      	ble.n	8013d8e <__ieee754_acosf+0x36>
 8013d84:	ee30 8a40 	vsub.f32	s16, s0, s0
 8013d88:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8013d8c:	e7f6      	b.n	8013d7c <__ieee754_acosf+0x24>
 8013d8e:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8013d92:	da3c      	bge.n	8013e0e <__ieee754_acosf+0xb6>
 8013d94:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8013d98:	f340 80b1 	ble.w	8013efe <__ieee754_acosf+0x1a6>
 8013d9c:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013da0:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8013f0c <__ieee754_acosf+0x1b4>
 8013da4:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8013f10 <__ieee754_acosf+0x1b8>
 8013da8:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8013f14 <__ieee754_acosf+0x1bc>
 8013dac:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 8013f18 <__ieee754_acosf+0x1c0>
 8013db0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013db4:	eddf 6a59 	vldr	s13, [pc, #356]	; 8013f1c <__ieee754_acosf+0x1c4>
 8013db8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013dbc:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8013f20 <__ieee754_acosf+0x1c8>
 8013dc0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013dc4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8013f24 <__ieee754_acosf+0x1cc>
 8013dc8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013dcc:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8013f28 <__ieee754_acosf+0x1d0>
 8013dd0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013dd4:	eddf 6a55 	vldr	s13, [pc, #340]	; 8013f2c <__ieee754_acosf+0x1d4>
 8013dd8:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8013ddc:	eddf 6a54 	vldr	s13, [pc, #336]	; 8013f30 <__ieee754_acosf+0x1d8>
 8013de0:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013de4:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8013f34 <__ieee754_acosf+0x1dc>
 8013de8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8013dec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013df0:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013df4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013df8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013dfc:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013e00:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8013f38 <__ieee754_acosf+0x1e0>
 8013e04:	ee30 0a48 	vsub.f32	s0, s0, s16
 8013e08:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013e0c:	e7b6      	b.n	8013d7c <__ieee754_acosf+0x24>
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	eddf da3e 	vldr	s27, [pc, #248]	; 8013f0c <__ieee754_acosf+0x1b4>
 8013e14:	eddf ca3e 	vldr	s25, [pc, #248]	; 8013f10 <__ieee754_acosf+0x1b8>
 8013e18:	ed9f ca40 	vldr	s24, [pc, #256]	; 8013f1c <__ieee754_acosf+0x1c4>
 8013e1c:	eddf ba40 	vldr	s23, [pc, #256]	; 8013f20 <__ieee754_acosf+0x1c8>
 8013e20:	ed9f ba40 	vldr	s22, [pc, #256]	; 8013f24 <__ieee754_acosf+0x1cc>
 8013e24:	eddf 8a40 	vldr	s17, [pc, #256]	; 8013f28 <__ieee754_acosf+0x1d0>
 8013e28:	ed9f da40 	vldr	s26, [pc, #256]	; 8013f2c <__ieee754_acosf+0x1d4>
 8013e2c:	eddf aa39 	vldr	s21, [pc, #228]	; 8013f14 <__ieee754_acosf+0x1bc>
 8013e30:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8013f30 <__ieee754_acosf+0x1d8>
 8013e34:	eddf 9a3f 	vldr	s19, [pc, #252]	; 8013f34 <__ieee754_acosf+0x1dc>
 8013e38:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8013e3c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013e40:	da28      	bge.n	8013e94 <__ieee754_acosf+0x13c>
 8013e42:	ee30 0a09 	vadd.f32	s0, s0, s18
 8013e46:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013e4a:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8013e4e:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8013e52:	eeac ca80 	vfma.f32	s24, s25, s0
 8013e56:	eeaa aa80 	vfma.f32	s20, s21, s0
 8013e5a:	eeec ba00 	vfma.f32	s23, s24, s0
 8013e5e:	eeea 9a00 	vfma.f32	s19, s20, s0
 8013e62:	eeab ba80 	vfma.f32	s22, s23, s0
 8013e66:	eea9 9a80 	vfma.f32	s18, s19, s0
 8013e6a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8013e6e:	ee68 8a80 	vmul.f32	s17, s17, s0
 8013e72:	f000 f9a5 	bl	80141c0 <__ieee754_sqrtf>
 8013e76:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8013e7a:	eddf 7a30 	vldr	s15, [pc, #192]	; 8013f3c <__ieee754_acosf+0x1e4>
 8013e7e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013e82:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013e86:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013e8a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8013f40 <__ieee754_acosf+0x1e8>
 8013e8e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013e92:	e773      	b.n	8013d7c <__ieee754_acosf+0x24>
 8013e94:	ee39 8a40 	vsub.f32	s16, s18, s0
 8013e98:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013e9c:	eeb0 0a48 	vmov.f32	s0, s16
 8013ea0:	f000 f98e 	bl	80141c0 <__ieee754_sqrtf>
 8013ea4:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8013ea8:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8013eac:	eeac ca88 	vfma.f32	s24, s25, s16
 8013eb0:	eeaa aa88 	vfma.f32	s20, s21, s16
 8013eb4:	eeec ba08 	vfma.f32	s23, s24, s16
 8013eb8:	ee10 3a10 	vmov	r3, s0
 8013ebc:	eeab ba88 	vfma.f32	s22, s23, s16
 8013ec0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013ec4:	f023 030f 	bic.w	r3, r3, #15
 8013ec8:	eeea 9a08 	vfma.f32	s19, s20, s16
 8013ecc:	ee07 3a90 	vmov	s15, r3
 8013ed0:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8013ed4:	eeb0 6a48 	vmov.f32	s12, s16
 8013ed8:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8013edc:	eea9 9a88 	vfma.f32	s18, s19, s16
 8013ee0:	ee70 6a27 	vadd.f32	s13, s0, s15
 8013ee4:	ee68 8a88 	vmul.f32	s17, s17, s16
 8013ee8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8013eec:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8013ef0:	eea0 7a26 	vfma.f32	s14, s0, s13
 8013ef4:	ee37 0a87 	vadd.f32	s0, s15, s14
 8013ef8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013efc:	e73e      	b.n	8013d7c <__ieee754_acosf+0x24>
 8013efe:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8013f44 <__ieee754_acosf+0x1ec>
 8013f02:	e73b      	b.n	8013d7c <__ieee754_acosf+0x24>
 8013f04:	00000000 	.word	0x00000000
 8013f08:	40490fdb 	.word	0x40490fdb
 8013f0c:	3811ef08 	.word	0x3811ef08
 8013f10:	3a4f7f04 	.word	0x3a4f7f04
 8013f14:	bf303361 	.word	0xbf303361
 8013f18:	33a22168 	.word	0x33a22168
 8013f1c:	bd241146 	.word	0xbd241146
 8013f20:	3e4e0aa8 	.word	0x3e4e0aa8
 8013f24:	bea6b090 	.word	0xbea6b090
 8013f28:	3e2aaaab 	.word	0x3e2aaaab
 8013f2c:	3d9dc62e 	.word	0x3d9dc62e
 8013f30:	4001572d 	.word	0x4001572d
 8013f34:	c019d139 	.word	0xc019d139
 8013f38:	3fc90fda 	.word	0x3fc90fda
 8013f3c:	b3a22168 	.word	0xb3a22168
 8013f40:	40490fda 	.word	0x40490fda
 8013f44:	3fc90fdb 	.word	0x3fc90fdb

08013f48 <__ieee754_rem_pio2f>:
 8013f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f4a:	ee10 6a10 	vmov	r6, s0
 8013f4e:	4b8e      	ldr	r3, [pc, #568]	; (8014188 <__ieee754_rem_pio2f+0x240>)
 8013f50:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8013f54:	429d      	cmp	r5, r3
 8013f56:	b087      	sub	sp, #28
 8013f58:	eef0 7a40 	vmov.f32	s15, s0
 8013f5c:	4604      	mov	r4, r0
 8013f5e:	dc05      	bgt.n	8013f6c <__ieee754_rem_pio2f+0x24>
 8013f60:	2300      	movs	r3, #0
 8013f62:	ed80 0a00 	vstr	s0, [r0]
 8013f66:	6043      	str	r3, [r0, #4]
 8013f68:	2000      	movs	r0, #0
 8013f6a:	e01a      	b.n	8013fa2 <__ieee754_rem_pio2f+0x5a>
 8013f6c:	4b87      	ldr	r3, [pc, #540]	; (801418c <__ieee754_rem_pio2f+0x244>)
 8013f6e:	429d      	cmp	r5, r3
 8013f70:	dc46      	bgt.n	8014000 <__ieee754_rem_pio2f+0xb8>
 8013f72:	2e00      	cmp	r6, #0
 8013f74:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8014190 <__ieee754_rem_pio2f+0x248>
 8013f78:	4b86      	ldr	r3, [pc, #536]	; (8014194 <__ieee754_rem_pio2f+0x24c>)
 8013f7a:	f025 050f 	bic.w	r5, r5, #15
 8013f7e:	dd1f      	ble.n	8013fc0 <__ieee754_rem_pio2f+0x78>
 8013f80:	429d      	cmp	r5, r3
 8013f82:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013f86:	d00e      	beq.n	8013fa6 <__ieee754_rem_pio2f+0x5e>
 8013f88:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8014198 <__ieee754_rem_pio2f+0x250>
 8013f8c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8013f90:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013f94:	ed80 0a00 	vstr	s0, [r0]
 8013f98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013f9c:	2001      	movs	r0, #1
 8013f9e:	edc4 7a01 	vstr	s15, [r4, #4]
 8013fa2:	b007      	add	sp, #28
 8013fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fa6:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801419c <__ieee754_rem_pio2f+0x254>
 8013faa:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 80141a0 <__ieee754_rem_pio2f+0x258>
 8013fae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013fb2:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8013fb6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013fba:	edc0 6a00 	vstr	s13, [r0]
 8013fbe:	e7eb      	b.n	8013f98 <__ieee754_rem_pio2f+0x50>
 8013fc0:	429d      	cmp	r5, r3
 8013fc2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013fc6:	d00e      	beq.n	8013fe6 <__ieee754_rem_pio2f+0x9e>
 8013fc8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8014198 <__ieee754_rem_pio2f+0x250>
 8013fcc:	ee37 0a87 	vadd.f32	s0, s15, s14
 8013fd0:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013fd4:	ed80 0a00 	vstr	s0, [r0]
 8013fd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8013fe0:	edc4 7a01 	vstr	s15, [r4, #4]
 8013fe4:	e7dd      	b.n	8013fa2 <__ieee754_rem_pio2f+0x5a>
 8013fe6:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801419c <__ieee754_rem_pio2f+0x254>
 8013fea:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80141a0 <__ieee754_rem_pio2f+0x258>
 8013fee:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013ff2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8013ff6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013ffa:	edc0 6a00 	vstr	s13, [r0]
 8013ffe:	e7eb      	b.n	8013fd8 <__ieee754_rem_pio2f+0x90>
 8014000:	4b68      	ldr	r3, [pc, #416]	; (80141a4 <__ieee754_rem_pio2f+0x25c>)
 8014002:	429d      	cmp	r5, r3
 8014004:	dc72      	bgt.n	80140ec <__ieee754_rem_pio2f+0x1a4>
 8014006:	f000 fecb 	bl	8014da0 <fabsf>
 801400a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80141a8 <__ieee754_rem_pio2f+0x260>
 801400e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014012:	eee0 7a07 	vfma.f32	s15, s0, s14
 8014016:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801401a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801401e:	ee17 0a90 	vmov	r0, s15
 8014022:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8014190 <__ieee754_rem_pio2f+0x248>
 8014026:	eea7 0a67 	vfms.f32	s0, s14, s15
 801402a:	281f      	cmp	r0, #31
 801402c:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8014198 <__ieee754_rem_pio2f+0x250>
 8014030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014034:	eeb1 6a47 	vneg.f32	s12, s14
 8014038:	ee70 6a67 	vsub.f32	s13, s0, s15
 801403c:	ee16 2a90 	vmov	r2, s13
 8014040:	dc1c      	bgt.n	801407c <__ieee754_rem_pio2f+0x134>
 8014042:	495a      	ldr	r1, [pc, #360]	; (80141ac <__ieee754_rem_pio2f+0x264>)
 8014044:	1e47      	subs	r7, r0, #1
 8014046:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801404a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801404e:	428b      	cmp	r3, r1
 8014050:	d014      	beq.n	801407c <__ieee754_rem_pio2f+0x134>
 8014052:	6022      	str	r2, [r4, #0]
 8014054:	ed94 7a00 	vldr	s14, [r4]
 8014058:	ee30 0a47 	vsub.f32	s0, s0, s14
 801405c:	2e00      	cmp	r6, #0
 801405e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014062:	ed84 0a01 	vstr	s0, [r4, #4]
 8014066:	da9c      	bge.n	8013fa2 <__ieee754_rem_pio2f+0x5a>
 8014068:	eeb1 7a47 	vneg.f32	s14, s14
 801406c:	eeb1 0a40 	vneg.f32	s0, s0
 8014070:	ed84 7a00 	vstr	s14, [r4]
 8014074:	ed84 0a01 	vstr	s0, [r4, #4]
 8014078:	4240      	negs	r0, r0
 801407a:	e792      	b.n	8013fa2 <__ieee754_rem_pio2f+0x5a>
 801407c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8014080:	15eb      	asrs	r3, r5, #23
 8014082:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8014086:	2d08      	cmp	r5, #8
 8014088:	dde3      	ble.n	8014052 <__ieee754_rem_pio2f+0x10a>
 801408a:	eddf 7a44 	vldr	s15, [pc, #272]	; 801419c <__ieee754_rem_pio2f+0x254>
 801408e:	eddf 5a44 	vldr	s11, [pc, #272]	; 80141a0 <__ieee754_rem_pio2f+0x258>
 8014092:	eef0 6a40 	vmov.f32	s13, s0
 8014096:	eee6 6a27 	vfma.f32	s13, s12, s15
 801409a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801409e:	eea6 0a27 	vfma.f32	s0, s12, s15
 80140a2:	eef0 7a40 	vmov.f32	s15, s0
 80140a6:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80140aa:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80140ae:	ee15 2a90 	vmov	r2, s11
 80140b2:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80140b6:	1a5b      	subs	r3, r3, r1
 80140b8:	2b19      	cmp	r3, #25
 80140ba:	dc04      	bgt.n	80140c6 <__ieee754_rem_pio2f+0x17e>
 80140bc:	edc4 5a00 	vstr	s11, [r4]
 80140c0:	eeb0 0a66 	vmov.f32	s0, s13
 80140c4:	e7c6      	b.n	8014054 <__ieee754_rem_pio2f+0x10c>
 80140c6:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80141b0 <__ieee754_rem_pio2f+0x268>
 80140ca:	eeb0 0a66 	vmov.f32	s0, s13
 80140ce:	eea6 0a25 	vfma.f32	s0, s12, s11
 80140d2:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80140d6:	eddf 6a37 	vldr	s13, [pc, #220]	; 80141b4 <__ieee754_rem_pio2f+0x26c>
 80140da:	eee6 7a25 	vfma.f32	s15, s12, s11
 80140de:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80140e2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80140e6:	ed84 7a00 	vstr	s14, [r4]
 80140ea:	e7b3      	b.n	8014054 <__ieee754_rem_pio2f+0x10c>
 80140ec:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80140f0:	db06      	blt.n	8014100 <__ieee754_rem_pio2f+0x1b8>
 80140f2:	ee70 7a40 	vsub.f32	s15, s0, s0
 80140f6:	edc0 7a01 	vstr	s15, [r0, #4]
 80140fa:	edc0 7a00 	vstr	s15, [r0]
 80140fe:	e733      	b.n	8013f68 <__ieee754_rem_pio2f+0x20>
 8014100:	15ea      	asrs	r2, r5, #23
 8014102:	3a86      	subs	r2, #134	; 0x86
 8014104:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8014108:	ee07 3a90 	vmov	s15, r3
 801410c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014110:	eddf 6a29 	vldr	s13, [pc, #164]	; 80141b8 <__ieee754_rem_pio2f+0x270>
 8014114:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014118:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801411c:	ed8d 7a03 	vstr	s14, [sp, #12]
 8014120:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014124:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014128:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801412c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014130:	ed8d 7a04 	vstr	s14, [sp, #16]
 8014134:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014138:	eef5 7a40 	vcmp.f32	s15, #0.0
 801413c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014140:	edcd 7a05 	vstr	s15, [sp, #20]
 8014144:	d11e      	bne.n	8014184 <__ieee754_rem_pio2f+0x23c>
 8014146:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801414a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801414e:	bf14      	ite	ne
 8014150:	2302      	movne	r3, #2
 8014152:	2301      	moveq	r3, #1
 8014154:	4919      	ldr	r1, [pc, #100]	; (80141bc <__ieee754_rem_pio2f+0x274>)
 8014156:	9101      	str	r1, [sp, #4]
 8014158:	2102      	movs	r1, #2
 801415a:	9100      	str	r1, [sp, #0]
 801415c:	a803      	add	r0, sp, #12
 801415e:	4621      	mov	r1, r4
 8014160:	f000 f892 	bl	8014288 <__kernel_rem_pio2f>
 8014164:	2e00      	cmp	r6, #0
 8014166:	f6bf af1c 	bge.w	8013fa2 <__ieee754_rem_pio2f+0x5a>
 801416a:	edd4 7a00 	vldr	s15, [r4]
 801416e:	eef1 7a67 	vneg.f32	s15, s15
 8014172:	edc4 7a00 	vstr	s15, [r4]
 8014176:	edd4 7a01 	vldr	s15, [r4, #4]
 801417a:	eef1 7a67 	vneg.f32	s15, s15
 801417e:	edc4 7a01 	vstr	s15, [r4, #4]
 8014182:	e779      	b.n	8014078 <__ieee754_rem_pio2f+0x130>
 8014184:	2303      	movs	r3, #3
 8014186:	e7e5      	b.n	8014154 <__ieee754_rem_pio2f+0x20c>
 8014188:	3f490fd8 	.word	0x3f490fd8
 801418c:	4016cbe3 	.word	0x4016cbe3
 8014190:	3fc90f80 	.word	0x3fc90f80
 8014194:	3fc90fd0 	.word	0x3fc90fd0
 8014198:	37354443 	.word	0x37354443
 801419c:	37354400 	.word	0x37354400
 80141a0:	2e85a308 	.word	0x2e85a308
 80141a4:	43490f80 	.word	0x43490f80
 80141a8:	3f22f984 	.word	0x3f22f984
 80141ac:	080151b8 	.word	0x080151b8
 80141b0:	2e85a300 	.word	0x2e85a300
 80141b4:	248d3132 	.word	0x248d3132
 80141b8:	43800000 	.word	0x43800000
 80141bc:	08015238 	.word	0x08015238

080141c0 <__ieee754_sqrtf>:
 80141c0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80141c4:	4770      	bx	lr
	...

080141c8 <__kernel_cosf>:
 80141c8:	ee10 3a10 	vmov	r3, s0
 80141cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80141d0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80141d4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80141d8:	da05      	bge.n	80141e6 <__kernel_cosf+0x1e>
 80141da:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80141de:	ee17 2a90 	vmov	r2, s15
 80141e2:	2a00      	cmp	r2, #0
 80141e4:	d03d      	beq.n	8014262 <__kernel_cosf+0x9a>
 80141e6:	ee60 5a00 	vmul.f32	s11, s0, s0
 80141ea:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014268 <__kernel_cosf+0xa0>
 80141ee:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801426c <__kernel_cosf+0xa4>
 80141f2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8014270 <__kernel_cosf+0xa8>
 80141f6:	4a1f      	ldr	r2, [pc, #124]	; (8014274 <__kernel_cosf+0xac>)
 80141f8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80141fc:	4293      	cmp	r3, r2
 80141fe:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8014278 <__kernel_cosf+0xb0>
 8014202:	eee7 7a25 	vfma.f32	s15, s14, s11
 8014206:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801427c <__kernel_cosf+0xb4>
 801420a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801420e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8014280 <__kernel_cosf+0xb8>
 8014212:	eee7 7a25 	vfma.f32	s15, s14, s11
 8014216:	eeb0 7a66 	vmov.f32	s14, s13
 801421a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801421e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8014222:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8014226:	ee67 6a25 	vmul.f32	s13, s14, s11
 801422a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801422e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014232:	dc04      	bgt.n	801423e <__kernel_cosf+0x76>
 8014234:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8014238:	ee36 0a47 	vsub.f32	s0, s12, s14
 801423c:	4770      	bx	lr
 801423e:	4a11      	ldr	r2, [pc, #68]	; (8014284 <__kernel_cosf+0xbc>)
 8014240:	4293      	cmp	r3, r2
 8014242:	bfda      	itte	le
 8014244:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8014248:	ee06 3a90 	vmovle	s13, r3
 801424c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8014250:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8014254:	ee36 0a66 	vsub.f32	s0, s12, s13
 8014258:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801425c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014260:	4770      	bx	lr
 8014262:	eeb0 0a46 	vmov.f32	s0, s12
 8014266:	4770      	bx	lr
 8014268:	ad47d74e 	.word	0xad47d74e
 801426c:	310f74f6 	.word	0x310f74f6
 8014270:	3d2aaaab 	.word	0x3d2aaaab
 8014274:	3e999999 	.word	0x3e999999
 8014278:	b493f27c 	.word	0xb493f27c
 801427c:	37d00d01 	.word	0x37d00d01
 8014280:	bab60b61 	.word	0xbab60b61
 8014284:	3f480000 	.word	0x3f480000

08014288 <__kernel_rem_pio2f>:
 8014288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801428c:	ed2d 8b04 	vpush	{d8-d9}
 8014290:	b0d9      	sub	sp, #356	; 0x164
 8014292:	4688      	mov	r8, r1
 8014294:	9002      	str	r0, [sp, #8]
 8014296:	49bb      	ldr	r1, [pc, #748]	; (8014584 <__kernel_rem_pio2f+0x2fc>)
 8014298:	9866      	ldr	r0, [sp, #408]	; 0x198
 801429a:	9301      	str	r3, [sp, #4]
 801429c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80142a0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 80142a4:	1e59      	subs	r1, r3, #1
 80142a6:	1d13      	adds	r3, r2, #4
 80142a8:	db27      	blt.n	80142fa <__kernel_rem_pio2f+0x72>
 80142aa:	f1b2 0b03 	subs.w	fp, r2, #3
 80142ae:	bf48      	it	mi
 80142b0:	f102 0b04 	addmi.w	fp, r2, #4
 80142b4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 80142b8:	1c45      	adds	r5, r0, #1
 80142ba:	00ec      	lsls	r4, r5, #3
 80142bc:	1a47      	subs	r7, r0, r1
 80142be:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8014594 <__kernel_rem_pio2f+0x30c>
 80142c2:	9403      	str	r4, [sp, #12]
 80142c4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 80142c8:	eb0a 0c01 	add.w	ip, sl, r1
 80142cc:	ae1c      	add	r6, sp, #112	; 0x70
 80142ce:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 80142d2:	2400      	movs	r4, #0
 80142d4:	4564      	cmp	r4, ip
 80142d6:	dd12      	ble.n	80142fe <__kernel_rem_pio2f+0x76>
 80142d8:	9b01      	ldr	r3, [sp, #4]
 80142da:	ac1c      	add	r4, sp, #112	; 0x70
 80142dc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80142e0:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 80142e4:	f04f 0c00 	mov.w	ip, #0
 80142e8:	45d4      	cmp	ip, sl
 80142ea:	dc27      	bgt.n	801433c <__kernel_rem_pio2f+0xb4>
 80142ec:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80142f0:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8014594 <__kernel_rem_pio2f+0x30c>
 80142f4:	4627      	mov	r7, r4
 80142f6:	2600      	movs	r6, #0
 80142f8:	e016      	b.n	8014328 <__kernel_rem_pio2f+0xa0>
 80142fa:	2000      	movs	r0, #0
 80142fc:	e7dc      	b.n	80142b8 <__kernel_rem_pio2f+0x30>
 80142fe:	42e7      	cmn	r7, r4
 8014300:	bf5d      	ittte	pl
 8014302:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8014306:	ee07 3a90 	vmovpl	s15, r3
 801430a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801430e:	eef0 7a47 	vmovmi.f32	s15, s14
 8014312:	ece6 7a01 	vstmia	r6!, {s15}
 8014316:	3401      	adds	r4, #1
 8014318:	e7dc      	b.n	80142d4 <__kernel_rem_pio2f+0x4c>
 801431a:	ecf9 6a01 	vldmia	r9!, {s13}
 801431e:	ed97 7a00 	vldr	s14, [r7]
 8014322:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014326:	3601      	adds	r6, #1
 8014328:	428e      	cmp	r6, r1
 801432a:	f1a7 0704 	sub.w	r7, r7, #4
 801432e:	ddf4      	ble.n	801431a <__kernel_rem_pio2f+0x92>
 8014330:	eceb 7a01 	vstmia	fp!, {s15}
 8014334:	f10c 0c01 	add.w	ip, ip, #1
 8014338:	3404      	adds	r4, #4
 801433a:	e7d5      	b.n	80142e8 <__kernel_rem_pio2f+0x60>
 801433c:	ab08      	add	r3, sp, #32
 801433e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8014342:	eddf 8a93 	vldr	s17, [pc, #588]	; 8014590 <__kernel_rem_pio2f+0x308>
 8014346:	ed9f 9a91 	vldr	s18, [pc, #580]	; 801458c <__kernel_rem_pio2f+0x304>
 801434a:	9304      	str	r3, [sp, #16]
 801434c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8014350:	4656      	mov	r6, sl
 8014352:	00b3      	lsls	r3, r6, #2
 8014354:	9305      	str	r3, [sp, #20]
 8014356:	ab58      	add	r3, sp, #352	; 0x160
 8014358:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801435c:	ac08      	add	r4, sp, #32
 801435e:	ab44      	add	r3, sp, #272	; 0x110
 8014360:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8014364:	46a4      	mov	ip, r4
 8014366:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801436a:	4637      	mov	r7, r6
 801436c:	2f00      	cmp	r7, #0
 801436e:	f1a0 0004 	sub.w	r0, r0, #4
 8014372:	dc4f      	bgt.n	8014414 <__kernel_rem_pio2f+0x18c>
 8014374:	4628      	mov	r0, r5
 8014376:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801437a:	f000 fd61 	bl	8014e40 <scalbnf>
 801437e:	eeb0 8a40 	vmov.f32	s16, s0
 8014382:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8014386:	ee28 0a00 	vmul.f32	s0, s16, s0
 801438a:	f000 fd11 	bl	8014db0 <floorf>
 801438e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8014392:	eea0 8a67 	vfms.f32	s16, s0, s15
 8014396:	2d00      	cmp	r5, #0
 8014398:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801439c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80143a0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80143a4:	ee17 9a90 	vmov	r9, s15
 80143a8:	ee38 8a40 	vsub.f32	s16, s16, s0
 80143ac:	dd44      	ble.n	8014438 <__kernel_rem_pio2f+0x1b0>
 80143ae:	f106 3cff 	add.w	ip, r6, #4294967295
 80143b2:	ab08      	add	r3, sp, #32
 80143b4:	f1c5 0e08 	rsb	lr, r5, #8
 80143b8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80143bc:	fa47 f00e 	asr.w	r0, r7, lr
 80143c0:	4481      	add	r9, r0
 80143c2:	fa00 f00e 	lsl.w	r0, r0, lr
 80143c6:	1a3f      	subs	r7, r7, r0
 80143c8:	f1c5 0007 	rsb	r0, r5, #7
 80143cc:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 80143d0:	4107      	asrs	r7, r0
 80143d2:	2f00      	cmp	r7, #0
 80143d4:	dd3f      	ble.n	8014456 <__kernel_rem_pio2f+0x1ce>
 80143d6:	f04f 0e00 	mov.w	lr, #0
 80143da:	f109 0901 	add.w	r9, r9, #1
 80143de:	4673      	mov	r3, lr
 80143e0:	4576      	cmp	r6, lr
 80143e2:	dc6b      	bgt.n	80144bc <__kernel_rem_pio2f+0x234>
 80143e4:	2d00      	cmp	r5, #0
 80143e6:	dd04      	ble.n	80143f2 <__kernel_rem_pio2f+0x16a>
 80143e8:	2d01      	cmp	r5, #1
 80143ea:	d078      	beq.n	80144de <__kernel_rem_pio2f+0x256>
 80143ec:	2d02      	cmp	r5, #2
 80143ee:	f000 8081 	beq.w	80144f4 <__kernel_rem_pio2f+0x26c>
 80143f2:	2f02      	cmp	r7, #2
 80143f4:	d12f      	bne.n	8014456 <__kernel_rem_pio2f+0x1ce>
 80143f6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80143fa:	ee30 8a48 	vsub.f32	s16, s0, s16
 80143fe:	b353      	cbz	r3, 8014456 <__kernel_rem_pio2f+0x1ce>
 8014400:	4628      	mov	r0, r5
 8014402:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8014406:	f000 fd1b 	bl	8014e40 <scalbnf>
 801440a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801440e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014412:	e020      	b.n	8014456 <__kernel_rem_pio2f+0x1ce>
 8014414:	ee60 7a28 	vmul.f32	s15, s0, s17
 8014418:	3f01      	subs	r7, #1
 801441a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801441e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014422:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8014426:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801442a:	ecac 0a01 	vstmia	ip!, {s0}
 801442e:	ed90 0a00 	vldr	s0, [r0]
 8014432:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014436:	e799      	b.n	801436c <__kernel_rem_pio2f+0xe4>
 8014438:	d105      	bne.n	8014446 <__kernel_rem_pio2f+0x1be>
 801443a:	1e70      	subs	r0, r6, #1
 801443c:	ab08      	add	r3, sp, #32
 801443e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8014442:	11ff      	asrs	r7, r7, #7
 8014444:	e7c5      	b.n	80143d2 <__kernel_rem_pio2f+0x14a>
 8014446:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801444a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801444e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014452:	da31      	bge.n	80144b8 <__kernel_rem_pio2f+0x230>
 8014454:	2700      	movs	r7, #0
 8014456:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801445a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801445e:	f040 809b 	bne.w	8014598 <__kernel_rem_pio2f+0x310>
 8014462:	1e74      	subs	r4, r6, #1
 8014464:	46a4      	mov	ip, r4
 8014466:	2000      	movs	r0, #0
 8014468:	45d4      	cmp	ip, sl
 801446a:	da4a      	bge.n	8014502 <__kernel_rem_pio2f+0x27a>
 801446c:	2800      	cmp	r0, #0
 801446e:	d07a      	beq.n	8014566 <__kernel_rem_pio2f+0x2de>
 8014470:	ab08      	add	r3, sp, #32
 8014472:	3d08      	subs	r5, #8
 8014474:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014478:	2b00      	cmp	r3, #0
 801447a:	f000 8081 	beq.w	8014580 <__kernel_rem_pio2f+0x2f8>
 801447e:	4628      	mov	r0, r5
 8014480:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014484:	00a5      	lsls	r5, r4, #2
 8014486:	f000 fcdb 	bl	8014e40 <scalbnf>
 801448a:	aa44      	add	r2, sp, #272	; 0x110
 801448c:	1d2b      	adds	r3, r5, #4
 801448e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8014590 <__kernel_rem_pio2f+0x308>
 8014492:	18d1      	adds	r1, r2, r3
 8014494:	4622      	mov	r2, r4
 8014496:	2a00      	cmp	r2, #0
 8014498:	f280 80ae 	bge.w	80145f8 <__kernel_rem_pio2f+0x370>
 801449c:	4622      	mov	r2, r4
 801449e:	2a00      	cmp	r2, #0
 80144a0:	f2c0 80cc 	blt.w	801463c <__kernel_rem_pio2f+0x3b4>
 80144a4:	a944      	add	r1, sp, #272	; 0x110
 80144a6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 80144aa:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8014588 <__kernel_rem_pio2f+0x300>
 80144ae:	eddf 7a39 	vldr	s15, [pc, #228]	; 8014594 <__kernel_rem_pio2f+0x30c>
 80144b2:	2000      	movs	r0, #0
 80144b4:	1aa1      	subs	r1, r4, r2
 80144b6:	e0b6      	b.n	8014626 <__kernel_rem_pio2f+0x39e>
 80144b8:	2702      	movs	r7, #2
 80144ba:	e78c      	b.n	80143d6 <__kernel_rem_pio2f+0x14e>
 80144bc:	6820      	ldr	r0, [r4, #0]
 80144be:	b94b      	cbnz	r3, 80144d4 <__kernel_rem_pio2f+0x24c>
 80144c0:	b118      	cbz	r0, 80144ca <__kernel_rem_pio2f+0x242>
 80144c2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80144c6:	6020      	str	r0, [r4, #0]
 80144c8:	2001      	movs	r0, #1
 80144ca:	f10e 0e01 	add.w	lr, lr, #1
 80144ce:	3404      	adds	r4, #4
 80144d0:	4603      	mov	r3, r0
 80144d2:	e785      	b.n	80143e0 <__kernel_rem_pio2f+0x158>
 80144d4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 80144d8:	6020      	str	r0, [r4, #0]
 80144da:	4618      	mov	r0, r3
 80144dc:	e7f5      	b.n	80144ca <__kernel_rem_pio2f+0x242>
 80144de:	1e74      	subs	r4, r6, #1
 80144e0:	a808      	add	r0, sp, #32
 80144e2:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80144e6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80144ea:	f10d 0c20 	add.w	ip, sp, #32
 80144ee:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 80144f2:	e77e      	b.n	80143f2 <__kernel_rem_pio2f+0x16a>
 80144f4:	1e74      	subs	r4, r6, #1
 80144f6:	a808      	add	r0, sp, #32
 80144f8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80144fc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8014500:	e7f3      	b.n	80144ea <__kernel_rem_pio2f+0x262>
 8014502:	ab08      	add	r3, sp, #32
 8014504:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8014508:	f10c 3cff 	add.w	ip, ip, #4294967295
 801450c:	4318      	orrs	r0, r3
 801450e:	e7ab      	b.n	8014468 <__kernel_rem_pio2f+0x1e0>
 8014510:	f10c 0c01 	add.w	ip, ip, #1
 8014514:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8014518:	2c00      	cmp	r4, #0
 801451a:	d0f9      	beq.n	8014510 <__kernel_rem_pio2f+0x288>
 801451c:	9b05      	ldr	r3, [sp, #20]
 801451e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8014522:	eb0d 0003 	add.w	r0, sp, r3
 8014526:	9b01      	ldr	r3, [sp, #4]
 8014528:	18f4      	adds	r4, r6, r3
 801452a:	ab1c      	add	r3, sp, #112	; 0x70
 801452c:	1c77      	adds	r7, r6, #1
 801452e:	384c      	subs	r0, #76	; 0x4c
 8014530:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014534:	4466      	add	r6, ip
 8014536:	42be      	cmp	r6, r7
 8014538:	f6ff af0b 	blt.w	8014352 <__kernel_rem_pio2f+0xca>
 801453c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8014540:	f8dd e008 	ldr.w	lr, [sp, #8]
 8014544:	ee07 3a90 	vmov	s15, r3
 8014548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801454c:	f04f 0c00 	mov.w	ip, #0
 8014550:	ece4 7a01 	vstmia	r4!, {s15}
 8014554:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8014594 <__kernel_rem_pio2f+0x30c>
 8014558:	46a1      	mov	r9, r4
 801455a:	458c      	cmp	ip, r1
 801455c:	dd07      	ble.n	801456e <__kernel_rem_pio2f+0x2e6>
 801455e:	ece0 7a01 	vstmia	r0!, {s15}
 8014562:	3701      	adds	r7, #1
 8014564:	e7e7      	b.n	8014536 <__kernel_rem_pio2f+0x2ae>
 8014566:	9804      	ldr	r0, [sp, #16]
 8014568:	f04f 0c01 	mov.w	ip, #1
 801456c:	e7d2      	b.n	8014514 <__kernel_rem_pio2f+0x28c>
 801456e:	ecfe 6a01 	vldmia	lr!, {s13}
 8014572:	ed39 7a01 	vldmdb	r9!, {s14}
 8014576:	f10c 0c01 	add.w	ip, ip, #1
 801457a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801457e:	e7ec      	b.n	801455a <__kernel_rem_pio2f+0x2d2>
 8014580:	3c01      	subs	r4, #1
 8014582:	e775      	b.n	8014470 <__kernel_rem_pio2f+0x1e8>
 8014584:	0801557c 	.word	0x0801557c
 8014588:	08015550 	.word	0x08015550
 801458c:	43800000 	.word	0x43800000
 8014590:	3b800000 	.word	0x3b800000
 8014594:	00000000 	.word	0x00000000
 8014598:	9b03      	ldr	r3, [sp, #12]
 801459a:	eeb0 0a48 	vmov.f32	s0, s16
 801459e:	1a98      	subs	r0, r3, r2
 80145a0:	f000 fc4e 	bl	8014e40 <scalbnf>
 80145a4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801458c <__kernel_rem_pio2f+0x304>
 80145a8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80145ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80145b0:	db19      	blt.n	80145e6 <__kernel_rem_pio2f+0x35e>
 80145b2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8014590 <__kernel_rem_pio2f+0x308>
 80145b6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80145ba:	aa08      	add	r2, sp, #32
 80145bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80145c0:	1c74      	adds	r4, r6, #1
 80145c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80145c6:	3508      	adds	r5, #8
 80145c8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80145cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80145d0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80145d4:	ee10 3a10 	vmov	r3, s0
 80145d8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80145dc:	ee17 3a90 	vmov	r3, s15
 80145e0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80145e4:	e74b      	b.n	801447e <__kernel_rem_pio2f+0x1f6>
 80145e6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80145ea:	aa08      	add	r2, sp, #32
 80145ec:	ee10 3a10 	vmov	r3, s0
 80145f0:	4634      	mov	r4, r6
 80145f2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 80145f6:	e742      	b.n	801447e <__kernel_rem_pio2f+0x1f6>
 80145f8:	a808      	add	r0, sp, #32
 80145fa:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80145fe:	9001      	str	r0, [sp, #4]
 8014600:	ee07 0a90 	vmov	s15, r0
 8014604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014608:	3a01      	subs	r2, #1
 801460a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801460e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014612:	ed61 7a01 	vstmdb	r1!, {s15}
 8014616:	e73e      	b.n	8014496 <__kernel_rem_pio2f+0x20e>
 8014618:	ecfc 6a01 	vldmia	ip!, {s13}
 801461c:	ecb6 7a01 	vldmia	r6!, {s14}
 8014620:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014624:	3001      	adds	r0, #1
 8014626:	4550      	cmp	r0, sl
 8014628:	dc01      	bgt.n	801462e <__kernel_rem_pio2f+0x3a6>
 801462a:	4288      	cmp	r0, r1
 801462c:	ddf4      	ble.n	8014618 <__kernel_rem_pio2f+0x390>
 801462e:	a858      	add	r0, sp, #352	; 0x160
 8014630:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8014634:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8014638:	3a01      	subs	r2, #1
 801463a:	e730      	b.n	801449e <__kernel_rem_pio2f+0x216>
 801463c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 801463e:	2a02      	cmp	r2, #2
 8014640:	dc09      	bgt.n	8014656 <__kernel_rem_pio2f+0x3ce>
 8014642:	2a00      	cmp	r2, #0
 8014644:	dc2a      	bgt.n	801469c <__kernel_rem_pio2f+0x414>
 8014646:	d043      	beq.n	80146d0 <__kernel_rem_pio2f+0x448>
 8014648:	f009 0007 	and.w	r0, r9, #7
 801464c:	b059      	add	sp, #356	; 0x164
 801464e:	ecbd 8b04 	vpop	{d8-d9}
 8014652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014656:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8014658:	2b03      	cmp	r3, #3
 801465a:	d1f5      	bne.n	8014648 <__kernel_rem_pio2f+0x3c0>
 801465c:	ab30      	add	r3, sp, #192	; 0xc0
 801465e:	442b      	add	r3, r5
 8014660:	461a      	mov	r2, r3
 8014662:	4619      	mov	r1, r3
 8014664:	4620      	mov	r0, r4
 8014666:	2800      	cmp	r0, #0
 8014668:	f1a1 0104 	sub.w	r1, r1, #4
 801466c:	dc51      	bgt.n	8014712 <__kernel_rem_pio2f+0x48a>
 801466e:	4621      	mov	r1, r4
 8014670:	2901      	cmp	r1, #1
 8014672:	f1a2 0204 	sub.w	r2, r2, #4
 8014676:	dc5c      	bgt.n	8014732 <__kernel_rem_pio2f+0x4aa>
 8014678:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8014594 <__kernel_rem_pio2f+0x30c>
 801467c:	3304      	adds	r3, #4
 801467e:	2c01      	cmp	r4, #1
 8014680:	dc67      	bgt.n	8014752 <__kernel_rem_pio2f+0x4ca>
 8014682:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8014686:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801468a:	2f00      	cmp	r7, #0
 801468c:	d167      	bne.n	801475e <__kernel_rem_pio2f+0x4d6>
 801468e:	edc8 6a00 	vstr	s13, [r8]
 8014692:	ed88 7a01 	vstr	s14, [r8, #4]
 8014696:	edc8 7a02 	vstr	s15, [r8, #8]
 801469a:	e7d5      	b.n	8014648 <__kernel_rem_pio2f+0x3c0>
 801469c:	aa30      	add	r2, sp, #192	; 0xc0
 801469e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8014594 <__kernel_rem_pio2f+0x30c>
 80146a2:	4413      	add	r3, r2
 80146a4:	4622      	mov	r2, r4
 80146a6:	2a00      	cmp	r2, #0
 80146a8:	da24      	bge.n	80146f4 <__kernel_rem_pio2f+0x46c>
 80146aa:	b34f      	cbz	r7, 8014700 <__kernel_rem_pio2f+0x478>
 80146ac:	eef1 7a47 	vneg.f32	s15, s14
 80146b0:	edc8 7a00 	vstr	s15, [r8]
 80146b4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 80146b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80146bc:	aa31      	add	r2, sp, #196	; 0xc4
 80146be:	2301      	movs	r3, #1
 80146c0:	429c      	cmp	r4, r3
 80146c2:	da20      	bge.n	8014706 <__kernel_rem_pio2f+0x47e>
 80146c4:	b10f      	cbz	r7, 80146ca <__kernel_rem_pio2f+0x442>
 80146c6:	eef1 7a67 	vneg.f32	s15, s15
 80146ca:	edc8 7a01 	vstr	s15, [r8, #4]
 80146ce:	e7bb      	b.n	8014648 <__kernel_rem_pio2f+0x3c0>
 80146d0:	aa30      	add	r2, sp, #192	; 0xc0
 80146d2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8014594 <__kernel_rem_pio2f+0x30c>
 80146d6:	4413      	add	r3, r2
 80146d8:	2c00      	cmp	r4, #0
 80146da:	da05      	bge.n	80146e8 <__kernel_rem_pio2f+0x460>
 80146dc:	b10f      	cbz	r7, 80146e2 <__kernel_rem_pio2f+0x45a>
 80146de:	eef1 7a67 	vneg.f32	s15, s15
 80146e2:	edc8 7a00 	vstr	s15, [r8]
 80146e6:	e7af      	b.n	8014648 <__kernel_rem_pio2f+0x3c0>
 80146e8:	ed33 7a01 	vldmdb	r3!, {s14}
 80146ec:	3c01      	subs	r4, #1
 80146ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80146f2:	e7f1      	b.n	80146d8 <__kernel_rem_pio2f+0x450>
 80146f4:	ed73 7a01 	vldmdb	r3!, {s15}
 80146f8:	3a01      	subs	r2, #1
 80146fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80146fe:	e7d2      	b.n	80146a6 <__kernel_rem_pio2f+0x41e>
 8014700:	eef0 7a47 	vmov.f32	s15, s14
 8014704:	e7d4      	b.n	80146b0 <__kernel_rem_pio2f+0x428>
 8014706:	ecb2 7a01 	vldmia	r2!, {s14}
 801470a:	3301      	adds	r3, #1
 801470c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014710:	e7d6      	b.n	80146c0 <__kernel_rem_pio2f+0x438>
 8014712:	edd1 7a00 	vldr	s15, [r1]
 8014716:	edd1 6a01 	vldr	s13, [r1, #4]
 801471a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801471e:	3801      	subs	r0, #1
 8014720:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014724:	ed81 7a00 	vstr	s14, [r1]
 8014728:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801472c:	edc1 7a01 	vstr	s15, [r1, #4]
 8014730:	e799      	b.n	8014666 <__kernel_rem_pio2f+0x3de>
 8014732:	edd2 7a00 	vldr	s15, [r2]
 8014736:	edd2 6a01 	vldr	s13, [r2, #4]
 801473a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801473e:	3901      	subs	r1, #1
 8014740:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014744:	ed82 7a00 	vstr	s14, [r2]
 8014748:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801474c:	edc2 7a01 	vstr	s15, [r2, #4]
 8014750:	e78e      	b.n	8014670 <__kernel_rem_pio2f+0x3e8>
 8014752:	ed33 7a01 	vldmdb	r3!, {s14}
 8014756:	3c01      	subs	r4, #1
 8014758:	ee77 7a87 	vadd.f32	s15, s15, s14
 801475c:	e78f      	b.n	801467e <__kernel_rem_pio2f+0x3f6>
 801475e:	eef1 6a66 	vneg.f32	s13, s13
 8014762:	eeb1 7a47 	vneg.f32	s14, s14
 8014766:	edc8 6a00 	vstr	s13, [r8]
 801476a:	ed88 7a01 	vstr	s14, [r8, #4]
 801476e:	eef1 7a67 	vneg.f32	s15, s15
 8014772:	e790      	b.n	8014696 <__kernel_rem_pio2f+0x40e>

08014774 <__kernel_sinf>:
 8014774:	ee10 3a10 	vmov	r3, s0
 8014778:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801477c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8014780:	da04      	bge.n	801478c <__kernel_sinf+0x18>
 8014782:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014786:	ee17 3a90 	vmov	r3, s15
 801478a:	b35b      	cbz	r3, 80147e4 <__kernel_sinf+0x70>
 801478c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014790:	eddf 7a15 	vldr	s15, [pc, #84]	; 80147e8 <__kernel_sinf+0x74>
 8014794:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80147ec <__kernel_sinf+0x78>
 8014798:	eea7 6a27 	vfma.f32	s12, s14, s15
 801479c:	eddf 7a14 	vldr	s15, [pc, #80]	; 80147f0 <__kernel_sinf+0x7c>
 80147a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 80147a4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80147f4 <__kernel_sinf+0x80>
 80147a8:	eea7 6a87 	vfma.f32	s12, s15, s14
 80147ac:	eddf 7a12 	vldr	s15, [pc, #72]	; 80147f8 <__kernel_sinf+0x84>
 80147b0:	ee60 6a07 	vmul.f32	s13, s0, s14
 80147b4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80147b8:	b930      	cbnz	r0, 80147c8 <__kernel_sinf+0x54>
 80147ba:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80147fc <__kernel_sinf+0x88>
 80147be:	eea7 6a27 	vfma.f32	s12, s14, s15
 80147c2:	eea6 0a26 	vfma.f32	s0, s12, s13
 80147c6:	4770      	bx	lr
 80147c8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80147cc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80147d0:	eee0 7a86 	vfma.f32	s15, s1, s12
 80147d4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80147d8:	eddf 7a09 	vldr	s15, [pc, #36]	; 8014800 <__kernel_sinf+0x8c>
 80147dc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80147e0:	ee30 0a60 	vsub.f32	s0, s0, s1
 80147e4:	4770      	bx	lr
 80147e6:	bf00      	nop
 80147e8:	2f2ec9d3 	.word	0x2f2ec9d3
 80147ec:	b2d72f34 	.word	0xb2d72f34
 80147f0:	3638ef1b 	.word	0x3638ef1b
 80147f4:	b9500d01 	.word	0xb9500d01
 80147f8:	3c088889 	.word	0x3c088889
 80147fc:	be2aaaab 	.word	0xbe2aaaab
 8014800:	3e2aaaab 	.word	0x3e2aaaab

08014804 <__kernel_tanf>:
 8014804:	b508      	push	{r3, lr}
 8014806:	ee10 3a10 	vmov	r3, s0
 801480a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801480e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8014812:	eef0 7a40 	vmov.f32	s15, s0
 8014816:	da17      	bge.n	8014848 <__kernel_tanf+0x44>
 8014818:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801481c:	ee17 1a10 	vmov	r1, s14
 8014820:	bb41      	cbnz	r1, 8014874 <__kernel_tanf+0x70>
 8014822:	1c43      	adds	r3, r0, #1
 8014824:	4313      	orrs	r3, r2
 8014826:	d108      	bne.n	801483a <__kernel_tanf+0x36>
 8014828:	f000 faba 	bl	8014da0 <fabsf>
 801482c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014830:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014834:	eeb0 0a67 	vmov.f32	s0, s15
 8014838:	bd08      	pop	{r3, pc}
 801483a:	2801      	cmp	r0, #1
 801483c:	d0fa      	beq.n	8014834 <__kernel_tanf+0x30>
 801483e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8014842:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014846:	e7f5      	b.n	8014834 <__kernel_tanf+0x30>
 8014848:	494c      	ldr	r1, [pc, #304]	; (801497c <__kernel_tanf+0x178>)
 801484a:	428a      	cmp	r2, r1
 801484c:	db12      	blt.n	8014874 <__kernel_tanf+0x70>
 801484e:	2b00      	cmp	r3, #0
 8014850:	bfb8      	it	lt
 8014852:	eef1 7a40 	vneglt.f32	s15, s0
 8014856:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8014980 <__kernel_tanf+0x17c>
 801485a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801485e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8014984 <__kernel_tanf+0x180>
 8014862:	bfb8      	it	lt
 8014864:	eef1 0a60 	vneglt.f32	s1, s1
 8014868:	ee70 0a60 	vsub.f32	s1, s0, s1
 801486c:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8014870:	eddf 0a45 	vldr	s1, [pc, #276]	; 8014988 <__kernel_tanf+0x184>
 8014874:	eddf 5a45 	vldr	s11, [pc, #276]	; 801498c <__kernel_tanf+0x188>
 8014878:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8014990 <__kernel_tanf+0x18c>
 801487c:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8014994 <__kernel_tanf+0x190>
 8014880:	493e      	ldr	r1, [pc, #248]	; (801497c <__kernel_tanf+0x178>)
 8014882:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8014886:	428a      	cmp	r2, r1
 8014888:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801488c:	eea7 6a25 	vfma.f32	s12, s14, s11
 8014890:	eddf 5a41 	vldr	s11, [pc, #260]	; 8014998 <__kernel_tanf+0x194>
 8014894:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014898:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801499c <__kernel_tanf+0x198>
 801489c:	eea5 6a87 	vfma.f32	s12, s11, s14
 80148a0:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80149a0 <__kernel_tanf+0x19c>
 80148a4:	eee6 5a07 	vfma.f32	s11, s12, s14
 80148a8:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80149a4 <__kernel_tanf+0x1a0>
 80148ac:	eea5 6a87 	vfma.f32	s12, s11, s14
 80148b0:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80149a8 <__kernel_tanf+0x1a4>
 80148b4:	eee7 5a05 	vfma.f32	s11, s14, s10
 80148b8:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80149ac <__kernel_tanf+0x1a8>
 80148bc:	eea5 5a87 	vfma.f32	s10, s11, s14
 80148c0:	eddf 5a3b 	vldr	s11, [pc, #236]	; 80149b0 <__kernel_tanf+0x1ac>
 80148c4:	eee5 5a07 	vfma.f32	s11, s10, s14
 80148c8:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80149b4 <__kernel_tanf+0x1b0>
 80148cc:	eea5 5a87 	vfma.f32	s10, s11, s14
 80148d0:	eddf 5a39 	vldr	s11, [pc, #228]	; 80149b8 <__kernel_tanf+0x1b4>
 80148d4:	eee5 5a07 	vfma.f32	s11, s10, s14
 80148d8:	eeb0 7a46 	vmov.f32	s14, s12
 80148dc:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80148e0:	ee27 5aa6 	vmul.f32	s10, s15, s13
 80148e4:	eeb0 6a60 	vmov.f32	s12, s1
 80148e8:	eea7 6a05 	vfma.f32	s12, s14, s10
 80148ec:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80149bc <__kernel_tanf+0x1b8>
 80148f0:	eee6 0a26 	vfma.f32	s1, s12, s13
 80148f4:	eee5 0a07 	vfma.f32	s1, s10, s14
 80148f8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80148fc:	db1d      	blt.n	801493a <__kernel_tanf+0x136>
 80148fe:	ee06 0a90 	vmov	s13, r0
 8014902:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8014906:	ee27 6a07 	vmul.f32	s12, s14, s14
 801490a:	ee37 7a00 	vadd.f32	s14, s14, s0
 801490e:	179b      	asrs	r3, r3, #30
 8014910:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8014914:	f003 0302 	and.w	r3, r3, #2
 8014918:	f1c3 0301 	rsb	r3, r3, #1
 801491c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014920:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8014924:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8014928:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801492c:	ee07 3a90 	vmov	s15, r3
 8014930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014934:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014938:	e77c      	b.n	8014834 <__kernel_tanf+0x30>
 801493a:	2801      	cmp	r0, #1
 801493c:	d01b      	beq.n	8014976 <__kernel_tanf+0x172>
 801493e:	4b20      	ldr	r3, [pc, #128]	; (80149c0 <__kernel_tanf+0x1bc>)
 8014940:	ee17 2a10 	vmov	r2, s14
 8014944:	401a      	ands	r2, r3
 8014946:	ee06 2a10 	vmov	s12, r2
 801494a:	ee76 7a67 	vsub.f32	s15, s12, s15
 801494e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8014952:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8014956:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801495a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801495e:	ee16 2a90 	vmov	r2, s13
 8014962:	4013      	ands	r3, r2
 8014964:	ee07 3a90 	vmov	s15, r3
 8014968:	eea6 7a27 	vfma.f32	s14, s12, s15
 801496c:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8014970:	eee7 7a26 	vfma.f32	s15, s14, s13
 8014974:	e75e      	b.n	8014834 <__kernel_tanf+0x30>
 8014976:	eef0 7a47 	vmov.f32	s15, s14
 801497a:	e75b      	b.n	8014834 <__kernel_tanf+0x30>
 801497c:	3f2ca140 	.word	0x3f2ca140
 8014980:	3f490fda 	.word	0x3f490fda
 8014984:	33222168 	.word	0x33222168
 8014988:	00000000 	.word	0x00000000
 801498c:	b79bae5f 	.word	0xb79bae5f
 8014990:	38a3f445 	.word	0x38a3f445
 8014994:	37d95384 	.word	0x37d95384
 8014998:	3a1a26c8 	.word	0x3a1a26c8
 801499c:	3b6b6916 	.word	0x3b6b6916
 80149a0:	3cb327a4 	.word	0x3cb327a4
 80149a4:	3e088889 	.word	0x3e088889
 80149a8:	3895c07a 	.word	0x3895c07a
 80149ac:	398137b9 	.word	0x398137b9
 80149b0:	3abede48 	.word	0x3abede48
 80149b4:	3c11371f 	.word	0x3c11371f
 80149b8:	3d5d0dd1 	.word	0x3d5d0dd1
 80149bc:	3eaaaaab 	.word	0x3eaaaaab
 80149c0:	fffff000 	.word	0xfffff000

080149c4 <with_errno>:
 80149c4:	b570      	push	{r4, r5, r6, lr}
 80149c6:	4604      	mov	r4, r0
 80149c8:	460d      	mov	r5, r1
 80149ca:	4616      	mov	r6, r2
 80149cc:	f7fe fa3e 	bl	8012e4c <__errno>
 80149d0:	4629      	mov	r1, r5
 80149d2:	6006      	str	r6, [r0, #0]
 80149d4:	4620      	mov	r0, r4
 80149d6:	bd70      	pop	{r4, r5, r6, pc}

080149d8 <xflow>:
 80149d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80149da:	4614      	mov	r4, r2
 80149dc:	461d      	mov	r5, r3
 80149de:	b108      	cbz	r0, 80149e4 <xflow+0xc>
 80149e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80149e4:	e9cd 2300 	strd	r2, r3, [sp]
 80149e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80149ec:	4620      	mov	r0, r4
 80149ee:	4629      	mov	r1, r5
 80149f0:	f7eb fda6 	bl	8000540 <__aeabi_dmul>
 80149f4:	2222      	movs	r2, #34	; 0x22
 80149f6:	b003      	add	sp, #12
 80149f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80149fc:	f7ff bfe2 	b.w	80149c4 <with_errno>

08014a00 <__math_uflow>:
 8014a00:	b508      	push	{r3, lr}
 8014a02:	2200      	movs	r2, #0
 8014a04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014a08:	f7ff ffe6 	bl	80149d8 <xflow>
 8014a0c:	ec41 0b10 	vmov	d0, r0, r1
 8014a10:	bd08      	pop	{r3, pc}

08014a12 <__math_oflow>:
 8014a12:	b508      	push	{r3, lr}
 8014a14:	2200      	movs	r2, #0
 8014a16:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8014a1a:	f7ff ffdd 	bl	80149d8 <xflow>
 8014a1e:	ec41 0b10 	vmov	d0, r0, r1
 8014a22:	bd08      	pop	{r3, pc}
 8014a24:	0000      	movs	r0, r0
	...

08014a28 <atan>:
 8014a28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a2c:	ec55 4b10 	vmov	r4, r5, d0
 8014a30:	4bc3      	ldr	r3, [pc, #780]	; (8014d40 <atan+0x318>)
 8014a32:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014a36:	429e      	cmp	r6, r3
 8014a38:	46ab      	mov	fp, r5
 8014a3a:	dd18      	ble.n	8014a6e <atan+0x46>
 8014a3c:	4bc1      	ldr	r3, [pc, #772]	; (8014d44 <atan+0x31c>)
 8014a3e:	429e      	cmp	r6, r3
 8014a40:	dc01      	bgt.n	8014a46 <atan+0x1e>
 8014a42:	d109      	bne.n	8014a58 <atan+0x30>
 8014a44:	b144      	cbz	r4, 8014a58 <atan+0x30>
 8014a46:	4622      	mov	r2, r4
 8014a48:	462b      	mov	r3, r5
 8014a4a:	4620      	mov	r0, r4
 8014a4c:	4629      	mov	r1, r5
 8014a4e:	f7eb fbc1 	bl	80001d4 <__adddf3>
 8014a52:	4604      	mov	r4, r0
 8014a54:	460d      	mov	r5, r1
 8014a56:	e006      	b.n	8014a66 <atan+0x3e>
 8014a58:	f1bb 0f00 	cmp.w	fp, #0
 8014a5c:	f300 8131 	bgt.w	8014cc2 <atan+0x29a>
 8014a60:	a59b      	add	r5, pc, #620	; (adr r5, 8014cd0 <atan+0x2a8>)
 8014a62:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014a66:	ec45 4b10 	vmov	d0, r4, r5
 8014a6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a6e:	4bb6      	ldr	r3, [pc, #728]	; (8014d48 <atan+0x320>)
 8014a70:	429e      	cmp	r6, r3
 8014a72:	dc14      	bgt.n	8014a9e <atan+0x76>
 8014a74:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8014a78:	429e      	cmp	r6, r3
 8014a7a:	dc0d      	bgt.n	8014a98 <atan+0x70>
 8014a7c:	a396      	add	r3, pc, #600	; (adr r3, 8014cd8 <atan+0x2b0>)
 8014a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a82:	ee10 0a10 	vmov	r0, s0
 8014a86:	4629      	mov	r1, r5
 8014a88:	f7eb fba4 	bl	80001d4 <__adddf3>
 8014a8c:	4baf      	ldr	r3, [pc, #700]	; (8014d4c <atan+0x324>)
 8014a8e:	2200      	movs	r2, #0
 8014a90:	f7eb ffe6 	bl	8000a60 <__aeabi_dcmpgt>
 8014a94:	2800      	cmp	r0, #0
 8014a96:	d1e6      	bne.n	8014a66 <atan+0x3e>
 8014a98:	f04f 3aff 	mov.w	sl, #4294967295
 8014a9c:	e02b      	b.n	8014af6 <atan+0xce>
 8014a9e:	f000 f963 	bl	8014d68 <fabs>
 8014aa2:	4bab      	ldr	r3, [pc, #684]	; (8014d50 <atan+0x328>)
 8014aa4:	429e      	cmp	r6, r3
 8014aa6:	ec55 4b10 	vmov	r4, r5, d0
 8014aaa:	f300 80bf 	bgt.w	8014c2c <atan+0x204>
 8014aae:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8014ab2:	429e      	cmp	r6, r3
 8014ab4:	f300 80a0 	bgt.w	8014bf8 <atan+0x1d0>
 8014ab8:	ee10 2a10 	vmov	r2, s0
 8014abc:	ee10 0a10 	vmov	r0, s0
 8014ac0:	462b      	mov	r3, r5
 8014ac2:	4629      	mov	r1, r5
 8014ac4:	f7eb fb86 	bl	80001d4 <__adddf3>
 8014ac8:	4ba0      	ldr	r3, [pc, #640]	; (8014d4c <atan+0x324>)
 8014aca:	2200      	movs	r2, #0
 8014acc:	f7eb fb80 	bl	80001d0 <__aeabi_dsub>
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	4606      	mov	r6, r0
 8014ad4:	460f      	mov	r7, r1
 8014ad6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014ada:	4620      	mov	r0, r4
 8014adc:	4629      	mov	r1, r5
 8014ade:	f7eb fb79 	bl	80001d4 <__adddf3>
 8014ae2:	4602      	mov	r2, r0
 8014ae4:	460b      	mov	r3, r1
 8014ae6:	4630      	mov	r0, r6
 8014ae8:	4639      	mov	r1, r7
 8014aea:	f7eb fe53 	bl	8000794 <__aeabi_ddiv>
 8014aee:	f04f 0a00 	mov.w	sl, #0
 8014af2:	4604      	mov	r4, r0
 8014af4:	460d      	mov	r5, r1
 8014af6:	4622      	mov	r2, r4
 8014af8:	462b      	mov	r3, r5
 8014afa:	4620      	mov	r0, r4
 8014afc:	4629      	mov	r1, r5
 8014afe:	f7eb fd1f 	bl	8000540 <__aeabi_dmul>
 8014b02:	4602      	mov	r2, r0
 8014b04:	460b      	mov	r3, r1
 8014b06:	4680      	mov	r8, r0
 8014b08:	4689      	mov	r9, r1
 8014b0a:	f7eb fd19 	bl	8000540 <__aeabi_dmul>
 8014b0e:	a374      	add	r3, pc, #464	; (adr r3, 8014ce0 <atan+0x2b8>)
 8014b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b14:	4606      	mov	r6, r0
 8014b16:	460f      	mov	r7, r1
 8014b18:	f7eb fd12 	bl	8000540 <__aeabi_dmul>
 8014b1c:	a372      	add	r3, pc, #456	; (adr r3, 8014ce8 <atan+0x2c0>)
 8014b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b22:	f7eb fb57 	bl	80001d4 <__adddf3>
 8014b26:	4632      	mov	r2, r6
 8014b28:	463b      	mov	r3, r7
 8014b2a:	f7eb fd09 	bl	8000540 <__aeabi_dmul>
 8014b2e:	a370      	add	r3, pc, #448	; (adr r3, 8014cf0 <atan+0x2c8>)
 8014b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b34:	f7eb fb4e 	bl	80001d4 <__adddf3>
 8014b38:	4632      	mov	r2, r6
 8014b3a:	463b      	mov	r3, r7
 8014b3c:	f7eb fd00 	bl	8000540 <__aeabi_dmul>
 8014b40:	a36d      	add	r3, pc, #436	; (adr r3, 8014cf8 <atan+0x2d0>)
 8014b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b46:	f7eb fb45 	bl	80001d4 <__adddf3>
 8014b4a:	4632      	mov	r2, r6
 8014b4c:	463b      	mov	r3, r7
 8014b4e:	f7eb fcf7 	bl	8000540 <__aeabi_dmul>
 8014b52:	a36b      	add	r3, pc, #428	; (adr r3, 8014d00 <atan+0x2d8>)
 8014b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b58:	f7eb fb3c 	bl	80001d4 <__adddf3>
 8014b5c:	4632      	mov	r2, r6
 8014b5e:	463b      	mov	r3, r7
 8014b60:	f7eb fcee 	bl	8000540 <__aeabi_dmul>
 8014b64:	a368      	add	r3, pc, #416	; (adr r3, 8014d08 <atan+0x2e0>)
 8014b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b6a:	f7eb fb33 	bl	80001d4 <__adddf3>
 8014b6e:	4642      	mov	r2, r8
 8014b70:	464b      	mov	r3, r9
 8014b72:	f7eb fce5 	bl	8000540 <__aeabi_dmul>
 8014b76:	a366      	add	r3, pc, #408	; (adr r3, 8014d10 <atan+0x2e8>)
 8014b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b7c:	4680      	mov	r8, r0
 8014b7e:	4689      	mov	r9, r1
 8014b80:	4630      	mov	r0, r6
 8014b82:	4639      	mov	r1, r7
 8014b84:	f7eb fcdc 	bl	8000540 <__aeabi_dmul>
 8014b88:	a363      	add	r3, pc, #396	; (adr r3, 8014d18 <atan+0x2f0>)
 8014b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b8e:	f7eb fb1f 	bl	80001d0 <__aeabi_dsub>
 8014b92:	4632      	mov	r2, r6
 8014b94:	463b      	mov	r3, r7
 8014b96:	f7eb fcd3 	bl	8000540 <__aeabi_dmul>
 8014b9a:	a361      	add	r3, pc, #388	; (adr r3, 8014d20 <atan+0x2f8>)
 8014b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ba0:	f7eb fb16 	bl	80001d0 <__aeabi_dsub>
 8014ba4:	4632      	mov	r2, r6
 8014ba6:	463b      	mov	r3, r7
 8014ba8:	f7eb fcca 	bl	8000540 <__aeabi_dmul>
 8014bac:	a35e      	add	r3, pc, #376	; (adr r3, 8014d28 <atan+0x300>)
 8014bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bb2:	f7eb fb0d 	bl	80001d0 <__aeabi_dsub>
 8014bb6:	4632      	mov	r2, r6
 8014bb8:	463b      	mov	r3, r7
 8014bba:	f7eb fcc1 	bl	8000540 <__aeabi_dmul>
 8014bbe:	a35c      	add	r3, pc, #368	; (adr r3, 8014d30 <atan+0x308>)
 8014bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014bc4:	f7eb fb04 	bl	80001d0 <__aeabi_dsub>
 8014bc8:	4632      	mov	r2, r6
 8014bca:	463b      	mov	r3, r7
 8014bcc:	f7eb fcb8 	bl	8000540 <__aeabi_dmul>
 8014bd0:	4602      	mov	r2, r0
 8014bd2:	460b      	mov	r3, r1
 8014bd4:	4640      	mov	r0, r8
 8014bd6:	4649      	mov	r1, r9
 8014bd8:	f7eb fafc 	bl	80001d4 <__adddf3>
 8014bdc:	4622      	mov	r2, r4
 8014bde:	462b      	mov	r3, r5
 8014be0:	f7eb fcae 	bl	8000540 <__aeabi_dmul>
 8014be4:	f1ba 3fff 	cmp.w	sl, #4294967295
 8014be8:	4602      	mov	r2, r0
 8014bea:	460b      	mov	r3, r1
 8014bec:	d14b      	bne.n	8014c86 <atan+0x25e>
 8014bee:	4620      	mov	r0, r4
 8014bf0:	4629      	mov	r1, r5
 8014bf2:	f7eb faed 	bl	80001d0 <__aeabi_dsub>
 8014bf6:	e72c      	b.n	8014a52 <atan+0x2a>
 8014bf8:	ee10 0a10 	vmov	r0, s0
 8014bfc:	4b53      	ldr	r3, [pc, #332]	; (8014d4c <atan+0x324>)
 8014bfe:	2200      	movs	r2, #0
 8014c00:	4629      	mov	r1, r5
 8014c02:	f7eb fae5 	bl	80001d0 <__aeabi_dsub>
 8014c06:	4b51      	ldr	r3, [pc, #324]	; (8014d4c <atan+0x324>)
 8014c08:	4606      	mov	r6, r0
 8014c0a:	460f      	mov	r7, r1
 8014c0c:	2200      	movs	r2, #0
 8014c0e:	4620      	mov	r0, r4
 8014c10:	4629      	mov	r1, r5
 8014c12:	f7eb fadf 	bl	80001d4 <__adddf3>
 8014c16:	4602      	mov	r2, r0
 8014c18:	460b      	mov	r3, r1
 8014c1a:	4630      	mov	r0, r6
 8014c1c:	4639      	mov	r1, r7
 8014c1e:	f7eb fdb9 	bl	8000794 <__aeabi_ddiv>
 8014c22:	f04f 0a01 	mov.w	sl, #1
 8014c26:	4604      	mov	r4, r0
 8014c28:	460d      	mov	r5, r1
 8014c2a:	e764      	b.n	8014af6 <atan+0xce>
 8014c2c:	4b49      	ldr	r3, [pc, #292]	; (8014d54 <atan+0x32c>)
 8014c2e:	429e      	cmp	r6, r3
 8014c30:	da1d      	bge.n	8014c6e <atan+0x246>
 8014c32:	ee10 0a10 	vmov	r0, s0
 8014c36:	4b48      	ldr	r3, [pc, #288]	; (8014d58 <atan+0x330>)
 8014c38:	2200      	movs	r2, #0
 8014c3a:	4629      	mov	r1, r5
 8014c3c:	f7eb fac8 	bl	80001d0 <__aeabi_dsub>
 8014c40:	4b45      	ldr	r3, [pc, #276]	; (8014d58 <atan+0x330>)
 8014c42:	4606      	mov	r6, r0
 8014c44:	460f      	mov	r7, r1
 8014c46:	2200      	movs	r2, #0
 8014c48:	4620      	mov	r0, r4
 8014c4a:	4629      	mov	r1, r5
 8014c4c:	f7eb fc78 	bl	8000540 <__aeabi_dmul>
 8014c50:	4b3e      	ldr	r3, [pc, #248]	; (8014d4c <atan+0x324>)
 8014c52:	2200      	movs	r2, #0
 8014c54:	f7eb fabe 	bl	80001d4 <__adddf3>
 8014c58:	4602      	mov	r2, r0
 8014c5a:	460b      	mov	r3, r1
 8014c5c:	4630      	mov	r0, r6
 8014c5e:	4639      	mov	r1, r7
 8014c60:	f7eb fd98 	bl	8000794 <__aeabi_ddiv>
 8014c64:	f04f 0a02 	mov.w	sl, #2
 8014c68:	4604      	mov	r4, r0
 8014c6a:	460d      	mov	r5, r1
 8014c6c:	e743      	b.n	8014af6 <atan+0xce>
 8014c6e:	462b      	mov	r3, r5
 8014c70:	ee10 2a10 	vmov	r2, s0
 8014c74:	4939      	ldr	r1, [pc, #228]	; (8014d5c <atan+0x334>)
 8014c76:	2000      	movs	r0, #0
 8014c78:	f7eb fd8c 	bl	8000794 <__aeabi_ddiv>
 8014c7c:	f04f 0a03 	mov.w	sl, #3
 8014c80:	4604      	mov	r4, r0
 8014c82:	460d      	mov	r5, r1
 8014c84:	e737      	b.n	8014af6 <atan+0xce>
 8014c86:	4b36      	ldr	r3, [pc, #216]	; (8014d60 <atan+0x338>)
 8014c88:	4e36      	ldr	r6, [pc, #216]	; (8014d64 <atan+0x33c>)
 8014c8a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8014c8e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8014c92:	e9da 2300 	ldrd	r2, r3, [sl]
 8014c96:	f7eb fa9b 	bl	80001d0 <__aeabi_dsub>
 8014c9a:	4622      	mov	r2, r4
 8014c9c:	462b      	mov	r3, r5
 8014c9e:	f7eb fa97 	bl	80001d0 <__aeabi_dsub>
 8014ca2:	4602      	mov	r2, r0
 8014ca4:	460b      	mov	r3, r1
 8014ca6:	e9d6 0100 	ldrd	r0, r1, [r6]
 8014caa:	f7eb fa91 	bl	80001d0 <__aeabi_dsub>
 8014cae:	f1bb 0f00 	cmp.w	fp, #0
 8014cb2:	4604      	mov	r4, r0
 8014cb4:	460d      	mov	r5, r1
 8014cb6:	f6bf aed6 	bge.w	8014a66 <atan+0x3e>
 8014cba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014cbe:	461d      	mov	r5, r3
 8014cc0:	e6d1      	b.n	8014a66 <atan+0x3e>
 8014cc2:	a51d      	add	r5, pc, #116	; (adr r5, 8014d38 <atan+0x310>)
 8014cc4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014cc8:	e6cd      	b.n	8014a66 <atan+0x3e>
 8014cca:	bf00      	nop
 8014ccc:	f3af 8000 	nop.w
 8014cd0:	54442d18 	.word	0x54442d18
 8014cd4:	bff921fb 	.word	0xbff921fb
 8014cd8:	8800759c 	.word	0x8800759c
 8014cdc:	7e37e43c 	.word	0x7e37e43c
 8014ce0:	e322da11 	.word	0xe322da11
 8014ce4:	3f90ad3a 	.word	0x3f90ad3a
 8014ce8:	24760deb 	.word	0x24760deb
 8014cec:	3fa97b4b 	.word	0x3fa97b4b
 8014cf0:	a0d03d51 	.word	0xa0d03d51
 8014cf4:	3fb10d66 	.word	0x3fb10d66
 8014cf8:	c54c206e 	.word	0xc54c206e
 8014cfc:	3fb745cd 	.word	0x3fb745cd
 8014d00:	920083ff 	.word	0x920083ff
 8014d04:	3fc24924 	.word	0x3fc24924
 8014d08:	5555550d 	.word	0x5555550d
 8014d0c:	3fd55555 	.word	0x3fd55555
 8014d10:	2c6a6c2f 	.word	0x2c6a6c2f
 8014d14:	bfa2b444 	.word	0xbfa2b444
 8014d18:	52defd9a 	.word	0x52defd9a
 8014d1c:	3fadde2d 	.word	0x3fadde2d
 8014d20:	af749a6d 	.word	0xaf749a6d
 8014d24:	3fb3b0f2 	.word	0x3fb3b0f2
 8014d28:	fe231671 	.word	0xfe231671
 8014d2c:	3fbc71c6 	.word	0x3fbc71c6
 8014d30:	9998ebc4 	.word	0x9998ebc4
 8014d34:	3fc99999 	.word	0x3fc99999
 8014d38:	54442d18 	.word	0x54442d18
 8014d3c:	3ff921fb 	.word	0x3ff921fb
 8014d40:	440fffff 	.word	0x440fffff
 8014d44:	7ff00000 	.word	0x7ff00000
 8014d48:	3fdbffff 	.word	0x3fdbffff
 8014d4c:	3ff00000 	.word	0x3ff00000
 8014d50:	3ff2ffff 	.word	0x3ff2ffff
 8014d54:	40038000 	.word	0x40038000
 8014d58:	3ff80000 	.word	0x3ff80000
 8014d5c:	bff00000 	.word	0xbff00000
 8014d60:	080155a8 	.word	0x080155a8
 8014d64:	08015588 	.word	0x08015588

08014d68 <fabs>:
 8014d68:	ec51 0b10 	vmov	r0, r1, d0
 8014d6c:	ee10 2a10 	vmov	r2, s0
 8014d70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014d74:	ec43 2b10 	vmov	d0, r2, r3
 8014d78:	4770      	bx	lr

08014d7a <finite>:
 8014d7a:	b082      	sub	sp, #8
 8014d7c:	ed8d 0b00 	vstr	d0, [sp]
 8014d80:	9801      	ldr	r0, [sp, #4]
 8014d82:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8014d86:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014d8a:	0fc0      	lsrs	r0, r0, #31
 8014d8c:	b002      	add	sp, #8
 8014d8e:	4770      	bx	lr

08014d90 <nan>:
 8014d90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014d98 <nan+0x8>
 8014d94:	4770      	bx	lr
 8014d96:	bf00      	nop
 8014d98:	00000000 	.word	0x00000000
 8014d9c:	7ff80000 	.word	0x7ff80000

08014da0 <fabsf>:
 8014da0:	ee10 3a10 	vmov	r3, s0
 8014da4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014da8:	ee00 3a10 	vmov	s0, r3
 8014dac:	4770      	bx	lr
	...

08014db0 <floorf>:
 8014db0:	ee10 3a10 	vmov	r3, s0
 8014db4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014db8:	3a7f      	subs	r2, #127	; 0x7f
 8014dba:	2a16      	cmp	r2, #22
 8014dbc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014dc0:	dc2a      	bgt.n	8014e18 <floorf+0x68>
 8014dc2:	2a00      	cmp	r2, #0
 8014dc4:	da11      	bge.n	8014dea <floorf+0x3a>
 8014dc6:	eddf 7a18 	vldr	s15, [pc, #96]	; 8014e28 <floorf+0x78>
 8014dca:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014dce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014dd6:	dd05      	ble.n	8014de4 <floorf+0x34>
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	da23      	bge.n	8014e24 <floorf+0x74>
 8014ddc:	4a13      	ldr	r2, [pc, #76]	; (8014e2c <floorf+0x7c>)
 8014dde:	2900      	cmp	r1, #0
 8014de0:	bf18      	it	ne
 8014de2:	4613      	movne	r3, r2
 8014de4:	ee00 3a10 	vmov	s0, r3
 8014de8:	4770      	bx	lr
 8014dea:	4911      	ldr	r1, [pc, #68]	; (8014e30 <floorf+0x80>)
 8014dec:	4111      	asrs	r1, r2
 8014dee:	420b      	tst	r3, r1
 8014df0:	d0fa      	beq.n	8014de8 <floorf+0x38>
 8014df2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8014e28 <floorf+0x78>
 8014df6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014dfa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e02:	ddef      	ble.n	8014de4 <floorf+0x34>
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	bfbe      	ittt	lt
 8014e08:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8014e0c:	fa40 f202 	asrlt.w	r2, r0, r2
 8014e10:	189b      	addlt	r3, r3, r2
 8014e12:	ea23 0301 	bic.w	r3, r3, r1
 8014e16:	e7e5      	b.n	8014de4 <floorf+0x34>
 8014e18:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014e1c:	d3e4      	bcc.n	8014de8 <floorf+0x38>
 8014e1e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014e22:	4770      	bx	lr
 8014e24:	2300      	movs	r3, #0
 8014e26:	e7dd      	b.n	8014de4 <floorf+0x34>
 8014e28:	7149f2ca 	.word	0x7149f2ca
 8014e2c:	bf800000 	.word	0xbf800000
 8014e30:	007fffff 	.word	0x007fffff

08014e34 <nanf>:
 8014e34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014e3c <nanf+0x8>
 8014e38:	4770      	bx	lr
 8014e3a:	bf00      	nop
 8014e3c:	7fc00000 	.word	0x7fc00000

08014e40 <scalbnf>:
 8014e40:	ee10 3a10 	vmov	r3, s0
 8014e44:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8014e48:	d025      	beq.n	8014e96 <scalbnf+0x56>
 8014e4a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8014e4e:	d302      	bcc.n	8014e56 <scalbnf+0x16>
 8014e50:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014e54:	4770      	bx	lr
 8014e56:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8014e5a:	d122      	bne.n	8014ea2 <scalbnf+0x62>
 8014e5c:	4b2a      	ldr	r3, [pc, #168]	; (8014f08 <scalbnf+0xc8>)
 8014e5e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014f0c <scalbnf+0xcc>
 8014e62:	4298      	cmp	r0, r3
 8014e64:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014e68:	db16      	blt.n	8014e98 <scalbnf+0x58>
 8014e6a:	ee10 3a10 	vmov	r3, s0
 8014e6e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014e72:	3a19      	subs	r2, #25
 8014e74:	4402      	add	r2, r0
 8014e76:	2afe      	cmp	r2, #254	; 0xfe
 8014e78:	dd15      	ble.n	8014ea6 <scalbnf+0x66>
 8014e7a:	ee10 3a10 	vmov	r3, s0
 8014e7e:	eddf 7a24 	vldr	s15, [pc, #144]	; 8014f10 <scalbnf+0xd0>
 8014e82:	eddf 6a24 	vldr	s13, [pc, #144]	; 8014f14 <scalbnf+0xd4>
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	eeb0 7a67 	vmov.f32	s14, s15
 8014e8c:	bfb8      	it	lt
 8014e8e:	eef0 7a66 	vmovlt.f32	s15, s13
 8014e92:	ee27 0a27 	vmul.f32	s0, s14, s15
 8014e96:	4770      	bx	lr
 8014e98:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014f18 <scalbnf+0xd8>
 8014e9c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014ea0:	4770      	bx	lr
 8014ea2:	0dd2      	lsrs	r2, r2, #23
 8014ea4:	e7e6      	b.n	8014e74 <scalbnf+0x34>
 8014ea6:	2a00      	cmp	r2, #0
 8014ea8:	dd06      	ble.n	8014eb8 <scalbnf+0x78>
 8014eaa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014eae:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014eb2:	ee00 3a10 	vmov	s0, r3
 8014eb6:	4770      	bx	lr
 8014eb8:	f112 0f16 	cmn.w	r2, #22
 8014ebc:	da1a      	bge.n	8014ef4 <scalbnf+0xb4>
 8014ebe:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014ec2:	4298      	cmp	r0, r3
 8014ec4:	ee10 3a10 	vmov	r3, s0
 8014ec8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014ecc:	dd0a      	ble.n	8014ee4 <scalbnf+0xa4>
 8014ece:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8014f10 <scalbnf+0xd0>
 8014ed2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8014f14 <scalbnf+0xd4>
 8014ed6:	eef0 7a40 	vmov.f32	s15, s0
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	bf18      	it	ne
 8014ede:	eeb0 0a47 	vmovne.f32	s0, s14
 8014ee2:	e7db      	b.n	8014e9c <scalbnf+0x5c>
 8014ee4:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8014f18 <scalbnf+0xd8>
 8014ee8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8014f1c <scalbnf+0xdc>
 8014eec:	eef0 7a40 	vmov.f32	s15, s0
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	e7f3      	b.n	8014edc <scalbnf+0x9c>
 8014ef4:	3219      	adds	r2, #25
 8014ef6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014efa:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014efe:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014f20 <scalbnf+0xe0>
 8014f02:	ee07 3a10 	vmov	s14, r3
 8014f06:	e7c4      	b.n	8014e92 <scalbnf+0x52>
 8014f08:	ffff3cb0 	.word	0xffff3cb0
 8014f0c:	4c000000 	.word	0x4c000000
 8014f10:	7149f2ca 	.word	0x7149f2ca
 8014f14:	f149f2ca 	.word	0xf149f2ca
 8014f18:	0da24260 	.word	0x0da24260
 8014f1c:	8da24260 	.word	0x8da24260
 8014f20:	33000000 	.word	0x33000000

08014f24 <_init>:
 8014f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f26:	bf00      	nop
 8014f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f2a:	bc08      	pop	{r3}
 8014f2c:	469e      	mov	lr, r3
 8014f2e:	4770      	bx	lr

08014f30 <_fini>:
 8014f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f32:	bf00      	nop
 8014f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014f36:	bc08      	pop	{r3}
 8014f38:	469e      	mov	lr, r3
 8014f3a:	4770      	bx	lr
