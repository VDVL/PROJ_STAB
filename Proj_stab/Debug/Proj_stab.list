
Proj_stab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006954  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006adc  08006adc  00016adc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b24  08006b24  00020444  2**0
                  CONTENTS
  4 .ARM          00000008  08006b24  08006b24  00016b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b2c  08006b2c  00020444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b2c  08006b2c  00016b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b30  08006b30  00016b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000444  20000000  08006b34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  20000444  08006f78  00020444  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006e0  08006f78  000206e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020444  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002af6c  00000000  00000000  00020474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d05  00000000  00000000  0004b3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000020f0  00000000  00000000  0004e0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ff0  00000000  00000000  000501d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00019ca5  00000000  00000000  000521c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000d823  00000000  00000000  0006be6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00079690  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008f90  00000000  00000000  000796e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000444 	.word	0x20000444
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006ac4 	.word	0x08006ac4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000448 	.word	0x20000448
 80001c4:	08006ac4 	.word	0x08006ac4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <DRV_Init>:
#include "drv8311.h"
#include "pwm_driver.h"



void DRV_Init(void){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af02      	add	r7, sp, #8
	//Init CS pin should default high
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004d8:	48c3      	ldr	r0, [pc, #780]	; (80007e8 <DRV_Init+0x31c>)
 80004da:	f002 fc19 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(nSleep_GPIO_Port, nSleep_Pin, GPIO_PIN_SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e8:	f002 fc12 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004ec:	2001      	movs	r0, #1
 80004ee:	f002 f917 	bl	8002720 <HAL_Delay>

	//Set PWM freq (reset = 0x0000 )
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 80004f2:	4bbe      	ldr	r3, [pc, #760]	; (80007ec <DRV_Init+0x320>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_PERIOD <<3);  	//reg adr + cmd
 80004f8:	4bbc      	ldr	r3, [pc, #752]	; (80007ec <DRV_Init+0x320>)
 80004fa:	22c0      	movs	r2, #192	; 0xc0
 80004fc:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80004fe:	4bbb      	ldr	r3, [pc, #748]	; (80007ec <DRV_Init+0x320>)
 8000500:	2200      	movs	r2, #0
 8000502:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0xFF;									//data (si read osf)
 8000504:	4bb9      	ldr	r3, [pc, #740]	; (80007ec <DRV_Init+0x320>)
 8000506:	22ff      	movs	r2, #255	; 0xff
 8000508:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000510:	48b5      	ldr	r0, [pc, #724]	; (80007e8 <DRV_Init+0x31c>)
 8000512:	f002 fbfd 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8000516:	f04f 33ff 	mov.w	r3, #4294967295
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2304      	movs	r3, #4
 800051e:	4ab4      	ldr	r2, [pc, #720]	; (80007f0 <DRV_Init+0x324>)
 8000520:	49b2      	ldr	r1, [pc, #712]	; (80007ec <DRV_Init+0x320>)
 8000522:	48b4      	ldr	r0, [pc, #720]	; (80007f4 <DRV_Init+0x328>)
 8000524:	f004 fdb9 	bl	800509a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052e:	48ae      	ldr	r0, [pc, #696]	; (80007e8 <DRV_Init+0x31c>)
 8000530:	f002 fbee 	bl	8002d10 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 8000534:	4bad      	ldr	r3, [pc, #692]	; (80007ec <DRV_Init+0x320>)
 8000536:	2280      	movs	r2, #128	; 0x80
 8000538:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_PERIOD <<3);  	//reg adr + cmd
 800053a:	4bac      	ldr	r3, [pc, #688]	; (80007ec <DRV_Init+0x320>)
 800053c:	22c0      	movs	r2, #192	; 0xc0
 800053e:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 8000540:	4baa      	ldr	r3, [pc, #680]	; (80007ec <DRV_Init+0x320>)
 8000542:	2200      	movs	r2, #0
 8000544:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8000546:	4ba9      	ldr	r3, [pc, #676]	; (80007ec <DRV_Init+0x320>)
 8000548:	2200      	movs	r2, #0
 800054a:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000552:	48a5      	ldr	r0, [pc, #660]	; (80007e8 <DRV_Init+0x31c>)
 8000554:	f002 fbdc 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8000558:	f04f 33ff 	mov.w	r3, #4294967295
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2304      	movs	r3, #4
 8000560:	4aa3      	ldr	r2, [pc, #652]	; (80007f0 <DRV_Init+0x324>)
 8000562:	49a2      	ldr	r1, [pc, #648]	; (80007ec <DRV_Init+0x320>)
 8000564:	48a3      	ldr	r0, [pc, #652]	; (80007f4 <DRV_Init+0x328>)
 8000566:	f004 fd98 	bl	800509a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000570:	489d      	ldr	r0, [pc, #628]	; (80007e8 <DRV_Init+0x31c>)
 8000572:	f002 fbcd 	bl	8002d10 <HAL_GPIO_WritePin>

	//Set PWM duty_cycle A   (reset = 0x0000 )
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 8000576:	4b9d      	ldr	r3, [pc, #628]	; (80007ec <DRV_Init+0x320>)
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_A_DUTY <<3);  	//reg adr + cmd
 800057c:	4b9b      	ldr	r3, [pc, #620]	; (80007ec <DRV_Init+0x320>)
 800057e:	22c8      	movs	r2, #200	; 0xc8
 8000580:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 8000582:	4b9a      	ldr	r3, [pc, #616]	; (80007ec <DRV_Init+0x320>)
 8000584:	2200      	movs	r2, #0
 8000586:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8000588:	4b98      	ldr	r3, [pc, #608]	; (80007ec <DRV_Init+0x320>)
 800058a:	2200      	movs	r2, #0
 800058c:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000594:	4894      	ldr	r0, [pc, #592]	; (80007e8 <DRV_Init+0x31c>)
 8000596:	f002 fbbb 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2304      	movs	r3, #4
 80005a2:	4a93      	ldr	r2, [pc, #588]	; (80007f0 <DRV_Init+0x324>)
 80005a4:	4991      	ldr	r1, [pc, #580]	; (80007ec <DRV_Init+0x320>)
 80005a6:	4893      	ldr	r0, [pc, #588]	; (80007f4 <DRV_Init+0x328>)
 80005a8:	f004 fd77 	bl	800509a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b2:	488d      	ldr	r0, [pc, #564]	; (80007e8 <DRV_Init+0x31c>)
 80005b4:	f002 fbac 	bl	8002d10 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 80005b8:	4b8c      	ldr	r3, [pc, #560]	; (80007ec <DRV_Init+0x320>)
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_A_DUTY <<3);  	//reg adr + cmd
 80005be:	4b8b      	ldr	r3, [pc, #556]	; (80007ec <DRV_Init+0x320>)
 80005c0:	22c8      	movs	r2, #200	; 0xc8
 80005c2:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80005c4:	4b89      	ldr	r3, [pc, #548]	; (80007ec <DRV_Init+0x320>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 80005ca:	4b88      	ldr	r3, [pc, #544]	; (80007ec <DRV_Init+0x320>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d6:	4884      	ldr	r0, [pc, #528]	; (80007e8 <DRV_Init+0x31c>)
 80005d8:	f002 fb9a 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2304      	movs	r3, #4
 80005e4:	4a82      	ldr	r2, [pc, #520]	; (80007f0 <DRV_Init+0x324>)
 80005e6:	4981      	ldr	r1, [pc, #516]	; (80007ec <DRV_Init+0x320>)
 80005e8:	4882      	ldr	r0, [pc, #520]	; (80007f4 <DRV_Init+0x328>)
 80005ea:	f004 fd56 	bl	800509a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f4:	487c      	ldr	r0, [pc, #496]	; (80007e8 <DRV_Init+0x31c>)
 80005f6:	f002 fb8b 	bl	8002d10 <HAL_GPIO_WritePin>

	//Set PWM duty_cycle B  (reset = 0x0000 )
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 80005fa:	4b7c      	ldr	r3, [pc, #496]	; (80007ec <DRV_Init+0x320>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_B_DUTY <<3);  	//reg adr + cmd
 8000600:	4b7a      	ldr	r3, [pc, #488]	; (80007ec <DRV_Init+0x320>)
 8000602:	22d0      	movs	r2, #208	; 0xd0
 8000604:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 8000606:	4b79      	ldr	r3, [pc, #484]	; (80007ec <DRV_Init+0x320>)
 8000608:	2200      	movs	r2, #0
 800060a:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 800060c:	4b77      	ldr	r3, [pc, #476]	; (80007ec <DRV_Init+0x320>)
 800060e:	2200      	movs	r2, #0
 8000610:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000618:	4873      	ldr	r0, [pc, #460]	; (80007e8 <DRV_Init+0x31c>)
 800061a:	f002 fb79 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2304      	movs	r3, #4
 8000626:	4a72      	ldr	r2, [pc, #456]	; (80007f0 <DRV_Init+0x324>)
 8000628:	4970      	ldr	r1, [pc, #448]	; (80007ec <DRV_Init+0x320>)
 800062a:	4872      	ldr	r0, [pc, #456]	; (80007f4 <DRV_Init+0x328>)
 800062c:	f004 fd35 	bl	800509a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000636:	486c      	ldr	r0, [pc, #432]	; (80007e8 <DRV_Init+0x31c>)
 8000638:	f002 fb6a 	bl	8002d10 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 800063c:	4b6b      	ldr	r3, [pc, #428]	; (80007ec <DRV_Init+0x320>)
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_B_DUTY <<3);  	//reg adr + cmd
 8000642:	4b6a      	ldr	r3, [pc, #424]	; (80007ec <DRV_Init+0x320>)
 8000644:	22d0      	movs	r2, #208	; 0xd0
 8000646:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 8000648:	4b68      	ldr	r3, [pc, #416]	; (80007ec <DRV_Init+0x320>)
 800064a:	2200      	movs	r2, #0
 800064c:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 800064e:	4b67      	ldr	r3, [pc, #412]	; (80007ec <DRV_Init+0x320>)
 8000650:	2200      	movs	r2, #0
 8000652:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065a:	4863      	ldr	r0, [pc, #396]	; (80007e8 <DRV_Init+0x31c>)
 800065c:	f002 fb58 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2304      	movs	r3, #4
 8000668:	4a61      	ldr	r2, [pc, #388]	; (80007f0 <DRV_Init+0x324>)
 800066a:	4960      	ldr	r1, [pc, #384]	; (80007ec <DRV_Init+0x320>)
 800066c:	4861      	ldr	r0, [pc, #388]	; (80007f4 <DRV_Init+0x328>)
 800066e:	f004 fd14 	bl	800509a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000678:	485b      	ldr	r0, [pc, #364]	; (80007e8 <DRV_Init+0x31c>)
 800067a:	f002 fb49 	bl	8002d10 <HAL_GPIO_WritePin>

	//Set PWM duty_cycle C (reset = 0x0000 )
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00 ;               					//cmd
 800067e:	4b5b      	ldr	r3, [pc, #364]	; (80007ec <DRV_Init+0x320>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_C_DUTY <<3);  	//reg adr + cmd
 8000684:	4b59      	ldr	r3, [pc, #356]	; (80007ec <DRV_Init+0x320>)
 8000686:	22d8      	movs	r2, #216	; 0xd8
 8000688:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 800068a:	4b58      	ldr	r3, [pc, #352]	; (80007ec <DRV_Init+0x320>)
 800068c:	2200      	movs	r2, #0
 800068e:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8000690:	4b56      	ldr	r3, [pc, #344]	; (80007ec <DRV_Init+0x320>)
 8000692:	2200      	movs	r2, #0
 8000694:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069c:	4852      	ldr	r0, [pc, #328]	; (80007e8 <DRV_Init+0x31c>)
 800069e:	f002 fb37 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2304      	movs	r3, #4
 80006aa:	4a51      	ldr	r2, [pc, #324]	; (80007f0 <DRV_Init+0x324>)
 80006ac:	494f      	ldr	r1, [pc, #316]	; (80007ec <DRV_Init+0x320>)
 80006ae:	4851      	ldr	r0, [pc, #324]	; (80007f4 <DRV_Init+0x328>)
 80006b0:	f004 fcf3 	bl	800509a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ba:	484b      	ldr	r0, [pc, #300]	; (80007e8 <DRV_Init+0x31c>)
 80006bc:	f002 fb28 	bl	8002d10 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 80006c0:	4b4a      	ldr	r3, [pc, #296]	; (80007ec <DRV_Init+0x320>)
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_C_DUTY <<3);  	//reg adr + cmd
 80006c6:	4b49      	ldr	r3, [pc, #292]	; (80007ec <DRV_Init+0x320>)
 80006c8:	22d8      	movs	r2, #216	; 0xd8
 80006ca:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80006cc:	4b47      	ldr	r3, [pc, #284]	; (80007ec <DRV_Init+0x320>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 80006d2:	4b46      	ldr	r3, [pc, #280]	; (80007ec <DRV_Init+0x320>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006de:	4842      	ldr	r0, [pc, #264]	; (80007e8 <DRV_Init+0x31c>)
 80006e0:	f002 fb16 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2304      	movs	r3, #4
 80006ec:	4a40      	ldr	r2, [pc, #256]	; (80007f0 <DRV_Init+0x324>)
 80006ee:	493f      	ldr	r1, [pc, #252]	; (80007ec <DRV_Init+0x320>)
 80006f0:	4840      	ldr	r0, [pc, #256]	; (80007f4 <DRV_Init+0x328>)
 80006f2:	f004 fcd2 	bl	800509a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006fc:	483a      	ldr	r0, [pc, #232]	; (80007e8 <DRV_Init+0x31c>)
 80006fe:	f002 fb07 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_Delay(1);*/


	//counter mode
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 8000702:	4b3a      	ldr	r3, [pc, #232]	; (80007ec <DRV_Init+0x320>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_CTRL <<3);  	//reg adr + cmd
 8000708:	4b38      	ldr	r3, [pc, #224]	; (80007ec <DRV_Init+0x320>)
 800070a:	22e8      	movs	r2, #232	; 0xe8
 800070c:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00 | (0x01);						//data (si read osf)
 800070e:	4b37      	ldr	r3, [pc, #220]	; (80007ec <DRV_Init+0x320>)
 8000710:	2201      	movs	r2, #1
 8000712:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8000714:	4b35      	ldr	r3, [pc, #212]	; (80007ec <DRV_Init+0x320>)
 8000716:	2200      	movs	r2, #0
 8000718:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000720:	4831      	ldr	r0, [pc, #196]	; (80007e8 <DRV_Init+0x31c>)
 8000722:	f002 faf5 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2304      	movs	r3, #4
 800072e:	4a30      	ldr	r2, [pc, #192]	; (80007f0 <DRV_Init+0x324>)
 8000730:	492e      	ldr	r1, [pc, #184]	; (80007ec <DRV_Init+0x320>)
 8000732:	4830      	ldr	r0, [pc, #192]	; (80007f4 <DRV_Init+0x328>)
 8000734:	f004 fcb1 	bl	800509a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073e:	482a      	ldr	r0, [pc, #168]	; (80007e8 <DRV_Init+0x31c>)
 8000740:	f002 fae6 	bl	8002d10 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 8000744:	4b29      	ldr	r3, [pc, #164]	; (80007ec <DRV_Init+0x320>)
 8000746:	2280      	movs	r2, #128	; 0x80
 8000748:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_CTRL <<3);  	//reg adr + cmd
 800074a:	4b28      	ldr	r3, [pc, #160]	; (80007ec <DRV_Init+0x320>)
 800074c:	22e8      	movs	r2, #232	; 0xe8
 800074e:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 8000750:	4b26      	ldr	r3, [pc, #152]	; (80007ec <DRV_Init+0x320>)
 8000752:	2200      	movs	r2, #0
 8000754:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8000756:	4b25      	ldr	r3, [pc, #148]	; (80007ec <DRV_Init+0x320>)
 8000758:	2200      	movs	r2, #0
 800075a:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000762:	4821      	ldr	r0, [pc, #132]	; (80007e8 <DRV_Init+0x31c>)
 8000764:	f002 fad4 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8000768:	f04f 33ff 	mov.w	r3, #4294967295
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	2304      	movs	r3, #4
 8000770:	4a1f      	ldr	r2, [pc, #124]	; (80007f0 <DRV_Init+0x324>)
 8000772:	491e      	ldr	r1, [pc, #120]	; (80007ec <DRV_Init+0x320>)
 8000774:	481f      	ldr	r0, [pc, #124]	; (80007f4 <DRV_Init+0x328>)
 8000776:	f004 fc90 	bl	800509a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000780:	4819      	ldr	r0, [pc, #100]	; (80007e8 <DRV_Init+0x31c>)
 8000782:	f002 fac5 	bl	8002d10 <HAL_GPIO_WritePin>

	//pwm state
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <DRV_Init+0x320>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWM_STATE <<3);  	//reg adr + cmd
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <DRV_Init+0x320>)
 800078e:	22e0      	movs	r2, #224	; 0xe0
 8000790:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x07;						//data (si read osf)
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <DRV_Init+0x320>)
 8000794:	2207      	movs	r2, #7
 8000796:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x77;									//data (si read osf)
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <DRV_Init+0x320>)
 800079a:	2277      	movs	r2, #119	; 0x77
 800079c:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a4:	4810      	ldr	r0, [pc, #64]	; (80007e8 <DRV_Init+0x31c>)
 80007a6:	f002 fab3 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2304      	movs	r3, #4
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <DRV_Init+0x324>)
 80007b4:	490d      	ldr	r1, [pc, #52]	; (80007ec <DRV_Init+0x320>)
 80007b6:	480f      	ldr	r0, [pc, #60]	; (80007f4 <DRV_Init+0x328>)
 80007b8:	f004 fc6f 	bl	800509a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c2:	4809      	ldr	r0, [pc, #36]	; (80007e8 <DRV_Init+0x31c>)
 80007c4:	f002 faa4 	bl	8002d10 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <DRV_Init+0x320>)
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWM_STATE <<3);  	//reg adr + cmd
 80007ce:	4b07      	ldr	r3, [pc, #28]	; (80007ec <DRV_Init+0x320>)
 80007d0:	22e0      	movs	r2, #224	; 0xe0
 80007d2:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <DRV_Init+0x320>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 80007da:	4b04      	ldr	r3, [pc, #16]	; (80007ec <DRV_Init+0x320>)
 80007dc:	2200      	movs	r2, #0
 80007de:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e6:	e007      	b.n	80007f8 <DRV_Init+0x32c>
 80007e8:	48000400 	.word	0x48000400
 80007ec:	20000694 	.word	0x20000694
 80007f0:	200006a8 	.word	0x200006a8
 80007f4:	20000514 	.word	0x20000514
 80007f8:	482b      	ldr	r0, [pc, #172]	; (80008a8 <DRV_Init+0x3dc>)
 80007fa:	f002 fa89 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2304      	movs	r3, #4
 8000806:	4a29      	ldr	r2, [pc, #164]	; (80008ac <DRV_Init+0x3e0>)
 8000808:	4929      	ldr	r1, [pc, #164]	; (80008b0 <DRV_Init+0x3e4>)
 800080a:	482a      	ldr	r0, [pc, #168]	; (80008b4 <DRV_Init+0x3e8>)
 800080c:	f004 fc45 	bl	800509a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000816:	4824      	ldr	r0, [pc, #144]	; (80008a8 <DRV_Init+0x3dc>)
 8000818:	f002 fa7a 	bl	8002d10 <HAL_GPIO_WritePin>


	//Enable PWM Generation  (reset = 0x0000 ) + synchro
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 800081c:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <DRV_Init+0x3e4>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_CTRL <<3);  	//reg adr + cmd
 8000822:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <DRV_Init+0x3e4>)
 8000824:	22e8      	movs	r2, #232	; 0xe8
 8000826:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00 | (0x01<<2);						//data (si read osf)
 8000828:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <DRV_Init+0x3e4>)
 800082a:	2204      	movs	r2, #4
 800082c:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00 | (0x05<<5);									//data (si read osf)
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <DRV_Init+0x3e4>)
 8000830:	22a0      	movs	r2, #160	; 0xa0
 8000832:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800083a:	481b      	ldr	r0, [pc, #108]	; (80008a8 <DRV_Init+0x3dc>)
 800083c:	f002 fa68 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8000840:	f04f 33ff 	mov.w	r3, #4294967295
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2304      	movs	r3, #4
 8000848:	4a18      	ldr	r2, [pc, #96]	; (80008ac <DRV_Init+0x3e0>)
 800084a:	4919      	ldr	r1, [pc, #100]	; (80008b0 <DRV_Init+0x3e4>)
 800084c:	4819      	ldr	r0, [pc, #100]	; (80008b4 <DRV_Init+0x3e8>)
 800084e:	f004 fc24 	bl	800509a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000858:	4813      	ldr	r0, [pc, #76]	; (80008a8 <DRV_Init+0x3dc>)
 800085a:	f002 fa59 	bl	8002d10 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <DRV_Init+0x3e4>)
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_CTRL <<3);  	//reg adr + cmd
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <DRV_Init+0x3e4>)
 8000866:	22e8      	movs	r2, #232	; 0xe8
 8000868:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <DRV_Init+0x3e4>)
 800086c:	2200      	movs	r2, #0
 800086e:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <DRV_Init+0x3e4>)
 8000872:	2200      	movs	r2, #0
 8000874:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800087c:	480a      	ldr	r0, [pc, #40]	; (80008a8 <DRV_Init+0x3dc>)
 800087e:	f002 fa47 	bl	8002d10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	2304      	movs	r3, #4
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <DRV_Init+0x3e0>)
 800088c:	4908      	ldr	r1, [pc, #32]	; (80008b0 <DRV_Init+0x3e4>)
 800088e:	4809      	ldr	r0, [pc, #36]	; (80008b4 <DRV_Init+0x3e8>)
 8000890:	f004 fc03 	bl	800509a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089a:	4803      	ldr	r0, [pc, #12]	; (80008a8 <DRV_Init+0x3dc>)
 800089c:	f002 fa38 	bl	8002d10 <HAL_GPIO_WritePin>

}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	48000400 	.word	0x48000400
 80008ac:	200006a8 	.word	0x200006a8
 80008b0:	20000694 	.word	0x20000694
 80008b4:	20000514 	.word	0x20000514

080008b8 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d103      	bne.n	80008d4 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 80008cc:	f04f 33ff 	mov.w	r3, #4294967295
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	e04d      	b.n	8000970 <LSM6DSO_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685a      	ldr	r2, [r3, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	689a      	ldr	r2, [r3, #8]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	7b1a      	ldrb	r2, [r3, #12]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	691a      	ldr	r2, [r3, #16]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	695a      	ldr	r2, [r3, #20]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	699a      	ldr	r2, [r3, #24]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a1b      	ldr	r2, [pc, #108]	; (800097c <LSM6DSO_RegisterBusIO+0xc4>)
 8000910:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4a1a      	ldr	r2, [pc, #104]	; (8000980 <LSM6DSO_RegisterBusIO+0xc8>)
 8000916:	61da      	str	r2, [r3, #28]

    //MODIFIED
    pObj->Ctx.handle   = pObj;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d103      	bne.n	800092e <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	e020      	b.n	8000970 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4798      	blx	r3
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d003      	beq.n	8000942 <LSM6DSO_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO_ERROR;
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	e016      	b.n	8000970 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	2b02      	cmp	r3, #2
 8000948:	d112      	bne.n	8000970 <LSM6DSO_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000950:	2b00      	cmp	r3, #0
 8000952:	d10d      	bne.n	8000970 <LSM6DSO_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8000954:	230c      	movs	r3, #12
 8000956:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8000958:	7afb      	ldrb	r3, [r7, #11]
 800095a:	461a      	mov	r2, r3
 800095c:	2112      	movs	r1, #18
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f000 fac4 	bl	8000eec <LSM6DSO_Write_Reg>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d002      	beq.n	8000970 <LSM6DSO_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO_ERROR;
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
 800096e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8000970:	68fb      	ldr	r3, [r7, #12]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	08000f23 	.word	0x08000f23
 8000980:	08000f59 	.word	0x08000f59

08000984 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	331c      	adds	r3, #28
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	4618      	mov	r0, r3
 8000994:	f001 f85e 	bl	8001a54 <lsm6dso_i3c_disable_set>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d002      	beq.n	80009a4 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	e060      	b.n	8000a66 <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	331c      	adds	r3, #28
 80009a8:	2101      	movs	r1, #1
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 f82c 	bl	8001a08 <lsm6dso_auto_increment_set>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d002      	beq.n	80009bc <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	e054      	b.n	8000a66 <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	331c      	adds	r3, #28
 80009c0:	2101      	movs	r1, #1
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 ff3e 	bl	8001844 <lsm6dso_block_data_update_set>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d002      	beq.n	80009d4 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	e048      	b.n	8000a66 <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	331c      	adds	r3, #28
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 f880 	bl	8001ae0 <lsm6dso_fifo_mode_set>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d002      	beq.n	80009ec <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	e03c      	b.n	8000a66 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2204      	movs	r2, #4
 80009f0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	331c      	adds	r3, #28
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 fbf8 	bl	80011f0 <lsm6dso_xl_data_rate_set>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0a:	e02c      	b.n	8000a66 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	331c      	adds	r3, #28
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 fb8e 	bl	8001134 <lsm6dso_xl_full_scale_set>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d002      	beq.n	8000a24 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	e020      	b.n	8000a66 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2204      	movs	r2, #4
 8000a28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	331c      	adds	r3, #28
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 fda8 	bl	8001588 <lsm6dso_gy_data_rate_set>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d002      	beq.n	8000a44 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a42:	e010      	b.n	8000a66 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	331c      	adds	r3, #28
 8000a48:	2106      	movs	r1, #6
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fd34 	bl	80014b8 <lsm6dso_gy_full_scale_set>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d002      	beq.n	8000a5c <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5a:	e004      	b.n	8000a66 <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f000 f872 	bl	8000b60 <LSM6DSO_ACC_Disable>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d002      	beq.n	8000a88 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	e015      	b.n	8000ab4 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 f95a 	bl	8000d42 <LSM6DSO_GYRO_Disable>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d002      	beq.n	8000a9a <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
 8000a98:	e00c      	b.n	8000ab4 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8000ab2:	2300      	movs	r3, #0
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	2201      	movs	r2, #1
 8000aca:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	2201      	movs	r2, #1
 8000ad0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	2200      	movs	r2, #0
 8000adc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ae4:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	2210      	movs	r2, #16
 8000aea:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <LSM6DSO_GetCapabilities+0x58>)
 8000af6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <LSM6DSO_GetCapabilities+0x58>)
 8000afc:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	f04f 0200 	mov.w	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	45d02000 	.word	0x45d02000

08000b18 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d101      	bne.n	8000b2e <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e014      	b.n	8000b58 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f103 021c 	add.w	r2, r3, #28
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4610      	mov	r0, r2
 8000b3e:	f000 fb57 	bl	80011f0 <lsm6dso_xl_data_rate_set>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8000b48:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4c:	e004      	b.n	8000b58 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2201      	movs	r2, #1
 8000b52:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e01f      	b.n	8000bb6 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f103 021c 	add.w	r2, r3, #28
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	332b      	adds	r3, #43	; 0x2b
 8000b80:	4619      	mov	r1, r3
 8000b82:	4610      	mov	r0, r2
 8000b84:	f000 fc30 	bl	80013e8 <lsm6dso_xl_data_rate_get>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d002      	beq.n	8000b94 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b92:	e010      	b.n	8000bb6 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	331c      	adds	r3, #28
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 fb28 	bl	80011f0 <lsm6dso_xl_data_rate_set>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	e004      	b.n	8000bb6 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	331c      	adds	r3, #28
 8000bd2:	f107 020b 	add.w	r2, r7, #11
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 fad1 	bl	8001180 <lsm6dso_xl_full_scale_get>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d002      	beq.n	8000bea <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8000be4:	f04f 33ff 	mov.w	r3, #4294967295
 8000be8:	e023      	b.n	8000c32 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8000bea:	7afb      	ldrb	r3, [r7, #11]
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	d81b      	bhi.n	8000c28 <LSM6DSO_ACC_GetSensitivity+0x68>
 8000bf0:	a201      	add	r2, pc, #4	; (adr r2, 8000bf8 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8000bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf6:	bf00      	nop
 8000bf8:	08000c09 	.word	0x08000c09
 8000bfc:	08000c21 	.word	0x08000c21
 8000c00:	08000c11 	.word	0x08000c11
 8000c04:	08000c19 	.word	0x08000c19
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8000c0c:	601a      	str	r2, [r3, #0]
      break;
 8000c0e:	e00f      	b.n	8000c30 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8000c14:	601a      	str	r2, [r3, #0]
      break;
 8000c16:	e00b      	b.n	8000c30 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8000c1c:	601a      	str	r2, [r3, #0]
      break;
 8000c1e:	e007      	b.n	8000c30 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	4a09      	ldr	r2, [pc, #36]	; (8000c48 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8000c24:	601a      	str	r2, [r3, #0]
      break;
 8000c26:	e003      	b.n	8000c30 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2c:	60fb      	str	r3, [r7, #12]
      break;
 8000c2e:	bf00      	nop
  }

  return ret;
 8000c30:	68fb      	ldr	r3, [r7, #12]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	3d79db23 	.word	0x3d79db23
 8000c40:	3df9db23 	.word	0x3df9db23
 8000c44:	3e79db23 	.word	0x3e79db23
 8000c48:	3ef9db23 	.word	0x3ef9db23

08000c4c <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8000c56:	f04f 0300 	mov.w	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	331c      	adds	r3, #28
 8000c60:	f107 0210 	add.w	r2, r7, #16
 8000c64:	4611      	mov	r1, r2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 fe5d 	bl	8001926 <lsm6dso_acceleration_raw_get>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e03c      	b.n	8000cf2 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ff9e 	bl	8000bc0 <LSM6DSO_ACC_GetSensitivity>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d002      	beq.n	8000c90 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8e:	e030      	b.n	8000cf2 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8000c90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c94:	ee07 3a90 	vmov	s15, r3
 8000c98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ca8:	ee17 2a90 	vmov	r2, s15
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8000cb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000cb4:	ee07 3a90 	vmov	s15, r3
 8000cb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cc8:	ee17 2a90 	vmov	r2, s15
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8000cd0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000cd4:	ee07 3a90 	vmov	s15, r3
 8000cd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ce4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ce8:	ee17 2a90 	vmov	r2, s15
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d101      	bne.n	8000d10 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e014      	b.n	8000d3a <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f103 021c 	add.w	r2, r3, #28
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4610      	mov	r0, r2
 8000d20:	f000 fc32 	bl	8001588 <lsm6dso_gy_data_rate_set>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d002      	beq.n	8000d30 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	e004      	b.n	8000d3a <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2201      	movs	r2, #1
 8000d34:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d101      	bne.n	8000d58 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	e01f      	b.n	8000d98 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f103 021c 	add.w	r2, r3, #28
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	332c      	adds	r3, #44	; 0x2c
 8000d62:	4619      	mov	r1, r3
 8000d64:	4610      	mov	r0, r2
 8000d66:	f000 fd0b 	bl	8001780 <lsm6dso_gy_data_rate_get>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d002      	beq.n	8000d76 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8000d70:	f04f 33ff 	mov.w	r3, #4294967295
 8000d74:	e010      	b.n	8000d98 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	331c      	adds	r3, #28
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 fc03 	bl	8001588 <lsm6dso_gy_data_rate_set>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d002      	beq.n	8000d8e <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8000d88:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8c:	e004      	b.n	8000d98 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	331c      	adds	r3, #28
 8000db2:	f107 020b 	add.w	r2, r7, #11
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fba3 	bl	8001504 <lsm6dso_gy_full_scale_get>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc8:	e02d      	b.n	8000e26 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8000dca:	7afb      	ldrb	r3, [r7, #11]
 8000dcc:	2b06      	cmp	r3, #6
 8000dce:	d825      	bhi.n	8000e1c <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8000dd0:	a201      	add	r2, pc, #4	; (adr r2, 8000dd8 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8000dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd6:	bf00      	nop
 8000dd8:	08000dfd 	.word	0x08000dfd
 8000ddc:	08000df5 	.word	0x08000df5
 8000de0:	08000e05 	.word	0x08000e05
 8000de4:	08000e1d 	.word	0x08000e1d
 8000de8:	08000e0d 	.word	0x08000e0d
 8000dec:	08000e1d 	.word	0x08000e1d
 8000df0:	08000e15 	.word	0x08000e15
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8000df8:	601a      	str	r2, [r3, #0]
      break;
 8000dfa:	e013      	b.n	8000e24 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8000e00:	601a      	str	r2, [r3, #0]
      break;
 8000e02:	e00f      	b.n	8000e24 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	4a0c      	ldr	r2, [pc, #48]	; (8000e38 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8000e08:	601a      	str	r2, [r3, #0]
      break;
 8000e0a:	e00b      	b.n	8000e24 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8000e10:	601a      	str	r2, [r3, #0]
      break;
 8000e12:	e007      	b.n	8000e24 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8000e18:	601a      	str	r2, [r3, #0]
      break;
 8000e1a:	e003      	b.n	8000e24 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e20:	60fb      	str	r3, [r7, #12]
      break;
 8000e22:	bf00      	nop
  }

  return ret;
 8000e24:	68fb      	ldr	r3, [r7, #12]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	408c0000 	.word	0x408c0000
 8000e34:	410c0000 	.word	0x410c0000
 8000e38:	418c0000 	.word	0x418c0000
 8000e3c:	420c0000 	.word	0x420c0000
 8000e40:	428c0000 	.word	0x428c0000

08000e44 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	331c      	adds	r3, #28
 8000e52:	f107 0210 	add.w	r2, r7, #16
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 fd19 	bl	8001890 <lsm6dso_angular_rate_raw_get>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8000e64:	f04f 33ff 	mov.w	r3, #4294967295
 8000e68:	e03c      	b.n	8000ee4 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	4619      	mov	r1, r3
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff95 	bl	8000da0 <LSM6DSO_GYRO_GetSensitivity>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d002      	beq.n	8000e82 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e80:	e030      	b.n	8000ee4 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8000e82:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e86:	ee07 3a90 	vmov	s15, r3
 8000e8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e9a:	ee17 2a90 	vmov	r2, s15
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8000ea2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ea6:	ee07 3a90 	vmov	s15, r3
 8000eaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eae:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eba:	ee17 2a90 	vmov	r2, s15
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8000ec2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ec6:	ee07 3a90 	vmov	s15, r3
 8000eca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ece:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eda:	ee17 2a90 	vmov	r2, s15
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	70fb      	strb	r3, [r7, #3]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f103 001c 	add.w	r0, r3, #28
 8000f02:	1cba      	adds	r2, r7, #2
 8000f04:	78f9      	ldrb	r1, [r7, #3]
 8000f06:	2301      	movs	r3, #1
 8000f08:	f000 f8fc 	bl	8001104 <lsm6dso_write_reg>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d002      	beq.n	8000f18 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	e000      	b.n	8000f1a <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8000f22:	b590      	push	{r4, r7, lr}
 8000f24:	b087      	sub	sp, #28
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	60f8      	str	r0, [r7, #12]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	460b      	mov	r3, r1
 8000f30:	72fb      	strb	r3, [r7, #11]
 8000f32:	4613      	mov	r3, r2
 8000f34:	813b      	strh	r3, [r7, #8]
	LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	617b      	str	r3, [r7, #20]
	return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	695c      	ldr	r4, [r3, #20]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	7b1b      	ldrb	r3, [r3, #12]
 8000f42:	b298      	uxth	r0, r3
 8000f44:	7afb      	ldrb	r3, [r7, #11]
 8000f46:	b299      	uxth	r1, r3
 8000f48:	893b      	ldrh	r3, [r7, #8]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	47a0      	blx	r4
 8000f4e:	4603      	mov	r3, r0
	//MODIFIED
	//HAL_I2C_Mem_Read(Handle, LSM6DSO_I2C_ADD_L, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 1000);
	//return 0;
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	371c      	adds	r7, #28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd90      	pop	{r4, r7, pc}

08000f58 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	461a      	mov	r2, r3
 8000f64:	460b      	mov	r3, r1
 8000f66:	72fb      	strb	r3, [r7, #11]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	813b      	strh	r3, [r7, #8]
	LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	617b      	str	r3, [r7, #20]
	return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	691c      	ldr	r4, [r3, #16]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	7b1b      	ldrb	r3, [r3, #12]
 8000f78:	b298      	uxth	r0, r3
 8000f7a:	7afb      	ldrb	r3, [r7, #11]
 8000f7c:	b299      	uxth	r1, r3
 8000f7e:	893b      	ldrh	r3, [r7, #8]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	47a0      	blx	r4
 8000f84:	4603      	mov	r3, r0
	//MODIFIED
	//HAL_I2C_Mem_Read(Handle, LSM6DSO_I2C_ADD_L, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 1000);
	//return 0;
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	371c      	adds	r7, #28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd90      	pop	{r4, r7, pc}
	...

08000f90 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af04      	add	r7, sp, #16
 8000f96:	60ba      	str	r2, [r7, #8]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	81fb      	strh	r3, [r7, #14]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	81bb      	strh	r3, [r7, #12]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	80fb      	strh	r3, [r7, #6]
  HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 1000);
 8000fa6:	89ba      	ldrh	r2, [r7, #12]
 8000fa8:	89f9      	ldrh	r1, [r7, #14]
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	4804      	ldr	r0, [pc, #16]	; (8000fcc <BSP_I2C1_ReadReg+0x3c>)
 8000fbc:	f002 f864 	bl	8003088 <HAL_I2C_Mem_Read>

  return 0;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200004c8 	.word	0x200004c8

08000fd0 <BSP_I2C1_WriteReg>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af04      	add	r7, sp, #16
 8000fd6:	60ba      	str	r2, [r7, #8]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4603      	mov	r3, r0
 8000fdc:	81fb      	strh	r3, [r7, #14]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	81bb      	strh	r3, [r7, #12]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, 1000);
 8000fe6:	89ba      	ldrh	r2, [r7, #12]
 8000fe8:	89f9      	ldrh	r1, [r7, #14]
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	4804      	ldr	r0, [pc, #16]	; (800100c <BSP_I2C1_WriteReg+0x3c>)
 8000ffc:	f001 ff30 	bl	8002e60 <HAL_I2C_Mem_Write>
	return 0;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	200004c8 	.word	0x200004c8

08001010 <INIT_IMU>:





void INIT_IMU(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	//IMU------------------------------------------------
	  /* Configure the accelero driver */
	  IO_IMU.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <INIT_IMU+0x48>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
	  IO_IMU.Address     = LSM6DSO_I2C_ADD_H;
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <INIT_IMU+0x48>)
 800101c:	22d7      	movs	r2, #215	; 0xd7
 800101e:	731a      	strb	r2, [r3, #12]
	  IO_IMU.Init        = LSM6DSO_Init;
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <INIT_IMU+0x48>)
 8001022:	4a0e      	ldr	r2, [pc, #56]	; (800105c <INIT_IMU+0x4c>)
 8001024:	601a      	str	r2, [r3, #0]
	  IO_IMU.DeInit      = LSM6DSO_DeInit;
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <INIT_IMU+0x48>)
 8001028:	4a0d      	ldr	r2, [pc, #52]	; (8001060 <INIT_IMU+0x50>)
 800102a:	605a      	str	r2, [r3, #4]
	  IO_IMU.ReadReg     = IMU_BSP_I2C1_ReadReg;
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <INIT_IMU+0x48>)
 800102e:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <INIT_IMU+0x54>)
 8001030:	615a      	str	r2, [r3, #20]
	  IO_IMU.WriteReg    = IMU_BSP_I2C1_WriteReg;
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <INIT_IMU+0x48>)
 8001034:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <INIT_IMU+0x58>)
 8001036:	611a      	str	r2, [r3, #16]
	  LSM6DSO_RegisterBusIO(&IMU, &IO_IMU);
 8001038:	4907      	ldr	r1, [pc, #28]	; (8001058 <INIT_IMU+0x48>)
 800103a:	480c      	ldr	r0, [pc, #48]	; (800106c <INIT_IMU+0x5c>)
 800103c:	f7ff fc3c 	bl	80008b8 <LSM6DSO_RegisterBusIO>

	  LSM6DSO_GetCapabilities(&IMU, &capabilities_IMU);
 8001040:	490b      	ldr	r1, [pc, #44]	; (8001070 <INIT_IMU+0x60>)
 8001042:	480a      	ldr	r0, [pc, #40]	; (800106c <INIT_IMU+0x5c>)
 8001044:	f7ff fd3a 	bl	8000abc <LSM6DSO_GetCapabilities>

	  LSM6DSO_ACC_Enable(&IMU);
 8001048:	4808      	ldr	r0, [pc, #32]	; (800106c <INIT_IMU+0x5c>)
 800104a:	f7ff fd65 	bl	8000b18 <LSM6DSO_ACC_Enable>
	  LSM6DSO_GYRO_Enable(&IMU);
 800104e:	4807      	ldr	r0, [pc, #28]	; (800106c <INIT_IMU+0x5c>)
 8001050:	f7ff fe53 	bl	8000cfa <LSM6DSO_GYRO_Enable>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000490 	.word	0x20000490
 800105c:	08000985 	.word	0x08000985
 8001060:	08000a6f 	.word	0x08000a6f
 8001064:	08000f91 	.word	0x08000f91
 8001068:	08000fd1 	.word	0x08000fd1
 800106c:	20000460 	.word	0x20000460
 8001070:	200004ac 	.word	0x200004ac

08001074 <Get_AXIS_GYRO__IMU>:



LSM6DSO_Axes_t Get_AXIS_GYRO__IMU(void){
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	LSM6DSO_Axes_t gyro_IMU;
	LSM6DSO_GYRO_GetAxes(&IMU, &gyro_IMU);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	4619      	mov	r1, r3
 8001082:	4807      	ldr	r0, [pc, #28]	; (80010a0 <Get_AXIS_GYRO__IMU+0x2c>)
 8001084:	f7ff fede 	bl	8000e44 <LSM6DSO_GYRO_GetAxes>
	return gyro_IMU;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	461c      	mov	r4, r3
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001094:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	371c      	adds	r7, #28
 800109c:	46bd      	mov	sp, r7
 800109e:	bd90      	pop	{r4, r7, pc}
 80010a0:	20000460 	.word	0x20000460

080010a4 <Get_AXIS_ACC__IMU>:

LSM6DSO_Axes_t Get_AXIS_ACC__IMU(void){
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b087      	sub	sp, #28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	LSM6DSO_Axes_t acc_IMU;
	LSM6DSO_ACC_GetAxes(&IMU, &acc_IMU);
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4619      	mov	r1, r3
 80010b2:	4807      	ldr	r0, [pc, #28]	; (80010d0 <Get_AXIS_ACC__IMU+0x2c>)
 80010b4:	f7ff fdca 	bl	8000c4c <LSM6DSO_ACC_GetAxes>
	return acc_IMU;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	461c      	mov	r4, r3
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	371c      	adds	r7, #28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd90      	pop	{r4, r7, pc}
 80010d0:	20000460 	.word	0x20000460

080010d4 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	461a      	mov	r2, r3
 80010e0:	460b      	mov	r3, r1
 80010e2:	72fb      	strb	r3, [r7, #11]
 80010e4:	4613      	mov	r3, r2
 80010e6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	685c      	ldr	r4, [r3, #4]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6898      	ldr	r0, [r3, #8]
 80010f0:	893b      	ldrh	r3, [r7, #8]
 80010f2:	7af9      	ldrb	r1, [r7, #11]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	47a0      	blx	r4
 80010f8:	6178      	str	r0, [r7, #20]

  return ret;
 80010fa:	697b      	ldr	r3, [r7, #20]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd90      	pop	{r4, r7, pc}

08001104 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	461a      	mov	r2, r3
 8001110:	460b      	mov	r3, r1
 8001112:	72fb      	strb	r3, [r7, #11]
 8001114:	4613      	mov	r3, r2
 8001116:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681c      	ldr	r4, [r3, #0]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6898      	ldr	r0, [r3, #8]
 8001120:	893b      	ldrh	r3, [r7, #8]
 8001122:	7af9      	ldrb	r1, [r7, #11]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	47a0      	blx	r4
 8001128:	6178      	str	r0, [r7, #20]

  return ret;
 800112a:	697b      	ldr	r3, [r7, #20]
}
 800112c:	4618      	mov	r0, r3
 800112e:	371c      	adds	r7, #28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd90      	pop	{r4, r7, pc}

08001134 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8001140:	f107 0208 	add.w	r2, r7, #8
 8001144:	2301      	movs	r3, #1
 8001146:	2110      	movs	r1, #16
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ffc3 	bl	80010d4 <lsm6dso_read_reg>
 800114e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10f      	bne.n	8001176 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8001156:	78fb      	ldrb	r3, [r7, #3]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	b2da      	uxtb	r2, r3
 800115e:	7a3b      	ldrb	r3, [r7, #8]
 8001160:	f362 0383 	bfi	r3, r2, #2, #2
 8001164:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8001166:	f107 0208 	add.w	r2, r7, #8
 800116a:	2301      	movs	r3, #1
 800116c:	2110      	movs	r1, #16
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffc8 	bl	8001104 <lsm6dso_write_reg>
 8001174:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800118a:	f107 0208 	add.w	r2, r7, #8
 800118e:	2301      	movs	r3, #1
 8001190:	2110      	movs	r1, #16
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ff9e 	bl	80010d4 <lsm6dso_read_reg>
 8001198:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 800119a:	7a3b      	ldrb	r3, [r7, #8]
 800119c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d81a      	bhi.n	80011dc <lsm6dso_xl_full_scale_get+0x5c>
 80011a6:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <lsm6dso_xl_full_scale_get+0x2c>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	080011bd 	.word	0x080011bd
 80011b0:	080011c5 	.word	0x080011c5
 80011b4:	080011cd 	.word	0x080011cd
 80011b8:	080011d5 	.word	0x080011d5
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
      break;
 80011c2:	e00f      	b.n	80011e4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
      break;
 80011ca:	e00b      	b.n	80011e4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	2202      	movs	r2, #2
 80011d0:	701a      	strb	r2, [r3, #0]
      break;
 80011d2:	e007      	b.n	80011e4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2203      	movs	r2, #3
 80011d8:	701a      	strb	r2, [r3, #0]
      break;
 80011da:	e003      	b.n	80011e4 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
      break;
 80011e2:	bf00      	nop
  }

  return ret;
 80011e4:	68fb      	ldr	r3, [r7, #12]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop

080011f0 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4619      	mov	r1, r3
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 fc90 	bl	8001b2c <lsm6dso_fsm_enable_get>
 800120c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	2b00      	cmp	r3, #0
 8001212:	f040 80c4 	bne.w	800139e <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001216:	7b3b      	ldrb	r3, [r7, #12]
 8001218:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800121c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800121e:	7b3b      	ldrb	r3, [r7, #12]
 8001220:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001224:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001226:	4313      	orrs	r3, r2
 8001228:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800122a:	7b3b      	ldrb	r3, [r7, #12]
 800122c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001230:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001232:	4313      	orrs	r3, r2
 8001234:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001236:	7b3b      	ldrb	r3, [r7, #12]
 8001238:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800123c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800123e:	4313      	orrs	r3, r2
 8001240:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001242:	7b3b      	ldrb	r3, [r7, #12]
 8001244:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001248:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800124a:	4313      	orrs	r3, r2
 800124c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800124e:	7b3b      	ldrb	r3, [r7, #12]
 8001250:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001254:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001256:	4313      	orrs	r3, r2
 8001258:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800125a:	7b3b      	ldrb	r3, [r7, #12]
 800125c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001260:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001262:	4313      	orrs	r3, r2
 8001264:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001266:	7b3b      	ldrb	r3, [r7, #12]
 8001268:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800126c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800126e:	4313      	orrs	r3, r2
 8001270:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001272:	7b7b      	ldrb	r3, [r7, #13]
 8001274:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001278:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800127a:	4313      	orrs	r3, r2
 800127c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800127e:	7b7b      	ldrb	r3, [r7, #13]
 8001280:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001284:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001286:	4313      	orrs	r3, r2
 8001288:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800128a:	7b7b      	ldrb	r3, [r7, #13]
 800128c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001290:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001292:	4313      	orrs	r3, r2
 8001294:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001296:	7b7b      	ldrb	r3, [r7, #13]
 8001298:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800129c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800129e:	4313      	orrs	r3, r2
 80012a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80012a2:	7b7b      	ldrb	r3, [r7, #13]
 80012a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80012a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80012ae:	7b7b      	ldrb	r3, [r7, #13]
 80012b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80012b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80012ba:	7b7b      	ldrb	r3, [r7, #13]
 80012bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80012c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80012c6:	7b7b      	ldrb	r3, [r7, #13]
 80012c8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80012cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d163      	bne.n	800139e <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80012d6:	f107 030b 	add.w	r3, r7, #11
 80012da:	4619      	mov	r1, r3
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fc47 	bl	8001b70 <lsm6dso_fsm_data_rate_get>
 80012e2:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d159      	bne.n	800139e <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80012ea:	7afb      	ldrb	r3, [r7, #11]
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d853      	bhi.n	8001398 <lsm6dso_xl_data_rate_set+0x1a8>
 80012f0:	a201      	add	r2, pc, #4	; (adr r2, 80012f8 <lsm6dso_xl_data_rate_set+0x108>)
 80012f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f6:	bf00      	nop
 80012f8:	08001309 	.word	0x08001309
 80012fc:	0800131b 	.word	0x0800131b
 8001300:	08001339 	.word	0x08001339
 8001304:	08001363 	.word	0x08001363
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d102      	bne.n	8001314 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 800130e:	2301      	movs	r3, #1
 8001310:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001312:	e045      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	75fb      	strb	r3, [r7, #23]
            break;
 8001318:	e042      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8001320:	2302      	movs	r3, #2
 8001322:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001324:	e03c      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8001326:	78fb      	ldrb	r3, [r7, #3]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d102      	bne.n	8001332 <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 800132c:	2302      	movs	r3, #2
 800132e:	75fb      	strb	r3, [r7, #23]
            break;
 8001330:	e036      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	75fb      	strb	r3, [r7, #23]
            break;
 8001336:	e033      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d102      	bne.n	8001344 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800133e:	2303      	movs	r3, #3
 8001340:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001342:	e02d      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d102      	bne.n	8001350 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800134a:	2303      	movs	r3, #3
 800134c:	75fb      	strb	r3, [r7, #23]
            break;
 800134e:	e027      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d102      	bne.n	800135c <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8001356:	2303      	movs	r3, #3
 8001358:	75fb      	strb	r3, [r7, #23]
            break;
 800135a:	e021      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800135c:	78fb      	ldrb	r3, [r7, #3]
 800135e:	75fb      	strb	r3, [r7, #23]
            break;
 8001360:	e01e      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8001362:	78fb      	ldrb	r3, [r7, #3]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8001368:	2304      	movs	r3, #4
 800136a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800136c:	e018      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 800136e:	78fb      	ldrb	r3, [r7, #3]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d102      	bne.n	800137a <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8001374:	2304      	movs	r3, #4
 8001376:	75fb      	strb	r3, [r7, #23]
            break;
 8001378:	e012      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d102      	bne.n	8001386 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8001380:	2304      	movs	r3, #4
 8001382:	75fb      	strb	r3, [r7, #23]
            break;
 8001384:	e00c      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8001386:	78fb      	ldrb	r3, [r7, #3]
 8001388:	2b03      	cmp	r3, #3
 800138a:	d102      	bne.n	8001392 <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 800138c:	2304      	movs	r3, #4
 800138e:	75fb      	strb	r3, [r7, #23]
            break;
 8001390:	e006      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001392:	78fb      	ldrb	r3, [r7, #3]
 8001394:	75fb      	strb	r3, [r7, #23]
            break;
 8001396:	e003      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	75fb      	strb	r3, [r7, #23]
            break;
 800139c:	e000      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 800139e:	bf00      	nop
    }
  }

  if (ret == 0)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d107      	bne.n	80013b6 <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80013a6:	f107 0208 	add.w	r2, r7, #8
 80013aa:	2301      	movs	r3, #1
 80013ac:	2110      	movs	r1, #16
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fe90 	bl	80010d4 <lsm6dso_read_reg>
 80013b4:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d10f      	bne.n	80013dc <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	7a3b      	ldrb	r3, [r7, #8]
 80013c6:	f362 1307 	bfi	r3, r2, #4, #4
 80013ca:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80013cc:	f107 0208 	add.w	r2, r7, #8
 80013d0:	2301      	movs	r3, #1
 80013d2:	2110      	movs	r1, #16
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fe95 	bl	8001104 <lsm6dso_write_reg>
 80013da:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80013dc:	693b      	ldr	r3, [r7, #16]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop

080013e8 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80013f2:	f107 0208 	add.w	r2, r7, #8
 80013f6:	2301      	movs	r3, #1
 80013f8:	2110      	movs	r1, #16
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fe6a 	bl	80010d4 <lsm6dso_read_reg>
 8001400:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8001402:	7a3b      	ldrb	r3, [r7, #8]
 8001404:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b0b      	cmp	r3, #11
 800140c:	d84a      	bhi.n	80014a4 <lsm6dso_xl_data_rate_get+0xbc>
 800140e:	a201      	add	r2, pc, #4	; (adr r2, 8001414 <lsm6dso_xl_data_rate_get+0x2c>)
 8001410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001414:	08001445 	.word	0x08001445
 8001418:	0800144d 	.word	0x0800144d
 800141c:	08001455 	.word	0x08001455
 8001420:	0800145d 	.word	0x0800145d
 8001424:	08001465 	.word	0x08001465
 8001428:	0800146d 	.word	0x0800146d
 800142c:	08001475 	.word	0x08001475
 8001430:	0800147d 	.word	0x0800147d
 8001434:	08001485 	.word	0x08001485
 8001438:	0800148d 	.word	0x0800148d
 800143c:	08001495 	.word	0x08001495
 8001440:	0800149d 	.word	0x0800149d
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
      break;
 800144a:	e02f      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
      break;
 8001452:	e02b      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2202      	movs	r2, #2
 8001458:	701a      	strb	r2, [r3, #0]
      break;
 800145a:	e027      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	2203      	movs	r2, #3
 8001460:	701a      	strb	r2, [r3, #0]
      break;
 8001462:	e023      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	2204      	movs	r2, #4
 8001468:	701a      	strb	r2, [r3, #0]
      break;
 800146a:	e01f      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	2205      	movs	r2, #5
 8001470:	701a      	strb	r2, [r3, #0]
      break;
 8001472:	e01b      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	2206      	movs	r2, #6
 8001478:	701a      	strb	r2, [r3, #0]
      break;
 800147a:	e017      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2207      	movs	r2, #7
 8001480:	701a      	strb	r2, [r3, #0]
      break;
 8001482:	e013      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	2208      	movs	r2, #8
 8001488:	701a      	strb	r2, [r3, #0]
      break;
 800148a:	e00f      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2209      	movs	r2, #9
 8001490:	701a      	strb	r2, [r3, #0]
      break;
 8001492:	e00b      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	220a      	movs	r2, #10
 8001498:	701a      	strb	r2, [r3, #0]
      break;
 800149a:	e007      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	220b      	movs	r2, #11
 80014a0:	701a      	strb	r2, [r3, #0]
      break;
 80014a2:	e003      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
      break;
 80014aa:	bf00      	nop
  }

  return ret;
 80014ac:	68fb      	ldr	r3, [r7, #12]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop

080014b8 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80014c4:	f107 0208 	add.w	r2, r7, #8
 80014c8:	2301      	movs	r3, #1
 80014ca:	2111      	movs	r1, #17
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff fe01 	bl	80010d4 <lsm6dso_read_reg>
 80014d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10f      	bne.n	80014fa <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	7a3b      	ldrb	r3, [r7, #8]
 80014e4:	f362 0343 	bfi	r3, r2, #1, #3
 80014e8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80014ea:	f107 0208 	add.w	r2, r7, #8
 80014ee:	2301      	movs	r3, #1
 80014f0:	2111      	movs	r1, #17
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fe06 	bl	8001104 <lsm6dso_write_reg>
 80014f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800150e:	f107 0208 	add.w	r2, r7, #8
 8001512:	2301      	movs	r3, #1
 8001514:	2111      	movs	r1, #17
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fddc 	bl	80010d4 <lsm6dso_read_reg>
 800151c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 800151e:	7a3b      	ldrb	r3, [r7, #8]
 8001520:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b06      	cmp	r3, #6
 8001528:	d824      	bhi.n	8001574 <lsm6dso_gy_full_scale_get+0x70>
 800152a:	a201      	add	r2, pc, #4	; (adr r2, 8001530 <lsm6dso_gy_full_scale_get+0x2c>)
 800152c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001530:	0800154d 	.word	0x0800154d
 8001534:	08001555 	.word	0x08001555
 8001538:	0800155d 	.word	0x0800155d
 800153c:	08001575 	.word	0x08001575
 8001540:	08001565 	.word	0x08001565
 8001544:	08001575 	.word	0x08001575
 8001548:	0800156d 	.word	0x0800156d
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
      break;
 8001552:	e013      	b.n	800157c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
      break;
 800155a:	e00f      	b.n	800157c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2202      	movs	r2, #2
 8001560:	701a      	strb	r2, [r3, #0]
      break;
 8001562:	e00b      	b.n	800157c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2204      	movs	r2, #4
 8001568:	701a      	strb	r2, [r3, #0]
      break;
 800156a:	e007      	b.n	800157c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2206      	movs	r2, #6
 8001570:	701a      	strb	r2, [r3, #0]
      break;
 8001572:	e003      	b.n	800157c <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
      break;
 800157a:	bf00      	nop
  }

  return ret;
 800157c:	68fb      	ldr	r3, [r7, #12]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop

08001588 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	4619      	mov	r1, r3
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 fac4 	bl	8001b2c <lsm6dso_fsm_enable_get>
 80015a4:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f040 80c4 	bne.w	8001736 <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80015ae:	7b3b      	ldrb	r3, [r7, #12]
 80015b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80015b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80015b6:	7b3b      	ldrb	r3, [r7, #12]
 80015b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80015bc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80015be:	4313      	orrs	r3, r2
 80015c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80015c2:	7b3b      	ldrb	r3, [r7, #12]
 80015c4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80015c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80015ce:	7b3b      	ldrb	r3, [r7, #12]
 80015d0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80015d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80015d6:	4313      	orrs	r3, r2
 80015d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80015da:	7b3b      	ldrb	r3, [r7, #12]
 80015dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80015e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80015e6:	7b3b      	ldrb	r3, [r7, #12]
 80015e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80015ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80015f2:	7b3b      	ldrb	r3, [r7, #12]
 80015f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80015f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80015fe:	7b3b      	ldrb	r3, [r7, #12]
 8001600:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001604:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001606:	4313      	orrs	r3, r2
 8001608:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800160a:	7b7b      	ldrb	r3, [r7, #13]
 800160c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001610:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001612:	4313      	orrs	r3, r2
 8001614:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001616:	7b7b      	ldrb	r3, [r7, #13]
 8001618:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800161c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800161e:	4313      	orrs	r3, r2
 8001620:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001622:	7b7b      	ldrb	r3, [r7, #13]
 8001624:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001628:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800162a:	4313      	orrs	r3, r2
 800162c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800162e:	7b7b      	ldrb	r3, [r7, #13]
 8001630:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001634:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001636:	4313      	orrs	r3, r2
 8001638:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800163a:	7b7b      	ldrb	r3, [r7, #13]
 800163c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001640:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001642:	4313      	orrs	r3, r2
 8001644:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8001646:	7b7b      	ldrb	r3, [r7, #13]
 8001648:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800164c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800164e:	4313      	orrs	r3, r2
 8001650:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001652:	7b7b      	ldrb	r3, [r7, #13]
 8001654:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001658:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800165a:	4313      	orrs	r3, r2
 800165c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800165e:	7b7b      	ldrb	r3, [r7, #13]
 8001660:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001664:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001666:	4313      	orrs	r3, r2
 8001668:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800166a:	2b01      	cmp	r3, #1
 800166c:	d163      	bne.n	8001736 <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 800166e:	f107 030b 	add.w	r3, r7, #11
 8001672:	4619      	mov	r1, r3
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 fa7b 	bl	8001b70 <lsm6dso_fsm_data_rate_get>
 800167a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d159      	bne.n	8001736 <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8001682:	7afb      	ldrb	r3, [r7, #11]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d853      	bhi.n	8001730 <lsm6dso_gy_data_rate_set+0x1a8>
 8001688:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <lsm6dso_gy_data_rate_set+0x108>)
 800168a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168e:	bf00      	nop
 8001690:	080016a1 	.word	0x080016a1
 8001694:	080016b3 	.word	0x080016b3
 8001698:	080016d1 	.word	0x080016d1
 800169c:	080016fb 	.word	0x080016fb
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80016a6:	2301      	movs	r3, #1
 80016a8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80016aa:	e045      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80016ac:	78fb      	ldrb	r3, [r7, #3]
 80016ae:	75fb      	strb	r3, [r7, #23]
            break;
 80016b0:	e042      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 80016b8:	2302      	movs	r3, #2
 80016ba:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80016bc:	e03c      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d102      	bne.n	80016ca <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 80016c4:	2302      	movs	r3, #2
 80016c6:	75fb      	strb	r3, [r7, #23]
            break;
 80016c8:	e036      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	75fb      	strb	r3, [r7, #23]
            break;
 80016ce:	e033      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80016d0:	78fb      	ldrb	r3, [r7, #3]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d102      	bne.n	80016dc <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80016d6:	2303      	movs	r3, #3
 80016d8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80016da:	e02d      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d102      	bne.n	80016e8 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80016e2:	2303      	movs	r3, #3
 80016e4:	75fb      	strb	r3, [r7, #23]
            break;
 80016e6:	e027      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 80016e8:	78fb      	ldrb	r3, [r7, #3]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d102      	bne.n	80016f4 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80016ee:	2303      	movs	r3, #3
 80016f0:	75fb      	strb	r3, [r7, #23]
            break;
 80016f2:	e021      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	75fb      	strb	r3, [r7, #23]
            break;
 80016f8:	e01e      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8001700:	2304      	movs	r3, #4
 8001702:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8001704:	e018      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d102      	bne.n	8001712 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800170c:	2304      	movs	r3, #4
 800170e:	75fb      	strb	r3, [r7, #23]
            break;
 8001710:	e012      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8001712:	78fb      	ldrb	r3, [r7, #3]
 8001714:	2b02      	cmp	r3, #2
 8001716:	d102      	bne.n	800171e <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8001718:	2304      	movs	r3, #4
 800171a:	75fb      	strb	r3, [r7, #23]
            break;
 800171c:	e00c      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d102      	bne.n	800172a <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8001724:	2304      	movs	r3, #4
 8001726:	75fb      	strb	r3, [r7, #23]
            break;
 8001728:	e006      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800172a:	78fb      	ldrb	r3, [r7, #3]
 800172c:	75fb      	strb	r3, [r7, #23]
            break;
 800172e:	e003      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	75fb      	strb	r3, [r7, #23]
            break;
 8001734:	e000      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8001736:	bf00      	nop
    }
  }

  if (ret == 0)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d107      	bne.n	800174e <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800173e:	f107 0208 	add.w	r2, r7, #8
 8001742:	2301      	movs	r3, #1
 8001744:	2111      	movs	r1, #17
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fcc4 	bl	80010d4 <lsm6dso_read_reg>
 800174c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10f      	bne.n	8001774 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	b2da      	uxtb	r2, r3
 800175c:	7a3b      	ldrb	r3, [r7, #8]
 800175e:	f362 1307 	bfi	r3, r2, #4, #4
 8001762:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8001764:	f107 0208 	add.w	r2, r7, #8
 8001768:	2301      	movs	r3, #1
 800176a:	2111      	movs	r1, #17
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff fcc9 	bl	8001104 <lsm6dso_write_reg>
 8001772:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8001774:	693b      	ldr	r3, [r7, #16]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop

08001780 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800178a:	f107 0208 	add.w	r2, r7, #8
 800178e:	2301      	movs	r3, #1
 8001790:	2111      	movs	r1, #17
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff fc9e 	bl	80010d4 <lsm6dso_read_reg>
 8001798:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 800179a:	7a3b      	ldrb	r3, [r7, #8]
 800179c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b0a      	cmp	r3, #10
 80017a4:	d844      	bhi.n	8001830 <lsm6dso_gy_data_rate_get+0xb0>
 80017a6:	a201      	add	r2, pc, #4	; (adr r2, 80017ac <lsm6dso_gy_data_rate_get+0x2c>)
 80017a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ac:	080017d9 	.word	0x080017d9
 80017b0:	080017e1 	.word	0x080017e1
 80017b4:	080017e9 	.word	0x080017e9
 80017b8:	080017f1 	.word	0x080017f1
 80017bc:	080017f9 	.word	0x080017f9
 80017c0:	08001801 	.word	0x08001801
 80017c4:	08001809 	.word	0x08001809
 80017c8:	08001811 	.word	0x08001811
 80017cc:	08001819 	.word	0x08001819
 80017d0:	08001821 	.word	0x08001821
 80017d4:	08001829 	.word	0x08001829
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
      break;
 80017de:	e02b      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
      break;
 80017e6:	e027      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	2202      	movs	r2, #2
 80017ec:	701a      	strb	r2, [r3, #0]
      break;
 80017ee:	e023      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	2203      	movs	r2, #3
 80017f4:	701a      	strb	r2, [r3, #0]
      break;
 80017f6:	e01f      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2204      	movs	r2, #4
 80017fc:	701a      	strb	r2, [r3, #0]
      break;
 80017fe:	e01b      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	2205      	movs	r2, #5
 8001804:	701a      	strb	r2, [r3, #0]
      break;
 8001806:	e017      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	2206      	movs	r2, #6
 800180c:	701a      	strb	r2, [r3, #0]
      break;
 800180e:	e013      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	2207      	movs	r2, #7
 8001814:	701a      	strb	r2, [r3, #0]
      break;
 8001816:	e00f      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2208      	movs	r2, #8
 800181c:	701a      	strb	r2, [r3, #0]
      break;
 800181e:	e00b      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	2209      	movs	r2, #9
 8001824:	701a      	strb	r2, [r3, #0]
      break;
 8001826:	e007      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	220a      	movs	r2, #10
 800182c:	701a      	strb	r2, [r3, #0]
      break;
 800182e:	e003      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
      break;
 8001836:	bf00      	nop
  }

  return ret;
 8001838:	68fb      	ldr	r3, [r7, #12]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop

08001844 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8001850:	f107 0208 	add.w	r2, r7, #8
 8001854:	2301      	movs	r3, #1
 8001856:	2112      	movs	r1, #18
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff fc3b 	bl	80010d4 <lsm6dso_read_reg>
 800185e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	b2da      	uxtb	r2, r3
 800186e:	7a3b      	ldrb	r3, [r7, #8]
 8001870:	f362 1386 	bfi	r3, r2, #6, #1
 8001874:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8001876:	f107 0208 	add.w	r2, r7, #8
 800187a:	2301      	movs	r3, #1
 800187c:	2112      	movs	r1, #18
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fc40 	bl	8001104 <lsm6dso_write_reg>
 8001884:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001886:	68fb      	ldr	r3, [r7, #12]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 800189a:	f107 020c 	add.w	r2, r7, #12
 800189e:	2306      	movs	r3, #6
 80018a0:	2122      	movs	r1, #34	; 0x22
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff fc16 	bl	80010d4 <lsm6dso_read_reg>
 80018a8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80018aa:	7b7b      	ldrb	r3, [r7, #13]
 80018ac:	b21a      	sxth	r2, r3
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	021b      	lsls	r3, r3, #8
 80018bc:	b29a      	uxth	r2, r3
 80018be:	7b3b      	ldrb	r3, [r7, #12]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	b21a      	sxth	r2, r3
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	3302      	adds	r3, #2
 80018d2:	b212      	sxth	r2, r2
 80018d4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	3302      	adds	r3, #2
 80018da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	7bbb      	ldrb	r3, [r7, #14]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	3302      	adds	r3, #2
 80018f0:	b212      	sxth	r2, r2
 80018f2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80018f4:	7c7a      	ldrb	r2, [r7, #17]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	3304      	adds	r3, #4
 80018fa:	b212      	sxth	r2, r2
 80018fc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	3304      	adds	r3, #4
 8001902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001906:	b29b      	uxth	r3, r3
 8001908:	021b      	lsls	r3, r3, #8
 800190a:	b29a      	uxth	r2, r3
 800190c:	7c3b      	ldrb	r3, [r7, #16]
 800190e:	b29b      	uxth	r3, r3
 8001910:	4413      	add	r3, r2
 8001912:	b29a      	uxth	r2, r3
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	3304      	adds	r3, #4
 8001918:	b212      	sxth	r2, r2
 800191a:	801a      	strh	r2, [r3, #0]

  return ret;
 800191c:	697b      	ldr	r3, [r7, #20]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8001930:	f107 020c 	add.w	r2, r7, #12
 8001934:	2306      	movs	r3, #6
 8001936:	2128      	movs	r1, #40	; 0x28
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff fbcb 	bl	80010d4 <lsm6dso_read_reg>
 800193e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001940:	7b7b      	ldrb	r3, [r7, #13]
 8001942:	b21a      	sxth	r2, r3
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194e:	b29b      	uxth	r3, r3
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	b29a      	uxth	r2, r3
 8001954:	7b3b      	ldrb	r3, [r7, #12]
 8001956:	b29b      	uxth	r3, r3
 8001958:	4413      	add	r3, r2
 800195a:	b29b      	uxth	r3, r3
 800195c:	b21a      	sxth	r2, r3
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001962:	7bfa      	ldrb	r2, [r7, #15]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	3302      	adds	r3, #2
 8001968:	b212      	sxth	r2, r2
 800196a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	3302      	adds	r3, #2
 8001970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001974:	b29b      	uxth	r3, r3
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	b29a      	uxth	r2, r3
 800197a:	7bbb      	ldrb	r3, [r7, #14]
 800197c:	b29b      	uxth	r3, r3
 800197e:	4413      	add	r3, r2
 8001980:	b29a      	uxth	r2, r3
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	3302      	adds	r3, #2
 8001986:	b212      	sxth	r2, r2
 8001988:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800198a:	7c7a      	ldrb	r2, [r7, #17]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	3304      	adds	r3, #4
 8001990:	b212      	sxth	r2, r2
 8001992:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	3304      	adds	r3, #4
 8001998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199c:	b29b      	uxth	r3, r3
 800199e:	021b      	lsls	r3, r3, #8
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	7c3b      	ldrb	r3, [r7, #16]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	3304      	adds	r3, #4
 80019ae:	b212      	sxth	r2, r2
 80019b0:	801a      	strh	r2, [r3, #0]

  return ret;
 80019b2:	697b      	ldr	r3, [r7, #20]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80019c8:	f107 0208 	add.w	r2, r7, #8
 80019cc:	2301      	movs	r3, #1
 80019ce:	2101      	movs	r1, #1
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff fb7f 	bl	80010d4 <lsm6dso_read_reg>
 80019d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10f      	bne.n	80019fe <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	7a3b      	ldrb	r3, [r7, #8]
 80019e8:	f362 1387 	bfi	r3, r2, #6, #2
 80019ec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80019ee:	f107 0208 	add.w	r2, r7, #8
 80019f2:	2301      	movs	r3, #1
 80019f4:	2101      	movs	r1, #1
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff fb84 	bl	8001104 <lsm6dso_write_reg>
 80019fc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8001a14:	f107 0208 	add.w	r2, r7, #8
 8001a18:	2301      	movs	r3, #1
 8001a1a:	2112      	movs	r1, #18
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff fb59 	bl	80010d4 <lsm6dso_read_reg>
 8001a22:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10f      	bne.n	8001a4a <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	7a3b      	ldrb	r3, [r7, #8]
 8001a34:	f362 0382 	bfi	r3, r2, #2, #1
 8001a38:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8001a3a:	f107 0208 	add.w	r2, r7, #8
 8001a3e:	2301      	movs	r3, #1
 8001a40:	2112      	movs	r1, #18
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fb5e 	bl	8001104 <lsm6dso_write_reg>
 8001a48:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8001a60:	f107 020c 	add.w	r2, r7, #12
 8001a64:	2301      	movs	r3, #1
 8001a66:	2118      	movs	r1, #24
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff fb33 	bl	80010d4 <lsm6dso_read_reg>
 8001a6e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d111      	bne.n	8001a9a <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	09db      	lsrs	r3, r3, #7
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	7b3b      	ldrb	r3, [r7, #12]
 8001a84:	f362 0341 	bfi	r3, r2, #1, #1
 8001a88:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8001a8a:	f107 020c 	add.w	r2, r7, #12
 8001a8e:	2301      	movs	r3, #1
 8001a90:	2118      	movs	r1, #24
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff fb36 	bl	8001104 <lsm6dso_write_reg>
 8001a98:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d107      	bne.n	8001ab0 <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8001aa0:	f107 0210 	add.w	r2, r7, #16
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	2162      	movs	r1, #98	; 0x62
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff fb13 	bl	80010d4 <lsm6dso_read_reg>
 8001aae:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10f      	bne.n	8001ad6 <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	7c3b      	ldrb	r3, [r7, #16]
 8001ac0:	f362 03c4 	bfi	r3, r2, #3, #2
 8001ac4:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8001ac6:	f107 0210 	add.w	r2, r7, #16
 8001aca:	2301      	movs	r3, #1
 8001acc:	2162      	movs	r1, #98	; 0x62
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fb18 	bl	8001104 <lsm6dso_write_reg>
 8001ad4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8001ad6:	697b      	ldr	r3, [r7, #20]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8001aec:	f107 0208 	add.w	r2, r7, #8
 8001af0:	2301      	movs	r3, #1
 8001af2:	210a      	movs	r1, #10
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff faed 	bl	80010d4 <lsm6dso_read_reg>
 8001afa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10f      	bne.n	8001b22 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	7a3b      	ldrb	r3, [r7, #8]
 8001b0c:	f362 0302 	bfi	r3, r2, #0, #3
 8001b10:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8001b12:	f107 0208 	add.w	r2, r7, #8
 8001b16:	2301      	movs	r3, #1
 8001b18:	210a      	movs	r1, #10
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff faf2 	bl	8001104 <lsm6dso_write_reg>
 8001b20:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b22:	68fb      	ldr	r3, [r7, #12]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8001b36:	2102      	movs	r1, #2
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff3f 	bl	80019bc <lsm6dso_mem_bank_set>
 8001b3e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8001b46:	2302      	movs	r3, #2
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	2146      	movs	r1, #70	; 0x46
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff fac1 	bl	80010d4 <lsm6dso_read_reg>
 8001b52:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d104      	bne.n	8001b64 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff2d 	bl	80019bc <lsm6dso_mem_bank_set>
 8001b62:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b64:	68fb      	ldr	r3, [r7, #12]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff1d 	bl	80019bc <lsm6dso_mem_bank_set>
 8001b82:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d107      	bne.n	8001b9a <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8001b8a:	f107 0208 	add.w	r2, r7, #8
 8001b8e:	2301      	movs	r3, #1
 8001b90:	215f      	movs	r1, #95	; 0x5f
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fa9e 	bl	80010d4 <lsm6dso_read_reg>
 8001b98:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d12a      	bne.n	8001bf6 <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8001ba0:	7a3b      	ldrb	r3, [r7, #8]
 8001ba2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d81b      	bhi.n	8001be4 <lsm6dso_fsm_data_rate_get+0x74>
 8001bac:	a201      	add	r2, pc, #4	; (adr r2, 8001bb4 <lsm6dso_fsm_data_rate_get+0x44>)
 8001bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb2:	bf00      	nop
 8001bb4:	08001bc5 	.word	0x08001bc5
 8001bb8:	08001bcd 	.word	0x08001bcd
 8001bbc:	08001bd5 	.word	0x08001bd5
 8001bc0:	08001bdd 	.word	0x08001bdd
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
        break;
 8001bca:	e00f      	b.n	8001bec <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
        break;
 8001bd2:	e00b      	b.n	8001bec <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	701a      	strb	r2, [r3, #0]
        break;
 8001bda:	e007      	b.n	8001bec <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2203      	movs	r2, #3
 8001be0:	701a      	strb	r2, [r3, #0]
        break;
 8001be2:	e003      	b.n	8001bec <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
        break;
 8001bea:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8001bec:	2100      	movs	r1, #0
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fee4 	bl	80019bc <lsm6dso_mem_bank_set>
 8001bf4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c00:	b590      	push	{r4, r7, lr}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c06:	f000 fd0f 	bl	8002628 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c0a:	f000 f833 	bl	8001c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c0e:	f000 f9cb 	bl	8001fa8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c12:	f000 f881 	bl	8001d18 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001c16:	f000 f997 	bl	8001f48 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001c1a:	f000 f8bd 	bl	8001d98 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001c1e:	f000 f8f9 	bl	8001e14 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c22:	f000 f943 	bl	8001eac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  DRV_Init();
 8001c26:	f7fe fc51 	bl	80004cc <DRV_Init>

  INIT_IMU();
 8001c2a:	f7ff f9f1 	bl	8001010 <INIT_IMU>


  //INTERRUPTS
  HAL_TIM_Base_Start_IT(&htim2);
 8001c2e:	480d      	ldr	r0, [pc, #52]	; (8001c64 <main+0x64>)
 8001c30:	f003 fe02 	bl	8005838 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001c34:	480c      	ldr	r0, [pc, #48]	; (8001c68 <main+0x68>)
 8001c36:	f003 fdff 	bl	8005838 <HAL_TIM_Base_Start_IT>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	acc_IMU = Get_AXIS_GYRO__IMU();
 8001c3a:	4c0c      	ldr	r4, [pc, #48]	; (8001c6c <main+0x6c>)
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fa18 	bl	8001074 <Get_AXIS_GYRO__IMU>
 8001c44:	463b      	mov	r3, r7
 8001c46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	gyro_IMU = Get_AXIS_ACC__IMU();
 8001c4e:	4c08      	ldr	r4, [pc, #32]	; (8001c70 <main+0x70>)
 8001c50:	463b      	mov	r3, r7
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fa26 	bl	80010a4 <Get_AXIS_ACC__IMU>
 8001c58:	463b      	mov	r3, r7
 8001c5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	acc_IMU = Get_AXIS_GYRO__IMU();
 8001c62:	e7ea      	b.n	8001c3a <main+0x3a>
 8001c64:	20000578 	.word	0x20000578
 8001c68:	200005c4 	.word	0x200005c4
 8001c6c:	200006bc 	.word	0x200006bc
 8001c70:	200006c8 	.word	0x200006c8

08001c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b096      	sub	sp, #88	; 0x58
 8001c78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c7a:	f107 0314 	add.w	r3, r7, #20
 8001c7e:	2244      	movs	r2, #68	; 0x44
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f004 ff16 	bl	8006ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c88:	463b      	mov	r3, r7
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
 8001c94:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001c96:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001c9a:	f001 fe5b 	bl	8003954 <HAL_PWREx_ControlVoltageScaling>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001ca4:	f000 fa14 	bl	80020d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cb0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cb2:	2310      	movs	r3, #16
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001cc2:	230a      	movs	r3, #10
 8001cc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f001 fe92 	bl	8003a00 <HAL_RCC_OscConfig>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001ce2:	f000 f9f5 	bl	80020d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ce6:	230f      	movs	r3, #15
 8001ce8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cea:	2303      	movs	r3, #3
 8001cec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001cfa:	463b      	mov	r3, r7
 8001cfc:	2104      	movs	r1, #4
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f002 fa66 	bl	80041d0 <HAL_RCC_ClockConfig>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d0a:	f000 f9e1 	bl	80020d0 <Error_Handler>
  }
}
 8001d0e:	bf00      	nop
 8001d10:	3758      	adds	r7, #88	; 0x58
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d1e:	4a1c      	ldr	r2, [pc, #112]	; (8001d90 <MX_I2C1_Init+0x78>)
 8001d20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001d22:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d24:	4a1b      	ldr	r2, [pc, #108]	; (8001d94 <MX_I2C1_Init+0x7c>)
 8001d26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d28:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d2e:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d34:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d3a:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d46:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d52:	480e      	ldr	r0, [pc, #56]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d54:	f000 fff4 	bl	8002d40 <HAL_I2C_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d5e:	f000 f9b7 	bl	80020d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d62:	2100      	movs	r1, #0
 8001d64:	4809      	ldr	r0, [pc, #36]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d66:	f001 fd4f 	bl	8003808 <HAL_I2CEx_ConfigAnalogFilter>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d70:	f000 f9ae 	bl	80020d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d74:	2100      	movs	r1, #0
 8001d76:	4805      	ldr	r0, [pc, #20]	; (8001d8c <MX_I2C1_Init+0x74>)
 8001d78:	f001 fd91 	bl	800389e <HAL_I2CEx_ConfigDigitalFilter>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d82:	f000 f9a5 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200004c8 	.word	0x200004c8
 8001d90:	40005400 	.word	0x40005400
 8001d94:	00702991 	.word	0x00702991

08001d98 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001d9c:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <MX_SPI2_Init+0x74>)
 8001d9e:	4a1c      	ldr	r2, [pc, #112]	; (8001e10 <MX_SPI2_Init+0x78>)
 8001da0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001da2:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <MX_SPI2_Init+0x74>)
 8001da4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001da8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <MX_SPI2_Init+0x74>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <MX_SPI2_Init+0x74>)
 8001db2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001db6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <MX_SPI2_Init+0x74>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dbe:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <MX_SPI2_Init+0x74>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001dc4:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_SPI2_Init+0x74>)
 8001dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dca:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <MX_SPI2_Init+0x74>)
 8001dce:	2228      	movs	r2, #40	; 0x28
 8001dd0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_SPI2_Init+0x74>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_SPI2_Init+0x74>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <MX_SPI2_Init+0x74>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_SPI2_Init+0x74>)
 8001de6:	2207      	movs	r2, #7
 8001de8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <MX_SPI2_Init+0x74>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <MX_SPI2_Init+0x74>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <MX_SPI2_Init+0x74>)
 8001df8:	f003 f8ac 	bl	8004f54 <HAL_SPI_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e02:	f000 f965 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000514 	.word	0x20000514
 8001e10:	40003800 	.word	0x40003800

08001e14 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e1a:	f107 0310 	add.w	r3, r7, #16
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e28:	1d3b      	adds	r3, r7, #4
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e32:	4b1d      	ldr	r3, [pc, #116]	; (8001ea8 <MX_TIM2_Init+0x94>)
 8001e34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e38:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8001e3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ea8 <MX_TIM2_Init+0x94>)
 8001e3c:	2209      	movs	r2, #9
 8001e3e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <MX_TIM2_Init+0x94>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 8001e46:	4b18      	ldr	r3, [pc, #96]	; (8001ea8 <MX_TIM2_Init+0x94>)
 8001e48:	22c7      	movs	r2, #199	; 0xc7
 8001e4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <MX_TIM2_Init+0x94>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e52:	4b15      	ldr	r3, [pc, #84]	; (8001ea8 <MX_TIM2_Init+0x94>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e58:	4813      	ldr	r0, [pc, #76]	; (8001ea8 <MX_TIM2_Init+0x94>)
 8001e5a:	f003 fc95 	bl	8005788 <HAL_TIM_Base_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e64:	f000 f934 	bl	80020d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e6e:	f107 0310 	add.w	r3, r7, #16
 8001e72:	4619      	mov	r1, r3
 8001e74:	480c      	ldr	r0, [pc, #48]	; (8001ea8 <MX_TIM2_Init+0x94>)
 8001e76:	f003 fe6e 	bl	8005b56 <HAL_TIM_ConfigClockSource>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e80:	f000 f926 	bl	80020d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e84:	2300      	movs	r3, #0
 8001e86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e8c:	1d3b      	adds	r3, r7, #4
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <MX_TIM2_Init+0x94>)
 8001e92:	f004 f88f 	bl	8005fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e9c:	f000 f918 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ea0:	bf00      	nop
 8001ea2:	3720      	adds	r7, #32
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000578 	.word	0x20000578

08001eac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eb2:	f107 0310 	add.w	r3, r7, #16
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eca:	4b1d      	ldr	r3, [pc, #116]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001ecc:	4a1d      	ldr	r2, [pc, #116]	; (8001f44 <MX_TIM3_Init+0x98>)
 8001ece:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001ed0:	4b1b      	ldr	r3, [pc, #108]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001ed2:	2207      	movs	r2, #7
 8001ed4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed6:	4b1a      	ldr	r3, [pc, #104]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001edc:	4b18      	ldr	r3, [pc, #96]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001ede:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ee2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee4:	4b16      	ldr	r3, [pc, #88]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ef0:	4813      	ldr	r0, [pc, #76]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001ef2:	f003 fc49 	bl	8005788 <HAL_TIM_Base_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001efc:	f000 f8e8 	bl	80020d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f06:	f107 0310 	add.w	r3, r7, #16
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	480c      	ldr	r0, [pc, #48]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001f0e:	f003 fe22 	bl	8005b56 <HAL_TIM_ConfigClockSource>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001f18:	f000 f8da 	bl	80020d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	4619      	mov	r1, r3
 8001f28:	4805      	ldr	r0, [pc, #20]	; (8001f40 <MX_TIM3_Init+0x94>)
 8001f2a:	f004 f843 	bl	8005fb4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001f34:	f000 f8cc 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f38:	bf00      	nop
 8001f3a:	3720      	adds	r7, #32
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	200005c4 	.word	0x200005c4
 8001f44:	40000400 	.word	0x40000400

08001f48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f4c:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <MX_USART2_UART_Init+0x58>)
 8001f4e:	4a15      	ldr	r2, [pc, #84]	; (8001fa4 <MX_USART2_UART_Init+0x5c>)
 8001f50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f52:	4b13      	ldr	r3, [pc, #76]	; (8001fa0 <MX_USART2_UART_Init+0x58>)
 8001f54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5a:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <MX_USART2_UART_Init+0x58>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f60:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <MX_USART2_UART_Init+0x58>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <MX_USART2_UART_Init+0x58>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <MX_USART2_UART_Init+0x58>)
 8001f6e:	220c      	movs	r2, #12
 8001f70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <MX_USART2_UART_Init+0x58>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f78:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <MX_USART2_UART_Init+0x58>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <MX_USART2_UART_Init+0x58>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <MX_USART2_UART_Init+0x58>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f8a:	4805      	ldr	r0, [pc, #20]	; (8001fa0 <MX_USART2_UART_Init+0x58>)
 8001f8c:	f004 f8b8 	bl	8006100 <HAL_UART_Init>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001f96:	f000 f89b 	bl	80020d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000610 	.word	0x20000610
 8001fa4:	40004400 	.word	0x40004400

08001fa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	; 0x28
 8001fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fae:	f107 0314 	add.w	r3, r7, #20
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbe:	4b41      	ldr	r3, [pc, #260]	; (80020c4 <MX_GPIO_Init+0x11c>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	4a40      	ldr	r2, [pc, #256]	; (80020c4 <MX_GPIO_Init+0x11c>)
 8001fc4:	f043 0304 	orr.w	r3, r3, #4
 8001fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fca:	4b3e      	ldr	r3, [pc, #248]	; (80020c4 <MX_GPIO_Init+0x11c>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fd6:	4b3b      	ldr	r3, [pc, #236]	; (80020c4 <MX_GPIO_Init+0x11c>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fda:	4a3a      	ldr	r2, [pc, #232]	; (80020c4 <MX_GPIO_Init+0x11c>)
 8001fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe2:	4b38      	ldr	r3, [pc, #224]	; (80020c4 <MX_GPIO_Init+0x11c>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fee:	4b35      	ldr	r3, [pc, #212]	; (80020c4 <MX_GPIO_Init+0x11c>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	4a34      	ldr	r2, [pc, #208]	; (80020c4 <MX_GPIO_Init+0x11c>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ffa:	4b32      	ldr	r3, [pc, #200]	; (80020c4 <MX_GPIO_Init+0x11c>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002006:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <MX_GPIO_Init+0x11c>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	4a2e      	ldr	r2, [pc, #184]	; (80020c4 <MX_GPIO_Init+0x11c>)
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002012:	4b2c      	ldr	r3, [pc, #176]	; (80020c4 <MX_GPIO_Init+0x11c>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	f003 0302 	and.w	r3, r3, #2
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|nSleep_Pin, GPIO_PIN_RESET);
 800201e:	2200      	movs	r2, #0
 8002020:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8002024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002028:	f000 fe72 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800202c:	2200      	movs	r2, #0
 800202e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002032:	4825      	ldr	r0, [pc, #148]	; (80020c8 <MX_GPIO_Init+0x120>)
 8002034:	f000 fe6c 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWM_sync_Pin|PWM_timer_Pin, GPIO_PIN_RESET);
 8002038:	2200      	movs	r2, #0
 800203a:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 800203e:	4823      	ldr	r0, [pc, #140]	; (80020cc <MX_GPIO_Init+0x124>)
 8002040:	f000 fe66 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002044:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002048:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800204a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800204e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	4619      	mov	r1, r3
 800205a:	481c      	ldr	r0, [pc, #112]	; (80020cc <MX_GPIO_Init+0x124>)
 800205c:	f000 fc96 	bl	800298c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin nSleep_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|nSleep_Pin;
 8002060:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002066:	2301      	movs	r3, #1
 8002068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2300      	movs	r3, #0
 8002070:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002072:	f107 0314 	add.w	r3, r7, #20
 8002076:	4619      	mov	r1, r3
 8002078:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800207c:	f000 fc86 	bl	800298c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SS_Pin */
  GPIO_InitStruct.Pin = SPI2_SS_Pin;
 8002080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002086:	2301      	movs	r3, #1
 8002088:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208e:	2300      	movs	r3, #0
 8002090:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_SS_GPIO_Port, &GPIO_InitStruct);
 8002092:	f107 0314 	add.w	r3, r7, #20
 8002096:	4619      	mov	r1, r3
 8002098:	480b      	ldr	r0, [pc, #44]	; (80020c8 <MX_GPIO_Init+0x120>)
 800209a:	f000 fc77 	bl	800298c <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM_sync_Pin PWM_timer_Pin */
  GPIO_InitStruct.Pin = PWM_sync_Pin|PWM_timer_Pin;
 800209e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020a4:	2301      	movs	r3, #1
 80020a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	4619      	mov	r1, r3
 80020b6:	4805      	ldr	r0, [pc, #20]	; (80020cc <MX_GPIO_Init+0x124>)
 80020b8:	f000 fc68 	bl	800298c <HAL_GPIO_Init>

}
 80020bc:	bf00      	nop
 80020be:	3728      	adds	r7, #40	; 0x28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000
 80020c8:	48000400 	.word	0x48000400
 80020cc:	48000800 	.word	0x48000800

080020d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020d4:	b672      	cpsid	i
}
 80020d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <Error_Handler+0x8>
	...

080020dc <pwm_sine>:


#define pas_deg sizeof phase_A / sizeof phase_A[0]

void pwm_sine(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af02      	add	r7, sp, #8
	if(cpt_pwm >= 10)   				//correspond to 2800us (28*100us)
 80020e2:	4b49      	ldr	r3, [pc, #292]	; (8002208 <pwm_sine+0x12c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b09      	cmp	r3, #9
 80020e8:	f240 8086 	bls.w	80021f8 <pwm_sine+0x11c>
	{
		cpt_pwm =0;//reset
 80020ec:	4b46      	ldr	r3, [pc, #280]	; (8002208 <pwm_sine+0x12c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]

		//Set PWM duty_cycle A   (reset = 0x0000 )
		//fill TX buffer for SPI--------------------------------------------
		buf_SPI_TX[0] = 0x00;               					//cmd
 80020f2:	4b46      	ldr	r3, [pc, #280]	; (800220c <pwm_sine+0x130>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
		buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_A_DUTY <<3);  	//reg adr + cmd
 80020f8:	4b44      	ldr	r3, [pc, #272]	; (800220c <pwm_sine+0x130>)
 80020fa:	22c8      	movs	r2, #200	; 0xc8
 80020fc:	705a      	strb	r2, [r3, #1]
		buf_SPI_TX[2] = 0x00;				//data (si read osf)
 80020fe:	4b43      	ldr	r3, [pc, #268]	; (800220c <pwm_sine+0x130>)
 8002100:	2200      	movs	r2, #0
 8002102:	709a      	strb	r2, [r3, #2]
		buf_SPI_TX[3] = phase_A[cpt_deg];									//data (si read osf)
 8002104:	4b42      	ldr	r3, [pc, #264]	; (8002210 <pwm_sine+0x134>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a42      	ldr	r2, [pc, #264]	; (8002214 <pwm_sine+0x138>)
 800210a:	5cd2      	ldrb	r2, [r2, r3]
 800210c:	4b3f      	ldr	r3, [pc, #252]	; (800220c <pwm_sine+0x130>)
 800210e:	70da      	strb	r2, [r3, #3]
		//Send/Read Datas---------------------------------------------------
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8002110:	2200      	movs	r2, #0
 8002112:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002116:	4840      	ldr	r0, [pc, #256]	; (8002218 <pwm_sine+0x13c>)
 8002118:	f000 fdfa 	bl	8002d10 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 800211c:	f04f 33ff 	mov.w	r3, #4294967295
 8002120:	9300      	str	r3, [sp, #0]
 8002122:	2304      	movs	r3, #4
 8002124:	4a3d      	ldr	r2, [pc, #244]	; (800221c <pwm_sine+0x140>)
 8002126:	4939      	ldr	r1, [pc, #228]	; (800220c <pwm_sine+0x130>)
 8002128:	483d      	ldr	r0, [pc, #244]	; (8002220 <pwm_sine+0x144>)
 800212a:	f002 ffb6 	bl	800509a <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 800212e:	2201      	movs	r2, #1
 8002130:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002134:	4838      	ldr	r0, [pc, #224]	; (8002218 <pwm_sine+0x13c>)
 8002136:	f000 fdeb 	bl	8002d10 <HAL_GPIO_WritePin>
		//Set PWM duty_cycle B   (reset = 0x0000 )
		//fill TX buffer for SPI--------------------------------------------
		buf_SPI_TX[0] = 0x00;               					//cmd
 800213a:	4b34      	ldr	r3, [pc, #208]	; (800220c <pwm_sine+0x130>)
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]
		buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_B_DUTY <<3);  	//reg adr + cmd
 8002140:	4b32      	ldr	r3, [pc, #200]	; (800220c <pwm_sine+0x130>)
 8002142:	22d0      	movs	r2, #208	; 0xd0
 8002144:	705a      	strb	r2, [r3, #1]
		buf_SPI_TX[2] = 0x00;				//data (si read osf)
 8002146:	4b31      	ldr	r3, [pc, #196]	; (800220c <pwm_sine+0x130>)
 8002148:	2200      	movs	r2, #0
 800214a:	709a      	strb	r2, [r3, #2]
		buf_SPI_TX[3] = phase_B[cpt_deg];									//data (si read osf)
 800214c:	4b30      	ldr	r3, [pc, #192]	; (8002210 <pwm_sine+0x134>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a34      	ldr	r2, [pc, #208]	; (8002224 <pwm_sine+0x148>)
 8002152:	5cd2      	ldrb	r2, [r2, r3]
 8002154:	4b2d      	ldr	r3, [pc, #180]	; (800220c <pwm_sine+0x130>)
 8002156:	70da      	strb	r2, [r3, #3]
		//Send/Read Datas---------------------------------------------------
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8002158:	2200      	movs	r2, #0
 800215a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800215e:	482e      	ldr	r0, [pc, #184]	; (8002218 <pwm_sine+0x13c>)
 8002160:	f000 fdd6 	bl	8002d10 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8002164:	f04f 33ff 	mov.w	r3, #4294967295
 8002168:	9300      	str	r3, [sp, #0]
 800216a:	2304      	movs	r3, #4
 800216c:	4a2b      	ldr	r2, [pc, #172]	; (800221c <pwm_sine+0x140>)
 800216e:	4927      	ldr	r1, [pc, #156]	; (800220c <pwm_sine+0x130>)
 8002170:	482b      	ldr	r0, [pc, #172]	; (8002220 <pwm_sine+0x144>)
 8002172:	f002 ff92 	bl	800509a <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8002176:	2201      	movs	r2, #1
 8002178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800217c:	4826      	ldr	r0, [pc, #152]	; (8002218 <pwm_sine+0x13c>)
 800217e:	f000 fdc7 	bl	8002d10 <HAL_GPIO_WritePin>

		//Set PWM duty_cycle C   (reset = 0x0000 )
		//fill TX buffer for SPI--------------------------------------------
		buf_SPI_TX[0] = 0x00;               					//cmd
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <pwm_sine+0x130>)
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
		buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_C_DUTY <<3);  	//reg adr + cmd
 8002188:	4b20      	ldr	r3, [pc, #128]	; (800220c <pwm_sine+0x130>)
 800218a:	22d8      	movs	r2, #216	; 0xd8
 800218c:	705a      	strb	r2, [r3, #1]
		buf_SPI_TX[2] = 0x00;				//data (si read osf)
 800218e:	4b1f      	ldr	r3, [pc, #124]	; (800220c <pwm_sine+0x130>)
 8002190:	2200      	movs	r2, #0
 8002192:	709a      	strb	r2, [r3, #2]
		buf_SPI_TX[3] = phase_C[cpt_deg];									//data (si read osf)
 8002194:	4b1e      	ldr	r3, [pc, #120]	; (8002210 <pwm_sine+0x134>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a23      	ldr	r2, [pc, #140]	; (8002228 <pwm_sine+0x14c>)
 800219a:	5cd2      	ldrb	r2, [r2, r3]
 800219c:	4b1b      	ldr	r3, [pc, #108]	; (800220c <pwm_sine+0x130>)
 800219e:	70da      	strb	r2, [r3, #3]
		//Send/Read Datas---------------------------------------------------
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80021a0:	2200      	movs	r2, #0
 80021a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021a6:	481c      	ldr	r0, [pc, #112]	; (8002218 <pwm_sine+0x13c>)
 80021a8:	f000 fdb2 	bl	8002d10 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80021ac:	f04f 33ff 	mov.w	r3, #4294967295
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	2304      	movs	r3, #4
 80021b4:	4a19      	ldr	r2, [pc, #100]	; (800221c <pwm_sine+0x140>)
 80021b6:	4915      	ldr	r1, [pc, #84]	; (800220c <pwm_sine+0x130>)
 80021b8:	4819      	ldr	r0, [pc, #100]	; (8002220 <pwm_sine+0x144>)
 80021ba:	f002 ff6e 	bl	800509a <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80021be:	2201      	movs	r2, #1
 80021c0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021c4:	4814      	ldr	r0, [pc, #80]	; (8002218 <pwm_sine+0x13c>)
 80021c6:	f000 fda3 	bl	8002d10 <HAL_GPIO_WritePin>


		//if button not pressed: clockwise else counter clockwise
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1)
 80021ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021ce:	4817      	ldr	r0, [pc, #92]	; (800222c <pwm_sine+0x150>)
 80021d0:	f000 fd86 	bl	8002ce0 <HAL_GPIO_ReadPin>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d113      	bne.n	8002202 <pwm_sine+0x126>
		{
			//clockwise direction
			if(cpt_deg>=pas_deg-1)			//360°
 80021da:	4b0d      	ldr	r3, [pc, #52]	; (8002210 <pwm_sine+0x134>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 80021e2:	d903      	bls.n	80021ec <pwm_sine+0x110>
			{
				cpt_deg =0;					//reset cpt °
 80021e4:	4b0a      	ldr	r3, [pc, #40]	; (8002210 <pwm_sine+0x134>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
	else
	{
		cpt_pwm++;
	}
	//HAL_GPIO_TogglePin(PWM_timer_GPIO_Port, PWM_timer_Pin);
}
 80021ea:	e00a      	b.n	8002202 <pwm_sine+0x126>
				cpt_deg++;					//+1°
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <pwm_sine+0x134>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3301      	adds	r3, #1
 80021f2:	4a07      	ldr	r2, [pc, #28]	; (8002210 <pwm_sine+0x134>)
 80021f4:	6013      	str	r3, [r2, #0]
}
 80021f6:	e004      	b.n	8002202 <pwm_sine+0x126>
		cpt_pwm++;
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <pwm_sine+0x12c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	3301      	adds	r3, #1
 80021fe:	4a02      	ldr	r2, [pc, #8]	; (8002208 <pwm_sine+0x12c>)
 8002200:	6013      	str	r3, [r2, #0]
}
 8002202:	bf00      	nop
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	200006d4 	.word	0x200006d4
 800220c:	20000694 	.word	0x20000694
 8002210:	200006d8 	.word	0x200006d8
 8002214:	20000000 	.word	0x20000000
 8002218:	48000400 	.word	0x48000400
 800221c:	200006a8 	.word	0x200006a8
 8002220:	20000514 	.word	0x20000514
 8002224:	20000168 	.word	0x20000168
 8002228:	200002d0 	.word	0x200002d0
 800222c:	48000800 	.word	0x48000800

08002230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002236:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <HAL_MspInit+0x44>)
 8002238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223a:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <HAL_MspInit+0x44>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6613      	str	r3, [r2, #96]	; 0x60
 8002242:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <HAL_MspInit+0x44>)
 8002244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <HAL_MspInit+0x44>)
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	4a08      	ldr	r2, [pc, #32]	; (8002274 <HAL_MspInit+0x44>)
 8002254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002258:	6593      	str	r3, [r2, #88]	; 0x58
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_MspInit+0x44>)
 800225c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800225e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002262:	603b      	str	r3, [r7, #0]
 8002264:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	40021000 	.word	0x40021000

08002278 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b0ac      	sub	sp, #176	; 0xb0
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002290:	f107 0314 	add.w	r3, r7, #20
 8002294:	2288      	movs	r2, #136	; 0x88
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f004 fc0b 	bl	8006ab4 <memset>
  if(hi2c->Instance==I2C1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a21      	ldr	r2, [pc, #132]	; (8002328 <HAL_I2C_MspInit+0xb0>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d13b      	bne.n	8002320 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80022a8:	2340      	movs	r3, #64	; 0x40
 80022aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80022ac:	2300      	movs	r3, #0
 80022ae:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	4618      	mov	r0, r3
 80022b6:	f002 f991 	bl	80045dc <HAL_RCCEx_PeriphCLKConfig>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80022c0:	f7ff ff06 	bl	80020d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_I2C_MspInit+0xb4>)
 80022c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c8:	4a18      	ldr	r2, [pc, #96]	; (800232c <HAL_I2C_MspInit+0xb4>)
 80022ca:	f043 0302 	orr.w	r3, r3, #2
 80022ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022d0:	4b16      	ldr	r3, [pc, #88]	; (800232c <HAL_I2C_MspInit+0xb4>)
 80022d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022e4:	2312      	movs	r3, #18
 80022e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f0:	2303      	movs	r3, #3
 80022f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022f6:	2304      	movs	r3, #4
 80022f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002300:	4619      	mov	r1, r3
 8002302:	480b      	ldr	r0, [pc, #44]	; (8002330 <HAL_I2C_MspInit+0xb8>)
 8002304:	f000 fb42 	bl	800298c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002308:	4b08      	ldr	r3, [pc, #32]	; (800232c <HAL_I2C_MspInit+0xb4>)
 800230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230c:	4a07      	ldr	r2, [pc, #28]	; (800232c <HAL_I2C_MspInit+0xb4>)
 800230e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002312:	6593      	str	r3, [r2, #88]	; 0x58
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <HAL_I2C_MspInit+0xb4>)
 8002316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002320:	bf00      	nop
 8002322:	37b0      	adds	r7, #176	; 0xb0
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40005400 	.word	0x40005400
 800232c:	40021000 	.word	0x40021000
 8002330:	48000400 	.word	0x48000400

08002334 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a25      	ldr	r2, [pc, #148]	; (80023e8 <HAL_SPI_MspInit+0xb4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d144      	bne.n	80023e0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002356:	4b25      	ldr	r3, [pc, #148]	; (80023ec <HAL_SPI_MspInit+0xb8>)
 8002358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235a:	4a24      	ldr	r2, [pc, #144]	; (80023ec <HAL_SPI_MspInit+0xb8>)
 800235c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002360:	6593      	str	r3, [r2, #88]	; 0x58
 8002362:	4b22      	ldr	r3, [pc, #136]	; (80023ec <HAL_SPI_MspInit+0xb8>)
 8002364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800236e:	4b1f      	ldr	r3, [pc, #124]	; (80023ec <HAL_SPI_MspInit+0xb8>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002372:	4a1e      	ldr	r2, [pc, #120]	; (80023ec <HAL_SPI_MspInit+0xb8>)
 8002374:	f043 0304 	orr.w	r3, r3, #4
 8002378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800237a:	4b1c      	ldr	r3, [pc, #112]	; (80023ec <HAL_SPI_MspInit+0xb8>)
 800237c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002386:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_SPI_MspInit+0xb8>)
 8002388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238a:	4a18      	ldr	r2, [pc, #96]	; (80023ec <HAL_SPI_MspInit+0xb8>)
 800238c:	f043 0302 	orr.w	r3, r3, #2
 8002390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002392:	4b16      	ldr	r3, [pc, #88]	; (80023ec <HAL_SPI_MspInit+0xb8>)
 8002394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800239e:	230c      	movs	r3, #12
 80023a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023aa:	2303      	movs	r3, #3
 80023ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023ae:	2305      	movs	r3, #5
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b2:	f107 0314 	add.w	r3, r7, #20
 80023b6:	4619      	mov	r1, r3
 80023b8:	480d      	ldr	r0, [pc, #52]	; (80023f0 <HAL_SPI_MspInit+0xbc>)
 80023ba:	f000 fae7 	bl	800298c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c4:	2302      	movs	r3, #2
 80023c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c8:	2300      	movs	r3, #0
 80023ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023cc:	2303      	movs	r3, #3
 80023ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023d0:	2305      	movs	r3, #5
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	4619      	mov	r1, r3
 80023da:	4806      	ldr	r0, [pc, #24]	; (80023f4 <HAL_SPI_MspInit+0xc0>)
 80023dc:	f000 fad6 	bl	800298c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80023e0:	bf00      	nop
 80023e2:	3728      	adds	r7, #40	; 0x28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40003800 	.word	0x40003800
 80023ec:	40021000 	.word	0x40021000
 80023f0:	48000800 	.word	0x48000800
 80023f4:	48000400 	.word	0x48000400

080023f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002408:	d114      	bne.n	8002434 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800240a:	4b19      	ldr	r3, [pc, #100]	; (8002470 <HAL_TIM_Base_MspInit+0x78>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800240e:	4a18      	ldr	r2, [pc, #96]	; (8002470 <HAL_TIM_Base_MspInit+0x78>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6593      	str	r3, [r2, #88]	; 0x58
 8002416:	4b16      	ldr	r3, [pc, #88]	; (8002470 <HAL_TIM_Base_MspInit+0x78>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	2100      	movs	r1, #0
 8002426:	201c      	movs	r0, #28
 8002428:	f000 fa79 	bl	800291e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800242c:	201c      	movs	r0, #28
 800242e:	f000 fa92 	bl	8002956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002432:	e018      	b.n	8002466 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a0e      	ldr	r2, [pc, #56]	; (8002474 <HAL_TIM_Base_MspInit+0x7c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d113      	bne.n	8002466 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800243e:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <HAL_TIM_Base_MspInit+0x78>)
 8002440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002442:	4a0b      	ldr	r2, [pc, #44]	; (8002470 <HAL_TIM_Base_MspInit+0x78>)
 8002444:	f043 0302 	orr.w	r3, r3, #2
 8002448:	6593      	str	r3, [r2, #88]	; 0x58
 800244a:	4b09      	ldr	r3, [pc, #36]	; (8002470 <HAL_TIM_Base_MspInit+0x78>)
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	60bb      	str	r3, [r7, #8]
 8002454:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2100      	movs	r1, #0
 800245a:	201d      	movs	r0, #29
 800245c:	f000 fa5f 	bl	800291e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002460:	201d      	movs	r0, #29
 8002462:	f000 fa78 	bl	8002956 <HAL_NVIC_EnableIRQ>
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
 8002474:	40000400 	.word	0x40000400

08002478 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b0ac      	sub	sp, #176	; 0xb0
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002480:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
 800248e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002490:	f107 0314 	add.w	r3, r7, #20
 8002494:	2288      	movs	r2, #136	; 0x88
 8002496:	2100      	movs	r1, #0
 8002498:	4618      	mov	r0, r3
 800249a:	f004 fb0b 	bl	8006ab4 <memset>
  if(huart->Instance==USART2)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a21      	ldr	r2, [pc, #132]	; (8002528 <HAL_UART_MspInit+0xb0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d13b      	bne.n	8002520 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80024a8:	2302      	movs	r3, #2
 80024aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80024ac:	2300      	movs	r3, #0
 80024ae:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	4618      	mov	r0, r3
 80024b6:	f002 f891 	bl	80045dc <HAL_RCCEx_PeriphCLKConfig>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80024c0:	f7ff fe06 	bl	80020d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_UART_MspInit+0xb4>)
 80024c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c8:	4a18      	ldr	r2, [pc, #96]	; (800252c <HAL_UART_MspInit+0xb4>)
 80024ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ce:	6593      	str	r3, [r2, #88]	; 0x58
 80024d0:	4b16      	ldr	r3, [pc, #88]	; (800252c <HAL_UART_MspInit+0xb4>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024dc:	4b13      	ldr	r3, [pc, #76]	; (800252c <HAL_UART_MspInit+0xb4>)
 80024de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e0:	4a12      	ldr	r2, [pc, #72]	; (800252c <HAL_UART_MspInit+0xb4>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024e8:	4b10      	ldr	r3, [pc, #64]	; (800252c <HAL_UART_MspInit+0xb4>)
 80024ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ec:	f003 0301 	and.w	r3, r3, #1
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024f4:	230c      	movs	r3, #12
 80024f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fa:	2302      	movs	r3, #2
 80024fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002506:	2303      	movs	r3, #3
 8002508:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800250c:	2307      	movs	r3, #7
 800250e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002512:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002516:	4619      	mov	r1, r3
 8002518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800251c:	f000 fa36 	bl	800298c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002520:	bf00      	nop
 8002522:	37b0      	adds	r7, #176	; 0xb0
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40004400 	.word	0x40004400
 800252c:	40021000 	.word	0x40021000

08002530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002534:	e7fe      	b.n	8002534 <NMI_Handler+0x4>

08002536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002536:	b480      	push	{r7}
 8002538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800253a:	e7fe      	b.n	800253a <HardFault_Handler+0x4>

0800253c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002540:	e7fe      	b.n	8002540 <MemManage_Handler+0x4>

08002542 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002542:	b480      	push	{r7}
 8002544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002546:	e7fe      	b.n	8002546 <BusFault_Handler+0x4>

08002548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800254c:	e7fe      	b.n	800254c <UsageFault_Handler+0x4>

0800254e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr

0800256a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800256a:	b480      	push	{r7}
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800257c:	f000 f8b0 	bl	80026e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002580:	bf00      	nop
 8002582:	bd80      	pop	{r7, pc}

08002584 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002588:	4802      	ldr	r0, [pc, #8]	; (8002594 <TIM2_IRQHandler+0x10>)
 800258a:	f003 f9c5 	bl	8005918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	20000578 	.word	0x20000578

08002598 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800259c:	4803      	ldr	r0, [pc, #12]	; (80025ac <TIM3_IRQHandler+0x14>)
 800259e:	f003 f9bb 	bl	8005918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  pwm_sine();
 80025a2:	f7ff fd9b 	bl	80020dc <pwm_sine>
  /* USER CODE END TIM3_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200005c4 	.word	0x200005c4

080025b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <SystemInit+0x20>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <SystemInit+0x20>)
 80025bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
    ldr   sp, =_estack    /* Set stack pointer */
 80025d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800260c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025d8:	f7ff ffea 	bl	80025b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025dc:	480c      	ldr	r0, [pc, #48]	; (8002610 <LoopForever+0x6>)
  ldr r1, =_edata
 80025de:	490d      	ldr	r1, [pc, #52]	; (8002614 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025e0:	4a0d      	ldr	r2, [pc, #52]	; (8002618 <LoopForever+0xe>)
  movs r3, #0
 80025e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e4:	e002      	b.n	80025ec <LoopCopyDataInit>

080025e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025ea:	3304      	adds	r3, #4

080025ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025f0:	d3f9      	bcc.n	80025e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025f2:	4a0a      	ldr	r2, [pc, #40]	; (800261c <LoopForever+0x12>)
  ldr r4, =_ebss
 80025f4:	4c0a      	ldr	r4, [pc, #40]	; (8002620 <LoopForever+0x16>)
  movs r3, #0
 80025f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f8:	e001      	b.n	80025fe <LoopFillZerobss>

080025fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025fc:	3204      	adds	r2, #4

080025fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002600:	d3fb      	bcc.n	80025fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002602:	f004 fa33 	bl	8006a6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002606:	f7ff fafb 	bl	8001c00 <main>

0800260a <LoopForever>:

LoopForever:
    b LoopForever
 800260a:	e7fe      	b.n	800260a <LoopForever>
    ldr   sp, =_estack    /* Set stack pointer */
 800260c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002610:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002614:	20000444 	.word	0x20000444
  ldr r2, =_sidata
 8002618:	08006b34 	.word	0x08006b34
  ldr r2, =_sbss
 800261c:	20000444 	.word	0x20000444
  ldr r4, =_ebss
 8002620:	200006e0 	.word	0x200006e0

08002624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002624:	e7fe      	b.n	8002624 <ADC1_2_IRQHandler>
	...

08002628 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002632:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <HAL_Init+0x3c>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a0b      	ldr	r2, [pc, #44]	; (8002664 <HAL_Init+0x3c>)
 8002638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800263e:	2003      	movs	r0, #3
 8002640:	f000 f962 	bl	8002908 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002644:	2000      	movs	r0, #0
 8002646:	f000 f80f 	bl	8002668 <HAL_InitTick>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d002      	beq.n	8002656 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	71fb      	strb	r3, [r7, #7]
 8002654:	e001      	b.n	800265a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002656:	f7ff fdeb 	bl	8002230 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800265a:	79fb      	ldrb	r3, [r7, #7]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3708      	adds	r7, #8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40022000 	.word	0x40022000

08002668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002674:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <HAL_InitTick+0x6c>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d023      	beq.n	80026c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800267c:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <HAL_InitTick+0x70>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <HAL_InitTick+0x6c>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800268a:	fbb3 f3f1 	udiv	r3, r3, r1
 800268e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f96d 	bl	8002972 <HAL_SYSTICK_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10f      	bne.n	80026be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b0f      	cmp	r3, #15
 80026a2:	d809      	bhi.n	80026b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a4:	2200      	movs	r2, #0
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ac:	f000 f937 	bl	800291e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026b0:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <HAL_InitTick+0x74>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e007      	b.n	80026c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
 80026bc:	e004      	b.n	80026c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	e001      	b.n	80026c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000440 	.word	0x20000440
 80026d8:	20000438 	.word	0x20000438
 80026dc:	2000043c 	.word	0x2000043c

080026e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_IncTick+0x20>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_IncTick+0x24>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	4a04      	ldr	r2, [pc, #16]	; (8002704 <HAL_IncTick+0x24>)
 80026f2:	6013      	str	r3, [r2, #0]
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20000440 	.word	0x20000440
 8002704:	200006dc 	.word	0x200006dc

08002708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return uwTick;
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <HAL_GetTick+0x14>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	200006dc 	.word	0x200006dc

08002720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002728:	f7ff ffee 	bl	8002708 <HAL_GetTick>
 800272c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d005      	beq.n	8002746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <HAL_Delay+0x44>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4413      	add	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002746:	bf00      	nop
 8002748:	f7ff ffde 	bl	8002708 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	429a      	cmp	r2, r3
 8002756:	d8f7      	bhi.n	8002748 <HAL_Delay+0x28>
  {
  }
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000440 	.word	0x20000440

08002768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <__NVIC_SetPriorityGrouping+0x44>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002784:	4013      	ands	r3, r2
 8002786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800279a:	4a04      	ldr	r2, [pc, #16]	; (80027ac <__NVIC_SetPriorityGrouping+0x44>)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	60d3      	str	r3, [r2, #12]
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <__NVIC_GetPriorityGrouping+0x18>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	0a1b      	lsrs	r3, r3, #8
 80027ba:	f003 0307 	and.w	r3, r3, #7
}
 80027be:	4618      	mov	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	db0b      	blt.n	80027f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	f003 021f 	and.w	r2, r3, #31
 80027e4:	4907      	ldr	r1, [pc, #28]	; (8002804 <__NVIC_EnableIRQ+0x38>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	2001      	movs	r0, #1
 80027ee:	fa00 f202 	lsl.w	r2, r0, r2
 80027f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000e100 	.word	0xe000e100

08002808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	6039      	str	r1, [r7, #0]
 8002812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002818:	2b00      	cmp	r3, #0
 800281a:	db0a      	blt.n	8002832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	490c      	ldr	r1, [pc, #48]	; (8002854 <__NVIC_SetPriority+0x4c>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	0112      	lsls	r2, r2, #4
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	440b      	add	r3, r1
 800282c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002830:	e00a      	b.n	8002848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4908      	ldr	r1, [pc, #32]	; (8002858 <__NVIC_SetPriority+0x50>)
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	3b04      	subs	r3, #4
 8002840:	0112      	lsls	r2, r2, #4
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	440b      	add	r3, r1
 8002846:	761a      	strb	r2, [r3, #24]
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000e100 	.word	0xe000e100
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	; 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f1c3 0307 	rsb	r3, r3, #7
 8002876:	2b04      	cmp	r3, #4
 8002878:	bf28      	it	cs
 800287a:	2304      	movcs	r3, #4
 800287c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3304      	adds	r3, #4
 8002882:	2b06      	cmp	r3, #6
 8002884:	d902      	bls.n	800288c <NVIC_EncodePriority+0x30>
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3b03      	subs	r3, #3
 800288a:	e000      	b.n	800288e <NVIC_EncodePriority+0x32>
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	f04f 32ff 	mov.w	r2, #4294967295
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43da      	mvns	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	401a      	ands	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a4:	f04f 31ff 	mov.w	r1, #4294967295
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	43d9      	mvns	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	4313      	orrs	r3, r2
         );
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3724      	adds	r7, #36	; 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028d4:	d301      	bcc.n	80028da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028d6:	2301      	movs	r3, #1
 80028d8:	e00f      	b.n	80028fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028da:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <SysTick_Config+0x40>)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3b01      	subs	r3, #1
 80028e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028e2:	210f      	movs	r1, #15
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295
 80028e8:	f7ff ff8e 	bl	8002808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <SysTick_Config+0x40>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028f2:	4b04      	ldr	r3, [pc, #16]	; (8002904 <SysTick_Config+0x40>)
 80028f4:	2207      	movs	r2, #7
 80028f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	e000e010 	.word	0xe000e010

08002908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff ff29 	bl	8002768 <__NVIC_SetPriorityGrouping>
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b086      	sub	sp, #24
 8002922:	af00      	add	r7, sp, #0
 8002924:	4603      	mov	r3, r0
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002930:	f7ff ff3e 	bl	80027b0 <__NVIC_GetPriorityGrouping>
 8002934:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	6978      	ldr	r0, [r7, #20]
 800293c:	f7ff ff8e 	bl	800285c <NVIC_EncodePriority>
 8002940:	4602      	mov	r2, r0
 8002942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff ff5d 	bl	8002808 <__NVIC_SetPriority>
}
 800294e:	bf00      	nop
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff31 	bl	80027cc <__NVIC_EnableIRQ>
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff ffa2 	bl	80028c4 <SysTick_Config>
 8002980:	4603      	mov	r3, r0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002996:	2300      	movs	r3, #0
 8002998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800299a:	e17f      	b.n	8002c9c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	2101      	movs	r1, #1
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	fa01 f303 	lsl.w	r3, r1, r3
 80029a8:	4013      	ands	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8171 	beq.w	8002c96 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f003 0303 	and.w	r3, r3, #3
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d005      	beq.n	80029cc <HAL_GPIO_Init+0x40>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d130      	bne.n	8002a2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	2203      	movs	r2, #3
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	4013      	ands	r3, r2
 80029e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a02:	2201      	movs	r2, #1
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	693a      	ldr	r2, [r7, #16]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	091b      	lsrs	r3, r3, #4
 8002a18:	f003 0201 	and.w	r2, r3, #1
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d118      	bne.n	8002a6c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a40:	2201      	movs	r2, #1
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	08db      	lsrs	r3, r3, #3
 8002a56:	f003 0201 	and.w	r2, r3, #1
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d017      	beq.n	8002aa8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	2203      	movs	r2, #3
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d123      	bne.n	8002afc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	08da      	lsrs	r2, r3, #3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3208      	adds	r2, #8
 8002abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	220f      	movs	r2, #15
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	08da      	lsrs	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3208      	adds	r2, #8
 8002af6:	6939      	ldr	r1, [r7, #16]
 8002af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2203      	movs	r2, #3
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0203 	and.w	r2, r3, #3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80ac 	beq.w	8002c96 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3e:	4b5f      	ldr	r3, [pc, #380]	; (8002cbc <HAL_GPIO_Init+0x330>)
 8002b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b42:	4a5e      	ldr	r2, [pc, #376]	; (8002cbc <HAL_GPIO_Init+0x330>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	6613      	str	r3, [r2, #96]	; 0x60
 8002b4a:	4b5c      	ldr	r3, [pc, #368]	; (8002cbc <HAL_GPIO_Init+0x330>)
 8002b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	60bb      	str	r3, [r7, #8]
 8002b54:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b56:	4a5a      	ldr	r2, [pc, #360]	; (8002cc0 <HAL_GPIO_Init+0x334>)
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	089b      	lsrs	r3, r3, #2
 8002b5c:	3302      	adds	r3, #2
 8002b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b62:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	220f      	movs	r2, #15
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43db      	mvns	r3, r3
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b80:	d025      	beq.n	8002bce <HAL_GPIO_Init+0x242>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4f      	ldr	r2, [pc, #316]	; (8002cc4 <HAL_GPIO_Init+0x338>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d01f      	beq.n	8002bca <HAL_GPIO_Init+0x23e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4e      	ldr	r2, [pc, #312]	; (8002cc8 <HAL_GPIO_Init+0x33c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d019      	beq.n	8002bc6 <HAL_GPIO_Init+0x23a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a4d      	ldr	r2, [pc, #308]	; (8002ccc <HAL_GPIO_Init+0x340>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d013      	beq.n	8002bc2 <HAL_GPIO_Init+0x236>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a4c      	ldr	r2, [pc, #304]	; (8002cd0 <HAL_GPIO_Init+0x344>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d00d      	beq.n	8002bbe <HAL_GPIO_Init+0x232>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a4b      	ldr	r2, [pc, #300]	; (8002cd4 <HAL_GPIO_Init+0x348>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d007      	beq.n	8002bba <HAL_GPIO_Init+0x22e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a4a      	ldr	r2, [pc, #296]	; (8002cd8 <HAL_GPIO_Init+0x34c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d101      	bne.n	8002bb6 <HAL_GPIO_Init+0x22a>
 8002bb2:	2306      	movs	r3, #6
 8002bb4:	e00c      	b.n	8002bd0 <HAL_GPIO_Init+0x244>
 8002bb6:	2307      	movs	r3, #7
 8002bb8:	e00a      	b.n	8002bd0 <HAL_GPIO_Init+0x244>
 8002bba:	2305      	movs	r3, #5
 8002bbc:	e008      	b.n	8002bd0 <HAL_GPIO_Init+0x244>
 8002bbe:	2304      	movs	r3, #4
 8002bc0:	e006      	b.n	8002bd0 <HAL_GPIO_Init+0x244>
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e004      	b.n	8002bd0 <HAL_GPIO_Init+0x244>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e002      	b.n	8002bd0 <HAL_GPIO_Init+0x244>
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e000      	b.n	8002bd0 <HAL_GPIO_Init+0x244>
 8002bce:	2300      	movs	r3, #0
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	f002 0203 	and.w	r2, r2, #3
 8002bd6:	0092      	lsls	r2, r2, #2
 8002bd8:	4093      	lsls	r3, r2
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002be0:	4937      	ldr	r1, [pc, #220]	; (8002cc0 <HAL_GPIO_Init+0x334>)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	089b      	lsrs	r3, r3, #2
 8002be6:	3302      	adds	r3, #2
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bee:	4b3b      	ldr	r3, [pc, #236]	; (8002cdc <HAL_GPIO_Init+0x350>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c12:	4a32      	ldr	r2, [pc, #200]	; (8002cdc <HAL_GPIO_Init+0x350>)
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c18:	4b30      	ldr	r3, [pc, #192]	; (8002cdc <HAL_GPIO_Init+0x350>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4013      	ands	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d003      	beq.n	8002c3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c3c:	4a27      	ldr	r2, [pc, #156]	; (8002cdc <HAL_GPIO_Init+0x350>)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c42:	4b26      	ldr	r3, [pc, #152]	; (8002cdc <HAL_GPIO_Init+0x350>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4013      	ands	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4313      	orrs	r3, r2
 8002c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c66:	4a1d      	ldr	r2, [pc, #116]	; (8002cdc <HAL_GPIO_Init+0x350>)
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c6c:	4b1b      	ldr	r3, [pc, #108]	; (8002cdc <HAL_GPIO_Init+0x350>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	43db      	mvns	r3, r3
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d003      	beq.n	8002c90 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c90:	4a12      	ldr	r2, [pc, #72]	; (8002cdc <HAL_GPIO_Init+0x350>)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f47f ae78 	bne.w	800299c <HAL_GPIO_Init+0x10>
  }
}
 8002cac:	bf00      	nop
 8002cae:	bf00      	nop
 8002cb0:	371c      	adds	r7, #28
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40010000 	.word	0x40010000
 8002cc4:	48000400 	.word	0x48000400
 8002cc8:	48000800 	.word	0x48000800
 8002ccc:	48000c00 	.word	0x48000c00
 8002cd0:	48001000 	.word	0x48001000
 8002cd4:	48001400 	.word	0x48001400
 8002cd8:	48001800 	.word	0x48001800
 8002cdc:	40010400 	.word	0x40010400

08002ce0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	691a      	ldr	r2, [r3, #16]
 8002cf0:	887b      	ldrh	r3, [r7, #2]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d002      	beq.n	8002cfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	73fb      	strb	r3, [r7, #15]
 8002cfc:	e001      	b.n	8002d02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	807b      	strh	r3, [r7, #2]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d20:	787b      	ldrb	r3, [r7, #1]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d26:	887a      	ldrh	r2, [r7, #2]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d2c:	e002      	b.n	8002d34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d2e:	887a      	ldrh	r2, [r7, #2]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e081      	b.n	8002e56 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff fa86 	bl	8002278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2224      	movs	r2, #36	; 0x24
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d90:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002da0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d107      	bne.n	8002dba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002db6:	609a      	str	r2, [r3, #8]
 8002db8:	e006      	b.n	8002dc8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002dc6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d104      	bne.n	8002dda <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002de8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dfc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691a      	ldr	r2, [r3, #16]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69d9      	ldr	r1, [r3, #28]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a1a      	ldr	r2, [r3, #32]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f042 0201 	orr.w	r2, r2, #1
 8002e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2220      	movs	r2, #32
 8002e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af02      	add	r7, sp, #8
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	4608      	mov	r0, r1
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4603      	mov	r3, r0
 8002e70:	817b      	strh	r3, [r7, #10]
 8002e72:	460b      	mov	r3, r1
 8002e74:	813b      	strh	r3, [r7, #8]
 8002e76:	4613      	mov	r3, r2
 8002e78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	f040 80f9 	bne.w	800307a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d002      	beq.n	8002e94 <HAL_I2C_Mem_Write+0x34>
 8002e8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d105      	bne.n	8002ea0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e9a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0ed      	b.n	800307c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_I2C_Mem_Write+0x4e>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e0e6      	b.n	800307c <HAL_I2C_Mem_Write+0x21c>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002eb6:	f7ff fc27 	bl	8002708 <HAL_GetTick>
 8002eba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	2319      	movs	r3, #25
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 fac3 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0d1      	b.n	800307c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2221      	movs	r2, #33	; 0x21
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2240      	movs	r2, #64	; 0x40
 8002ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a3a      	ldr	r2, [r7, #32]
 8002ef2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f00:	88f8      	ldrh	r0, [r7, #6]
 8002f02:	893a      	ldrh	r2, [r7, #8]
 8002f04:	8979      	ldrh	r1, [r7, #10]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	9301      	str	r3, [sp, #4]
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	4603      	mov	r3, r0
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 f9d3 	bl	80032bc <I2C_RequestMemoryWrite>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0a9      	b.n	800307c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29b      	uxth	r3, r3
 8002f2e:	2bff      	cmp	r3, #255	; 0xff
 8002f30:	d90e      	bls.n	8002f50 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	22ff      	movs	r2, #255	; 0xff
 8002f36:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	8979      	ldrh	r1, [r7, #10]
 8002f40:	2300      	movs	r3, #0
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 fc2b 	bl	80037a4 <I2C_TransferConfig>
 8002f4e:	e00f      	b.n	8002f70 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	8979      	ldrh	r1, [r7, #10]
 8002f62:	2300      	movs	r3, #0
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 fc1a 	bl	80037a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 faad 	bl	80034d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e07b      	b.n	800307c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	781a      	ldrb	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d034      	beq.n	8003028 <HAL_I2C_Mem_Write+0x1c8>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d130      	bne.n	8003028 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fcc:	2200      	movs	r2, #0
 8002fce:	2180      	movs	r1, #128	; 0x80
 8002fd0:	68f8      	ldr	r0, [r7, #12]
 8002fd2:	f000 fa3f 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d001      	beq.n	8002fe0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e04d      	b.n	800307c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	2bff      	cmp	r3, #255	; 0xff
 8002fe8:	d90e      	bls.n	8003008 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	22ff      	movs	r2, #255	; 0xff
 8002fee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	8979      	ldrh	r1, [r7, #10]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fbcf 	bl	80037a4 <I2C_TransferConfig>
 8003006:	e00f      	b.n	8003028 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29a      	uxth	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003016:	b2da      	uxtb	r2, r3
 8003018:	8979      	ldrh	r1, [r7, #10]
 800301a:	2300      	movs	r3, #0
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fbbe 	bl	80037a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d19e      	bne.n	8002f70 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fa8c 	bl	8003554 <I2C_WaitOnSTOPFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e01a      	b.n	800307c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2220      	movs	r2, #32
 800304c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6859      	ldr	r1, [r3, #4]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4b0a      	ldr	r3, [pc, #40]	; (8003084 <HAL_I2C_Mem_Write+0x224>)
 800305a:	400b      	ands	r3, r1
 800305c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	e000      	b.n	800307c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800307a:	2302      	movs	r3, #2
  }
}
 800307c:	4618      	mov	r0, r3
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	fe00e800 	.word	0xfe00e800

08003088 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b088      	sub	sp, #32
 800308c:	af02      	add	r7, sp, #8
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	4608      	mov	r0, r1
 8003092:	4611      	mov	r1, r2
 8003094:	461a      	mov	r2, r3
 8003096:	4603      	mov	r3, r0
 8003098:	817b      	strh	r3, [r7, #10]
 800309a:	460b      	mov	r3, r1
 800309c:	813b      	strh	r3, [r7, #8]
 800309e:	4613      	mov	r3, r2
 80030a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b20      	cmp	r3, #32
 80030ac:	f040 80fd 	bne.w	80032aa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80030b0:	6a3b      	ldr	r3, [r7, #32]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <HAL_I2C_Mem_Read+0x34>
 80030b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d105      	bne.n	80030c8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0f1      	b.n	80032ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_I2C_Mem_Read+0x4e>
 80030d2:	2302      	movs	r3, #2
 80030d4:	e0ea      	b.n	80032ac <HAL_I2C_Mem_Read+0x224>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030de:	f7ff fb13 	bl	8002708 <HAL_GetTick>
 80030e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	2319      	movs	r3, #25
 80030ea:	2201      	movs	r2, #1
 80030ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f000 f9af 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0d5      	b.n	80032ac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2222      	movs	r2, #34	; 0x22
 8003104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2240      	movs	r2, #64	; 0x40
 800310c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6a3a      	ldr	r2, [r7, #32]
 800311a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003120:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003128:	88f8      	ldrh	r0, [r7, #6]
 800312a:	893a      	ldrh	r2, [r7, #8]
 800312c:	8979      	ldrh	r1, [r7, #10]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	9301      	str	r3, [sp, #4]
 8003132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	4603      	mov	r3, r0
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 f913 	bl	8003364 <I2C_RequestMemoryRead>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0ad      	b.n	80032ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003154:	b29b      	uxth	r3, r3
 8003156:	2bff      	cmp	r3, #255	; 0xff
 8003158:	d90e      	bls.n	8003178 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	22ff      	movs	r2, #255	; 0xff
 800315e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003164:	b2da      	uxtb	r2, r3
 8003166:	8979      	ldrh	r1, [r7, #10]
 8003168:	4b52      	ldr	r3, [pc, #328]	; (80032b4 <HAL_I2C_Mem_Read+0x22c>)
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 fb17 	bl	80037a4 <I2C_TransferConfig>
 8003176:	e00f      	b.n	8003198 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003186:	b2da      	uxtb	r2, r3
 8003188:	8979      	ldrh	r1, [r7, #10]
 800318a:	4b4a      	ldr	r3, [pc, #296]	; (80032b4 <HAL_I2C_Mem_Read+0x22c>)
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f000 fb06 	bl	80037a4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319e:	2200      	movs	r2, #0
 80031a0:	2104      	movs	r1, #4
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f956 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e07c      	b.n	80032ac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031bc:	b2d2      	uxtb	r2, r2
 80031be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c4:	1c5a      	adds	r2, r3, #1
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b01      	subs	r3, #1
 80031de:	b29a      	uxth	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d034      	beq.n	8003258 <HAL_I2C_Mem_Read+0x1d0>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d130      	bne.n	8003258 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	2200      	movs	r2, #0
 80031fe:	2180      	movs	r1, #128	; 0x80
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f927 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e04d      	b.n	80032ac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	2bff      	cmp	r3, #255	; 0xff
 8003218:	d90e      	bls.n	8003238 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	22ff      	movs	r2, #255	; 0xff
 800321e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003224:	b2da      	uxtb	r2, r3
 8003226:	8979      	ldrh	r1, [r7, #10]
 8003228:	2300      	movs	r3, #0
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 fab7 	bl	80037a4 <I2C_TransferConfig>
 8003236:	e00f      	b.n	8003258 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003246:	b2da      	uxtb	r2, r3
 8003248:	8979      	ldrh	r1, [r7, #10]
 800324a:	2300      	movs	r3, #0
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 faa6 	bl	80037a4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325c:	b29b      	uxth	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d19a      	bne.n	8003198 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f974 	bl	8003554 <I2C_WaitOnSTOPFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e01a      	b.n	80032ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2220      	movs	r2, #32
 800327c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6859      	ldr	r1, [r3, #4]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <HAL_I2C_Mem_Read+0x230>)
 800328a:	400b      	ands	r3, r1
 800328c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2220      	movs	r2, #32
 8003292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	e000      	b.n	80032ac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80032aa:	2302      	movs	r3, #2
  }
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3718      	adds	r7, #24
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	80002400 	.word	0x80002400
 80032b8:	fe00e800 	.word	0xfe00e800

080032bc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	4608      	mov	r0, r1
 80032c6:	4611      	mov	r1, r2
 80032c8:	461a      	mov	r2, r3
 80032ca:	4603      	mov	r3, r0
 80032cc:	817b      	strh	r3, [r7, #10]
 80032ce:	460b      	mov	r3, r1
 80032d0:	813b      	strh	r3, [r7, #8]
 80032d2:	4613      	mov	r3, r2
 80032d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	8979      	ldrh	r1, [r7, #10]
 80032dc:	4b20      	ldr	r3, [pc, #128]	; (8003360 <I2C_RequestMemoryWrite+0xa4>)
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 fa5d 	bl	80037a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ea:	69fa      	ldr	r2, [r7, #28]
 80032ec:	69b9      	ldr	r1, [r7, #24]
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 f8f0 	bl	80034d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e02c      	b.n	8003358 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d105      	bne.n	8003310 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003304:	893b      	ldrh	r3, [r7, #8]
 8003306:	b2da      	uxtb	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	629a      	str	r2, [r3, #40]	; 0x28
 800330e:	e015      	b.n	800333c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003310:	893b      	ldrh	r3, [r7, #8]
 8003312:	0a1b      	lsrs	r3, r3, #8
 8003314:	b29b      	uxth	r3, r3
 8003316:	b2da      	uxtb	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800331e:	69fa      	ldr	r2, [r7, #28]
 8003320:	69b9      	ldr	r1, [r7, #24]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 f8d6 	bl	80034d4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e012      	b.n	8003358 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003332:	893b      	ldrh	r3, [r7, #8]
 8003334:	b2da      	uxtb	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	2200      	movs	r2, #0
 8003344:	2180      	movs	r1, #128	; 0x80
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f884 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e000      	b.n	8003358 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	80002000 	.word	0x80002000

08003364 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af02      	add	r7, sp, #8
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	4608      	mov	r0, r1
 800336e:	4611      	mov	r1, r2
 8003370:	461a      	mov	r2, r3
 8003372:	4603      	mov	r3, r0
 8003374:	817b      	strh	r3, [r7, #10]
 8003376:	460b      	mov	r3, r1
 8003378:	813b      	strh	r3, [r7, #8]
 800337a:	4613      	mov	r3, r2
 800337c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800337e:	88fb      	ldrh	r3, [r7, #6]
 8003380:	b2da      	uxtb	r2, r3
 8003382:	8979      	ldrh	r1, [r7, #10]
 8003384:	4b20      	ldr	r3, [pc, #128]	; (8003408 <I2C_RequestMemoryRead+0xa4>)
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	2300      	movs	r3, #0
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 fa0a 	bl	80037a4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	69b9      	ldr	r1, [r7, #24]
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 f89d 	bl	80034d4 <I2C_WaitOnTXISFlagUntilTimeout>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e02c      	b.n	80033fe <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033a4:	88fb      	ldrh	r3, [r7, #6]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d105      	bne.n	80033b6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033aa:	893b      	ldrh	r3, [r7, #8]
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	629a      	str	r2, [r3, #40]	; 0x28
 80033b4:	e015      	b.n	80033e2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033b6:	893b      	ldrh	r3, [r7, #8]
 80033b8:	0a1b      	lsrs	r3, r3, #8
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033c4:	69fa      	ldr	r2, [r7, #28]
 80033c6:	69b9      	ldr	r1, [r7, #24]
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f883 	bl	80034d4 <I2C_WaitOnTXISFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e012      	b.n	80033fe <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033d8:	893b      	ldrh	r3, [r7, #8]
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	2200      	movs	r2, #0
 80033ea:	2140      	movs	r1, #64	; 0x40
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f831 	bl	8003454 <I2C_WaitOnFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	80002000 	.word	0x80002000

0800340c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b02      	cmp	r3, #2
 8003420:	d103      	bne.n	800342a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2200      	movs	r2, #0
 8003428:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b01      	cmp	r3, #1
 8003436:	d007      	beq.n	8003448 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699a      	ldr	r2, [r3, #24]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f042 0201 	orr.w	r2, r2, #1
 8003446:	619a      	str	r2, [r3, #24]
  }
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr

08003454 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	4613      	mov	r3, r2
 8003462:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003464:	e022      	b.n	80034ac <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d01e      	beq.n	80034ac <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800346e:	f7ff f94b 	bl	8002708 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	683a      	ldr	r2, [r7, #0]
 800347a:	429a      	cmp	r2, r3
 800347c:	d302      	bcc.n	8003484 <I2C_WaitOnFlagUntilTimeout+0x30>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d113      	bne.n	80034ac <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	f043 0220 	orr.w	r2, r3, #32
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2220      	movs	r2, #32
 8003494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e00f      	b.n	80034cc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699a      	ldr	r2, [r3, #24]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4013      	ands	r3, r2
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d0cd      	beq.n	8003466 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034e0:	e02c      	b.n	800353c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	68b9      	ldr	r1, [r7, #8]
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f870 	bl	80035cc <I2C_IsErrorOccurred>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e02a      	b.n	800354c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fc:	d01e      	beq.n	800353c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fe:	f7ff f903 	bl	8002708 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	429a      	cmp	r2, r3
 800350c:	d302      	bcc.n	8003514 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d113      	bne.n	800353c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	f043 0220 	orr.w	r2, r3, #32
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2220      	movs	r2, #32
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e007      	b.n	800354c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b02      	cmp	r3, #2
 8003548:	d1cb      	bne.n	80034e2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003560:	e028      	b.n	80035b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f830 	bl	80035cc <I2C_IsErrorOccurred>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e026      	b.n	80035c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003576:	f7ff f8c7 	bl	8002708 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	429a      	cmp	r2, r3
 8003584:	d302      	bcc.n	800358c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d113      	bne.n	80035b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003590:	f043 0220 	orr.w	r2, r3, #32
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e007      	b.n	80035c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f003 0320 	and.w	r3, r3, #32
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d1cf      	bne.n	8003562 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b08a      	sub	sp, #40	; 0x28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035e6:	2300      	movs	r3, #0
 80035e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d075      	beq.n	80036e4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2210      	movs	r2, #16
 80035fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003600:	e056      	b.n	80036b0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003608:	d052      	beq.n	80036b0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800360a:	f7ff f87d 	bl	8002708 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	429a      	cmp	r2, r3
 8003618:	d302      	bcc.n	8003620 <I2C_IsErrorOccurred+0x54>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d147      	bne.n	80036b0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800362a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003632:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800363e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003642:	d12e      	bne.n	80036a2 <I2C_IsErrorOccurred+0xd6>
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800364a:	d02a      	beq.n	80036a2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800364c:	7cfb      	ldrb	r3, [r7, #19]
 800364e:	2b20      	cmp	r3, #32
 8003650:	d027      	beq.n	80036a2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003660:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003662:	f7ff f851 	bl	8002708 <HAL_GetTick>
 8003666:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003668:	e01b      	b.n	80036a2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800366a:	f7ff f84d 	bl	8002708 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b19      	cmp	r3, #25
 8003676:	d914      	bls.n	80036a2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367c:	f043 0220 	orr.w	r2, r3, #32
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	d1dc      	bne.n	800366a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b20      	cmp	r3, #32
 80036bc:	d003      	beq.n	80036c6 <I2C_IsErrorOccurred+0xfa>
 80036be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d09d      	beq.n	8003602 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d103      	bne.n	80036d6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2220      	movs	r2, #32
 80036d4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80036d6:	6a3b      	ldr	r3, [r7, #32]
 80036d8:	f043 0304 	orr.w	r3, r3, #4
 80036dc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699b      	ldr	r3, [r3, #24]
 80036ea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00b      	beq.n	800370e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	f043 0301 	orr.w	r3, r3, #1
 80036fc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003706:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00b      	beq.n	8003730 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003718:	6a3b      	ldr	r3, [r7, #32]
 800371a:	f043 0308 	orr.w	r3, r3, #8
 800371e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003728:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00b      	beq.n	8003752 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	f043 0302 	orr.w	r3, r3, #2
 8003740:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800374a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003752:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003756:	2b00      	cmp	r3, #0
 8003758:	d01c      	beq.n	8003794 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f7ff fe56 	bl	800340c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6859      	ldr	r1, [r3, #4]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <I2C_IsErrorOccurred+0x1d4>)
 800376c:	400b      	ands	r3, r1
 800376e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	431a      	orrs	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003798:	4618      	mov	r0, r3
 800379a:	3728      	adds	r7, #40	; 0x28
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	fe00e800 	.word	0xfe00e800

080037a4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b087      	sub	sp, #28
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	607b      	str	r3, [r7, #4]
 80037ae:	460b      	mov	r3, r1
 80037b0:	817b      	strh	r3, [r7, #10]
 80037b2:	4613      	mov	r3, r2
 80037b4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037b6:	897b      	ldrh	r3, [r7, #10]
 80037b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037bc:	7a7b      	ldrb	r3, [r7, #9]
 80037be:	041b      	lsls	r3, r3, #16
 80037c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037c4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80037d2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	0d5b      	lsrs	r3, r3, #21
 80037de:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80037e2:	4b08      	ldr	r3, [pc, #32]	; (8003804 <I2C_TransferConfig+0x60>)
 80037e4:	430b      	orrs	r3, r1
 80037e6:	43db      	mvns	r3, r3
 80037e8:	ea02 0103 	and.w	r1, r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80037f6:	bf00      	nop
 80037f8:	371c      	adds	r7, #28
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	03ff63ff 	.word	0x03ff63ff

08003808 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b20      	cmp	r3, #32
 800381c:	d138      	bne.n	8003890 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003828:	2302      	movs	r3, #2
 800382a:	e032      	b.n	8003892 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2224      	movs	r2, #36	; 0x24
 8003838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0201 	bic.w	r2, r2, #1
 800384a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800385a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6819      	ldr	r1, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	e000      	b.n	8003892 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003890:	2302      	movs	r3, #2
  }
}
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800389e:	b480      	push	{r7}
 80038a0:	b085      	sub	sp, #20
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b20      	cmp	r3, #32
 80038b2:	d139      	bne.n	8003928 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d101      	bne.n	80038c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038be:	2302      	movs	r3, #2
 80038c0:	e033      	b.n	800392a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2201      	movs	r2, #1
 80038c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2224      	movs	r2, #36	; 0x24
 80038ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0201 	bic.w	r2, r2, #1
 80038e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f042 0201 	orr.w	r2, r2, #1
 8003912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	e000      	b.n	800392a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003928:	2302      	movs	r3, #2
  }
}
 800392a:	4618      	mov	r0, r3
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
	...

08003938 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800393c:	4b04      	ldr	r3, [pc, #16]	; (8003950 <HAL_PWREx_GetVoltageRange+0x18>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003944:	4618      	mov	r0, r3
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	40007000 	.word	0x40007000

08003954 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003962:	d130      	bne.n	80039c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003964:	4b23      	ldr	r3, [pc, #140]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800396c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003970:	d038      	beq.n	80039e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003972:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800397a:	4a1e      	ldr	r2, [pc, #120]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800397c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003980:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003982:	4b1d      	ldr	r3, [pc, #116]	; (80039f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2232      	movs	r2, #50	; 0x32
 8003988:	fb02 f303 	mul.w	r3, r2, r3
 800398c:	4a1b      	ldr	r2, [pc, #108]	; (80039fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	0c9b      	lsrs	r3, r3, #18
 8003994:	3301      	adds	r3, #1
 8003996:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003998:	e002      	b.n	80039a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3b01      	subs	r3, #1
 800399e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039a0:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ac:	d102      	bne.n	80039b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1f2      	bne.n	800399a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039b4:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039c0:	d110      	bne.n	80039e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e00f      	b.n	80039e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80039c6:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d2:	d007      	beq.n	80039e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039d4:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039dc:	4a05      	ldr	r2, [pc, #20]	; (80039f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40007000 	.word	0x40007000
 80039f8:	20000438 	.word	0x20000438
 80039fc:	431bde83 	.word	0x431bde83

08003a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e3d8      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a12:	4b97      	ldr	r3, [pc, #604]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 030c 	and.w	r3, r3, #12
 8003a1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a1c:	4b94      	ldr	r3, [pc, #592]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0310 	and.w	r3, r3, #16
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 80e4 	beq.w	8003bfc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d007      	beq.n	8003a4a <HAL_RCC_OscConfig+0x4a>
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	2b0c      	cmp	r3, #12
 8003a3e:	f040 808b 	bne.w	8003b58 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	f040 8087 	bne.w	8003b58 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a4a:	4b89      	ldr	r3, [pc, #548]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_RCC_OscConfig+0x62>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e3b0      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1a      	ldr	r2, [r3, #32]
 8003a66:	4b82      	ldr	r3, [pc, #520]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0308 	and.w	r3, r3, #8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d004      	beq.n	8003a7c <HAL_RCC_OscConfig+0x7c>
 8003a72:	4b7f      	ldr	r3, [pc, #508]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a7a:	e005      	b.n	8003a88 <HAL_RCC_OscConfig+0x88>
 8003a7c:	4b7c      	ldr	r3, [pc, #496]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a82:	091b      	lsrs	r3, r3, #4
 8003a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d223      	bcs.n	8003ad4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 fd43 	bl	800451c <RCC_SetFlashLatencyFromMSIRange>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e391      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003aa0:	4b73      	ldr	r3, [pc, #460]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a72      	ldr	r2, [pc, #456]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003aa6:	f043 0308 	orr.w	r3, r3, #8
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	4b70      	ldr	r3, [pc, #448]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a1b      	ldr	r3, [r3, #32]
 8003ab8:	496d      	ldr	r1, [pc, #436]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003abe:	4b6c      	ldr	r3, [pc, #432]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	021b      	lsls	r3, r3, #8
 8003acc:	4968      	ldr	r1, [pc, #416]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	604b      	str	r3, [r1, #4]
 8003ad2:	e025      	b.n	8003b20 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ad4:	4b66      	ldr	r3, [pc, #408]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a65      	ldr	r2, [pc, #404]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003ada:	f043 0308 	orr.w	r3, r3, #8
 8003ade:	6013      	str	r3, [r2, #0]
 8003ae0:	4b63      	ldr	r3, [pc, #396]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	4960      	ldr	r1, [pc, #384]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003af2:	4b5f      	ldr	r3, [pc, #380]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	021b      	lsls	r3, r3, #8
 8003b00:	495b      	ldr	r1, [pc, #364]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d109      	bne.n	8003b20 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fd03 	bl	800451c <RCC_SetFlashLatencyFromMSIRange>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e351      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b20:	f000 fc38 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 8003b24:	4602      	mov	r2, r0
 8003b26:	4b52      	ldr	r3, [pc, #328]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	091b      	lsrs	r3, r3, #4
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	4950      	ldr	r1, [pc, #320]	; (8003c74 <HAL_RCC_OscConfig+0x274>)
 8003b32:	5ccb      	ldrb	r3, [r1, r3]
 8003b34:	f003 031f 	and.w	r3, r3, #31
 8003b38:	fa22 f303 	lsr.w	r3, r2, r3
 8003b3c:	4a4e      	ldr	r2, [pc, #312]	; (8003c78 <HAL_RCC_OscConfig+0x278>)
 8003b3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b40:	4b4e      	ldr	r3, [pc, #312]	; (8003c7c <HAL_RCC_OscConfig+0x27c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe fd8f 	bl	8002668 <HAL_InitTick>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d052      	beq.n	8003bfa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	e335      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d032      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b60:	4b43      	ldr	r3, [pc, #268]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a42      	ldr	r2, [pc, #264]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b6c:	f7fe fdcc 	bl	8002708 <HAL_GetTick>
 8003b70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b72:	e008      	b.n	8003b86 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b74:	f7fe fdc8 	bl	8002708 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d901      	bls.n	8003b86 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e31e      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b86:	4b3a      	ldr	r3, [pc, #232]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d0f0      	beq.n	8003b74 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b92:	4b37      	ldr	r3, [pc, #220]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a36      	ldr	r2, [pc, #216]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003b98:	f043 0308 	orr.w	r3, r3, #8
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	4b34      	ldr	r3, [pc, #208]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	4931      	ldr	r1, [pc, #196]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bb0:	4b2f      	ldr	r3, [pc, #188]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	021b      	lsls	r3, r3, #8
 8003bbe:	492c      	ldr	r1, [pc, #176]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	604b      	str	r3, [r1, #4]
 8003bc4:	e01a      	b.n	8003bfc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003bc6:	4b2a      	ldr	r3, [pc, #168]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a29      	ldr	r2, [pc, #164]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003bcc:	f023 0301 	bic.w	r3, r3, #1
 8003bd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bd2:	f7fe fd99 	bl	8002708 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bda:	f7fe fd95 	bl	8002708 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e2eb      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bec:	4b20      	ldr	r3, [pc, #128]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d1f0      	bne.n	8003bda <HAL_RCC_OscConfig+0x1da>
 8003bf8:	e000      	b.n	8003bfc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bfa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d074      	beq.n	8003cf2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d005      	beq.n	8003c1a <HAL_RCC_OscConfig+0x21a>
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	2b0c      	cmp	r3, #12
 8003c12:	d10e      	bne.n	8003c32 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2b03      	cmp	r3, #3
 8003c18:	d10b      	bne.n	8003c32 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c1a:	4b15      	ldr	r3, [pc, #84]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d064      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x2f0>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d160      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e2c8      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c3a:	d106      	bne.n	8003c4a <HAL_RCC_OscConfig+0x24a>
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a0b      	ldr	r2, [pc, #44]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c46:	6013      	str	r3, [r2, #0]
 8003c48:	e026      	b.n	8003c98 <HAL_RCC_OscConfig+0x298>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c52:	d115      	bne.n	8003c80 <HAL_RCC_OscConfig+0x280>
 8003c54:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a05      	ldr	r2, [pc, #20]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003c5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	4b03      	ldr	r3, [pc, #12]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a02      	ldr	r2, [pc, #8]	; (8003c70 <HAL_RCC_OscConfig+0x270>)
 8003c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	e014      	b.n	8003c98 <HAL_RCC_OscConfig+0x298>
 8003c6e:	bf00      	nop
 8003c70:	40021000 	.word	0x40021000
 8003c74:	08006adc 	.word	0x08006adc
 8003c78:	20000438 	.word	0x20000438
 8003c7c:	2000043c 	.word	0x2000043c
 8003c80:	4ba0      	ldr	r3, [pc, #640]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a9f      	ldr	r2, [pc, #636]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	4b9d      	ldr	r3, [pc, #628]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a9c      	ldr	r2, [pc, #624]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d013      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fe fd32 	bl	8002708 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca8:	f7fe fd2e 	bl	8002708 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b64      	cmp	r3, #100	; 0x64
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e284      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cba:	4b92      	ldr	r3, [pc, #584]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x2a8>
 8003cc6:	e014      	b.n	8003cf2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fe fd1e 	bl	8002708 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd0:	f7fe fd1a 	bl	8002708 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b64      	cmp	r3, #100	; 0x64
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e270      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ce2:	4b88      	ldr	r3, [pc, #544]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1f0      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x2d0>
 8003cee:	e000      	b.n	8003cf2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d060      	beq.n	8003dc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_OscConfig+0x310>
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2b0c      	cmp	r3, #12
 8003d08:	d119      	bne.n	8003d3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d116      	bne.n	8003d3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d10:	4b7c      	ldr	r3, [pc, #496]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d005      	beq.n	8003d28 <HAL_RCC_OscConfig+0x328>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e24d      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d28:	4b76      	ldr	r3, [pc, #472]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	061b      	lsls	r3, r3, #24
 8003d36:	4973      	ldr	r1, [pc, #460]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d3c:	e040      	b.n	8003dc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d023      	beq.n	8003d8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d46:	4b6f      	ldr	r3, [pc, #444]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a6e      	ldr	r2, [pc, #440]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d52:	f7fe fcd9 	bl	8002708 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d5a:	f7fe fcd5 	bl	8002708 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e22b      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d6c:	4b65      	ldr	r3, [pc, #404]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d78:	4b62      	ldr	r3, [pc, #392]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	061b      	lsls	r3, r3, #24
 8003d86:	495f      	ldr	r1, [pc, #380]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	604b      	str	r3, [r1, #4]
 8003d8c:	e018      	b.n	8003dc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d8e:	4b5d      	ldr	r3, [pc, #372]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a5c      	ldr	r2, [pc, #368]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d9a:	f7fe fcb5 	bl	8002708 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003da2:	f7fe fcb1 	bl	8002708 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e207      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003db4:	4b53      	ldr	r3, [pc, #332]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d1f0      	bne.n	8003da2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d03c      	beq.n	8003e46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d01c      	beq.n	8003e0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dd4:	4b4b      	ldr	r3, [pc, #300]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dda:	4a4a      	ldr	r2, [pc, #296]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de4:	f7fe fc90 	bl	8002708 <HAL_GetTick>
 8003de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dec:	f7fe fc8c 	bl	8002708 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e1e2      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dfe:	4b41      	ldr	r3, [pc, #260]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0ef      	beq.n	8003dec <HAL_RCC_OscConfig+0x3ec>
 8003e0c:	e01b      	b.n	8003e46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e0e:	4b3d      	ldr	r3, [pc, #244]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e14:	4a3b      	ldr	r2, [pc, #236]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003e16:	f023 0301 	bic.w	r3, r3, #1
 8003e1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1e:	f7fe fc73 	bl	8002708 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e26:	f7fe fc6f 	bl	8002708 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e1c5      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e38:	4b32      	ldr	r3, [pc, #200]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d1ef      	bne.n	8003e26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0304 	and.w	r3, r3, #4
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	f000 80a6 	beq.w	8003fa0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e54:	2300      	movs	r3, #0
 8003e56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e58:	4b2a      	ldr	r3, [pc, #168]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10d      	bne.n	8003e80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e64:	4b27      	ldr	r3, [pc, #156]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e68:	4a26      	ldr	r2, [pc, #152]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e70:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e78:	60bb      	str	r3, [r7, #8]
 8003e7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e80:	4b21      	ldr	r3, [pc, #132]	; (8003f08 <HAL_RCC_OscConfig+0x508>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d118      	bne.n	8003ebe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e8c:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <HAL_RCC_OscConfig+0x508>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a1d      	ldr	r2, [pc, #116]	; (8003f08 <HAL_RCC_OscConfig+0x508>)
 8003e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e98:	f7fe fc36 	bl	8002708 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea0:	f7fe fc32 	bl	8002708 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e188      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eb2:	4b15      	ldr	r3, [pc, #84]	; (8003f08 <HAL_RCC_OscConfig+0x508>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d108      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x4d8>
 8003ec6:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ecc:	4a0d      	ldr	r2, [pc, #52]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ed6:	e029      	b.n	8003f2c <HAL_RCC_OscConfig+0x52c>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b05      	cmp	r3, #5
 8003ede:	d115      	bne.n	8003f0c <HAL_RCC_OscConfig+0x50c>
 8003ee0:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee6:	4a07      	ldr	r2, [pc, #28]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003ee8:	f043 0304 	orr.w	r3, r3, #4
 8003eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ef0:	4b04      	ldr	r3, [pc, #16]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef6:	4a03      	ldr	r2, [pc, #12]	; (8003f04 <HAL_RCC_OscConfig+0x504>)
 8003ef8:	f043 0301 	orr.w	r3, r3, #1
 8003efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f00:	e014      	b.n	8003f2c <HAL_RCC_OscConfig+0x52c>
 8003f02:	bf00      	nop
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40007000 	.word	0x40007000
 8003f0c:	4b91      	ldr	r3, [pc, #580]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 8003f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f12:	4a90      	ldr	r2, [pc, #576]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 8003f14:	f023 0301 	bic.w	r3, r3, #1
 8003f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f1c:	4b8d      	ldr	r3, [pc, #564]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 8003f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f22:	4a8c      	ldr	r2, [pc, #560]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 8003f24:	f023 0304 	bic.w	r3, r3, #4
 8003f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d016      	beq.n	8003f62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f34:	f7fe fbe8 	bl	8002708 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f3a:	e00a      	b.n	8003f52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f3c:	f7fe fbe4 	bl	8002708 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e138      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f52:	4b80      	ldr	r3, [pc, #512]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 8003f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d0ed      	beq.n	8003f3c <HAL_RCC_OscConfig+0x53c>
 8003f60:	e015      	b.n	8003f8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f62:	f7fe fbd1 	bl	8002708 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f68:	e00a      	b.n	8003f80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6a:	f7fe fbcd 	bl	8002708 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e121      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f80:	4b74      	ldr	r3, [pc, #464]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 8003f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1ed      	bne.n	8003f6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f8e:	7ffb      	ldrb	r3, [r7, #31]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d105      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f94:	4b6f      	ldr	r3, [pc, #444]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 8003f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f98:	4a6e      	ldr	r2, [pc, #440]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 8003f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f9e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 810c 	beq.w	80041c2 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	f040 80d4 	bne.w	800415c <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fb4:	4b67      	ldr	r3, [pc, #412]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f003 0203 	and.w	r2, r3, #3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d130      	bne.n	800402a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d127      	bne.n	800402a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d11f      	bne.n	800402a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ff4:	2a07      	cmp	r2, #7
 8003ff6:	bf14      	ite	ne
 8003ff8:	2201      	movne	r2, #1
 8003ffa:	2200      	moveq	r2, #0
 8003ffc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d113      	bne.n	800402a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400c:	085b      	lsrs	r3, r3, #1
 800400e:	3b01      	subs	r3, #1
 8004010:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004012:	429a      	cmp	r2, r3
 8004014:	d109      	bne.n	800402a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	085b      	lsrs	r3, r3, #1
 8004022:	3b01      	subs	r3, #1
 8004024:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004026:	429a      	cmp	r2, r3
 8004028:	d06e      	beq.n	8004108 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	2b0c      	cmp	r3, #12
 800402e:	d069      	beq.n	8004104 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004030:	4b48      	ldr	r3, [pc, #288]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d105      	bne.n	8004048 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800403c:	4b45      	ldr	r3, [pc, #276]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e0bb      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800404c:	4b41      	ldr	r3, [pc, #260]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a40      	ldr	r2, [pc, #256]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 8004052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004056:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004058:	f7fe fb56 	bl	8002708 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004060:	f7fe fb52 	bl	8002708 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e0a8      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004072:	4b38      	ldr	r3, [pc, #224]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1f0      	bne.n	8004060 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800407e:	4b35      	ldr	r3, [pc, #212]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 8004080:	68da      	ldr	r2, [r3, #12]
 8004082:	4b35      	ldr	r3, [pc, #212]	; (8004158 <HAL_RCC_OscConfig+0x758>)
 8004084:	4013      	ands	r3, r2
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800408e:	3a01      	subs	r2, #1
 8004090:	0112      	lsls	r2, r2, #4
 8004092:	4311      	orrs	r1, r2
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004098:	0212      	lsls	r2, r2, #8
 800409a:	4311      	orrs	r1, r2
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040a0:	0852      	lsrs	r2, r2, #1
 80040a2:	3a01      	subs	r2, #1
 80040a4:	0552      	lsls	r2, r2, #21
 80040a6:	4311      	orrs	r1, r2
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040ac:	0852      	lsrs	r2, r2, #1
 80040ae:	3a01      	subs	r2, #1
 80040b0:	0652      	lsls	r2, r2, #25
 80040b2:	4311      	orrs	r1, r2
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040b8:	0912      	lsrs	r2, r2, #4
 80040ba:	0452      	lsls	r2, r2, #17
 80040bc:	430a      	orrs	r2, r1
 80040be:	4925      	ldr	r1, [pc, #148]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040c4:	4b23      	ldr	r3, [pc, #140]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a22      	ldr	r2, [pc, #136]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 80040ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040d0:	4b20      	ldr	r3, [pc, #128]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	4a1f      	ldr	r2, [pc, #124]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 80040d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040dc:	f7fe fb14 	bl	8002708 <HAL_GetTick>
 80040e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040e2:	e008      	b.n	80040f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e4:	f7fe fb10 	bl	8002708 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d901      	bls.n	80040f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	e066      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f6:	4b17      	ldr	r3, [pc, #92]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f0      	beq.n	80040e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004102:	e05e      	b.n	80041c2 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e05d      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004108:	4b12      	ldr	r3, [pc, #72]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d156      	bne.n	80041c2 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004114:	4b0f      	ldr	r3, [pc, #60]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a0e      	ldr	r2, [pc, #56]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 800411a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800411e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004120:	4b0c      	ldr	r3, [pc, #48]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	4a0b      	ldr	r2, [pc, #44]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 8004126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800412a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800412c:	f7fe faec 	bl	8002708 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004134:	f7fe fae8 	bl	8002708 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e03e      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004146:	4b03      	ldr	r3, [pc, #12]	; (8004154 <HAL_RCC_OscConfig+0x754>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0x734>
 8004152:	e036      	b.n	80041c2 <HAL_RCC_OscConfig+0x7c2>
 8004154:	40021000 	.word	0x40021000
 8004158:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	2b0c      	cmp	r3, #12
 8004160:	d02d      	beq.n	80041be <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004162:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <HAL_RCC_OscConfig+0x7cc>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a19      	ldr	r2, [pc, #100]	; (80041cc <HAL_RCC_OscConfig+0x7cc>)
 8004168:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800416c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800416e:	4b17      	ldr	r3, [pc, #92]	; (80041cc <HAL_RCC_OscConfig+0x7cc>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d105      	bne.n	8004186 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800417a:	4b14      	ldr	r3, [pc, #80]	; (80041cc <HAL_RCC_OscConfig+0x7cc>)
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	4a13      	ldr	r2, [pc, #76]	; (80041cc <HAL_RCC_OscConfig+0x7cc>)
 8004180:	f023 0303 	bic.w	r3, r3, #3
 8004184:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004186:	4b11      	ldr	r3, [pc, #68]	; (80041cc <HAL_RCC_OscConfig+0x7cc>)
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	4a10      	ldr	r2, [pc, #64]	; (80041cc <HAL_RCC_OscConfig+0x7cc>)
 800418c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004194:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004196:	f7fe fab7 	bl	8002708 <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800419e:	f7fe fab3 	bl	8002708 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e009      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041b0:	4b06      	ldr	r3, [pc, #24]	; (80041cc <HAL_RCC_OscConfig+0x7cc>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1f0      	bne.n	800419e <HAL_RCC_OscConfig+0x79e>
 80041bc:	e001      	b.n	80041c2 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e000      	b.n	80041c4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3720      	adds	r7, #32
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40021000 	.word	0x40021000

080041d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0c8      	b.n	8004376 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041e4:	4b66      	ldr	r3, [pc, #408]	; (8004380 <HAL_RCC_ClockConfig+0x1b0>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d910      	bls.n	8004214 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f2:	4b63      	ldr	r3, [pc, #396]	; (8004380 <HAL_RCC_ClockConfig+0x1b0>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 0207 	bic.w	r2, r3, #7
 80041fa:	4961      	ldr	r1, [pc, #388]	; (8004380 <HAL_RCC_ClockConfig+0x1b0>)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	4313      	orrs	r3, r2
 8004200:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004202:	4b5f      	ldr	r3, [pc, #380]	; (8004380 <HAL_RCC_ClockConfig+0x1b0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d001      	beq.n	8004214 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e0b0      	b.n	8004376 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d04c      	beq.n	80042ba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b03      	cmp	r3, #3
 8004226:	d107      	bne.n	8004238 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004228:	4b56      	ldr	r3, [pc, #344]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d121      	bne.n	8004278 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e09e      	b.n	8004376 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d107      	bne.n	8004250 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004240:	4b50      	ldr	r3, [pc, #320]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d115      	bne.n	8004278 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e092      	b.n	8004376 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d107      	bne.n	8004268 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004258:	4b4a      	ldr	r3, [pc, #296]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0302 	and.w	r3, r3, #2
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e086      	b.n	8004376 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004268:	4b46      	ldr	r3, [pc, #280]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e07e      	b.n	8004376 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004278:	4b42      	ldr	r3, [pc, #264]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f023 0203 	bic.w	r2, r3, #3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	493f      	ldr	r1, [pc, #252]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 8004286:	4313      	orrs	r3, r2
 8004288:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800428a:	f7fe fa3d 	bl	8002708 <HAL_GetTick>
 800428e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004290:	e00a      	b.n	80042a8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004292:	f7fe fa39 	bl	8002708 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e066      	b.n	8004376 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a8:	4b36      	ldr	r3, [pc, #216]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f003 020c 	and.w	r2, r3, #12
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d1eb      	bne.n	8004292 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d008      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042c6:	4b2f      	ldr	r3, [pc, #188]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	492c      	ldr	r1, [pc, #176]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042d8:	4b29      	ldr	r3, [pc, #164]	; (8004380 <HAL_RCC_ClockConfig+0x1b0>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d210      	bcs.n	8004308 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e6:	4b26      	ldr	r3, [pc, #152]	; (8004380 <HAL_RCC_ClockConfig+0x1b0>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f023 0207 	bic.w	r2, r3, #7
 80042ee:	4924      	ldr	r1, [pc, #144]	; (8004380 <HAL_RCC_ClockConfig+0x1b0>)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f6:	4b22      	ldr	r3, [pc, #136]	; (8004380 <HAL_RCC_ClockConfig+0x1b0>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d001      	beq.n	8004308 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e036      	b.n	8004376 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004314:	4b1b      	ldr	r3, [pc, #108]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4918      	ldr	r1, [pc, #96]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 8004322:	4313      	orrs	r3, r2
 8004324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004332:	4b14      	ldr	r3, [pc, #80]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	4910      	ldr	r1, [pc, #64]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 8004342:	4313      	orrs	r3, r2
 8004344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004346:	f000 f825 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 800434a:	4602      	mov	r2, r0
 800434c:	4b0d      	ldr	r3, [pc, #52]	; (8004384 <HAL_RCC_ClockConfig+0x1b4>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	490c      	ldr	r1, [pc, #48]	; (8004388 <HAL_RCC_ClockConfig+0x1b8>)
 8004358:	5ccb      	ldrb	r3, [r1, r3]
 800435a:	f003 031f 	and.w	r3, r3, #31
 800435e:	fa22 f303 	lsr.w	r3, r2, r3
 8004362:	4a0a      	ldr	r2, [pc, #40]	; (800438c <HAL_RCC_ClockConfig+0x1bc>)
 8004364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004366:	4b0a      	ldr	r3, [pc, #40]	; (8004390 <HAL_RCC_ClockConfig+0x1c0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe f97c 	bl	8002668 <HAL_InitTick>
 8004370:	4603      	mov	r3, r0
 8004372:	72fb      	strb	r3, [r7, #11]

  return status;
 8004374:	7afb      	ldrb	r3, [r7, #11]
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40022000 	.word	0x40022000
 8004384:	40021000 	.word	0x40021000
 8004388:	08006adc 	.word	0x08006adc
 800438c:	20000438 	.word	0x20000438
 8004390:	2000043c 	.word	0x2000043c

08004394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004394:	b480      	push	{r7}
 8004396:	b089      	sub	sp, #36	; 0x24
 8004398:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
 800439e:	2300      	movs	r3, #0
 80043a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043a2:	4b3e      	ldr	r3, [pc, #248]	; (800449c <HAL_RCC_GetSysClockFreq+0x108>)
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	f003 030c 	and.w	r3, r3, #12
 80043aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043ac:	4b3b      	ldr	r3, [pc, #236]	; (800449c <HAL_RCC_GetSysClockFreq+0x108>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d005      	beq.n	80043c8 <HAL_RCC_GetSysClockFreq+0x34>
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	2b0c      	cmp	r3, #12
 80043c0:	d121      	bne.n	8004406 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d11e      	bne.n	8004406 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043c8:	4b34      	ldr	r3, [pc, #208]	; (800449c <HAL_RCC_GetSysClockFreq+0x108>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0308 	and.w	r3, r3, #8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d107      	bne.n	80043e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043d4:	4b31      	ldr	r3, [pc, #196]	; (800449c <HAL_RCC_GetSysClockFreq+0x108>)
 80043d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043da:	0a1b      	lsrs	r3, r3, #8
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	61fb      	str	r3, [r7, #28]
 80043e2:	e005      	b.n	80043f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043e4:	4b2d      	ldr	r3, [pc, #180]	; (800449c <HAL_RCC_GetSysClockFreq+0x108>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	091b      	lsrs	r3, r3, #4
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043f0:	4a2b      	ldr	r2, [pc, #172]	; (80044a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10d      	bne.n	800441c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004404:	e00a      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	2b04      	cmp	r3, #4
 800440a:	d102      	bne.n	8004412 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800440c:	4b25      	ldr	r3, [pc, #148]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800440e:	61bb      	str	r3, [r7, #24]
 8004410:	e004      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b08      	cmp	r3, #8
 8004416:	d101      	bne.n	800441c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004418:	4b23      	ldr	r3, [pc, #140]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800441a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	2b0c      	cmp	r3, #12
 8004420:	d134      	bne.n	800448c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004422:	4b1e      	ldr	r3, [pc, #120]	; (800449c <HAL_RCC_GetSysClockFreq+0x108>)
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d003      	beq.n	800443a <HAL_RCC_GetSysClockFreq+0xa6>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b03      	cmp	r3, #3
 8004436:	d003      	beq.n	8004440 <HAL_RCC_GetSysClockFreq+0xac>
 8004438:	e005      	b.n	8004446 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800443a:	4b1a      	ldr	r3, [pc, #104]	; (80044a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800443c:	617b      	str	r3, [r7, #20]
      break;
 800443e:	e005      	b.n	800444c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004440:	4b19      	ldr	r3, [pc, #100]	; (80044a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004442:	617b      	str	r3, [r7, #20]
      break;
 8004444:	e002      	b.n	800444c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	617b      	str	r3, [r7, #20]
      break;
 800444a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800444c:	4b13      	ldr	r3, [pc, #76]	; (800449c <HAL_RCC_GetSysClockFreq+0x108>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	091b      	lsrs	r3, r3, #4
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	3301      	adds	r3, #1
 8004458:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800445a:	4b10      	ldr	r3, [pc, #64]	; (800449c <HAL_RCC_GetSysClockFreq+0x108>)
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	0a1b      	lsrs	r3, r3, #8
 8004460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	fb03 f202 	mul.w	r2, r3, r2
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004470:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004472:	4b0a      	ldr	r3, [pc, #40]	; (800449c <HAL_RCC_GetSysClockFreq+0x108>)
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	0e5b      	lsrs	r3, r3, #25
 8004478:	f003 0303 	and.w	r3, r3, #3
 800447c:	3301      	adds	r3, #1
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	fbb2 f3f3 	udiv	r3, r2, r3
 800448a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800448c:	69bb      	ldr	r3, [r7, #24]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3724      	adds	r7, #36	; 0x24
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	40021000 	.word	0x40021000
 80044a0:	08006af4 	.word	0x08006af4
 80044a4:	00f42400 	.word	0x00f42400
 80044a8:	007a1200 	.word	0x007a1200

080044ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044b0:	4b03      	ldr	r3, [pc, #12]	; (80044c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80044b2:	681b      	ldr	r3, [r3, #0]
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	20000438 	.word	0x20000438

080044c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044c8:	f7ff fff0 	bl	80044ac <HAL_RCC_GetHCLKFreq>
 80044cc:	4602      	mov	r2, r0
 80044ce:	4b06      	ldr	r3, [pc, #24]	; (80044e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	0a1b      	lsrs	r3, r3, #8
 80044d4:	f003 0307 	and.w	r3, r3, #7
 80044d8:	4904      	ldr	r1, [pc, #16]	; (80044ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80044da:	5ccb      	ldrb	r3, [r1, r3]
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40021000 	.word	0x40021000
 80044ec:	08006aec 	.word	0x08006aec

080044f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044f4:	f7ff ffda 	bl	80044ac <HAL_RCC_GetHCLKFreq>
 80044f8:	4602      	mov	r2, r0
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	0adb      	lsrs	r3, r3, #11
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	4904      	ldr	r1, [pc, #16]	; (8004518 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004506:	5ccb      	ldrb	r3, [r1, r3]
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004510:	4618      	mov	r0, r3
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40021000 	.word	0x40021000
 8004518:	08006aec 	.word	0x08006aec

0800451c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004524:	2300      	movs	r3, #0
 8004526:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004528:	4b2a      	ldr	r3, [pc, #168]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800452a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004534:	f7ff fa00 	bl	8003938 <HAL_PWREx_GetVoltageRange>
 8004538:	6178      	str	r0, [r7, #20]
 800453a:	e014      	b.n	8004566 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800453c:	4b25      	ldr	r3, [pc, #148]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800453e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004540:	4a24      	ldr	r2, [pc, #144]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004546:	6593      	str	r3, [r2, #88]	; 0x58
 8004548:	4b22      	ldr	r3, [pc, #136]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800454a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004550:	60fb      	str	r3, [r7, #12]
 8004552:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004554:	f7ff f9f0 	bl	8003938 <HAL_PWREx_GetVoltageRange>
 8004558:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800455a:	4b1e      	ldr	r3, [pc, #120]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800455c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800455e:	4a1d      	ldr	r2, [pc, #116]	; (80045d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004564:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800456c:	d10b      	bne.n	8004586 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2b80      	cmp	r3, #128	; 0x80
 8004572:	d919      	bls.n	80045a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2ba0      	cmp	r3, #160	; 0xa0
 8004578:	d902      	bls.n	8004580 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800457a:	2302      	movs	r3, #2
 800457c:	613b      	str	r3, [r7, #16]
 800457e:	e013      	b.n	80045a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004580:	2301      	movs	r3, #1
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	e010      	b.n	80045a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2b80      	cmp	r3, #128	; 0x80
 800458a:	d902      	bls.n	8004592 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800458c:	2303      	movs	r3, #3
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	e00a      	b.n	80045a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b80      	cmp	r3, #128	; 0x80
 8004596:	d102      	bne.n	800459e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004598:	2302      	movs	r3, #2
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	e004      	b.n	80045a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b70      	cmp	r3, #112	; 0x70
 80045a2:	d101      	bne.n	80045a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045a4:	2301      	movs	r3, #1
 80045a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f023 0207 	bic.w	r2, r3, #7
 80045b0:	4909      	ldr	r1, [pc, #36]	; (80045d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045b8:	4b07      	ldr	r3, [pc, #28]	; (80045d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0307 	and.w	r3, r3, #7
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d001      	beq.n	80045ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e000      	b.n	80045cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3718      	adds	r7, #24
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40021000 	.word	0x40021000
 80045d8:	40022000 	.word	0x40022000

080045dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045e4:	2300      	movs	r3, #0
 80045e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045e8:	2300      	movs	r3, #0
 80045ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d041      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004600:	d02a      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004602:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004606:	d824      	bhi.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004608:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800460c:	d008      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800460e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004612:	d81e      	bhi.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004618:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800461c:	d010      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800461e:	e018      	b.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004620:	4b86      	ldr	r3, [pc, #536]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	4a85      	ldr	r2, [pc, #532]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800462a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800462c:	e015      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3304      	adds	r3, #4
 8004632:	2100      	movs	r1, #0
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fabb 	bl	8004bb0 <RCCEx_PLLSAI1_Config>
 800463a:	4603      	mov	r3, r0
 800463c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800463e:	e00c      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	3320      	adds	r3, #32
 8004644:	2100      	movs	r1, #0
 8004646:	4618      	mov	r0, r3
 8004648:	f000 fba6 	bl	8004d98 <RCCEx_PLLSAI2_Config>
 800464c:	4603      	mov	r3, r0
 800464e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004650:	e003      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	74fb      	strb	r3, [r7, #19]
      break;
 8004656:	e000      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004658:	bf00      	nop
    }

    if(ret == HAL_OK)
 800465a:	7cfb      	ldrb	r3, [r7, #19]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10b      	bne.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004660:	4b76      	ldr	r3, [pc, #472]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004666:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800466e:	4973      	ldr	r1, [pc, #460]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004670:	4313      	orrs	r3, r2
 8004672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004676:	e001      	b.n	800467c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004678:	7cfb      	ldrb	r3, [r7, #19]
 800467a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d041      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800468c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004690:	d02a      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004692:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004696:	d824      	bhi.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004698:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800469c:	d008      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800469e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046a2:	d81e      	bhi.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80046a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046ac:	d010      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046ae:	e018      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046b0:	4b62      	ldr	r3, [pc, #392]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	4a61      	ldr	r2, [pc, #388]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046bc:	e015      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3304      	adds	r3, #4
 80046c2:	2100      	movs	r1, #0
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fa73 	bl	8004bb0 <RCCEx_PLLSAI1_Config>
 80046ca:	4603      	mov	r3, r0
 80046cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046ce:	e00c      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3320      	adds	r3, #32
 80046d4:	2100      	movs	r1, #0
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fb5e 	bl	8004d98 <RCCEx_PLLSAI2_Config>
 80046dc:	4603      	mov	r3, r0
 80046de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046e0:	e003      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	74fb      	strb	r3, [r7, #19]
      break;
 80046e6:	e000      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80046e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046ea:	7cfb      	ldrb	r3, [r7, #19]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10b      	bne.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046f0:	4b52      	ldr	r3, [pc, #328]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046fe:	494f      	ldr	r1, [pc, #316]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004700:	4313      	orrs	r3, r2
 8004702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004706:	e001      	b.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004708:	7cfb      	ldrb	r3, [r7, #19]
 800470a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 80a0 	beq.w	800485a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800471a:	2300      	movs	r3, #0
 800471c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800471e:	4b47      	ldr	r3, [pc, #284]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800472e:	2300      	movs	r3, #0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00d      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004734:	4b41      	ldr	r3, [pc, #260]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004738:	4a40      	ldr	r2, [pc, #256]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800473a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473e:	6593      	str	r3, [r2, #88]	; 0x58
 8004740:	4b3e      	ldr	r3, [pc, #248]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004748:	60bb      	str	r3, [r7, #8]
 800474a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800474c:	2301      	movs	r3, #1
 800474e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004750:	4b3b      	ldr	r3, [pc, #236]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a3a      	ldr	r2, [pc, #232]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004756:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800475c:	f7fd ffd4 	bl	8002708 <HAL_GetTick>
 8004760:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004762:	e009      	b.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004764:	f7fd ffd0 	bl	8002708 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b02      	cmp	r3, #2
 8004770:	d902      	bls.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	74fb      	strb	r3, [r7, #19]
        break;
 8004776:	e005      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004778:	4b31      	ldr	r3, [pc, #196]	; (8004840 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004780:	2b00      	cmp	r3, #0
 8004782:	d0ef      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004784:	7cfb      	ldrb	r3, [r7, #19]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d15c      	bne.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800478a:	4b2c      	ldr	r3, [pc, #176]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004790:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004794:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01f      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d019      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047a8:	4b24      	ldr	r3, [pc, #144]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047b4:	4b21      	ldr	r3, [pc, #132]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ba:	4a20      	ldr	r2, [pc, #128]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047c4:	4b1d      	ldr	r3, [pc, #116]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ca:	4a1c      	ldr	r2, [pc, #112]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047d4:	4a19      	ldr	r2, [pc, #100]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d016      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e6:	f7fd ff8f 	bl	8002708 <HAL_GetTick>
 80047ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ec:	e00b      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ee:	f7fd ff8b 	bl	8002708 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d902      	bls.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	74fb      	strb	r3, [r7, #19]
            break;
 8004804:	e006      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004806:	4b0d      	ldr	r3, [pc, #52]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0ec      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004814:	7cfb      	ldrb	r3, [r7, #19]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10c      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800481a:	4b08      	ldr	r3, [pc, #32]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800481c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004820:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800482a:	4904      	ldr	r1, [pc, #16]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004832:	e009      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004834:	7cfb      	ldrb	r3, [r7, #19]
 8004836:	74bb      	strb	r3, [r7, #18]
 8004838:	e006      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800483a:	bf00      	nop
 800483c:	40021000 	.word	0x40021000
 8004840:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004844:	7cfb      	ldrb	r3, [r7, #19]
 8004846:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004848:	7c7b      	ldrb	r3, [r7, #17]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d105      	bne.n	800485a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800484e:	4b9e      	ldr	r3, [pc, #632]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004852:	4a9d      	ldr	r2, [pc, #628]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004854:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004858:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004866:	4b98      	ldr	r3, [pc, #608]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486c:	f023 0203 	bic.w	r2, r3, #3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004874:	4994      	ldr	r1, [pc, #592]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004876:	4313      	orrs	r3, r2
 8004878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00a      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004888:	4b8f      	ldr	r3, [pc, #572]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800488a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488e:	f023 020c 	bic.w	r2, r3, #12
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004896:	498c      	ldr	r1, [pc, #560]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004898:	4313      	orrs	r3, r2
 800489a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00a      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048aa:	4b87      	ldr	r3, [pc, #540]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b8:	4983      	ldr	r1, [pc, #524]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048cc:	4b7e      	ldr	r3, [pc, #504]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048da:	497b      	ldr	r1, [pc, #492]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048dc:	4313      	orrs	r3, r2
 80048de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0310 	and.w	r3, r3, #16
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048ee:	4b76      	ldr	r3, [pc, #472]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048fc:	4972      	ldr	r1, [pc, #456]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00a      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004910:	4b6d      	ldr	r3, [pc, #436]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004916:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491e:	496a      	ldr	r1, [pc, #424]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004920:	4313      	orrs	r3, r2
 8004922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004932:	4b65      	ldr	r3, [pc, #404]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004938:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004940:	4961      	ldr	r1, [pc, #388]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00a      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004954:	4b5c      	ldr	r3, [pc, #368]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004962:	4959      	ldr	r1, [pc, #356]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004976:	4b54      	ldr	r3, [pc, #336]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004984:	4950      	ldr	r1, [pc, #320]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004986:	4313      	orrs	r3, r2
 8004988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00a      	beq.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004998:	4b4b      	ldr	r3, [pc, #300]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a6:	4948      	ldr	r1, [pc, #288]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049ba:	4b43      	ldr	r3, [pc, #268]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c8:	493f      	ldr	r1, [pc, #252]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d028      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049dc:	4b3a      	ldr	r3, [pc, #232]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049ea:	4937      	ldr	r1, [pc, #220]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049fa:	d106      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049fc:	4b32      	ldr	r3, [pc, #200]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	4a31      	ldr	r2, [pc, #196]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a06:	60d3      	str	r3, [r2, #12]
 8004a08:	e011      	b.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a12:	d10c      	bne.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3304      	adds	r3, #4
 8004a18:	2101      	movs	r1, #1
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 f8c8 	bl	8004bb0 <RCCEx_PLLSAI1_Config>
 8004a20:	4603      	mov	r3, r0
 8004a22:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a24:	7cfb      	ldrb	r3, [r7, #19]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d001      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004a2a:	7cfb      	ldrb	r3, [r7, #19]
 8004a2c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d028      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a3a:	4b23      	ldr	r3, [pc, #140]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a48:	491f      	ldr	r1, [pc, #124]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a58:	d106      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a5a:	4b1b      	ldr	r3, [pc, #108]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	4a1a      	ldr	r2, [pc, #104]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a64:	60d3      	str	r3, [r2, #12]
 8004a66:	e011      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a70:	d10c      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3304      	adds	r3, #4
 8004a76:	2101      	movs	r1, #1
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 f899 	bl	8004bb0 <RCCEx_PLLSAI1_Config>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a82:	7cfb      	ldrb	r3, [r7, #19]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d001      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004a88:	7cfb      	ldrb	r3, [r7, #19]
 8004a8a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d02b      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a98:	4b0b      	ldr	r3, [pc, #44]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa6:	4908      	ldr	r1, [pc, #32]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ab6:	d109      	bne.n	8004acc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ab8:	4b03      	ldr	r3, [pc, #12]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	4a02      	ldr	r2, [pc, #8]	; (8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004abe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ac2:	60d3      	str	r3, [r2, #12]
 8004ac4:	e014      	b.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004ac6:	bf00      	nop
 8004ac8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ad4:	d10c      	bne.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3304      	adds	r3, #4
 8004ada:	2101      	movs	r1, #1
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 f867 	bl	8004bb0 <RCCEx_PLLSAI1_Config>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ae6:	7cfb      	ldrb	r3, [r7, #19]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004aec:	7cfb      	ldrb	r3, [r7, #19]
 8004aee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d02f      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004afc:	4b2b      	ldr	r3, [pc, #172]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b0a:	4928      	ldr	r1, [pc, #160]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b1a:	d10d      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	3304      	adds	r3, #4
 8004b20:	2102      	movs	r1, #2
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 f844 	bl	8004bb0 <RCCEx_PLLSAI1_Config>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b2c:	7cfb      	ldrb	r3, [r7, #19]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d014      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b32:	7cfb      	ldrb	r3, [r7, #19]
 8004b34:	74bb      	strb	r3, [r7, #18]
 8004b36:	e011      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b40:	d10c      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	3320      	adds	r3, #32
 8004b46:	2102      	movs	r1, #2
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 f925 	bl	8004d98 <RCCEx_PLLSAI2_Config>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b52:	7cfb      	ldrb	r3, [r7, #19]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b58:	7cfb      	ldrb	r3, [r7, #19]
 8004b5a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00a      	beq.n	8004b7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b68:	4b10      	ldr	r3, [pc, #64]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b76:	490d      	ldr	r1, [pc, #52]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00b      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b8a:	4b08      	ldr	r3, [pc, #32]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b9a:	4904      	ldr	r1, [pc, #16]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ba2:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40021000 	.word	0x40021000

08004bb0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bbe:	4b75      	ldr	r3, [pc, #468]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d018      	beq.n	8004bfc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bca:	4b72      	ldr	r3, [pc, #456]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f003 0203 	and.w	r2, r3, #3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d10d      	bne.n	8004bf6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
       ||
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004be2:	4b6c      	ldr	r3, [pc, #432]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	091b      	lsrs	r3, r3, #4
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
       ||
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d047      	beq.n	8004c86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	73fb      	strb	r3, [r7, #15]
 8004bfa:	e044      	b.n	8004c86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b03      	cmp	r3, #3
 8004c02:	d018      	beq.n	8004c36 <RCCEx_PLLSAI1_Config+0x86>
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d825      	bhi.n	8004c54 <RCCEx_PLLSAI1_Config+0xa4>
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d002      	beq.n	8004c12 <RCCEx_PLLSAI1_Config+0x62>
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d009      	beq.n	8004c24 <RCCEx_PLLSAI1_Config+0x74>
 8004c10:	e020      	b.n	8004c54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c12:	4b60      	ldr	r3, [pc, #384]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d11d      	bne.n	8004c5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c22:	e01a      	b.n	8004c5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c24:	4b5b      	ldr	r3, [pc, #364]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d116      	bne.n	8004c5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c34:	e013      	b.n	8004c5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c36:	4b57      	ldr	r3, [pc, #348]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10f      	bne.n	8004c62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c42:	4b54      	ldr	r3, [pc, #336]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d109      	bne.n	8004c62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c52:	e006      	b.n	8004c62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
      break;
 8004c58:	e004      	b.n	8004c64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c5a:	bf00      	nop
 8004c5c:	e002      	b.n	8004c64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c5e:	bf00      	nop
 8004c60:	e000      	b.n	8004c64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c62:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10d      	bne.n	8004c86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c6a:	4b4a      	ldr	r3, [pc, #296]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6819      	ldr	r1, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	430b      	orrs	r3, r1
 8004c80:	4944      	ldr	r1, [pc, #272]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d17d      	bne.n	8004d88 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c8c:	4b41      	ldr	r3, [pc, #260]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a40      	ldr	r2, [pc, #256]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c98:	f7fd fd36 	bl	8002708 <HAL_GetTick>
 8004c9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c9e:	e009      	b.n	8004cb4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ca0:	f7fd fd32 	bl	8002708 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d902      	bls.n	8004cb4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	73fb      	strb	r3, [r7, #15]
        break;
 8004cb2:	e005      	b.n	8004cc0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cb4:	4b37      	ldr	r3, [pc, #220]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1ef      	bne.n	8004ca0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004cc0:	7bfb      	ldrb	r3, [r7, #15]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d160      	bne.n	8004d88 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d111      	bne.n	8004cf0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ccc:	4b31      	ldr	r3, [pc, #196]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cce:	691b      	ldr	r3, [r3, #16]
 8004cd0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6892      	ldr	r2, [r2, #8]
 8004cdc:	0211      	lsls	r1, r2, #8
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	68d2      	ldr	r2, [r2, #12]
 8004ce2:	0912      	lsrs	r2, r2, #4
 8004ce4:	0452      	lsls	r2, r2, #17
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	492a      	ldr	r1, [pc, #168]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	610b      	str	r3, [r1, #16]
 8004cee:	e027      	b.n	8004d40 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d112      	bne.n	8004d1c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cf6:	4b27      	ldr	r3, [pc, #156]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004cfe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6892      	ldr	r2, [r2, #8]
 8004d06:	0211      	lsls	r1, r2, #8
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6912      	ldr	r2, [r2, #16]
 8004d0c:	0852      	lsrs	r2, r2, #1
 8004d0e:	3a01      	subs	r2, #1
 8004d10:	0552      	lsls	r2, r2, #21
 8004d12:	430a      	orrs	r2, r1
 8004d14:	491f      	ldr	r1, [pc, #124]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	610b      	str	r3, [r1, #16]
 8004d1a:	e011      	b.n	8004d40 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d1c:	4b1d      	ldr	r3, [pc, #116]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6892      	ldr	r2, [r2, #8]
 8004d2c:	0211      	lsls	r1, r2, #8
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6952      	ldr	r2, [r2, #20]
 8004d32:	0852      	lsrs	r2, r2, #1
 8004d34:	3a01      	subs	r2, #1
 8004d36:	0652      	lsls	r2, r2, #25
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	4916      	ldr	r1, [pc, #88]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d40:	4b14      	ldr	r3, [pc, #80]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a13      	ldr	r2, [pc, #76]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d4c:	f7fd fcdc 	bl	8002708 <HAL_GetTick>
 8004d50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d52:	e009      	b.n	8004d68 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d54:	f7fd fcd8 	bl	8002708 <HAL_GetTick>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d902      	bls.n	8004d68 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d62:	2303      	movs	r3, #3
 8004d64:	73fb      	strb	r3, [r7, #15]
          break;
 8004d66:	e005      	b.n	8004d74 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d68:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d0ef      	beq.n	8004d54 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d106      	bne.n	8004d88 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d7a:	4b06      	ldr	r3, [pc, #24]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	4904      	ldr	r1, [pc, #16]	; (8004d94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	40021000 	.word	0x40021000

08004d98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004da2:	2300      	movs	r3, #0
 8004da4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004da6:	4b6a      	ldr	r3, [pc, #424]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f003 0303 	and.w	r3, r3, #3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d018      	beq.n	8004de4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004db2:	4b67      	ldr	r3, [pc, #412]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f003 0203 	and.w	r2, r3, #3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d10d      	bne.n	8004dde <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
       ||
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d009      	beq.n	8004dde <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004dca:	4b61      	ldr	r3, [pc, #388]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	091b      	lsrs	r3, r3, #4
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
       ||
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d047      	beq.n	8004e6e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	73fb      	strb	r3, [r7, #15]
 8004de2:	e044      	b.n	8004e6e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2b03      	cmp	r3, #3
 8004dea:	d018      	beq.n	8004e1e <RCCEx_PLLSAI2_Config+0x86>
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d825      	bhi.n	8004e3c <RCCEx_PLLSAI2_Config+0xa4>
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d002      	beq.n	8004dfa <RCCEx_PLLSAI2_Config+0x62>
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d009      	beq.n	8004e0c <RCCEx_PLLSAI2_Config+0x74>
 8004df8:	e020      	b.n	8004e3c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004dfa:	4b55      	ldr	r3, [pc, #340]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d11d      	bne.n	8004e42 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e0a:	e01a      	b.n	8004e42 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e0c:	4b50      	ldr	r3, [pc, #320]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d116      	bne.n	8004e46 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e1c:	e013      	b.n	8004e46 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e1e:	4b4c      	ldr	r3, [pc, #304]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10f      	bne.n	8004e4a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e2a:	4b49      	ldr	r3, [pc, #292]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d109      	bne.n	8004e4a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e3a:	e006      	b.n	8004e4a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e40:	e004      	b.n	8004e4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e42:	bf00      	nop
 8004e44:	e002      	b.n	8004e4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e46:	bf00      	nop
 8004e48:	e000      	b.n	8004e4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10d      	bne.n	8004e6e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e52:	4b3f      	ldr	r3, [pc, #252]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6819      	ldr	r1, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	011b      	lsls	r3, r3, #4
 8004e66:	430b      	orrs	r3, r1
 8004e68:	4939      	ldr	r1, [pc, #228]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e6e:	7bfb      	ldrb	r3, [r7, #15]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d167      	bne.n	8004f44 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e74:	4b36      	ldr	r3, [pc, #216]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a35      	ldr	r2, [pc, #212]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e80:	f7fd fc42 	bl	8002708 <HAL_GetTick>
 8004e84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e86:	e009      	b.n	8004e9c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e88:	f7fd fc3e 	bl	8002708 <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d902      	bls.n	8004e9c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	73fb      	strb	r3, [r7, #15]
        break;
 8004e9a:	e005      	b.n	8004ea8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e9c:	4b2c      	ldr	r3, [pc, #176]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1ef      	bne.n	8004e88 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ea8:	7bfb      	ldrb	r3, [r7, #15]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d14a      	bne.n	8004f44 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d111      	bne.n	8004ed8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004eb4:	4b26      	ldr	r3, [pc, #152]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004ebc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	6892      	ldr	r2, [r2, #8]
 8004ec4:	0211      	lsls	r1, r2, #8
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	68d2      	ldr	r2, [r2, #12]
 8004eca:	0912      	lsrs	r2, r2, #4
 8004ecc:	0452      	lsls	r2, r2, #17
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	491f      	ldr	r1, [pc, #124]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	614b      	str	r3, [r1, #20]
 8004ed6:	e011      	b.n	8004efc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004ee0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004ee4:	687a      	ldr	r2, [r7, #4]
 8004ee6:	6892      	ldr	r2, [r2, #8]
 8004ee8:	0211      	lsls	r1, r2, #8
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6912      	ldr	r2, [r2, #16]
 8004eee:	0852      	lsrs	r2, r2, #1
 8004ef0:	3a01      	subs	r2, #1
 8004ef2:	0652      	lsls	r2, r2, #25
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	4916      	ldr	r1, [pc, #88]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004efc:	4b14      	ldr	r3, [pc, #80]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a13      	ldr	r2, [pc, #76]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f08:	f7fd fbfe 	bl	8002708 <HAL_GetTick>
 8004f0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f0e:	e009      	b.n	8004f24 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f10:	f7fd fbfa 	bl	8002708 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d902      	bls.n	8004f24 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	73fb      	strb	r3, [r7, #15]
          break;
 8004f22:	e005      	b.n	8004f30 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f24:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d0ef      	beq.n	8004f10 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f36:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f38:	695a      	ldr	r2, [r3, #20]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	4904      	ldr	r1, [pc, #16]	; (8004f50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40021000 	.word	0x40021000

08004f54 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e095      	b.n	8005092 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d108      	bne.n	8004f80 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f76:	d009      	beq.n	8004f8c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	61da      	str	r2, [r3, #28]
 8004f7e:	e005      	b.n	8004f8c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d106      	bne.n	8004fac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7fd f9c4 	bl	8002334 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2202      	movs	r2, #2
 8004fb0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fc2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fcc:	d902      	bls.n	8004fd4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	e002      	b.n	8004fda <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004fd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fd8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004fe2:	d007      	beq.n	8004ff4 <HAL_SPI_Init+0xa0>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fec:	d002      	beq.n	8004ff4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005004:	431a      	orrs	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	431a      	orrs	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	695b      	ldr	r3, [r3, #20]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	431a      	orrs	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699b      	ldr	r3, [r3, #24]
 800501e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800502c:	431a      	orrs	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005036:	ea42 0103 	orr.w	r1, r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	430a      	orrs	r2, r1
 8005048:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	0c1b      	lsrs	r3, r3, #16
 8005050:	f003 0204 	and.w	r2, r3, #4
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	f003 0310 	and.w	r3, r3, #16
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005070:	ea42 0103 	orr.w	r1, r2, r3
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b08a      	sub	sp, #40	; 0x28
 800509e:	af00      	add	r7, sp, #0
 80050a0:	60f8      	str	r0, [r7, #12]
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	607a      	str	r2, [r7, #4]
 80050a6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80050a8:	2301      	movs	r3, #1
 80050aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <HAL_SPI_TransmitReceive+0x26>
 80050bc:	2302      	movs	r3, #2
 80050be:	e1fb      	b.n	80054b8 <HAL_SPI_TransmitReceive+0x41e>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050c8:	f7fd fb1e 	bl	8002708 <HAL_GetTick>
 80050cc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050d4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80050dc:	887b      	ldrh	r3, [r7, #2]
 80050de:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80050e0:	887b      	ldrh	r3, [r7, #2]
 80050e2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050e4:	7efb      	ldrb	r3, [r7, #27]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d00e      	beq.n	8005108 <HAL_SPI_TransmitReceive+0x6e>
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050f0:	d106      	bne.n	8005100 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d102      	bne.n	8005100 <HAL_SPI_TransmitReceive+0x66>
 80050fa:	7efb      	ldrb	r3, [r7, #27]
 80050fc:	2b04      	cmp	r3, #4
 80050fe:	d003      	beq.n	8005108 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005100:	2302      	movs	r3, #2
 8005102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005106:	e1cd      	b.n	80054a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <HAL_SPI_TransmitReceive+0x80>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <HAL_SPI_TransmitReceive+0x80>
 8005114:	887b      	ldrh	r3, [r7, #2]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d103      	bne.n	8005122 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005120:	e1c0      	b.n	80054a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005128:	b2db      	uxtb	r3, r3
 800512a:	2b04      	cmp	r3, #4
 800512c:	d003      	beq.n	8005136 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2205      	movs	r2, #5
 8005132:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	887a      	ldrh	r2, [r7, #2]
 8005146:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	887a      	ldrh	r2, [r7, #2]
 800514e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	68ba      	ldr	r2, [r7, #8]
 8005156:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	887a      	ldrh	r2, [r7, #2]
 800515c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	887a      	ldrh	r2, [r7, #2]
 8005162:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2200      	movs	r2, #0
 8005168:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005178:	d802      	bhi.n	8005180 <HAL_SPI_TransmitReceive+0xe6>
 800517a:	8a3b      	ldrh	r3, [r7, #16]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d908      	bls.n	8005192 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800518e:	605a      	str	r2, [r3, #4]
 8005190:	e007      	b.n	80051a2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685a      	ldr	r2, [r3, #4]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051a0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ac:	2b40      	cmp	r3, #64	; 0x40
 80051ae:	d007      	beq.n	80051c0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051c8:	d97c      	bls.n	80052c4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <HAL_SPI_TransmitReceive+0x13e>
 80051d2:	8a7b      	ldrh	r3, [r7, #18]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d169      	bne.n	80052ac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051dc:	881a      	ldrh	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	1c9a      	adds	r2, r3, #2
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	3b01      	subs	r3, #1
 80051f6:	b29a      	uxth	r2, r3
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051fc:	e056      	b.n	80052ac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b02      	cmp	r3, #2
 800520a:	d11b      	bne.n	8005244 <HAL_SPI_TransmitReceive+0x1aa>
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005210:	b29b      	uxth	r3, r3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d016      	beq.n	8005244 <HAL_SPI_TransmitReceive+0x1aa>
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	2b01      	cmp	r3, #1
 800521a:	d113      	bne.n	8005244 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005220:	881a      	ldrh	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522c:	1c9a      	adds	r2, r3, #2
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005236:	b29b      	uxth	r3, r3
 8005238:	3b01      	subs	r3, #1
 800523a:	b29a      	uxth	r2, r3
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005240:	2300      	movs	r3, #0
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b01      	cmp	r3, #1
 8005250:	d11c      	bne.n	800528c <HAL_SPI_TransmitReceive+0x1f2>
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d016      	beq.n	800528c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005268:	b292      	uxth	r2, r2
 800526a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	1c9a      	adds	r2, r3, #2
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800527c:	b29b      	uxth	r3, r3
 800527e:	3b01      	subs	r3, #1
 8005280:	b29a      	uxth	r2, r3
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005288:	2301      	movs	r3, #1
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800528c:	f7fd fa3c 	bl	8002708 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005298:	429a      	cmp	r2, r3
 800529a:	d807      	bhi.n	80052ac <HAL_SPI_TransmitReceive+0x212>
 800529c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052a2:	d003      	beq.n	80052ac <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80052aa:	e0fb      	b.n	80054a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1a3      	bne.n	80051fe <HAL_SPI_TransmitReceive+0x164>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d19d      	bne.n	80051fe <HAL_SPI_TransmitReceive+0x164>
 80052c2:	e0df      	b.n	8005484 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_SPI_TransmitReceive+0x23a>
 80052cc:	8a7b      	ldrh	r3, [r7, #18]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	f040 80cb 	bne.w	800546a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d912      	bls.n	8005304 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e2:	881a      	ldrh	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ee:	1c9a      	adds	r2, r3, #2
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	3b02      	subs	r3, #2
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005302:	e0b2      	b.n	800546a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	330c      	adds	r3, #12
 800530e:	7812      	ldrb	r2, [r2, #0]
 8005310:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005320:	b29b      	uxth	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b29a      	uxth	r2, r3
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800532a:	e09e      	b.n	800546a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b02      	cmp	r3, #2
 8005338:	d134      	bne.n	80053a4 <HAL_SPI_TransmitReceive+0x30a>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800533e:	b29b      	uxth	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d02f      	beq.n	80053a4 <HAL_SPI_TransmitReceive+0x30a>
 8005344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005346:	2b01      	cmp	r3, #1
 8005348:	d12c      	bne.n	80053a4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800534e:	b29b      	uxth	r3, r3
 8005350:	2b01      	cmp	r3, #1
 8005352:	d912      	bls.n	800537a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005358:	881a      	ldrh	r2, [r3, #0]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	1c9a      	adds	r2, r3, #2
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800536e:	b29b      	uxth	r3, r3
 8005370:	3b02      	subs	r3, #2
 8005372:	b29a      	uxth	r2, r3
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005378:	e012      	b.n	80053a0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	330c      	adds	r3, #12
 8005384:	7812      	ldrb	r2, [r2, #0]
 8005386:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	1c5a      	adds	r2, r3, #1
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005396:	b29b      	uxth	r3, r3
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80053a0:	2300      	movs	r3, #0
 80053a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d148      	bne.n	8005444 <HAL_SPI_TransmitReceive+0x3aa>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d042      	beq.n	8005444 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d923      	bls.n	8005412 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68da      	ldr	r2, [r3, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d4:	b292      	uxth	r2, r2
 80053d6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053dc:	1c9a      	adds	r2, r3, #2
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	3b02      	subs	r3, #2
 80053ec:	b29a      	uxth	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d81f      	bhi.n	8005440 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	685a      	ldr	r2, [r3, #4]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800540e:	605a      	str	r2, [r3, #4]
 8005410:	e016      	b.n	8005440 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f103 020c 	add.w	r2, r3, #12
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	7812      	ldrb	r2, [r2, #0]
 8005420:	b2d2      	uxtb	r2, r2
 8005422:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005434:	b29b      	uxth	r3, r3
 8005436:	3b01      	subs	r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005440:	2301      	movs	r3, #1
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005444:	f7fd f960 	bl	8002708 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005450:	429a      	cmp	r2, r3
 8005452:	d803      	bhi.n	800545c <HAL_SPI_TransmitReceive+0x3c2>
 8005454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545a:	d102      	bne.n	8005462 <HAL_SPI_TransmitReceive+0x3c8>
 800545c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800545e:	2b00      	cmp	r3, #0
 8005460:	d103      	bne.n	800546a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005468:	e01c      	b.n	80054a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	f47f af5b 	bne.w	800532c <HAL_SPI_TransmitReceive+0x292>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800547c:	b29b      	uxth	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	f47f af54 	bne.w	800532c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005484:	69fa      	ldr	r2, [r7, #28]
 8005486:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f000 f937 	bl	80056fc <SPI_EndRxTxTransaction>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d006      	beq.n	80054a2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2220      	movs	r2, #32
 800549e:	661a      	str	r2, [r3, #96]	; 0x60
 80054a0:	e000      	b.n	80054a4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80054a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80054b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3728      	adds	r7, #40	; 0x28
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b088      	sub	sp, #32
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	603b      	str	r3, [r7, #0]
 80054cc:	4613      	mov	r3, r2
 80054ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054d0:	f7fd f91a 	bl	8002708 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d8:	1a9b      	subs	r3, r3, r2
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	4413      	add	r3, r2
 80054de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054e0:	f7fd f912 	bl	8002708 <HAL_GetTick>
 80054e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054e6:	4b39      	ldr	r3, [pc, #228]	; (80055cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	015b      	lsls	r3, r3, #5
 80054ec:	0d1b      	lsrs	r3, r3, #20
 80054ee:	69fa      	ldr	r2, [r7, #28]
 80054f0:	fb02 f303 	mul.w	r3, r2, r3
 80054f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054f6:	e054      	b.n	80055a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fe:	d050      	beq.n	80055a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005500:	f7fd f902 	bl	8002708 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	69bb      	ldr	r3, [r7, #24]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	69fa      	ldr	r2, [r7, #28]
 800550c:	429a      	cmp	r2, r3
 800550e:	d902      	bls.n	8005516 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d13d      	bne.n	8005592 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005524:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800552e:	d111      	bne.n	8005554 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005538:	d004      	beq.n	8005544 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005542:	d107      	bne.n	8005554 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005552:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800555c:	d10f      	bne.n	800557e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800557c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e017      	b.n	80055c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d101      	bne.n	800559c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005598:	2300      	movs	r3, #0
 800559a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	3b01      	subs	r3, #1
 80055a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4013      	ands	r3, r2
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	bf0c      	ite	eq
 80055b2:	2301      	moveq	r3, #1
 80055b4:	2300      	movne	r3, #0
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	461a      	mov	r2, r3
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d19b      	bne.n	80054f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3720      	adds	r7, #32
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20000438 	.word	0x20000438

080055d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08a      	sub	sp, #40	; 0x28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80055de:	2300      	movs	r3, #0
 80055e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80055e2:	f7fd f891 	bl	8002708 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ea:	1a9b      	subs	r3, r3, r2
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	4413      	add	r3, r2
 80055f0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80055f2:	f7fd f889 	bl	8002708 <HAL_GetTick>
 80055f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	330c      	adds	r3, #12
 80055fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005600:	4b3d      	ldr	r3, [pc, #244]	; (80056f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	4613      	mov	r3, r2
 8005606:	009b      	lsls	r3, r3, #2
 8005608:	4413      	add	r3, r2
 800560a:	00da      	lsls	r2, r3, #3
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	0d1b      	lsrs	r3, r3, #20
 8005610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005612:	fb02 f303 	mul.w	r3, r2, r3
 8005616:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005618:	e060      	b.n	80056dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005620:	d107      	bne.n	8005632 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d104      	bne.n	8005632 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	b2db      	uxtb	r3, r3
 800562e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005630:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005638:	d050      	beq.n	80056dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800563a:	f7fd f865 	bl	8002708 <HAL_GetTick>
 800563e:	4602      	mov	r2, r0
 8005640:	6a3b      	ldr	r3, [r7, #32]
 8005642:	1ad3      	subs	r3, r2, r3
 8005644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005646:	429a      	cmp	r2, r3
 8005648:	d902      	bls.n	8005650 <SPI_WaitFifoStateUntilTimeout+0x80>
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	2b00      	cmp	r3, #0
 800564e:	d13d      	bne.n	80056cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800565e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005668:	d111      	bne.n	800568e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005672:	d004      	beq.n	800567e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800567c:	d107      	bne.n	800568e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800568c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005696:	d10f      	bne.n	80056b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056a6:	601a      	str	r2, [r3, #0]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e010      	b.n	80056ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80056d2:	2300      	movs	r3, #0
 80056d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	3b01      	subs	r3, #1
 80056da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689a      	ldr	r2, [r3, #8]
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	4013      	ands	r3, r2
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d196      	bne.n	800561a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3728      	adds	r7, #40	; 0x28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20000438 	.word	0x20000438

080056fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af02      	add	r7, sp, #8
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	2200      	movs	r2, #0
 8005710:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f7ff ff5b 	bl	80055d0 <SPI_WaitFifoStateUntilTimeout>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d007      	beq.n	8005730 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005724:	f043 0220 	orr.w	r2, r3, #32
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e027      	b.n	8005780 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2200      	movs	r2, #0
 8005738:	2180      	movs	r1, #128	; 0x80
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f7ff fec0 	bl	80054c0 <SPI_WaitFlagStateUntilTimeout>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d007      	beq.n	8005756 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800574a:	f043 0220 	orr.w	r2, r3, #32
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005752:	2303      	movs	r3, #3
 8005754:	e014      	b.n	8005780 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	2200      	movs	r2, #0
 800575e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f7ff ff34 	bl	80055d0 <SPI_WaitFifoStateUntilTimeout>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d007      	beq.n	800577e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005772:	f043 0220 	orr.w	r2, r3, #32
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e000      	b.n	8005780 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e049      	b.n	800582e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d106      	bne.n	80057b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7fc fe22 	bl	80023f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3304      	adds	r3, #4
 80057c4:	4619      	mov	r1, r3
 80057c6:	4610      	mov	r0, r2
 80057c8:	f000 fac0 	bl	8005d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b01      	cmp	r3, #1
 800584a:	d001      	beq.n	8005850 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e04f      	b.n	80058f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2202      	movs	r2, #2
 8005854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0201 	orr.w	r2, r2, #1
 8005866:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a23      	ldr	r2, [pc, #140]	; (80058fc <HAL_TIM_Base_Start_IT+0xc4>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d01d      	beq.n	80058ae <HAL_TIM_Base_Start_IT+0x76>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800587a:	d018      	beq.n	80058ae <HAL_TIM_Base_Start_IT+0x76>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a1f      	ldr	r2, [pc, #124]	; (8005900 <HAL_TIM_Base_Start_IT+0xc8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d013      	beq.n	80058ae <HAL_TIM_Base_Start_IT+0x76>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a1e      	ldr	r2, [pc, #120]	; (8005904 <HAL_TIM_Base_Start_IT+0xcc>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d00e      	beq.n	80058ae <HAL_TIM_Base_Start_IT+0x76>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a1c      	ldr	r2, [pc, #112]	; (8005908 <HAL_TIM_Base_Start_IT+0xd0>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d009      	beq.n	80058ae <HAL_TIM_Base_Start_IT+0x76>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a1b      	ldr	r2, [pc, #108]	; (800590c <HAL_TIM_Base_Start_IT+0xd4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d004      	beq.n	80058ae <HAL_TIM_Base_Start_IT+0x76>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a19      	ldr	r2, [pc, #100]	; (8005910 <HAL_TIM_Base_Start_IT+0xd8>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d115      	bne.n	80058da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	4b17      	ldr	r3, [pc, #92]	; (8005914 <HAL_TIM_Base_Start_IT+0xdc>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2b06      	cmp	r3, #6
 80058be:	d015      	beq.n	80058ec <HAL_TIM_Base_Start_IT+0xb4>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058c6:	d011      	beq.n	80058ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	681a      	ldr	r2, [r3, #0]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d8:	e008      	b.n	80058ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f042 0201 	orr.w	r2, r2, #1
 80058e8:	601a      	str	r2, [r3, #0]
 80058ea:	e000      	b.n	80058ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058ee:	2300      	movs	r3, #0
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3714      	adds	r7, #20
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr
 80058fc:	40012c00 	.word	0x40012c00
 8005900:	40000400 	.word	0x40000400
 8005904:	40000800 	.word	0x40000800
 8005908:	40000c00 	.word	0x40000c00
 800590c:	40013400 	.word	0x40013400
 8005910:	40014000 	.word	0x40014000
 8005914:	00010007 	.word	0x00010007

08005918 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	f003 0302 	and.w	r3, r3, #2
 800592a:	2b02      	cmp	r3, #2
 800592c:	d122      	bne.n	8005974 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b02      	cmp	r3, #2
 800593a:	d11b      	bne.n	8005974 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f06f 0202 	mvn.w	r2, #2
 8005944:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	f003 0303 	and.w	r3, r3, #3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 f9d8 	bl	8005d10 <HAL_TIM_IC_CaptureCallback>
 8005960:	e005      	b.n	800596e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f9ca 	bl	8005cfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 f9db 	bl	8005d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b04      	cmp	r3, #4
 8005980:	d122      	bne.n	80059c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68db      	ldr	r3, [r3, #12]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b04      	cmp	r3, #4
 800598e:	d11b      	bne.n	80059c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f06f 0204 	mvn.w	r2, #4
 8005998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2202      	movs	r2, #2
 800599e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d003      	beq.n	80059b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 f9ae 	bl	8005d10 <HAL_TIM_IC_CaptureCallback>
 80059b4:	e005      	b.n	80059c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f9a0 	bl	8005cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f9b1 	bl	8005d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f003 0308 	and.w	r3, r3, #8
 80059d2:	2b08      	cmp	r3, #8
 80059d4:	d122      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f003 0308 	and.w	r3, r3, #8
 80059e0:	2b08      	cmp	r3, #8
 80059e2:	d11b      	bne.n	8005a1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f06f 0208 	mvn.w	r2, #8
 80059ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2204      	movs	r2, #4
 80059f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f003 0303 	and.w	r3, r3, #3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f984 	bl	8005d10 <HAL_TIM_IC_CaptureCallback>
 8005a08:	e005      	b.n	8005a16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f976 	bl	8005cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f987 	bl	8005d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	f003 0310 	and.w	r3, r3, #16
 8005a26:	2b10      	cmp	r3, #16
 8005a28:	d122      	bne.n	8005a70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	f003 0310 	and.w	r3, r3, #16
 8005a34:	2b10      	cmp	r3, #16
 8005a36:	d11b      	bne.n	8005a70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f06f 0210 	mvn.w	r2, #16
 8005a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2208      	movs	r2, #8
 8005a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 f95a 	bl	8005d10 <HAL_TIM_IC_CaptureCallback>
 8005a5c:	e005      	b.n	8005a6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f94c 	bl	8005cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f95d 	bl	8005d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	691b      	ldr	r3, [r3, #16]
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d10e      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d107      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0201 	mvn.w	r2, #1
 8005a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 f926 	bl	8005ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa6:	2b80      	cmp	r3, #128	; 0x80
 8005aa8:	d10e      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab4:	2b80      	cmp	r3, #128	; 0x80
 8005ab6:	d107      	bne.n	8005ac8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fb08 	bl	80060d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ad6:	d10e      	bne.n	8005af6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae2:	2b80      	cmp	r3, #128	; 0x80
 8005ae4:	d107      	bne.n	8005af6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fafb 	bl	80060ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b00:	2b40      	cmp	r3, #64	; 0x40
 8005b02:	d10e      	bne.n	8005b22 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b0e:	2b40      	cmp	r3, #64	; 0x40
 8005b10:	d107      	bne.n	8005b22 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f90b 	bl	8005d38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	f003 0320 	and.w	r3, r3, #32
 8005b2c:	2b20      	cmp	r3, #32
 8005b2e:	d10e      	bne.n	8005b4e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f003 0320 	and.w	r3, r3, #32
 8005b3a:	2b20      	cmp	r3, #32
 8005b3c:	d107      	bne.n	8005b4e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f06f 0220 	mvn.w	r2, #32
 8005b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fabb 	bl	80060c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b4e:	bf00      	nop
 8005b50:	3708      	adds	r7, #8
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d101      	bne.n	8005b72 <HAL_TIM_ConfigClockSource+0x1c>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	e0b6      	b.n	8005ce0 <HAL_TIM_ConfigClockSource+0x18a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2202      	movs	r2, #2
 8005b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b90:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b94:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b9c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bae:	d03e      	beq.n	8005c2e <HAL_TIM_ConfigClockSource+0xd8>
 8005bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bb4:	f200 8087 	bhi.w	8005cc6 <HAL_TIM_ConfigClockSource+0x170>
 8005bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bbc:	f000 8086 	beq.w	8005ccc <HAL_TIM_ConfigClockSource+0x176>
 8005bc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc4:	d87f      	bhi.n	8005cc6 <HAL_TIM_ConfigClockSource+0x170>
 8005bc6:	2b70      	cmp	r3, #112	; 0x70
 8005bc8:	d01a      	beq.n	8005c00 <HAL_TIM_ConfigClockSource+0xaa>
 8005bca:	2b70      	cmp	r3, #112	; 0x70
 8005bcc:	d87b      	bhi.n	8005cc6 <HAL_TIM_ConfigClockSource+0x170>
 8005bce:	2b60      	cmp	r3, #96	; 0x60
 8005bd0:	d050      	beq.n	8005c74 <HAL_TIM_ConfigClockSource+0x11e>
 8005bd2:	2b60      	cmp	r3, #96	; 0x60
 8005bd4:	d877      	bhi.n	8005cc6 <HAL_TIM_ConfigClockSource+0x170>
 8005bd6:	2b50      	cmp	r3, #80	; 0x50
 8005bd8:	d03c      	beq.n	8005c54 <HAL_TIM_ConfigClockSource+0xfe>
 8005bda:	2b50      	cmp	r3, #80	; 0x50
 8005bdc:	d873      	bhi.n	8005cc6 <HAL_TIM_ConfigClockSource+0x170>
 8005bde:	2b40      	cmp	r3, #64	; 0x40
 8005be0:	d058      	beq.n	8005c94 <HAL_TIM_ConfigClockSource+0x13e>
 8005be2:	2b40      	cmp	r3, #64	; 0x40
 8005be4:	d86f      	bhi.n	8005cc6 <HAL_TIM_ConfigClockSource+0x170>
 8005be6:	2b30      	cmp	r3, #48	; 0x30
 8005be8:	d064      	beq.n	8005cb4 <HAL_TIM_ConfigClockSource+0x15e>
 8005bea:	2b30      	cmp	r3, #48	; 0x30
 8005bec:	d86b      	bhi.n	8005cc6 <HAL_TIM_ConfigClockSource+0x170>
 8005bee:	2b20      	cmp	r3, #32
 8005bf0:	d060      	beq.n	8005cb4 <HAL_TIM_ConfigClockSource+0x15e>
 8005bf2:	2b20      	cmp	r3, #32
 8005bf4:	d867      	bhi.n	8005cc6 <HAL_TIM_ConfigClockSource+0x170>
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d05c      	beq.n	8005cb4 <HAL_TIM_ConfigClockSource+0x15e>
 8005bfa:	2b10      	cmp	r3, #16
 8005bfc:	d05a      	beq.n	8005cb4 <HAL_TIM_ConfigClockSource+0x15e>
 8005bfe:	e062      	b.n	8005cc6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6818      	ldr	r0, [r3, #0]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	6899      	ldr	r1, [r3, #8]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f000 f9b0 	bl	8005f74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c22:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	68ba      	ldr	r2, [r7, #8]
 8005c2a:	609a      	str	r2, [r3, #8]
      break;
 8005c2c:	e04f      	b.n	8005cce <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6818      	ldr	r0, [r3, #0]
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	6899      	ldr	r1, [r3, #8]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f000 f999 	bl	8005f74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	689a      	ldr	r2, [r3, #8]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c50:	609a      	str	r2, [r3, #8]
      break;
 8005c52:	e03c      	b.n	8005cce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6818      	ldr	r0, [r3, #0]
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	6859      	ldr	r1, [r3, #4]
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	461a      	mov	r2, r3
 8005c62:	f000 f90d 	bl	8005e80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2150      	movs	r1, #80	; 0x50
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 f966 	bl	8005f3e <TIM_ITRx_SetConfig>
      break;
 8005c72:	e02c      	b.n	8005cce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	6859      	ldr	r1, [r3, #4]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	461a      	mov	r2, r3
 8005c82:	f000 f92c 	bl	8005ede <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2160      	movs	r1, #96	; 0x60
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f000 f956 	bl	8005f3e <TIM_ITRx_SetConfig>
      break;
 8005c92:	e01c      	b.n	8005cce <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6818      	ldr	r0, [r3, #0]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	6859      	ldr	r1, [r3, #4]
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f000 f8ed 	bl	8005e80 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2140      	movs	r1, #64	; 0x40
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 f946 	bl	8005f3e <TIM_ITRx_SetConfig>
      break;
 8005cb2:	e00c      	b.n	8005cce <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	f000 f93d 	bl	8005f3e <TIM_ITRx_SetConfig>
      break;
 8005cc4:	e003      	b.n	8005cce <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8005cca:	e000      	b.n	8005cce <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005ccc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005cf0:	bf00      	nop
 8005cf2:	370c      	adds	r7, #12
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr

08005cfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a40      	ldr	r2, [pc, #256]	; (8005e60 <TIM_Base_SetConfig+0x114>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d013      	beq.n	8005d8c <TIM_Base_SetConfig+0x40>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d6a:	d00f      	beq.n	8005d8c <TIM_Base_SetConfig+0x40>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a3d      	ldr	r2, [pc, #244]	; (8005e64 <TIM_Base_SetConfig+0x118>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d00b      	beq.n	8005d8c <TIM_Base_SetConfig+0x40>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a3c      	ldr	r2, [pc, #240]	; (8005e68 <TIM_Base_SetConfig+0x11c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d007      	beq.n	8005d8c <TIM_Base_SetConfig+0x40>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4a3b      	ldr	r2, [pc, #236]	; (8005e6c <TIM_Base_SetConfig+0x120>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d003      	beq.n	8005d8c <TIM_Base_SetConfig+0x40>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4a3a      	ldr	r2, [pc, #232]	; (8005e70 <TIM_Base_SetConfig+0x124>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d108      	bne.n	8005d9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a2f      	ldr	r2, [pc, #188]	; (8005e60 <TIM_Base_SetConfig+0x114>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d01f      	beq.n	8005de6 <TIM_Base_SetConfig+0x9a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dac:	d01b      	beq.n	8005de6 <TIM_Base_SetConfig+0x9a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a2c      	ldr	r2, [pc, #176]	; (8005e64 <TIM_Base_SetConfig+0x118>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d017      	beq.n	8005de6 <TIM_Base_SetConfig+0x9a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a2b      	ldr	r2, [pc, #172]	; (8005e68 <TIM_Base_SetConfig+0x11c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d013      	beq.n	8005de6 <TIM_Base_SetConfig+0x9a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a2a      	ldr	r2, [pc, #168]	; (8005e6c <TIM_Base_SetConfig+0x120>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d00f      	beq.n	8005de6 <TIM_Base_SetConfig+0x9a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a29      	ldr	r2, [pc, #164]	; (8005e70 <TIM_Base_SetConfig+0x124>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00b      	beq.n	8005de6 <TIM_Base_SetConfig+0x9a>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a28      	ldr	r2, [pc, #160]	; (8005e74 <TIM_Base_SetConfig+0x128>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d007      	beq.n	8005de6 <TIM_Base_SetConfig+0x9a>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a27      	ldr	r2, [pc, #156]	; (8005e78 <TIM_Base_SetConfig+0x12c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d003      	beq.n	8005de6 <TIM_Base_SetConfig+0x9a>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a26      	ldr	r2, [pc, #152]	; (8005e7c <TIM_Base_SetConfig+0x130>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d108      	bne.n	8005df8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	689a      	ldr	r2, [r3, #8]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a10      	ldr	r2, [pc, #64]	; (8005e60 <TIM_Base_SetConfig+0x114>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d00f      	beq.n	8005e44 <TIM_Base_SetConfig+0xf8>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a12      	ldr	r2, [pc, #72]	; (8005e70 <TIM_Base_SetConfig+0x124>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d00b      	beq.n	8005e44 <TIM_Base_SetConfig+0xf8>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a11      	ldr	r2, [pc, #68]	; (8005e74 <TIM_Base_SetConfig+0x128>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d007      	beq.n	8005e44 <TIM_Base_SetConfig+0xf8>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a10      	ldr	r2, [pc, #64]	; (8005e78 <TIM_Base_SetConfig+0x12c>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d003      	beq.n	8005e44 <TIM_Base_SetConfig+0xf8>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	4a0f      	ldr	r2, [pc, #60]	; (8005e7c <TIM_Base_SetConfig+0x130>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d103      	bne.n	8005e4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	691a      	ldr	r2, [r3, #16]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	615a      	str	r2, [r3, #20]
}
 8005e52:	bf00      	nop
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	40012c00 	.word	0x40012c00
 8005e64:	40000400 	.word	0x40000400
 8005e68:	40000800 	.word	0x40000800
 8005e6c:	40000c00 	.word	0x40000c00
 8005e70:	40013400 	.word	0x40013400
 8005e74:	40014000 	.word	0x40014000
 8005e78:	40014400 	.word	0x40014400
 8005e7c:	40014800 	.word	0x40014800

08005e80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	f023 0201 	bic.w	r2, r3, #1
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	011b      	lsls	r3, r3, #4
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f023 030a 	bic.w	r3, r3, #10
 8005ebc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b087      	sub	sp, #28
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	60f8      	str	r0, [r7, #12]
 8005ee6:	60b9      	str	r1, [r7, #8]
 8005ee8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6a1b      	ldr	r3, [r3, #32]
 8005eee:	f023 0210 	bic.w	r2, r3, #16
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	031b      	lsls	r3, r3, #12
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	621a      	str	r2, [r3, #32]
}
 8005f32:	bf00      	nop
 8005f34:	371c      	adds	r7, #28
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b085      	sub	sp, #20
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	f043 0307 	orr.w	r3, r3, #7
 8005f60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	609a      	str	r2, [r3, #8]
}
 8005f68:	bf00      	nop
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b087      	sub	sp, #28
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
 8005f80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	021a      	lsls	r2, r3, #8
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	431a      	orrs	r2, r3
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	609a      	str	r2, [r3, #8]
}
 8005fa8:	bf00      	nop
 8005faa:	371c      	adds	r7, #28
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d101      	bne.n	8005fcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fc8:	2302      	movs	r3, #2
 8005fca:	e068      	b.n	800609e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a2e      	ldr	r2, [pc, #184]	; (80060ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d004      	beq.n	8006000 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a2d      	ldr	r2, [pc, #180]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d108      	bne.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006006:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	68fa      	ldr	r2, [r7, #12]
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006018:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	4313      	orrs	r3, r2
 8006022:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a1e      	ldr	r2, [pc, #120]	; (80060ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d01d      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800603e:	d018      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a1b      	ldr	r2, [pc, #108]	; (80060b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d013      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a1a      	ldr	r2, [pc, #104]	; (80060b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00e      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a18      	ldr	r2, [pc, #96]	; (80060bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d009      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a13      	ldr	r2, [pc, #76]	; (80060b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d004      	beq.n	8006072 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a14      	ldr	r2, [pc, #80]	; (80060c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d10c      	bne.n	800608c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006078:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	4313      	orrs	r3, r2
 8006082:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	40012c00 	.word	0x40012c00
 80060b0:	40013400 	.word	0x40013400
 80060b4:	40000400 	.word	0x40000400
 80060b8:	40000800 	.word	0x40000800
 80060bc:	40000c00 	.word	0x40000c00
 80060c0:	40014000 	.word	0x40014000

080060c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b082      	sub	sp, #8
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	e040      	b.n	8006194 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006116:	2b00      	cmp	r3, #0
 8006118:	d106      	bne.n	8006128 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f7fc f9a8 	bl	8002478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2224      	movs	r2, #36	; 0x24
 800612c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0201 	bic.w	r2, r2, #1
 800613c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 f82c 	bl	800619c <UART_SetConfig>
 8006144:	4603      	mov	r3, r0
 8006146:	2b01      	cmp	r3, #1
 8006148:	d101      	bne.n	800614e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e022      	b.n	8006194 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fad8 	bl	800670c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800616a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689a      	ldr	r2, [r3, #8]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800617a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0201 	orr.w	r2, r2, #1
 800618a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 fb5f 	bl	8006850 <UART_CheckIdleState>
 8006192:	4603      	mov	r3, r0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800619c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061a0:	b08a      	sub	sp, #40	; 0x28
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061a6:	2300      	movs	r3, #0
 80061a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	431a      	orrs	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	431a      	orrs	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	4ba4      	ldr	r3, [pc, #656]	; (800645c <UART_SetConfig+0x2c0>)
 80061cc:	4013      	ands	r3, r2
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	6812      	ldr	r2, [r2, #0]
 80061d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061d4:	430b      	orrs	r3, r1
 80061d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	68da      	ldr	r2, [r3, #12]
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	699b      	ldr	r3, [r3, #24]
 80061f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a99      	ldr	r2, [pc, #612]	; (8006460 <UART_SetConfig+0x2c4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d004      	beq.n	8006208 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006204:	4313      	orrs	r3, r2
 8006206:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006218:	430a      	orrs	r2, r1
 800621a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a90      	ldr	r2, [pc, #576]	; (8006464 <UART_SetConfig+0x2c8>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d126      	bne.n	8006274 <UART_SetConfig+0xd8>
 8006226:	4b90      	ldr	r3, [pc, #576]	; (8006468 <UART_SetConfig+0x2cc>)
 8006228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622c:	f003 0303 	and.w	r3, r3, #3
 8006230:	2b03      	cmp	r3, #3
 8006232:	d81b      	bhi.n	800626c <UART_SetConfig+0xd0>
 8006234:	a201      	add	r2, pc, #4	; (adr r2, 800623c <UART_SetConfig+0xa0>)
 8006236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623a:	bf00      	nop
 800623c:	0800624d 	.word	0x0800624d
 8006240:	0800625d 	.word	0x0800625d
 8006244:	08006255 	.word	0x08006255
 8006248:	08006265 	.word	0x08006265
 800624c:	2301      	movs	r3, #1
 800624e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006252:	e116      	b.n	8006482 <UART_SetConfig+0x2e6>
 8006254:	2302      	movs	r3, #2
 8006256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800625a:	e112      	b.n	8006482 <UART_SetConfig+0x2e6>
 800625c:	2304      	movs	r3, #4
 800625e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006262:	e10e      	b.n	8006482 <UART_SetConfig+0x2e6>
 8006264:	2308      	movs	r3, #8
 8006266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800626a:	e10a      	b.n	8006482 <UART_SetConfig+0x2e6>
 800626c:	2310      	movs	r3, #16
 800626e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006272:	e106      	b.n	8006482 <UART_SetConfig+0x2e6>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a7c      	ldr	r2, [pc, #496]	; (800646c <UART_SetConfig+0x2d0>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d138      	bne.n	80062f0 <UART_SetConfig+0x154>
 800627e:	4b7a      	ldr	r3, [pc, #488]	; (8006468 <UART_SetConfig+0x2cc>)
 8006280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006284:	f003 030c 	and.w	r3, r3, #12
 8006288:	2b0c      	cmp	r3, #12
 800628a:	d82d      	bhi.n	80062e8 <UART_SetConfig+0x14c>
 800628c:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <UART_SetConfig+0xf8>)
 800628e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006292:	bf00      	nop
 8006294:	080062c9 	.word	0x080062c9
 8006298:	080062e9 	.word	0x080062e9
 800629c:	080062e9 	.word	0x080062e9
 80062a0:	080062e9 	.word	0x080062e9
 80062a4:	080062d9 	.word	0x080062d9
 80062a8:	080062e9 	.word	0x080062e9
 80062ac:	080062e9 	.word	0x080062e9
 80062b0:	080062e9 	.word	0x080062e9
 80062b4:	080062d1 	.word	0x080062d1
 80062b8:	080062e9 	.word	0x080062e9
 80062bc:	080062e9 	.word	0x080062e9
 80062c0:	080062e9 	.word	0x080062e9
 80062c4:	080062e1 	.word	0x080062e1
 80062c8:	2300      	movs	r3, #0
 80062ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ce:	e0d8      	b.n	8006482 <UART_SetConfig+0x2e6>
 80062d0:	2302      	movs	r3, #2
 80062d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062d6:	e0d4      	b.n	8006482 <UART_SetConfig+0x2e6>
 80062d8:	2304      	movs	r3, #4
 80062da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062de:	e0d0      	b.n	8006482 <UART_SetConfig+0x2e6>
 80062e0:	2308      	movs	r3, #8
 80062e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062e6:	e0cc      	b.n	8006482 <UART_SetConfig+0x2e6>
 80062e8:	2310      	movs	r3, #16
 80062ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ee:	e0c8      	b.n	8006482 <UART_SetConfig+0x2e6>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a5e      	ldr	r2, [pc, #376]	; (8006470 <UART_SetConfig+0x2d4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d125      	bne.n	8006346 <UART_SetConfig+0x1aa>
 80062fa:	4b5b      	ldr	r3, [pc, #364]	; (8006468 <UART_SetConfig+0x2cc>)
 80062fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006300:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006304:	2b30      	cmp	r3, #48	; 0x30
 8006306:	d016      	beq.n	8006336 <UART_SetConfig+0x19a>
 8006308:	2b30      	cmp	r3, #48	; 0x30
 800630a:	d818      	bhi.n	800633e <UART_SetConfig+0x1a2>
 800630c:	2b20      	cmp	r3, #32
 800630e:	d00a      	beq.n	8006326 <UART_SetConfig+0x18a>
 8006310:	2b20      	cmp	r3, #32
 8006312:	d814      	bhi.n	800633e <UART_SetConfig+0x1a2>
 8006314:	2b00      	cmp	r3, #0
 8006316:	d002      	beq.n	800631e <UART_SetConfig+0x182>
 8006318:	2b10      	cmp	r3, #16
 800631a:	d008      	beq.n	800632e <UART_SetConfig+0x192>
 800631c:	e00f      	b.n	800633e <UART_SetConfig+0x1a2>
 800631e:	2300      	movs	r3, #0
 8006320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006324:	e0ad      	b.n	8006482 <UART_SetConfig+0x2e6>
 8006326:	2302      	movs	r3, #2
 8006328:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800632c:	e0a9      	b.n	8006482 <UART_SetConfig+0x2e6>
 800632e:	2304      	movs	r3, #4
 8006330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006334:	e0a5      	b.n	8006482 <UART_SetConfig+0x2e6>
 8006336:	2308      	movs	r3, #8
 8006338:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800633c:	e0a1      	b.n	8006482 <UART_SetConfig+0x2e6>
 800633e:	2310      	movs	r3, #16
 8006340:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006344:	e09d      	b.n	8006482 <UART_SetConfig+0x2e6>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a4a      	ldr	r2, [pc, #296]	; (8006474 <UART_SetConfig+0x2d8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d125      	bne.n	800639c <UART_SetConfig+0x200>
 8006350:	4b45      	ldr	r3, [pc, #276]	; (8006468 <UART_SetConfig+0x2cc>)
 8006352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006356:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800635a:	2bc0      	cmp	r3, #192	; 0xc0
 800635c:	d016      	beq.n	800638c <UART_SetConfig+0x1f0>
 800635e:	2bc0      	cmp	r3, #192	; 0xc0
 8006360:	d818      	bhi.n	8006394 <UART_SetConfig+0x1f8>
 8006362:	2b80      	cmp	r3, #128	; 0x80
 8006364:	d00a      	beq.n	800637c <UART_SetConfig+0x1e0>
 8006366:	2b80      	cmp	r3, #128	; 0x80
 8006368:	d814      	bhi.n	8006394 <UART_SetConfig+0x1f8>
 800636a:	2b00      	cmp	r3, #0
 800636c:	d002      	beq.n	8006374 <UART_SetConfig+0x1d8>
 800636e:	2b40      	cmp	r3, #64	; 0x40
 8006370:	d008      	beq.n	8006384 <UART_SetConfig+0x1e8>
 8006372:	e00f      	b.n	8006394 <UART_SetConfig+0x1f8>
 8006374:	2300      	movs	r3, #0
 8006376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800637a:	e082      	b.n	8006482 <UART_SetConfig+0x2e6>
 800637c:	2302      	movs	r3, #2
 800637e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006382:	e07e      	b.n	8006482 <UART_SetConfig+0x2e6>
 8006384:	2304      	movs	r3, #4
 8006386:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800638a:	e07a      	b.n	8006482 <UART_SetConfig+0x2e6>
 800638c:	2308      	movs	r3, #8
 800638e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006392:	e076      	b.n	8006482 <UART_SetConfig+0x2e6>
 8006394:	2310      	movs	r3, #16
 8006396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800639a:	e072      	b.n	8006482 <UART_SetConfig+0x2e6>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a35      	ldr	r2, [pc, #212]	; (8006478 <UART_SetConfig+0x2dc>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d12a      	bne.n	80063fc <UART_SetConfig+0x260>
 80063a6:	4b30      	ldr	r3, [pc, #192]	; (8006468 <UART_SetConfig+0x2cc>)
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063b4:	d01a      	beq.n	80063ec <UART_SetConfig+0x250>
 80063b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063ba:	d81b      	bhi.n	80063f4 <UART_SetConfig+0x258>
 80063bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063c0:	d00c      	beq.n	80063dc <UART_SetConfig+0x240>
 80063c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063c6:	d815      	bhi.n	80063f4 <UART_SetConfig+0x258>
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <UART_SetConfig+0x238>
 80063cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063d0:	d008      	beq.n	80063e4 <UART_SetConfig+0x248>
 80063d2:	e00f      	b.n	80063f4 <UART_SetConfig+0x258>
 80063d4:	2300      	movs	r3, #0
 80063d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063da:	e052      	b.n	8006482 <UART_SetConfig+0x2e6>
 80063dc:	2302      	movs	r3, #2
 80063de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063e2:	e04e      	b.n	8006482 <UART_SetConfig+0x2e6>
 80063e4:	2304      	movs	r3, #4
 80063e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ea:	e04a      	b.n	8006482 <UART_SetConfig+0x2e6>
 80063ec:	2308      	movs	r3, #8
 80063ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063f2:	e046      	b.n	8006482 <UART_SetConfig+0x2e6>
 80063f4:	2310      	movs	r3, #16
 80063f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063fa:	e042      	b.n	8006482 <UART_SetConfig+0x2e6>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a17      	ldr	r2, [pc, #92]	; (8006460 <UART_SetConfig+0x2c4>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d13a      	bne.n	800647c <UART_SetConfig+0x2e0>
 8006406:	4b18      	ldr	r3, [pc, #96]	; (8006468 <UART_SetConfig+0x2cc>)
 8006408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006410:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006414:	d01a      	beq.n	800644c <UART_SetConfig+0x2b0>
 8006416:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800641a:	d81b      	bhi.n	8006454 <UART_SetConfig+0x2b8>
 800641c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006420:	d00c      	beq.n	800643c <UART_SetConfig+0x2a0>
 8006422:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006426:	d815      	bhi.n	8006454 <UART_SetConfig+0x2b8>
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <UART_SetConfig+0x298>
 800642c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006430:	d008      	beq.n	8006444 <UART_SetConfig+0x2a8>
 8006432:	e00f      	b.n	8006454 <UART_SetConfig+0x2b8>
 8006434:	2300      	movs	r3, #0
 8006436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800643a:	e022      	b.n	8006482 <UART_SetConfig+0x2e6>
 800643c:	2302      	movs	r3, #2
 800643e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006442:	e01e      	b.n	8006482 <UART_SetConfig+0x2e6>
 8006444:	2304      	movs	r3, #4
 8006446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800644a:	e01a      	b.n	8006482 <UART_SetConfig+0x2e6>
 800644c:	2308      	movs	r3, #8
 800644e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006452:	e016      	b.n	8006482 <UART_SetConfig+0x2e6>
 8006454:	2310      	movs	r3, #16
 8006456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800645a:	e012      	b.n	8006482 <UART_SetConfig+0x2e6>
 800645c:	efff69f3 	.word	0xefff69f3
 8006460:	40008000 	.word	0x40008000
 8006464:	40013800 	.word	0x40013800
 8006468:	40021000 	.word	0x40021000
 800646c:	40004400 	.word	0x40004400
 8006470:	40004800 	.word	0x40004800
 8006474:	40004c00 	.word	0x40004c00
 8006478:	40005000 	.word	0x40005000
 800647c:	2310      	movs	r3, #16
 800647e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a9f      	ldr	r2, [pc, #636]	; (8006704 <UART_SetConfig+0x568>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d17a      	bne.n	8006582 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800648c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006490:	2b08      	cmp	r3, #8
 8006492:	d824      	bhi.n	80064de <UART_SetConfig+0x342>
 8006494:	a201      	add	r2, pc, #4	; (adr r2, 800649c <UART_SetConfig+0x300>)
 8006496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649a:	bf00      	nop
 800649c:	080064c1 	.word	0x080064c1
 80064a0:	080064df 	.word	0x080064df
 80064a4:	080064c9 	.word	0x080064c9
 80064a8:	080064df 	.word	0x080064df
 80064ac:	080064cf 	.word	0x080064cf
 80064b0:	080064df 	.word	0x080064df
 80064b4:	080064df 	.word	0x080064df
 80064b8:	080064df 	.word	0x080064df
 80064bc:	080064d7 	.word	0x080064d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064c0:	f7fe f800 	bl	80044c4 <HAL_RCC_GetPCLK1Freq>
 80064c4:	61f8      	str	r0, [r7, #28]
        break;
 80064c6:	e010      	b.n	80064ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064c8:	4b8f      	ldr	r3, [pc, #572]	; (8006708 <UART_SetConfig+0x56c>)
 80064ca:	61fb      	str	r3, [r7, #28]
        break;
 80064cc:	e00d      	b.n	80064ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ce:	f7fd ff61 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 80064d2:	61f8      	str	r0, [r7, #28]
        break;
 80064d4:	e009      	b.n	80064ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064da:	61fb      	str	r3, [r7, #28]
        break;
 80064dc:	e005      	b.n	80064ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80064de:	2300      	movs	r3, #0
 80064e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80064e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 80fb 	beq.w	80066e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	4613      	mov	r3, r2
 80064f8:	005b      	lsls	r3, r3, #1
 80064fa:	4413      	add	r3, r2
 80064fc:	69fa      	ldr	r2, [r7, #28]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d305      	bcc.n	800650e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006508:	69fa      	ldr	r2, [r7, #28]
 800650a:	429a      	cmp	r2, r3
 800650c:	d903      	bls.n	8006516 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006514:	e0e8      	b.n	80066e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	2200      	movs	r2, #0
 800651a:	461c      	mov	r4, r3
 800651c:	4615      	mov	r5, r2
 800651e:	f04f 0200 	mov.w	r2, #0
 8006522:	f04f 0300 	mov.w	r3, #0
 8006526:	022b      	lsls	r3, r5, #8
 8006528:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800652c:	0222      	lsls	r2, r4, #8
 800652e:	68f9      	ldr	r1, [r7, #12]
 8006530:	6849      	ldr	r1, [r1, #4]
 8006532:	0849      	lsrs	r1, r1, #1
 8006534:	2000      	movs	r0, #0
 8006536:	4688      	mov	r8, r1
 8006538:	4681      	mov	r9, r0
 800653a:	eb12 0a08 	adds.w	sl, r2, r8
 800653e:	eb43 0b09 	adc.w	fp, r3, r9
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	603b      	str	r3, [r7, #0]
 800654a:	607a      	str	r2, [r7, #4]
 800654c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006550:	4650      	mov	r0, sl
 8006552:	4659      	mov	r1, fp
 8006554:	f7f9 fe38 	bl	80001c8 <__aeabi_uldivmod>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4613      	mov	r3, r2
 800655e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006566:	d308      	bcc.n	800657a <UART_SetConfig+0x3de>
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800656e:	d204      	bcs.n	800657a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	60da      	str	r2, [r3, #12]
 8006578:	e0b6      	b.n	80066e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006580:	e0b2      	b.n	80066e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800658a:	d15e      	bne.n	800664a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800658c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006590:	2b08      	cmp	r3, #8
 8006592:	d828      	bhi.n	80065e6 <UART_SetConfig+0x44a>
 8006594:	a201      	add	r2, pc, #4	; (adr r2, 800659c <UART_SetConfig+0x400>)
 8006596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659a:	bf00      	nop
 800659c:	080065c1 	.word	0x080065c1
 80065a0:	080065c9 	.word	0x080065c9
 80065a4:	080065d1 	.word	0x080065d1
 80065a8:	080065e7 	.word	0x080065e7
 80065ac:	080065d7 	.word	0x080065d7
 80065b0:	080065e7 	.word	0x080065e7
 80065b4:	080065e7 	.word	0x080065e7
 80065b8:	080065e7 	.word	0x080065e7
 80065bc:	080065df 	.word	0x080065df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065c0:	f7fd ff80 	bl	80044c4 <HAL_RCC_GetPCLK1Freq>
 80065c4:	61f8      	str	r0, [r7, #28]
        break;
 80065c6:	e014      	b.n	80065f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065c8:	f7fd ff92 	bl	80044f0 <HAL_RCC_GetPCLK2Freq>
 80065cc:	61f8      	str	r0, [r7, #28]
        break;
 80065ce:	e010      	b.n	80065f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065d0:	4b4d      	ldr	r3, [pc, #308]	; (8006708 <UART_SetConfig+0x56c>)
 80065d2:	61fb      	str	r3, [r7, #28]
        break;
 80065d4:	e00d      	b.n	80065f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065d6:	f7fd fedd 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 80065da:	61f8      	str	r0, [r7, #28]
        break;
 80065dc:	e009      	b.n	80065f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065e2:	61fb      	str	r3, [r7, #28]
        break;
 80065e4:	e005      	b.n	80065f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80065f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d077      	beq.n	80066e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065f8:	69fb      	ldr	r3, [r7, #28]
 80065fa:	005a      	lsls	r2, r3, #1
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	085b      	lsrs	r3, r3, #1
 8006602:	441a      	add	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	fbb2 f3f3 	udiv	r3, r2, r3
 800660c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	2b0f      	cmp	r3, #15
 8006612:	d916      	bls.n	8006642 <UART_SetConfig+0x4a6>
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800661a:	d212      	bcs.n	8006642 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	b29b      	uxth	r3, r3
 8006620:	f023 030f 	bic.w	r3, r3, #15
 8006624:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	085b      	lsrs	r3, r3, #1
 800662a:	b29b      	uxth	r3, r3
 800662c:	f003 0307 	and.w	r3, r3, #7
 8006630:	b29a      	uxth	r2, r3
 8006632:	8afb      	ldrh	r3, [r7, #22]
 8006634:	4313      	orrs	r3, r2
 8006636:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	8afa      	ldrh	r2, [r7, #22]
 800663e:	60da      	str	r2, [r3, #12]
 8006640:	e052      	b.n	80066e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006648:	e04e      	b.n	80066e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800664a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800664e:	2b08      	cmp	r3, #8
 8006650:	d827      	bhi.n	80066a2 <UART_SetConfig+0x506>
 8006652:	a201      	add	r2, pc, #4	; (adr r2, 8006658 <UART_SetConfig+0x4bc>)
 8006654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006658:	0800667d 	.word	0x0800667d
 800665c:	08006685 	.word	0x08006685
 8006660:	0800668d 	.word	0x0800668d
 8006664:	080066a3 	.word	0x080066a3
 8006668:	08006693 	.word	0x08006693
 800666c:	080066a3 	.word	0x080066a3
 8006670:	080066a3 	.word	0x080066a3
 8006674:	080066a3 	.word	0x080066a3
 8006678:	0800669b 	.word	0x0800669b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800667c:	f7fd ff22 	bl	80044c4 <HAL_RCC_GetPCLK1Freq>
 8006680:	61f8      	str	r0, [r7, #28]
        break;
 8006682:	e014      	b.n	80066ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006684:	f7fd ff34 	bl	80044f0 <HAL_RCC_GetPCLK2Freq>
 8006688:	61f8      	str	r0, [r7, #28]
        break;
 800668a:	e010      	b.n	80066ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800668c:	4b1e      	ldr	r3, [pc, #120]	; (8006708 <UART_SetConfig+0x56c>)
 800668e:	61fb      	str	r3, [r7, #28]
        break;
 8006690:	e00d      	b.n	80066ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006692:	f7fd fe7f 	bl	8004394 <HAL_RCC_GetSysClockFreq>
 8006696:	61f8      	str	r0, [r7, #28]
        break;
 8006698:	e009      	b.n	80066ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800669a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800669e:	61fb      	str	r3, [r7, #28]
        break;
 80066a0:	e005      	b.n	80066ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80066a2:	2300      	movs	r3, #0
 80066a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80066ac:	bf00      	nop
    }

    if (pclk != 0U)
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d019      	beq.n	80066e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	085a      	lsrs	r2, r3, #1
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	441a      	add	r2, r3
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	2b0f      	cmp	r3, #15
 80066cc:	d909      	bls.n	80066e2 <UART_SetConfig+0x546>
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d4:	d205      	bcs.n	80066e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	b29a      	uxth	r2, r3
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	60da      	str	r2, [r3, #12]
 80066e0:	e002      	b.n	80066e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80066f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3728      	adds	r7, #40	; 0x28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006702:	bf00      	nop
 8006704:	40008000 	.word	0x40008000
 8006708:	00f42400 	.word	0x00f42400

0800670c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00a      	beq.n	8006736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800673a:	f003 0302 	and.w	r3, r3, #2
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00a      	beq.n	8006758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00a      	beq.n	800677a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677e:	f003 0308 	and.w	r3, r3, #8
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a0:	f003 0310 	and.w	r3, r3, #16
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00a      	beq.n	80067be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	430a      	orrs	r2, r1
 80067bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	f003 0320 	and.w	r3, r3, #32
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	430a      	orrs	r2, r1
 80067de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d01a      	beq.n	8006822 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800680a:	d10a      	bne.n	8006822 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	430a      	orrs	r2, r1
 8006820:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00a      	beq.n	8006844 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	430a      	orrs	r2, r1
 8006842:	605a      	str	r2, [r3, #4]
  }
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b086      	sub	sp, #24
 8006854:	af02      	add	r7, sp, #8
 8006856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006860:	f7fb ff52 	bl	8002708 <HAL_GetTick>
 8006864:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0308 	and.w	r3, r3, #8
 8006870:	2b08      	cmp	r3, #8
 8006872:	d10e      	bne.n	8006892 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006874:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006878:	9300      	str	r3, [sp, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f82d 	bl	80068e2 <UART_WaitOnFlagUntilTimeout>
 8006888:	4603      	mov	r3, r0
 800688a:	2b00      	cmp	r3, #0
 800688c:	d001      	beq.n	8006892 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e023      	b.n	80068da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0304 	and.w	r3, r3, #4
 800689c:	2b04      	cmp	r3, #4
 800689e:	d10e      	bne.n	80068be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068a4:	9300      	str	r3, [sp, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 f817 	bl	80068e2 <UART_WaitOnFlagUntilTimeout>
 80068b4:	4603      	mov	r3, r0
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d001      	beq.n	80068be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e00d      	b.n	80068da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2220      	movs	r2, #32
 80068c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2220      	movs	r2, #32
 80068c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b09c      	sub	sp, #112	; 0x70
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	60f8      	str	r0, [r7, #12]
 80068ea:	60b9      	str	r1, [r7, #8]
 80068ec:	603b      	str	r3, [r7, #0]
 80068ee:	4613      	mov	r3, r2
 80068f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068f2:	e0a5      	b.n	8006a40 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fa:	f000 80a1 	beq.w	8006a40 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068fe:	f7fb ff03 	bl	8002708 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800690a:	429a      	cmp	r2, r3
 800690c:	d302      	bcc.n	8006914 <UART_WaitOnFlagUntilTimeout+0x32>
 800690e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006910:	2b00      	cmp	r3, #0
 8006912:	d13e      	bne.n	8006992 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800691a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800691c:	e853 3f00 	ldrex	r3, [r3]
 8006920:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006924:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006928:	667b      	str	r3, [r7, #100]	; 0x64
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	461a      	mov	r2, r3
 8006930:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006932:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006934:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006936:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006938:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800693a:	e841 2300 	strex	r3, r2, [r1]
 800693e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006942:	2b00      	cmp	r3, #0
 8006944:	d1e6      	bne.n	8006914 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3308      	adds	r3, #8
 800694c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006950:	e853 3f00 	ldrex	r3, [r3]
 8006954:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006958:	f023 0301 	bic.w	r3, r3, #1
 800695c:	663b      	str	r3, [r7, #96]	; 0x60
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	3308      	adds	r3, #8
 8006964:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006966:	64ba      	str	r2, [r7, #72]	; 0x48
 8006968:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800696c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e5      	bne.n	8006946 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2220      	movs	r2, #32
 800697e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2220      	movs	r2, #32
 8006984:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e067      	b.n	8006a62 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0304 	and.w	r3, r3, #4
 800699c:	2b00      	cmp	r3, #0
 800699e:	d04f      	beq.n	8006a40 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ae:	d147      	bne.n	8006a40 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069b8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c2:	e853 3f00 	ldrex	r3, [r3]
 80069c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	461a      	mov	r2, r3
 80069d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069d8:	637b      	str	r3, [r7, #52]	; 0x34
 80069da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069e0:	e841 2300 	strex	r3, r2, [r1]
 80069e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1e6      	bne.n	80069ba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	3308      	adds	r3, #8
 80069f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	e853 3f00 	ldrex	r3, [r3]
 80069fa:	613b      	str	r3, [r7, #16]
   return(result);
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	f023 0301 	bic.w	r3, r3, #1
 8006a02:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3308      	adds	r3, #8
 8006a0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a0c:	623a      	str	r2, [r7, #32]
 8006a0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a10:	69f9      	ldr	r1, [r7, #28]
 8006a12:	6a3a      	ldr	r2, [r7, #32]
 8006a14:	e841 2300 	strex	r3, r2, [r1]
 8006a18:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1e5      	bne.n	80069ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2220      	movs	r2, #32
 8006a24:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2220      	movs	r2, #32
 8006a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e010      	b.n	8006a62 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	69da      	ldr	r2, [r3, #28]
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	4013      	ands	r3, r2
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	bf0c      	ite	eq
 8006a50:	2301      	moveq	r3, #1
 8006a52:	2300      	movne	r3, #0
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	461a      	mov	r2, r3
 8006a58:	79fb      	ldrb	r3, [r7, #7]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	f43f af4a 	beq.w	80068f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3770      	adds	r7, #112	; 0x70
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
	...

08006a6c <__libc_init_array>:
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	4d0d      	ldr	r5, [pc, #52]	; (8006aa4 <__libc_init_array+0x38>)
 8006a70:	4c0d      	ldr	r4, [pc, #52]	; (8006aa8 <__libc_init_array+0x3c>)
 8006a72:	1b64      	subs	r4, r4, r5
 8006a74:	10a4      	asrs	r4, r4, #2
 8006a76:	2600      	movs	r6, #0
 8006a78:	42a6      	cmp	r6, r4
 8006a7a:	d109      	bne.n	8006a90 <__libc_init_array+0x24>
 8006a7c:	4d0b      	ldr	r5, [pc, #44]	; (8006aac <__libc_init_array+0x40>)
 8006a7e:	4c0c      	ldr	r4, [pc, #48]	; (8006ab0 <__libc_init_array+0x44>)
 8006a80:	f000 f820 	bl	8006ac4 <_init>
 8006a84:	1b64      	subs	r4, r4, r5
 8006a86:	10a4      	asrs	r4, r4, #2
 8006a88:	2600      	movs	r6, #0
 8006a8a:	42a6      	cmp	r6, r4
 8006a8c:	d105      	bne.n	8006a9a <__libc_init_array+0x2e>
 8006a8e:	bd70      	pop	{r4, r5, r6, pc}
 8006a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a94:	4798      	blx	r3
 8006a96:	3601      	adds	r6, #1
 8006a98:	e7ee      	b.n	8006a78 <__libc_init_array+0xc>
 8006a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a9e:	4798      	blx	r3
 8006aa0:	3601      	adds	r6, #1
 8006aa2:	e7f2      	b.n	8006a8a <__libc_init_array+0x1e>
 8006aa4:	08006b2c 	.word	0x08006b2c
 8006aa8:	08006b2c 	.word	0x08006b2c
 8006aac:	08006b2c 	.word	0x08006b2c
 8006ab0:	08006b30 	.word	0x08006b30

08006ab4 <memset>:
 8006ab4:	4402      	add	r2, r0
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d100      	bne.n	8006abe <memset+0xa>
 8006abc:	4770      	bx	lr
 8006abe:	f803 1b01 	strb.w	r1, [r3], #1
 8006ac2:	e7f9      	b.n	8006ab8 <memset+0x4>

08006ac4 <_init>:
 8006ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac6:	bf00      	nop
 8006ac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aca:	bc08      	pop	{r3}
 8006acc:	469e      	mov	lr, r3
 8006ace:	4770      	bx	lr

08006ad0 <_fini>:
 8006ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ad2:	bf00      	nop
 8006ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ad6:	bc08      	pop	{r3}
 8006ad8:	469e      	mov	lr, r3
 8006ada:	4770      	bx	lr
