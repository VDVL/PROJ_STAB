
Proj_stab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a00  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08007b88  08007b88  00017b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bd0  08007bd0  00021608  2**0
                  CONTENTS
  4 .ARM          00000008  08007bd0  08007bd0  00017bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bd8  08007bd8  00021608  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bd8  08007bd8  00017bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bdc  08007bdc  00017bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001608  20000000  08007be0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e38  20001608  080091e8  00021608  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002440  080091e8  00022440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021608  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b633  00000000  00000000  00021638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec1  00000000  00000000  0004cc6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002168  00000000  00000000  0004fb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002058  00000000  00000000  00051c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001a0d6  00000000  00000000  00053cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000dd07  00000000  00000000  0006ddc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000a3  00000000  00000000  0007bacd  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00009144  00000000  00000000  0007bb70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20001608 	.word	0x20001608
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007b70 	.word	0x08007b70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000160c 	.word	0x2000160c
 80001c4:	08007b70 	.word	0x08007b70

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <DRV_Init>:
#include "drv8311.h"
#include "pwm_driver.h"



void DRV_Init(void){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af02      	add	r7, sp, #8
	//Init CS pin should default high
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80004d2:	2201      	movs	r2, #1
 80004d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004d8:	48c3      	ldr	r0, [pc, #780]	; (80007e8 <DRV_Init+0x31c>)
 80004da:	f002 fc59 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(nSleep_GPIO_Port, nSleep_Pin, GPIO_PIN_SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e8:	f002 fc52 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80004ec:	2001      	movs	r0, #1
 80004ee:	f002 f957 	bl	80027a0 <HAL_Delay>

	//Set PWM freq (reset = 0x0000 )
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 80004f2:	4bbe      	ldr	r3, [pc, #760]	; (80007ec <DRV_Init+0x320>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_PERIOD <<3);  	//reg adr + cmd
 80004f8:	4bbc      	ldr	r3, [pc, #752]	; (80007ec <DRV_Init+0x320>)
 80004fa:	22c0      	movs	r2, #192	; 0xc0
 80004fc:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80004fe:	4bbb      	ldr	r3, [pc, #748]	; (80007ec <DRV_Init+0x320>)
 8000500:	2200      	movs	r2, #0
 8000502:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0xFF;									//data (si read osf)
 8000504:	4bb9      	ldr	r3, [pc, #740]	; (80007ec <DRV_Init+0x320>)
 8000506:	22ff      	movs	r2, #255	; 0xff
 8000508:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000510:	48b5      	ldr	r0, [pc, #724]	; (80007e8 <DRV_Init+0x31c>)
 8000512:	f002 fc3d 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8000516:	f04f 33ff 	mov.w	r3, #4294967295
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	2304      	movs	r3, #4
 800051e:	4ab4      	ldr	r2, [pc, #720]	; (80007f0 <DRV_Init+0x324>)
 8000520:	49b2      	ldr	r1, [pc, #712]	; (80007ec <DRV_Init+0x320>)
 8000522:	48b4      	ldr	r0, [pc, #720]	; (80007f4 <DRV_Init+0x328>)
 8000524:	f004 fdf9 	bl	800511a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8000528:	2201      	movs	r2, #1
 800052a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800052e:	48ae      	ldr	r0, [pc, #696]	; (80007e8 <DRV_Init+0x31c>)
 8000530:	f002 fc2e 	bl	8002d90 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 8000534:	4bad      	ldr	r3, [pc, #692]	; (80007ec <DRV_Init+0x320>)
 8000536:	2280      	movs	r2, #128	; 0x80
 8000538:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_PERIOD <<3);  	//reg adr + cmd
 800053a:	4bac      	ldr	r3, [pc, #688]	; (80007ec <DRV_Init+0x320>)
 800053c:	22c0      	movs	r2, #192	; 0xc0
 800053e:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 8000540:	4baa      	ldr	r3, [pc, #680]	; (80007ec <DRV_Init+0x320>)
 8000542:	2200      	movs	r2, #0
 8000544:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8000546:	4ba9      	ldr	r3, [pc, #676]	; (80007ec <DRV_Init+0x320>)
 8000548:	2200      	movs	r2, #0
 800054a:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000552:	48a5      	ldr	r0, [pc, #660]	; (80007e8 <DRV_Init+0x31c>)
 8000554:	f002 fc1c 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8000558:	f04f 33ff 	mov.w	r3, #4294967295
 800055c:	9300      	str	r3, [sp, #0]
 800055e:	2304      	movs	r3, #4
 8000560:	4aa3      	ldr	r2, [pc, #652]	; (80007f0 <DRV_Init+0x324>)
 8000562:	49a2      	ldr	r1, [pc, #648]	; (80007ec <DRV_Init+0x320>)
 8000564:	48a3      	ldr	r0, [pc, #652]	; (80007f4 <DRV_Init+0x328>)
 8000566:	f004 fdd8 	bl	800511a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000570:	489d      	ldr	r0, [pc, #628]	; (80007e8 <DRV_Init+0x31c>)
 8000572:	f002 fc0d 	bl	8002d90 <HAL_GPIO_WritePin>

	//Set PWM duty_cycle A   (reset = 0x0000 )
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 8000576:	4b9d      	ldr	r3, [pc, #628]	; (80007ec <DRV_Init+0x320>)
 8000578:	2200      	movs	r2, #0
 800057a:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_A_DUTY <<3);  	//reg adr + cmd
 800057c:	4b9b      	ldr	r3, [pc, #620]	; (80007ec <DRV_Init+0x320>)
 800057e:	22c8      	movs	r2, #200	; 0xc8
 8000580:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 8000582:	4b9a      	ldr	r3, [pc, #616]	; (80007ec <DRV_Init+0x320>)
 8000584:	2200      	movs	r2, #0
 8000586:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8000588:	4b98      	ldr	r3, [pc, #608]	; (80007ec <DRV_Init+0x320>)
 800058a:	2200      	movs	r2, #0
 800058c:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000594:	4894      	ldr	r0, [pc, #592]	; (80007e8 <DRV_Init+0x31c>)
 8000596:	f002 fbfb 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2304      	movs	r3, #4
 80005a2:	4a93      	ldr	r2, [pc, #588]	; (80007f0 <DRV_Init+0x324>)
 80005a4:	4991      	ldr	r1, [pc, #580]	; (80007ec <DRV_Init+0x320>)
 80005a6:	4893      	ldr	r0, [pc, #588]	; (80007f4 <DRV_Init+0x328>)
 80005a8:	f004 fdb7 	bl	800511a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b2:	488d      	ldr	r0, [pc, #564]	; (80007e8 <DRV_Init+0x31c>)
 80005b4:	f002 fbec 	bl	8002d90 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 80005b8:	4b8c      	ldr	r3, [pc, #560]	; (80007ec <DRV_Init+0x320>)
 80005ba:	2280      	movs	r2, #128	; 0x80
 80005bc:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_A_DUTY <<3);  	//reg adr + cmd
 80005be:	4b8b      	ldr	r3, [pc, #556]	; (80007ec <DRV_Init+0x320>)
 80005c0:	22c8      	movs	r2, #200	; 0xc8
 80005c2:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80005c4:	4b89      	ldr	r3, [pc, #548]	; (80007ec <DRV_Init+0x320>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 80005ca:	4b88      	ldr	r3, [pc, #544]	; (80007ec <DRV_Init+0x320>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005d6:	4884      	ldr	r0, [pc, #528]	; (80007e8 <DRV_Init+0x31c>)
 80005d8:	f002 fbda 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2304      	movs	r3, #4
 80005e4:	4a82      	ldr	r2, [pc, #520]	; (80007f0 <DRV_Init+0x324>)
 80005e6:	4981      	ldr	r1, [pc, #516]	; (80007ec <DRV_Init+0x320>)
 80005e8:	4882      	ldr	r0, [pc, #520]	; (80007f4 <DRV_Init+0x328>)
 80005ea:	f004 fd96 	bl	800511a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80005ee:	2201      	movs	r2, #1
 80005f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005f4:	487c      	ldr	r0, [pc, #496]	; (80007e8 <DRV_Init+0x31c>)
 80005f6:	f002 fbcb 	bl	8002d90 <HAL_GPIO_WritePin>

	//Set PWM duty_cycle B  (reset = 0x0000 )
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 80005fa:	4b7c      	ldr	r3, [pc, #496]	; (80007ec <DRV_Init+0x320>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_B_DUTY <<3);  	//reg adr + cmd
 8000600:	4b7a      	ldr	r3, [pc, #488]	; (80007ec <DRV_Init+0x320>)
 8000602:	22d0      	movs	r2, #208	; 0xd0
 8000604:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 8000606:	4b79      	ldr	r3, [pc, #484]	; (80007ec <DRV_Init+0x320>)
 8000608:	2200      	movs	r2, #0
 800060a:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 800060c:	4b77      	ldr	r3, [pc, #476]	; (80007ec <DRV_Init+0x320>)
 800060e:	2200      	movs	r2, #0
 8000610:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000618:	4873      	ldr	r0, [pc, #460]	; (80007e8 <DRV_Init+0x31c>)
 800061a:	f002 fbb9 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	2304      	movs	r3, #4
 8000626:	4a72      	ldr	r2, [pc, #456]	; (80007f0 <DRV_Init+0x324>)
 8000628:	4970      	ldr	r1, [pc, #448]	; (80007ec <DRV_Init+0x320>)
 800062a:	4872      	ldr	r0, [pc, #456]	; (80007f4 <DRV_Init+0x328>)
 800062c:	f004 fd75 	bl	800511a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8000630:	2201      	movs	r2, #1
 8000632:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000636:	486c      	ldr	r0, [pc, #432]	; (80007e8 <DRV_Init+0x31c>)
 8000638:	f002 fbaa 	bl	8002d90 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 800063c:	4b6b      	ldr	r3, [pc, #428]	; (80007ec <DRV_Init+0x320>)
 800063e:	2280      	movs	r2, #128	; 0x80
 8000640:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_B_DUTY <<3);  	//reg adr + cmd
 8000642:	4b6a      	ldr	r3, [pc, #424]	; (80007ec <DRV_Init+0x320>)
 8000644:	22d0      	movs	r2, #208	; 0xd0
 8000646:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 8000648:	4b68      	ldr	r3, [pc, #416]	; (80007ec <DRV_Init+0x320>)
 800064a:	2200      	movs	r2, #0
 800064c:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 800064e:	4b67      	ldr	r3, [pc, #412]	; (80007ec <DRV_Init+0x320>)
 8000650:	2200      	movs	r2, #0
 8000652:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065a:	4863      	ldr	r0, [pc, #396]	; (80007e8 <DRV_Init+0x31c>)
 800065c:	f002 fb98 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8000660:	f04f 33ff 	mov.w	r3, #4294967295
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2304      	movs	r3, #4
 8000668:	4a61      	ldr	r2, [pc, #388]	; (80007f0 <DRV_Init+0x324>)
 800066a:	4960      	ldr	r1, [pc, #384]	; (80007ec <DRV_Init+0x320>)
 800066c:	4861      	ldr	r0, [pc, #388]	; (80007f4 <DRV_Init+0x328>)
 800066e:	f004 fd54 	bl	800511a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000678:	485b      	ldr	r0, [pc, #364]	; (80007e8 <DRV_Init+0x31c>)
 800067a:	f002 fb89 	bl	8002d90 <HAL_GPIO_WritePin>

	//Set PWM duty_cycle C (reset = 0x0000 )
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00 ;               					//cmd
 800067e:	4b5b      	ldr	r3, [pc, #364]	; (80007ec <DRV_Init+0x320>)
 8000680:	2200      	movs	r2, #0
 8000682:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_C_DUTY <<3);  	//reg adr + cmd
 8000684:	4b59      	ldr	r3, [pc, #356]	; (80007ec <DRV_Init+0x320>)
 8000686:	22d8      	movs	r2, #216	; 0xd8
 8000688:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 800068a:	4b58      	ldr	r3, [pc, #352]	; (80007ec <DRV_Init+0x320>)
 800068c:	2200      	movs	r2, #0
 800068e:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8000690:	4b56      	ldr	r3, [pc, #344]	; (80007ec <DRV_Init+0x320>)
 8000692:	2200      	movs	r2, #0
 8000694:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800069c:	4852      	ldr	r0, [pc, #328]	; (80007e8 <DRV_Init+0x31c>)
 800069e:	f002 fb77 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2304      	movs	r3, #4
 80006aa:	4a51      	ldr	r2, [pc, #324]	; (80007f0 <DRV_Init+0x324>)
 80006ac:	494f      	ldr	r1, [pc, #316]	; (80007ec <DRV_Init+0x320>)
 80006ae:	4851      	ldr	r0, [pc, #324]	; (80007f4 <DRV_Init+0x328>)
 80006b0:	f004 fd33 	bl	800511a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ba:	484b      	ldr	r0, [pc, #300]	; (80007e8 <DRV_Init+0x31c>)
 80006bc:	f002 fb68 	bl	8002d90 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 80006c0:	4b4a      	ldr	r3, [pc, #296]	; (80007ec <DRV_Init+0x320>)
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_C_DUTY <<3);  	//reg adr + cmd
 80006c6:	4b49      	ldr	r3, [pc, #292]	; (80007ec <DRV_Init+0x320>)
 80006c8:	22d8      	movs	r2, #216	; 0xd8
 80006ca:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80006cc:	4b47      	ldr	r3, [pc, #284]	; (80007ec <DRV_Init+0x320>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 80006d2:	4b46      	ldr	r3, [pc, #280]	; (80007ec <DRV_Init+0x320>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006de:	4842      	ldr	r0, [pc, #264]	; (80007e8 <DRV_Init+0x31c>)
 80006e0:	f002 fb56 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80006e4:	f04f 33ff 	mov.w	r3, #4294967295
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2304      	movs	r3, #4
 80006ec:	4a40      	ldr	r2, [pc, #256]	; (80007f0 <DRV_Init+0x324>)
 80006ee:	493f      	ldr	r1, [pc, #252]	; (80007ec <DRV_Init+0x320>)
 80006f0:	4840      	ldr	r0, [pc, #256]	; (80007f4 <DRV_Init+0x328>)
 80006f2:	f004 fd12 	bl	800511a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006fc:	483a      	ldr	r0, [pc, #232]	; (80007e8 <DRV_Init+0x31c>)
 80006fe:	f002 fb47 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_Delay(1);*/


	//counter mode
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 8000702:	4b3a      	ldr	r3, [pc, #232]	; (80007ec <DRV_Init+0x320>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_CTRL <<3);  	//reg adr + cmd
 8000708:	4b38      	ldr	r3, [pc, #224]	; (80007ec <DRV_Init+0x320>)
 800070a:	22e8      	movs	r2, #232	; 0xe8
 800070c:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00 | (0x01);						//data (si read osf)
 800070e:	4b37      	ldr	r3, [pc, #220]	; (80007ec <DRV_Init+0x320>)
 8000710:	2201      	movs	r2, #1
 8000712:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8000714:	4b35      	ldr	r3, [pc, #212]	; (80007ec <DRV_Init+0x320>)
 8000716:	2200      	movs	r2, #0
 8000718:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000720:	4831      	ldr	r0, [pc, #196]	; (80007e8 <DRV_Init+0x31c>)
 8000722:	f002 fb35 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8000726:	f04f 33ff 	mov.w	r3, #4294967295
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2304      	movs	r3, #4
 800072e:	4a30      	ldr	r2, [pc, #192]	; (80007f0 <DRV_Init+0x324>)
 8000730:	492e      	ldr	r1, [pc, #184]	; (80007ec <DRV_Init+0x320>)
 8000732:	4830      	ldr	r0, [pc, #192]	; (80007f4 <DRV_Init+0x328>)
 8000734:	f004 fcf1 	bl	800511a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073e:	482a      	ldr	r0, [pc, #168]	; (80007e8 <DRV_Init+0x31c>)
 8000740:	f002 fb26 	bl	8002d90 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 8000744:	4b29      	ldr	r3, [pc, #164]	; (80007ec <DRV_Init+0x320>)
 8000746:	2280      	movs	r2, #128	; 0x80
 8000748:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_CTRL <<3);  	//reg adr + cmd
 800074a:	4b28      	ldr	r3, [pc, #160]	; (80007ec <DRV_Init+0x320>)
 800074c:	22e8      	movs	r2, #232	; 0xe8
 800074e:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 8000750:	4b26      	ldr	r3, [pc, #152]	; (80007ec <DRV_Init+0x320>)
 8000752:	2200      	movs	r2, #0
 8000754:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8000756:	4b25      	ldr	r3, [pc, #148]	; (80007ec <DRV_Init+0x320>)
 8000758:	2200      	movs	r2, #0
 800075a:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000762:	4821      	ldr	r0, [pc, #132]	; (80007e8 <DRV_Init+0x31c>)
 8000764:	f002 fb14 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8000768:	f04f 33ff 	mov.w	r3, #4294967295
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	2304      	movs	r3, #4
 8000770:	4a1f      	ldr	r2, [pc, #124]	; (80007f0 <DRV_Init+0x324>)
 8000772:	491e      	ldr	r1, [pc, #120]	; (80007ec <DRV_Init+0x320>)
 8000774:	481f      	ldr	r0, [pc, #124]	; (80007f4 <DRV_Init+0x328>)
 8000776:	f004 fcd0 	bl	800511a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000780:	4819      	ldr	r0, [pc, #100]	; (80007e8 <DRV_Init+0x31c>)
 8000782:	f002 fb05 	bl	8002d90 <HAL_GPIO_WritePin>

	//pwm state
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <DRV_Init+0x320>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWM_STATE <<3);  	//reg adr + cmd
 800078c:	4b17      	ldr	r3, [pc, #92]	; (80007ec <DRV_Init+0x320>)
 800078e:	22e0      	movs	r2, #224	; 0xe0
 8000790:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x07;						//data (si read osf)
 8000792:	4b16      	ldr	r3, [pc, #88]	; (80007ec <DRV_Init+0x320>)
 8000794:	2207      	movs	r2, #7
 8000796:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x77;									//data (si read osf)
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <DRV_Init+0x320>)
 800079a:	2277      	movs	r2, #119	; 0x77
 800079c:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800079e:	2200      	movs	r2, #0
 80007a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a4:	4810      	ldr	r0, [pc, #64]	; (80007e8 <DRV_Init+0x31c>)
 80007a6:	f002 faf3 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
 80007ae:	9300      	str	r3, [sp, #0]
 80007b0:	2304      	movs	r3, #4
 80007b2:	4a0f      	ldr	r2, [pc, #60]	; (80007f0 <DRV_Init+0x324>)
 80007b4:	490d      	ldr	r1, [pc, #52]	; (80007ec <DRV_Init+0x320>)
 80007b6:	480f      	ldr	r0, [pc, #60]	; (80007f4 <DRV_Init+0x328>)
 80007b8:	f004 fcaf 	bl	800511a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007c2:	4809      	ldr	r0, [pc, #36]	; (80007e8 <DRV_Init+0x31c>)
 80007c4:	f002 fae4 	bl	8002d90 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <DRV_Init+0x320>)
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWM_STATE <<3);  	//reg adr + cmd
 80007ce:	4b07      	ldr	r3, [pc, #28]	; (80007ec <DRV_Init+0x320>)
 80007d0:	22e0      	movs	r2, #224	; 0xe0
 80007d2:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80007d4:	4b05      	ldr	r3, [pc, #20]	; (80007ec <DRV_Init+0x320>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 80007da:	4b04      	ldr	r3, [pc, #16]	; (80007ec <DRV_Init+0x320>)
 80007dc:	2200      	movs	r2, #0
 80007de:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e6:	e007      	b.n	80007f8 <DRV_Init+0x32c>
 80007e8:	48000400 	.word	0x48000400
 80007ec:	20001f4c 	.word	0x20001f4c
 80007f0:	20001f60 	.word	0x20001f60
 80007f4:	20001dcc 	.word	0x20001dcc
 80007f8:	482b      	ldr	r0, [pc, #172]	; (80008a8 <DRV_Init+0x3dc>)
 80007fa:	f002 fac9 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2304      	movs	r3, #4
 8000806:	4a29      	ldr	r2, [pc, #164]	; (80008ac <DRV_Init+0x3e0>)
 8000808:	4929      	ldr	r1, [pc, #164]	; (80008b0 <DRV_Init+0x3e4>)
 800080a:	482a      	ldr	r0, [pc, #168]	; (80008b4 <DRV_Init+0x3e8>)
 800080c:	f004 fc85 	bl	800511a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000816:	4824      	ldr	r0, [pc, #144]	; (80008a8 <DRV_Init+0x3dc>)
 8000818:	f002 faba 	bl	8002d90 <HAL_GPIO_WritePin>


	//Enable PWM Generation  (reset = 0x0000 ) + synchro
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 800081c:	4b24      	ldr	r3, [pc, #144]	; (80008b0 <DRV_Init+0x3e4>)
 800081e:	2200      	movs	r2, #0
 8000820:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_CTRL <<3);  	//reg adr + cmd
 8000822:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <DRV_Init+0x3e4>)
 8000824:	22e8      	movs	r2, #232	; 0xe8
 8000826:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00 | (0x01<<2);						//data (si read osf)
 8000828:	4b21      	ldr	r3, [pc, #132]	; (80008b0 <DRV_Init+0x3e4>)
 800082a:	2204      	movs	r2, #4
 800082c:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00 | (0x05<<5);									//data (si read osf)
 800082e:	4b20      	ldr	r3, [pc, #128]	; (80008b0 <DRV_Init+0x3e4>)
 8000830:	22a0      	movs	r2, #160	; 0xa0
 8000832:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8000834:	2200      	movs	r2, #0
 8000836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800083a:	481b      	ldr	r0, [pc, #108]	; (80008a8 <DRV_Init+0x3dc>)
 800083c:	f002 faa8 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8000840:	f04f 33ff 	mov.w	r3, #4294967295
 8000844:	9300      	str	r3, [sp, #0]
 8000846:	2304      	movs	r3, #4
 8000848:	4a18      	ldr	r2, [pc, #96]	; (80008ac <DRV_Init+0x3e0>)
 800084a:	4919      	ldr	r1, [pc, #100]	; (80008b0 <DRV_Init+0x3e4>)
 800084c:	4819      	ldr	r0, [pc, #100]	; (80008b4 <DRV_Init+0x3e8>)
 800084e:	f004 fc64 	bl	800511a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8000852:	2201      	movs	r2, #1
 8000854:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000858:	4813      	ldr	r0, [pc, #76]	; (80008a8 <DRV_Init+0x3dc>)
 800085a:	f002 fa99 	bl	8002d90 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <DRV_Init+0x3e4>)
 8000860:	2280      	movs	r2, #128	; 0x80
 8000862:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_CTRL <<3);  	//reg adr + cmd
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <DRV_Init+0x3e4>)
 8000866:	22e8      	movs	r2, #232	; 0xe8
 8000868:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <DRV_Init+0x3e4>)
 800086c:	2200      	movs	r2, #0
 800086e:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <DRV_Init+0x3e4>)
 8000872:	2200      	movs	r2, #0
 8000874:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800087c:	480a      	ldr	r0, [pc, #40]	; (80008a8 <DRV_Init+0x3dc>)
 800087e:	f002 fa87 	bl	8002d90 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
 8000886:	9300      	str	r3, [sp, #0]
 8000888:	2304      	movs	r3, #4
 800088a:	4a08      	ldr	r2, [pc, #32]	; (80008ac <DRV_Init+0x3e0>)
 800088c:	4908      	ldr	r1, [pc, #32]	; (80008b0 <DRV_Init+0x3e4>)
 800088e:	4809      	ldr	r0, [pc, #36]	; (80008b4 <DRV_Init+0x3e8>)
 8000890:	f004 fc43 	bl	800511a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800089a:	4803      	ldr	r0, [pc, #12]	; (80008a8 <DRV_Init+0x3dc>)
 800089c:	f002 fa78 	bl	8002d90 <HAL_GPIO_WritePin>

}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	48000400 	.word	0x48000400
 80008ac:	20001f60 	.word	0x20001f60
 80008b0:	20001f4c 	.word	0x20001f4c
 80008b4:	20001dcc 	.word	0x20001dcc

080008b8 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d103      	bne.n	80008d4 <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 80008cc:	f04f 33ff 	mov.w	r3, #4294967295
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	e04d      	b.n	8000970 <LSM6DSO_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685a      	ldr	r2, [r3, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	689a      	ldr	r2, [r3, #8]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	7b1a      	ldrb	r2, [r3, #12]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	691a      	ldr	r2, [r3, #16]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	695a      	ldr	r2, [r3, #20]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	699a      	ldr	r2, [r3, #24]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	4a1b      	ldr	r2, [pc, #108]	; (800097c <LSM6DSO_RegisterBusIO+0xc4>)
 8000910:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	4a1a      	ldr	r2, [pc, #104]	; (8000980 <LSM6DSO_RegisterBusIO+0xc8>)
 8000916:	61da      	str	r2, [r3, #28]

    //MODIFIED
    pObj->Ctx.handle   = pObj;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d103      	bne.n	800092e <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 8000926:	f04f 33ff 	mov.w	r3, #4294967295
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	e020      	b.n	8000970 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4798      	blx	r3
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d003      	beq.n	8000942 <LSM6DSO_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO_ERROR;
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	e016      	b.n	8000970 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	2b02      	cmp	r3, #2
 8000948:	d112      	bne.n	8000970 <LSM6DSO_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000950:	2b00      	cmp	r3, #0
 8000952:	d10d      	bne.n	8000970 <LSM6DSO_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8000954:	230c      	movs	r3, #12
 8000956:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8000958:	7afb      	ldrb	r3, [r7, #11]
 800095a:	461a      	mov	r2, r3
 800095c:	2112      	movs	r1, #18
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f000 fac4 	bl	8000eec <LSM6DSO_Write_Reg>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d002      	beq.n	8000970 <LSM6DSO_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO_ERROR;
 800096a:	f04f 33ff 	mov.w	r3, #4294967295
 800096e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8000970:	68fb      	ldr	r3, [r7, #12]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	08000f23 	.word	0x08000f23
 8000980:	08000f59 	.word	0x08000f59

08000984 <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	331c      	adds	r3, #28
 8000990:	2180      	movs	r1, #128	; 0x80
 8000992:	4618      	mov	r0, r3
 8000994:	f001 f85e 	bl	8001a54 <lsm6dso_i3c_disable_set>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d002      	beq.n	80009a4 <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 800099e:	f04f 33ff 	mov.w	r3, #4294967295
 80009a2:	e060      	b.n	8000a66 <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	331c      	adds	r3, #28
 80009a8:	2101      	movs	r1, #1
 80009aa:	4618      	mov	r0, r3
 80009ac:	f001 f82c 	bl	8001a08 <lsm6dso_auto_increment_set>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d002      	beq.n	80009bc <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	e054      	b.n	8000a66 <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	331c      	adds	r3, #28
 80009c0:	2101      	movs	r1, #1
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 ff3e 	bl	8001844 <lsm6dso_block_data_update_set>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d002      	beq.n	80009d4 <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	e048      	b.n	8000a66 <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	331c      	adds	r3, #28
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 f880 	bl	8001ae0 <lsm6dso_fifo_mode_set>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d002      	beq.n	80009ec <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ea:	e03c      	b.n	8000a66 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2204      	movs	r2, #4
 80009f0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	331c      	adds	r3, #28
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 fbf8 	bl	80011f0 <lsm6dso_xl_data_rate_set>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d002      	beq.n	8000a0c <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 8000a06:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0a:	e02c      	b.n	8000a66 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	331c      	adds	r3, #28
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 fb8e 	bl	8001134 <lsm6dso_xl_full_scale_set>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d002      	beq.n	8000a24 <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a22:	e020      	b.n	8000a66 <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2204      	movs	r2, #4
 8000a28:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	331c      	adds	r3, #28
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 fda8 	bl	8001588 <lsm6dso_gy_data_rate_set>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d002      	beq.n	8000a44 <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a42:	e010      	b.n	8000a66 <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	331c      	adds	r3, #28
 8000a48:	2106      	movs	r1, #6
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fd34 	bl	80014b8 <lsm6dso_gy_full_scale_set>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d002      	beq.n	8000a5c <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 8000a56:	f04f 33ff 	mov.w	r3, #4294967295
 8000a5a:	e004      	b.n	8000a66 <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2201      	movs	r2, #1
 8000a60:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f000 f872 	bl	8000b60 <LSM6DSO_ACC_Disable>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d002      	beq.n	8000a88 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	e015      	b.n	8000ab4 <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f000 f95a 	bl	8000d42 <LSM6DSO_GYRO_Disable>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d002      	beq.n	8000a9a <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 8000a94:	f04f 33ff 	mov.w	r3, #4294967295
 8000a98:	e00c      	b.n	8000ab4 <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 8000ab2:	2300      	movs	r3, #0
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}

08000abc <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	2201      	movs	r2, #1
 8000aca:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	2201      	movs	r2, #1
 8000ad0:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	2200      	movs	r2, #0
 8000adc:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ae4:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	2210      	movs	r2, #16
 8000aea:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <LSM6DSO_GetCapabilities+0x58>)
 8000af6:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <LSM6DSO_GetCapabilities+0x58>)
 8000afc:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	f04f 0200 	mov.w	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	45d02000 	.word	0x45d02000

08000b18 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d101      	bne.n	8000b2e <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e014      	b.n	8000b58 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f103 021c 	add.w	r2, r3, #28
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4610      	mov	r0, r2
 8000b3e:	f000 fb57 	bl	80011f0 <lsm6dso_xl_data_rate_set>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d002      	beq.n	8000b4e <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8000b48:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4c:	e004      	b.n	8000b58 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2201      	movs	r2, #1
 8000b52:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8000b56:	2300      	movs	r3, #0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d101      	bne.n	8000b76 <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e01f      	b.n	8000bb6 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	f103 021c 	add.w	r2, r3, #28
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	332b      	adds	r3, #43	; 0x2b
 8000b80:	4619      	mov	r1, r3
 8000b82:	4610      	mov	r0, r2
 8000b84:	f000 fc30 	bl	80013e8 <lsm6dso_xl_data_rate_get>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d002      	beq.n	8000b94 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b92:	e010      	b.n	8000bb6 <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	331c      	adds	r3, #28
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 fb28 	bl	80011f0 <lsm6dso_xl_data_rate_set>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d002      	beq.n	8000bac <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8000ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8000baa:	e004      	b.n	8000bb6 <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b084      	sub	sp, #16
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	331c      	adds	r3, #28
 8000bd2:	f107 020b 	add.w	r2, r7, #11
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 fad1 	bl	8001180 <lsm6dso_xl_full_scale_get>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d002      	beq.n	8000bea <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8000be4:	f04f 33ff 	mov.w	r3, #4294967295
 8000be8:	e023      	b.n	8000c32 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8000bea:	7afb      	ldrb	r3, [r7, #11]
 8000bec:	2b03      	cmp	r3, #3
 8000bee:	d81b      	bhi.n	8000c28 <LSM6DSO_ACC_GetSensitivity+0x68>
 8000bf0:	a201      	add	r2, pc, #4	; (adr r2, 8000bf8 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8000bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf6:	bf00      	nop
 8000bf8:	08000c09 	.word	0x08000c09
 8000bfc:	08000c21 	.word	0x08000c21
 8000c00:	08000c11 	.word	0x08000c11
 8000c04:	08000c19 	.word	0x08000c19
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	4a0c      	ldr	r2, [pc, #48]	; (8000c3c <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8000c0c:	601a      	str	r2, [r3, #0]
      break;
 8000c0e:	e00f      	b.n	8000c30 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	4a0b      	ldr	r2, [pc, #44]	; (8000c40 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8000c14:	601a      	str	r2, [r3, #0]
      break;
 8000c16:	e00b      	b.n	8000c30 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	; (8000c44 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8000c1c:	601a      	str	r2, [r3, #0]
      break;
 8000c1e:	e007      	b.n	8000c30 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	4a09      	ldr	r2, [pc, #36]	; (8000c48 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8000c24:	601a      	str	r2, [r3, #0]
      break;
 8000c26:	e003      	b.n	8000c30 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2c:	60fb      	str	r3, [r7, #12]
      break;
 8000c2e:	bf00      	nop
  }

  return ret;
 8000c30:	68fb      	ldr	r3, [r7, #12]
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	3d79db23 	.word	0x3d79db23
 8000c40:	3df9db23 	.word	0x3df9db23
 8000c44:	3e79db23 	.word	0x3e79db23
 8000c48:	3ef9db23 	.word	0x3ef9db23

08000c4c <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8000c56:	f04f 0300 	mov.w	r3, #0
 8000c5a:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	331c      	adds	r3, #28
 8000c60:	f107 0210 	add.w	r2, r7, #16
 8000c64:	4611      	mov	r1, r2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f000 fe5d 	bl	8001926 <lsm6dso_acceleration_raw_get>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e03c      	b.n	8000cf2 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f7ff ff9e 	bl	8000bc0 <LSM6DSO_ACC_GetSensitivity>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d002      	beq.n	8000c90 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8000c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8e:	e030      	b.n	8000cf2 <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8000c90:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c94:	ee07 3a90 	vmov	s15, r3
 8000c98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000c9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ca4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ca8:	ee17 2a90 	vmov	r2, s15
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8000cb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000cb4:	ee07 3a90 	vmov	s15, r3
 8000cb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cc8:	ee17 2a90 	vmov	r2, s15
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8000cd0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000cd4:	ee07 3a90 	vmov	s15, r3
 8000cd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000cdc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ce0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ce4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ce8:	ee17 2a90 	vmov	r2, s15
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3718      	adds	r7, #24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d101      	bne.n	8000d10 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	e014      	b.n	8000d3a <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f103 021c 	add.w	r2, r3, #28
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4610      	mov	r0, r2
 8000d20:	f000 fc32 	bl	8001588 <lsm6dso_gy_data_rate_set>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d002      	beq.n	8000d30 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	e004      	b.n	8000d3a <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2201      	movs	r2, #1
 8000d34:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d101      	bne.n	8000d58 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	e01f      	b.n	8000d98 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f103 021c 	add.w	r2, r3, #28
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	332c      	adds	r3, #44	; 0x2c
 8000d62:	4619      	mov	r1, r3
 8000d64:	4610      	mov	r0, r2
 8000d66:	f000 fd0b 	bl	8001780 <lsm6dso_gy_data_rate_get>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d002      	beq.n	8000d76 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8000d70:	f04f 33ff 	mov.w	r3, #4294967295
 8000d74:	e010      	b.n	8000d98 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	331c      	adds	r3, #28
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 fc03 	bl	8001588 <lsm6dso_gy_data_rate_set>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d002      	beq.n	8000d8e <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8000d88:	f04f 33ff 	mov.w	r3, #4294967295
 8000d8c:	e004      	b.n	8000d98 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8000d96:	2300      	movs	r3, #0
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	331c      	adds	r3, #28
 8000db2:	f107 020b 	add.w	r2, r7, #11
 8000db6:	4611      	mov	r1, r2
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fba3 	bl	8001504 <lsm6dso_gy_full_scale_get>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d002      	beq.n	8000dca <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8000dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc8:	e02d      	b.n	8000e26 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8000dca:	7afb      	ldrb	r3, [r7, #11]
 8000dcc:	2b06      	cmp	r3, #6
 8000dce:	d825      	bhi.n	8000e1c <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8000dd0:	a201      	add	r2, pc, #4	; (adr r2, 8000dd8 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8000dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd6:	bf00      	nop
 8000dd8:	08000dfd 	.word	0x08000dfd
 8000ddc:	08000df5 	.word	0x08000df5
 8000de0:	08000e05 	.word	0x08000e05
 8000de4:	08000e1d 	.word	0x08000e1d
 8000de8:	08000e0d 	.word	0x08000e0d
 8000dec:	08000e1d 	.word	0x08000e1d
 8000df0:	08000e15 	.word	0x08000e15
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	4a0e      	ldr	r2, [pc, #56]	; (8000e30 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8000df8:	601a      	str	r2, [r3, #0]
      break;
 8000dfa:	e013      	b.n	8000e24 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8000e00:	601a      	str	r2, [r3, #0]
      break;
 8000e02:	e00f      	b.n	8000e24 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	4a0c      	ldr	r2, [pc, #48]	; (8000e38 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8000e08:	601a      	str	r2, [r3, #0]
      break;
 8000e0a:	e00b      	b.n	8000e24 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8000e10:	601a      	str	r2, [r3, #0]
      break;
 8000e12:	e007      	b.n	8000e24 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8000e18:	601a      	str	r2, [r3, #0]
      break;
 8000e1a:	e003      	b.n	8000e24 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8000e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e20:	60fb      	str	r3, [r7, #12]
      break;
 8000e22:	bf00      	nop
  }

  return ret;
 8000e24:	68fb      	ldr	r3, [r7, #12]
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	408c0000 	.word	0x408c0000
 8000e34:	410c0000 	.word	0x410c0000
 8000e38:	418c0000 	.word	0x418c0000
 8000e3c:	420c0000 	.word	0x420c0000
 8000e40:	428c0000 	.word	0x428c0000

08000e44 <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	331c      	adds	r3, #28
 8000e52:	f107 0210 	add.w	r2, r7, #16
 8000e56:	4611      	mov	r1, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 fd19 	bl	8001890 <lsm6dso_angular_rate_raw_get>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d002      	beq.n	8000e6a <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8000e64:	f04f 33ff 	mov.w	r3, #4294967295
 8000e68:	e03c      	b.n	8000ee4 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	4619      	mov	r1, r3
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ff95 	bl	8000da0 <LSM6DSO_GYRO_GetSensitivity>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d002      	beq.n	8000e82 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e80:	e030      	b.n	8000ee4 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8000e82:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e86:	ee07 3a90 	vmov	s15, r3
 8000e8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e8e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e9a:	ee17 2a90 	vmov	r2, s15
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8000ea2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ea6:	ee07 3a90 	vmov	s15, r3
 8000eaa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eae:	edd7 7a03 	vldr	s15, [r7, #12]
 8000eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eba:	ee17 2a90 	vmov	r2, s15
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8000ec2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000ec6:	ee07 3a90 	vmov	s15, r3
 8000eca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ece:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000eda:	ee17 2a90 	vmov	r2, s15
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3718      	adds	r7, #24
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}

08000eec <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	70fb      	strb	r3, [r7, #3]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f103 001c 	add.w	r0, r3, #28
 8000f02:	1cba      	adds	r2, r7, #2
 8000f04:	78f9      	ldrb	r1, [r7, #3]
 8000f06:	2301      	movs	r3, #1
 8000f08:	f000 f8fc 	bl	8001104 <lsm6dso_write_reg>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d002      	beq.n	8000f18 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	e000      	b.n	8000f1a <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8000f22:	b590      	push	{r4, r7, lr}
 8000f24:	b087      	sub	sp, #28
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	60f8      	str	r0, [r7, #12]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	460b      	mov	r3, r1
 8000f30:	72fb      	strb	r3, [r7, #11]
 8000f32:	4613      	mov	r3, r2
 8000f34:	813b      	strh	r3, [r7, #8]
	LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	617b      	str	r3, [r7, #20]
	return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	695c      	ldr	r4, [r3, #20]
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	7b1b      	ldrb	r3, [r3, #12]
 8000f42:	b298      	uxth	r0, r3
 8000f44:	7afb      	ldrb	r3, [r7, #11]
 8000f46:	b299      	uxth	r1, r3
 8000f48:	893b      	ldrh	r3, [r7, #8]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	47a0      	blx	r4
 8000f4e:	4603      	mov	r3, r0
	//MODIFIED
	//HAL_I2C_Mem_Read(Handle, LSM6DSO_I2C_ADD_L, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 1000);
	//return 0;
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	371c      	adds	r7, #28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd90      	pop	{r4, r7, pc}

08000f58 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b087      	sub	sp, #28
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	461a      	mov	r2, r3
 8000f64:	460b      	mov	r3, r1
 8000f66:	72fb      	strb	r3, [r7, #11]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	813b      	strh	r3, [r7, #8]
	LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	617b      	str	r3, [r7, #20]
	return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	691c      	ldr	r4, [r3, #16]
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	7b1b      	ldrb	r3, [r3, #12]
 8000f78:	b298      	uxth	r0, r3
 8000f7a:	7afb      	ldrb	r3, [r7, #11]
 8000f7c:	b299      	uxth	r1, r3
 8000f7e:	893b      	ldrh	r3, [r7, #8]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	47a0      	blx	r4
 8000f84:	4603      	mov	r3, r0
	//MODIFIED
	//HAL_I2C_Mem_Read(Handle, LSM6DSO_I2C_ADD_L, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 1000);
	//return 0;
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	371c      	adds	r7, #28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd90      	pop	{r4, r7, pc}
	...

08000f90 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af04      	add	r7, sp, #16
 8000f96:	60ba      	str	r2, [r7, #8]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	81fb      	strh	r3, [r7, #14]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	81bb      	strh	r3, [r7, #12]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	80fb      	strh	r3, [r7, #6]
  HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 1000);
 8000fa6:	89ba      	ldrh	r2, [r7, #12]
 8000fa8:	89f9      	ldrh	r1, [r7, #14]
 8000faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fae:	9302      	str	r3, [sp, #8]
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2301      	movs	r3, #1
 8000fba:	4804      	ldr	r0, [pc, #16]	; (8000fcc <BSP_I2C1_ReadReg+0x3c>)
 8000fbc:	f002 f8a4 	bl	8003108 <HAL_I2C_Mem_Read>

  return 0;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20001d80 	.word	0x20001d80

08000fd0 <BSP_I2C1_WriteReg>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af04      	add	r7, sp, #16
 8000fd6:	60ba      	str	r2, [r7, #8]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4603      	mov	r3, r0
 8000fdc:	81fb      	strh	r3, [r7, #14]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	81bb      	strh	r3, [r7, #12]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, 1000);
 8000fe6:	89ba      	ldrh	r2, [r7, #12]
 8000fe8:	89f9      	ldrh	r1, [r7, #14]
 8000fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fee:	9302      	str	r3, [sp, #8]
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	9301      	str	r3, [sp, #4]
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	4804      	ldr	r0, [pc, #16]	; (800100c <BSP_I2C1_WriteReg+0x3c>)
 8000ffc:	f001 ff70 	bl	8002ee0 <HAL_I2C_Mem_Write>
	return 0;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20001d80 	.word	0x20001d80

08001010 <INIT_IMU>:





void INIT_IMU(void){
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	//IMU------------------------------------------------
	  /* Configure the accelero driver */
	  IO_IMU.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <INIT_IMU+0x48>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
	  IO_IMU.Address     = LSM6DSO_I2C_ADD_H;
 800101a:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <INIT_IMU+0x48>)
 800101c:	22d7      	movs	r2, #215	; 0xd7
 800101e:	731a      	strb	r2, [r3, #12]
	  IO_IMU.Init        = LSM6DSO_Init;
 8001020:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <INIT_IMU+0x48>)
 8001022:	4a0e      	ldr	r2, [pc, #56]	; (800105c <INIT_IMU+0x4c>)
 8001024:	601a      	str	r2, [r3, #0]
	  IO_IMU.DeInit      = LSM6DSO_DeInit;
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <INIT_IMU+0x48>)
 8001028:	4a0d      	ldr	r2, [pc, #52]	; (8001060 <INIT_IMU+0x50>)
 800102a:	605a      	str	r2, [r3, #4]
	  IO_IMU.ReadReg     = IMU_BSP_I2C1_ReadReg;
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <INIT_IMU+0x48>)
 800102e:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <INIT_IMU+0x54>)
 8001030:	615a      	str	r2, [r3, #20]
	  IO_IMU.WriteReg    = IMU_BSP_I2C1_WriteReg;
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <INIT_IMU+0x48>)
 8001034:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <INIT_IMU+0x58>)
 8001036:	611a      	str	r2, [r3, #16]
	  LSM6DSO_RegisterBusIO(&IMU, &IO_IMU);
 8001038:	4907      	ldr	r1, [pc, #28]	; (8001058 <INIT_IMU+0x48>)
 800103a:	480c      	ldr	r0, [pc, #48]	; (800106c <INIT_IMU+0x5c>)
 800103c:	f7ff fc3c 	bl	80008b8 <LSM6DSO_RegisterBusIO>

	  LSM6DSO_GetCapabilities(&IMU, &capabilities_IMU);
 8001040:	490b      	ldr	r1, [pc, #44]	; (8001070 <INIT_IMU+0x60>)
 8001042:	480a      	ldr	r0, [pc, #40]	; (800106c <INIT_IMU+0x5c>)
 8001044:	f7ff fd3a 	bl	8000abc <LSM6DSO_GetCapabilities>

	  LSM6DSO_ACC_Enable(&IMU);
 8001048:	4808      	ldr	r0, [pc, #32]	; (800106c <INIT_IMU+0x5c>)
 800104a:	f7ff fd65 	bl	8000b18 <LSM6DSO_ACC_Enable>
	  LSM6DSO_GYRO_Enable(&IMU);
 800104e:	4807      	ldr	r0, [pc, #28]	; (800106c <INIT_IMU+0x5c>)
 8001050:	f7ff fe53 	bl	8000cfa <LSM6DSO_GYRO_Enable>
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20001d48 	.word	0x20001d48
 800105c:	08000985 	.word	0x08000985
 8001060:	08000a6f 	.word	0x08000a6f
 8001064:	08000f91 	.word	0x08000f91
 8001068:	08000fd1 	.word	0x08000fd1
 800106c:	20001d18 	.word	0x20001d18
 8001070:	20001d64 	.word	0x20001d64

08001074 <Get_AXIS_GYRO__IMU>:



LSM6DSO_Axes_t Get_AXIS_GYRO__IMU(void){
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	LSM6DSO_Axes_t gyro_IMU;
	LSM6DSO_GYRO_GetAxes(&IMU, &gyro_IMU);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	4619      	mov	r1, r3
 8001082:	4807      	ldr	r0, [pc, #28]	; (80010a0 <Get_AXIS_GYRO__IMU+0x2c>)
 8001084:	f7ff fede 	bl	8000e44 <LSM6DSO_GYRO_GetAxes>
	return gyro_IMU;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	461c      	mov	r4, r3
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001094:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	371c      	adds	r7, #28
 800109c:	46bd      	mov	sp, r7
 800109e:	bd90      	pop	{r4, r7, pc}
 80010a0:	20001d18 	.word	0x20001d18

080010a4 <Get_AXIS_ACC__IMU>:

LSM6DSO_Axes_t Get_AXIS_ACC__IMU(void){
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b087      	sub	sp, #28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
	LSM6DSO_Axes_t acc_IMU;
	LSM6DSO_ACC_GetAxes(&IMU, &acc_IMU);
 80010ac:	f107 030c 	add.w	r3, r7, #12
 80010b0:	4619      	mov	r1, r3
 80010b2:	4807      	ldr	r0, [pc, #28]	; (80010d0 <Get_AXIS_ACC__IMU+0x2c>)
 80010b4:	f7ff fdca 	bl	8000c4c <LSM6DSO_ACC_GetAxes>
	return acc_IMU;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	461c      	mov	r4, r3
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	371c      	adds	r7, #28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd90      	pop	{r4, r7, pc}
 80010d0:	20001d18 	.word	0x20001d18

080010d4 <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b087      	sub	sp, #28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	461a      	mov	r2, r3
 80010e0:	460b      	mov	r3, r1
 80010e2:	72fb      	strb	r3, [r7, #11]
 80010e4:	4613      	mov	r3, r2
 80010e6:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	685c      	ldr	r4, [r3, #4]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	6898      	ldr	r0, [r3, #8]
 80010f0:	893b      	ldrh	r3, [r7, #8]
 80010f2:	7af9      	ldrb	r1, [r7, #11]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	47a0      	blx	r4
 80010f8:	6178      	str	r0, [r7, #20]

  return ret;
 80010fa:	697b      	ldr	r3, [r7, #20]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	371c      	adds	r7, #28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd90      	pop	{r4, r7, pc}

08001104 <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001104:	b590      	push	{r4, r7, lr}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	461a      	mov	r2, r3
 8001110:	460b      	mov	r3, r1
 8001112:	72fb      	strb	r3, [r7, #11]
 8001114:	4613      	mov	r3, r2
 8001116:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	681c      	ldr	r4, [r3, #0]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6898      	ldr	r0, [r3, #8]
 8001120:	893b      	ldrh	r3, [r7, #8]
 8001122:	7af9      	ldrb	r1, [r7, #11]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	47a0      	blx	r4
 8001128:	6178      	str	r0, [r7, #20]

  return ret;
 800112a:	697b      	ldr	r3, [r7, #20]
}
 800112c:	4618      	mov	r0, r3
 800112e:	371c      	adds	r7, #28
 8001130:	46bd      	mov	sp, r7
 8001132:	bd90      	pop	{r4, r7, pc}

08001134 <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8001140:	f107 0208 	add.w	r2, r7, #8
 8001144:	2301      	movs	r3, #1
 8001146:	2110      	movs	r1, #16
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ffc3 	bl	80010d4 <lsm6dso_read_reg>
 800114e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10f      	bne.n	8001176 <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8001156:	78fb      	ldrb	r3, [r7, #3]
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	b2da      	uxtb	r2, r3
 800115e:	7a3b      	ldrb	r3, [r7, #8]
 8001160:	f362 0383 	bfi	r3, r2, #2, #2
 8001164:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8001166:	f107 0208 	add.w	r2, r7, #8
 800116a:	2301      	movs	r3, #1
 800116c:	2110      	movs	r1, #16
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffc8 	bl	8001104 <lsm6dso_write_reg>
 8001174:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800118a:	f107 0208 	add.w	r2, r7, #8
 800118e:	2301      	movs	r3, #1
 8001190:	2110      	movs	r1, #16
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ff9e 	bl	80010d4 <lsm6dso_read_reg>
 8001198:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 800119a:	7a3b      	ldrb	r3, [r7, #8]
 800119c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d81a      	bhi.n	80011dc <lsm6dso_xl_full_scale_get+0x5c>
 80011a6:	a201      	add	r2, pc, #4	; (adr r2, 80011ac <lsm6dso_xl_full_scale_get+0x2c>)
 80011a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011ac:	080011bd 	.word	0x080011bd
 80011b0:	080011c5 	.word	0x080011c5
 80011b4:	080011cd 	.word	0x080011cd
 80011b8:	080011d5 	.word	0x080011d5
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
      break;
 80011c2:	e00f      	b.n	80011e4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	2201      	movs	r2, #1
 80011c8:	701a      	strb	r2, [r3, #0]
      break;
 80011ca:	e00b      	b.n	80011e4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	2202      	movs	r2, #2
 80011d0:	701a      	strb	r2, [r3, #0]
      break;
 80011d2:	e007      	b.n	80011e4 <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2203      	movs	r2, #3
 80011d8:	701a      	strb	r2, [r3, #0]
      break;
 80011da:	e003      	b.n	80011e4 <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
      break;
 80011e2:	bf00      	nop
  }

  return ret;
 80011e4:	68fb      	ldr	r3, [r7, #12]
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop

080011f0 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	460b      	mov	r3, r1
 80011fa:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4619      	mov	r1, r3
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 fc90 	bl	8001b2c <lsm6dso_fsm_enable_get>
 800120c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	2b00      	cmp	r3, #0
 8001212:	f040 80c4 	bne.w	800139e <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001216:	7b3b      	ldrb	r3, [r7, #12]
 8001218:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800121c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800121e:	7b3b      	ldrb	r3, [r7, #12]
 8001220:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001224:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8001226:	4313      	orrs	r3, r2
 8001228:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800122a:	7b3b      	ldrb	r3, [r7, #12]
 800122c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001230:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8001232:	4313      	orrs	r3, r2
 8001234:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8001236:	7b3b      	ldrb	r3, [r7, #12]
 8001238:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800123c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800123e:	4313      	orrs	r3, r2
 8001240:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001242:	7b3b      	ldrb	r3, [r7, #12]
 8001244:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001248:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800124a:	4313      	orrs	r3, r2
 800124c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800124e:	7b3b      	ldrb	r3, [r7, #12]
 8001250:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001254:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8001256:	4313      	orrs	r3, r2
 8001258:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800125a:	7b3b      	ldrb	r3, [r7, #12]
 800125c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001260:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8001262:	4313      	orrs	r3, r2
 8001264:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001266:	7b3b      	ldrb	r3, [r7, #12]
 8001268:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800126c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800126e:	4313      	orrs	r3, r2
 8001270:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001272:	7b7b      	ldrb	r3, [r7, #13]
 8001274:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001278:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800127a:	4313      	orrs	r3, r2
 800127c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800127e:	7b7b      	ldrb	r3, [r7, #13]
 8001280:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001284:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8001286:	4313      	orrs	r3, r2
 8001288:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800128a:	7b7b      	ldrb	r3, [r7, #13]
 800128c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001290:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001292:	4313      	orrs	r3, r2
 8001294:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001296:	7b7b      	ldrb	r3, [r7, #13]
 8001298:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800129c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800129e:	4313      	orrs	r3, r2
 80012a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80012a2:	7b7b      	ldrb	r3, [r7, #13]
 80012a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80012a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80012aa:	4313      	orrs	r3, r2
 80012ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80012ae:	7b7b      	ldrb	r3, [r7, #13]
 80012b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80012b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80012ba:	7b7b      	ldrb	r3, [r7, #13]
 80012bc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80012c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80012c6:	7b7b      	ldrb	r3, [r7, #13]
 80012c8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80012cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80012ce:	4313      	orrs	r3, r2
 80012d0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d163      	bne.n	800139e <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80012d6:	f107 030b 	add.w	r3, r7, #11
 80012da:	4619      	mov	r1, r3
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fc47 	bl	8001b70 <lsm6dso_fsm_data_rate_get>
 80012e2:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d159      	bne.n	800139e <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80012ea:	7afb      	ldrb	r3, [r7, #11]
 80012ec:	2b03      	cmp	r3, #3
 80012ee:	d853      	bhi.n	8001398 <lsm6dso_xl_data_rate_set+0x1a8>
 80012f0:	a201      	add	r2, pc, #4	; (adr r2, 80012f8 <lsm6dso_xl_data_rate_set+0x108>)
 80012f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f6:	bf00      	nop
 80012f8:	08001309 	.word	0x08001309
 80012fc:	0800131b 	.word	0x0800131b
 8001300:	08001339 	.word	0x08001339
 8001304:	08001363 	.word	0x08001363
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d102      	bne.n	8001314 <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 800130e:	2301      	movs	r3, #1
 8001310:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001312:	e045      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	75fb      	strb	r3, [r7, #23]
            break;
 8001318:	e042      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 800131a:	78fb      	ldrb	r3, [r7, #3]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d102      	bne.n	8001326 <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8001320:	2302      	movs	r3, #2
 8001322:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001324:	e03c      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8001326:	78fb      	ldrb	r3, [r7, #3]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d102      	bne.n	8001332 <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 800132c:	2302      	movs	r3, #2
 800132e:	75fb      	strb	r3, [r7, #23]
            break;
 8001330:	e036      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	75fb      	strb	r3, [r7, #23]
            break;
 8001336:	e033      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8001338:	78fb      	ldrb	r3, [r7, #3]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d102      	bne.n	8001344 <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800133e:	2303      	movs	r3, #3
 8001340:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8001342:	e02d      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d102      	bne.n	8001350 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 800134a:	2303      	movs	r3, #3
 800134c:	75fb      	strb	r3, [r7, #23]
            break;
 800134e:	e027      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d102      	bne.n	800135c <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8001356:	2303      	movs	r3, #3
 8001358:	75fb      	strb	r3, [r7, #23]
            break;
 800135a:	e021      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800135c:	78fb      	ldrb	r3, [r7, #3]
 800135e:	75fb      	strb	r3, [r7, #23]
            break;
 8001360:	e01e      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8001362:	78fb      	ldrb	r3, [r7, #3]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8001368:	2304      	movs	r3, #4
 800136a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800136c:	e018      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 800136e:	78fb      	ldrb	r3, [r7, #3]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d102      	bne.n	800137a <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8001374:	2304      	movs	r3, #4
 8001376:	75fb      	strb	r3, [r7, #23]
            break;
 8001378:	e012      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 800137a:	78fb      	ldrb	r3, [r7, #3]
 800137c:	2b02      	cmp	r3, #2
 800137e:	d102      	bne.n	8001386 <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8001380:	2304      	movs	r3, #4
 8001382:	75fb      	strb	r3, [r7, #23]
            break;
 8001384:	e00c      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 8001386:	78fb      	ldrb	r3, [r7, #3]
 8001388:	2b03      	cmp	r3, #3
 800138a:	d102      	bne.n	8001392 <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 800138c:	2304      	movs	r3, #4
 800138e:	75fb      	strb	r3, [r7, #23]
            break;
 8001390:	e006      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001392:	78fb      	ldrb	r3, [r7, #3]
 8001394:	75fb      	strb	r3, [r7, #23]
            break;
 8001396:	e003      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	75fb      	strb	r3, [r7, #23]
            break;
 800139c:	e000      	b.n	80013a0 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 800139e:	bf00      	nop
    }
  }

  if (ret == 0)
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d107      	bne.n	80013b6 <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80013a6:	f107 0208 	add.w	r2, r7, #8
 80013aa:	2301      	movs	r3, #1
 80013ac:	2110      	movs	r1, #16
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fe90 	bl	80010d4 <lsm6dso_read_reg>
 80013b4:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d10f      	bne.n	80013dc <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 80013bc:	7dfb      	ldrb	r3, [r7, #23]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	7a3b      	ldrb	r3, [r7, #8]
 80013c6:	f362 1307 	bfi	r3, r2, #4, #4
 80013ca:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80013cc:	f107 0208 	add.w	r2, r7, #8
 80013d0:	2301      	movs	r3, #1
 80013d2:	2110      	movs	r1, #16
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7ff fe95 	bl	8001104 <lsm6dso_write_reg>
 80013da:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80013dc:	693b      	ldr	r3, [r7, #16]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop

080013e8 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 80013f2:	f107 0208 	add.w	r2, r7, #8
 80013f6:	2301      	movs	r3, #1
 80013f8:	2110      	movs	r1, #16
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fe6a 	bl	80010d4 <lsm6dso_read_reg>
 8001400:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 8001402:	7a3b      	ldrb	r3, [r7, #8]
 8001404:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b0b      	cmp	r3, #11
 800140c:	d84a      	bhi.n	80014a4 <lsm6dso_xl_data_rate_get+0xbc>
 800140e:	a201      	add	r2, pc, #4	; (adr r2, 8001414 <lsm6dso_xl_data_rate_get+0x2c>)
 8001410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001414:	08001445 	.word	0x08001445
 8001418:	0800144d 	.word	0x0800144d
 800141c:	08001455 	.word	0x08001455
 8001420:	0800145d 	.word	0x0800145d
 8001424:	08001465 	.word	0x08001465
 8001428:	0800146d 	.word	0x0800146d
 800142c:	08001475 	.word	0x08001475
 8001430:	0800147d 	.word	0x0800147d
 8001434:	08001485 	.word	0x08001485
 8001438:	0800148d 	.word	0x0800148d
 800143c:	08001495 	.word	0x08001495
 8001440:	0800149d 	.word	0x0800149d
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2200      	movs	r2, #0
 8001448:	701a      	strb	r2, [r3, #0]
      break;
 800144a:	e02f      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	2201      	movs	r2, #1
 8001450:	701a      	strb	r2, [r3, #0]
      break;
 8001452:	e02b      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	2202      	movs	r2, #2
 8001458:	701a      	strb	r2, [r3, #0]
      break;
 800145a:	e027      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	2203      	movs	r2, #3
 8001460:	701a      	strb	r2, [r3, #0]
      break;
 8001462:	e023      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	2204      	movs	r2, #4
 8001468:	701a      	strb	r2, [r3, #0]
      break;
 800146a:	e01f      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	2205      	movs	r2, #5
 8001470:	701a      	strb	r2, [r3, #0]
      break;
 8001472:	e01b      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	2206      	movs	r2, #6
 8001478:	701a      	strb	r2, [r3, #0]
      break;
 800147a:	e017      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2207      	movs	r2, #7
 8001480:	701a      	strb	r2, [r3, #0]
      break;
 8001482:	e013      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	2208      	movs	r2, #8
 8001488:	701a      	strb	r2, [r3, #0]
      break;
 800148a:	e00f      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2209      	movs	r2, #9
 8001490:	701a      	strb	r2, [r3, #0]
      break;
 8001492:	e00b      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	220a      	movs	r2, #10
 8001498:	701a      	strb	r2, [r3, #0]
      break;
 800149a:	e007      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	220b      	movs	r2, #11
 80014a0:	701a      	strb	r2, [r3, #0]
      break;
 80014a2:	e003      	b.n	80014ac <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
      break;
 80014aa:	bf00      	nop
  }

  return ret;
 80014ac:	68fb      	ldr	r3, [r7, #12]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop

080014b8 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	460b      	mov	r3, r1
 80014c2:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80014c4:	f107 0208 	add.w	r2, r7, #8
 80014c8:	2301      	movs	r3, #1
 80014ca:	2111      	movs	r1, #17
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff fe01 	bl	80010d4 <lsm6dso_read_reg>
 80014d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10f      	bne.n	80014fa <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 80014da:	78fb      	ldrb	r3, [r7, #3]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	7a3b      	ldrb	r3, [r7, #8]
 80014e4:	f362 0343 	bfi	r3, r2, #1, #3
 80014e8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80014ea:	f107 0208 	add.w	r2, r7, #8
 80014ee:	2301      	movs	r3, #1
 80014f0:	2111      	movs	r1, #17
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff fe06 	bl	8001104 <lsm6dso_write_reg>
 80014f8:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800150e:	f107 0208 	add.w	r2, r7, #8
 8001512:	2301      	movs	r3, #1
 8001514:	2111      	movs	r1, #17
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff fddc 	bl	80010d4 <lsm6dso_read_reg>
 800151c:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 800151e:	7a3b      	ldrb	r3, [r7, #8]
 8001520:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b06      	cmp	r3, #6
 8001528:	d824      	bhi.n	8001574 <lsm6dso_gy_full_scale_get+0x70>
 800152a:	a201      	add	r2, pc, #4	; (adr r2, 8001530 <lsm6dso_gy_full_scale_get+0x2c>)
 800152c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001530:	0800154d 	.word	0x0800154d
 8001534:	08001555 	.word	0x08001555
 8001538:	0800155d 	.word	0x0800155d
 800153c:	08001575 	.word	0x08001575
 8001540:	08001565 	.word	0x08001565
 8001544:	08001575 	.word	0x08001575
 8001548:	0800156d 	.word	0x0800156d
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	2200      	movs	r2, #0
 8001550:	701a      	strb	r2, [r3, #0]
      break;
 8001552:	e013      	b.n	800157c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
      break;
 800155a:	e00f      	b.n	800157c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2202      	movs	r2, #2
 8001560:	701a      	strb	r2, [r3, #0]
      break;
 8001562:	e00b      	b.n	800157c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2204      	movs	r2, #4
 8001568:	701a      	strb	r2, [r3, #0]
      break;
 800156a:	e007      	b.n	800157c <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2206      	movs	r2, #6
 8001570:	701a      	strb	r2, [r3, #0]
      break;
 8001572:	e003      	b.n	800157c <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
      break;
 800157a:	bf00      	nop
  }

  return ret;
 800157c:	68fb      	ldr	r3, [r7, #12]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop

08001588 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8001594:	78fb      	ldrb	r3, [r7, #3]
 8001596:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	4619      	mov	r1, r3
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 fac4 	bl	8001b2c <lsm6dso_fsm_enable_get>
 80015a4:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f040 80c4 	bne.w	8001736 <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80015ae:	7b3b      	ldrb	r3, [r7, #12]
 80015b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80015b4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80015b6:	7b3b      	ldrb	r3, [r7, #12]
 80015b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80015bc:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80015be:	4313      	orrs	r3, r2
 80015c0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80015c2:	7b3b      	ldrb	r3, [r7, #12]
 80015c4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80015c8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80015ca:	4313      	orrs	r3, r2
 80015cc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80015ce:	7b3b      	ldrb	r3, [r7, #12]
 80015d0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80015d4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80015d6:	4313      	orrs	r3, r2
 80015d8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80015da:	7b3b      	ldrb	r3, [r7, #12]
 80015dc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80015e0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80015e6:	7b3b      	ldrb	r3, [r7, #12]
 80015e8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80015ec:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80015f2:	7b3b      	ldrb	r3, [r7, #12]
 80015f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80015f8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80015fe:	7b3b      	ldrb	r3, [r7, #12]
 8001600:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001604:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 8001606:	4313      	orrs	r3, r2
 8001608:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800160a:	7b7b      	ldrb	r3, [r7, #13]
 800160c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001610:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8001612:	4313      	orrs	r3, r2
 8001614:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 8001616:	7b7b      	ldrb	r3, [r7, #13]
 8001618:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800161c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 800161e:	4313      	orrs	r3, r2
 8001620:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001622:	7b7b      	ldrb	r3, [r7, #13]
 8001624:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001628:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800162a:	4313      	orrs	r3, r2
 800162c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800162e:	7b7b      	ldrb	r3, [r7, #13]
 8001630:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001634:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8001636:	4313      	orrs	r3, r2
 8001638:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800163a:	7b7b      	ldrb	r3, [r7, #13]
 800163c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001640:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8001642:	4313      	orrs	r3, r2
 8001644:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8001646:	7b7b      	ldrb	r3, [r7, #13]
 8001648:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800164c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800164e:	4313      	orrs	r3, r2
 8001650:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001652:	7b7b      	ldrb	r3, [r7, #13]
 8001654:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001658:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800165a:	4313      	orrs	r3, r2
 800165c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800165e:	7b7b      	ldrb	r3, [r7, #13]
 8001660:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001664:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8001666:	4313      	orrs	r3, r2
 8001668:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800166a:	2b01      	cmp	r3, #1
 800166c:	d163      	bne.n	8001736 <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 800166e:	f107 030b 	add.w	r3, r7, #11
 8001672:	4619      	mov	r1, r3
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f000 fa7b 	bl	8001b70 <lsm6dso_fsm_data_rate_get>
 800167a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d159      	bne.n	8001736 <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8001682:	7afb      	ldrb	r3, [r7, #11]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d853      	bhi.n	8001730 <lsm6dso_gy_data_rate_set+0x1a8>
 8001688:	a201      	add	r2, pc, #4	; (adr r2, 8001690 <lsm6dso_gy_data_rate_set+0x108>)
 800168a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168e:	bf00      	nop
 8001690:	080016a1 	.word	0x080016a1
 8001694:	080016b3 	.word	0x080016b3
 8001698:	080016d1 	.word	0x080016d1
 800169c:	080016fb 	.word	0x080016fb
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d102      	bne.n	80016ac <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80016a6:	2301      	movs	r3, #1
 80016a8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80016aa:	e045      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80016ac:	78fb      	ldrb	r3, [r7, #3]
 80016ae:	75fb      	strb	r3, [r7, #23]
            break;
 80016b0:	e042      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80016b2:	78fb      	ldrb	r3, [r7, #3]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 80016b8:	2302      	movs	r3, #2
 80016ba:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80016bc:	e03c      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 80016be:	78fb      	ldrb	r3, [r7, #3]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d102      	bne.n	80016ca <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 80016c4:	2302      	movs	r3, #2
 80016c6:	75fb      	strb	r3, [r7, #23]
            break;
 80016c8:	e036      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80016ca:	78fb      	ldrb	r3, [r7, #3]
 80016cc:	75fb      	strb	r3, [r7, #23]
            break;
 80016ce:	e033      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80016d0:	78fb      	ldrb	r3, [r7, #3]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d102      	bne.n	80016dc <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80016d6:	2303      	movs	r3, #3
 80016d8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 80016da:	e02d      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d102      	bne.n	80016e8 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80016e2:	2303      	movs	r3, #3
 80016e4:	75fb      	strb	r3, [r7, #23]
            break;
 80016e6:	e027      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 80016e8:	78fb      	ldrb	r3, [r7, #3]
 80016ea:	2b02      	cmp	r3, #2
 80016ec:	d102      	bne.n	80016f4 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 80016ee:	2303      	movs	r3, #3
 80016f0:	75fb      	strb	r3, [r7, #23]
            break;
 80016f2:	e021      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	75fb      	strb	r3, [r7, #23]
            break;
 80016f8:	e01e      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8001700:	2304      	movs	r3, #4
 8001702:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8001704:	e018      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8001706:	78fb      	ldrb	r3, [r7, #3]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d102      	bne.n	8001712 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800170c:	2304      	movs	r3, #4
 800170e:	75fb      	strb	r3, [r7, #23]
            break;
 8001710:	e012      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8001712:	78fb      	ldrb	r3, [r7, #3]
 8001714:	2b02      	cmp	r3, #2
 8001716:	d102      	bne.n	800171e <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8001718:	2304      	movs	r3, #4
 800171a:	75fb      	strb	r3, [r7, #23]
            break;
 800171c:	e00c      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 800171e:	78fb      	ldrb	r3, [r7, #3]
 8001720:	2b03      	cmp	r3, #3
 8001722:	d102      	bne.n	800172a <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8001724:	2304      	movs	r3, #4
 8001726:	75fb      	strb	r3, [r7, #23]
            break;
 8001728:	e006      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800172a:	78fb      	ldrb	r3, [r7, #3]
 800172c:	75fb      	strb	r3, [r7, #23]
            break;
 800172e:	e003      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	75fb      	strb	r3, [r7, #23]
            break;
 8001734:	e000      	b.n	8001738 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 8001736:	bf00      	nop
    }
  }

  if (ret == 0)
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d107      	bne.n	800174e <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800173e:	f107 0208 	add.w	r2, r7, #8
 8001742:	2301      	movs	r3, #1
 8001744:	2111      	movs	r1, #17
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fcc4 	bl	80010d4 <lsm6dso_read_reg>
 800174c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10f      	bne.n	8001774 <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	f003 030f 	and.w	r3, r3, #15
 800175a:	b2da      	uxtb	r2, r3
 800175c:	7a3b      	ldrb	r3, [r7, #8]
 800175e:	f362 1307 	bfi	r3, r2, #4, #4
 8001762:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8001764:	f107 0208 	add.w	r2, r7, #8
 8001768:	2301      	movs	r3, #1
 800176a:	2111      	movs	r1, #17
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff fcc9 	bl	8001104 <lsm6dso_write_reg>
 8001772:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8001774:	693b      	ldr	r3, [r7, #16]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3718      	adds	r7, #24
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop

08001780 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800178a:	f107 0208 	add.w	r2, r7, #8
 800178e:	2301      	movs	r3, #1
 8001790:	2111      	movs	r1, #17
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff fc9e 	bl	80010d4 <lsm6dso_read_reg>
 8001798:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 800179a:	7a3b      	ldrb	r3, [r7, #8]
 800179c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b0a      	cmp	r3, #10
 80017a4:	d844      	bhi.n	8001830 <lsm6dso_gy_data_rate_get+0xb0>
 80017a6:	a201      	add	r2, pc, #4	; (adr r2, 80017ac <lsm6dso_gy_data_rate_get+0x2c>)
 80017a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ac:	080017d9 	.word	0x080017d9
 80017b0:	080017e1 	.word	0x080017e1
 80017b4:	080017e9 	.word	0x080017e9
 80017b8:	080017f1 	.word	0x080017f1
 80017bc:	080017f9 	.word	0x080017f9
 80017c0:	08001801 	.word	0x08001801
 80017c4:	08001809 	.word	0x08001809
 80017c8:	08001811 	.word	0x08001811
 80017cc:	08001819 	.word	0x08001819
 80017d0:	08001821 	.word	0x08001821
 80017d4:	08001829 	.word	0x08001829
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	2200      	movs	r2, #0
 80017dc:	701a      	strb	r2, [r3, #0]
      break;
 80017de:	e02b      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	2201      	movs	r2, #1
 80017e4:	701a      	strb	r2, [r3, #0]
      break;
 80017e6:	e027      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	2202      	movs	r2, #2
 80017ec:	701a      	strb	r2, [r3, #0]
      break;
 80017ee:	e023      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	2203      	movs	r2, #3
 80017f4:	701a      	strb	r2, [r3, #0]
      break;
 80017f6:	e01f      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	2204      	movs	r2, #4
 80017fc:	701a      	strb	r2, [r3, #0]
      break;
 80017fe:	e01b      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	2205      	movs	r2, #5
 8001804:	701a      	strb	r2, [r3, #0]
      break;
 8001806:	e017      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	2206      	movs	r2, #6
 800180c:	701a      	strb	r2, [r3, #0]
      break;
 800180e:	e013      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	2207      	movs	r2, #7
 8001814:	701a      	strb	r2, [r3, #0]
      break;
 8001816:	e00f      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	2208      	movs	r2, #8
 800181c:	701a      	strb	r2, [r3, #0]
      break;
 800181e:	e00b      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	2209      	movs	r2, #9
 8001824:	701a      	strb	r2, [r3, #0]
      break;
 8001826:	e007      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	220a      	movs	r2, #10
 800182c:	701a      	strb	r2, [r3, #0]
      break;
 800182e:	e003      	b.n	8001838 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	2200      	movs	r2, #0
 8001834:	701a      	strb	r2, [r3, #0]
      break;
 8001836:	bf00      	nop
  }

  return ret;
 8001838:	68fb      	ldr	r3, [r7, #12]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop

08001844 <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8001850:	f107 0208 	add.w	r2, r7, #8
 8001854:	2301      	movs	r3, #1
 8001856:	2112      	movs	r1, #18
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff fc3b 	bl	80010d4 <lsm6dso_read_reg>
 800185e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	b2da      	uxtb	r2, r3
 800186e:	7a3b      	ldrb	r3, [r7, #8]
 8001870:	f362 1386 	bfi	r3, r2, #6, #1
 8001874:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8001876:	f107 0208 	add.w	r2, r7, #8
 800187a:	2301      	movs	r3, #1
 800187c:	2112      	movs	r1, #18
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fc40 	bl	8001104 <lsm6dso_write_reg>
 8001884:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001886:	68fb      	ldr	r3, [r7, #12]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 800189a:	f107 020c 	add.w	r2, r7, #12
 800189e:	2306      	movs	r3, #6
 80018a0:	2122      	movs	r1, #34	; 0x22
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f7ff fc16 	bl	80010d4 <lsm6dso_read_reg>
 80018a8:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80018aa:	7b7b      	ldrb	r3, [r7, #13]
 80018ac:	b21a      	sxth	r2, r3
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	021b      	lsls	r3, r3, #8
 80018bc:	b29a      	uxth	r2, r3
 80018be:	7b3b      	ldrb	r3, [r7, #12]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	b21a      	sxth	r2, r3
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	3302      	adds	r3, #2
 80018d2:	b212      	sxth	r2, r2
 80018d4:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	3302      	adds	r3, #2
 80018da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	7bbb      	ldrb	r3, [r7, #14]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	3302      	adds	r3, #2
 80018f0:	b212      	sxth	r2, r2
 80018f2:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80018f4:	7c7a      	ldrb	r2, [r7, #17]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	3304      	adds	r3, #4
 80018fa:	b212      	sxth	r2, r2
 80018fc:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	3304      	adds	r3, #4
 8001902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001906:	b29b      	uxth	r3, r3
 8001908:	021b      	lsls	r3, r3, #8
 800190a:	b29a      	uxth	r2, r3
 800190c:	7c3b      	ldrb	r3, [r7, #16]
 800190e:	b29b      	uxth	r3, r3
 8001910:	4413      	add	r3, r2
 8001912:	b29a      	uxth	r2, r3
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	3304      	adds	r3, #4
 8001918:	b212      	sxth	r2, r2
 800191a:	801a      	strh	r2, [r3, #0]

  return ret;
 800191c:	697b      	ldr	r3, [r7, #20]
}
 800191e:	4618      	mov	r0, r3
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8001930:	f107 020c 	add.w	r2, r7, #12
 8001934:	2306      	movs	r3, #6
 8001936:	2128      	movs	r1, #40	; 0x28
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff fbcb 	bl	80010d4 <lsm6dso_read_reg>
 800193e:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8001940:	7b7b      	ldrb	r3, [r7, #13]
 8001942:	b21a      	sxth	r2, r3
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194e:	b29b      	uxth	r3, r3
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	b29a      	uxth	r2, r3
 8001954:	7b3b      	ldrb	r3, [r7, #12]
 8001956:	b29b      	uxth	r3, r3
 8001958:	4413      	add	r3, r2
 800195a:	b29b      	uxth	r3, r3
 800195c:	b21a      	sxth	r2, r3
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8001962:	7bfa      	ldrb	r2, [r7, #15]
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	3302      	adds	r3, #2
 8001968:	b212      	sxth	r2, r2
 800196a:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	3302      	adds	r3, #2
 8001970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001974:	b29b      	uxth	r3, r3
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	b29a      	uxth	r2, r3
 800197a:	7bbb      	ldrb	r3, [r7, #14]
 800197c:	b29b      	uxth	r3, r3
 800197e:	4413      	add	r3, r2
 8001980:	b29a      	uxth	r2, r3
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	3302      	adds	r3, #2
 8001986:	b212      	sxth	r2, r2
 8001988:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800198a:	7c7a      	ldrb	r2, [r7, #17]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	3304      	adds	r3, #4
 8001990:	b212      	sxth	r2, r2
 8001992:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	3304      	adds	r3, #4
 8001998:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199c:	b29b      	uxth	r3, r3
 800199e:	021b      	lsls	r3, r3, #8
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	7c3b      	ldrb	r3, [r7, #16]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	3304      	adds	r3, #4
 80019ae:	b212      	sxth	r2, r2
 80019b0:	801a      	strh	r2, [r3, #0]

  return ret;
 80019b2:	697b      	ldr	r3, [r7, #20]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80019c8:	f107 0208 	add.w	r2, r7, #8
 80019cc:	2301      	movs	r3, #1
 80019ce:	2101      	movs	r1, #1
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff fb7f 	bl	80010d4 <lsm6dso_read_reg>
 80019d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10f      	bne.n	80019fe <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	b2da      	uxtb	r2, r3
 80019e6:	7a3b      	ldrb	r3, [r7, #8]
 80019e8:	f362 1387 	bfi	r3, r2, #6, #2
 80019ec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 80019ee:	f107 0208 	add.w	r2, r7, #8
 80019f2:	2301      	movs	r3, #1
 80019f4:	2101      	movs	r1, #1
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff fb84 	bl	8001104 <lsm6dso_write_reg>
 80019fc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80019fe:	68fb      	ldr	r3, [r7, #12]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8001a14:	f107 0208 	add.w	r2, r7, #8
 8001a18:	2301      	movs	r3, #1
 8001a1a:	2112      	movs	r1, #18
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff fb59 	bl	80010d4 <lsm6dso_read_reg>
 8001a22:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d10f      	bne.n	8001a4a <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	7a3b      	ldrb	r3, [r7, #8]
 8001a34:	f362 0382 	bfi	r3, r2, #2, #1
 8001a38:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 8001a3a:	f107 0208 	add.w	r2, r7, #8
 8001a3e:	2301      	movs	r3, #1
 8001a40:	2112      	movs	r1, #18
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fb5e 	bl	8001104 <lsm6dso_write_reg>
 8001a48:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3710      	adds	r7, #16
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8001a60:	f107 020c 	add.w	r2, r7, #12
 8001a64:	2301      	movs	r3, #1
 8001a66:	2118      	movs	r1, #24
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff fb33 	bl	80010d4 <lsm6dso_read_reg>
 8001a6e:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d111      	bne.n	8001a9a <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 8001a76:	78fb      	ldrb	r3, [r7, #3]
 8001a78:	09db      	lsrs	r3, r3, #7
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	7b3b      	ldrb	r3, [r7, #12]
 8001a84:	f362 0341 	bfi	r3, r2, #1, #1
 8001a88:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8001a8a:	f107 020c 	add.w	r2, r7, #12
 8001a8e:	2301      	movs	r3, #1
 8001a90:	2118      	movs	r1, #24
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff fb36 	bl	8001104 <lsm6dso_write_reg>
 8001a98:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d107      	bne.n	8001ab0 <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8001aa0:	f107 0210 	add.w	r2, r7, #16
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	2162      	movs	r1, #98	; 0x62
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff fb13 	bl	80010d4 <lsm6dso_read_reg>
 8001aae:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d10f      	bne.n	8001ad6 <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8001ab6:	78fb      	ldrb	r3, [r7, #3]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	7c3b      	ldrb	r3, [r7, #16]
 8001ac0:	f362 03c4 	bfi	r3, r2, #3, #2
 8001ac4:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8001ac6:	f107 0210 	add.w	r2, r7, #16
 8001aca:	2301      	movs	r3, #1
 8001acc:	2162      	movs	r1, #98	; 0x62
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fb18 	bl	8001104 <lsm6dso_write_reg>
 8001ad4:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 8001ad6:	697b      	ldr	r3, [r7, #20]
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3718      	adds	r7, #24
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8001aec:	f107 0208 	add.w	r2, r7, #8
 8001af0:	2301      	movs	r3, #1
 8001af2:	210a      	movs	r1, #10
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f7ff faed 	bl	80010d4 <lsm6dso_read_reg>
 8001afa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10f      	bne.n	8001b22 <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 8001b02:	78fb      	ldrb	r3, [r7, #3]
 8001b04:	f003 0307 	and.w	r3, r3, #7
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	7a3b      	ldrb	r3, [r7, #8]
 8001b0c:	f362 0302 	bfi	r3, r2, #0, #3
 8001b10:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8001b12:	f107 0208 	add.w	r2, r7, #8
 8001b16:	2301      	movs	r3, #1
 8001b18:	210a      	movs	r1, #10
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f7ff faf2 	bl	8001104 <lsm6dso_write_reg>
 8001b20:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b22:	68fb      	ldr	r3, [r7, #12]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8001b36:	2102      	movs	r1, #2
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f7ff ff3f 	bl	80019bc <lsm6dso_mem_bank_set>
 8001b3e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 8001b46:	2302      	movs	r3, #2
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	2146      	movs	r1, #70	; 0x46
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f7ff fac1 	bl	80010d4 <lsm6dso_read_reg>
 8001b52:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d104      	bne.n	8001b64 <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7ff ff2d 	bl	80019bc <lsm6dso_mem_bank_set>
 8001b62:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001b64:	68fb      	ldr	r3, [r7, #12]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 8001b7a:	2102      	movs	r1, #2
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	f7ff ff1d 	bl	80019bc <lsm6dso_mem_bank_set>
 8001b82:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d107      	bne.n	8001b9a <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8001b8a:	f107 0208 	add.w	r2, r7, #8
 8001b8e:	2301      	movs	r3, #1
 8001b90:	215f      	movs	r1, #95	; 0x5f
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7ff fa9e 	bl	80010d4 <lsm6dso_read_reg>
 8001b98:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d12a      	bne.n	8001bf6 <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8001ba0:	7a3b      	ldrb	r3, [r7, #8]
 8001ba2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d81b      	bhi.n	8001be4 <lsm6dso_fsm_data_rate_get+0x74>
 8001bac:	a201      	add	r2, pc, #4	; (adr r2, 8001bb4 <lsm6dso_fsm_data_rate_get+0x44>)
 8001bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb2:	bf00      	nop
 8001bb4:	08001bc5 	.word	0x08001bc5
 8001bb8:	08001bcd 	.word	0x08001bcd
 8001bbc:	08001bd5 	.word	0x08001bd5
 8001bc0:	08001bdd 	.word	0x08001bdd
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
        break;
 8001bca:	e00f      	b.n	8001bec <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	701a      	strb	r2, [r3, #0]
        break;
 8001bd2:	e00b      	b.n	8001bec <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	2202      	movs	r2, #2
 8001bd8:	701a      	strb	r2, [r3, #0]
        break;
 8001bda:	e007      	b.n	8001bec <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	2203      	movs	r2, #3
 8001be0:	701a      	strb	r2, [r3, #0]
        break;
 8001be2:	e003      	b.n	8001bec <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
        break;
 8001bea:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8001bec:	2100      	movs	r1, #0
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fee4 	bl	80019bc <lsm6dso_mem_bank_set>
 8001bf4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c00:	b590      	push	{r4, r7, lr}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c06:	f000 fd4f 	bl	80026a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c0a:	f000 f839 	bl	8001c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c0e:	f000 f9d1 	bl	8001fb4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c12:	f000 f887 	bl	8001d24 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001c16:	f000 f99d 	bl	8001f54 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001c1a:	f000 f8c3 	bl	8001da4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001c1e:	f000 f8ff 	bl	8001e20 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c22:	f000 f949 	bl	8001eb8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  DRV_Init();
 8001c26:	f7fe fc51 	bl	80004cc <DRV_Init>

  INIT_IMU();
 8001c2a:	f7ff f9f1 	bl	8001010 <INIT_IMU>


  //INTERRUPTS
  HAL_TIM_Base_Start_IT(&htim2);
 8001c2e:	480f      	ldr	r0, [pc, #60]	; (8001c6c <main+0x6c>)
 8001c30:	f003 fe42 	bl	80058b8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001c34:	480e      	ldr	r0, [pc, #56]	; (8001c70 <main+0x70>)
 8001c36:	f003 fe3f 	bl	80058b8 <HAL_TIM_Base_Start_IT>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	acc_IMU = Get_AXIS_GYRO__IMU();
 8001c3a:	4c0e      	ldr	r4, [pc, #56]	; (8001c74 <main+0x74>)
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fa18 	bl	8001074 <Get_AXIS_GYRO__IMU>
 8001c44:	463b      	mov	r3, r7
 8001c46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	gyro_IMU = Get_AXIS_ACC__IMU();
 8001c4e:	4c0a      	ldr	r4, [pc, #40]	; (8001c78 <main+0x78>)
 8001c50:	463b      	mov	r3, r7
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff fa26 	bl	80010a4 <Get_AXIS_ACC__IMU>
 8001c58:	463b      	mov	r3, r7
 8001c5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	MotionDI_manager_init(100);
 8001c62:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001c7c <main+0x7c>
 8001c66:	f000 fa3f 	bl	80020e8 <MotionDI_manager_init>
	acc_IMU = Get_AXIS_GYRO__IMU();
 8001c6a:	e7e6      	b.n	8001c3a <main+0x3a>
 8001c6c:	20001e30 	.word	0x20001e30
 8001c70:	20001e7c 	.word	0x20001e7c
 8001c74:	20001f74 	.word	0x20001f74
 8001c78:	20001f80 	.word	0x20001f80
 8001c7c:	42c80000 	.word	0x42c80000

08001c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b096      	sub	sp, #88	; 0x58
 8001c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	2244      	movs	r2, #68	; 0x44
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f005 ff66 	bl	8007b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c94:	463b      	mov	r3, r7
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
 8001c9a:	605a      	str	r2, [r3, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 8001c9e:	60da      	str	r2, [r3, #12]
 8001ca0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ca2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ca6:	f001 fe95 	bl	80039d4 <HAL_PWREx_ControlVoltageScaling>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001cb0:	f000 fa14 	bl	80020dc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cbc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cbe:	2310      	movs	r3, #16
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001cce:	230a      	movs	r3, #10
 8001cd0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001cd2:	2307      	movs	r3, #7
 8001cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cde:	f107 0314 	add.w	r3, r7, #20
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f001 fecc 	bl	8003a80 <HAL_RCC_OscConfig>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001cee:	f000 f9f5 	bl	80020dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf2:	230f      	movs	r3, #15
 8001cf4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d06:	463b      	mov	r3, r7
 8001d08:	2104      	movs	r1, #4
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f002 faa0 	bl	8004250 <HAL_RCC_ClockConfig>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001d16:	f000 f9e1 	bl	80020dc <Error_Handler>
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	3758      	adds	r7, #88	; 0x58
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d28:	4b1b      	ldr	r3, [pc, #108]	; (8001d98 <MX_I2C1_Init+0x74>)
 8001d2a:	4a1c      	ldr	r2, [pc, #112]	; (8001d9c <MX_I2C1_Init+0x78>)
 8001d2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001d2e:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <MX_I2C1_Init+0x74>)
 8001d30:	4a1b      	ldr	r2, [pc, #108]	; (8001da0 <MX_I2C1_Init+0x7c>)
 8001d32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001d34:	4b18      	ldr	r3, [pc, #96]	; (8001d98 <MX_I2C1_Init+0x74>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d3a:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <MX_I2C1_Init+0x74>)
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d40:	4b15      	ldr	r3, [pc, #84]	; (8001d98 <MX_I2C1_Init+0x74>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001d46:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <MX_I2C1_Init+0x74>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001d4c:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <MX_I2C1_Init+0x74>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <MX_I2C1_Init+0x74>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d58:	4b0f      	ldr	r3, [pc, #60]	; (8001d98 <MX_I2C1_Init+0x74>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d5e:	480e      	ldr	r0, [pc, #56]	; (8001d98 <MX_I2C1_Init+0x74>)
 8001d60:	f001 f82e 	bl	8002dc0 <HAL_I2C_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001d6a:	f000 f9b7 	bl	80020dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001d6e:	2100      	movs	r1, #0
 8001d70:	4809      	ldr	r0, [pc, #36]	; (8001d98 <MX_I2C1_Init+0x74>)
 8001d72:	f001 fd89 	bl	8003888 <HAL_I2CEx_ConfigAnalogFilter>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001d7c:	f000 f9ae 	bl	80020dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001d80:	2100      	movs	r1, #0
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <MX_I2C1_Init+0x74>)
 8001d84:	f001 fdcb 	bl	800391e <HAL_I2CEx_ConfigDigitalFilter>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001d8e:	f000 f9a5 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20001d80 	.word	0x20001d80
 8001d9c:	40005400 	.word	0x40005400
 8001da0:	00702991 	.word	0x00702991

08001da4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <MX_SPI2_Init+0x74>)
 8001daa:	4a1c      	ldr	r2, [pc, #112]	; (8001e1c <MX_SPI2_Init+0x78>)
 8001dac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001dae:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <MX_SPI2_Init+0x74>)
 8001db0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001db4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001db6:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <MX_SPI2_Init+0x74>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dbc:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <MX_SPI2_Init+0x74>)
 8001dbe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001dc2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <MX_SPI2_Init+0x74>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dca:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <MX_SPI2_Init+0x74>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <MX_SPI2_Init+0x74>)
 8001dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <MX_SPI2_Init+0x74>)
 8001dda:	2228      	movs	r2, #40	; 0x28
 8001ddc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <MX_SPI2_Init+0x74>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <MX_SPI2_Init+0x74>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <MX_SPI2_Init+0x74>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MX_SPI2_Init+0x74>)
 8001df2:	2207      	movs	r2, #7
 8001df4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <MX_SPI2_Init+0x74>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <MX_SPI2_Init+0x74>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e02:	4805      	ldr	r0, [pc, #20]	; (8001e18 <MX_SPI2_Init+0x74>)
 8001e04:	f003 f8e6 	bl	8004fd4 <HAL_SPI_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001e0e:	f000 f965 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20001dcc 	.word	0x20001dcc
 8001e1c:	40003800 	.word	0x40003800

08001e20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e26:	f107 0310 	add.w	r3, r7, #16
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	2200      	movs	r2, #0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	605a      	str	r2, [r3, #4]
 8001e3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	; (8001eb4 <MX_TIM2_Init+0x94>)
 8001e40:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9;
 8001e46:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <MX_TIM2_Init+0x94>)
 8001e48:	2209      	movs	r2, #9
 8001e4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4c:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <MX_TIM2_Init+0x94>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 8001e52:	4b18      	ldr	r3, [pc, #96]	; (8001eb4 <MX_TIM2_Init+0x94>)
 8001e54:	22c7      	movs	r2, #199	; 0xc7
 8001e56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e58:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <MX_TIM2_Init+0x94>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <MX_TIM2_Init+0x94>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e64:	4813      	ldr	r0, [pc, #76]	; (8001eb4 <MX_TIM2_Init+0x94>)
 8001e66:	f003 fccf 	bl	8005808 <HAL_TIM_Base_Init>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e70:	f000 f934 	bl	80020dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e7a:	f107 0310 	add.w	r3, r7, #16
 8001e7e:	4619      	mov	r1, r3
 8001e80:	480c      	ldr	r0, [pc, #48]	; (8001eb4 <MX_TIM2_Init+0x94>)
 8001e82:	f003 fea8 	bl	8005bd6 <HAL_TIM_ConfigClockSource>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e8c:	f000 f926 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e90:	2300      	movs	r3, #0
 8001e92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e98:	1d3b      	adds	r3, r7, #4
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <MX_TIM2_Init+0x94>)
 8001e9e:	f004 f8c9 	bl	8006034 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ea8:	f000 f918 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001eac:	bf00      	nop
 8001eae:	3720      	adds	r7, #32
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20001e30 	.word	0x20001e30

08001eb8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b088      	sub	sp, #32
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ebe:	f107 0310 	add.w	r3, r7, #16
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
 8001ec8:	609a      	str	r2, [r3, #8]
 8001eca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ecc:	1d3b      	adds	r3, r7, #4
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <MX_TIM3_Init+0x94>)
 8001ed8:	4a1d      	ldr	r2, [pc, #116]	; (8001f50 <MX_TIM3_Init+0x98>)
 8001eda:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8001edc:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <MX_TIM3_Init+0x94>)
 8001ede:	2207      	movs	r2, #7
 8001ee0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee2:	4b1a      	ldr	r3, [pc, #104]	; (8001f4c <MX_TIM3_Init+0x94>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001ee8:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <MX_TIM3_Init+0x94>)
 8001eea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef0:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <MX_TIM3_Init+0x94>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ef6:	4b15      	ldr	r3, [pc, #84]	; (8001f4c <MX_TIM3_Init+0x94>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001efc:	4813      	ldr	r0, [pc, #76]	; (8001f4c <MX_TIM3_Init+0x94>)
 8001efe:	f003 fc83 	bl	8005808 <HAL_TIM_Base_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001f08:	f000 f8e8 	bl	80020dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f10:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001f12:	f107 0310 	add.w	r3, r7, #16
 8001f16:	4619      	mov	r1, r3
 8001f18:	480c      	ldr	r0, [pc, #48]	; (8001f4c <MX_TIM3_Init+0x94>)
 8001f1a:	f003 fe5c 	bl	8005bd6 <HAL_TIM_ConfigClockSource>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001f24:	f000 f8da 	bl	80020dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	4619      	mov	r1, r3
 8001f34:	4805      	ldr	r0, [pc, #20]	; (8001f4c <MX_TIM3_Init+0x94>)
 8001f36:	f004 f87d 	bl	8006034 <HAL_TIMEx_MasterConfigSynchronization>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001f40:	f000 f8cc 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f44:	bf00      	nop
 8001f46:	3720      	adds	r7, #32
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	20001e7c 	.word	0x20001e7c
 8001f50:	40000400 	.word	0x40000400

08001f54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f58:	4b14      	ldr	r3, [pc, #80]	; (8001fac <MX_USART2_UART_Init+0x58>)
 8001f5a:	4a15      	ldr	r2, [pc, #84]	; (8001fb0 <MX_USART2_UART_Init+0x5c>)
 8001f5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f5e:	4b13      	ldr	r3, [pc, #76]	; (8001fac <MX_USART2_UART_Init+0x58>)
 8001f60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f66:	4b11      	ldr	r3, [pc, #68]	; (8001fac <MX_USART2_UART_Init+0x58>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f6c:	4b0f      	ldr	r3, [pc, #60]	; (8001fac <MX_USART2_UART_Init+0x58>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f72:	4b0e      	ldr	r3, [pc, #56]	; (8001fac <MX_USART2_UART_Init+0x58>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f78:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <MX_USART2_UART_Init+0x58>)
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7e:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <MX_USART2_UART_Init+0x58>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <MX_USART2_UART_Init+0x58>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <MX_USART2_UART_Init+0x58>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f90:	4b06      	ldr	r3, [pc, #24]	; (8001fac <MX_USART2_UART_Init+0x58>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f96:	4805      	ldr	r0, [pc, #20]	; (8001fac <MX_USART2_UART_Init+0x58>)
 8001f98:	f004 f8f2 	bl	8006180 <HAL_UART_Init>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001fa2:	f000 f89b 	bl	80020dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20001ec8 	.word	0x20001ec8
 8001fb0:	40004400 	.word	0x40004400

08001fb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	; 0x28
 8001fb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
 8001fc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fca:	4b41      	ldr	r3, [pc, #260]	; (80020d0 <MX_GPIO_Init+0x11c>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	4a40      	ldr	r2, [pc, #256]	; (80020d0 <MX_GPIO_Init+0x11c>)
 8001fd0:	f043 0304 	orr.w	r3, r3, #4
 8001fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd6:	4b3e      	ldr	r3, [pc, #248]	; (80020d0 <MX_GPIO_Init+0x11c>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	613b      	str	r3, [r7, #16]
 8001fe0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fe2:	4b3b      	ldr	r3, [pc, #236]	; (80020d0 <MX_GPIO_Init+0x11c>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	4a3a      	ldr	r2, [pc, #232]	; (80020d0 <MX_GPIO_Init+0x11c>)
 8001fe8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fee:	4b38      	ldr	r3, [pc, #224]	; (80020d0 <MX_GPIO_Init+0x11c>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffa:	4b35      	ldr	r3, [pc, #212]	; (80020d0 <MX_GPIO_Init+0x11c>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	4a34      	ldr	r2, [pc, #208]	; (80020d0 <MX_GPIO_Init+0x11c>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002006:	4b32      	ldr	r3, [pc, #200]	; (80020d0 <MX_GPIO_Init+0x11c>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <MX_GPIO_Init+0x11c>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	4a2e      	ldr	r2, [pc, #184]	; (80020d0 <MX_GPIO_Init+0x11c>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800201e:	4b2c      	ldr	r3, [pc, #176]	; (80020d0 <MX_GPIO_Init+0x11c>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|nSleep_Pin, GPIO_PIN_RESET);
 800202a:	2200      	movs	r2, #0
 800202c:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8002030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002034:	f000 feac 	bl	8002d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8002038:	2200      	movs	r2, #0
 800203a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800203e:	4825      	ldr	r0, [pc, #148]	; (80020d4 <MX_GPIO_Init+0x120>)
 8002040:	f000 fea6 	bl	8002d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWM_sync_Pin|PWM_timer_Pin, GPIO_PIN_RESET);
 8002044:	2200      	movs	r2, #0
 8002046:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 800204a:	4823      	ldr	r0, [pc, #140]	; (80020d8 <MX_GPIO_Init+0x124>)
 800204c:	f000 fea0 	bl	8002d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002050:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002054:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002056:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800205a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002060:	f107 0314 	add.w	r3, r7, #20
 8002064:	4619      	mov	r1, r3
 8002066:	481c      	ldr	r0, [pc, #112]	; (80020d8 <MX_GPIO_Init+0x124>)
 8002068:	f000 fcd0 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin nSleep_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|nSleep_Pin;
 800206c:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002072:	2301      	movs	r3, #1
 8002074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002088:	f000 fcc0 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SS_Pin */
  GPIO_InitStruct.Pin = SPI2_SS_Pin;
 800208c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002092:	2301      	movs	r3, #1
 8002094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800209a:	2300      	movs	r3, #0
 800209c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_SS_GPIO_Port, &GPIO_InitStruct);
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	4619      	mov	r1, r3
 80020a4:	480b      	ldr	r0, [pc, #44]	; (80020d4 <MX_GPIO_Init+0x120>)
 80020a6:	f000 fcb1 	bl	8002a0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM_sync_Pin PWM_timer_Pin */
  GPIO_InitStruct.Pin = PWM_sync_Pin|PWM_timer_Pin;
 80020aa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80020ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b0:	2301      	movs	r3, #1
 80020b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	4619      	mov	r1, r3
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <MX_GPIO_Init+0x124>)
 80020c4:	f000 fca2 	bl	8002a0c <HAL_GPIO_Init>

}
 80020c8:	bf00      	nop
 80020ca:	3728      	adds	r7, #40	; 0x28
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	48000400 	.word	0x48000400
 80020d8:	48000800 	.word	0x48000800

080020dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e0:	b672      	cpsid	i
}
 80020e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020e4:	e7fe      	b.n	80020e4 <Error_Handler+0x8>
	...

080020e8 <MotionDI_manager_init>:
 * @brief  Initialize the MotionDI engine
 * @param  freq frequency of input data
 * @retval None
 */
void MotionDI_manager_init(float freq)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	ed87 0a01 	vstr	s0, [r7, #4]
  MotionDI_Initialize(&freq);
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	4618      	mov	r0, r3
 80020f6:	f005 f973 	bl	80073e0 <MotionDI_Initialize>

  MotionDI_getKnobs(ipKnobs);
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <MotionDI_manager_init+0x68>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f005 fcbe 	bl	8007a80 <MotionDI_getKnobs>

  ipKnobs->AccKnob.CalType = MDI_CAL_CONTINUOUS;
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <MotionDI_manager_init+0x68>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2202      	movs	r2, #2
 800210a:	711a      	strb	r2, [r3, #4]
  ipKnobs->GyrKnob.CalType = MDI_CAL_CONTINUOUS;
 800210c:	4b10      	ldr	r3, [pc, #64]	; (8002150 <MotionDI_manager_init+0x68>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2202      	movs	r2, #2
 8002112:	771a      	strb	r2, [r3, #28]

  //BSP_SENSOR_ACC_GetOrientation(ipKnobs->AccOrientation);
  //BSP_SENSOR_GYR_GetOrientation(ipKnobs->GyroOrientation);

  ipKnobs->SFKnob.output_type = MDI_ENGINE_OUTPUT_ENU;
 8002114:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <MotionDI_manager_init+0x68>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  ipKnobs->SFKnob.modx = DECIMATION;
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <MotionDI_manager_init+0x68>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  MotionDI_setKnobs(ipKnobs);
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <MotionDI_manager_init+0x68>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4618      	mov	r0, r3
 800212e:	f005 fc9d 	bl	8007a6c <MotionDI_setKnobs>

  AccCalMode = ipKnobs->AccKnob.CalType;
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <MotionDI_manager_init+0x68>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	791a      	ldrb	r2, [r3, #4]
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <MotionDI_manager_init+0x6c>)
 800213a:	701a      	strb	r2, [r3, #0]
  GyrCalMode = ipKnobs->GyrKnob.CalType;
 800213c:	4b04      	ldr	r3, [pc, #16]	; (8002150 <MotionDI_manager_init+0x68>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	7f1a      	ldrb	r2, [r3, #28]
 8002142:	4b05      	ldr	r3, [pc, #20]	; (8002158 <MotionDI_manager_init+0x70>)
 8002144:	701a      	strb	r2, [r3, #0]
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200011c0 	.word	0x200011c0
 8002154:	20001f8c 	.word	0x20001f8c
 8002158:	20001f8d 	.word	0x20001f8d

0800215c <pwm_sine>:


#define pas_deg sizeof phase_A / sizeof phase_A[0]

void pwm_sine(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af02      	add	r7, sp, #8
	if(cpt_pwm >= 10)   				//correspond to 2800us (28*100us)
 8002162:	4b49      	ldr	r3, [pc, #292]	; (8002288 <pwm_sine+0x12c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b09      	cmp	r3, #9
 8002168:	f240 8086 	bls.w	8002278 <pwm_sine+0x11c>
	{
		cpt_pwm =0;//reset
 800216c:	4b46      	ldr	r3, [pc, #280]	; (8002288 <pwm_sine+0x12c>)
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]

		//Set PWM duty_cycle A   (reset = 0x0000 )
		//fill TX buffer for SPI--------------------------------------------
		buf_SPI_TX[0] = 0x00;               					//cmd
 8002172:	4b46      	ldr	r3, [pc, #280]	; (800228c <pwm_sine+0x130>)
 8002174:	2200      	movs	r2, #0
 8002176:	701a      	strb	r2, [r3, #0]
		buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_A_DUTY <<3);  	//reg adr + cmd
 8002178:	4b44      	ldr	r3, [pc, #272]	; (800228c <pwm_sine+0x130>)
 800217a:	22c8      	movs	r2, #200	; 0xc8
 800217c:	705a      	strb	r2, [r3, #1]
		buf_SPI_TX[2] = 0x00;				//data (si read osf)
 800217e:	4b43      	ldr	r3, [pc, #268]	; (800228c <pwm_sine+0x130>)
 8002180:	2200      	movs	r2, #0
 8002182:	709a      	strb	r2, [r3, #2]
		buf_SPI_TX[3] = phase_A[cpt_deg];									//data (si read osf)
 8002184:	4b42      	ldr	r3, [pc, #264]	; (8002290 <pwm_sine+0x134>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a42      	ldr	r2, [pc, #264]	; (8002294 <pwm_sine+0x138>)
 800218a:	5cd2      	ldrb	r2, [r2, r3]
 800218c:	4b3f      	ldr	r3, [pc, #252]	; (800228c <pwm_sine+0x130>)
 800218e:	70da      	strb	r2, [r3, #3]
		//Send/Read Datas---------------------------------------------------
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8002190:	2200      	movs	r2, #0
 8002192:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002196:	4840      	ldr	r0, [pc, #256]	; (8002298 <pwm_sine+0x13c>)
 8002198:	f000 fdfa 	bl	8002d90 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 800219c:	f04f 33ff 	mov.w	r3, #4294967295
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	2304      	movs	r3, #4
 80021a4:	4a3d      	ldr	r2, [pc, #244]	; (800229c <pwm_sine+0x140>)
 80021a6:	4939      	ldr	r1, [pc, #228]	; (800228c <pwm_sine+0x130>)
 80021a8:	483d      	ldr	r0, [pc, #244]	; (80022a0 <pwm_sine+0x144>)
 80021aa:	f002 ffb6 	bl	800511a <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80021ae:	2201      	movs	r2, #1
 80021b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021b4:	4838      	ldr	r0, [pc, #224]	; (8002298 <pwm_sine+0x13c>)
 80021b6:	f000 fdeb 	bl	8002d90 <HAL_GPIO_WritePin>
		//Set PWM duty_cycle B   (reset = 0x0000 )
		//fill TX buffer for SPI--------------------------------------------
		buf_SPI_TX[0] = 0x00;               					//cmd
 80021ba:	4b34      	ldr	r3, [pc, #208]	; (800228c <pwm_sine+0x130>)
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]
		buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_B_DUTY <<3);  	//reg adr + cmd
 80021c0:	4b32      	ldr	r3, [pc, #200]	; (800228c <pwm_sine+0x130>)
 80021c2:	22d0      	movs	r2, #208	; 0xd0
 80021c4:	705a      	strb	r2, [r3, #1]
		buf_SPI_TX[2] = 0x00;				//data (si read osf)
 80021c6:	4b31      	ldr	r3, [pc, #196]	; (800228c <pwm_sine+0x130>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	709a      	strb	r2, [r3, #2]
		buf_SPI_TX[3] = phase_B[cpt_deg];									//data (si read osf)
 80021cc:	4b30      	ldr	r3, [pc, #192]	; (8002290 <pwm_sine+0x134>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a34      	ldr	r2, [pc, #208]	; (80022a4 <pwm_sine+0x148>)
 80021d2:	5cd2      	ldrb	r2, [r2, r3]
 80021d4:	4b2d      	ldr	r3, [pc, #180]	; (800228c <pwm_sine+0x130>)
 80021d6:	70da      	strb	r2, [r3, #3]
		//Send/Read Datas---------------------------------------------------
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80021d8:	2200      	movs	r2, #0
 80021da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021de:	482e      	ldr	r0, [pc, #184]	; (8002298 <pwm_sine+0x13c>)
 80021e0:	f000 fdd6 	bl	8002d90 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80021e4:	f04f 33ff 	mov.w	r3, #4294967295
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	2304      	movs	r3, #4
 80021ec:	4a2b      	ldr	r2, [pc, #172]	; (800229c <pwm_sine+0x140>)
 80021ee:	4927      	ldr	r1, [pc, #156]	; (800228c <pwm_sine+0x130>)
 80021f0:	482b      	ldr	r0, [pc, #172]	; (80022a0 <pwm_sine+0x144>)
 80021f2:	f002 ff92 	bl	800511a <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80021f6:	2201      	movs	r2, #1
 80021f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021fc:	4826      	ldr	r0, [pc, #152]	; (8002298 <pwm_sine+0x13c>)
 80021fe:	f000 fdc7 	bl	8002d90 <HAL_GPIO_WritePin>

		//Set PWM duty_cycle C   (reset = 0x0000 )
		//fill TX buffer for SPI--------------------------------------------
		buf_SPI_TX[0] = 0x00;               					//cmd
 8002202:	4b22      	ldr	r3, [pc, #136]	; (800228c <pwm_sine+0x130>)
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
		buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_C_DUTY <<3);  	//reg adr + cmd
 8002208:	4b20      	ldr	r3, [pc, #128]	; (800228c <pwm_sine+0x130>)
 800220a:	22d8      	movs	r2, #216	; 0xd8
 800220c:	705a      	strb	r2, [r3, #1]
		buf_SPI_TX[2] = 0x00;				//data (si read osf)
 800220e:	4b1f      	ldr	r3, [pc, #124]	; (800228c <pwm_sine+0x130>)
 8002210:	2200      	movs	r2, #0
 8002212:	709a      	strb	r2, [r3, #2]
		buf_SPI_TX[3] = phase_C[cpt_deg];									//data (si read osf)
 8002214:	4b1e      	ldr	r3, [pc, #120]	; (8002290 <pwm_sine+0x134>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a23      	ldr	r2, [pc, #140]	; (80022a8 <pwm_sine+0x14c>)
 800221a:	5cd2      	ldrb	r2, [r2, r3]
 800221c:	4b1b      	ldr	r3, [pc, #108]	; (800228c <pwm_sine+0x130>)
 800221e:	70da      	strb	r2, [r3, #3]
		//Send/Read Datas---------------------------------------------------
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8002220:	2200      	movs	r2, #0
 8002222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002226:	481c      	ldr	r0, [pc, #112]	; (8002298 <pwm_sine+0x13c>)
 8002228:	f000 fdb2 	bl	8002d90 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 800222c:	f04f 33ff 	mov.w	r3, #4294967295
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	2304      	movs	r3, #4
 8002234:	4a19      	ldr	r2, [pc, #100]	; (800229c <pwm_sine+0x140>)
 8002236:	4915      	ldr	r1, [pc, #84]	; (800228c <pwm_sine+0x130>)
 8002238:	4819      	ldr	r0, [pc, #100]	; (80022a0 <pwm_sine+0x144>)
 800223a:	f002 ff6e 	bl	800511a <HAL_SPI_TransmitReceive>
		HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 800223e:	2201      	movs	r2, #1
 8002240:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002244:	4814      	ldr	r0, [pc, #80]	; (8002298 <pwm_sine+0x13c>)
 8002246:	f000 fda3 	bl	8002d90 <HAL_GPIO_WritePin>


		//if button not pressed: clockwise else counter clockwise
		if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1)
 800224a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800224e:	4817      	ldr	r0, [pc, #92]	; (80022ac <pwm_sine+0x150>)
 8002250:	f000 fd86 	bl	8002d60 <HAL_GPIO_ReadPin>
 8002254:	4603      	mov	r3, r0
 8002256:	2b01      	cmp	r3, #1
 8002258:	d113      	bne.n	8002282 <pwm_sine+0x126>
		{
			//clockwise direction
			if(cpt_deg>=pas_deg-1)			//360°
 800225a:	4b0d      	ldr	r3, [pc, #52]	; (8002290 <pwm_sine+0x134>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 8002262:	d903      	bls.n	800226c <pwm_sine+0x110>
			{
				cpt_deg =0;					//reset cpt °
 8002264:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <pwm_sine+0x134>)
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
	else
	{
		cpt_pwm++;
	}
	//HAL_GPIO_TogglePin(PWM_timer_GPIO_Port, PWM_timer_Pin);
}
 800226a:	e00a      	b.n	8002282 <pwm_sine+0x126>
				cpt_deg++;					//+1°
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <pwm_sine+0x134>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	3301      	adds	r3, #1
 8002272:	4a07      	ldr	r2, [pc, #28]	; (8002290 <pwm_sine+0x134>)
 8002274:	6013      	str	r3, [r2, #0]
}
 8002276:	e004      	b.n	8002282 <pwm_sine+0x126>
		cpt_pwm++;
 8002278:	4b03      	ldr	r3, [pc, #12]	; (8002288 <pwm_sine+0x12c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	3301      	adds	r3, #1
 800227e:	4a02      	ldr	r2, [pc, #8]	; (8002288 <pwm_sine+0x12c>)
 8002280:	6013      	str	r3, [r2, #0]
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20001fc4 	.word	0x20001fc4
 800228c:	20001f4c 	.word	0x20001f4c
 8002290:	20001fc8 	.word	0x20001fc8
 8002294:	200011c4 	.word	0x200011c4
 8002298:	48000400 	.word	0x48000400
 800229c:	20001f60 	.word	0x20001f60
 80022a0:	20001dcc 	.word	0x20001dcc
 80022a4:	2000132c 	.word	0x2000132c
 80022a8:	20001494 	.word	0x20001494
 80022ac:	48000800 	.word	0x48000800

080022b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b6:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <HAL_MspInit+0x44>)
 80022b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ba:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <HAL_MspInit+0x44>)
 80022bc:	f043 0301 	orr.w	r3, r3, #1
 80022c0:	6613      	str	r3, [r2, #96]	; 0x60
 80022c2:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <HAL_MspInit+0x44>)
 80022c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	607b      	str	r3, [r7, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022ce:	4b09      	ldr	r3, [pc, #36]	; (80022f4 <HAL_MspInit+0x44>)
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	4a08      	ldr	r2, [pc, #32]	; (80022f4 <HAL_MspInit+0x44>)
 80022d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d8:	6593      	str	r3, [r2, #88]	; 0x58
 80022da:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <HAL_MspInit+0x44>)
 80022dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40021000 	.word	0x40021000

080022f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b0ac      	sub	sp, #176	; 0xb0
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2288      	movs	r2, #136	; 0x88
 8002316:	2100      	movs	r1, #0
 8002318:	4618      	mov	r0, r3
 800231a:	f005 fc21 	bl	8007b60 <memset>
  if(hi2c->Instance==I2C1)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a21      	ldr	r2, [pc, #132]	; (80023a8 <HAL_I2C_MspInit+0xb0>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d13b      	bne.n	80023a0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002328:	2340      	movs	r3, #64	; 0x40
 800232a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800232c:	2300      	movs	r3, #0
 800232e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	4618      	mov	r0, r3
 8002336:	f002 f991 	bl	800465c <HAL_RCCEx_PeriphCLKConfig>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002340:	f7ff fecc 	bl	80020dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002344:	4b19      	ldr	r3, [pc, #100]	; (80023ac <HAL_I2C_MspInit+0xb4>)
 8002346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002348:	4a18      	ldr	r2, [pc, #96]	; (80023ac <HAL_I2C_MspInit+0xb4>)
 800234a:	f043 0302 	orr.w	r3, r3, #2
 800234e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002350:	4b16      	ldr	r3, [pc, #88]	; (80023ac <HAL_I2C_MspInit+0xb4>)
 8002352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800235c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002360:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002364:	2312      	movs	r3, #18
 8002366:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236a:	2300      	movs	r3, #0
 800236c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002370:	2303      	movs	r3, #3
 8002372:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002376:	2304      	movs	r3, #4
 8002378:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800237c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002380:	4619      	mov	r1, r3
 8002382:	480b      	ldr	r0, [pc, #44]	; (80023b0 <HAL_I2C_MspInit+0xb8>)
 8002384:	f000 fb42 	bl	8002a0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002388:	4b08      	ldr	r3, [pc, #32]	; (80023ac <HAL_I2C_MspInit+0xb4>)
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	4a07      	ldr	r2, [pc, #28]	; (80023ac <HAL_I2C_MspInit+0xb4>)
 800238e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002392:	6593      	str	r3, [r2, #88]	; 0x58
 8002394:	4b05      	ldr	r3, [pc, #20]	; (80023ac <HAL_I2C_MspInit+0xb4>)
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80023a0:	bf00      	nop
 80023a2:	37b0      	adds	r7, #176	; 0xb0
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40005400 	.word	0x40005400
 80023ac:	40021000 	.word	0x40021000
 80023b0:	48000400 	.word	0x48000400

080023b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08a      	sub	sp, #40	; 0x28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
 80023ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a25      	ldr	r2, [pc, #148]	; (8002468 <HAL_SPI_MspInit+0xb4>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d144      	bne.n	8002460 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80023d6:	4b25      	ldr	r3, [pc, #148]	; (800246c <HAL_SPI_MspInit+0xb8>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023da:	4a24      	ldr	r2, [pc, #144]	; (800246c <HAL_SPI_MspInit+0xb8>)
 80023dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e0:	6593      	str	r3, [r2, #88]	; 0x58
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <HAL_SPI_MspInit+0xb8>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ea:	613b      	str	r3, [r7, #16]
 80023ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ee:	4b1f      	ldr	r3, [pc, #124]	; (800246c <HAL_SPI_MspInit+0xb8>)
 80023f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f2:	4a1e      	ldr	r2, [pc, #120]	; (800246c <HAL_SPI_MspInit+0xb8>)
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023fa:	4b1c      	ldr	r3, [pc, #112]	; (800246c <HAL_SPI_MspInit+0xb8>)
 80023fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002406:	4b19      	ldr	r3, [pc, #100]	; (800246c <HAL_SPI_MspInit+0xb8>)
 8002408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800240a:	4a18      	ldr	r2, [pc, #96]	; (800246c <HAL_SPI_MspInit+0xb8>)
 800240c:	f043 0302 	orr.w	r3, r3, #2
 8002410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002412:	4b16      	ldr	r3, [pc, #88]	; (800246c <HAL_SPI_MspInit+0xb8>)
 8002414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800241e:	230c      	movs	r3, #12
 8002420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800242a:	2303      	movs	r3, #3
 800242c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800242e:	2305      	movs	r3, #5
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002432:	f107 0314 	add.w	r3, r7, #20
 8002436:	4619      	mov	r1, r3
 8002438:	480d      	ldr	r0, [pc, #52]	; (8002470 <HAL_SPI_MspInit+0xbc>)
 800243a:	f000 fae7 	bl	8002a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800243e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244c:	2303      	movs	r3, #3
 800244e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002450:	2305      	movs	r3, #5
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	4619      	mov	r1, r3
 800245a:	4806      	ldr	r0, [pc, #24]	; (8002474 <HAL_SPI_MspInit+0xc0>)
 800245c:	f000 fad6 	bl	8002a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002460:	bf00      	nop
 8002462:	3728      	adds	r7, #40	; 0x28
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40003800 	.word	0x40003800
 800246c:	40021000 	.word	0x40021000
 8002470:	48000800 	.word	0x48000800
 8002474:	48000400 	.word	0x48000400

08002478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002488:	d114      	bne.n	80024b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800248a:	4b19      	ldr	r3, [pc, #100]	; (80024f0 <HAL_TIM_Base_MspInit+0x78>)
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	4a18      	ldr	r2, [pc, #96]	; (80024f0 <HAL_TIM_Base_MspInit+0x78>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6593      	str	r3, [r2, #88]	; 0x58
 8002496:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <HAL_TIM_Base_MspInit+0x78>)
 8002498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2100      	movs	r1, #0
 80024a6:	201c      	movs	r0, #28
 80024a8:	f000 fa79 	bl	800299e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024ac:	201c      	movs	r0, #28
 80024ae:	f000 fa92 	bl	80029d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024b2:	e018      	b.n	80024e6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <HAL_TIM_Base_MspInit+0x7c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d113      	bne.n	80024e6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024be:	4b0c      	ldr	r3, [pc, #48]	; (80024f0 <HAL_TIM_Base_MspInit+0x78>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c2:	4a0b      	ldr	r2, [pc, #44]	; (80024f0 <HAL_TIM_Base_MspInit+0x78>)
 80024c4:	f043 0302 	orr.w	r3, r3, #2
 80024c8:	6593      	str	r3, [r2, #88]	; 0x58
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <HAL_TIM_Base_MspInit+0x78>)
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	f003 0302 	and.w	r3, r3, #2
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	201d      	movs	r0, #29
 80024dc:	f000 fa5f 	bl	800299e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024e0:	201d      	movs	r0, #29
 80024e2:	f000 fa78 	bl	80029d6 <HAL_NVIC_EnableIRQ>
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
 80024f4:	40000400 	.word	0x40000400

080024f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b0ac      	sub	sp, #176	; 0xb0
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002510:	f107 0314 	add.w	r3, r7, #20
 8002514:	2288      	movs	r2, #136	; 0x88
 8002516:	2100      	movs	r1, #0
 8002518:	4618      	mov	r0, r3
 800251a:	f005 fb21 	bl	8007b60 <memset>
  if(huart->Instance==USART2)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a21      	ldr	r2, [pc, #132]	; (80025a8 <HAL_UART_MspInit+0xb0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d13b      	bne.n	80025a0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002528:	2302      	movs	r3, #2
 800252a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800252c:	2300      	movs	r3, #0
 800252e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002530:	f107 0314 	add.w	r3, r7, #20
 8002534:	4618      	mov	r0, r3
 8002536:	f002 f891 	bl	800465c <HAL_RCCEx_PeriphCLKConfig>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002540:	f7ff fdcc 	bl	80020dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002544:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_UART_MspInit+0xb4>)
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	4a18      	ldr	r2, [pc, #96]	; (80025ac <HAL_UART_MspInit+0xb4>)
 800254a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800254e:	6593      	str	r3, [r2, #88]	; 0x58
 8002550:	4b16      	ldr	r3, [pc, #88]	; (80025ac <HAL_UART_MspInit+0xb4>)
 8002552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002554:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800255c:	4b13      	ldr	r3, [pc, #76]	; (80025ac <HAL_UART_MspInit+0xb4>)
 800255e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002560:	4a12      	ldr	r2, [pc, #72]	; (80025ac <HAL_UART_MspInit+0xb4>)
 8002562:	f043 0301 	orr.w	r3, r3, #1
 8002566:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002568:	4b10      	ldr	r3, [pc, #64]	; (80025ac <HAL_UART_MspInit+0xb4>)
 800256a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002574:	230c      	movs	r3, #12
 8002576:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800257a:	2302      	movs	r3, #2
 800257c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002580:	2300      	movs	r3, #0
 8002582:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002586:	2303      	movs	r3, #3
 8002588:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800258c:	2307      	movs	r3, #7
 800258e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002592:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002596:	4619      	mov	r1, r3
 8002598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800259c:	f000 fa36 	bl	8002a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80025a0:	bf00      	nop
 80025a2:	37b0      	adds	r7, #176	; 0xb0
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40004400 	.word	0x40004400
 80025ac:	40021000 	.word	0x40021000

080025b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025b4:	e7fe      	b.n	80025b4 <NMI_Handler+0x4>

080025b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025ba:	e7fe      	b.n	80025ba <HardFault_Handler+0x4>

080025bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025c0:	e7fe      	b.n	80025c0 <MemManage_Handler+0x4>

080025c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025c6:	e7fe      	b.n	80025c6 <BusFault_Handler+0x4>

080025c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <UsageFault_Handler+0x4>

080025ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025ea:	b480      	push	{r7}
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025fc:	f000 f8b0 	bl	8002760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002600:	bf00      	nop
 8002602:	bd80      	pop	{r7, pc}

08002604 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002608:	4802      	ldr	r0, [pc, #8]	; (8002614 <TIM2_IRQHandler+0x10>)
 800260a:	f003 f9c5 	bl	8005998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800260e:	bf00      	nop
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20001e30 	.word	0x20001e30

08002618 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800261c:	4803      	ldr	r0, [pc, #12]	; (800262c <TIM3_IRQHandler+0x14>)
 800261e:	f003 f9bb 	bl	8005998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  pwm_sine();
 8002622:	f7ff fd9b 	bl	800215c <pwm_sine>
  /* USER CODE END TIM3_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	20001e7c 	.word	0x20001e7c

08002630 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002634:	4b06      	ldr	r3, [pc, #24]	; (8002650 <SystemInit+0x20>)
 8002636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800263a:	4a05      	ldr	r2, [pc, #20]	; (8002650 <SystemInit+0x20>)
 800263c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002640:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002644:	bf00      	nop
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
 800264e:	bf00      	nop
 8002650:	e000ed00 	.word	0xe000ed00

08002654 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
    ldr   sp, =_estack    /* Set stack pointer */
 8002654:	f8df d034 	ldr.w	sp, [pc, #52]	; 800268c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002658:	f7ff ffea 	bl	8002630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800265c:	480c      	ldr	r0, [pc, #48]	; (8002690 <LoopForever+0x6>)
  ldr r1, =_edata
 800265e:	490d      	ldr	r1, [pc, #52]	; (8002694 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002660:	4a0d      	ldr	r2, [pc, #52]	; (8002698 <LoopForever+0xe>)
  movs r3, #0
 8002662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002664:	e002      	b.n	800266c <LoopCopyDataInit>

08002666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800266a:	3304      	adds	r3, #4

0800266c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800266c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800266e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002670:	d3f9      	bcc.n	8002666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002672:	4a0a      	ldr	r2, [pc, #40]	; (800269c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002674:	4c0a      	ldr	r4, [pc, #40]	; (80026a0 <LoopForever+0x16>)
  movs r3, #0
 8002676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002678:	e001      	b.n	800267e <LoopFillZerobss>

0800267a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800267a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800267c:	3204      	adds	r2, #4

0800267e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800267e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002680:	d3fb      	bcc.n	800267a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002682:	f005 fa49 	bl	8007b18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002686:	f7ff fabb 	bl	8001c00 <main>

0800268a <LoopForever>:

LoopForever:
    b LoopForever
 800268a:	e7fe      	b.n	800268a <LoopForever>
    ldr   sp, =_estack    /* Set stack pointer */
 800268c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002694:	20001608 	.word	0x20001608
  ldr r2, =_sidata
 8002698:	08007be0 	.word	0x08007be0
  ldr r2, =_sbss
 800269c:	20001608 	.word	0x20001608
  ldr r4, =_ebss
 80026a0:	20002440 	.word	0x20002440

080026a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80026a4:	e7fe      	b.n	80026a4 <ADC1_2_IRQHandler>
	...

080026a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026b2:	4b0c      	ldr	r3, [pc, #48]	; (80026e4 <HAL_Init+0x3c>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a0b      	ldr	r2, [pc, #44]	; (80026e4 <HAL_Init+0x3c>)
 80026b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026be:	2003      	movs	r0, #3
 80026c0:	f000 f962 	bl	8002988 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026c4:	2000      	movs	r0, #0
 80026c6:	f000 f80f 	bl	80026e8 <HAL_InitTick>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	71fb      	strb	r3, [r7, #7]
 80026d4:	e001      	b.n	80026da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026d6:	f7ff fdeb 	bl	80022b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026da:	79fb      	ldrb	r3, [r7, #7]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40022000 	.word	0x40022000

080026e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80026f4:	4b17      	ldr	r3, [pc, #92]	; (8002754 <HAL_InitTick+0x6c>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d023      	beq.n	8002744 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80026fc:	4b16      	ldr	r3, [pc, #88]	; (8002758 <HAL_InitTick+0x70>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b14      	ldr	r3, [pc, #80]	; (8002754 <HAL_InitTick+0x6c>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	4619      	mov	r1, r3
 8002706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800270a:	fbb3 f3f1 	udiv	r3, r3, r1
 800270e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f96d 	bl	80029f2 <HAL_SYSTICK_Config>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10f      	bne.n	800273e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b0f      	cmp	r3, #15
 8002722:	d809      	bhi.n	8002738 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002724:	2200      	movs	r2, #0
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	f04f 30ff 	mov.w	r0, #4294967295
 800272c:	f000 f937 	bl	800299e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002730:	4a0a      	ldr	r2, [pc, #40]	; (800275c <HAL_InitTick+0x74>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e007      	b.n	8002748 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	73fb      	strb	r3, [r7, #15]
 800273c:	e004      	b.n	8002748 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	73fb      	strb	r3, [r7, #15]
 8002742:	e001      	b.n	8002748 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002748:	7bfb      	ldrb	r3, [r7, #15]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20001604 	.word	0x20001604
 8002758:	200015fc 	.word	0x200015fc
 800275c:	20001600 	.word	0x20001600

08002760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_IncTick+0x20>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_IncTick+0x24>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4413      	add	r3, r2
 8002770:	4a04      	ldr	r2, [pc, #16]	; (8002784 <HAL_IncTick+0x24>)
 8002772:	6013      	str	r3, [r2, #0]
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20001604 	.word	0x20001604
 8002784:	20001fcc 	.word	0x20001fcc

08002788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return uwTick;
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <HAL_GetTick+0x14>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20001fcc 	.word	0x20001fcc

080027a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027a8:	f7ff ffee 	bl	8002788 <HAL_GetTick>
 80027ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b8:	d005      	beq.n	80027c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80027ba:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <HAL_Delay+0x44>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4413      	add	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027c6:	bf00      	nop
 80027c8:	f7ff ffde 	bl	8002788 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d8f7      	bhi.n	80027c8 <HAL_Delay+0x28>
  {
  }
}
 80027d8:	bf00      	nop
 80027da:	bf00      	nop
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20001604 	.word	0x20001604

080027e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f003 0307 	and.w	r3, r3, #7
 80027f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027f8:	4b0c      	ldr	r3, [pc, #48]	; (800282c <__NVIC_SetPriorityGrouping+0x44>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002804:	4013      	ands	r3, r2
 8002806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002810:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002818:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800281a:	4a04      	ldr	r2, [pc, #16]	; (800282c <__NVIC_SetPriorityGrouping+0x44>)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	60d3      	str	r3, [r2, #12]
}
 8002820:	bf00      	nop
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002834:	4b04      	ldr	r3, [pc, #16]	; (8002848 <__NVIC_GetPriorityGrouping+0x18>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	0a1b      	lsrs	r3, r3, #8
 800283a:	f003 0307 	and.w	r3, r3, #7
}
 800283e:	4618      	mov	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr
 8002848:	e000ed00 	.word	0xe000ed00

0800284c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	4603      	mov	r3, r0
 8002854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285a:	2b00      	cmp	r3, #0
 800285c:	db0b      	blt.n	8002876 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800285e:	79fb      	ldrb	r3, [r7, #7]
 8002860:	f003 021f 	and.w	r2, r3, #31
 8002864:	4907      	ldr	r1, [pc, #28]	; (8002884 <__NVIC_EnableIRQ+0x38>)
 8002866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800286a:	095b      	lsrs	r3, r3, #5
 800286c:	2001      	movs	r0, #1
 800286e:	fa00 f202 	lsl.w	r2, r0, r2
 8002872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	e000e100 	.word	0xe000e100

08002888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	6039      	str	r1, [r7, #0]
 8002892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002898:	2b00      	cmp	r3, #0
 800289a:	db0a      	blt.n	80028b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	490c      	ldr	r1, [pc, #48]	; (80028d4 <__NVIC_SetPriority+0x4c>)
 80028a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a6:	0112      	lsls	r2, r2, #4
 80028a8:	b2d2      	uxtb	r2, r2
 80028aa:	440b      	add	r3, r1
 80028ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b0:	e00a      	b.n	80028c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	4908      	ldr	r1, [pc, #32]	; (80028d8 <__NVIC_SetPriority+0x50>)
 80028b8:	79fb      	ldrb	r3, [r7, #7]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	3b04      	subs	r3, #4
 80028c0:	0112      	lsls	r2, r2, #4
 80028c2:	b2d2      	uxtb	r2, r2
 80028c4:	440b      	add	r3, r1
 80028c6:	761a      	strb	r2, [r3, #24]
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	e000e100 	.word	0xe000e100
 80028d8:	e000ed00 	.word	0xe000ed00

080028dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028dc:	b480      	push	{r7}
 80028de:	b089      	sub	sp, #36	; 0x24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f1c3 0307 	rsb	r3, r3, #7
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	bf28      	it	cs
 80028fa:	2304      	movcs	r3, #4
 80028fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	3304      	adds	r3, #4
 8002902:	2b06      	cmp	r3, #6
 8002904:	d902      	bls.n	800290c <NVIC_EncodePriority+0x30>
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3b03      	subs	r3, #3
 800290a:	e000      	b.n	800290e <NVIC_EncodePriority+0x32>
 800290c:	2300      	movs	r3, #0
 800290e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	f04f 32ff 	mov.w	r2, #4294967295
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43da      	mvns	r2, r3
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	401a      	ands	r2, r3
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002924:	f04f 31ff 	mov.w	r1, #4294967295
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	fa01 f303 	lsl.w	r3, r1, r3
 800292e:	43d9      	mvns	r1, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	4313      	orrs	r3, r2
         );
}
 8002936:	4618      	mov	r0, r3
 8002938:	3724      	adds	r7, #36	; 0x24
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3b01      	subs	r3, #1
 8002950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002954:	d301      	bcc.n	800295a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002956:	2301      	movs	r3, #1
 8002958:	e00f      	b.n	800297a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800295a:	4a0a      	ldr	r2, [pc, #40]	; (8002984 <SysTick_Config+0x40>)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3b01      	subs	r3, #1
 8002960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002962:	210f      	movs	r1, #15
 8002964:	f04f 30ff 	mov.w	r0, #4294967295
 8002968:	f7ff ff8e 	bl	8002888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <SysTick_Config+0x40>)
 800296e:	2200      	movs	r2, #0
 8002970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002972:	4b04      	ldr	r3, [pc, #16]	; (8002984 <SysTick_Config+0x40>)
 8002974:	2207      	movs	r2, #7
 8002976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	e000e010 	.word	0xe000e010

08002988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7ff ff29 	bl	80027e8 <__NVIC_SetPriorityGrouping>
}
 8002996:	bf00      	nop
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}

0800299e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b086      	sub	sp, #24
 80029a2:	af00      	add	r7, sp, #0
 80029a4:	4603      	mov	r3, r0
 80029a6:	60b9      	str	r1, [r7, #8]
 80029a8:	607a      	str	r2, [r7, #4]
 80029aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029b0:	f7ff ff3e 	bl	8002830 <__NVIC_GetPriorityGrouping>
 80029b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68b9      	ldr	r1, [r7, #8]
 80029ba:	6978      	ldr	r0, [r7, #20]
 80029bc:	f7ff ff8e 	bl	80028dc <NVIC_EncodePriority>
 80029c0:	4602      	mov	r2, r0
 80029c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff5d 	bl	8002888 <__NVIC_SetPriority>
}
 80029ce:	bf00      	nop
 80029d0:	3718      	adds	r7, #24
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}

080029d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d6:	b580      	push	{r7, lr}
 80029d8:	b082      	sub	sp, #8
 80029da:	af00      	add	r7, sp, #0
 80029dc:	4603      	mov	r3, r0
 80029de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff ff31 	bl	800284c <__NVIC_EnableIRQ>
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff ffa2 	bl	8002944 <SysTick_Config>
 8002a00:	4603      	mov	r3, r0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
	...

08002a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a1a:	e17f      	b.n	8002d1c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	2101      	movs	r1, #1
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	fa01 f303 	lsl.w	r3, r1, r3
 8002a28:	4013      	ands	r3, r2
 8002a2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	f000 8171 	beq.w	8002d16 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d005      	beq.n	8002a4c <HAL_GPIO_Init+0x40>
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f003 0303 	and.w	r3, r3, #3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d130      	bne.n	8002aae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	2203      	movs	r2, #3
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	43db      	mvns	r3, r3
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4013      	ands	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	68da      	ldr	r2, [r3, #12]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a82:	2201      	movs	r2, #1
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43db      	mvns	r3, r3
 8002a8c:	693a      	ldr	r2, [r7, #16]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	091b      	lsrs	r3, r3, #4
 8002a98:	f003 0201 	and.w	r2, r3, #1
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d118      	bne.n	8002aec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	08db      	lsrs	r3, r3, #3
 8002ad6:	f003 0201 	and.w	r2, r3, #1
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d017      	beq.n	8002b28 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	2203      	movs	r2, #3
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	43db      	mvns	r3, r3
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	689a      	ldr	r2, [r3, #8]
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0303 	and.w	r3, r3, #3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d123      	bne.n	8002b7c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	08da      	lsrs	r2, r3, #3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3208      	adds	r2, #8
 8002b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f003 0307 	and.w	r3, r3, #7
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	220f      	movs	r2, #15
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	43db      	mvns	r3, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4013      	ands	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	691a      	ldr	r2, [r3, #16]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	f003 0307 	and.w	r3, r3, #7
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	08da      	lsrs	r2, r3, #3
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	3208      	adds	r2, #8
 8002b76:	6939      	ldr	r1, [r7, #16]
 8002b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	2203      	movs	r2, #3
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4013      	ands	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 0203 	and.w	r2, r3, #3
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80ac 	beq.w	8002d16 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bbe:	4b5f      	ldr	r3, [pc, #380]	; (8002d3c <HAL_GPIO_Init+0x330>)
 8002bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc2:	4a5e      	ldr	r2, [pc, #376]	; (8002d3c <HAL_GPIO_Init+0x330>)
 8002bc4:	f043 0301 	orr.w	r3, r3, #1
 8002bc8:	6613      	str	r3, [r2, #96]	; 0x60
 8002bca:	4b5c      	ldr	r3, [pc, #368]	; (8002d3c <HAL_GPIO_Init+0x330>)
 8002bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bd6:	4a5a      	ldr	r2, [pc, #360]	; (8002d40 <HAL_GPIO_Init+0x334>)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	089b      	lsrs	r3, r3, #2
 8002bdc:	3302      	adds	r3, #2
 8002bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	220f      	movs	r2, #15
 8002bee:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c00:	d025      	beq.n	8002c4e <HAL_GPIO_Init+0x242>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a4f      	ldr	r2, [pc, #316]	; (8002d44 <HAL_GPIO_Init+0x338>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01f      	beq.n	8002c4a <HAL_GPIO_Init+0x23e>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a4e      	ldr	r2, [pc, #312]	; (8002d48 <HAL_GPIO_Init+0x33c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d019      	beq.n	8002c46 <HAL_GPIO_Init+0x23a>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a4d      	ldr	r2, [pc, #308]	; (8002d4c <HAL_GPIO_Init+0x340>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d013      	beq.n	8002c42 <HAL_GPIO_Init+0x236>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a4c      	ldr	r2, [pc, #304]	; (8002d50 <HAL_GPIO_Init+0x344>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d00d      	beq.n	8002c3e <HAL_GPIO_Init+0x232>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a4b      	ldr	r2, [pc, #300]	; (8002d54 <HAL_GPIO_Init+0x348>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d007      	beq.n	8002c3a <HAL_GPIO_Init+0x22e>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4a4a      	ldr	r2, [pc, #296]	; (8002d58 <HAL_GPIO_Init+0x34c>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d101      	bne.n	8002c36 <HAL_GPIO_Init+0x22a>
 8002c32:	2306      	movs	r3, #6
 8002c34:	e00c      	b.n	8002c50 <HAL_GPIO_Init+0x244>
 8002c36:	2307      	movs	r3, #7
 8002c38:	e00a      	b.n	8002c50 <HAL_GPIO_Init+0x244>
 8002c3a:	2305      	movs	r3, #5
 8002c3c:	e008      	b.n	8002c50 <HAL_GPIO_Init+0x244>
 8002c3e:	2304      	movs	r3, #4
 8002c40:	e006      	b.n	8002c50 <HAL_GPIO_Init+0x244>
 8002c42:	2303      	movs	r3, #3
 8002c44:	e004      	b.n	8002c50 <HAL_GPIO_Init+0x244>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e002      	b.n	8002c50 <HAL_GPIO_Init+0x244>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_GPIO_Init+0x244>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	f002 0203 	and.w	r2, r2, #3
 8002c56:	0092      	lsls	r2, r2, #2
 8002c58:	4093      	lsls	r3, r2
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c60:	4937      	ldr	r1, [pc, #220]	; (8002d40 <HAL_GPIO_Init+0x334>)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	3302      	adds	r3, #2
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c6e:	4b3b      	ldr	r3, [pc, #236]	; (8002d5c <HAL_GPIO_Init+0x350>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c92:	4a32      	ldr	r2, [pc, #200]	; (8002d5c <HAL_GPIO_Init+0x350>)
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c98:	4b30      	ldr	r3, [pc, #192]	; (8002d5c <HAL_GPIO_Init+0x350>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002cbc:	4a27      	ldr	r2, [pc, #156]	; (8002d5c <HAL_GPIO_Init+0x350>)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002cc2:	4b26      	ldr	r3, [pc, #152]	; (8002d5c <HAL_GPIO_Init+0x350>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ce6:	4a1d      	ldr	r2, [pc, #116]	; (8002d5c <HAL_GPIO_Init+0x350>)
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002cec:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <HAL_GPIO_Init+0x350>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d003      	beq.n	8002d10 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d10:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <HAL_GPIO_Init+0x350>)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	fa22 f303 	lsr.w	r3, r2, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f47f ae78 	bne.w	8002a1c <HAL_GPIO_Init+0x10>
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	371c      	adds	r7, #28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40010000 	.word	0x40010000
 8002d44:	48000400 	.word	0x48000400
 8002d48:	48000800 	.word	0x48000800
 8002d4c:	48000c00 	.word	0x48000c00
 8002d50:	48001000 	.word	0x48001000
 8002d54:	48001400 	.word	0x48001400
 8002d58:	48001800 	.word	0x48001800
 8002d5c:	40010400 	.word	0x40010400

08002d60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	887b      	ldrh	r3, [r7, #2]
 8002d72:	4013      	ands	r3, r2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d002      	beq.n	8002d7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	73fb      	strb	r3, [r7, #15]
 8002d7c:	e001      	b.n	8002d82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	807b      	strh	r3, [r7, #2]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002da0:	787b      	ldrb	r3, [r7, #1]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002da6:	887a      	ldrh	r2, [r7, #2]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dac:	e002      	b.n	8002db4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dae:	887a      	ldrh	r2, [r7, #2]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002db4:	bf00      	nop
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e081      	b.n	8002ed6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d106      	bne.n	8002dec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7ff fa86 	bl	80022f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2224      	movs	r2, #36	; 0x24
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0201 	bic.w	r2, r2, #1
 8002e02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e10:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e20:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d107      	bne.n	8002e3a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689a      	ldr	r2, [r3, #8]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e36:	609a      	str	r2, [r3, #8]
 8002e38:	e006      	b.n	8002e48 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e46:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d104      	bne.n	8002e5a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e58:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	6812      	ldr	r2, [r2, #0]
 8002e64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e6c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e7c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691a      	ldr	r2, [r3, #16]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	69d9      	ldr	r1, [r3, #28]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a1a      	ldr	r2, [r3, #32]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2220      	movs	r2, #32
 8002ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
	...

08002ee0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	4608      	mov	r0, r1
 8002eea:	4611      	mov	r1, r2
 8002eec:	461a      	mov	r2, r3
 8002eee:	4603      	mov	r3, r0
 8002ef0:	817b      	strh	r3, [r7, #10]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	813b      	strh	r3, [r7, #8]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b20      	cmp	r3, #32
 8002f04:	f040 80f9 	bne.w	80030fa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f08:	6a3b      	ldr	r3, [r7, #32]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <HAL_I2C_Mem_Write+0x34>
 8002f0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d105      	bne.n	8002f20 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f1a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0ed      	b.n	80030fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d101      	bne.n	8002f2e <HAL_I2C_Mem_Write+0x4e>
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	e0e6      	b.n	80030fc <HAL_I2C_Mem_Write+0x21c>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f36:	f7ff fc27 	bl	8002788 <HAL_GetTick>
 8002f3a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	2319      	movs	r3, #25
 8002f42:	2201      	movs	r2, #1
 8002f44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 fac3 	bl	80034d4 <I2C_WaitOnFlagUntilTimeout>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0d1      	b.n	80030fc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2221      	movs	r2, #33	; 0x21
 8002f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2240      	movs	r2, #64	; 0x40
 8002f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6a3a      	ldr	r2, [r7, #32]
 8002f72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f80:	88f8      	ldrh	r0, [r7, #6]
 8002f82:	893a      	ldrh	r2, [r7, #8]
 8002f84:	8979      	ldrh	r1, [r7, #10]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	9301      	str	r3, [sp, #4]
 8002f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	4603      	mov	r3, r0
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f000 f9d3 	bl	800333c <I2C_RequestMemoryWrite>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e0a9      	b.n	80030fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2bff      	cmp	r3, #255	; 0xff
 8002fb0:	d90e      	bls.n	8002fd0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	22ff      	movs	r2, #255	; 0xff
 8002fb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	8979      	ldrh	r1, [r7, #10]
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f000 fc2b 	bl	8003824 <I2C_TransferConfig>
 8002fce:	e00f      	b.n	8002ff0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	8979      	ldrh	r1, [r7, #10]
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f000 fc1a 	bl	8003824 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 faad 	bl	8003554 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e07b      	b.n	80030fc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	781a      	ldrb	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	1c5a      	adds	r2, r3, #1
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301e:	b29b      	uxth	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b29a      	uxth	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302c:	3b01      	subs	r3, #1
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003038:	b29b      	uxth	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d034      	beq.n	80030a8 <HAL_I2C_Mem_Write+0x1c8>
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003042:	2b00      	cmp	r3, #0
 8003044:	d130      	bne.n	80030a8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800304c:	2200      	movs	r2, #0
 800304e:	2180      	movs	r1, #128	; 0x80
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fa3f 	bl	80034d4 <I2C_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e04d      	b.n	80030fc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003064:	b29b      	uxth	r3, r3
 8003066:	2bff      	cmp	r3, #255	; 0xff
 8003068:	d90e      	bls.n	8003088 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	22ff      	movs	r2, #255	; 0xff
 800306e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003074:	b2da      	uxtb	r2, r3
 8003076:	8979      	ldrh	r1, [r7, #10]
 8003078:	2300      	movs	r3, #0
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 fbcf 	bl	8003824 <I2C_TransferConfig>
 8003086:	e00f      	b.n	80030a8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308c:	b29a      	uxth	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003096:	b2da      	uxtb	r2, r3
 8003098:	8979      	ldrh	r1, [r7, #10]
 800309a:	2300      	movs	r3, #0
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 fbbe 	bl	8003824 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d19e      	bne.n	8002ff0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030b6:	68f8      	ldr	r0, [r7, #12]
 80030b8:	f000 fa8c 	bl	80035d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d001      	beq.n	80030c6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e01a      	b.n	80030fc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2220      	movs	r2, #32
 80030cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	6859      	ldr	r1, [r3, #4]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_I2C_Mem_Write+0x224>)
 80030da:	400b      	ands	r3, r1
 80030dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030f6:	2300      	movs	r3, #0
 80030f8:	e000      	b.n	80030fc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
  }
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	fe00e800 	.word	0xfe00e800

08003108 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b088      	sub	sp, #32
 800310c:	af02      	add	r7, sp, #8
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	4608      	mov	r0, r1
 8003112:	4611      	mov	r1, r2
 8003114:	461a      	mov	r2, r3
 8003116:	4603      	mov	r3, r0
 8003118:	817b      	strh	r3, [r7, #10]
 800311a:	460b      	mov	r3, r1
 800311c:	813b      	strh	r3, [r7, #8]
 800311e:	4613      	mov	r3, r2
 8003120:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b20      	cmp	r3, #32
 800312c:	f040 80fd 	bne.w	800332a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <HAL_I2C_Mem_Read+0x34>
 8003136:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003138:	2b00      	cmp	r3, #0
 800313a:	d105      	bne.n	8003148 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003142:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0f1      	b.n	800332c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_I2C_Mem_Read+0x4e>
 8003152:	2302      	movs	r3, #2
 8003154:	e0ea      	b.n	800332c <HAL_I2C_Mem_Read+0x224>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800315e:	f7ff fb13 	bl	8002788 <HAL_GetTick>
 8003162:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	9300      	str	r3, [sp, #0]
 8003168:	2319      	movs	r3, #25
 800316a:	2201      	movs	r2, #1
 800316c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 f9af 	bl	80034d4 <I2C_WaitOnFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e0d5      	b.n	800332c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2222      	movs	r2, #34	; 0x22
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2240      	movs	r2, #64	; 0x40
 800318c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a3a      	ldr	r2, [r7, #32]
 800319a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031a8:	88f8      	ldrh	r0, [r7, #6]
 80031aa:	893a      	ldrh	r2, [r7, #8]
 80031ac:	8979      	ldrh	r1, [r7, #10]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	9301      	str	r3, [sp, #4]
 80031b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	4603      	mov	r3, r0
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 f913 	bl	80033e4 <I2C_RequestMemoryRead>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d005      	beq.n	80031d0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0ad      	b.n	800332c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	2bff      	cmp	r3, #255	; 0xff
 80031d8:	d90e      	bls.n	80031f8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	22ff      	movs	r2, #255	; 0xff
 80031de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	8979      	ldrh	r1, [r7, #10]
 80031e8:	4b52      	ldr	r3, [pc, #328]	; (8003334 <HAL_I2C_Mem_Read+0x22c>)
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 fb17 	bl	8003824 <I2C_TransferConfig>
 80031f6:	e00f      	b.n	8003218 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003206:	b2da      	uxtb	r2, r3
 8003208:	8979      	ldrh	r1, [r7, #10]
 800320a:	4b4a      	ldr	r3, [pc, #296]	; (8003334 <HAL_I2C_Mem_Read+0x22c>)
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 fb06 	bl	8003824 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800321e:	2200      	movs	r2, #0
 8003220:	2104      	movs	r1, #4
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f000 f956 	bl	80034d4 <I2C_WaitOnFlagUntilTimeout>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e07c      	b.n	800332c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d034      	beq.n	80032d8 <HAL_I2C_Mem_Read+0x1d0>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003272:	2b00      	cmp	r3, #0
 8003274:	d130      	bne.n	80032d8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	9300      	str	r3, [sp, #0]
 800327a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327c:	2200      	movs	r2, #0
 800327e:	2180      	movs	r1, #128	; 0x80
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f927 	bl	80034d4 <I2C_WaitOnFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d001      	beq.n	8003290 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e04d      	b.n	800332c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003294:	b29b      	uxth	r3, r3
 8003296:	2bff      	cmp	r3, #255	; 0xff
 8003298:	d90e      	bls.n	80032b8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	22ff      	movs	r2, #255	; 0xff
 800329e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	8979      	ldrh	r1, [r7, #10]
 80032a8:	2300      	movs	r3, #0
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 fab7 	bl	8003824 <I2C_TransferConfig>
 80032b6:	e00f      	b.n	80032d8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	8979      	ldrh	r1, [r7, #10]
 80032ca:	2300      	movs	r3, #0
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 faa6 	bl	8003824 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d19a      	bne.n	8003218 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f974 	bl	80035d4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e01a      	b.n	800332c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2220      	movs	r2, #32
 80032fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6859      	ldr	r1, [r3, #4]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_I2C_Mem_Read+0x230>)
 800330a:	400b      	ands	r3, r1
 800330c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2220      	movs	r2, #32
 8003312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	e000      	b.n	800332c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800332a:	2302      	movs	r3, #2
  }
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	80002400 	.word	0x80002400
 8003338:	fe00e800 	.word	0xfe00e800

0800333c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af02      	add	r7, sp, #8
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	4608      	mov	r0, r1
 8003346:	4611      	mov	r1, r2
 8003348:	461a      	mov	r2, r3
 800334a:	4603      	mov	r3, r0
 800334c:	817b      	strh	r3, [r7, #10]
 800334e:	460b      	mov	r3, r1
 8003350:	813b      	strh	r3, [r7, #8]
 8003352:	4613      	mov	r3, r2
 8003354:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	b2da      	uxtb	r2, r3
 800335a:	8979      	ldrh	r1, [r7, #10]
 800335c:	4b20      	ldr	r3, [pc, #128]	; (80033e0 <I2C_RequestMemoryWrite+0xa4>)
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fa5d 	bl	8003824 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	69b9      	ldr	r1, [r7, #24]
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 f8f0 	bl	8003554 <I2C_WaitOnTXISFlagUntilTimeout>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d001      	beq.n	800337e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e02c      	b.n	80033d8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800337e:	88fb      	ldrh	r3, [r7, #6]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d105      	bne.n	8003390 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003384:	893b      	ldrh	r3, [r7, #8]
 8003386:	b2da      	uxtb	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	629a      	str	r2, [r3, #40]	; 0x28
 800338e:	e015      	b.n	80033bc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003390:	893b      	ldrh	r3, [r7, #8]
 8003392:	0a1b      	lsrs	r3, r3, #8
 8003394:	b29b      	uxth	r3, r3
 8003396:	b2da      	uxtb	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800339e:	69fa      	ldr	r2, [r7, #28]
 80033a0:	69b9      	ldr	r1, [r7, #24]
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 f8d6 	bl	8003554 <I2C_WaitOnTXISFlagUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e012      	b.n	80033d8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033b2:	893b      	ldrh	r3, [r7, #8]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	2200      	movs	r2, #0
 80033c4:	2180      	movs	r1, #128	; 0x80
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 f884 	bl	80034d4 <I2C_WaitOnFlagUntilTimeout>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	80002000 	.word	0x80002000

080033e4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af02      	add	r7, sp, #8
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	4608      	mov	r0, r1
 80033ee:	4611      	mov	r1, r2
 80033f0:	461a      	mov	r2, r3
 80033f2:	4603      	mov	r3, r0
 80033f4:	817b      	strh	r3, [r7, #10]
 80033f6:	460b      	mov	r3, r1
 80033f8:	813b      	strh	r3, [r7, #8]
 80033fa:	4613      	mov	r3, r2
 80033fc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80033fe:	88fb      	ldrh	r3, [r7, #6]
 8003400:	b2da      	uxtb	r2, r3
 8003402:	8979      	ldrh	r1, [r7, #10]
 8003404:	4b20      	ldr	r3, [pc, #128]	; (8003488 <I2C_RequestMemoryRead+0xa4>)
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	2300      	movs	r3, #0
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 fa0a 	bl	8003824 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003410:	69fa      	ldr	r2, [r7, #28]
 8003412:	69b9      	ldr	r1, [r7, #24]
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f89d 	bl	8003554 <I2C_WaitOnTXISFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e02c      	b.n	800347e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003424:	88fb      	ldrh	r3, [r7, #6]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d105      	bne.n	8003436 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800342a:	893b      	ldrh	r3, [r7, #8]
 800342c:	b2da      	uxtb	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	629a      	str	r2, [r3, #40]	; 0x28
 8003434:	e015      	b.n	8003462 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003436:	893b      	ldrh	r3, [r7, #8]
 8003438:	0a1b      	lsrs	r3, r3, #8
 800343a:	b29b      	uxth	r3, r3
 800343c:	b2da      	uxtb	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	69b9      	ldr	r1, [r7, #24]
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 f883 	bl	8003554 <I2C_WaitOnTXISFlagUntilTimeout>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e012      	b.n	800347e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003458:	893b      	ldrh	r3, [r7, #8]
 800345a:	b2da      	uxtb	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2200      	movs	r2, #0
 800346a:	2140      	movs	r1, #64	; 0x40
 800346c:	68f8      	ldr	r0, [r7, #12]
 800346e:	f000 f831 	bl	80034d4 <I2C_WaitOnFlagUntilTimeout>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e000      	b.n	800347e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	80002000 	.word	0x80002000

0800348c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f003 0302 	and.w	r3, r3, #2
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d103      	bne.n	80034aa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2200      	movs	r2, #0
 80034a8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d007      	beq.n	80034c8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699a      	ldr	r2, [r3, #24]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	619a      	str	r2, [r3, #24]
  }
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	60b9      	str	r1, [r7, #8]
 80034de:	603b      	str	r3, [r7, #0]
 80034e0:	4613      	mov	r3, r2
 80034e2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e4:	e022      	b.n	800352c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ec:	d01e      	beq.n	800352c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ee:	f7ff f94b 	bl	8002788 <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d302      	bcc.n	8003504 <I2C_WaitOnFlagUntilTimeout+0x30>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d113      	bne.n	800352c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003508:	f043 0220 	orr.w	r2, r3, #32
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e00f      	b.n	800354c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	4013      	ands	r3, r2
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	429a      	cmp	r2, r3
 800353a:	bf0c      	ite	eq
 800353c:	2301      	moveq	r3, #1
 800353e:	2300      	movne	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	461a      	mov	r2, r3
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	429a      	cmp	r2, r3
 8003548:	d0cd      	beq.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003560:	e02c      	b.n	80035bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	68b9      	ldr	r1, [r7, #8]
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f870 	bl	800364c <I2C_IsErrorOccurred>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e02a      	b.n	80035cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357c:	d01e      	beq.n	80035bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357e:	f7ff f903 	bl	8002788 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	429a      	cmp	r2, r3
 800358c:	d302      	bcc.n	8003594 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d113      	bne.n	80035bc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003598:	f043 0220 	orr.w	r2, r3, #32
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2220      	movs	r2, #32
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e007      	b.n	80035cc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d1cb      	bne.n	8003562 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035e0:	e028      	b.n	8003634 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	68b9      	ldr	r1, [r7, #8]
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f830 	bl	800364c <I2C_IsErrorOccurred>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e026      	b.n	8003644 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f6:	f7ff f8c7 	bl	8002788 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	429a      	cmp	r2, r3
 8003604:	d302      	bcc.n	800360c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d113      	bne.n	8003634 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003610:	f043 0220 	orr.w	r2, r3, #32
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e007      	b.n	8003644 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b20      	cmp	r3, #32
 8003640:	d1cf      	bne.n	80035e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003642:	2300      	movs	r3, #0
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b08a      	sub	sp, #40	; 0x28
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003666:	2300      	movs	r3, #0
 8003668:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b00      	cmp	r3, #0
 8003676:	d075      	beq.n	8003764 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2210      	movs	r2, #16
 800367e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003680:	e056      	b.n	8003730 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003688:	d052      	beq.n	8003730 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800368a:	f7ff f87d 	bl	8002788 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	429a      	cmp	r2, r3
 8003698:	d302      	bcc.n	80036a0 <I2C_IsErrorOccurred+0x54>
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d147      	bne.n	8003730 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c2:	d12e      	bne.n	8003722 <I2C_IsErrorOccurred+0xd6>
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036ca:	d02a      	beq.n	8003722 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80036cc:	7cfb      	ldrb	r3, [r7, #19]
 80036ce:	2b20      	cmp	r3, #32
 80036d0:	d027      	beq.n	8003722 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036e0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036e2:	f7ff f851 	bl	8002788 <HAL_GetTick>
 80036e6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036e8:	e01b      	b.n	8003722 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036ea:	f7ff f84d 	bl	8002788 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b19      	cmp	r3, #25
 80036f6:	d914      	bls.n	8003722 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036fc:	f043 0220 	orr.w	r2, r3, #32
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	f003 0320 	and.w	r3, r3, #32
 800372c:	2b20      	cmp	r3, #32
 800372e:	d1dc      	bne.n	80036ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	f003 0320 	and.w	r3, r3, #32
 800373a:	2b20      	cmp	r3, #32
 800373c:	d003      	beq.n	8003746 <I2C_IsErrorOccurred+0xfa>
 800373e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003742:	2b00      	cmp	r3, #0
 8003744:	d09d      	beq.n	8003682 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800374a:	2b00      	cmp	r3, #0
 800374c:	d103      	bne.n	8003756 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2220      	movs	r2, #32
 8003754:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	f043 0304 	orr.w	r3, r3, #4
 800375c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	699b      	ldr	r3, [r3, #24]
 800376a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00b      	beq.n	800378e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003776:	6a3b      	ldr	r3, [r7, #32]
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003786:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00b      	beq.n	80037b0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	f043 0308 	orr.w	r3, r3, #8
 800379e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00b      	beq.n	80037d2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	f043 0302 	orr.w	r3, r3, #2
 80037c0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80037d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d01c      	beq.n	8003814 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f7ff fe56 	bl	800348c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6859      	ldr	r1, [r3, #4]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <I2C_IsErrorOccurred+0x1d4>)
 80037ec:	400b      	ands	r3, r1
 80037ee:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2220      	movs	r2, #32
 8003800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003814:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003818:	4618      	mov	r0, r3
 800381a:	3728      	adds	r7, #40	; 0x28
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	fe00e800 	.word	0xfe00e800

08003824 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	607b      	str	r3, [r7, #4]
 800382e:	460b      	mov	r3, r1
 8003830:	817b      	strh	r3, [r7, #10]
 8003832:	4613      	mov	r3, r2
 8003834:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003836:	897b      	ldrh	r3, [r7, #10]
 8003838:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800383c:	7a7b      	ldrb	r3, [r7, #9]
 800383e:	041b      	lsls	r3, r3, #16
 8003840:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003844:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	4313      	orrs	r3, r2
 800384e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003852:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	0d5b      	lsrs	r3, r3, #21
 800385e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003862:	4b08      	ldr	r3, [pc, #32]	; (8003884 <I2C_TransferConfig+0x60>)
 8003864:	430b      	orrs	r3, r1
 8003866:	43db      	mvns	r3, r3
 8003868:	ea02 0103 	and.w	r1, r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003876:	bf00      	nop
 8003878:	371c      	adds	r7, #28
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	03ff63ff 	.word	0x03ff63ff

08003888 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b20      	cmp	r3, #32
 800389c:	d138      	bne.n	8003910 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e032      	b.n	8003912 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2224      	movs	r2, #36	; 0x24
 80038b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0201 	bic.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6819      	ldr	r1, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	430a      	orrs	r2, r1
 80038ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	e000      	b.n	8003912 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003910:	2302      	movs	r3, #2
  }
}
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800391e:	b480      	push	{r7}
 8003920:	b085      	sub	sp, #20
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
 8003926:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b20      	cmp	r3, #32
 8003932:	d139      	bne.n	80039a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800393a:	2b01      	cmp	r3, #1
 800393c:	d101      	bne.n	8003942 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800393e:	2302      	movs	r3, #2
 8003940:	e033      	b.n	80039aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2224      	movs	r2, #36	; 0x24
 800394e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0201 	bic.w	r2, r2, #1
 8003960:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003970:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	021b      	lsls	r3, r3, #8
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	4313      	orrs	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2220      	movs	r2, #32
 8003998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	e000      	b.n	80039aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80039a8:	2302      	movs	r3, #2
  }
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
	...

080039b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80039bc:	4b04      	ldr	r3, [pc, #16]	; (80039d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop
 80039d0:	40007000 	.word	0x40007000

080039d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e2:	d130      	bne.n	8003a46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80039e4:	4b23      	ldr	r3, [pc, #140]	; (8003a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039f0:	d038      	beq.n	8003a64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039f2:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039fa:	4a1e      	ldr	r2, [pc, #120]	; (8003a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a02:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2232      	movs	r2, #50	; 0x32
 8003a08:	fb02 f303 	mul.w	r3, r2, r3
 8003a0c:	4a1b      	ldr	r2, [pc, #108]	; (8003a7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	0c9b      	lsrs	r3, r3, #18
 8003a14:	3301      	adds	r3, #1
 8003a16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a18:	e002      	b.n	8003a20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a20:	4b14      	ldr	r3, [pc, #80]	; (8003a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a2c:	d102      	bne.n	8003a34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1f2      	bne.n	8003a1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a34:	4b0f      	ldr	r3, [pc, #60]	; (8003a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a40:	d110      	bne.n	8003a64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e00f      	b.n	8003a66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003a46:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a52:	d007      	beq.n	8003a64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a54:	4b07      	ldr	r3, [pc, #28]	; (8003a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a5c:	4a05      	ldr	r2, [pc, #20]	; (8003a74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	40007000 	.word	0x40007000
 8003a78:	200015fc 	.word	0x200015fc
 8003a7c:	431bde83 	.word	0x431bde83

08003a80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b088      	sub	sp, #32
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e3d8      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a92:	4b97      	ldr	r3, [pc, #604]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f003 030c 	and.w	r3, r3, #12
 8003a9a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a9c:	4b94      	ldr	r3, [pc, #592]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0303 	and.w	r3, r3, #3
 8003aa4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 80e4 	beq.w	8003c7c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d007      	beq.n	8003aca <HAL_RCC_OscConfig+0x4a>
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	2b0c      	cmp	r3, #12
 8003abe:	f040 808b 	bne.w	8003bd8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	f040 8087 	bne.w	8003bd8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003aca:	4b89      	ldr	r3, [pc, #548]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d005      	beq.n	8003ae2 <HAL_RCC_OscConfig+0x62>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e3b0      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1a      	ldr	r2, [r3, #32]
 8003ae6:	4b82      	ldr	r3, [pc, #520]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0308 	and.w	r3, r3, #8
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d004      	beq.n	8003afc <HAL_RCC_OscConfig+0x7c>
 8003af2:	4b7f      	ldr	r3, [pc, #508]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003afa:	e005      	b.n	8003b08 <HAL_RCC_OscConfig+0x88>
 8003afc:	4b7c      	ldr	r3, [pc, #496]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d223      	bcs.n	8003b54 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a1b      	ldr	r3, [r3, #32]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f000 fd43 	bl	800459c <RCC_SetFlashLatencyFromMSIRange>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e391      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b20:	4b73      	ldr	r3, [pc, #460]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a72      	ldr	r2, [pc, #456]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b26:	f043 0308 	orr.w	r3, r3, #8
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	4b70      	ldr	r3, [pc, #448]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	496d      	ldr	r1, [pc, #436]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b3e:	4b6c      	ldr	r3, [pc, #432]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	69db      	ldr	r3, [r3, #28]
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	4968      	ldr	r1, [pc, #416]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	604b      	str	r3, [r1, #4]
 8003b52:	e025      	b.n	8003ba0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b54:	4b66      	ldr	r3, [pc, #408]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a65      	ldr	r2, [pc, #404]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b5a:	f043 0308 	orr.w	r3, r3, #8
 8003b5e:	6013      	str	r3, [r2, #0]
 8003b60:	4b63      	ldr	r3, [pc, #396]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	4960      	ldr	r1, [pc, #384]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b72:	4b5f      	ldr	r3, [pc, #380]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69db      	ldr	r3, [r3, #28]
 8003b7e:	021b      	lsls	r3, r3, #8
 8003b80:	495b      	ldr	r1, [pc, #364]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d109      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 fd03 	bl	800459c <RCC_SetFlashLatencyFromMSIRange>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e351      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ba0:	f000 fc38 	bl	8004414 <HAL_RCC_GetSysClockFreq>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	4b52      	ldr	r3, [pc, #328]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	091b      	lsrs	r3, r3, #4
 8003bac:	f003 030f 	and.w	r3, r3, #15
 8003bb0:	4950      	ldr	r1, [pc, #320]	; (8003cf4 <HAL_RCC_OscConfig+0x274>)
 8003bb2:	5ccb      	ldrb	r3, [r1, r3]
 8003bb4:	f003 031f 	and.w	r3, r3, #31
 8003bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbc:	4a4e      	ldr	r2, [pc, #312]	; (8003cf8 <HAL_RCC_OscConfig+0x278>)
 8003bbe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003bc0:	4b4e      	ldr	r3, [pc, #312]	; (8003cfc <HAL_RCC_OscConfig+0x27c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7fe fd8f 	bl	80026e8 <HAL_InitTick>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d052      	beq.n	8003c7a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003bd4:	7bfb      	ldrb	r3, [r7, #15]
 8003bd6:	e335      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d032      	beq.n	8003c46 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003be0:	4b43      	ldr	r3, [pc, #268]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a42      	ldr	r2, [pc, #264]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003be6:	f043 0301 	orr.w	r3, r3, #1
 8003bea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bec:	f7fe fdcc 	bl	8002788 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bf4:	f7fe fdc8 	bl	8002788 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e31e      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c06:	4b3a      	ldr	r3, [pc, #232]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c12:	4b37      	ldr	r3, [pc, #220]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a36      	ldr	r2, [pc, #216]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c18:	f043 0308 	orr.w	r3, r3, #8
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	4b34      	ldr	r3, [pc, #208]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	4931      	ldr	r1, [pc, #196]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c30:	4b2f      	ldr	r3, [pc, #188]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	69db      	ldr	r3, [r3, #28]
 8003c3c:	021b      	lsls	r3, r3, #8
 8003c3e:	492c      	ldr	r1, [pc, #176]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	604b      	str	r3, [r1, #4]
 8003c44:	e01a      	b.n	8003c7c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c46:	4b2a      	ldr	r3, [pc, #168]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a29      	ldr	r2, [pc, #164]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c4c:	f023 0301 	bic.w	r3, r3, #1
 8003c50:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c52:	f7fe fd99 	bl	8002788 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c5a:	f7fe fd95 	bl	8002788 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e2eb      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c6c:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1f0      	bne.n	8003c5a <HAL_RCC_OscConfig+0x1da>
 8003c78:	e000      	b.n	8003c7c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c7a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d074      	beq.n	8003d72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	2b08      	cmp	r3, #8
 8003c8c:	d005      	beq.n	8003c9a <HAL_RCC_OscConfig+0x21a>
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	2b0c      	cmp	r3, #12
 8003c92:	d10e      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d10b      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c9a:	4b15      	ldr	r3, [pc, #84]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d064      	beq.n	8003d70 <HAL_RCC_OscConfig+0x2f0>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d160      	bne.n	8003d70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e2c8      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cba:	d106      	bne.n	8003cca <HAL_RCC_OscConfig+0x24a>
 8003cbc:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a0b      	ldr	r2, [pc, #44]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	e026      	b.n	8003d18 <HAL_RCC_OscConfig+0x298>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cd2:	d115      	bne.n	8003d00 <HAL_RCC_OscConfig+0x280>
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a05      	ldr	r2, [pc, #20]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003cda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	4b03      	ldr	r3, [pc, #12]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a02      	ldr	r2, [pc, #8]	; (8003cf0 <HAL_RCC_OscConfig+0x270>)
 8003ce6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	e014      	b.n	8003d18 <HAL_RCC_OscConfig+0x298>
 8003cee:	bf00      	nop
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	08007b88 	.word	0x08007b88
 8003cf8:	200015fc 	.word	0x200015fc
 8003cfc:	20001600 	.word	0x20001600
 8003d00:	4ba0      	ldr	r3, [pc, #640]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a9f      	ldr	r2, [pc, #636]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d0a:	6013      	str	r3, [r2, #0]
 8003d0c:	4b9d      	ldr	r3, [pc, #628]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a9c      	ldr	r2, [pc, #624]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d013      	beq.n	8003d48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d20:	f7fe fd32 	bl	8002788 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d28:	f7fe fd2e 	bl	8002788 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b64      	cmp	r3, #100	; 0x64
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e284      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d3a:	4b92      	ldr	r3, [pc, #584]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d0f0      	beq.n	8003d28 <HAL_RCC_OscConfig+0x2a8>
 8003d46:	e014      	b.n	8003d72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fe fd1e 	bl	8002788 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d50:	f7fe fd1a 	bl	8002788 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b64      	cmp	r3, #100	; 0x64
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e270      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d62:	4b88      	ldr	r3, [pc, #544]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x2d0>
 8003d6e:	e000      	b.n	8003d72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d060      	beq.n	8003e40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d005      	beq.n	8003d90 <HAL_RCC_OscConfig+0x310>
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	2b0c      	cmp	r3, #12
 8003d88:	d119      	bne.n	8003dbe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d116      	bne.n	8003dbe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d90:	4b7c      	ldr	r3, [pc, #496]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_RCC_OscConfig+0x328>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e24d      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da8:	4b76      	ldr	r3, [pc, #472]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	061b      	lsls	r3, r3, #24
 8003db6:	4973      	ldr	r1, [pc, #460]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dbc:	e040      	b.n	8003e40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d023      	beq.n	8003e0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc6:	4b6f      	ldr	r3, [pc, #444]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a6e      	ldr	r2, [pc, #440]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd2:	f7fe fcd9 	bl	8002788 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dda:	f7fe fcd5 	bl	8002788 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e22b      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003dec:	4b65      	ldr	r3, [pc, #404]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df8:	4b62      	ldr	r3, [pc, #392]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	061b      	lsls	r3, r3, #24
 8003e06:	495f      	ldr	r1, [pc, #380]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	604b      	str	r3, [r1, #4]
 8003e0c:	e018      	b.n	8003e40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e0e:	4b5d      	ldr	r3, [pc, #372]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a5c      	ldr	r2, [pc, #368]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1a:	f7fe fcb5 	bl	8002788 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e22:	f7fe fcb1 	bl	8002788 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e207      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e34:	4b53      	ldr	r3, [pc, #332]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1f0      	bne.n	8003e22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0308 	and.w	r3, r3, #8
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d03c      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01c      	beq.n	8003e8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e54:	4b4b      	ldr	r3, [pc, #300]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e5a:	4a4a      	ldr	r2, [pc, #296]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003e5c:	f043 0301 	orr.w	r3, r3, #1
 8003e60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e64:	f7fe fc90 	bl	8002788 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e6a:	e008      	b.n	8003e7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e6c:	f7fe fc8c 	bl	8002788 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	2b02      	cmp	r3, #2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e1e2      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e7e:	4b41      	ldr	r3, [pc, #260]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0ef      	beq.n	8003e6c <HAL_RCC_OscConfig+0x3ec>
 8003e8c:	e01b      	b.n	8003ec6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e8e:	4b3d      	ldr	r3, [pc, #244]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e94:	4a3b      	ldr	r2, [pc, #236]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003e96:	f023 0301 	bic.w	r3, r3, #1
 8003e9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9e:	f7fe fc73 	bl	8002788 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ea6:	f7fe fc6f 	bl	8002788 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e1c5      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003eb8:	4b32      	ldr	r3, [pc, #200]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1ef      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0304 	and.w	r3, r3, #4
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	f000 80a6 	beq.w	8004020 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ed8:	4b2a      	ldr	r3, [pc, #168]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10d      	bne.n	8003f00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ee4:	4b27      	ldr	r3, [pc, #156]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee8:	4a26      	ldr	r2, [pc, #152]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eee:	6593      	str	r3, [r2, #88]	; 0x58
 8003ef0:	4b24      	ldr	r3, [pc, #144]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003efc:	2301      	movs	r3, #1
 8003efe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f00:	4b21      	ldr	r3, [pc, #132]	; (8003f88 <HAL_RCC_OscConfig+0x508>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d118      	bne.n	8003f3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f0c:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <HAL_RCC_OscConfig+0x508>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a1d      	ldr	r2, [pc, #116]	; (8003f88 <HAL_RCC_OscConfig+0x508>)
 8003f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f18:	f7fe fc36 	bl	8002788 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f20:	f7fe fc32 	bl	8002788 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e188      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f32:	4b15      	ldr	r3, [pc, #84]	; (8003f88 <HAL_RCC_OscConfig+0x508>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d108      	bne.n	8003f58 <HAL_RCC_OscConfig+0x4d8>
 8003f46:	4b0f      	ldr	r3, [pc, #60]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4c:	4a0d      	ldr	r2, [pc, #52]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003f4e:	f043 0301 	orr.w	r3, r3, #1
 8003f52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f56:	e029      	b.n	8003fac <HAL_RCC_OscConfig+0x52c>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2b05      	cmp	r3, #5
 8003f5e:	d115      	bne.n	8003f8c <HAL_RCC_OscConfig+0x50c>
 8003f60:	4b08      	ldr	r3, [pc, #32]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f66:	4a07      	ldr	r2, [pc, #28]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003f68:	f043 0304 	orr.w	r3, r3, #4
 8003f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f70:	4b04      	ldr	r3, [pc, #16]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f76:	4a03      	ldr	r2, [pc, #12]	; (8003f84 <HAL_RCC_OscConfig+0x504>)
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f80:	e014      	b.n	8003fac <HAL_RCC_OscConfig+0x52c>
 8003f82:	bf00      	nop
 8003f84:	40021000 	.word	0x40021000
 8003f88:	40007000 	.word	0x40007000
 8003f8c:	4b91      	ldr	r3, [pc, #580]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f92:	4a90      	ldr	r2, [pc, #576]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 8003f94:	f023 0301 	bic.w	r3, r3, #1
 8003f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f9c:	4b8d      	ldr	r3, [pc, #564]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa2:	4a8c      	ldr	r2, [pc, #560]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 8003fa4:	f023 0304 	bic.w	r3, r3, #4
 8003fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d016      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb4:	f7fe fbe8 	bl	8002788 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fba:	e00a      	b.n	8003fd2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fbc:	f7fe fbe4 	bl	8002788 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e138      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fd2:	4b80      	ldr	r3, [pc, #512]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 8003fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0ed      	beq.n	8003fbc <HAL_RCC_OscConfig+0x53c>
 8003fe0:	e015      	b.n	800400e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe2:	f7fe fbd1 	bl	8002788 <HAL_GetTick>
 8003fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fe8:	e00a      	b.n	8004000 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fea:	f7fe fbcd 	bl	8002788 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e121      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004000:	4b74      	ldr	r3, [pc, #464]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 8004002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004006:	f003 0302 	and.w	r3, r3, #2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d1ed      	bne.n	8003fea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800400e:	7ffb      	ldrb	r3, [r7, #31]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d105      	bne.n	8004020 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004014:	4b6f      	ldr	r3, [pc, #444]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 8004016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004018:	4a6e      	ldr	r2, [pc, #440]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 800401a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800401e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	2b00      	cmp	r3, #0
 8004026:	f000 810c 	beq.w	8004242 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402e:	2b02      	cmp	r3, #2
 8004030:	f040 80d4 	bne.w	80041dc <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004034:	4b67      	ldr	r3, [pc, #412]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f003 0203 	and.w	r2, r3, #3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004044:	429a      	cmp	r2, r3
 8004046:	d130      	bne.n	80040aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	3b01      	subs	r3, #1
 8004054:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004056:	429a      	cmp	r2, r3
 8004058:	d127      	bne.n	80040aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004064:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004066:	429a      	cmp	r2, r3
 8004068:	d11f      	bne.n	80040aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004074:	2a07      	cmp	r2, #7
 8004076:	bf14      	ite	ne
 8004078:	2201      	movne	r2, #1
 800407a:	2200      	moveq	r2, #0
 800407c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800407e:	4293      	cmp	r3, r2
 8004080:	d113      	bne.n	80040aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408c:	085b      	lsrs	r3, r3, #1
 800408e:	3b01      	subs	r3, #1
 8004090:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004092:	429a      	cmp	r2, r3
 8004094:	d109      	bne.n	80040aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	085b      	lsrs	r3, r3, #1
 80040a2:	3b01      	subs	r3, #1
 80040a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d06e      	beq.n	8004188 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	2b0c      	cmp	r3, #12
 80040ae:	d069      	beq.n	8004184 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80040b0:	4b48      	ldr	r3, [pc, #288]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d105      	bne.n	80040c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80040bc:	4b45      	ldr	r3, [pc, #276]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0bb      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040cc:	4b41      	ldr	r3, [pc, #260]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a40      	ldr	r2, [pc, #256]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 80040d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040d8:	f7fe fb56 	bl	8002788 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e0:	f7fe fb52 	bl	8002788 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e0a8      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040f2:	4b38      	ldr	r3, [pc, #224]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040fe:	4b35      	ldr	r3, [pc, #212]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	4b35      	ldr	r3, [pc, #212]	; (80041d8 <HAL_RCC_OscConfig+0x758>)
 8004104:	4013      	ands	r3, r2
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800410e:	3a01      	subs	r2, #1
 8004110:	0112      	lsls	r2, r2, #4
 8004112:	4311      	orrs	r1, r2
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004118:	0212      	lsls	r2, r2, #8
 800411a:	4311      	orrs	r1, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004120:	0852      	lsrs	r2, r2, #1
 8004122:	3a01      	subs	r2, #1
 8004124:	0552      	lsls	r2, r2, #21
 8004126:	4311      	orrs	r1, r2
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800412c:	0852      	lsrs	r2, r2, #1
 800412e:	3a01      	subs	r2, #1
 8004130:	0652      	lsls	r2, r2, #25
 8004132:	4311      	orrs	r1, r2
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004138:	0912      	lsrs	r2, r2, #4
 800413a:	0452      	lsls	r2, r2, #17
 800413c:	430a      	orrs	r2, r1
 800413e:	4925      	ldr	r1, [pc, #148]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 8004140:	4313      	orrs	r3, r2
 8004142:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004144:	4b23      	ldr	r3, [pc, #140]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a22      	ldr	r2, [pc, #136]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 800414a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800414e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004150:	4b20      	ldr	r3, [pc, #128]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4a1f      	ldr	r2, [pc, #124]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 8004156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800415a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800415c:	f7fe fb14 	bl	8002788 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004164:	f7fe fb10 	bl	8002788 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e066      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004176:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004182:	e05e      	b.n	8004242 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e05d      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004188:	4b12      	ldr	r3, [pc, #72]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d156      	bne.n	8004242 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004194:	4b0f      	ldr	r3, [pc, #60]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a0e      	ldr	r2, [pc, #56]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 800419a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800419e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	4a0b      	ldr	r2, [pc, #44]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 80041a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041ac:	f7fe faec 	bl	8002788 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b4:	f7fe fae8 	bl	8002788 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e03e      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041c6:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <HAL_RCC_OscConfig+0x754>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f0      	beq.n	80041b4 <HAL_RCC_OscConfig+0x734>
 80041d2:	e036      	b.n	8004242 <HAL_RCC_OscConfig+0x7c2>
 80041d4:	40021000 	.word	0x40021000
 80041d8:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	2b0c      	cmp	r3, #12
 80041e0:	d02d      	beq.n	800423e <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e2:	4b1a      	ldr	r3, [pc, #104]	; (800424c <HAL_RCC_OscConfig+0x7cc>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a19      	ldr	r2, [pc, #100]	; (800424c <HAL_RCC_OscConfig+0x7cc>)
 80041e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ec:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80041ee:	4b17      	ldr	r3, [pc, #92]	; (800424c <HAL_RCC_OscConfig+0x7cc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d105      	bne.n	8004206 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80041fa:	4b14      	ldr	r3, [pc, #80]	; (800424c <HAL_RCC_OscConfig+0x7cc>)
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	4a13      	ldr	r2, [pc, #76]	; (800424c <HAL_RCC_OscConfig+0x7cc>)
 8004200:	f023 0303 	bic.w	r3, r3, #3
 8004204:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004206:	4b11      	ldr	r3, [pc, #68]	; (800424c <HAL_RCC_OscConfig+0x7cc>)
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	4a10      	ldr	r2, [pc, #64]	; (800424c <HAL_RCC_OscConfig+0x7cc>)
 800420c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004210:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004214:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004216:	f7fe fab7 	bl	8002788 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800421c:	e008      	b.n	8004230 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800421e:	f7fe fab3 	bl	8002788 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b02      	cmp	r3, #2
 800422a:	d901      	bls.n	8004230 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e009      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004230:	4b06      	ldr	r3, [pc, #24]	; (800424c <HAL_RCC_OscConfig+0x7cc>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1f0      	bne.n	800421e <HAL_RCC_OscConfig+0x79e>
 800423c:	e001      	b.n	8004242 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3720      	adds	r7, #32
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40021000 	.word	0x40021000

08004250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e0c8      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004264:	4b66      	ldr	r3, [pc, #408]	; (8004400 <HAL_RCC_ClockConfig+0x1b0>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	429a      	cmp	r2, r3
 8004270:	d910      	bls.n	8004294 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004272:	4b63      	ldr	r3, [pc, #396]	; (8004400 <HAL_RCC_ClockConfig+0x1b0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f023 0207 	bic.w	r2, r3, #7
 800427a:	4961      	ldr	r1, [pc, #388]	; (8004400 <HAL_RCC_ClockConfig+0x1b0>)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	4313      	orrs	r3, r2
 8004280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004282:	4b5f      	ldr	r3, [pc, #380]	; (8004400 <HAL_RCC_ClockConfig+0x1b0>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0307 	and.w	r3, r3, #7
 800428a:	683a      	ldr	r2, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d001      	beq.n	8004294 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e0b0      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d04c      	beq.n	800433a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b03      	cmp	r3, #3
 80042a6:	d107      	bne.n	80042b8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042a8:	4b56      	ldr	r3, [pc, #344]	; (8004404 <HAL_RCC_ClockConfig+0x1b4>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d121      	bne.n	80042f8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e09e      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d107      	bne.n	80042d0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042c0:	4b50      	ldr	r3, [pc, #320]	; (8004404 <HAL_RCC_ClockConfig+0x1b4>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d115      	bne.n	80042f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e092      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d107      	bne.n	80042e8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80042d8:	4b4a      	ldr	r3, [pc, #296]	; (8004404 <HAL_RCC_ClockConfig+0x1b4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d109      	bne.n	80042f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e086      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042e8:	4b46      	ldr	r3, [pc, #280]	; (8004404 <HAL_RCC_ClockConfig+0x1b4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e07e      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80042f8:	4b42      	ldr	r3, [pc, #264]	; (8004404 <HAL_RCC_ClockConfig+0x1b4>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f023 0203 	bic.w	r2, r3, #3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	493f      	ldr	r1, [pc, #252]	; (8004404 <HAL_RCC_ClockConfig+0x1b4>)
 8004306:	4313      	orrs	r3, r2
 8004308:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800430a:	f7fe fa3d 	bl	8002788 <HAL_GetTick>
 800430e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004310:	e00a      	b.n	8004328 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004312:	f7fe fa39 	bl	8002788 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004320:	4293      	cmp	r3, r2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e066      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004328:	4b36      	ldr	r3, [pc, #216]	; (8004404 <HAL_RCC_ClockConfig+0x1b4>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 020c 	and.w	r2, r3, #12
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	429a      	cmp	r2, r3
 8004338:	d1eb      	bne.n	8004312 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d008      	beq.n	8004358 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004346:	4b2f      	ldr	r3, [pc, #188]	; (8004404 <HAL_RCC_ClockConfig+0x1b4>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	492c      	ldr	r1, [pc, #176]	; (8004404 <HAL_RCC_ClockConfig+0x1b4>)
 8004354:	4313      	orrs	r3, r2
 8004356:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004358:	4b29      	ldr	r3, [pc, #164]	; (8004400 <HAL_RCC_ClockConfig+0x1b0>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d210      	bcs.n	8004388 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004366:	4b26      	ldr	r3, [pc, #152]	; (8004400 <HAL_RCC_ClockConfig+0x1b0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f023 0207 	bic.w	r2, r3, #7
 800436e:	4924      	ldr	r1, [pc, #144]	; (8004400 <HAL_RCC_ClockConfig+0x1b0>)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	4313      	orrs	r3, r2
 8004374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004376:	4b22      	ldr	r3, [pc, #136]	; (8004400 <HAL_RCC_ClockConfig+0x1b0>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d001      	beq.n	8004388 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e036      	b.n	80043f6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0304 	and.w	r3, r3, #4
 8004390:	2b00      	cmp	r3, #0
 8004392:	d008      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004394:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <HAL_RCC_ClockConfig+0x1b4>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4918      	ldr	r1, [pc, #96]	; (8004404 <HAL_RCC_ClockConfig+0x1b4>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d009      	beq.n	80043c6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043b2:	4b14      	ldr	r3, [pc, #80]	; (8004404 <HAL_RCC_ClockConfig+0x1b4>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	4910      	ldr	r1, [pc, #64]	; (8004404 <HAL_RCC_ClockConfig+0x1b4>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043c6:	f000 f825 	bl	8004414 <HAL_RCC_GetSysClockFreq>
 80043ca:	4602      	mov	r2, r0
 80043cc:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <HAL_RCC_ClockConfig+0x1b4>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	091b      	lsrs	r3, r3, #4
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	490c      	ldr	r1, [pc, #48]	; (8004408 <HAL_RCC_ClockConfig+0x1b8>)
 80043d8:	5ccb      	ldrb	r3, [r1, r3]
 80043da:	f003 031f 	and.w	r3, r3, #31
 80043de:	fa22 f303 	lsr.w	r3, r2, r3
 80043e2:	4a0a      	ldr	r2, [pc, #40]	; (800440c <HAL_RCC_ClockConfig+0x1bc>)
 80043e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <HAL_RCC_ClockConfig+0x1c0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7fe f97c 	bl	80026e8 <HAL_InitTick>
 80043f0:	4603      	mov	r3, r0
 80043f2:	72fb      	strb	r3, [r7, #11]

  return status;
 80043f4:	7afb      	ldrb	r3, [r7, #11]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40022000 	.word	0x40022000
 8004404:	40021000 	.word	0x40021000
 8004408:	08007b88 	.word	0x08007b88
 800440c:	200015fc 	.word	0x200015fc
 8004410:	20001600 	.word	0x20001600

08004414 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004414:	b480      	push	{r7}
 8004416:	b089      	sub	sp, #36	; 0x24
 8004418:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800441a:	2300      	movs	r3, #0
 800441c:	61fb      	str	r3, [r7, #28]
 800441e:	2300      	movs	r3, #0
 8004420:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004422:	4b3e      	ldr	r3, [pc, #248]	; (800451c <HAL_RCC_GetSysClockFreq+0x108>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f003 030c 	and.w	r3, r3, #12
 800442a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800442c:	4b3b      	ldr	r3, [pc, #236]	; (800451c <HAL_RCC_GetSysClockFreq+0x108>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_RCC_GetSysClockFreq+0x34>
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	2b0c      	cmp	r3, #12
 8004440:	d121      	bne.n	8004486 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d11e      	bne.n	8004486 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004448:	4b34      	ldr	r3, [pc, #208]	; (800451c <HAL_RCC_GetSysClockFreq+0x108>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b00      	cmp	r3, #0
 8004452:	d107      	bne.n	8004464 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004454:	4b31      	ldr	r3, [pc, #196]	; (800451c <HAL_RCC_GetSysClockFreq+0x108>)
 8004456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800445a:	0a1b      	lsrs	r3, r3, #8
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	61fb      	str	r3, [r7, #28]
 8004462:	e005      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004464:	4b2d      	ldr	r3, [pc, #180]	; (800451c <HAL_RCC_GetSysClockFreq+0x108>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	091b      	lsrs	r3, r3, #4
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004470:	4a2b      	ldr	r2, [pc, #172]	; (8004520 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004478:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10d      	bne.n	800449c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004484:	e00a      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	2b04      	cmp	r3, #4
 800448a:	d102      	bne.n	8004492 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800448c:	4b25      	ldr	r3, [pc, #148]	; (8004524 <HAL_RCC_GetSysClockFreq+0x110>)
 800448e:	61bb      	str	r3, [r7, #24]
 8004490:	e004      	b.n	800449c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004492:	693b      	ldr	r3, [r7, #16]
 8004494:	2b08      	cmp	r3, #8
 8004496:	d101      	bne.n	800449c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004498:	4b23      	ldr	r3, [pc, #140]	; (8004528 <HAL_RCC_GetSysClockFreq+0x114>)
 800449a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	2b0c      	cmp	r3, #12
 80044a0:	d134      	bne.n	800450c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044a2:	4b1e      	ldr	r3, [pc, #120]	; (800451c <HAL_RCC_GetSysClockFreq+0x108>)
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f003 0303 	and.w	r3, r3, #3
 80044aa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d003      	beq.n	80044ba <HAL_RCC_GetSysClockFreq+0xa6>
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d003      	beq.n	80044c0 <HAL_RCC_GetSysClockFreq+0xac>
 80044b8:	e005      	b.n	80044c6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044ba:	4b1a      	ldr	r3, [pc, #104]	; (8004524 <HAL_RCC_GetSysClockFreq+0x110>)
 80044bc:	617b      	str	r3, [r7, #20]
      break;
 80044be:	e005      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044c0:	4b19      	ldr	r3, [pc, #100]	; (8004528 <HAL_RCC_GetSysClockFreq+0x114>)
 80044c2:	617b      	str	r3, [r7, #20]
      break;
 80044c4:	e002      	b.n	80044cc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	617b      	str	r3, [r7, #20]
      break;
 80044ca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044cc:	4b13      	ldr	r3, [pc, #76]	; (800451c <HAL_RCC_GetSysClockFreq+0x108>)
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	091b      	lsrs	r3, r3, #4
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	3301      	adds	r3, #1
 80044d8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80044da:	4b10      	ldr	r3, [pc, #64]	; (800451c <HAL_RCC_GetSysClockFreq+0x108>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	fb03 f202 	mul.w	r2, r3, r2
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80044f2:	4b0a      	ldr	r3, [pc, #40]	; (800451c <HAL_RCC_GetSysClockFreq+0x108>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	0e5b      	lsrs	r3, r3, #25
 80044f8:	f003 0303 	and.w	r3, r3, #3
 80044fc:	3301      	adds	r3, #1
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	fbb2 f3f3 	udiv	r3, r2, r3
 800450a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800450c:	69bb      	ldr	r3, [r7, #24]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3724      	adds	r7, #36	; 0x24
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	40021000 	.word	0x40021000
 8004520:	08007ba0 	.word	0x08007ba0
 8004524:	00f42400 	.word	0x00f42400
 8004528:	007a1200 	.word	0x007a1200

0800452c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004530:	4b03      	ldr	r3, [pc, #12]	; (8004540 <HAL_RCC_GetHCLKFreq+0x14>)
 8004532:	681b      	ldr	r3, [r3, #0]
}
 8004534:	4618      	mov	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	200015fc 	.word	0x200015fc

08004544 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004548:	f7ff fff0 	bl	800452c <HAL_RCC_GetHCLKFreq>
 800454c:	4602      	mov	r2, r0
 800454e:	4b06      	ldr	r3, [pc, #24]	; (8004568 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	0a1b      	lsrs	r3, r3, #8
 8004554:	f003 0307 	and.w	r3, r3, #7
 8004558:	4904      	ldr	r1, [pc, #16]	; (800456c <HAL_RCC_GetPCLK1Freq+0x28>)
 800455a:	5ccb      	ldrb	r3, [r1, r3]
 800455c:	f003 031f 	and.w	r3, r3, #31
 8004560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004564:	4618      	mov	r0, r3
 8004566:	bd80      	pop	{r7, pc}
 8004568:	40021000 	.word	0x40021000
 800456c:	08007b98 	.word	0x08007b98

08004570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004574:	f7ff ffda 	bl	800452c <HAL_RCC_GetHCLKFreq>
 8004578:	4602      	mov	r2, r0
 800457a:	4b06      	ldr	r3, [pc, #24]	; (8004594 <HAL_RCC_GetPCLK2Freq+0x24>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	0adb      	lsrs	r3, r3, #11
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	4904      	ldr	r1, [pc, #16]	; (8004598 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004586:	5ccb      	ldrb	r3, [r1, r3]
 8004588:	f003 031f 	and.w	r3, r3, #31
 800458c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004590:	4618      	mov	r0, r3
 8004592:	bd80      	pop	{r7, pc}
 8004594:	40021000 	.word	0x40021000
 8004598:	08007b98 	.word	0x08007b98

0800459c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045a4:	2300      	movs	r3, #0
 80045a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045a8:	4b2a      	ldr	r3, [pc, #168]	; (8004654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045b4:	f7ff fa00 	bl	80039b8 <HAL_PWREx_GetVoltageRange>
 80045b8:	6178      	str	r0, [r7, #20]
 80045ba:	e014      	b.n	80045e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045bc:	4b25      	ldr	r3, [pc, #148]	; (8004654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c0:	4a24      	ldr	r2, [pc, #144]	; (8004654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c6:	6593      	str	r3, [r2, #88]	; 0x58
 80045c8:	4b22      	ldr	r3, [pc, #136]	; (8004654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045d4:	f7ff f9f0 	bl	80039b8 <HAL_PWREx_GetVoltageRange>
 80045d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80045da:	4b1e      	ldr	r3, [pc, #120]	; (8004654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045de:	4a1d      	ldr	r2, [pc, #116]	; (8004654 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ec:	d10b      	bne.n	8004606 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b80      	cmp	r3, #128	; 0x80
 80045f2:	d919      	bls.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2ba0      	cmp	r3, #160	; 0xa0
 80045f8:	d902      	bls.n	8004600 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045fa:	2302      	movs	r3, #2
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	e013      	b.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004600:	2301      	movs	r3, #1
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	e010      	b.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2b80      	cmp	r3, #128	; 0x80
 800460a:	d902      	bls.n	8004612 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800460c:	2303      	movs	r3, #3
 800460e:	613b      	str	r3, [r7, #16]
 8004610:	e00a      	b.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b80      	cmp	r3, #128	; 0x80
 8004616:	d102      	bne.n	800461e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004618:	2302      	movs	r3, #2
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	e004      	b.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2b70      	cmp	r3, #112	; 0x70
 8004622:	d101      	bne.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004624:	2301      	movs	r3, #1
 8004626:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004628:	4b0b      	ldr	r3, [pc, #44]	; (8004658 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f023 0207 	bic.w	r2, r3, #7
 8004630:	4909      	ldr	r1, [pc, #36]	; (8004658 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4313      	orrs	r3, r2
 8004636:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004638:	4b07      	ldr	r3, [pc, #28]	; (8004658 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	429a      	cmp	r2, r3
 8004644:	d001      	beq.n	800464a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	e000      	b.n	800464c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40021000 	.word	0x40021000
 8004658:	40022000 	.word	0x40022000

0800465c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b086      	sub	sp, #24
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004664:	2300      	movs	r3, #0
 8004666:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004668:	2300      	movs	r3, #0
 800466a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004674:	2b00      	cmp	r3, #0
 8004676:	d041      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800467c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004680:	d02a      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004682:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004686:	d824      	bhi.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004688:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800468c:	d008      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800468e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004692:	d81e      	bhi.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00a      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004698:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800469c:	d010      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800469e:	e018      	b.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046a0:	4b86      	ldr	r3, [pc, #536]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	4a85      	ldr	r2, [pc, #532]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046aa:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046ac:	e015      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3304      	adds	r3, #4
 80046b2:	2100      	movs	r1, #0
 80046b4:	4618      	mov	r0, r3
 80046b6:	f000 fabb 	bl	8004c30 <RCCEx_PLLSAI1_Config>
 80046ba:	4603      	mov	r3, r0
 80046bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046be:	e00c      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3320      	adds	r3, #32
 80046c4:	2100      	movs	r1, #0
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 fba6 	bl	8004e18 <RCCEx_PLLSAI2_Config>
 80046cc:	4603      	mov	r3, r0
 80046ce:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046d0:	e003      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	74fb      	strb	r3, [r7, #19]
      break;
 80046d6:	e000      	b.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80046d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046da:	7cfb      	ldrb	r3, [r7, #19]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10b      	bne.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046e0:	4b76      	ldr	r3, [pc, #472]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046ee:	4973      	ldr	r1, [pc, #460]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046f0:	4313      	orrs	r3, r2
 80046f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046f6:	e001      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046f8:	7cfb      	ldrb	r3, [r7, #19]
 80046fa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d041      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800470c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004710:	d02a      	beq.n	8004768 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004712:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004716:	d824      	bhi.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004718:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800471c:	d008      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800471e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004722:	d81e      	bhi.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004728:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800472c:	d010      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800472e:	e018      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004730:	4b62      	ldr	r3, [pc, #392]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4a61      	ldr	r2, [pc, #388]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800473c:	e015      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	3304      	adds	r3, #4
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fa73 	bl	8004c30 <RCCEx_PLLSAI1_Config>
 800474a:	4603      	mov	r3, r0
 800474c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800474e:	e00c      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3320      	adds	r3, #32
 8004754:	2100      	movs	r1, #0
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fb5e 	bl	8004e18 <RCCEx_PLLSAI2_Config>
 800475c:	4603      	mov	r3, r0
 800475e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004760:	e003      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	74fb      	strb	r3, [r7, #19]
      break;
 8004766:	e000      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004768:	bf00      	nop
    }

    if(ret == HAL_OK)
 800476a:	7cfb      	ldrb	r3, [r7, #19]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10b      	bne.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004770:	4b52      	ldr	r3, [pc, #328]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800477e:	494f      	ldr	r1, [pc, #316]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004786:	e001      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004788:	7cfb      	ldrb	r3, [r7, #19]
 800478a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 80a0 	beq.w	80048da <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800479a:	2300      	movs	r3, #0
 800479c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800479e:	4b47      	ldr	r3, [pc, #284]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x152>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80047ae:	2300      	movs	r3, #0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00d      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047b4:	4b41      	ldr	r3, [pc, #260]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047b8:	4a40      	ldr	r2, [pc, #256]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047be:	6593      	str	r3, [r2, #88]	; 0x58
 80047c0:	4b3e      	ldr	r3, [pc, #248]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047c8:	60bb      	str	r3, [r7, #8]
 80047ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047cc:	2301      	movs	r3, #1
 80047ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80047d0:	4b3b      	ldr	r3, [pc, #236]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a3a      	ldr	r2, [pc, #232]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047dc:	f7fd ffd4 	bl	8002788 <HAL_GetTick>
 80047e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047e2:	e009      	b.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e4:	f7fd ffd0 	bl	8002788 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d902      	bls.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	74fb      	strb	r3, [r7, #19]
        break;
 80047f6:	e005      	b.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047f8:	4b31      	ldr	r3, [pc, #196]	; (80048c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0ef      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004804:	7cfb      	ldrb	r3, [r7, #19]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d15c      	bne.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800480a:	4b2c      	ldr	r3, [pc, #176]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800480c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004814:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d01f      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004822:	697a      	ldr	r2, [r7, #20]
 8004824:	429a      	cmp	r2, r3
 8004826:	d019      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004828:	4b24      	ldr	r3, [pc, #144]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800482a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004832:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004834:	4b21      	ldr	r3, [pc, #132]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483a:	4a20      	ldr	r2, [pc, #128]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800483c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004844:	4b1d      	ldr	r3, [pc, #116]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004846:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484a:	4a1c      	ldr	r2, [pc, #112]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800484c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004850:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004854:	4a19      	ldr	r2, [pc, #100]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d016      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004866:	f7fd ff8f 	bl	8002788 <HAL_GetTick>
 800486a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800486c:	e00b      	b.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800486e:	f7fd ff8b 	bl	8002788 <HAL_GetTick>
 8004872:	4602      	mov	r2, r0
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	1ad3      	subs	r3, r2, r3
 8004878:	f241 3288 	movw	r2, #5000	; 0x1388
 800487c:	4293      	cmp	r3, r2
 800487e:	d902      	bls.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	74fb      	strb	r3, [r7, #19]
            break;
 8004884:	e006      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004886:	4b0d      	ldr	r3, [pc, #52]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ec      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004894:	7cfb      	ldrb	r3, [r7, #19]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10c      	bne.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800489a:	4b08      	ldr	r3, [pc, #32]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800489c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048aa:	4904      	ldr	r1, [pc, #16]	; (80048bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048ac:	4313      	orrs	r3, r2
 80048ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80048b2:	e009      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80048b4:	7cfb      	ldrb	r3, [r7, #19]
 80048b6:	74bb      	strb	r3, [r7, #18]
 80048b8:	e006      	b.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80048ba:	bf00      	nop
 80048bc:	40021000 	.word	0x40021000
 80048c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c4:	7cfb      	ldrb	r3, [r7, #19]
 80048c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048c8:	7c7b      	ldrb	r3, [r7, #17]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d105      	bne.n	80048da <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ce:	4b9e      	ldr	r3, [pc, #632]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d2:	4a9d      	ldr	r2, [pc, #628]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00a      	beq.n	80048fc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048e6:	4b98      	ldr	r3, [pc, #608]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ec:	f023 0203 	bic.w	r2, r3, #3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f4:	4994      	ldr	r1, [pc, #592]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f6:	4313      	orrs	r3, r2
 80048f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d00a      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004908:	4b8f      	ldr	r3, [pc, #572]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490e:	f023 020c 	bic.w	r2, r3, #12
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004916:	498c      	ldr	r1, [pc, #560]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800492a:	4b87      	ldr	r3, [pc, #540]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004930:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	4983      	ldr	r1, [pc, #524]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493a:	4313      	orrs	r3, r2
 800493c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0308 	and.w	r3, r3, #8
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00a      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800494c:	4b7e      	ldr	r3, [pc, #504]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800494e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004952:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495a:	497b      	ldr	r1, [pc, #492]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495c:	4313      	orrs	r3, r2
 800495e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00a      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800496e:	4b76      	ldr	r3, [pc, #472]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800497c:	4972      	ldr	r1, [pc, #456]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497e:	4313      	orrs	r3, r2
 8004980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00a      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004990:	4b6d      	ldr	r3, [pc, #436]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004996:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499e:	496a      	ldr	r1, [pc, #424]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00a      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049b2:	4b65      	ldr	r3, [pc, #404]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049c0:	4961      	ldr	r1, [pc, #388]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80049d4:	4b5c      	ldr	r3, [pc, #368]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e2:	4959      	ldr	r1, [pc, #356]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049f6:	4b54      	ldr	r3, [pc, #336]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a04:	4950      	ldr	r1, [pc, #320]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a06:	4313      	orrs	r3, r2
 8004a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00a      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a18:	4b4b      	ldr	r3, [pc, #300]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a1e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a26:	4948      	ldr	r1, [pc, #288]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a3a:	4b43      	ldr	r3, [pc, #268]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a48:	493f      	ldr	r1, [pc, #252]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d028      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a5c:	4b3a      	ldr	r3, [pc, #232]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a6a:	4937      	ldr	r1, [pc, #220]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a7a:	d106      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a7c:	4b32      	ldr	r3, [pc, #200]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	4a31      	ldr	r2, [pc, #196]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a86:	60d3      	str	r3, [r2, #12]
 8004a88:	e011      	b.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a92:	d10c      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3304      	adds	r3, #4
 8004a98:	2101      	movs	r1, #1
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f000 f8c8 	bl	8004c30 <RCCEx_PLLSAI1_Config>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004aa4:	7cfb      	ldrb	r3, [r7, #19]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004aaa:	7cfb      	ldrb	r3, [r7, #19]
 8004aac:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d028      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004aba:	4b23      	ldr	r3, [pc, #140]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ac8:	491f      	ldr	r1, [pc, #124]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad8:	d106      	bne.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ada:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	4a1a      	ldr	r2, [pc, #104]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ae4:	60d3      	str	r3, [r2, #12]
 8004ae6:	e011      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004af0:	d10c      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	3304      	adds	r3, #4
 8004af6:	2101      	movs	r1, #1
 8004af8:	4618      	mov	r0, r3
 8004afa:	f000 f899 	bl	8004c30 <RCCEx_PLLSAI1_Config>
 8004afe:	4603      	mov	r3, r0
 8004b00:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b02:	7cfb      	ldrb	r3, [r7, #19]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d001      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004b08:	7cfb      	ldrb	r3, [r7, #19]
 8004b0a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d02b      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b18:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b26:	4908      	ldr	r1, [pc, #32]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b36:	d109      	bne.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b38:	4b03      	ldr	r3, [pc, #12]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	4a02      	ldr	r2, [pc, #8]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b42:	60d3      	str	r3, [r2, #12]
 8004b44:	e014      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004b46:	bf00      	nop
 8004b48:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b54:	d10c      	bne.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	3304      	adds	r3, #4
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 f867 	bl	8004c30 <RCCEx_PLLSAI1_Config>
 8004b62:	4603      	mov	r3, r0
 8004b64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b66:	7cfb      	ldrb	r3, [r7, #19]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d001      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004b6c:	7cfb      	ldrb	r3, [r7, #19]
 8004b6e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d02f      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b7c:	4b2b      	ldr	r3, [pc, #172]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b8a:	4928      	ldr	r1, [pc, #160]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b9a:	d10d      	bne.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	2102      	movs	r1, #2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 f844 	bl	8004c30 <RCCEx_PLLSAI1_Config>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bac:	7cfb      	ldrb	r3, [r7, #19]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d014      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004bb2:	7cfb      	ldrb	r3, [r7, #19]
 8004bb4:	74bb      	strb	r3, [r7, #18]
 8004bb6:	e011      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004bbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bc0:	d10c      	bne.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3320      	adds	r3, #32
 8004bc6:	2102      	movs	r1, #2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 f925 	bl	8004e18 <RCCEx_PLLSAI2_Config>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bd2:	7cfb      	ldrb	r3, [r7, #19]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004bd8:	7cfb      	ldrb	r3, [r7, #19]
 8004bda:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00a      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004be8:	4b10      	ldr	r3, [pc, #64]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bee:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bf6:	490d      	ldr	r1, [pc, #52]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00b      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c0a:	4b08      	ldr	r3, [pc, #32]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c10:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c1a:	4904      	ldr	r1, [pc, #16]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004c22:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40021000 	.word	0x40021000

08004c30 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004c3e:	4b75      	ldr	r3, [pc, #468]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	f003 0303 	and.w	r3, r3, #3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d018      	beq.n	8004c7c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c4a:	4b72      	ldr	r3, [pc, #456]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	f003 0203 	and.w	r2, r3, #3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d10d      	bne.n	8004c76 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
       ||
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d009      	beq.n	8004c76 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c62:	4b6c      	ldr	r3, [pc, #432]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	091b      	lsrs	r3, r3, #4
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	1c5a      	adds	r2, r3, #1
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
       ||
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d047      	beq.n	8004d06 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	73fb      	strb	r3, [r7, #15]
 8004c7a:	e044      	b.n	8004d06 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b03      	cmp	r3, #3
 8004c82:	d018      	beq.n	8004cb6 <RCCEx_PLLSAI1_Config+0x86>
 8004c84:	2b03      	cmp	r3, #3
 8004c86:	d825      	bhi.n	8004cd4 <RCCEx_PLLSAI1_Config+0xa4>
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d002      	beq.n	8004c92 <RCCEx_PLLSAI1_Config+0x62>
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d009      	beq.n	8004ca4 <RCCEx_PLLSAI1_Config+0x74>
 8004c90:	e020      	b.n	8004cd4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c92:	4b60      	ldr	r3, [pc, #384]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d11d      	bne.n	8004cda <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ca2:	e01a      	b.n	8004cda <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004ca4:	4b5b      	ldr	r3, [pc, #364]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d116      	bne.n	8004cde <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cb4:	e013      	b.n	8004cde <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004cb6:	4b57      	ldr	r3, [pc, #348]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10f      	bne.n	8004ce2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004cc2:	4b54      	ldr	r3, [pc, #336]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d109      	bne.n	8004ce2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004cd2:	e006      	b.n	8004ce2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd8:	e004      	b.n	8004ce4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cda:	bf00      	nop
 8004cdc:	e002      	b.n	8004ce4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004cde:	bf00      	nop
 8004ce0:	e000      	b.n	8004ce4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ce2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10d      	bne.n	8004d06 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004cea:	4b4a      	ldr	r3, [pc, #296]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6819      	ldr	r1, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	3b01      	subs	r3, #1
 8004cfc:	011b      	lsls	r3, r3, #4
 8004cfe:	430b      	orrs	r3, r1
 8004d00:	4944      	ldr	r1, [pc, #272]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d17d      	bne.n	8004e08 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d0c:	4b41      	ldr	r3, [pc, #260]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a40      	ldr	r2, [pc, #256]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d18:	f7fd fd36 	bl	8002788 <HAL_GetTick>
 8004d1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d1e:	e009      	b.n	8004d34 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d20:	f7fd fd32 	bl	8002788 <HAL_GetTick>
 8004d24:	4602      	mov	r2, r0
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	1ad3      	subs	r3, r2, r3
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d902      	bls.n	8004d34 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	73fb      	strb	r3, [r7, #15]
        break;
 8004d32:	e005      	b.n	8004d40 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d34:	4b37      	ldr	r3, [pc, #220]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1ef      	bne.n	8004d20 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d160      	bne.n	8004e08 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d111      	bne.n	8004d70 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d4c:	4b31      	ldr	r3, [pc, #196]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	6892      	ldr	r2, [r2, #8]
 8004d5c:	0211      	lsls	r1, r2, #8
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	68d2      	ldr	r2, [r2, #12]
 8004d62:	0912      	lsrs	r2, r2, #4
 8004d64:	0452      	lsls	r2, r2, #17
 8004d66:	430a      	orrs	r2, r1
 8004d68:	492a      	ldr	r1, [pc, #168]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	610b      	str	r3, [r1, #16]
 8004d6e:	e027      	b.n	8004dc0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d112      	bne.n	8004d9c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d76:	4b27      	ldr	r3, [pc, #156]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d7e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	6892      	ldr	r2, [r2, #8]
 8004d86:	0211      	lsls	r1, r2, #8
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	6912      	ldr	r2, [r2, #16]
 8004d8c:	0852      	lsrs	r2, r2, #1
 8004d8e:	3a01      	subs	r2, #1
 8004d90:	0552      	lsls	r2, r2, #21
 8004d92:	430a      	orrs	r2, r1
 8004d94:	491f      	ldr	r1, [pc, #124]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	610b      	str	r3, [r1, #16]
 8004d9a:	e011      	b.n	8004dc0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d9c:	4b1d      	ldr	r3, [pc, #116]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004da4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	6892      	ldr	r2, [r2, #8]
 8004dac:	0211      	lsls	r1, r2, #8
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	6952      	ldr	r2, [r2, #20]
 8004db2:	0852      	lsrs	r2, r2, #1
 8004db4:	3a01      	subs	r2, #1
 8004db6:	0652      	lsls	r2, r2, #25
 8004db8:	430a      	orrs	r2, r1
 8004dba:	4916      	ldr	r1, [pc, #88]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004dc0:	4b14      	ldr	r3, [pc, #80]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a13      	ldr	r2, [pc, #76]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004dca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dcc:	f7fd fcdc 	bl	8002788 <HAL_GetTick>
 8004dd0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004dd2:	e009      	b.n	8004de8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dd4:	f7fd fcd8 	bl	8002788 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d902      	bls.n	8004de8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	73fb      	strb	r3, [r7, #15]
          break;
 8004de6:	e005      	b.n	8004df4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004de8:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0ef      	beq.n	8004dd4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004dfa:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dfc:	691a      	ldr	r2, [r3, #16]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	699b      	ldr	r3, [r3, #24]
 8004e02:	4904      	ldr	r1, [pc, #16]	; (8004e14 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	40021000 	.word	0x40021000

08004e18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e22:	2300      	movs	r3, #0
 8004e24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004e26:	4b6a      	ldr	r3, [pc, #424]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d018      	beq.n	8004e64 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004e32:	4b67      	ldr	r3, [pc, #412]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f003 0203 	and.w	r2, r3, #3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d10d      	bne.n	8004e5e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
       ||
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d009      	beq.n	8004e5e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e4a:	4b61      	ldr	r3, [pc, #388]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	091b      	lsrs	r3, r3, #4
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
       ||
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d047      	beq.n	8004eee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	73fb      	strb	r3, [r7, #15]
 8004e62:	e044      	b.n	8004eee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b03      	cmp	r3, #3
 8004e6a:	d018      	beq.n	8004e9e <RCCEx_PLLSAI2_Config+0x86>
 8004e6c:	2b03      	cmp	r3, #3
 8004e6e:	d825      	bhi.n	8004ebc <RCCEx_PLLSAI2_Config+0xa4>
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d002      	beq.n	8004e7a <RCCEx_PLLSAI2_Config+0x62>
 8004e74:	2b02      	cmp	r3, #2
 8004e76:	d009      	beq.n	8004e8c <RCCEx_PLLSAI2_Config+0x74>
 8004e78:	e020      	b.n	8004ebc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e7a:	4b55      	ldr	r3, [pc, #340]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d11d      	bne.n	8004ec2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e8a:	e01a      	b.n	8004ec2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e8c:	4b50      	ldr	r3, [pc, #320]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d116      	bne.n	8004ec6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e9c:	e013      	b.n	8004ec6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e9e:	4b4c      	ldr	r3, [pc, #304]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10f      	bne.n	8004eca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004eaa:	4b49      	ldr	r3, [pc, #292]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004eba:	e006      	b.n	8004eca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec0:	e004      	b.n	8004ecc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ec2:	bf00      	nop
 8004ec4:	e002      	b.n	8004ecc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004ec6:	bf00      	nop
 8004ec8:	e000      	b.n	8004ecc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004eca:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10d      	bne.n	8004eee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ed2:	4b3f      	ldr	r3, [pc, #252]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6819      	ldr	r1, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	430b      	orrs	r3, r1
 8004ee8:	4939      	ldr	r1, [pc, #228]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004eee:	7bfb      	ldrb	r3, [r7, #15]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d167      	bne.n	8004fc4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004ef4:	4b36      	ldr	r3, [pc, #216]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a35      	ldr	r2, [pc, #212]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f00:	f7fd fc42 	bl	8002788 <HAL_GetTick>
 8004f04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f06:	e009      	b.n	8004f1c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f08:	f7fd fc3e 	bl	8002788 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d902      	bls.n	8004f1c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	73fb      	strb	r3, [r7, #15]
        break;
 8004f1a:	e005      	b.n	8004f28 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f1c:	4b2c      	ldr	r3, [pc, #176]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1ef      	bne.n	8004f08 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004f28:	7bfb      	ldrb	r3, [r7, #15]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d14a      	bne.n	8004fc4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d111      	bne.n	8004f58 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f34:	4b26      	ldr	r3, [pc, #152]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004f3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6892      	ldr	r2, [r2, #8]
 8004f44:	0211      	lsls	r1, r2, #8
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	68d2      	ldr	r2, [r2, #12]
 8004f4a:	0912      	lsrs	r2, r2, #4
 8004f4c:	0452      	lsls	r2, r2, #17
 8004f4e:	430a      	orrs	r2, r1
 8004f50:	491f      	ldr	r1, [pc, #124]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	614b      	str	r3, [r1, #20]
 8004f56:	e011      	b.n	8004f7c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f58:	4b1d      	ldr	r3, [pc, #116]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f60:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6892      	ldr	r2, [r2, #8]
 8004f68:	0211      	lsls	r1, r2, #8
 8004f6a:	687a      	ldr	r2, [r7, #4]
 8004f6c:	6912      	ldr	r2, [r2, #16]
 8004f6e:	0852      	lsrs	r2, r2, #1
 8004f70:	3a01      	subs	r2, #1
 8004f72:	0652      	lsls	r2, r2, #25
 8004f74:	430a      	orrs	r2, r1
 8004f76:	4916      	ldr	r1, [pc, #88]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f7c:	4b14      	ldr	r3, [pc, #80]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a13      	ldr	r2, [pc, #76]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f88:	f7fd fbfe 	bl	8002788 <HAL_GetTick>
 8004f8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f8e:	e009      	b.n	8004fa4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f90:	f7fd fbfa 	bl	8002788 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d902      	bls.n	8004fa4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	73fb      	strb	r3, [r7, #15]
          break;
 8004fa2:	e005      	b.n	8004fb0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004fa4:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d0ef      	beq.n	8004f90 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d106      	bne.n	8004fc4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004fb6:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fb8:	695a      	ldr	r2, [r3, #20]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	4904      	ldr	r1, [pc, #16]	; (8004fd0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000

08004fd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e095      	b.n	8005112 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d108      	bne.n	8005000 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ff6:	d009      	beq.n	800500c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	61da      	str	r2, [r3, #28]
 8004ffe:	e005      	b.n	800500c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fd f9c4 	bl	80023b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005042:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800504c:	d902      	bls.n	8005054 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800504e:	2300      	movs	r3, #0
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	e002      	b.n	800505a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005058:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005062:	d007      	beq.n	8005074 <HAL_SPI_Init+0xa0>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800506c:	d002      	beq.n	8005074 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005084:	431a      	orrs	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	695b      	ldr	r3, [r3, #20]
 8005094:	f003 0301 	and.w	r3, r3, #1
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	699b      	ldr	r3, [r3, #24]
 800509e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	69db      	ldr	r3, [r3, #28]
 80050a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050ac:	431a      	orrs	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b6:	ea42 0103 	orr.w	r1, r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	0c1b      	lsrs	r3, r3, #16
 80050d0:	f003 0204 	and.w	r2, r3, #4
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	f003 0310 	and.w	r3, r3, #16
 80050dc:	431a      	orrs	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050e2:	f003 0308 	and.w	r3, r3, #8
 80050e6:	431a      	orrs	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80050f0:	ea42 0103 	orr.w	r1, r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	430a      	orrs	r2, r1
 8005100:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800511a:	b580      	push	{r7, lr}
 800511c:	b08a      	sub	sp, #40	; 0x28
 800511e:	af00      	add	r7, sp, #0
 8005120:	60f8      	str	r0, [r7, #12]
 8005122:	60b9      	str	r1, [r7, #8]
 8005124:	607a      	str	r2, [r7, #4]
 8005126:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005128:	2301      	movs	r3, #1
 800512a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800512c:	2300      	movs	r3, #0
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005138:	2b01      	cmp	r3, #1
 800513a:	d101      	bne.n	8005140 <HAL_SPI_TransmitReceive+0x26>
 800513c:	2302      	movs	r3, #2
 800513e:	e1fb      	b.n	8005538 <HAL_SPI_TransmitReceive+0x41e>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005148:	f7fd fb1e 	bl	8002788 <HAL_GetTick>
 800514c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005154:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800515c:	887b      	ldrh	r3, [r7, #2]
 800515e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005160:	887b      	ldrh	r3, [r7, #2]
 8005162:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005164:	7efb      	ldrb	r3, [r7, #27]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d00e      	beq.n	8005188 <HAL_SPI_TransmitReceive+0x6e>
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005170:	d106      	bne.n	8005180 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d102      	bne.n	8005180 <HAL_SPI_TransmitReceive+0x66>
 800517a:	7efb      	ldrb	r3, [r7, #27]
 800517c:	2b04      	cmp	r3, #4
 800517e:	d003      	beq.n	8005188 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005180:	2302      	movs	r3, #2
 8005182:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005186:	e1cd      	b.n	8005524 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d005      	beq.n	800519a <HAL_SPI_TransmitReceive+0x80>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <HAL_SPI_TransmitReceive+0x80>
 8005194:	887b      	ldrh	r3, [r7, #2]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d103      	bne.n	80051a2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80051a0:	e1c0      	b.n	8005524 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b04      	cmp	r3, #4
 80051ac:	d003      	beq.n	80051b6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2205      	movs	r2, #5
 80051b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2200      	movs	r2, #0
 80051ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	887a      	ldrh	r2, [r7, #2]
 80051c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	887a      	ldrh	r2, [r7, #2]
 80051ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	887a      	ldrh	r2, [r7, #2]
 80051dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	887a      	ldrh	r2, [r7, #2]
 80051e2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80051f8:	d802      	bhi.n	8005200 <HAL_SPI_TransmitReceive+0xe6>
 80051fa:	8a3b      	ldrh	r3, [r7, #16]
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d908      	bls.n	8005212 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	685a      	ldr	r2, [r3, #4]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800520e:	605a      	str	r2, [r3, #4]
 8005210:	e007      	b.n	8005222 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685a      	ldr	r2, [r3, #4]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005220:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800522c:	2b40      	cmp	r3, #64	; 0x40
 800522e:	d007      	beq.n	8005240 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800523e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005248:	d97c      	bls.n	8005344 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d002      	beq.n	8005258 <HAL_SPI_TransmitReceive+0x13e>
 8005252:	8a7b      	ldrh	r3, [r7, #18]
 8005254:	2b01      	cmp	r3, #1
 8005256:	d169      	bne.n	800532c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800525c:	881a      	ldrh	r2, [r3, #0]
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	1c9a      	adds	r2, r3, #2
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005272:	b29b      	uxth	r3, r3
 8005274:	3b01      	subs	r3, #1
 8005276:	b29a      	uxth	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800527c:	e056      	b.n	800532c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b02      	cmp	r3, #2
 800528a:	d11b      	bne.n	80052c4 <HAL_SPI_TransmitReceive+0x1aa>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005290:	b29b      	uxth	r3, r3
 8005292:	2b00      	cmp	r3, #0
 8005294:	d016      	beq.n	80052c4 <HAL_SPI_TransmitReceive+0x1aa>
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	2b01      	cmp	r3, #1
 800529a:	d113      	bne.n	80052c4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	881a      	ldrh	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	1c9a      	adds	r2, r3, #2
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d11c      	bne.n	800530c <HAL_SPI_TransmitReceive+0x1f2>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d016      	beq.n	800530c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68da      	ldr	r2, [r3, #12]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e8:	b292      	uxth	r2, r2
 80052ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f0:	1c9a      	adds	r2, r3, #2
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	3b01      	subs	r3, #1
 8005300:	b29a      	uxth	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005308:	2301      	movs	r3, #1
 800530a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800530c:	f7fd fa3c 	bl	8002788 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005318:	429a      	cmp	r2, r3
 800531a:	d807      	bhi.n	800532c <HAL_SPI_TransmitReceive+0x212>
 800531c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005322:	d003      	beq.n	800532c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800532a:	e0fb      	b.n	8005524 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005330:	b29b      	uxth	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1a3      	bne.n	800527e <HAL_SPI_TransmitReceive+0x164>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d19d      	bne.n	800527e <HAL_SPI_TransmitReceive+0x164>
 8005342:	e0df      	b.n	8005504 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d003      	beq.n	8005354 <HAL_SPI_TransmitReceive+0x23a>
 800534c:	8a7b      	ldrh	r3, [r7, #18]
 800534e:	2b01      	cmp	r3, #1
 8005350:	f040 80cb 	bne.w	80054ea <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b01      	cmp	r3, #1
 800535c:	d912      	bls.n	8005384 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	881a      	ldrh	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536e:	1c9a      	adds	r2, r3, #2
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b02      	subs	r3, #2
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005382:	e0b2      	b.n	80054ea <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	330c      	adds	r3, #12
 800538e:	7812      	ldrb	r2, [r2, #0]
 8005390:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005396:	1c5a      	adds	r2, r3, #1
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053aa:	e09e      	b.n	80054ea <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d134      	bne.n	8005424 <HAL_SPI_TransmitReceive+0x30a>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053be:	b29b      	uxth	r3, r3
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d02f      	beq.n	8005424 <HAL_SPI_TransmitReceive+0x30a>
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d12c      	bne.n	8005424 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d912      	bls.n	80053fa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d8:	881a      	ldrh	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e4:	1c9a      	adds	r2, r3, #2
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b02      	subs	r3, #2
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053f8:	e012      	b.n	8005420 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	330c      	adds	r3, #12
 8005404:	7812      	ldrb	r2, [r2, #0]
 8005406:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005416:	b29b      	uxth	r3, r3
 8005418:	3b01      	subs	r3, #1
 800541a:	b29a      	uxth	r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f003 0301 	and.w	r3, r3, #1
 800542e:	2b01      	cmp	r3, #1
 8005430:	d148      	bne.n	80054c4 <HAL_SPI_TransmitReceive+0x3aa>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d042      	beq.n	80054c4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b01      	cmp	r3, #1
 8005448:	d923      	bls.n	8005492 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	b292      	uxth	r2, r2
 8005456:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545c:	1c9a      	adds	r2, r3, #2
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005468:	b29b      	uxth	r3, r3
 800546a:	3b02      	subs	r3, #2
 800546c:	b29a      	uxth	r2, r3
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b01      	cmp	r3, #1
 800547e:	d81f      	bhi.n	80054c0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685a      	ldr	r2, [r3, #4]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800548e:	605a      	str	r2, [r3, #4]
 8005490:	e016      	b.n	80054c0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f103 020c 	add.w	r2, r3, #12
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549e:	7812      	ldrb	r2, [r2, #0]
 80054a0:	b2d2      	uxtb	r2, r2
 80054a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054b4:	b29b      	uxth	r3, r3
 80054b6:	3b01      	subs	r3, #1
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054c0:	2301      	movs	r3, #1
 80054c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054c4:	f7fd f960 	bl	8002788 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d803      	bhi.n	80054dc <HAL_SPI_TransmitReceive+0x3c2>
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054da:	d102      	bne.n	80054e2 <HAL_SPI_TransmitReceive+0x3c8>
 80054dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d103      	bne.n	80054ea <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80054e8:	e01c      	b.n	8005524 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f47f af5b 	bne.w	80053ac <HAL_SPI_TransmitReceive+0x292>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	f47f af54 	bne.w	80053ac <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005504:	69fa      	ldr	r2, [r7, #28]
 8005506:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 f937 	bl	800577c <SPI_EndRxTxTransaction>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d006      	beq.n	8005522 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2220      	movs	r2, #32
 800551e:	661a      	str	r2, [r3, #96]	; 0x60
 8005520:	e000      	b.n	8005524 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005522:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005534:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005538:	4618      	mov	r0, r3
 800553a:	3728      	adds	r7, #40	; 0x28
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b088      	sub	sp, #32
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	603b      	str	r3, [r7, #0]
 800554c:	4613      	mov	r3, r2
 800554e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005550:	f7fd f91a 	bl	8002788 <HAL_GetTick>
 8005554:	4602      	mov	r2, r0
 8005556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005558:	1a9b      	subs	r3, r3, r2
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	4413      	add	r3, r2
 800555e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005560:	f7fd f912 	bl	8002788 <HAL_GetTick>
 8005564:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005566:	4b39      	ldr	r3, [pc, #228]	; (800564c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	015b      	lsls	r3, r3, #5
 800556c:	0d1b      	lsrs	r3, r3, #20
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	fb02 f303 	mul.w	r3, r2, r3
 8005574:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005576:	e054      	b.n	8005622 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557e:	d050      	beq.n	8005622 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005580:	f7fd f902 	bl	8002788 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	69fa      	ldr	r2, [r7, #28]
 800558c:	429a      	cmp	r2, r3
 800558e:	d902      	bls.n	8005596 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d13d      	bne.n	8005612 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055ae:	d111      	bne.n	80055d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055b8:	d004      	beq.n	80055c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055c2:	d107      	bne.n	80055d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055dc:	d10f      	bne.n	80055fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800560e:	2303      	movs	r3, #3
 8005610:	e017      	b.n	8005642 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d101      	bne.n	800561c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005618:	2300      	movs	r3, #0
 800561a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	3b01      	subs	r3, #1
 8005620:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689a      	ldr	r2, [r3, #8]
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	4013      	ands	r3, r2
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	429a      	cmp	r2, r3
 8005630:	bf0c      	ite	eq
 8005632:	2301      	moveq	r3, #1
 8005634:	2300      	movne	r3, #0
 8005636:	b2db      	uxtb	r3, r3
 8005638:	461a      	mov	r2, r3
 800563a:	79fb      	ldrb	r3, [r7, #7]
 800563c:	429a      	cmp	r2, r3
 800563e:	d19b      	bne.n	8005578 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3720      	adds	r7, #32
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	200015fc 	.word	0x200015fc

08005650 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08a      	sub	sp, #40	; 0x28
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800565e:	2300      	movs	r3, #0
 8005660:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005662:	f7fd f891 	bl	8002788 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	1a9b      	subs	r3, r3, r2
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	4413      	add	r3, r2
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005672:	f7fd f889 	bl	8002788 <HAL_GetTick>
 8005676:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	330c      	adds	r3, #12
 800567e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005680:	4b3d      	ldr	r3, [pc, #244]	; (8005778 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	00da      	lsls	r2, r3, #3
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	0d1b      	lsrs	r3, r3, #20
 8005690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005692:	fb02 f303 	mul.w	r3, r2, r3
 8005696:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005698:	e060      	b.n	800575c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80056a0:	d107      	bne.n	80056b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d104      	bne.n	80056b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80056b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b8:	d050      	beq.n	800575c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056ba:	f7fd f865 	bl	8002788 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d902      	bls.n	80056d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d13d      	bne.n	800574c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056e8:	d111      	bne.n	800570e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056f2:	d004      	beq.n	80056fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056fc:	d107      	bne.n	800570e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800570c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005712:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005716:	d10f      	bne.n	8005738 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681a      	ldr	r2, [r3, #0]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005736:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2201      	movs	r2, #1
 800573c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e010      	b.n	800576e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d101      	bne.n	8005756 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	3b01      	subs	r3, #1
 800575a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	4013      	ands	r3, r2
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	429a      	cmp	r2, r3
 800576a:	d196      	bne.n	800569a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3728      	adds	r7, #40	; 0x28
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	200015fc 	.word	0x200015fc

0800577c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af02      	add	r7, sp, #8
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	9300      	str	r3, [sp, #0]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2200      	movs	r2, #0
 8005790:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005794:	68f8      	ldr	r0, [r7, #12]
 8005796:	f7ff ff5b 	bl	8005650 <SPI_WaitFifoStateUntilTimeout>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d007      	beq.n	80057b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a4:	f043 0220 	orr.w	r2, r3, #32
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e027      	b.n	8005800 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2200      	movs	r2, #0
 80057b8:	2180      	movs	r1, #128	; 0x80
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f7ff fec0 	bl	8005540 <SPI_WaitFlagStateUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d007      	beq.n	80057d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ca:	f043 0220 	orr.w	r2, r3, #32
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e014      	b.n	8005800 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	9300      	str	r3, [sp, #0]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2200      	movs	r2, #0
 80057de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f7ff ff34 	bl	8005650 <SPI_WaitFifoStateUntilTimeout>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d007      	beq.n	80057fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057f2:	f043 0220 	orr.w	r2, r3, #32
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e000      	b.n	8005800 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e049      	b.n	80058ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d106      	bne.n	8005834 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fc fe22 	bl	8002478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2202      	movs	r2, #2
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3304      	adds	r3, #4
 8005844:	4619      	mov	r1, r3
 8005846:	4610      	mov	r0, r2
 8005848:	f000 fac0 	bl	8005dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d001      	beq.n	80058d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e04f      	b.n	8005970 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68da      	ldr	r2, [r3, #12]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f042 0201 	orr.w	r2, r2, #1
 80058e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a23      	ldr	r2, [pc, #140]	; (800597c <HAL_TIM_Base_Start_IT+0xc4>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d01d      	beq.n	800592e <HAL_TIM_Base_Start_IT+0x76>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fa:	d018      	beq.n	800592e <HAL_TIM_Base_Start_IT+0x76>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a1f      	ldr	r2, [pc, #124]	; (8005980 <HAL_TIM_Base_Start_IT+0xc8>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d013      	beq.n	800592e <HAL_TIM_Base_Start_IT+0x76>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a1e      	ldr	r2, [pc, #120]	; (8005984 <HAL_TIM_Base_Start_IT+0xcc>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d00e      	beq.n	800592e <HAL_TIM_Base_Start_IT+0x76>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a1c      	ldr	r2, [pc, #112]	; (8005988 <HAL_TIM_Base_Start_IT+0xd0>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d009      	beq.n	800592e <HAL_TIM_Base_Start_IT+0x76>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a1b      	ldr	r2, [pc, #108]	; (800598c <HAL_TIM_Base_Start_IT+0xd4>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d004      	beq.n	800592e <HAL_TIM_Base_Start_IT+0x76>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a19      	ldr	r2, [pc, #100]	; (8005990 <HAL_TIM_Base_Start_IT+0xd8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d115      	bne.n	800595a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	4b17      	ldr	r3, [pc, #92]	; (8005994 <HAL_TIM_Base_Start_IT+0xdc>)
 8005936:	4013      	ands	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2b06      	cmp	r3, #6
 800593e:	d015      	beq.n	800596c <HAL_TIM_Base_Start_IT+0xb4>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005946:	d011      	beq.n	800596c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0201 	orr.w	r2, r2, #1
 8005956:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005958:	e008      	b.n	800596c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f042 0201 	orr.w	r2, r2, #1
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	e000      	b.n	800596e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3714      	adds	r7, #20
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	40012c00 	.word	0x40012c00
 8005980:	40000400 	.word	0x40000400
 8005984:	40000800 	.word	0x40000800
 8005988:	40000c00 	.word	0x40000c00
 800598c:	40013400 	.word	0x40013400
 8005990:	40014000 	.word	0x40014000
 8005994:	00010007 	.word	0x00010007

08005998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d122      	bne.n	80059f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d11b      	bne.n	80059f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f06f 0202 	mvn.w	r2, #2
 80059c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	f003 0303 	and.w	r3, r3, #3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d003      	beq.n	80059e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f9d8 	bl	8005d90 <HAL_TIM_IC_CaptureCallback>
 80059e0:	e005      	b.n	80059ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f9ca 	bl	8005d7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f9db 	bl	8005da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	f003 0304 	and.w	r3, r3, #4
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d122      	bne.n	8005a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b04      	cmp	r3, #4
 8005a0e:	d11b      	bne.n	8005a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f06f 0204 	mvn.w	r2, #4
 8005a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f9ae 	bl	8005d90 <HAL_TIM_IC_CaptureCallback>
 8005a34:	e005      	b.n	8005a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f9a0 	bl	8005d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f9b1 	bl	8005da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0308 	and.w	r3, r3, #8
 8005a52:	2b08      	cmp	r3, #8
 8005a54:	d122      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0308 	and.w	r3, r3, #8
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	d11b      	bne.n	8005a9c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0208 	mvn.w	r2, #8
 8005a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2204      	movs	r2, #4
 8005a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 f984 	bl	8005d90 <HAL_TIM_IC_CaptureCallback>
 8005a88:	e005      	b.n	8005a96 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f976 	bl	8005d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f987 	bl	8005da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f003 0310 	and.w	r3, r3, #16
 8005aa6:	2b10      	cmp	r3, #16
 8005aa8:	d122      	bne.n	8005af0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	f003 0310 	and.w	r3, r3, #16
 8005ab4:	2b10      	cmp	r3, #16
 8005ab6:	d11b      	bne.n	8005af0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f06f 0210 	mvn.w	r2, #16
 8005ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2208      	movs	r2, #8
 8005ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f95a 	bl	8005d90 <HAL_TIM_IC_CaptureCallback>
 8005adc:	e005      	b.n	8005aea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 f94c 	bl	8005d7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f95d 	bl	8005da4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d10e      	bne.n	8005b1c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f003 0301 	and.w	r3, r3, #1
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d107      	bne.n	8005b1c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f06f 0201 	mvn.w	r2, #1
 8005b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f926 	bl	8005d68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b26:	2b80      	cmp	r3, #128	; 0x80
 8005b28:	d10e      	bne.n	8005b48 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b34:	2b80      	cmp	r3, #128	; 0x80
 8005b36:	d107      	bne.n	8005b48 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fb08 	bl	8006158 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b56:	d10e      	bne.n	8005b76 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b62:	2b80      	cmp	r3, #128	; 0x80
 8005b64:	d107      	bne.n	8005b76 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005b6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 fafb 	bl	800616c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b80:	2b40      	cmp	r3, #64	; 0x40
 8005b82:	d10e      	bne.n	8005ba2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68db      	ldr	r3, [r3, #12]
 8005b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8e:	2b40      	cmp	r3, #64	; 0x40
 8005b90:	d107      	bne.n	8005ba2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f90b 	bl	8005db8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	f003 0320 	and.w	r3, r3, #32
 8005bac:	2b20      	cmp	r3, #32
 8005bae:	d10e      	bne.n	8005bce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f003 0320 	and.w	r3, r3, #32
 8005bba:	2b20      	cmp	r3, #32
 8005bbc:	d107      	bne.n	8005bce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f06f 0220 	mvn.w	r2, #32
 8005bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fabb 	bl	8006144 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bce:	bf00      	nop
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005be0:	2300      	movs	r3, #0
 8005be2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d101      	bne.n	8005bf2 <HAL_TIM_ConfigClockSource+0x1c>
 8005bee:	2302      	movs	r3, #2
 8005bf0:	e0b6      	b.n	8005d60 <HAL_TIM_ConfigClockSource+0x18a>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c10:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c14:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c1c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c2e:	d03e      	beq.n	8005cae <HAL_TIM_ConfigClockSource+0xd8>
 8005c30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c34:	f200 8087 	bhi.w	8005d46 <HAL_TIM_ConfigClockSource+0x170>
 8005c38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3c:	f000 8086 	beq.w	8005d4c <HAL_TIM_ConfigClockSource+0x176>
 8005c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c44:	d87f      	bhi.n	8005d46 <HAL_TIM_ConfigClockSource+0x170>
 8005c46:	2b70      	cmp	r3, #112	; 0x70
 8005c48:	d01a      	beq.n	8005c80 <HAL_TIM_ConfigClockSource+0xaa>
 8005c4a:	2b70      	cmp	r3, #112	; 0x70
 8005c4c:	d87b      	bhi.n	8005d46 <HAL_TIM_ConfigClockSource+0x170>
 8005c4e:	2b60      	cmp	r3, #96	; 0x60
 8005c50:	d050      	beq.n	8005cf4 <HAL_TIM_ConfigClockSource+0x11e>
 8005c52:	2b60      	cmp	r3, #96	; 0x60
 8005c54:	d877      	bhi.n	8005d46 <HAL_TIM_ConfigClockSource+0x170>
 8005c56:	2b50      	cmp	r3, #80	; 0x50
 8005c58:	d03c      	beq.n	8005cd4 <HAL_TIM_ConfigClockSource+0xfe>
 8005c5a:	2b50      	cmp	r3, #80	; 0x50
 8005c5c:	d873      	bhi.n	8005d46 <HAL_TIM_ConfigClockSource+0x170>
 8005c5e:	2b40      	cmp	r3, #64	; 0x40
 8005c60:	d058      	beq.n	8005d14 <HAL_TIM_ConfigClockSource+0x13e>
 8005c62:	2b40      	cmp	r3, #64	; 0x40
 8005c64:	d86f      	bhi.n	8005d46 <HAL_TIM_ConfigClockSource+0x170>
 8005c66:	2b30      	cmp	r3, #48	; 0x30
 8005c68:	d064      	beq.n	8005d34 <HAL_TIM_ConfigClockSource+0x15e>
 8005c6a:	2b30      	cmp	r3, #48	; 0x30
 8005c6c:	d86b      	bhi.n	8005d46 <HAL_TIM_ConfigClockSource+0x170>
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	d060      	beq.n	8005d34 <HAL_TIM_ConfigClockSource+0x15e>
 8005c72:	2b20      	cmp	r3, #32
 8005c74:	d867      	bhi.n	8005d46 <HAL_TIM_ConfigClockSource+0x170>
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d05c      	beq.n	8005d34 <HAL_TIM_ConfigClockSource+0x15e>
 8005c7a:	2b10      	cmp	r3, #16
 8005c7c:	d05a      	beq.n	8005d34 <HAL_TIM_ConfigClockSource+0x15e>
 8005c7e:	e062      	b.n	8005d46 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6818      	ldr	r0, [r3, #0]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	6899      	ldr	r1, [r3, #8]
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f000 f9b0 	bl	8005ff4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ca2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	609a      	str	r2, [r3, #8]
      break;
 8005cac:	e04f      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6818      	ldr	r0, [r3, #0]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	6899      	ldr	r1, [r3, #8]
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f000 f999 	bl	8005ff4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	689a      	ldr	r2, [r3, #8]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cd0:	609a      	str	r2, [r3, #8]
      break;
 8005cd2:	e03c      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6818      	ldr	r0, [r3, #0]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	6859      	ldr	r1, [r3, #4]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	f000 f90d 	bl	8005f00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2150      	movs	r1, #80	; 0x50
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 f966 	bl	8005fbe <TIM_ITRx_SetConfig>
      break;
 8005cf2:	e02c      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	6859      	ldr	r1, [r3, #4]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	68db      	ldr	r3, [r3, #12]
 8005d00:	461a      	mov	r2, r3
 8005d02:	f000 f92c 	bl	8005f5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2160      	movs	r1, #96	; 0x60
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f000 f956 	bl	8005fbe <TIM_ITRx_SetConfig>
      break;
 8005d12:	e01c      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6818      	ldr	r0, [r3, #0]
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	6859      	ldr	r1, [r3, #4]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	461a      	mov	r2, r3
 8005d22:	f000 f8ed 	bl	8005f00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2140      	movs	r1, #64	; 0x40
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 f946 	bl	8005fbe <TIM_ITRx_SetConfig>
      break;
 8005d32:	e00c      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4610      	mov	r0, r2
 8005d40:	f000 f93d 	bl	8005fbe <TIM_ITRx_SetConfig>
      break;
 8005d44:	e003      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	73fb      	strb	r3, [r7, #15]
      break;
 8005d4a:	e000      	b.n	8005d4e <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d4c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d84:	bf00      	nop
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b083      	sub	sp, #12
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d98:	bf00      	nop
 8005d9a:	370c      	adds	r7, #12
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b083      	sub	sp, #12
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005dac:	bf00      	nop
 8005dae:	370c      	adds	r7, #12
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr

08005db8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	4a40      	ldr	r2, [pc, #256]	; (8005ee0 <TIM_Base_SetConfig+0x114>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d013      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dea:	d00f      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a3d      	ldr	r2, [pc, #244]	; (8005ee4 <TIM_Base_SetConfig+0x118>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00b      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a3c      	ldr	r2, [pc, #240]	; (8005ee8 <TIM_Base_SetConfig+0x11c>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d007      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a3b      	ldr	r2, [pc, #236]	; (8005eec <TIM_Base_SetConfig+0x120>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d003      	beq.n	8005e0c <TIM_Base_SetConfig+0x40>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a3a      	ldr	r2, [pc, #232]	; (8005ef0 <TIM_Base_SetConfig+0x124>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d108      	bne.n	8005e1e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a2f      	ldr	r2, [pc, #188]	; (8005ee0 <TIM_Base_SetConfig+0x114>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d01f      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e2c:	d01b      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a2c      	ldr	r2, [pc, #176]	; (8005ee4 <TIM_Base_SetConfig+0x118>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d017      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a2b      	ldr	r2, [pc, #172]	; (8005ee8 <TIM_Base_SetConfig+0x11c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d013      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a2a      	ldr	r2, [pc, #168]	; (8005eec <TIM_Base_SetConfig+0x120>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00f      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a29      	ldr	r2, [pc, #164]	; (8005ef0 <TIM_Base_SetConfig+0x124>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00b      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a28      	ldr	r2, [pc, #160]	; (8005ef4 <TIM_Base_SetConfig+0x128>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d007      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a27      	ldr	r2, [pc, #156]	; (8005ef8 <TIM_Base_SetConfig+0x12c>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d003      	beq.n	8005e66 <TIM_Base_SetConfig+0x9a>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	4a26      	ldr	r2, [pc, #152]	; (8005efc <TIM_Base_SetConfig+0x130>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d108      	bne.n	8005e78 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	695b      	ldr	r3, [r3, #20]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	689a      	ldr	r2, [r3, #8]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a10      	ldr	r2, [pc, #64]	; (8005ee0 <TIM_Base_SetConfig+0x114>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d00f      	beq.n	8005ec4 <TIM_Base_SetConfig+0xf8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a12      	ldr	r2, [pc, #72]	; (8005ef0 <TIM_Base_SetConfig+0x124>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d00b      	beq.n	8005ec4 <TIM_Base_SetConfig+0xf8>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a11      	ldr	r2, [pc, #68]	; (8005ef4 <TIM_Base_SetConfig+0x128>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d007      	beq.n	8005ec4 <TIM_Base_SetConfig+0xf8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a10      	ldr	r2, [pc, #64]	; (8005ef8 <TIM_Base_SetConfig+0x12c>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d003      	beq.n	8005ec4 <TIM_Base_SetConfig+0xf8>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a0f      	ldr	r2, [pc, #60]	; (8005efc <TIM_Base_SetConfig+0x130>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d103      	bne.n	8005ecc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	691a      	ldr	r2, [r3, #16]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2201      	movs	r2, #1
 8005ed0:	615a      	str	r2, [r3, #20]
}
 8005ed2:	bf00      	nop
 8005ed4:	3714      	adds	r7, #20
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40012c00 	.word	0x40012c00
 8005ee4:	40000400 	.word	0x40000400
 8005ee8:	40000800 	.word	0x40000800
 8005eec:	40000c00 	.word	0x40000c00
 8005ef0:	40013400 	.word	0x40013400
 8005ef4:	40014000 	.word	0x40014000
 8005ef8:	40014400 	.word	0x40014400
 8005efc:	40014800 	.word	0x40014800

08005f00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6a1b      	ldr	r3, [r3, #32]
 8005f10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	f023 0201 	bic.w	r2, r3, #1
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f023 030a 	bic.w	r3, r3, #10
 8005f3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	621a      	str	r2, [r3, #32]
}
 8005f52:	bf00      	nop
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b087      	sub	sp, #28
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	60f8      	str	r0, [r7, #12]
 8005f66:	60b9      	str	r1, [r7, #8]
 8005f68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
 8005f6e:	f023 0210 	bic.w	r2, r3, #16
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	699b      	ldr	r3, [r3, #24]
 8005f7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	031b      	lsls	r3, r3, #12
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	011b      	lsls	r3, r3, #4
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	693a      	ldr	r2, [r7, #16]
 8005fb0:	621a      	str	r2, [r3, #32]
}
 8005fb2:	bf00      	nop
 8005fb4:	371c      	adds	r7, #28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b085      	sub	sp, #20
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	f043 0307 	orr.w	r3, r3, #7
 8005fe0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	609a      	str	r2, [r3, #8]
}
 8005fe8:	bf00      	nop
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b087      	sub	sp, #28
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800600e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	021a      	lsls	r2, r3, #8
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	431a      	orrs	r2, r3
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	4313      	orrs	r3, r2
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	697a      	ldr	r2, [r7, #20]
 8006026:	609a      	str	r2, [r3, #8]
}
 8006028:	bf00      	nop
 800602a:	371c      	adds	r7, #28
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006034:	b480      	push	{r7}
 8006036:	b085      	sub	sp, #20
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006044:	2b01      	cmp	r3, #1
 8006046:	d101      	bne.n	800604c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006048:	2302      	movs	r3, #2
 800604a:	e068      	b.n	800611e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a2e      	ldr	r2, [pc, #184]	; (800612c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d004      	beq.n	8006080 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a2d      	ldr	r2, [pc, #180]	; (8006130 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d108      	bne.n	8006092 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006086:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	68fa      	ldr	r2, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006098:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1e      	ldr	r2, [pc, #120]	; (800612c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d01d      	beq.n	80060f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060be:	d018      	beq.n	80060f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a1b      	ldr	r2, [pc, #108]	; (8006134 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d013      	beq.n	80060f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a1a      	ldr	r2, [pc, #104]	; (8006138 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d00e      	beq.n	80060f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a18      	ldr	r2, [pc, #96]	; (800613c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d009      	beq.n	80060f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a13      	ldr	r2, [pc, #76]	; (8006130 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d004      	beq.n	80060f2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a14      	ldr	r2, [pc, #80]	; (8006140 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d10c      	bne.n	800610c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	68ba      	ldr	r2, [r7, #8]
 8006100:	4313      	orrs	r3, r2
 8006102:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	40012c00 	.word	0x40012c00
 8006130:	40013400 	.word	0x40013400
 8006134:	40000400 	.word	0x40000400
 8006138:	40000800 	.word	0x40000800
 800613c:	40000c00 	.word	0x40000c00
 8006140:	40014000 	.word	0x40014000

08006144 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e040      	b.n	8006214 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006196:	2b00      	cmp	r3, #0
 8006198:	d106      	bne.n	80061a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f7fc f9a8 	bl	80024f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2224      	movs	r2, #36	; 0x24
 80061ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0201 	bic.w	r2, r2, #1
 80061bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f82c 	bl	800621c <UART_SetConfig>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e022      	b.n	8006214 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fad8 	bl	800678c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689a      	ldr	r2, [r3, #8]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0201 	orr.w	r2, r2, #1
 800620a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	f000 fb5f 	bl	80068d0 <UART_CheckIdleState>
 8006212:	4603      	mov	r3, r0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3708      	adds	r7, #8
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800621c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006220:	b08a      	sub	sp, #40	; 0x28
 8006222:	af00      	add	r7, sp, #0
 8006224:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006226:	2300      	movs	r3, #0
 8006228:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	431a      	orrs	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	431a      	orrs	r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	4313      	orrs	r3, r2
 8006242:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	4ba4      	ldr	r3, [pc, #656]	; (80064dc <UART_SetConfig+0x2c0>)
 800624c:	4013      	ands	r3, r2
 800624e:	68fa      	ldr	r2, [r7, #12]
 8006250:	6812      	ldr	r2, [r2, #0]
 8006252:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006254:	430b      	orrs	r3, r1
 8006256:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a99      	ldr	r2, [pc, #612]	; (80064e0 <UART_SetConfig+0x2c4>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d004      	beq.n	8006288 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006284:	4313      	orrs	r3, r2
 8006286:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006298:	430a      	orrs	r2, r1
 800629a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a90      	ldr	r2, [pc, #576]	; (80064e4 <UART_SetConfig+0x2c8>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d126      	bne.n	80062f4 <UART_SetConfig+0xd8>
 80062a6:	4b90      	ldr	r3, [pc, #576]	; (80064e8 <UART_SetConfig+0x2cc>)
 80062a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ac:	f003 0303 	and.w	r3, r3, #3
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	d81b      	bhi.n	80062ec <UART_SetConfig+0xd0>
 80062b4:	a201      	add	r2, pc, #4	; (adr r2, 80062bc <UART_SetConfig+0xa0>)
 80062b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ba:	bf00      	nop
 80062bc:	080062cd 	.word	0x080062cd
 80062c0:	080062dd 	.word	0x080062dd
 80062c4:	080062d5 	.word	0x080062d5
 80062c8:	080062e5 	.word	0x080062e5
 80062cc:	2301      	movs	r3, #1
 80062ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062d2:	e116      	b.n	8006502 <UART_SetConfig+0x2e6>
 80062d4:	2302      	movs	r3, #2
 80062d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062da:	e112      	b.n	8006502 <UART_SetConfig+0x2e6>
 80062dc:	2304      	movs	r3, #4
 80062de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062e2:	e10e      	b.n	8006502 <UART_SetConfig+0x2e6>
 80062e4:	2308      	movs	r3, #8
 80062e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ea:	e10a      	b.n	8006502 <UART_SetConfig+0x2e6>
 80062ec:	2310      	movs	r3, #16
 80062ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062f2:	e106      	b.n	8006502 <UART_SetConfig+0x2e6>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a7c      	ldr	r2, [pc, #496]	; (80064ec <UART_SetConfig+0x2d0>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d138      	bne.n	8006370 <UART_SetConfig+0x154>
 80062fe:	4b7a      	ldr	r3, [pc, #488]	; (80064e8 <UART_SetConfig+0x2cc>)
 8006300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006304:	f003 030c 	and.w	r3, r3, #12
 8006308:	2b0c      	cmp	r3, #12
 800630a:	d82d      	bhi.n	8006368 <UART_SetConfig+0x14c>
 800630c:	a201      	add	r2, pc, #4	; (adr r2, 8006314 <UART_SetConfig+0xf8>)
 800630e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006312:	bf00      	nop
 8006314:	08006349 	.word	0x08006349
 8006318:	08006369 	.word	0x08006369
 800631c:	08006369 	.word	0x08006369
 8006320:	08006369 	.word	0x08006369
 8006324:	08006359 	.word	0x08006359
 8006328:	08006369 	.word	0x08006369
 800632c:	08006369 	.word	0x08006369
 8006330:	08006369 	.word	0x08006369
 8006334:	08006351 	.word	0x08006351
 8006338:	08006369 	.word	0x08006369
 800633c:	08006369 	.word	0x08006369
 8006340:	08006369 	.word	0x08006369
 8006344:	08006361 	.word	0x08006361
 8006348:	2300      	movs	r3, #0
 800634a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800634e:	e0d8      	b.n	8006502 <UART_SetConfig+0x2e6>
 8006350:	2302      	movs	r3, #2
 8006352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006356:	e0d4      	b.n	8006502 <UART_SetConfig+0x2e6>
 8006358:	2304      	movs	r3, #4
 800635a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800635e:	e0d0      	b.n	8006502 <UART_SetConfig+0x2e6>
 8006360:	2308      	movs	r3, #8
 8006362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006366:	e0cc      	b.n	8006502 <UART_SetConfig+0x2e6>
 8006368:	2310      	movs	r3, #16
 800636a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800636e:	e0c8      	b.n	8006502 <UART_SetConfig+0x2e6>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a5e      	ldr	r2, [pc, #376]	; (80064f0 <UART_SetConfig+0x2d4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d125      	bne.n	80063c6 <UART_SetConfig+0x1aa>
 800637a:	4b5b      	ldr	r3, [pc, #364]	; (80064e8 <UART_SetConfig+0x2cc>)
 800637c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006380:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006384:	2b30      	cmp	r3, #48	; 0x30
 8006386:	d016      	beq.n	80063b6 <UART_SetConfig+0x19a>
 8006388:	2b30      	cmp	r3, #48	; 0x30
 800638a:	d818      	bhi.n	80063be <UART_SetConfig+0x1a2>
 800638c:	2b20      	cmp	r3, #32
 800638e:	d00a      	beq.n	80063a6 <UART_SetConfig+0x18a>
 8006390:	2b20      	cmp	r3, #32
 8006392:	d814      	bhi.n	80063be <UART_SetConfig+0x1a2>
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <UART_SetConfig+0x182>
 8006398:	2b10      	cmp	r3, #16
 800639a:	d008      	beq.n	80063ae <UART_SetConfig+0x192>
 800639c:	e00f      	b.n	80063be <UART_SetConfig+0x1a2>
 800639e:	2300      	movs	r3, #0
 80063a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063a4:	e0ad      	b.n	8006502 <UART_SetConfig+0x2e6>
 80063a6:	2302      	movs	r3, #2
 80063a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063ac:	e0a9      	b.n	8006502 <UART_SetConfig+0x2e6>
 80063ae:	2304      	movs	r3, #4
 80063b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063b4:	e0a5      	b.n	8006502 <UART_SetConfig+0x2e6>
 80063b6:	2308      	movs	r3, #8
 80063b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063bc:	e0a1      	b.n	8006502 <UART_SetConfig+0x2e6>
 80063be:	2310      	movs	r3, #16
 80063c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063c4:	e09d      	b.n	8006502 <UART_SetConfig+0x2e6>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a4a      	ldr	r2, [pc, #296]	; (80064f4 <UART_SetConfig+0x2d8>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d125      	bne.n	800641c <UART_SetConfig+0x200>
 80063d0:	4b45      	ldr	r3, [pc, #276]	; (80064e8 <UART_SetConfig+0x2cc>)
 80063d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063da:	2bc0      	cmp	r3, #192	; 0xc0
 80063dc:	d016      	beq.n	800640c <UART_SetConfig+0x1f0>
 80063de:	2bc0      	cmp	r3, #192	; 0xc0
 80063e0:	d818      	bhi.n	8006414 <UART_SetConfig+0x1f8>
 80063e2:	2b80      	cmp	r3, #128	; 0x80
 80063e4:	d00a      	beq.n	80063fc <UART_SetConfig+0x1e0>
 80063e6:	2b80      	cmp	r3, #128	; 0x80
 80063e8:	d814      	bhi.n	8006414 <UART_SetConfig+0x1f8>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <UART_SetConfig+0x1d8>
 80063ee:	2b40      	cmp	r3, #64	; 0x40
 80063f0:	d008      	beq.n	8006404 <UART_SetConfig+0x1e8>
 80063f2:	e00f      	b.n	8006414 <UART_SetConfig+0x1f8>
 80063f4:	2300      	movs	r3, #0
 80063f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80063fa:	e082      	b.n	8006502 <UART_SetConfig+0x2e6>
 80063fc:	2302      	movs	r3, #2
 80063fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006402:	e07e      	b.n	8006502 <UART_SetConfig+0x2e6>
 8006404:	2304      	movs	r3, #4
 8006406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800640a:	e07a      	b.n	8006502 <UART_SetConfig+0x2e6>
 800640c:	2308      	movs	r3, #8
 800640e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006412:	e076      	b.n	8006502 <UART_SetConfig+0x2e6>
 8006414:	2310      	movs	r3, #16
 8006416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800641a:	e072      	b.n	8006502 <UART_SetConfig+0x2e6>
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a35      	ldr	r2, [pc, #212]	; (80064f8 <UART_SetConfig+0x2dc>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d12a      	bne.n	800647c <UART_SetConfig+0x260>
 8006426:	4b30      	ldr	r3, [pc, #192]	; (80064e8 <UART_SetConfig+0x2cc>)
 8006428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006430:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006434:	d01a      	beq.n	800646c <UART_SetConfig+0x250>
 8006436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800643a:	d81b      	bhi.n	8006474 <UART_SetConfig+0x258>
 800643c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006440:	d00c      	beq.n	800645c <UART_SetConfig+0x240>
 8006442:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006446:	d815      	bhi.n	8006474 <UART_SetConfig+0x258>
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <UART_SetConfig+0x238>
 800644c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006450:	d008      	beq.n	8006464 <UART_SetConfig+0x248>
 8006452:	e00f      	b.n	8006474 <UART_SetConfig+0x258>
 8006454:	2300      	movs	r3, #0
 8006456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800645a:	e052      	b.n	8006502 <UART_SetConfig+0x2e6>
 800645c:	2302      	movs	r3, #2
 800645e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006462:	e04e      	b.n	8006502 <UART_SetConfig+0x2e6>
 8006464:	2304      	movs	r3, #4
 8006466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800646a:	e04a      	b.n	8006502 <UART_SetConfig+0x2e6>
 800646c:	2308      	movs	r3, #8
 800646e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006472:	e046      	b.n	8006502 <UART_SetConfig+0x2e6>
 8006474:	2310      	movs	r3, #16
 8006476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800647a:	e042      	b.n	8006502 <UART_SetConfig+0x2e6>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a17      	ldr	r2, [pc, #92]	; (80064e0 <UART_SetConfig+0x2c4>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d13a      	bne.n	80064fc <UART_SetConfig+0x2e0>
 8006486:	4b18      	ldr	r3, [pc, #96]	; (80064e8 <UART_SetConfig+0x2cc>)
 8006488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006490:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006494:	d01a      	beq.n	80064cc <UART_SetConfig+0x2b0>
 8006496:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800649a:	d81b      	bhi.n	80064d4 <UART_SetConfig+0x2b8>
 800649c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064a0:	d00c      	beq.n	80064bc <UART_SetConfig+0x2a0>
 80064a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064a6:	d815      	bhi.n	80064d4 <UART_SetConfig+0x2b8>
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d003      	beq.n	80064b4 <UART_SetConfig+0x298>
 80064ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064b0:	d008      	beq.n	80064c4 <UART_SetConfig+0x2a8>
 80064b2:	e00f      	b.n	80064d4 <UART_SetConfig+0x2b8>
 80064b4:	2300      	movs	r3, #0
 80064b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ba:	e022      	b.n	8006502 <UART_SetConfig+0x2e6>
 80064bc:	2302      	movs	r3, #2
 80064be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064c2:	e01e      	b.n	8006502 <UART_SetConfig+0x2e6>
 80064c4:	2304      	movs	r3, #4
 80064c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ca:	e01a      	b.n	8006502 <UART_SetConfig+0x2e6>
 80064cc:	2308      	movs	r3, #8
 80064ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064d2:	e016      	b.n	8006502 <UART_SetConfig+0x2e6>
 80064d4:	2310      	movs	r3, #16
 80064d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064da:	e012      	b.n	8006502 <UART_SetConfig+0x2e6>
 80064dc:	efff69f3 	.word	0xefff69f3
 80064e0:	40008000 	.word	0x40008000
 80064e4:	40013800 	.word	0x40013800
 80064e8:	40021000 	.word	0x40021000
 80064ec:	40004400 	.word	0x40004400
 80064f0:	40004800 	.word	0x40004800
 80064f4:	40004c00 	.word	0x40004c00
 80064f8:	40005000 	.word	0x40005000
 80064fc:	2310      	movs	r3, #16
 80064fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a9f      	ldr	r2, [pc, #636]	; (8006784 <UART_SetConfig+0x568>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d17a      	bne.n	8006602 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800650c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006510:	2b08      	cmp	r3, #8
 8006512:	d824      	bhi.n	800655e <UART_SetConfig+0x342>
 8006514:	a201      	add	r2, pc, #4	; (adr r2, 800651c <UART_SetConfig+0x300>)
 8006516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651a:	bf00      	nop
 800651c:	08006541 	.word	0x08006541
 8006520:	0800655f 	.word	0x0800655f
 8006524:	08006549 	.word	0x08006549
 8006528:	0800655f 	.word	0x0800655f
 800652c:	0800654f 	.word	0x0800654f
 8006530:	0800655f 	.word	0x0800655f
 8006534:	0800655f 	.word	0x0800655f
 8006538:	0800655f 	.word	0x0800655f
 800653c:	08006557 	.word	0x08006557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006540:	f7fe f800 	bl	8004544 <HAL_RCC_GetPCLK1Freq>
 8006544:	61f8      	str	r0, [r7, #28]
        break;
 8006546:	e010      	b.n	800656a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006548:	4b8f      	ldr	r3, [pc, #572]	; (8006788 <UART_SetConfig+0x56c>)
 800654a:	61fb      	str	r3, [r7, #28]
        break;
 800654c:	e00d      	b.n	800656a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800654e:	f7fd ff61 	bl	8004414 <HAL_RCC_GetSysClockFreq>
 8006552:	61f8      	str	r0, [r7, #28]
        break;
 8006554:	e009      	b.n	800656a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800655a:	61fb      	str	r3, [r7, #28]
        break;
 800655c:	e005      	b.n	800656a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006568:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	2b00      	cmp	r3, #0
 800656e:	f000 80fb 	beq.w	8006768 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	4613      	mov	r3, r2
 8006578:	005b      	lsls	r3, r3, #1
 800657a:	4413      	add	r3, r2
 800657c:	69fa      	ldr	r2, [r7, #28]
 800657e:	429a      	cmp	r2, r3
 8006580:	d305      	bcc.n	800658e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006588:	69fa      	ldr	r2, [r7, #28]
 800658a:	429a      	cmp	r2, r3
 800658c:	d903      	bls.n	8006596 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006594:	e0e8      	b.n	8006768 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	2200      	movs	r2, #0
 800659a:	461c      	mov	r4, r3
 800659c:	4615      	mov	r5, r2
 800659e:	f04f 0200 	mov.w	r2, #0
 80065a2:	f04f 0300 	mov.w	r3, #0
 80065a6:	022b      	lsls	r3, r5, #8
 80065a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80065ac:	0222      	lsls	r2, r4, #8
 80065ae:	68f9      	ldr	r1, [r7, #12]
 80065b0:	6849      	ldr	r1, [r1, #4]
 80065b2:	0849      	lsrs	r1, r1, #1
 80065b4:	2000      	movs	r0, #0
 80065b6:	4688      	mov	r8, r1
 80065b8:	4681      	mov	r9, r0
 80065ba:	eb12 0a08 	adds.w	sl, r2, r8
 80065be:	eb43 0b09 	adc.w	fp, r3, r9
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	603b      	str	r3, [r7, #0]
 80065ca:	607a      	str	r2, [r7, #4]
 80065cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065d0:	4650      	mov	r0, sl
 80065d2:	4659      	mov	r1, fp
 80065d4:	f7f9 fdf8 	bl	80001c8 <__aeabi_uldivmod>
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	4613      	mov	r3, r2
 80065de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065e6:	d308      	bcc.n	80065fa <UART_SetConfig+0x3de>
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ee:	d204      	bcs.n	80065fa <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	60da      	str	r2, [r3, #12]
 80065f8:	e0b6      	b.n	8006768 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006600:	e0b2      	b.n	8006768 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	69db      	ldr	r3, [r3, #28]
 8006606:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800660a:	d15e      	bne.n	80066ca <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800660c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006610:	2b08      	cmp	r3, #8
 8006612:	d828      	bhi.n	8006666 <UART_SetConfig+0x44a>
 8006614:	a201      	add	r2, pc, #4	; (adr r2, 800661c <UART_SetConfig+0x400>)
 8006616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661a:	bf00      	nop
 800661c:	08006641 	.word	0x08006641
 8006620:	08006649 	.word	0x08006649
 8006624:	08006651 	.word	0x08006651
 8006628:	08006667 	.word	0x08006667
 800662c:	08006657 	.word	0x08006657
 8006630:	08006667 	.word	0x08006667
 8006634:	08006667 	.word	0x08006667
 8006638:	08006667 	.word	0x08006667
 800663c:	0800665f 	.word	0x0800665f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006640:	f7fd ff80 	bl	8004544 <HAL_RCC_GetPCLK1Freq>
 8006644:	61f8      	str	r0, [r7, #28]
        break;
 8006646:	e014      	b.n	8006672 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006648:	f7fd ff92 	bl	8004570 <HAL_RCC_GetPCLK2Freq>
 800664c:	61f8      	str	r0, [r7, #28]
        break;
 800664e:	e010      	b.n	8006672 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006650:	4b4d      	ldr	r3, [pc, #308]	; (8006788 <UART_SetConfig+0x56c>)
 8006652:	61fb      	str	r3, [r7, #28]
        break;
 8006654:	e00d      	b.n	8006672 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006656:	f7fd fedd 	bl	8004414 <HAL_RCC_GetSysClockFreq>
 800665a:	61f8      	str	r0, [r7, #28]
        break;
 800665c:	e009      	b.n	8006672 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800665e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006662:	61fb      	str	r3, [r7, #28]
        break;
 8006664:	e005      	b.n	8006672 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006670:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006672:	69fb      	ldr	r3, [r7, #28]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d077      	beq.n	8006768 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006678:	69fb      	ldr	r3, [r7, #28]
 800667a:	005a      	lsls	r2, r3, #1
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	085b      	lsrs	r3, r3, #1
 8006682:	441a      	add	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	fbb2 f3f3 	udiv	r3, r2, r3
 800668c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	2b0f      	cmp	r3, #15
 8006692:	d916      	bls.n	80066c2 <UART_SetConfig+0x4a6>
 8006694:	69bb      	ldr	r3, [r7, #24]
 8006696:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800669a:	d212      	bcs.n	80066c2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	f023 030f 	bic.w	r3, r3, #15
 80066a4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	085b      	lsrs	r3, r3, #1
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	f003 0307 	and.w	r3, r3, #7
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	8afb      	ldrh	r3, [r7, #22]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	8afa      	ldrh	r2, [r7, #22]
 80066be:	60da      	str	r2, [r3, #12]
 80066c0:	e052      	b.n	8006768 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80066c8:	e04e      	b.n	8006768 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80066ce:	2b08      	cmp	r3, #8
 80066d0:	d827      	bhi.n	8006722 <UART_SetConfig+0x506>
 80066d2:	a201      	add	r2, pc, #4	; (adr r2, 80066d8 <UART_SetConfig+0x4bc>)
 80066d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d8:	080066fd 	.word	0x080066fd
 80066dc:	08006705 	.word	0x08006705
 80066e0:	0800670d 	.word	0x0800670d
 80066e4:	08006723 	.word	0x08006723
 80066e8:	08006713 	.word	0x08006713
 80066ec:	08006723 	.word	0x08006723
 80066f0:	08006723 	.word	0x08006723
 80066f4:	08006723 	.word	0x08006723
 80066f8:	0800671b 	.word	0x0800671b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066fc:	f7fd ff22 	bl	8004544 <HAL_RCC_GetPCLK1Freq>
 8006700:	61f8      	str	r0, [r7, #28]
        break;
 8006702:	e014      	b.n	800672e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006704:	f7fd ff34 	bl	8004570 <HAL_RCC_GetPCLK2Freq>
 8006708:	61f8      	str	r0, [r7, #28]
        break;
 800670a:	e010      	b.n	800672e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800670c:	4b1e      	ldr	r3, [pc, #120]	; (8006788 <UART_SetConfig+0x56c>)
 800670e:	61fb      	str	r3, [r7, #28]
        break;
 8006710:	e00d      	b.n	800672e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006712:	f7fd fe7f 	bl	8004414 <HAL_RCC_GetSysClockFreq>
 8006716:	61f8      	str	r0, [r7, #28]
        break;
 8006718:	e009      	b.n	800672e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800671a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800671e:	61fb      	str	r3, [r7, #28]
        break;
 8006720:	e005      	b.n	800672e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006722:	2300      	movs	r3, #0
 8006724:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800672c:	bf00      	nop
    }

    if (pclk != 0U)
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d019      	beq.n	8006768 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	085a      	lsrs	r2, r3, #1
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	441a      	add	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	fbb2 f3f3 	udiv	r3, r2, r3
 8006746:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	2b0f      	cmp	r3, #15
 800674c:	d909      	bls.n	8006762 <UART_SetConfig+0x546>
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006754:	d205      	bcs.n	8006762 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	b29a      	uxth	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	60da      	str	r2, [r3, #12]
 8006760:	e002      	b.n	8006768 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006774:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006778:	4618      	mov	r0, r3
 800677a:	3728      	adds	r7, #40	; 0x28
 800677c:	46bd      	mov	sp, r7
 800677e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006782:	bf00      	nop
 8006784:	40008000 	.word	0x40008000
 8006788:	00f42400 	.word	0x00f42400

0800678c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006798:	f003 0301 	and.w	r3, r3, #1
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00a      	beq.n	80067b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	430a      	orrs	r2, r1
 80067b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00a      	beq.n	80067d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	430a      	orrs	r2, r1
 80067d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	f003 0304 	and.w	r3, r3, #4
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00a      	beq.n	80067fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	430a      	orrs	r2, r1
 80067f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	f003 0308 	and.w	r3, r3, #8
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00a      	beq.n	800681c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	430a      	orrs	r2, r1
 800681a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	f003 0310 	and.w	r3, r3, #16
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00a      	beq.n	800683e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006842:	f003 0320 	and.w	r3, r3, #32
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006868:	2b00      	cmp	r3, #0
 800686a:	d01a      	beq.n	80068a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	430a      	orrs	r2, r1
 8006880:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800688a:	d10a      	bne.n	80068a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00a      	beq.n	80068c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	605a      	str	r2, [r3, #4]
  }
}
 80068c4:	bf00      	nop
 80068c6:	370c      	adds	r7, #12
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b086      	sub	sp, #24
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068e0:	f7fb ff52 	bl	8002788 <HAL_GetTick>
 80068e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 0308 	and.w	r3, r3, #8
 80068f0:	2b08      	cmp	r3, #8
 80068f2:	d10e      	bne.n	8006912 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f000 f82d 	bl	8006962 <UART_WaitOnFlagUntilTimeout>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e023      	b.n	800695a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 0304 	and.w	r3, r3, #4
 800691c:	2b04      	cmp	r3, #4
 800691e:	d10e      	bne.n	800693e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006920:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2200      	movs	r2, #0
 800692a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 f817 	bl	8006962 <UART_WaitOnFlagUntilTimeout>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e00d      	b.n	800695a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2220      	movs	r2, #32
 8006942:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2220      	movs	r2, #32
 8006948:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b09c      	sub	sp, #112	; 0x70
 8006966:	af00      	add	r7, sp, #0
 8006968:	60f8      	str	r0, [r7, #12]
 800696a:	60b9      	str	r1, [r7, #8]
 800696c:	603b      	str	r3, [r7, #0]
 800696e:	4613      	mov	r3, r2
 8006970:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006972:	e0a5      	b.n	8006ac0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006974:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697a:	f000 80a1 	beq.w	8006ac0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800697e:	f7fb ff03 	bl	8002788 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800698a:	429a      	cmp	r2, r3
 800698c:	d302      	bcc.n	8006994 <UART_WaitOnFlagUntilTimeout+0x32>
 800698e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006990:	2b00      	cmp	r3, #0
 8006992:	d13e      	bne.n	8006a12 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800699c:	e853 3f00 	ldrex	r3, [r3]
 80069a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80069a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069a8:	667b      	str	r3, [r7, #100]	; 0x64
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	461a      	mov	r2, r3
 80069b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80069b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80069b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80069ba:	e841 2300 	strex	r3, r2, [r1]
 80069be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80069c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1e6      	bne.n	8006994 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	3308      	adds	r3, #8
 80069cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d8:	f023 0301 	bic.w	r3, r3, #1
 80069dc:	663b      	str	r3, [r7, #96]	; 0x60
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3308      	adds	r3, #8
 80069e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80069e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80069ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e5      	bne.n	80069c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2220      	movs	r2, #32
 80069fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2220      	movs	r2, #32
 8006a04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006a0e:	2303      	movs	r3, #3
 8006a10:	e067      	b.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f003 0304 	and.w	r3, r3, #4
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d04f      	beq.n	8006ac0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a2e:	d147      	bne.n	8006ac0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a38:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	e853 3f00 	ldrex	r3, [r3]
 8006a46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	461a      	mov	r2, r3
 8006a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a58:	637b      	str	r3, [r7, #52]	; 0x34
 8006a5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a60:	e841 2300 	strex	r3, r2, [r1]
 8006a64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e6      	bne.n	8006a3a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3308      	adds	r3, #8
 8006a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	e853 3f00 	ldrex	r3, [r3]
 8006a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f023 0301 	bic.w	r3, r3, #1
 8006a82:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	3308      	adds	r3, #8
 8006a8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a8c:	623a      	str	r2, [r7, #32]
 8006a8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a90:	69f9      	ldr	r1, [r7, #28]
 8006a92:	6a3a      	ldr	r2, [r7, #32]
 8006a94:	e841 2300 	strex	r3, r2, [r1]
 8006a98:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1e5      	bne.n	8006a6c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2220      	movs	r2, #32
 8006aa4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2220      	movs	r2, #32
 8006ab0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	e010      	b.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	69da      	ldr	r2, [r3, #28]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	bf0c      	ite	eq
 8006ad0:	2301      	moveq	r3, #1
 8006ad2:	2300      	movne	r3, #0
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	79fb      	ldrb	r3, [r7, #7]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	f43f af4a 	beq.w	8006974 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3770      	adds	r7, #112	; 0x70
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <iNemoEngine_gbias_init>:
 8006aec:	b430      	push	{r4, r5}
 8006aee:	4b1f      	ldr	r3, [pc, #124]	; (8006b6c <iNemoEngine_gbias_init+0x80>)
 8006af0:	4a1f      	ldr	r2, [pc, #124]	; (8006b70 <iNemoEngine_gbias_init+0x84>)
 8006af2:	4920      	ldr	r1, [pc, #128]	; (8006b74 <iNemoEngine_gbias_init+0x88>)
 8006af4:	4d20      	ldr	r5, [pc, #128]	; (8006b78 <iNemoEngine_gbias_init+0x8c>)
 8006af6:	4c21      	ldr	r4, [pc, #132]	; (8006b7c <iNemoEngine_gbias_init+0x90>)
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006afe:	2200      	movs	r2, #0
 8006b00:	6059      	str	r1, [r3, #4]
 8006b02:	481f      	ldr	r0, [pc, #124]	; (8006b80 <iNemoEngine_gbias_init+0x94>)
 8006b04:	609d      	str	r5, [r3, #8]
 8006b06:	2100      	movs	r1, #0
 8006b08:	60dc      	str	r4, [r3, #12]
 8006b0a:	ed83 0a04 	vstr	s0, [r3, #16]
 8006b0e:	6158      	str	r0, [r3, #20]
 8006b10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8006b14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8006b18:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8006b1c:	655a      	str	r2, [r3, #84]	; 0x54
 8006b1e:	661a      	str	r2, [r3, #96]	; 0x60
 8006b20:	659a      	str	r2, [r3, #88]	; 0x58
 8006b22:	665a      	str	r2, [r3, #100]	; 0x64
 8006b24:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b26:	669a      	str	r2, [r3, #104]	; 0x68
 8006b28:	671a      	str	r2, [r3, #112]	; 0x70
 8006b2a:	67da      	str	r2, [r3, #124]	; 0x7c
 8006b2c:	675a      	str	r2, [r3, #116]	; 0x74
 8006b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8006b32:	679a      	str	r2, [r3, #120]	; 0x78
 8006b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8006b38:	61da      	str	r2, [r3, #28]
 8006b3a:	629a      	str	r2, [r3, #40]	; 0x28
 8006b3c:	621a      	str	r2, [r3, #32]
 8006b3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8006b40:	625a      	str	r2, [r3, #36]	; 0x24
 8006b42:	631a      	str	r2, [r3, #48]	; 0x30
 8006b44:	f8a3 1088 	strh.w	r1, [r3, #136]	; 0x88
 8006b48:	f8a3 1050 	strh.w	r1, [r3, #80]	; 0x50
 8006b4c:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
 8006b50:	8319      	strh	r1, [r3, #24]
 8006b52:	8699      	strh	r1, [r3, #52]	; 0x34
 8006b54:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
 8006b58:	bc30      	pop	{r4, r5}
 8006b5a:	639a      	str	r2, [r3, #56]	; 0x38
 8006b5c:	645a      	str	r2, [r3, #68]	; 0x44
 8006b5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8006b60:	649a      	str	r2, [r3, #72]	; 0x48
 8006b62:	641a      	str	r2, [r3, #64]	; 0x40
 8006b64:	64da      	str	r2, [r3, #76]	; 0x4c
 8006b66:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
 8006b6a:	4770      	bx	lr
 8006b6c:	20001628 	.word	0x20001628
 8006b70:	3ab20043 	.word	0x3ab20043
 8006b74:	3e8a3d71 	.word	0x3e8a3d71
 8006b78:	3ea8f5c3 	.word	0x3ea8f5c3
 8006b7c:	3d09c927 	.word	0x3d09c927
 8006b80:	41700000 	.word	0x41700000

08006b84 <iNemo_setOrientation.constprop.0>:
 8006b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b88:	4a70      	ldr	r2, [pc, #448]	; (8006d4c <iNemo_setOrientation.constprop.0+0x1c8>)
 8006b8a:	4b71      	ldr	r3, [pc, #452]	; (8006d50 <iNemo_setOrientation.constprop.0+0x1cc>)
 8006b8c:	f892 e000 	ldrb.w	lr, [r2]
 8006b90:	7915      	ldrb	r5, [r2, #4]
 8006b92:	7857      	ldrb	r7, [r2, #1]
 8006b94:	7954      	ldrb	r4, [r2, #5]
 8006b96:	f892 c009 	ldrb.w	ip, [r2, #9]
 8006b9a:	f1ae 0642 	sub.w	r6, lr, #66	; 0x42
 8006b9e:	2100      	movs	r1, #0
 8006ba0:	2e17      	cmp	r6, #23
 8006ba2:	bf98      	it	ls
 8006ba4:	f10e 0e20 	addls.w	lr, lr, #32
 8006ba8:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
 8006bac:	f883 10ac 	strb.w	r1, [r3, #172]	; 0xac
 8006bb0:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
 8006bb4:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
 8006bb8:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
 8006bbc:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 8006bc0:	f883 10b8 	strb.w	r1, [r3, #184]	; 0xb8
 8006bc4:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
 8006bc8:	f883 10c4 	strb.w	r1, [r3, #196]	; 0xc4
 8006bcc:	f1a5 0142 	sub.w	r1, r5, #66	; 0x42
 8006bd0:	bf98      	it	ls
 8006bd2:	fa5f fe8e 	uxtbls.w	lr, lr
 8006bd6:	2917      	cmp	r1, #23
 8006bd8:	7a11      	ldrb	r1, [r2, #8]
 8006bda:	7896      	ldrb	r6, [r2, #2]
 8006bdc:	f1a1 0042 	sub.w	r0, r1, #66	; 0x42
 8006be0:	bf9c      	itt	ls
 8006be2:	3520      	addls	r5, #32
 8006be4:	b2ed      	uxtbls	r5, r5
 8006be6:	2817      	cmp	r0, #23
 8006be8:	bf98      	it	ls
 8006bea:	3120      	addls	r1, #32
 8006bec:	f1a7 0042 	sub.w	r0, r7, #66	; 0x42
 8006bf0:	bf98      	it	ls
 8006bf2:	b2c9      	uxtbls	r1, r1
 8006bf4:	2817      	cmp	r0, #23
 8006bf6:	bf98      	it	ls
 8006bf8:	3720      	addls	r7, #32
 8006bfa:	f1a4 0042 	sub.w	r0, r4, #66	; 0x42
 8006bfe:	bf98      	it	ls
 8006c00:	b2ff      	uxtbls	r7, r7
 8006c02:	2817      	cmp	r0, #23
 8006c04:	bf98      	it	ls
 8006c06:	3420      	addls	r4, #32
 8006c08:	f1ac 0042 	sub.w	r0, ip, #66	; 0x42
 8006c0c:	bf98      	it	ls
 8006c0e:	b2e4      	uxtbls	r4, r4
 8006c10:	2817      	cmp	r0, #23
 8006c12:	bf98      	it	ls
 8006c14:	f10c 0c20 	addls.w	ip, ip, #32
 8006c18:	f1a6 0042 	sub.w	r0, r6, #66	; 0x42
 8006c1c:	bf98      	it	ls
 8006c1e:	fa5f fc8c 	uxtbls.w	ip, ip
 8006c22:	2817      	cmp	r0, #23
 8006c24:	7990      	ldrb	r0, [r2, #6]
 8006c26:	7a92      	ldrb	r2, [r2, #10]
 8006c28:	f1a0 0842 	sub.w	r8, r0, #66	; 0x42
 8006c2c:	bf9c      	itt	ls
 8006c2e:	3620      	addls	r6, #32
 8006c30:	b2f6      	uxtbls	r6, r6
 8006c32:	f1b8 0f17 	cmp.w	r8, #23
 8006c36:	bf98      	it	ls
 8006c38:	3020      	addls	r0, #32
 8006c3a:	f1a2 0842 	sub.w	r8, r2, #66	; 0x42
 8006c3e:	bf98      	it	ls
 8006c40:	b2c0      	uxtbls	r0, r0
 8006c42:	f1b8 0f17 	cmp.w	r8, #23
 8006c46:	bf98      	it	ls
 8006c48:	3220      	addls	r2, #32
 8006c4a:	f1ae 0e64 	sub.w	lr, lr, #100	; 0x64
 8006c4e:	bf98      	it	ls
 8006c50:	b2d2      	uxtbls	r2, r2
 8006c52:	f1be 0f13 	cmp.w	lr, #19
 8006c56:	d80f      	bhi.n	8006c78 <iNemo_setOrientation.constprop.0+0xf4>
 8006c58:	e8df f00e 	tbb	[pc, lr]
 8006c5c:	0e0eac0a 	.word	0x0e0eac0a
 8006c60:	0e0e0e0e 	.word	0x0e0e0e0e
 8006c64:	0eb10e0e 	.word	0x0eb10e0e
 8006c68:	b60e0e0e 	.word	0xb60e0e0e
 8006c6c:	c00ebb0e 	.word	0xc00ebb0e
 8006c70:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8006c74:	f883 e0aa 	strb.w	lr, [r3, #170]	; 0xaa
 8006c78:	3f64      	subs	r7, #100	; 0x64
 8006c7a:	2f13      	cmp	r7, #19
 8006c7c:	d80e      	bhi.n	8006c9c <iNemo_setOrientation.constprop.0+0x118>
 8006c7e:	e8df f007 	tbb	[pc, r7]
 8006c82:	b20a      	.short	0xb20a
 8006c84:	0d0d0d0d 	.word	0x0d0d0d0d
 8006c88:	0d0d0d0d 	.word	0x0d0d0d0d
 8006c8c:	0d0d0db6 	.word	0x0d0d0db6
 8006c90:	be0dba0d 	.word	0xbe0dba0d
 8006c94:	c20d      	.short	0xc20d
 8006c96:	27ff      	movs	r7, #255	; 0xff
 8006c98:	f883 70ab 	strb.w	r7, [r3, #171]	; 0xab
 8006c9c:	3e64      	subs	r6, #100	; 0x64
 8006c9e:	2e13      	cmp	r6, #19
 8006ca0:	d80e      	bhi.n	8006cc0 <iNemo_setOrientation.constprop.0+0x13c>
 8006ca2:	e8df f006 	tbb	[pc, r6]
 8006ca6:	b40a      	.short	0xb40a
 8006ca8:	0d0d0d0d 	.word	0x0d0d0d0d
 8006cac:	0d0d0d0d 	.word	0x0d0d0d0d
 8006cb0:	0d0d0db8 	.word	0x0d0d0db8
 8006cb4:	c00dbc0d 	.word	0xc00dbc0d
 8006cb8:	c40d      	.short	0xc40d
 8006cba:	26ff      	movs	r6, #255	; 0xff
 8006cbc:	f883 60ac 	strb.w	r6, [r3, #172]	; 0xac
 8006cc0:	3d64      	subs	r5, #100	; 0x64
 8006cc2:	2d13      	cmp	r5, #19
 8006cc4:	d80e      	bhi.n	8006ce4 <iNemo_setOrientation.constprop.0+0x160>
 8006cc6:	e8df f005 	tbb	[pc, r5]
 8006cca:	b60a      	.short	0xb60a
 8006ccc:	0d0d0d0d 	.word	0x0d0d0d0d
 8006cd0:	0d0d0d0d 	.word	0x0d0d0d0d
 8006cd4:	0d0d0dba 	.word	0x0d0d0dba
 8006cd8:	c20dbe0d 	.word	0xc20dbe0d
 8006cdc:	c60d      	.short	0xc60d
 8006cde:	25ff      	movs	r5, #255	; 0xff
 8006ce0:	f883 50c2 	strb.w	r5, [r3, #194]	; 0xc2
 8006ce4:	3c64      	subs	r4, #100	; 0x64
 8006ce6:	2c13      	cmp	r4, #19
 8006ce8:	d80e      	bhi.n	8006d08 <iNemo_setOrientation.constprop.0+0x184>
 8006cea:	e8df f004 	tbb	[pc, r4]
 8006cee:	b80a      	.short	0xb80a
 8006cf0:	0d0d0d0d 	.word	0x0d0d0d0d
 8006cf4:	0d0d0d0d 	.word	0x0d0d0d0d
 8006cf8:	0d0d0dbc 	.word	0x0d0d0dbc
 8006cfc:	c40dc00d 	.word	0xc40dc00d
 8006d00:	c80d      	.short	0xc80d
 8006d02:	24ff      	movs	r4, #255	; 0xff
 8006d04:	f883 40c3 	strb.w	r4, [r3, #195]	; 0xc3
 8006d08:	3864      	subs	r0, #100	; 0x64
 8006d0a:	2813      	cmp	r0, #19
 8006d0c:	d80e      	bhi.n	8006d2c <iNemo_setOrientation.constprop.0+0x1a8>
 8006d0e:	e8df f000 	tbb	[pc, r0]
 8006d12:	ba0a      	.short	0xba0a
 8006d14:	0d0d0d0d 	.word	0x0d0d0d0d
 8006d18:	0d0d0d0d 	.word	0x0d0d0d0d
 8006d1c:	0d0d0dbe 	.word	0x0d0d0dbe
 8006d20:	c60dc20d 	.word	0xc60dc20d
 8006d24:	ca0d      	.short	0xca0d
 8006d26:	20ff      	movs	r0, #255	; 0xff
 8006d28:	f883 00c4 	strb.w	r0, [r3, #196]	; 0xc4
 8006d2c:	3964      	subs	r1, #100	; 0x64
 8006d2e:	2913      	cmp	r1, #19
 8006d30:	d813      	bhi.n	8006d5a <iNemo_setOrientation.constprop.0+0x1d6>
 8006d32:	e8df f001 	tbb	[pc, r1]
 8006d36:	bc0f      	.short	0xbc0f
 8006d38:	12121212 	.word	0x12121212
 8006d3c:	12121212 	.word	0x12121212
 8006d40:	121212c0 	.word	0x121212c0
 8006d44:	c812c412 	.word	0xc812c412
 8006d48:	cc12      	.short	0xcc12
 8006d4a:	bf00      	nop
 8006d4c:	20000000 	.word	0x20000000
 8006d50:	20001628 	.word	0x20001628
 8006d54:	21ff      	movs	r1, #255	; 0xff
 8006d56:	f883 10b6 	strb.w	r1, [r3, #182]	; 0xb6
 8006d5a:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 8006d5e:	f1bc 0f13 	cmp.w	ip, #19
 8006d62:	d80e      	bhi.n	8006d82 <iNemo_setOrientation.constprop.0+0x1fe>
 8006d64:	e8df f00c 	tbb	[pc, ip]
 8006d68:	0d0db70a 	.word	0x0d0db70a
 8006d6c:	0d0d0d0d 	.word	0x0d0d0d0d
 8006d70:	0dbb0d0d 	.word	0x0dbb0d0d
 8006d74:	bf0d0d0d 	.word	0xbf0d0d0d
 8006d78:	c70dc30d 	.word	0xc70dc30d
 8006d7c:	21ff      	movs	r1, #255	; 0xff
 8006d7e:	f883 10b7 	strb.w	r1, [r3, #183]	; 0xb7
 8006d82:	3a64      	subs	r2, #100	; 0x64
 8006d84:	2a13      	cmp	r2, #19
 8006d86:	d80e      	bhi.n	8006da6 <iNemo_setOrientation.constprop.0+0x222>
 8006d88:	e8df f002 	tbb	[pc, r2]
 8006d8c:	0d0db90a 	.word	0x0d0db90a
 8006d90:	0d0d0d0d 	.word	0x0d0d0d0d
 8006d94:	0dbe0d0d 	.word	0x0dbe0d0d
 8006d98:	c30d0d0d 	.word	0xc30d0d0d
 8006d9c:	0f0dc80d 	.word	0x0f0dc80d
 8006da0:	22ff      	movs	r2, #255	; 0xff
 8006da2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8006da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006daa:	22ff      	movs	r2, #255	; 0xff
 8006dac:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8006db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db4:	f04f 0e01 	mov.w	lr, #1
 8006db8:	f883 e0a4 	strb.w	lr, [r3, #164]	; 0xa4
 8006dbc:	e75c      	b.n	8006c78 <iNemo_setOrientation.constprop.0+0xf4>
 8006dbe:	f04f 0e01 	mov.w	lr, #1
 8006dc2:	f883 e0a7 	strb.w	lr, [r3, #167]	; 0xa7
 8006dc6:	e757      	b.n	8006c78 <iNemo_setOrientation.constprop.0+0xf4>
 8006dc8:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8006dcc:	f883 e0a7 	strb.w	lr, [r3, #167]	; 0xa7
 8006dd0:	e752      	b.n	8006c78 <iNemo_setOrientation.constprop.0+0xf4>
 8006dd2:	f04f 0e01 	mov.w	lr, #1
 8006dd6:	f883 e0aa 	strb.w	lr, [r3, #170]	; 0xaa
 8006dda:	e74d      	b.n	8006c78 <iNemo_setOrientation.constprop.0+0xf4>
 8006ddc:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8006de0:	f883 e0a4 	strb.w	lr, [r3, #164]	; 0xa4
 8006de4:	e748      	b.n	8006c78 <iNemo_setOrientation.constprop.0+0xf4>
 8006de6:	2701      	movs	r7, #1
 8006de8:	f883 70a5 	strb.w	r7, [r3, #165]	; 0xa5
 8006dec:	e756      	b.n	8006c9c <iNemo_setOrientation.constprop.0+0x118>
 8006dee:	2701      	movs	r7, #1
 8006df0:	f883 70a8 	strb.w	r7, [r3, #168]	; 0xa8
 8006df4:	e752      	b.n	8006c9c <iNemo_setOrientation.constprop.0+0x118>
 8006df6:	27ff      	movs	r7, #255	; 0xff
 8006df8:	f883 70a8 	strb.w	r7, [r3, #168]	; 0xa8
 8006dfc:	e74e      	b.n	8006c9c <iNemo_setOrientation.constprop.0+0x118>
 8006dfe:	2701      	movs	r7, #1
 8006e00:	f883 70ab 	strb.w	r7, [r3, #171]	; 0xab
 8006e04:	e74a      	b.n	8006c9c <iNemo_setOrientation.constprop.0+0x118>
 8006e06:	27ff      	movs	r7, #255	; 0xff
 8006e08:	f883 70a5 	strb.w	r7, [r3, #165]	; 0xa5
 8006e0c:	e746      	b.n	8006c9c <iNemo_setOrientation.constprop.0+0x118>
 8006e0e:	2601      	movs	r6, #1
 8006e10:	f883 60a6 	strb.w	r6, [r3, #166]	; 0xa6
 8006e14:	e754      	b.n	8006cc0 <iNemo_setOrientation.constprop.0+0x13c>
 8006e16:	2601      	movs	r6, #1
 8006e18:	f883 60a9 	strb.w	r6, [r3, #169]	; 0xa9
 8006e1c:	e750      	b.n	8006cc0 <iNemo_setOrientation.constprop.0+0x13c>
 8006e1e:	26ff      	movs	r6, #255	; 0xff
 8006e20:	f883 60a9 	strb.w	r6, [r3, #169]	; 0xa9
 8006e24:	e74c      	b.n	8006cc0 <iNemo_setOrientation.constprop.0+0x13c>
 8006e26:	2601      	movs	r6, #1
 8006e28:	f883 60ac 	strb.w	r6, [r3, #172]	; 0xac
 8006e2c:	e748      	b.n	8006cc0 <iNemo_setOrientation.constprop.0+0x13c>
 8006e2e:	26ff      	movs	r6, #255	; 0xff
 8006e30:	f883 60a6 	strb.w	r6, [r3, #166]	; 0xa6
 8006e34:	e744      	b.n	8006cc0 <iNemo_setOrientation.constprop.0+0x13c>
 8006e36:	2501      	movs	r5, #1
 8006e38:	f883 50bc 	strb.w	r5, [r3, #188]	; 0xbc
 8006e3c:	e752      	b.n	8006ce4 <iNemo_setOrientation.constprop.0+0x160>
 8006e3e:	2501      	movs	r5, #1
 8006e40:	f883 50bf 	strb.w	r5, [r3, #191]	; 0xbf
 8006e44:	e74e      	b.n	8006ce4 <iNemo_setOrientation.constprop.0+0x160>
 8006e46:	25ff      	movs	r5, #255	; 0xff
 8006e48:	f883 50bf 	strb.w	r5, [r3, #191]	; 0xbf
 8006e4c:	e74a      	b.n	8006ce4 <iNemo_setOrientation.constprop.0+0x160>
 8006e4e:	2501      	movs	r5, #1
 8006e50:	f883 50c2 	strb.w	r5, [r3, #194]	; 0xc2
 8006e54:	e746      	b.n	8006ce4 <iNemo_setOrientation.constprop.0+0x160>
 8006e56:	25ff      	movs	r5, #255	; 0xff
 8006e58:	f883 50bc 	strb.w	r5, [r3, #188]	; 0xbc
 8006e5c:	e742      	b.n	8006ce4 <iNemo_setOrientation.constprop.0+0x160>
 8006e5e:	2401      	movs	r4, #1
 8006e60:	f883 40bd 	strb.w	r4, [r3, #189]	; 0xbd
 8006e64:	e750      	b.n	8006d08 <iNemo_setOrientation.constprop.0+0x184>
 8006e66:	2401      	movs	r4, #1
 8006e68:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
 8006e6c:	e74c      	b.n	8006d08 <iNemo_setOrientation.constprop.0+0x184>
 8006e6e:	24ff      	movs	r4, #255	; 0xff
 8006e70:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
 8006e74:	e748      	b.n	8006d08 <iNemo_setOrientation.constprop.0+0x184>
 8006e76:	2401      	movs	r4, #1
 8006e78:	f883 40c3 	strb.w	r4, [r3, #195]	; 0xc3
 8006e7c:	e744      	b.n	8006d08 <iNemo_setOrientation.constprop.0+0x184>
 8006e7e:	24ff      	movs	r4, #255	; 0xff
 8006e80:	f883 40bd 	strb.w	r4, [r3, #189]	; 0xbd
 8006e84:	e740      	b.n	8006d08 <iNemo_setOrientation.constprop.0+0x184>
 8006e86:	2001      	movs	r0, #1
 8006e88:	f883 00be 	strb.w	r0, [r3, #190]	; 0xbe
 8006e8c:	e74e      	b.n	8006d2c <iNemo_setOrientation.constprop.0+0x1a8>
 8006e8e:	2001      	movs	r0, #1
 8006e90:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
 8006e94:	e74a      	b.n	8006d2c <iNemo_setOrientation.constprop.0+0x1a8>
 8006e96:	20ff      	movs	r0, #255	; 0xff
 8006e98:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
 8006e9c:	e746      	b.n	8006d2c <iNemo_setOrientation.constprop.0+0x1a8>
 8006e9e:	2001      	movs	r0, #1
 8006ea0:	f883 00c4 	strb.w	r0, [r3, #196]	; 0xc4
 8006ea4:	e742      	b.n	8006d2c <iNemo_setOrientation.constprop.0+0x1a8>
 8006ea6:	20ff      	movs	r0, #255	; 0xff
 8006ea8:	f883 00be 	strb.w	r0, [r3, #190]	; 0xbe
 8006eac:	e73e      	b.n	8006d2c <iNemo_setOrientation.constprop.0+0x1a8>
 8006eae:	2101      	movs	r1, #1
 8006eb0:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
 8006eb4:	e751      	b.n	8006d5a <iNemo_setOrientation.constprop.0+0x1d6>
 8006eb6:	2101      	movs	r1, #1
 8006eb8:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
 8006ebc:	e74d      	b.n	8006d5a <iNemo_setOrientation.constprop.0+0x1d6>
 8006ebe:	21ff      	movs	r1, #255	; 0xff
 8006ec0:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
 8006ec4:	e749      	b.n	8006d5a <iNemo_setOrientation.constprop.0+0x1d6>
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	f883 10b6 	strb.w	r1, [r3, #182]	; 0xb6
 8006ecc:	e745      	b.n	8006d5a <iNemo_setOrientation.constprop.0+0x1d6>
 8006ece:	21ff      	movs	r1, #255	; 0xff
 8006ed0:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
 8006ed4:	e741      	b.n	8006d5a <iNemo_setOrientation.constprop.0+0x1d6>
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
 8006edc:	e751      	b.n	8006d82 <iNemo_setOrientation.constprop.0+0x1fe>
 8006ede:	2101      	movs	r1, #1
 8006ee0:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
 8006ee4:	e74d      	b.n	8006d82 <iNemo_setOrientation.constprop.0+0x1fe>
 8006ee6:	21ff      	movs	r1, #255	; 0xff
 8006ee8:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
 8006eec:	e749      	b.n	8006d82 <iNemo_setOrientation.constprop.0+0x1fe>
 8006eee:	2101      	movs	r1, #1
 8006ef0:	f883 10b7 	strb.w	r1, [r3, #183]	; 0xb7
 8006ef4:	e745      	b.n	8006d82 <iNemo_setOrientation.constprop.0+0x1fe>
 8006ef6:	21ff      	movs	r1, #255	; 0xff
 8006ef8:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
 8006efc:	e741      	b.n	8006d82 <iNemo_setOrientation.constprop.0+0x1fe>
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8006f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 8006f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f12:	22ff      	movs	r2, #255	; 0xff
 8006f14:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 8006f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8006f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f26:	bf00      	nop

08006f28 <iNemo_setOrientation_6X.constprop.0>:
 8006f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f2c:	4a70      	ldr	r2, [pc, #448]	; (80070f0 <iNemo_setOrientation_6X.constprop.0+0x1c8>)
 8006f2e:	4b71      	ldr	r3, [pc, #452]	; (80070f4 <iNemo_setOrientation_6X.constprop.0+0x1cc>)
 8006f30:	f892 e000 	ldrb.w	lr, [r2]
 8006f34:	7915      	ldrb	r5, [r2, #4]
 8006f36:	7857      	ldrb	r7, [r2, #1]
 8006f38:	7954      	ldrb	r4, [r2, #5]
 8006f3a:	f892 c009 	ldrb.w	ip, [r2, #9]
 8006f3e:	f1ae 0642 	sub.w	r6, lr, #66	; 0x42
 8006f42:	2100      	movs	r1, #0
 8006f44:	2e17      	cmp	r6, #23
 8006f46:	bf98      	it	ls
 8006f48:	f10e 0e20 	addls.w	lr, lr, #32
 8006f4c:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
 8006f50:	f883 10d0 	strb.w	r1, [r3, #208]	; 0xd0
 8006f54:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 8006f58:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
 8006f5c:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 8006f60:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
 8006f64:	f883 10dc 	strb.w	r1, [r3, #220]	; 0xdc
 8006f68:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
 8006f6c:	f883 10e8 	strb.w	r1, [r3, #232]	; 0xe8
 8006f70:	f1a5 0142 	sub.w	r1, r5, #66	; 0x42
 8006f74:	bf98      	it	ls
 8006f76:	fa5f fe8e 	uxtbls.w	lr, lr
 8006f7a:	2917      	cmp	r1, #23
 8006f7c:	7a11      	ldrb	r1, [r2, #8]
 8006f7e:	7896      	ldrb	r6, [r2, #2]
 8006f80:	f1a1 0042 	sub.w	r0, r1, #66	; 0x42
 8006f84:	bf9c      	itt	ls
 8006f86:	3520      	addls	r5, #32
 8006f88:	b2ed      	uxtbls	r5, r5
 8006f8a:	2817      	cmp	r0, #23
 8006f8c:	bf98      	it	ls
 8006f8e:	3120      	addls	r1, #32
 8006f90:	f1a7 0042 	sub.w	r0, r7, #66	; 0x42
 8006f94:	bf98      	it	ls
 8006f96:	b2c9      	uxtbls	r1, r1
 8006f98:	2817      	cmp	r0, #23
 8006f9a:	bf98      	it	ls
 8006f9c:	3720      	addls	r7, #32
 8006f9e:	f1a4 0042 	sub.w	r0, r4, #66	; 0x42
 8006fa2:	bf98      	it	ls
 8006fa4:	b2ff      	uxtbls	r7, r7
 8006fa6:	2817      	cmp	r0, #23
 8006fa8:	bf98      	it	ls
 8006faa:	3420      	addls	r4, #32
 8006fac:	f1ac 0042 	sub.w	r0, ip, #66	; 0x42
 8006fb0:	bf98      	it	ls
 8006fb2:	b2e4      	uxtbls	r4, r4
 8006fb4:	2817      	cmp	r0, #23
 8006fb6:	bf98      	it	ls
 8006fb8:	f10c 0c20 	addls.w	ip, ip, #32
 8006fbc:	f1a6 0042 	sub.w	r0, r6, #66	; 0x42
 8006fc0:	bf98      	it	ls
 8006fc2:	fa5f fc8c 	uxtbls.w	ip, ip
 8006fc6:	2817      	cmp	r0, #23
 8006fc8:	7990      	ldrb	r0, [r2, #6]
 8006fca:	7a92      	ldrb	r2, [r2, #10]
 8006fcc:	f1a0 0842 	sub.w	r8, r0, #66	; 0x42
 8006fd0:	bf9c      	itt	ls
 8006fd2:	3620      	addls	r6, #32
 8006fd4:	b2f6      	uxtbls	r6, r6
 8006fd6:	f1b8 0f17 	cmp.w	r8, #23
 8006fda:	bf98      	it	ls
 8006fdc:	3020      	addls	r0, #32
 8006fde:	f1a2 0842 	sub.w	r8, r2, #66	; 0x42
 8006fe2:	bf98      	it	ls
 8006fe4:	b2c0      	uxtbls	r0, r0
 8006fe6:	f1b8 0f17 	cmp.w	r8, #23
 8006fea:	bf98      	it	ls
 8006fec:	3220      	addls	r2, #32
 8006fee:	f1ae 0e64 	sub.w	lr, lr, #100	; 0x64
 8006ff2:	bf98      	it	ls
 8006ff4:	b2d2      	uxtbls	r2, r2
 8006ff6:	f1be 0f13 	cmp.w	lr, #19
 8006ffa:	d80f      	bhi.n	800701c <iNemo_setOrientation_6X.constprop.0+0xf4>
 8006ffc:	e8df f00e 	tbb	[pc, lr]
 8007000:	0e0eac0a 	.word	0x0e0eac0a
 8007004:	0e0e0e0e 	.word	0x0e0e0e0e
 8007008:	0eb10e0e 	.word	0x0eb10e0e
 800700c:	b60e0e0e 	.word	0xb60e0e0e
 8007010:	c00ebb0e 	.word	0xc00ebb0e
 8007014:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8007018:	f883 e0ce 	strb.w	lr, [r3, #206]	; 0xce
 800701c:	3f64      	subs	r7, #100	; 0x64
 800701e:	2f13      	cmp	r7, #19
 8007020:	d80e      	bhi.n	8007040 <iNemo_setOrientation_6X.constprop.0+0x118>
 8007022:	e8df f007 	tbb	[pc, r7]
 8007026:	b20a      	.short	0xb20a
 8007028:	0d0d0d0d 	.word	0x0d0d0d0d
 800702c:	0d0d0d0d 	.word	0x0d0d0d0d
 8007030:	0d0d0db6 	.word	0x0d0d0db6
 8007034:	be0dba0d 	.word	0xbe0dba0d
 8007038:	c20d      	.short	0xc20d
 800703a:	27ff      	movs	r7, #255	; 0xff
 800703c:	f883 70cf 	strb.w	r7, [r3, #207]	; 0xcf
 8007040:	3e64      	subs	r6, #100	; 0x64
 8007042:	2e13      	cmp	r6, #19
 8007044:	d80e      	bhi.n	8007064 <iNemo_setOrientation_6X.constprop.0+0x13c>
 8007046:	e8df f006 	tbb	[pc, r6]
 800704a:	b40a      	.short	0xb40a
 800704c:	0d0d0d0d 	.word	0x0d0d0d0d
 8007050:	0d0d0d0d 	.word	0x0d0d0d0d
 8007054:	0d0d0db8 	.word	0x0d0d0db8
 8007058:	c00dbc0d 	.word	0xc00dbc0d
 800705c:	c40d      	.short	0xc40d
 800705e:	26ff      	movs	r6, #255	; 0xff
 8007060:	f883 60d0 	strb.w	r6, [r3, #208]	; 0xd0
 8007064:	3d64      	subs	r5, #100	; 0x64
 8007066:	2d13      	cmp	r5, #19
 8007068:	d80e      	bhi.n	8007088 <iNemo_setOrientation_6X.constprop.0+0x160>
 800706a:	e8df f005 	tbb	[pc, r5]
 800706e:	b60a      	.short	0xb60a
 8007070:	0d0d0d0d 	.word	0x0d0d0d0d
 8007074:	0d0d0d0d 	.word	0x0d0d0d0d
 8007078:	0d0d0dba 	.word	0x0d0d0dba
 800707c:	c20dbe0d 	.word	0xc20dbe0d
 8007080:	c60d      	.short	0xc60d
 8007082:	25ff      	movs	r5, #255	; 0xff
 8007084:	f883 50e6 	strb.w	r5, [r3, #230]	; 0xe6
 8007088:	3c64      	subs	r4, #100	; 0x64
 800708a:	2c13      	cmp	r4, #19
 800708c:	d80e      	bhi.n	80070ac <iNemo_setOrientation_6X.constprop.0+0x184>
 800708e:	e8df f004 	tbb	[pc, r4]
 8007092:	b80a      	.short	0xb80a
 8007094:	0d0d0d0d 	.word	0x0d0d0d0d
 8007098:	0d0d0d0d 	.word	0x0d0d0d0d
 800709c:	0d0d0dbc 	.word	0x0d0d0dbc
 80070a0:	c40dc00d 	.word	0xc40dc00d
 80070a4:	c80d      	.short	0xc80d
 80070a6:	24ff      	movs	r4, #255	; 0xff
 80070a8:	f883 40e7 	strb.w	r4, [r3, #231]	; 0xe7
 80070ac:	3864      	subs	r0, #100	; 0x64
 80070ae:	2813      	cmp	r0, #19
 80070b0:	d80e      	bhi.n	80070d0 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 80070b2:	e8df f000 	tbb	[pc, r0]
 80070b6:	ba0a      	.short	0xba0a
 80070b8:	0d0d0d0d 	.word	0x0d0d0d0d
 80070bc:	0d0d0d0d 	.word	0x0d0d0d0d
 80070c0:	0d0d0dbe 	.word	0x0d0d0dbe
 80070c4:	c60dc20d 	.word	0xc60dc20d
 80070c8:	ca0d      	.short	0xca0d
 80070ca:	20ff      	movs	r0, #255	; 0xff
 80070cc:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
 80070d0:	3964      	subs	r1, #100	; 0x64
 80070d2:	2913      	cmp	r1, #19
 80070d4:	d813      	bhi.n	80070fe <iNemo_setOrientation_6X.constprop.0+0x1d6>
 80070d6:	e8df f001 	tbb	[pc, r1]
 80070da:	bc0f      	.short	0xbc0f
 80070dc:	12121212 	.word	0x12121212
 80070e0:	12121212 	.word	0x12121212
 80070e4:	121212c0 	.word	0x121212c0
 80070e8:	c812c412 	.word	0xc812c412
 80070ec:	cc12      	.short	0xcc12
 80070ee:	bf00      	nop
 80070f0:	20000000 	.word	0x20000000
 80070f4:	20001628 	.word	0x20001628
 80070f8:	21ff      	movs	r1, #255	; 0xff
 80070fa:	f883 10da 	strb.w	r1, [r3, #218]	; 0xda
 80070fe:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 8007102:	f1bc 0f13 	cmp.w	ip, #19
 8007106:	d80e      	bhi.n	8007126 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 8007108:	e8df f00c 	tbb	[pc, ip]
 800710c:	0d0db70a 	.word	0x0d0db70a
 8007110:	0d0d0d0d 	.word	0x0d0d0d0d
 8007114:	0dbb0d0d 	.word	0x0dbb0d0d
 8007118:	bf0d0d0d 	.word	0xbf0d0d0d
 800711c:	c70dc30d 	.word	0xc70dc30d
 8007120:	21ff      	movs	r1, #255	; 0xff
 8007122:	f883 10db 	strb.w	r1, [r3, #219]	; 0xdb
 8007126:	3a64      	subs	r2, #100	; 0x64
 8007128:	2a13      	cmp	r2, #19
 800712a:	d80e      	bhi.n	800714a <iNemo_setOrientation_6X.constprop.0+0x222>
 800712c:	e8df f002 	tbb	[pc, r2]
 8007130:	0d0db90a 	.word	0x0d0db90a
 8007134:	0d0d0d0d 	.word	0x0d0d0d0d
 8007138:	0dbe0d0d 	.word	0x0dbe0d0d
 800713c:	c30d0d0d 	.word	0xc30d0d0d
 8007140:	0f0dc80d 	.word	0x0f0dc80d
 8007144:	22ff      	movs	r2, #255	; 0xff
 8007146:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800714a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800714e:	22ff      	movs	r2, #255	; 0xff
 8007150:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 8007154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007158:	f04f 0e01 	mov.w	lr, #1
 800715c:	f883 e0c8 	strb.w	lr, [r3, #200]	; 0xc8
 8007160:	e75c      	b.n	800701c <iNemo_setOrientation_6X.constprop.0+0xf4>
 8007162:	f04f 0e01 	mov.w	lr, #1
 8007166:	f883 e0cb 	strb.w	lr, [r3, #203]	; 0xcb
 800716a:	e757      	b.n	800701c <iNemo_setOrientation_6X.constprop.0+0xf4>
 800716c:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8007170:	f883 e0cb 	strb.w	lr, [r3, #203]	; 0xcb
 8007174:	e752      	b.n	800701c <iNemo_setOrientation_6X.constprop.0+0xf4>
 8007176:	f04f 0e01 	mov.w	lr, #1
 800717a:	f883 e0ce 	strb.w	lr, [r3, #206]	; 0xce
 800717e:	e74d      	b.n	800701c <iNemo_setOrientation_6X.constprop.0+0xf4>
 8007180:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8007184:	f883 e0c8 	strb.w	lr, [r3, #200]	; 0xc8
 8007188:	e748      	b.n	800701c <iNemo_setOrientation_6X.constprop.0+0xf4>
 800718a:	2701      	movs	r7, #1
 800718c:	f883 70c9 	strb.w	r7, [r3, #201]	; 0xc9
 8007190:	e756      	b.n	8007040 <iNemo_setOrientation_6X.constprop.0+0x118>
 8007192:	2701      	movs	r7, #1
 8007194:	f883 70cc 	strb.w	r7, [r3, #204]	; 0xcc
 8007198:	e752      	b.n	8007040 <iNemo_setOrientation_6X.constprop.0+0x118>
 800719a:	27ff      	movs	r7, #255	; 0xff
 800719c:	f883 70cc 	strb.w	r7, [r3, #204]	; 0xcc
 80071a0:	e74e      	b.n	8007040 <iNemo_setOrientation_6X.constprop.0+0x118>
 80071a2:	2701      	movs	r7, #1
 80071a4:	f883 70cf 	strb.w	r7, [r3, #207]	; 0xcf
 80071a8:	e74a      	b.n	8007040 <iNemo_setOrientation_6X.constprop.0+0x118>
 80071aa:	27ff      	movs	r7, #255	; 0xff
 80071ac:	f883 70c9 	strb.w	r7, [r3, #201]	; 0xc9
 80071b0:	e746      	b.n	8007040 <iNemo_setOrientation_6X.constprop.0+0x118>
 80071b2:	2601      	movs	r6, #1
 80071b4:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
 80071b8:	e754      	b.n	8007064 <iNemo_setOrientation_6X.constprop.0+0x13c>
 80071ba:	2601      	movs	r6, #1
 80071bc:	f883 60cd 	strb.w	r6, [r3, #205]	; 0xcd
 80071c0:	e750      	b.n	8007064 <iNemo_setOrientation_6X.constprop.0+0x13c>
 80071c2:	26ff      	movs	r6, #255	; 0xff
 80071c4:	f883 60cd 	strb.w	r6, [r3, #205]	; 0xcd
 80071c8:	e74c      	b.n	8007064 <iNemo_setOrientation_6X.constprop.0+0x13c>
 80071ca:	2601      	movs	r6, #1
 80071cc:	f883 60d0 	strb.w	r6, [r3, #208]	; 0xd0
 80071d0:	e748      	b.n	8007064 <iNemo_setOrientation_6X.constprop.0+0x13c>
 80071d2:	26ff      	movs	r6, #255	; 0xff
 80071d4:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
 80071d8:	e744      	b.n	8007064 <iNemo_setOrientation_6X.constprop.0+0x13c>
 80071da:	2501      	movs	r5, #1
 80071dc:	f883 50e0 	strb.w	r5, [r3, #224]	; 0xe0
 80071e0:	e752      	b.n	8007088 <iNemo_setOrientation_6X.constprop.0+0x160>
 80071e2:	2501      	movs	r5, #1
 80071e4:	f883 50e3 	strb.w	r5, [r3, #227]	; 0xe3
 80071e8:	e74e      	b.n	8007088 <iNemo_setOrientation_6X.constprop.0+0x160>
 80071ea:	25ff      	movs	r5, #255	; 0xff
 80071ec:	f883 50e3 	strb.w	r5, [r3, #227]	; 0xe3
 80071f0:	e74a      	b.n	8007088 <iNemo_setOrientation_6X.constprop.0+0x160>
 80071f2:	2501      	movs	r5, #1
 80071f4:	f883 50e6 	strb.w	r5, [r3, #230]	; 0xe6
 80071f8:	e746      	b.n	8007088 <iNemo_setOrientation_6X.constprop.0+0x160>
 80071fa:	25ff      	movs	r5, #255	; 0xff
 80071fc:	f883 50e0 	strb.w	r5, [r3, #224]	; 0xe0
 8007200:	e742      	b.n	8007088 <iNemo_setOrientation_6X.constprop.0+0x160>
 8007202:	2401      	movs	r4, #1
 8007204:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
 8007208:	e750      	b.n	80070ac <iNemo_setOrientation_6X.constprop.0+0x184>
 800720a:	2401      	movs	r4, #1
 800720c:	f883 40e4 	strb.w	r4, [r3, #228]	; 0xe4
 8007210:	e74c      	b.n	80070ac <iNemo_setOrientation_6X.constprop.0+0x184>
 8007212:	24ff      	movs	r4, #255	; 0xff
 8007214:	f883 40e4 	strb.w	r4, [r3, #228]	; 0xe4
 8007218:	e748      	b.n	80070ac <iNemo_setOrientation_6X.constprop.0+0x184>
 800721a:	2401      	movs	r4, #1
 800721c:	f883 40e7 	strb.w	r4, [r3, #231]	; 0xe7
 8007220:	e744      	b.n	80070ac <iNemo_setOrientation_6X.constprop.0+0x184>
 8007222:	24ff      	movs	r4, #255	; 0xff
 8007224:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
 8007228:	e740      	b.n	80070ac <iNemo_setOrientation_6X.constprop.0+0x184>
 800722a:	2001      	movs	r0, #1
 800722c:	f883 00e2 	strb.w	r0, [r3, #226]	; 0xe2
 8007230:	e74e      	b.n	80070d0 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 8007232:	2001      	movs	r0, #1
 8007234:	f883 00e5 	strb.w	r0, [r3, #229]	; 0xe5
 8007238:	e74a      	b.n	80070d0 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 800723a:	20ff      	movs	r0, #255	; 0xff
 800723c:	f883 00e5 	strb.w	r0, [r3, #229]	; 0xe5
 8007240:	e746      	b.n	80070d0 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 8007242:	2001      	movs	r0, #1
 8007244:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
 8007248:	e742      	b.n	80070d0 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 800724a:	20ff      	movs	r0, #255	; 0xff
 800724c:	f883 00e2 	strb.w	r0, [r3, #226]	; 0xe2
 8007250:	e73e      	b.n	80070d0 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 8007252:	2101      	movs	r1, #1
 8007254:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
 8007258:	e751      	b.n	80070fe <iNemo_setOrientation_6X.constprop.0+0x1d6>
 800725a:	2101      	movs	r1, #1
 800725c:	f883 10d7 	strb.w	r1, [r3, #215]	; 0xd7
 8007260:	e74d      	b.n	80070fe <iNemo_setOrientation_6X.constprop.0+0x1d6>
 8007262:	21ff      	movs	r1, #255	; 0xff
 8007264:	f883 10d7 	strb.w	r1, [r3, #215]	; 0xd7
 8007268:	e749      	b.n	80070fe <iNemo_setOrientation_6X.constprop.0+0x1d6>
 800726a:	2101      	movs	r1, #1
 800726c:	f883 10da 	strb.w	r1, [r3, #218]	; 0xda
 8007270:	e745      	b.n	80070fe <iNemo_setOrientation_6X.constprop.0+0x1d6>
 8007272:	21ff      	movs	r1, #255	; 0xff
 8007274:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
 8007278:	e741      	b.n	80070fe <iNemo_setOrientation_6X.constprop.0+0x1d6>
 800727a:	2101      	movs	r1, #1
 800727c:	f883 10d5 	strb.w	r1, [r3, #213]	; 0xd5
 8007280:	e751      	b.n	8007126 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 8007282:	2101      	movs	r1, #1
 8007284:	f883 10d8 	strb.w	r1, [r3, #216]	; 0xd8
 8007288:	e74d      	b.n	8007126 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 800728a:	21ff      	movs	r1, #255	; 0xff
 800728c:	f883 10d8 	strb.w	r1, [r3, #216]	; 0xd8
 8007290:	e749      	b.n	8007126 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 8007292:	2101      	movs	r1, #1
 8007294:	f883 10db 	strb.w	r1, [r3, #219]	; 0xdb
 8007298:	e745      	b.n	8007126 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 800729a:	21ff      	movs	r1, #255	; 0xff
 800729c:	f883 10d5 	strb.w	r1, [r3, #213]	; 0xd5
 80072a0:	e741      	b.n	8007126 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 80072a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 80072b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072b6:	22ff      	movs	r2, #255	; 0xff
 80072b8:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 80072bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 80072c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072ca:	bf00      	nop

080072cc <MotionDI_setKnobs.part.0>:
 80072cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072ce:	e9d0 160b 	ldrd	r1, r6, [r0, #44]	; 0x2c
 80072d2:	b091      	sub	sp, #68	; 0x44
 80072d4:	4b3c      	ldr	r3, [pc, #240]	; (80073c8 <MotionDI_setKnobs.part.0+0xfc>)
 80072d6:	f8cd 6031 	str.w	r6, [sp, #49]	; 0x31
 80072da:	461a      	mov	r2, r3
 80072dc:	4604      	mov	r4, r0
 80072de:	f8cd 102d 	str.w	r1, [sp, #45]	; 0x2d
 80072e2:	f8bd 7031 	ldrh.w	r7, [sp, #49]	; 0x31
 80072e6:	4d39      	ldr	r5, [pc, #228]	; (80073cc <MotionDI_setKnobs.part.0+0x100>)
 80072e8:	f832 0f08 	ldrh.w	r0, [r2, #8]!
 80072ec:	809f      	strh	r7, [r3, #4]
 80072ee:	f8bd 702d 	ldrh.w	r7, [sp, #45]	; 0x2d
 80072f2:	6a26      	ldr	r6, [r4, #32]
 80072f4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80072f6:	801f      	strh	r7, [r3, #0]
 80072f8:	f89d 702f 	ldrb.w	r7, [sp, #47]	; 0x2f
 80072fc:	709f      	strb	r7, [r3, #2]
 80072fe:	f8d5 e0f0 	ldr.w	lr, [r5, #240]	; 0xf0
 8007302:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 8007306:	f8ad 0035 	strh.w	r0, [sp, #53]	; 0x35
 800730a:	f8c5 6128 	str.w	r6, [r5, #296]	; 0x128
 800730e:	7890      	ldrb	r0, [r2, #2]
 8007310:	f8c5 60ec 	str.w	r6, [r5, #236]	; 0xec
 8007314:	f8c5 1134 	str.w	r1, [r5, #308]	; 0x134
 8007318:	f894 6029 	ldrb.w	r6, [r4, #41]	; 0x29
 800731c:	f8c5 10f8 	str.w	r1, [r5, #248]	; 0xf8
 8007320:	2100      	movs	r1, #0
 8007322:	f89d c033 	ldrb.w	ip, [sp, #51]	; 0x33
 8007326:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
 800732a:	f8c5 e12c 	str.w	lr, [r5, #300]	; 0x12c
 800732e:	f885 113d 	strb.w	r1, [r5, #317]	; 0x13d
 8007332:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
 8007336:	f885 7161 	strb.w	r7, [r5, #353]	; 0x161
 800733a:	f885 6162 	strb.w	r6, [r5, #354]	; 0x162
 800733e:	f885 7125 	strb.w	r7, [r5, #293]	; 0x125
 8007342:	f885 6126 	strb.w	r6, [r5, #294]	; 0x126
 8007346:	f885 1101 	strb.w	r1, [r5, #257]	; 0x101
 800734a:	f8bd 1035 	ldrh.w	r1, [sp, #53]	; 0x35
 800734e:	8119      	strh	r1, [r3, #8]
 8007350:	f883 c006 	strb.w	ip, [r3, #6]
 8007354:	7090      	strb	r0, [r2, #2]
 8007356:	f7ff fc15 	bl	8006b84 <iNemo_setOrientation.constprop.0>
 800735a:	f7ff fde5 	bl	8006f28 <iNemo_setOrientation_6X.constprop.0>
 800735e:	4a1c      	ldr	r2, [pc, #112]	; (80073d0 <MotionDI_setKnobs.part.0+0x104>)
 8007360:	f8d2 3464 	ldr.w	r3, [r2, #1124]	; 0x464
 8007364:	1e59      	subs	r1, r3, #1
 8007366:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800736a:	d211      	bcs.n	8007390 <MotionDI_setKnobs.part.0+0xc4>
 800736c:	3b0a      	subs	r3, #10
 800736e:	b29b      	uxth	r3, r3
 8007370:	2b5a      	cmp	r3, #90	; 0x5a
 8007372:	bf8c      	ite	hi
 8007374:	2300      	movhi	r3, #0
 8007376:	2301      	movls	r3, #1
 8007378:	6821      	ldr	r1, [r4, #0]
 800737a:	7013      	strb	r3, [r2, #0]
 800737c:	f502 638d 	add.w	r3, r2, #1128	; 0x468
 8007380:	4814      	ldr	r0, [pc, #80]	; (80073d4 <MotionDI_setKnobs.part.0+0x108>)
 8007382:	6019      	str	r1, [r3, #0]
 8007384:	f502 618c 	add.w	r1, r2, #1120	; 0x460
 8007388:	2301      	movs	r3, #1
 800738a:	6008      	str	r0, [r1, #0]
 800738c:	f882 346c 	strb.w	r3, [r2, #1132]	; 0x46c
 8007390:	68e3      	ldr	r3, [r4, #12]
 8007392:	6920      	ldr	r0, [r4, #16]
 8007394:	6961      	ldr	r1, [r4, #20]
 8007396:	69a2      	ldr	r2, [r4, #24]
 8007398:	606b      	str	r3, [r5, #4]
 800739a:	4e0f      	ldr	r6, [pc, #60]	; (80073d8 <MotionDI_setKnobs.part.0+0x10c>)
 800739c:	68a3      	ldr	r3, [r4, #8]
 800739e:	6168      	str	r0, [r5, #20]
 80073a0:	60a9      	str	r1, [r5, #8]
 80073a2:	60ea      	str	r2, [r5, #12]
 80073a4:	602b      	str	r3, [r5, #0]
 80073a6:	f104 0730 	add.w	r7, r4, #48	; 0x30
 80073aa:	6820      	ldr	r0, [r4, #0]
 80073ac:	6861      	ldr	r1, [r4, #4]
 80073ae:	68a2      	ldr	r2, [r4, #8]
 80073b0:	68e3      	ldr	r3, [r4, #12]
 80073b2:	4635      	mov	r5, r6
 80073b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80073b6:	3410      	adds	r4, #16
 80073b8:	42bc      	cmp	r4, r7
 80073ba:	462e      	mov	r6, r5
 80073bc:	d1f5      	bne.n	80073aa <MotionDI_setKnobs.part.0+0xde>
 80073be:	6820      	ldr	r0, [r4, #0]
 80073c0:	6028      	str	r0, [r5, #0]
 80073c2:	b011      	add	sp, #68	; 0x44
 80073c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80073c6:	bf00      	nop
 80073c8:	20000000 	.word	0x20000000
 80073cc:	20001628 	.word	0x20001628
 80073d0:	20001fd0 	.word	0x20001fd0
 80073d4:	3a83126f 	.word	0x3a83126f
 80073d8:	2000178c 	.word	0x2000178c
 80073dc:	00000000 	.word	0x00000000

080073e0 <MotionDI_Initialize>:
 80073e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073e4:	4a12      	ldr	r2, [pc, #72]	; (8007430 <MotionDI_Initialize+0x50>)
 80073e6:	4913      	ldr	r1, [pc, #76]	; (8007434 <MotionDI_Initialize+0x54>)
 80073e8:	6813      	ldr	r3, [r2, #0]
 80073ea:	f023 0301 	bic.w	r3, r3, #1
 80073ee:	ed2d 8b02 	vpush	{d8}
 80073f2:	6013      	str	r3, [r2, #0]
 80073f4:	680b      	ldr	r3, [r1, #0]
 80073f6:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 80073fa:	4013      	ands	r3, r2
 80073fc:	f24c 2440 	movw	r4, #49728	; 0xc240
 8007400:	42a3      	cmp	r3, r4
 8007402:	b091      	sub	sp, #68	; 0x44
 8007404:	4607      	mov	r7, r0
 8007406:	d01f      	beq.n	8007448 <MotionDI_Initialize+0x68>
 8007408:	680b      	ldr	r3, [r1, #0]
 800740a:	f24c 2170 	movw	r1, #49776	; 0xc270
 800740e:	4013      	ands	r3, r2
 8007410:	428b      	cmp	r3, r1
 8007412:	d019      	beq.n	8007448 <MotionDI_Initialize+0x68>
 8007414:	4b08      	ldr	r3, [pc, #32]	; (8007438 <MotionDI_Initialize+0x58>)
 8007416:	2201      	movs	r2, #1
 8007418:	601a      	str	r2, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	2a00      	cmp	r2, #0
 800741e:	d1fc      	bne.n	800741a <MotionDI_Initialize+0x3a>
 8007420:	4b06      	ldr	r3, [pc, #24]	; (800743c <MotionDI_Initialize+0x5c>)
 8007422:	4a07      	ldr	r2, [pc, #28]	; (8007440 <MotionDI_Initialize+0x60>)
 8007424:	601a      	str	r2, [r3, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	4b06      	ldr	r3, [pc, #24]	; (8007444 <MotionDI_Initialize+0x64>)
 800742a:	429a      	cmp	r2, r3
 800742c:	d02b      	beq.n	8007486 <MotionDI_Initialize+0xa6>
 800742e:	e7fe      	b.n	800742e <MotionDI_Initialize+0x4e>
 8007430:	e0002000 	.word	0xe0002000
 8007434:	e000ed00 	.word	0xe000ed00
 8007438:	40023008 	.word	0x40023008
 800743c:	40023000 	.word	0x40023000
 8007440:	f407a5c2 	.word	0xf407a5c2
 8007444:	b5e8b5cd 	.word	0xb5e8b5cd
 8007448:	4be3      	ldr	r3, [pc, #908]	; (80077d8 <MotionDI_Initialize+0x3f8>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d1e1      	bne.n	8007414 <MotionDI_Initialize+0x34>
 8007450:	4ae2      	ldr	r2, [pc, #904]	; (80077dc <MotionDI_Initialize+0x3fc>)
 8007452:	6813      	ldr	r3, [r2, #0]
 8007454:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007458:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800745c:	d006      	beq.n	800746c <MotionDI_Initialize+0x8c>
 800745e:	6813      	ldr	r3, [r2, #0]
 8007460:	f240 4283 	movw	r2, #1155	; 0x483
 8007464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007468:	4293      	cmp	r3, r2
 800746a:	d1d3      	bne.n	8007414 <MotionDI_Initialize+0x34>
 800746c:	4bdc      	ldr	r3, [pc, #880]	; (80077e0 <MotionDI_Initialize+0x400>)
 800746e:	2201      	movs	r2, #1
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	2a00      	cmp	r2, #0
 8007476:	d1fc      	bne.n	8007472 <MotionDI_Initialize+0x92>
 8007478:	4bda      	ldr	r3, [pc, #872]	; (80077e4 <MotionDI_Initialize+0x404>)
 800747a:	4adb      	ldr	r2, [pc, #876]	; (80077e8 <MotionDI_Initialize+0x408>)
 800747c:	601a      	str	r2, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	4bda      	ldr	r3, [pc, #872]	; (80077ec <MotionDI_Initialize+0x40c>)
 8007482:	429a      	cmp	r2, r3
 8007484:	d1d3      	bne.n	800742e <MotionDI_Initialize+0x4e>
 8007486:	4cda      	ldr	r4, [pc, #872]	; (80077f0 <MotionDI_Initialize+0x410>)
 8007488:	4dda      	ldr	r5, [pc, #872]	; (80077f4 <MotionDI_Initialize+0x414>)
 800748a:	f8d7 c000 	ldr.w	ip, [r7]
 800748e:	4bda      	ldr	r3, [pc, #872]	; (80077f8 <MotionDI_Initialize+0x418>)
 8007490:	49da      	ldr	r1, [pc, #872]	; (80077fc <MotionDI_Initialize+0x41c>)
 8007492:	f504 62c9 	add.w	r2, r4, #1608	; 0x648
 8007496:	2001      	movs	r0, #1
 8007498:	f8c2 c000 	str.w	ip, [r2]
 800749c:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
 80074a0:	f884 0644 	strb.w	r0, [r4, #1604]	; 0x644
 80074a4:	652a      	str	r2, [r5, #80]	; 0x50
 80074a6:	2014      	movs	r0, #20
 80074a8:	f505 628c 	add.w	r2, r5, #1120	; 0x460
 80074ac:	f505 6b8d 	add.w	fp, r5, #1128	; 0x468
 80074b0:	2600      	movs	r6, #0
 80074b2:	f64f 7cff 	movw	ip, #65535	; 0xffff
 80074b6:	f8c5 0464 	str.w	r0, [r5, #1124]	; 0x464
 80074ba:	f44f 00dc 	mov.w	r0, #7208960	; 0x6e0000
 80074be:	6011      	str	r1, [r2, #0]
 80074c0:	f8c5 01c8 	str.w	r0, [r5, #456]	; 0x1c8
 80074c4:	2230      	movs	r2, #48	; 0x30
 80074c6:	f8cb 3000 	str.w	r3, [fp]
 80074ca:	f8a5 c058 	strh.w	ip, [r5, #88]	; 0x58
 80074ce:	f105 0014 	add.w	r0, r5, #20
 80074d2:	4631      	mov	r1, r6
 80074d4:	702e      	strb	r6, [r5, #0]
 80074d6:	f885 646c 	strb.w	r6, [r5, #1132]	; 0x46c
 80074da:	f885 604c 	strb.w	r6, [r5, #76]	; 0x4c
 80074de:	656e      	str	r6, [r5, #84]	; 0x54
 80074e0:	64ae      	str	r6, [r5, #72]	; 0x48
 80074e2:	f000 fb3d 	bl	8007b60 <memset>
 80074e6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80074ea:	f44f 7281 	mov.w	r2, #258	; 0x102
 80074ee:	82aa      	strh	r2, [r5, #20]
 80074f0:	626b      	str	r3, [r5, #36]	; 0x24
 80074f2:	636b      	str	r3, [r5, #52]	; 0x34
 80074f4:	646b      	str	r3, [r5, #68]	; 0x44
 80074f6:	ed97 0a00 	vldr	s0, [r7]
 80074fa:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 8007800 <MotionDI_Initialize+0x420>
 80074fe:	612e      	str	r6, [r5, #16]
 8007500:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007504:	f884 664c 	strb.w	r6, [r4, #1612]	; 0x64c
 8007508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800750c:	ee17 2a90 	vmov	r2, s15
 8007510:	1e53      	subs	r3, r2, #1
 8007512:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007516:	d20b      	bcs.n	8007530 <MotionDI_Initialize+0x150>
 8007518:	f1a2 030a 	sub.w	r3, r2, #10
 800751c:	b29b      	uxth	r3, r3
 800751e:	2b5a      	cmp	r3, #90	; 0x5a
 8007520:	bf8c      	ite	hi
 8007522:	2300      	movhi	r3, #0
 8007524:	2301      	movls	r3, #1
 8007526:	f8c5 2464 	str.w	r2, [r5, #1124]	; 0x464
 800752a:	702b      	strb	r3, [r5, #0]
 800752c:	ed97 0a00 	vldr	s0, [r7]
 8007530:	4eb4      	ldr	r6, [pc, #720]	; (8007804 <MotionDI_Initialize+0x424>)
 8007532:	eddf 6ab5 	vldr	s13, [pc, #724]	; 8007808 <MotionDI_Initialize+0x428>
 8007536:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800780c <MotionDI_Initialize+0x42c>
 800753a:	4fb5      	ldr	r7, [pc, #724]	; (8007810 <MotionDI_Initialize+0x430>)
 800753c:	f7ff fad6 	bl	8006aec <iNemoEngine_gbias_init>
 8007540:	f20f 296c 	addw	r9, pc, #620	; 0x26c
 8007544:	e9d9 8900 	ldrd	r8, r9, [r9]
 8007548:	ed9f 0b9b 	vldr	d0, [pc, #620]	; 80077b8 <MotionDI_Initialize+0x3d8>
 800754c:	ed9f 1b9c 	vldr	d1, [pc, #624]	; 80077c0 <MotionDI_Initialize+0x3e0>
 8007550:	ed9f 2b9d 	vldr	d2, [pc, #628]	; 80077c8 <MotionDI_Initialize+0x3e8>
 8007554:	ed9f 5b9e 	vldr	d5, [pc, #632]	; 80077d0 <MotionDI_Initialize+0x3f0>
 8007558:	eddf 7aae 	vldr	s15, [pc, #696]	; 8007814 <MotionDI_Initialize+0x434>
 800755c:	eddf 4aae 	vldr	s9, [pc, #696]	; 8007818 <MotionDI_Initialize+0x438>
 8007560:	ed9f 6aae 	vldr	s12, [pc, #696]	; 800781c <MotionDI_Initialize+0x43c>
 8007564:	ed9f 3aae 	vldr	s6, [pc, #696]	; 8007820 <MotionDI_Initialize+0x440>
 8007568:	eddf 3aae 	vldr	s7, [pc, #696]	; 8007824 <MotionDI_Initialize+0x444>
 800756c:	ed9f 4aae 	vldr	s8, [pc, #696]	; 8007828 <MotionDI_Initialize+0x448>
 8007570:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 8007838 <MotionDI_Initialize+0x458>
 8007574:	edc6 7a87 	vstr	s15, [r6, #540]	; 0x21c
 8007578:	f241 1ab6 	movw	sl, #4534	; 0x11b6
 800757c:	f241 13b4 	movw	r3, #4532	; 0x11b4
 8007580:	2500      	movs	r5, #0
 8007582:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007586:	f606 00e8 	addw	r0, r6, #2280	; 0x8e8
 800758a:	210a      	movs	r1, #10
 800758c:	f886 18e0 	strb.w	r1, [r6, #2272]	; 0x8e0
 8007590:	ed86 0b08 	vstr	d0, [r6, #32]
 8007594:	ed86 1b0c 	vstr	d1, [r6, #48]	; 0x30
 8007598:	ed86 2b0e 	vstr	d2, [r6, #56]	; 0x38
 800759c:	ed86 5b06 	vstr	d5, [r6, #24]
 80075a0:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
 80075a4:	613d      	str	r5, [r7, #16]
 80075a6:	753d      	strb	r5, [r7, #20]
 80075a8:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
 80075ac:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
 80075b0:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
 80075b4:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
 80075b8:	52f5      	strh	r5, [r6, r3]
 80075ba:	607d      	str	r5, [r7, #4]
 80075bc:	723d      	strb	r5, [r7, #8]
 80075be:	61fd      	str	r5, [r7, #28]
 80075c0:	f887 5020 	strb.w	r5, [r7, #32]
 80075c4:	62bd      	str	r5, [r7, #40]	; 0x28
 80075c6:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
 80075ca:	637d      	str	r5, [r7, #52]	; 0x34
 80075cc:	f887 5038 	strb.w	r5, [r7, #56]	; 0x38
 80075d0:	edc6 7a88 	vstr	s15, [r6, #544]	; 0x220
 80075d4:	edc4 4a27 	vstr	s9, [r4, #156]	; 0x9c
 80075d8:	ed84 6a28 	vstr	s12, [r4, #160]	; 0xa0
 80075dc:	f806 500a 	strb.w	r5, [r6, sl]
 80075e0:	ed9f 6a92 	vldr	s12, [pc, #584]	; 800782c <MotionDI_Initialize+0x44c>
 80075e4:	f8c4 5650 	str.w	r5, [r4, #1616]	; 0x650
 80075e8:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
 80075ec:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
 80075f0:	f8a6 58dc 	strh.w	r5, [r6, #2268]	; 0x8dc
 80075f4:	f886 58de 	strb.w	r5, [r6, #2270]	; 0x8de
 80075f8:	ed86 8a86 	vstr	s16, [r6, #536]	; 0x218
 80075fc:	643d      	str	r5, [r7, #64]	; 0x40
 80075fe:	ed80 5b02 	vstr	d5, [r0, #8]
 8007602:	ed9f 5a8b 	vldr	s10, [pc, #556]	; 8007830 <MotionDI_Initialize+0x450>
 8007606:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8007834 <MotionDI_Initialize+0x454>
 800760a:	ed80 8a82 	vstr	s16, [r0, #520]	; 0x208
 800760e:	f507 7168 	add.w	r1, r7, #928	; 0x3a0
 8007612:	e9c0 8906 	strd	r8, r9, [r0, #24]
 8007616:	eef2 4a04 	vmov.f32	s9, #36	; 0x41200000  10.0
 800761a:	f04f 0801 	mov.w	r8, #1
 800761e:	f04f 0902 	mov.w	r9, #2
 8007622:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8007626:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800762a:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 800762e:	ed80 0b04 	vstr	d0, [r0, #16]
 8007632:	ed80 1b08 	vstr	d1, [r0, #32]
 8007636:	ed80 2b0a 	vstr	d2, [r0, #40]	; 0x28
 800763a:	f88e 80c0 	strb.w	r8, [lr, #192]	; 0xc0
 800763e:	edc0 7a83 	vstr	s15, [r0, #524]	; 0x20c
 8007642:	edc0 7a84 	vstr	s15, [r0, #528]	; 0x210
 8007646:	f887 5044 	strb.w	r5, [r7, #68]	; 0x44
 800764a:	edc4 7aaf 	vstr	s15, [r4, #700]	; 0x2bc
 800764e:	edc4 7ab0 	vstr	s15, [r4, #704]	; 0x2c0
 8007652:	edc4 7ab1 	vstr	s15, [r4, #708]	; 0x2c4
 8007656:	edc4 7ab3 	vstr	s15, [r4, #716]	; 0x2cc
 800765a:	edc4 7ab4 	vstr	s15, [r4, #720]	; 0x2d0
 800765e:	edc4 7ab5 	vstr	s15, [r4, #724]	; 0x2d4
 8007662:	edc4 7ab7 	vstr	s15, [r4, #732]	; 0x2dc
 8007666:	edc4 7ab8 	vstr	s15, [r4, #736]	; 0x2e0
 800766a:	edc4 7ab9 	vstr	s15, [r4, #740]	; 0x2e4
 800766e:	edc4 7abb 	vstr	s15, [r4, #748]	; 0x2ec
 8007672:	edc4 7abc 	vstr	s15, [r4, #752]	; 0x2f0
 8007676:	edc4 7abd 	vstr	s15, [r4, #756]	; 0x2f4
 800767a:	edc4 7abf 	vstr	s15, [r4, #764]	; 0x2fc
 800767e:	edc4 7ac0 	vstr	s15, [r4, #768]	; 0x300
 8007682:	edc4 7ac1 	vstr	s15, [r4, #772]	; 0x304
 8007686:	edc4 7ac3 	vstr	s15, [r4, #780]	; 0x30c
 800768a:	edc4 7ac4 	vstr	s15, [r4, #784]	; 0x310
 800768e:	ed84 8ab2 	vstr	s16, [r4, #712]	; 0x2c8
 8007692:	ed84 8ab6 	vstr	s16, [r4, #728]	; 0x2d8
 8007696:	ed84 8aba 	vstr	s16, [r4, #744]	; 0x2e8
 800769a:	ed84 8abe 	vstr	s16, [r4, #760]	; 0x2f8
 800769e:	ed84 8ac2 	vstr	s16, [r4, #776]	; 0x308
 80076a2:	edc4 7ac5 	vstr	s15, [r4, #788]	; 0x314
 80076a6:	ed84 3a3b 	vstr	s6, [r4, #236]	; 0xec
 80076aa:	edc4 3a3c 	vstr	s7, [r4, #240]	; 0xf0
 80076ae:	ed84 4a3d 	vstr	s8, [r4, #244]	; 0xf4
 80076b2:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 80076b6:	edc4 4a3f 	vstr	s9, [r4, #252]	; 0xfc
 80076ba:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 80076be:	edc4 7ac7 	vstr	s15, [r4, #796]	; 0x31c
 80076c2:	edc4 7ac8 	vstr	s15, [r4, #800]	; 0x320
 80076c6:	edc4 7ac9 	vstr	s15, [r4, #804]	; 0x324
 80076ca:	edc4 7acb 	vstr	s15, [r4, #812]	; 0x32c
 80076ce:	edc4 7acc 	vstr	s15, [r4, #816]	; 0x330
 80076d2:	edc4 7acd 	vstr	s15, [r4, #820]	; 0x334
 80076d6:	edc4 7aa1 	vstr	s15, [r4, #644]	; 0x284
 80076da:	edc4 7aa2 	vstr	s15, [r4, #648]	; 0x288
 80076de:	edc4 7aa3 	vstr	s15, [r4, #652]	; 0x28c
 80076e2:	edc4 7aa5 	vstr	s15, [r4, #660]	; 0x294
 80076e6:	edc4 7aa6 	vstr	s15, [r4, #664]	; 0x298
 80076ea:	edc4 7aa7 	vstr	s15, [r4, #668]	; 0x29c
 80076ee:	edc4 7aa9 	vstr	s15, [r4, #676]	; 0x2a4
 80076f2:	edc4 7aaa 	vstr	s15, [r4, #680]	; 0x2a8
 80076f6:	edc4 7aab 	vstr	s15, [r4, #684]	; 0x2ac
 80076fa:	edc4 7aac 	vstr	s15, [r4, #688]	; 0x2b0
 80076fe:	edc4 7aad 	vstr	s15, [r4, #692]	; 0x2b4
 8007702:	edc4 7aae 	vstr	s15, [r4, #696]	; 0x2b8
 8007706:	ed84 8ac6 	vstr	s16, [r4, #792]	; 0x318
 800770a:	ed84 8aca 	vstr	s16, [r4, #808]	; 0x328
 800770e:	ed84 8ace 	vstr	s16, [r4, #824]	; 0x338
 8007712:	ed84 8aa0 	vstr	s16, [r4, #640]	; 0x280
 8007716:	ed84 8aa4 	vstr	s16, [r4, #656]	; 0x290
 800771a:	ed84 8aa8 	vstr	s16, [r4, #672]	; 0x2a0
 800771e:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
 8007722:	ed84 8a43 	vstr	s16, [r4, #268]	; 0x10c
 8007726:	f884 8110 	strb.w	r8, [r4, #272]	; 0x110
 800772a:	edc4 6a48 	vstr	s13, [r4, #288]	; 0x120
 800772e:	ed84 5a45 	vstr	s10, [r4, #276]	; 0x114
 8007732:	edc4 5a46 	vstr	s11, [r4, #280]	; 0x118
 8007736:	ed84 6a47 	vstr	s12, [r4, #284]	; 0x11c
 800773a:	f8a4 c124 	strh.w	ip, [r4, #292]	; 0x124
 800773e:	ed81 8a21 	vstr	s16, [r1, #132]	; 0x84
 8007742:	ed81 8a25 	vstr	s16, [r1, #148]	; 0x94
 8007746:	ed81 8a29 	vstr	s16, [r1, #164]	; 0xa4
 800774a:	ed81 8a2d 	vstr	s16, [r1, #180]	; 0xb4
 800774e:	ed81 8a31 	vstr	s16, [r1, #196]	; 0xc4
 8007752:	edc6 7a2c 	vstr	s15, [r6, #176]	; 0xb0
 8007756:	edc6 7a2d 	vstr	s15, [r6, #180]	; 0xb4
 800775a:	edc6 7a2e 	vstr	s15, [r6, #184]	; 0xb8
 800775e:	f884 9108 	strb.w	r9, [r4, #264]	; 0x108
 8007762:	edc1 7a1e 	vstr	s15, [r1, #120]	; 0x78
 8007766:	edc1 7a1f 	vstr	s15, [r1, #124]	; 0x7c
 800776a:	edc1 7a20 	vstr	s15, [r1, #128]	; 0x80
 800776e:	edc1 7a22 	vstr	s15, [r1, #136]	; 0x88
 8007772:	edc1 7a23 	vstr	s15, [r1, #140]	; 0x8c
 8007776:	edc1 7a24 	vstr	s15, [r1, #144]	; 0x90
 800777a:	edc1 7a26 	vstr	s15, [r1, #152]	; 0x98
 800777e:	edc1 7a27 	vstr	s15, [r1, #156]	; 0x9c
 8007782:	edc1 7a28 	vstr	s15, [r1, #160]	; 0xa0
 8007786:	edc1 7a2a 	vstr	s15, [r1, #168]	; 0xa8
 800778a:	edc1 7a2b 	vstr	s15, [r1, #172]	; 0xac
 800778e:	edc1 7a2c 	vstr	s15, [r1, #176]	; 0xb0
 8007792:	edc1 7a2e 	vstr	s15, [r1, #184]	; 0xb8
 8007796:	edc1 7a2f 	vstr	s15, [r1, #188]	; 0xbc
 800779a:	edc1 7a30 	vstr	s15, [r1, #192]	; 0xc0
 800779e:	edc1 7a32 	vstr	s15, [r1, #200]	; 0xc8
 80077a2:	edc1 7a33 	vstr	s15, [r1, #204]	; 0xcc
 80077a6:	f884 5126 	strb.w	r5, [r4, #294]	; 0x126
 80077aa:	edc1 7a34 	vstr	s15, [r1, #208]	; 0xd0
 80077ae:	e04d      	b.n	800784c <MotionDI_Initialize+0x46c>
 80077b0:	00000000 	.word	0x00000000
 80077b4:	3fbfdfb7 	.word	0x3fbfdfb7
 80077b8:	20000000 	.word	0x20000000
 80077bc:	3fc55a40 	.word	0x3fc55a40
 80077c0:	c0000000 	.word	0xc0000000
 80077c4:	3fb2875e 	.word	0x3fb2875e
 80077c8:	60000000 	.word	0x60000000
 80077cc:	3f9f1fed 	.word	0x3f9f1fed
 80077d0:	60000000 	.word	0x60000000
 80077d4:	3fc76cab 	.word	0x3fc76cab
 80077d8:	e0042000 	.word	0xe0042000
 80077dc:	5c001000 	.word	0x5c001000
 80077e0:	58024c08 	.word	0x58024c08
 80077e4:	58024c00 	.word	0x58024c00
 80077e8:	f407a5c2 	.word	0xf407a5c2
 80077ec:	b5e8b5cd 	.word	0xb5e8b5cd
 80077f0:	20001628 	.word	0x20001628
 80077f4:	20001fd0 	.word	0x20001fd0
 80077f8:	3e4ccccd 	.word	0x3e4ccccd
 80077fc:	3a83126f 	.word	0x3a83126f
 8007800:	447a0000 	.word	0x447a0000
 8007804:	20000000 	.word	0x20000000
 8007808:	3dcccccd 	.word	0x3dcccccd
 800780c:	3f2ac083 	.word	0x3f2ac083
 8007810:	200016cc 	.word	0x200016cc
 8007814:	00000000 	.word	0x00000000
 8007818:	7f800000 	.word	0x7f800000
 800781c:	ff800000 	.word	0xff800000
 8007820:	3f639581 	.word	0x3f639581
 8007824:	402ab021 	.word	0x402ab021
 8007828:	3f13f7cf 	.word	0x3f13f7cf
 800782c:	39b24207 	.word	0x39b24207
 8007830:	39712c28 	.word	0x39712c28
 8007834:	3a09a027 	.word	0x3a09a027
 8007838:	200010f8 	.word	0x200010f8
 800783c:	3a51b717 	.word	0x3a51b717
 8007840:	3a378034 	.word	0x3a378034
 8007844:	3b378034 	.word	0x3b378034
 8007848:	3f666666 	.word	0x3f666666
 800784c:	ed84 3a4a 	vstr	s6, [r4, #296]	; 0x128
 8007850:	edc4 3a4b 	vstr	s7, [r4, #300]	; 0x12c
 8007854:	ed84 4a4c 	vstr	s8, [r4, #304]	; 0x130
 8007858:	edc4 4a4e 	vstr	s9, [r4, #312]	; 0x138
 800785c:	ed84 7a4d 	vstr	s14, [r4, #308]	; 0x134
 8007860:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
 8007864:	ed81 8a35 	vstr	s16, [r1, #212]	; 0xd4
 8007868:	ed81 8a39 	vstr	s16, [r1, #228]	; 0xe4
 800786c:	ed81 8a3d 	vstr	s16, [r1, #244]	; 0xf4
 8007870:	ed81 8a0f 	vstr	s16, [r1, #60]	; 0x3c
 8007874:	ed81 8a13 	vstr	s16, [r1, #76]	; 0x4c
 8007878:	ed81 8a17 	vstr	s16, [r1, #92]	; 0x5c
 800787c:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
 8007880:	edc1 7a37 	vstr	s15, [r1, #220]	; 0xdc
 8007884:	edc1 7a38 	vstr	s15, [r1, #224]	; 0xe0
 8007888:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
 800788c:	edc1 7a3b 	vstr	s15, [r1, #236]	; 0xec
 8007890:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
 8007894:	edc1 7a10 	vstr	s15, [r1, #64]	; 0x40
 8007898:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
 800789c:	edc1 7a12 	vstr	s15, [r1, #72]	; 0x48
 80078a0:	edc1 7a14 	vstr	s15, [r1, #80]	; 0x50
 80078a4:	edc1 7a15 	vstr	s15, [r1, #84]	; 0x54
 80078a8:	edc1 7a16 	vstr	s15, [r1, #88]	; 0x58
 80078ac:	edc1 7a18 	vstr	s15, [r1, #96]	; 0x60
 80078b0:	edc1 7a19 	vstr	s15, [r1, #100]	; 0x64
 80078b4:	edc1 7a1a 	vstr	s15, [r1, #104]	; 0x68
 80078b8:	edc1 7a1b 	vstr	s15, [r1, #108]	; 0x6c
 80078bc:	edc1 7a1c 	vstr	s15, [r1, #112]	; 0x70
 80078c0:	edc1 7a1d 	vstr	s15, [r1, #116]	; 0x74
 80078c4:	f8c4 8140 	str.w	r8, [r4, #320]	; 0x140
 80078c8:	ed84 8a52 	vstr	s16, [r4, #328]	; 0x148
 80078cc:	f884 814c 	strb.w	r8, [r4, #332]	; 0x14c
 80078d0:	f8a4 c160 	strh.w	ip, [r4, #352]	; 0x160
 80078d4:	edc4 6a57 	vstr	s13, [r4, #348]	; 0x15c
 80078d8:	ed84 5a54 	vstr	s10, [r4, #336]	; 0x150
 80078dc:	edc4 5a55 	vstr	s11, [r4, #340]	; 0x154
 80078e0:	ed84 6a56 	vstr	s12, [r4, #344]	; 0x158
 80078e4:	edc0 7a28 	vstr	s15, [r0, #160]	; 0xa0
 80078e8:	edc0 7a29 	vstr	s15, [r0, #164]	; 0xa4
 80078ec:	edc0 7a2a 	vstr	s15, [r0, #168]	; 0xa8
 80078f0:	f884 9144 	strb.w	r9, [r4, #324]	; 0x144
 80078f4:	f884 5162 	strb.w	r5, [r4, #354]	; 0x162
 80078f8:	f7ff f944 	bl	8006b84 <iNemo_setOrientation.constprop.0>
 80078fc:	f7ff fb14 	bl	8006f28 <iNemo_setOrientation_6X.constprop.0>
 8007900:	4631      	mov	r1, r6
 8007902:	ed5f 4a32 	vldr	s9, [pc, #-200]	; 800783c <MotionDI_Initialize+0x45c>
 8007906:	f831 3f04 	ldrh.w	r3, [r1, #4]!
 800790a:	ed1f 5a33 	vldr	s10, [pc, #-204]	; 8007840 <MotionDI_Initialize+0x460>
 800790e:	ed5f 5a33 	vldr	s11, [pc, #-204]	; 8007844 <MotionDI_Initialize+0x464>
 8007912:	ed5f 7a33 	vldr	s15, [pc, #-204]	; 8007848 <MotionDI_Initialize+0x468>
 8007916:	f891 e002 	ldrb.w	lr, [r1, #2]
 800791a:	f8b6 c000 	ldrh.w	ip, [r6]
 800791e:	78b0      	ldrb	r0, [r6, #2]
 8007920:	494f      	ldr	r1, [pc, #316]	; (8007a60 <MotionDI_Initialize+0x680>)
 8007922:	f8ad 3031 	strh.w	r3, [sp, #49]	; 0x31
 8007926:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 800792a:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800792e:	edc4 6a57 	vstr	s13, [r4, #348]	; 0x15c
 8007932:	edc4 6a48 	vstr	s13, [r4, #288]	; 0x120
 8007936:	edc4 4a54 	vstr	s9, [r4, #336]	; 0x150
 800793a:	edc4 4a45 	vstr	s9, [r4, #276]	; 0x114
 800793e:	ed84 5a55 	vstr	s10, [r4, #340]	; 0x154
 8007942:	ed84 5a46 	vstr	s10, [r4, #280]	; 0x118
 8007946:	edc4 5a56 	vstr	s11, [r4, #344]	; 0x158
 800794a:	edc4 5a47 	vstr	s11, [r4, #284]	; 0x11c
 800794e:	ed84 6a4b 	vstr	s12, [r4, #300]	; 0x12c
 8007952:	ed84 6a3c 	vstr	s12, [r4, #240]	; 0xf0
 8007956:	ed84 7a4d 	vstr	s14, [r4, #308]	; 0x134
 800795a:	f884 9161 	strb.w	r9, [r4, #353]	; 0x161
 800795e:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 8007962:	f884 9125 	strb.w	r9, [r4, #293]	; 0x125
 8007966:	f8c4 2101 	str.w	r2, [r4, #257]	; 0x101
 800796a:	ed84 7a62 	vstr	s14, [r4, #392]	; 0x188
 800796e:	f88d e033 	strb.w	lr, [sp, #51]	; 0x33
 8007972:	f8ad c02d 	strh.w	ip, [sp, #45]	; 0x2d
 8007976:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800797a:	edc4 7a4a 	vstr	s15, [r4, #296]	; 0x128
 800797e:	edc4 7a3b 	vstr	s15, [r4, #236]	; 0xec
 8007982:	edc4 7a61 	vstr	s15, [r4, #388]	; 0x184
 8007986:	f8c4 113d 	str.w	r1, [r4, #317]	; 0x13d
 800798a:	f884 5162 	strb.w	r5, [r4, #354]	; 0x162
 800798e:	f884 5126 	strb.w	r5, [r4, #294]	; 0x126
 8007992:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 8007996:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
 800799a:	f8a4 918c 	strh.w	r9, [r4, #396]	; 0x18c
 800799e:	f8dd 1031 	ldr.w	r1, [sp, #49]	; 0x31
 80079a2:	f8dd 202d 	ldr.w	r2, [sp, #45]	; 0x2d
 80079a6:	ed94 7a02 	vldr	s14, [r4, #8]
 80079aa:	edd4 7a03 	vldr	s15, [r4, #12]
 80079ae:	f8db 0000 	ldr.w	r0, [fp]
 80079b2:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 8007a64 <MotionDI_Initialize+0x684>
 80079b6:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 8007a68 <MotionDI_Initialize+0x688>
 80079ba:	f8d4 9014 	ldr.w	r9, [r4, #20]
 80079be:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
 80079c2:	f507 6bb6 	add.w	fp, r7, #1456	; 0x5b0
 80079c6:	e9c4 2164 	strd	r2, r1, [r4, #400]	; 0x190
 80079ca:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 80079ce:	ed84 7a5e 	vstr	s14, [r4, #376]	; 0x178
 80079d2:	edc4 7a5f 	vstr	s15, [r4, #380]	; 0x17c
 80079d6:	f8c4 e16c 	str.w	lr, [r4, #364]	; 0x16c
 80079da:	f8c4 c170 	str.w	ip, [r4, #368]	; 0x170
 80079de:	f8c4 9174 	str.w	r9, [r4, #372]	; 0x174
 80079e2:	f7ff fc73 	bl	80072cc <MotionDI_setKnobs.part.0>
 80079e6:	f207 59e4 	addw	r9, r7, #1508	; 0x5e4
 80079ea:	4629      	mov	r1, r5
 80079ec:	4658      	mov	r0, fp
 80079ee:	2234      	movs	r2, #52	; 0x34
 80079f0:	f000 f8b6 	bl	8007b60 <memset>
 80079f4:	4629      	mov	r1, r5
 80079f6:	4648      	mov	r0, r9
 80079f8:	2234      	movs	r2, #52	; 0x34
 80079fa:	ed8b 8a03 	vstr	s16, [fp, #12]
 80079fe:	ed8b 8a07 	vstr	s16, [fp, #28]
 8007a02:	ed8b 8a0b 	vstr	s16, [fp, #44]	; 0x2c
 8007a06:	f884 5684 	strb.w	r5, [r4, #1668]	; 0x684
 8007a0a:	f000 f8a9 	bl	8007b60 <memset>
 8007a0e:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8007a58 <MotionDI_Initialize+0x678>
 8007a12:	f241 13b4 	movw	r3, #4532	; 0x11b4
 8007a16:	f207 621c 	addw	r2, r7, #1564	; 0x61c
 8007a1a:	2000      	movs	r0, #0
 8007a1c:	f207 672c 	addw	r7, r7, #1580	; 0x62c
 8007a20:	2100      	movs	r1, #0
 8007a22:	e9c2 0100 	strd	r0, r1, [r2]
 8007a26:	ed87 7b00 	vstr	d7, [r7]
 8007a2a:	52f5      	strh	r5, [r6, r3]
 8007a2c:	f806 500a 	strb.w	r5, [r6, sl]
 8007a30:	ed89 8a03 	vstr	s16, [r9, #12]
 8007a34:	ed89 8a07 	vstr	s16, [r9, #28]
 8007a38:	ed89 8a0b 	vstr	s16, [r9, #44]	; 0x2c
 8007a3c:	f8c4 86cc 	str.w	r8, [r4, #1740]	; 0x6cc
 8007a40:	f884 56b8 	strb.w	r5, [r4, #1720]	; 0x6b8
 8007a44:	f884 56c8 	strb.w	r5, [r4, #1736]	; 0x6c8
 8007a48:	b011      	add	sp, #68	; 0x44
 8007a4a:	ecbd 8b02 	vpop	{d8}
 8007a4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a52:	bf00      	nop
 8007a54:	f3af 8000 	nop.w
 8007a58:	00000000 	.word	0x00000000
 8007a5c:	fff80000 	.word	0xfff80000
 8007a60:	01010001 	.word	0x01010001
 8007a64:	3a2c7da2 	.word	0x3a2c7da2
 8007a68:	3e051eb8 	.word	0x3e051eb8

08007a6c <MotionDI_setKnobs>:
 8007a6c:	4b03      	ldr	r3, [pc, #12]	; (8007a7c <MotionDI_setKnobs+0x10>)
 8007a6e:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 8007a72:	b903      	cbnz	r3, 8007a76 <MotionDI_setKnobs+0xa>
 8007a74:	4770      	bx	lr
 8007a76:	f7ff bc29 	b.w	80072cc <MotionDI_setKnobs.part.0>
 8007a7a:	bf00      	nop
 8007a7c:	20001628 	.word	0x20001628

08007a80 <MotionDI_getKnobs>:
 8007a80:	4a22      	ldr	r2, [pc, #136]	; (8007b0c <MotionDI_getKnobs+0x8c>)
 8007a82:	f892 3644 	ldrb.w	r3, [r2, #1604]	; 0x644
 8007a86:	b903      	cbnz	r3, 8007a8a <MotionDI_getKnobs+0xa>
 8007a88:	4770      	bx	lr
 8007a8a:	b470      	push	{r4, r5, r6}
 8007a8c:	4920      	ldr	r1, [pc, #128]	; (8007b10 <MotionDI_getKnobs+0x90>)
 8007a8e:	f892 5126 	ldrb.w	r5, [r2, #294]	; 0x126
 8007a92:	880b      	ldrh	r3, [r1, #0]
 8007a94:	f892 6125 	ldrb.w	r6, [r2, #293]	; 0x125
 8007a98:	f880 5029 	strb.w	r5, [r0, #41]	; 0x29
 8007a9c:	b091      	sub	sp, #68	; 0x44
 8007a9e:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
 8007aa2:	f8ad 302d 	strh.w	r3, [sp, #45]	; 0x2d
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	7889      	ldrb	r1, [r1, #2]
 8007aaa:	f833 4f04 	ldrh.w	r4, [r3, #4]!
 8007aae:	f8ad 4031 	strh.w	r4, [sp, #49]	; 0x31
 8007ab2:	789b      	ldrb	r3, [r3, #2]
 8007ab4:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8007ab8:	2300      	movs	r3, #0
 8007aba:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8007abe:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8007ac2:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8007ac6:	f8dd 3031 	ldr.w	r3, [sp, #49]	; 0x31
 8007aca:	f8d2 10f8 	ldr.w	r1, [r2, #248]	; 0xf8
 8007ace:	f8d2 40ec 	ldr.w	r4, [r2, #236]	; 0xec
 8007ad2:	f8dd 502d 	ldr.w	r5, [sp, #45]	; 0x2d
 8007ad6:	6303      	str	r3, [r0, #48]	; 0x30
 8007ad8:	4b0e      	ldr	r3, [pc, #56]	; (8007b14 <MotionDI_getKnobs+0x94>)
 8007ada:	62c5      	str	r5, [r0, #44]	; 0x2c
 8007adc:	6204      	str	r4, [r0, #32]
 8007ade:	6241      	str	r1, [r0, #36]	; 0x24
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	6003      	str	r3, [r0, #0]
 8007ae4:	f892 4168 	ldrb.w	r4, [r2, #360]	; 0x168
 8007ae8:	68d3      	ldr	r3, [r2, #12]
 8007aea:	6855      	ldr	r5, [r2, #4]
 8007aec:	6891      	ldr	r1, [r2, #8]
 8007aee:	7104      	strb	r4, [r0, #4]
 8007af0:	6816      	ldr	r6, [r2, #0]
 8007af2:	6954      	ldr	r4, [r2, #20]
 8007af4:	6086      	str	r6, [r0, #8]
 8007af6:	60c5      	str	r5, [r0, #12]
 8007af8:	6104      	str	r4, [r0, #16]
 8007afa:	6141      	str	r1, [r0, #20]
 8007afc:	6183      	str	r3, [r0, #24]
 8007afe:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
 8007b02:	7703      	strb	r3, [r0, #28]
 8007b04:	b011      	add	sp, #68	; 0x44
 8007b06:	bc70      	pop	{r4, r5, r6}
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	20001628 	.word	0x20001628
 8007b10:	20000000 	.word	0x20000000
 8007b14:	20002438 	.word	0x20002438

08007b18 <__libc_init_array>:
 8007b18:	b570      	push	{r4, r5, r6, lr}
 8007b1a:	4d0d      	ldr	r5, [pc, #52]	; (8007b50 <__libc_init_array+0x38>)
 8007b1c:	4c0d      	ldr	r4, [pc, #52]	; (8007b54 <__libc_init_array+0x3c>)
 8007b1e:	1b64      	subs	r4, r4, r5
 8007b20:	10a4      	asrs	r4, r4, #2
 8007b22:	2600      	movs	r6, #0
 8007b24:	42a6      	cmp	r6, r4
 8007b26:	d109      	bne.n	8007b3c <__libc_init_array+0x24>
 8007b28:	4d0b      	ldr	r5, [pc, #44]	; (8007b58 <__libc_init_array+0x40>)
 8007b2a:	4c0c      	ldr	r4, [pc, #48]	; (8007b5c <__libc_init_array+0x44>)
 8007b2c:	f000 f820 	bl	8007b70 <_init>
 8007b30:	1b64      	subs	r4, r4, r5
 8007b32:	10a4      	asrs	r4, r4, #2
 8007b34:	2600      	movs	r6, #0
 8007b36:	42a6      	cmp	r6, r4
 8007b38:	d105      	bne.n	8007b46 <__libc_init_array+0x2e>
 8007b3a:	bd70      	pop	{r4, r5, r6, pc}
 8007b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b40:	4798      	blx	r3
 8007b42:	3601      	adds	r6, #1
 8007b44:	e7ee      	b.n	8007b24 <__libc_init_array+0xc>
 8007b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b4a:	4798      	blx	r3
 8007b4c:	3601      	adds	r6, #1
 8007b4e:	e7f2      	b.n	8007b36 <__libc_init_array+0x1e>
 8007b50:	08007bd8 	.word	0x08007bd8
 8007b54:	08007bd8 	.word	0x08007bd8
 8007b58:	08007bd8 	.word	0x08007bd8
 8007b5c:	08007bdc 	.word	0x08007bdc

08007b60 <memset>:
 8007b60:	4402      	add	r2, r0
 8007b62:	4603      	mov	r3, r0
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d100      	bne.n	8007b6a <memset+0xa>
 8007b68:	4770      	bx	lr
 8007b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b6e:	e7f9      	b.n	8007b64 <memset+0x4>

08007b70 <_init>:
 8007b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b72:	bf00      	nop
 8007b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b76:	bc08      	pop	{r3}
 8007b78:	469e      	mov	lr, r3
 8007b7a:	4770      	bx	lr

08007b7c <_fini>:
 8007b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b7e:	bf00      	nop
 8007b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b82:	bc08      	pop	{r3}
 8007b84:	469e      	mov	lr, r3
 8007b86:	4770      	bx	lr
