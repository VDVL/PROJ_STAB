
Proj_stab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014b3c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000688  08014cc8  08014cc8  00024cc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015350  08015350  00031670  2**0
                  CONTENTS
  4 .ARM          00000008  08015350  08015350  00025350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015358  08015358  00031670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015358  08015358  00025358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801535c  0801535c  0002535c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001670  20000000  08015360  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f38  20001670  080169d0  00031670  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200025a8  080169d0  000325a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031670  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e0ea  00000000  00000000  000316a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003520  00000000  00000000  0005f78a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002348  00000000  00000000  00062cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000021f8  00000000  00000000  00064ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0001bc2b  00000000  00000000  000671f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000e622  00000000  00000000  00082e1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      000000a3  00000000  00000000  0009143d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000a300  00000000  00000000  000914e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20001670 	.word	0x20001670
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08014cac 	.word	0x08014cac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20001674 	.word	0x20001674
 80001c4:	08014cac 	.word	0x08014cac

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__aeabi_frsub>:
 8000bd0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bd4:	e002      	b.n	8000bdc <__addsf3>
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_fsub>:
 8000bd8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bdc <__addsf3>:
 8000bdc:	0042      	lsls	r2, r0, #1
 8000bde:	bf1f      	itttt	ne
 8000be0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000be4:	ea92 0f03 	teqne	r2, r3
 8000be8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bec:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf0:	d06a      	beq.n	8000cc8 <__addsf3+0xec>
 8000bf2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bf6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bfa:	bfc1      	itttt	gt
 8000bfc:	18d2      	addgt	r2, r2, r3
 8000bfe:	4041      	eorgt	r1, r0
 8000c00:	4048      	eorgt	r0, r1
 8000c02:	4041      	eorgt	r1, r0
 8000c04:	bfb8      	it	lt
 8000c06:	425b      	neglt	r3, r3
 8000c08:	2b19      	cmp	r3, #25
 8000c0a:	bf88      	it	hi
 8000c0c:	4770      	bxhi	lr
 8000c0e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c16:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c1a:	bf18      	it	ne
 8000c1c:	4240      	negne	r0, r0
 8000c1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c22:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c26:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4249      	negne	r1, r1
 8000c2e:	ea92 0f03 	teq	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <__addsf3+0xd8>
 8000c34:	f1a2 0201 	sub.w	r2, r2, #1
 8000c38:	fa41 fc03 	asr.w	ip, r1, r3
 8000c3c:	eb10 000c 	adds.w	r0, r0, ip
 8000c40:	f1c3 0320 	rsb	r3, r3, #32
 8000c44:	fa01 f103 	lsl.w	r1, r1, r3
 8000c48:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c4c:	d502      	bpl.n	8000c54 <__addsf3+0x78>
 8000c4e:	4249      	negs	r1, r1
 8000c50:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c58:	d313      	bcc.n	8000c82 <__addsf3+0xa6>
 8000c5a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c5e:	d306      	bcc.n	8000c6e <__addsf3+0x92>
 8000c60:	0840      	lsrs	r0, r0, #1
 8000c62:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c66:	f102 0201 	add.w	r2, r2, #1
 8000c6a:	2afe      	cmp	r2, #254	; 0xfe
 8000c6c:	d251      	bcs.n	8000d12 <__addsf3+0x136>
 8000c6e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c72:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c76:	bf08      	it	eq
 8000c78:	f020 0001 	biceq.w	r0, r0, #1
 8000c7c:	ea40 0003 	orr.w	r0, r0, r3
 8000c80:	4770      	bx	lr
 8000c82:	0049      	lsls	r1, r1, #1
 8000c84:	eb40 0000 	adc.w	r0, r0, r0
 8000c88:	3a01      	subs	r2, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c90:	d2ed      	bcs.n	8000c6e <__addsf3+0x92>
 8000c92:	fab0 fc80 	clz	ip, r0
 8000c96:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c9a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c9e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000ca2:	bfaa      	itet	ge
 8000ca4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ca8:	4252      	neglt	r2, r2
 8000caa:	4318      	orrge	r0, r3
 8000cac:	bfbc      	itt	lt
 8000cae:	40d0      	lsrlt	r0, r2
 8000cb0:	4318      	orrlt	r0, r3
 8000cb2:	4770      	bx	lr
 8000cb4:	f092 0f00 	teq	r2, #0
 8000cb8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cbc:	bf06      	itte	eq
 8000cbe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000cc2:	3201      	addeq	r2, #1
 8000cc4:	3b01      	subne	r3, #1
 8000cc6:	e7b5      	b.n	8000c34 <__addsf3+0x58>
 8000cc8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ccc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cd6:	d021      	beq.n	8000d1c <__addsf3+0x140>
 8000cd8:	ea92 0f03 	teq	r2, r3
 8000cdc:	d004      	beq.n	8000ce8 <__addsf3+0x10c>
 8000cde:	f092 0f00 	teq	r2, #0
 8000ce2:	bf08      	it	eq
 8000ce4:	4608      	moveq	r0, r1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea90 0f01 	teq	r0, r1
 8000cec:	bf1c      	itt	ne
 8000cee:	2000      	movne	r0, #0
 8000cf0:	4770      	bxne	lr
 8000cf2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cf6:	d104      	bne.n	8000d02 <__addsf3+0x126>
 8000cf8:	0040      	lsls	r0, r0, #1
 8000cfa:	bf28      	it	cs
 8000cfc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d00:	4770      	bx	lr
 8000d02:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d06:	bf3c      	itt	cc
 8000d08:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d0c:	4770      	bxcc	lr
 8000d0e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d12:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d1a:	4770      	bx	lr
 8000d1c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d20:	bf16      	itet	ne
 8000d22:	4608      	movne	r0, r1
 8000d24:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d28:	4601      	movne	r1, r0
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	bf06      	itte	eq
 8000d2e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d32:	ea90 0f01 	teqeq	r0, r1
 8000d36:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_ui2f>:
 8000d3c:	f04f 0300 	mov.w	r3, #0
 8000d40:	e004      	b.n	8000d4c <__aeabi_i2f+0x8>
 8000d42:	bf00      	nop

08000d44 <__aeabi_i2f>:
 8000d44:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d48:	bf48      	it	mi
 8000d4a:	4240      	negmi	r0, r0
 8000d4c:	ea5f 0c00 	movs.w	ip, r0
 8000d50:	bf08      	it	eq
 8000d52:	4770      	bxeq	lr
 8000d54:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d58:	4601      	mov	r1, r0
 8000d5a:	f04f 0000 	mov.w	r0, #0
 8000d5e:	e01c      	b.n	8000d9a <__aeabi_l2f+0x2a>

08000d60 <__aeabi_ul2f>:
 8000d60:	ea50 0201 	orrs.w	r2, r0, r1
 8000d64:	bf08      	it	eq
 8000d66:	4770      	bxeq	lr
 8000d68:	f04f 0300 	mov.w	r3, #0
 8000d6c:	e00a      	b.n	8000d84 <__aeabi_l2f+0x14>
 8000d6e:	bf00      	nop

08000d70 <__aeabi_l2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d7c:	d502      	bpl.n	8000d84 <__aeabi_l2f+0x14>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	ea5f 0c01 	movs.w	ip, r1
 8000d88:	bf02      	ittt	eq
 8000d8a:	4684      	moveq	ip, r0
 8000d8c:	4601      	moveq	r1, r0
 8000d8e:	2000      	moveq	r0, #0
 8000d90:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d94:	bf08      	it	eq
 8000d96:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d9a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d9e:	fabc f28c 	clz	r2, ip
 8000da2:	3a08      	subs	r2, #8
 8000da4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000da8:	db10      	blt.n	8000dcc <__aeabi_l2f+0x5c>
 8000daa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dae:	4463      	add	r3, ip
 8000db0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000db4:	f1c2 0220 	rsb	r2, r2, #32
 8000db8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000dbc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dc0:	eb43 0002 	adc.w	r0, r3, r2
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f102 0220 	add.w	r2, r2, #32
 8000dd0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ddc:	fa21 f202 	lsr.w	r2, r1, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dea:	4770      	bx	lr

08000dec <__aeabi_ldivmod>:
 8000dec:	b97b      	cbnz	r3, 8000e0e <__aeabi_ldivmod+0x22>
 8000dee:	b972      	cbnz	r2, 8000e0e <__aeabi_ldivmod+0x22>
 8000df0:	2900      	cmp	r1, #0
 8000df2:	bfbe      	ittt	lt
 8000df4:	2000      	movlt	r0, #0
 8000df6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000dfa:	e006      	blt.n	8000e0a <__aeabi_ldivmod+0x1e>
 8000dfc:	bf08      	it	eq
 8000dfe:	2800      	cmpeq	r0, #0
 8000e00:	bf1c      	itt	ne
 8000e02:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000e06:	f04f 30ff 	movne.w	r0, #4294967295
 8000e0a:	f000 b9bf 	b.w	800118c <__aeabi_idiv0>
 8000e0e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e12:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e16:	2900      	cmp	r1, #0
 8000e18:	db09      	blt.n	8000e2e <__aeabi_ldivmod+0x42>
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	db1a      	blt.n	8000e54 <__aeabi_ldivmod+0x68>
 8000e1e:	f000 f84d 	bl	8000ebc <__udivmoddi4>
 8000e22:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e2a:	b004      	add	sp, #16
 8000e2c:	4770      	bx	lr
 8000e2e:	4240      	negs	r0, r0
 8000e30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db1b      	blt.n	8000e70 <__aeabi_ldivmod+0x84>
 8000e38:	f000 f840 	bl	8000ebc <__udivmoddi4>
 8000e3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e44:	b004      	add	sp, #16
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	4252      	negs	r2, r2
 8000e4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e52:	4770      	bx	lr
 8000e54:	4252      	negs	r2, r2
 8000e56:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e5a:	f000 f82f 	bl	8000ebc <__udivmoddi4>
 8000e5e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e66:	b004      	add	sp, #16
 8000e68:	4240      	negs	r0, r0
 8000e6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e6e:	4770      	bx	lr
 8000e70:	4252      	negs	r2, r2
 8000e72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e76:	f000 f821 	bl	8000ebc <__udivmoddi4>
 8000e7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e82:	b004      	add	sp, #16
 8000e84:	4252      	negs	r2, r2
 8000e86:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e8a:	4770      	bx	lr

08000e8c <__aeabi_uldivmod>:
 8000e8c:	b953      	cbnz	r3, 8000ea4 <__aeabi_uldivmod+0x18>
 8000e8e:	b94a      	cbnz	r2, 8000ea4 <__aeabi_uldivmod+0x18>
 8000e90:	2900      	cmp	r1, #0
 8000e92:	bf08      	it	eq
 8000e94:	2800      	cmpeq	r0, #0
 8000e96:	bf1c      	itt	ne
 8000e98:	f04f 31ff 	movne.w	r1, #4294967295
 8000e9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ea0:	f000 b974 	b.w	800118c <__aeabi_idiv0>
 8000ea4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ea8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000eac:	f000 f806 	bl	8000ebc <__udivmoddi4>
 8000eb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eb8:	b004      	add	sp, #16
 8000eba:	4770      	bx	lr

08000ebc <__udivmoddi4>:
 8000ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ec0:	9d08      	ldr	r5, [sp, #32]
 8000ec2:	4604      	mov	r4, r0
 8000ec4:	468e      	mov	lr, r1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d14d      	bne.n	8000f66 <__udivmoddi4+0xaa>
 8000eca:	428a      	cmp	r2, r1
 8000ecc:	4694      	mov	ip, r2
 8000ece:	d969      	bls.n	8000fa4 <__udivmoddi4+0xe8>
 8000ed0:	fab2 f282 	clz	r2, r2
 8000ed4:	b152      	cbz	r2, 8000eec <__udivmoddi4+0x30>
 8000ed6:	fa01 f302 	lsl.w	r3, r1, r2
 8000eda:	f1c2 0120 	rsb	r1, r2, #32
 8000ede:	fa20 f101 	lsr.w	r1, r0, r1
 8000ee2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee6:	ea41 0e03 	orr.w	lr, r1, r3
 8000eea:	4094      	lsls	r4, r2
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	0c21      	lsrs	r1, r4, #16
 8000ef2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ef6:	fa1f f78c 	uxth.w	r7, ip
 8000efa:	fb08 e316 	mls	r3, r8, r6, lr
 8000efe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000f02:	fb06 f107 	mul.w	r1, r6, r7
 8000f06:	4299      	cmp	r1, r3
 8000f08:	d90a      	bls.n	8000f20 <__udivmoddi4+0x64>
 8000f0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000f12:	f080 811f 	bcs.w	8001154 <__udivmoddi4+0x298>
 8000f16:	4299      	cmp	r1, r3
 8000f18:	f240 811c 	bls.w	8001154 <__udivmoddi4+0x298>
 8000f1c:	3e02      	subs	r6, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f28:	fb08 3310 	mls	r3, r8, r0, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb00 f707 	mul.w	r7, r0, r7
 8000f34:	42a7      	cmp	r7, r4
 8000f36:	d90a      	bls.n	8000f4e <__udivmoddi4+0x92>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f40:	f080 810a 	bcs.w	8001158 <__udivmoddi4+0x29c>
 8000f44:	42a7      	cmp	r7, r4
 8000f46:	f240 8107 	bls.w	8001158 <__udivmoddi4+0x29c>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f52:	1be4      	subs	r4, r4, r7
 8000f54:	2600      	movs	r6, #0
 8000f56:	b11d      	cbz	r5, 8000f60 <__udivmoddi4+0xa4>
 8000f58:	40d4      	lsrs	r4, r2
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000f60:	4631      	mov	r1, r6
 8000f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f66:	428b      	cmp	r3, r1
 8000f68:	d909      	bls.n	8000f7e <__udivmoddi4+0xc2>
 8000f6a:	2d00      	cmp	r5, #0
 8000f6c:	f000 80ef 	beq.w	800114e <__udivmoddi4+0x292>
 8000f70:	2600      	movs	r6, #0
 8000f72:	e9c5 0100 	strd	r0, r1, [r5]
 8000f76:	4630      	mov	r0, r6
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	fab3 f683 	clz	r6, r3
 8000f82:	2e00      	cmp	r6, #0
 8000f84:	d14a      	bne.n	800101c <__udivmoddi4+0x160>
 8000f86:	428b      	cmp	r3, r1
 8000f88:	d302      	bcc.n	8000f90 <__udivmoddi4+0xd4>
 8000f8a:	4282      	cmp	r2, r0
 8000f8c:	f200 80f9 	bhi.w	8001182 <__udivmoddi4+0x2c6>
 8000f90:	1a84      	subs	r4, r0, r2
 8000f92:	eb61 0303 	sbc.w	r3, r1, r3
 8000f96:	2001      	movs	r0, #1
 8000f98:	469e      	mov	lr, r3
 8000f9a:	2d00      	cmp	r5, #0
 8000f9c:	d0e0      	beq.n	8000f60 <__udivmoddi4+0xa4>
 8000f9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000fa2:	e7dd      	b.n	8000f60 <__udivmoddi4+0xa4>
 8000fa4:	b902      	cbnz	r2, 8000fa8 <__udivmoddi4+0xec>
 8000fa6:	deff      	udf	#255	; 0xff
 8000fa8:	fab2 f282 	clz	r2, r2
 8000fac:	2a00      	cmp	r2, #0
 8000fae:	f040 8092 	bne.w	80010d6 <__udivmoddi4+0x21a>
 8000fb2:	eba1 010c 	sub.w	r1, r1, ip
 8000fb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fba:	fa1f fe8c 	uxth.w	lr, ip
 8000fbe:	2601      	movs	r6, #1
 8000fc0:	0c20      	lsrs	r0, r4, #16
 8000fc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000fc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000fca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fce:	fb0e f003 	mul.w	r0, lr, r3
 8000fd2:	4288      	cmp	r0, r1
 8000fd4:	d908      	bls.n	8000fe8 <__udivmoddi4+0x12c>
 8000fd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000fda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000fde:	d202      	bcs.n	8000fe6 <__udivmoddi4+0x12a>
 8000fe0:	4288      	cmp	r0, r1
 8000fe2:	f200 80cb 	bhi.w	800117c <__udivmoddi4+0x2c0>
 8000fe6:	4643      	mov	r3, r8
 8000fe8:	1a09      	subs	r1, r1, r0
 8000fea:	b2a4      	uxth	r4, r4
 8000fec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ff0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ff4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ff8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ffc:	45a6      	cmp	lr, r4
 8000ffe:	d908      	bls.n	8001012 <__udivmoddi4+0x156>
 8001000:	eb1c 0404 	adds.w	r4, ip, r4
 8001004:	f100 31ff 	add.w	r1, r0, #4294967295
 8001008:	d202      	bcs.n	8001010 <__udivmoddi4+0x154>
 800100a:	45a6      	cmp	lr, r4
 800100c:	f200 80bb 	bhi.w	8001186 <__udivmoddi4+0x2ca>
 8001010:	4608      	mov	r0, r1
 8001012:	eba4 040e 	sub.w	r4, r4, lr
 8001016:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x9a>
 800101c:	f1c6 0720 	rsb	r7, r6, #32
 8001020:	40b3      	lsls	r3, r6
 8001022:	fa22 fc07 	lsr.w	ip, r2, r7
 8001026:	ea4c 0c03 	orr.w	ip, ip, r3
 800102a:	fa20 f407 	lsr.w	r4, r0, r7
 800102e:	fa01 f306 	lsl.w	r3, r1, r6
 8001032:	431c      	orrs	r4, r3
 8001034:	40f9      	lsrs	r1, r7
 8001036:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800103a:	fa00 f306 	lsl.w	r3, r0, r6
 800103e:	fbb1 f8f9 	udiv	r8, r1, r9
 8001042:	0c20      	lsrs	r0, r4, #16
 8001044:	fa1f fe8c 	uxth.w	lr, ip
 8001048:	fb09 1118 	mls	r1, r9, r8, r1
 800104c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001050:	fb08 f00e 	mul.w	r0, r8, lr
 8001054:	4288      	cmp	r0, r1
 8001056:	fa02 f206 	lsl.w	r2, r2, r6
 800105a:	d90b      	bls.n	8001074 <__udivmoddi4+0x1b8>
 800105c:	eb1c 0101 	adds.w	r1, ip, r1
 8001060:	f108 3aff 	add.w	sl, r8, #4294967295
 8001064:	f080 8088 	bcs.w	8001178 <__udivmoddi4+0x2bc>
 8001068:	4288      	cmp	r0, r1
 800106a:	f240 8085 	bls.w	8001178 <__udivmoddi4+0x2bc>
 800106e:	f1a8 0802 	sub.w	r8, r8, #2
 8001072:	4461      	add	r1, ip
 8001074:	1a09      	subs	r1, r1, r0
 8001076:	b2a4      	uxth	r4, r4
 8001078:	fbb1 f0f9 	udiv	r0, r1, r9
 800107c:	fb09 1110 	mls	r1, r9, r0, r1
 8001080:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8001084:	fb00 fe0e 	mul.w	lr, r0, lr
 8001088:	458e      	cmp	lr, r1
 800108a:	d908      	bls.n	800109e <__udivmoddi4+0x1e2>
 800108c:	eb1c 0101 	adds.w	r1, ip, r1
 8001090:	f100 34ff 	add.w	r4, r0, #4294967295
 8001094:	d26c      	bcs.n	8001170 <__udivmoddi4+0x2b4>
 8001096:	458e      	cmp	lr, r1
 8001098:	d96a      	bls.n	8001170 <__udivmoddi4+0x2b4>
 800109a:	3802      	subs	r0, #2
 800109c:	4461      	add	r1, ip
 800109e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80010a2:	fba0 9402 	umull	r9, r4, r0, r2
 80010a6:	eba1 010e 	sub.w	r1, r1, lr
 80010aa:	42a1      	cmp	r1, r4
 80010ac:	46c8      	mov	r8, r9
 80010ae:	46a6      	mov	lr, r4
 80010b0:	d356      	bcc.n	8001160 <__udivmoddi4+0x2a4>
 80010b2:	d053      	beq.n	800115c <__udivmoddi4+0x2a0>
 80010b4:	b15d      	cbz	r5, 80010ce <__udivmoddi4+0x212>
 80010b6:	ebb3 0208 	subs.w	r2, r3, r8
 80010ba:	eb61 010e 	sbc.w	r1, r1, lr
 80010be:	fa01 f707 	lsl.w	r7, r1, r7
 80010c2:	fa22 f306 	lsr.w	r3, r2, r6
 80010c6:	40f1      	lsrs	r1, r6
 80010c8:	431f      	orrs	r7, r3
 80010ca:	e9c5 7100 	strd	r7, r1, [r5]
 80010ce:	2600      	movs	r6, #0
 80010d0:	4631      	mov	r1, r6
 80010d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010d6:	f1c2 0320 	rsb	r3, r2, #32
 80010da:	40d8      	lsrs	r0, r3
 80010dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80010e0:	fa21 f303 	lsr.w	r3, r1, r3
 80010e4:	4091      	lsls	r1, r2
 80010e6:	4301      	orrs	r1, r0
 80010e8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010ec:	fa1f fe8c 	uxth.w	lr, ip
 80010f0:	fbb3 f0f7 	udiv	r0, r3, r7
 80010f4:	fb07 3610 	mls	r6, r7, r0, r3
 80010f8:	0c0b      	lsrs	r3, r1, #16
 80010fa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010fe:	fb00 f60e 	mul.w	r6, r0, lr
 8001102:	429e      	cmp	r6, r3
 8001104:	fa04 f402 	lsl.w	r4, r4, r2
 8001108:	d908      	bls.n	800111c <__udivmoddi4+0x260>
 800110a:	eb1c 0303 	adds.w	r3, ip, r3
 800110e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001112:	d22f      	bcs.n	8001174 <__udivmoddi4+0x2b8>
 8001114:	429e      	cmp	r6, r3
 8001116:	d92d      	bls.n	8001174 <__udivmoddi4+0x2b8>
 8001118:	3802      	subs	r0, #2
 800111a:	4463      	add	r3, ip
 800111c:	1b9b      	subs	r3, r3, r6
 800111e:	b289      	uxth	r1, r1
 8001120:	fbb3 f6f7 	udiv	r6, r3, r7
 8001124:	fb07 3316 	mls	r3, r7, r6, r3
 8001128:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800112c:	fb06 f30e 	mul.w	r3, r6, lr
 8001130:	428b      	cmp	r3, r1
 8001132:	d908      	bls.n	8001146 <__udivmoddi4+0x28a>
 8001134:	eb1c 0101 	adds.w	r1, ip, r1
 8001138:	f106 38ff 	add.w	r8, r6, #4294967295
 800113c:	d216      	bcs.n	800116c <__udivmoddi4+0x2b0>
 800113e:	428b      	cmp	r3, r1
 8001140:	d914      	bls.n	800116c <__udivmoddi4+0x2b0>
 8001142:	3e02      	subs	r6, #2
 8001144:	4461      	add	r1, ip
 8001146:	1ac9      	subs	r1, r1, r3
 8001148:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800114c:	e738      	b.n	8000fc0 <__udivmoddi4+0x104>
 800114e:	462e      	mov	r6, r5
 8001150:	4628      	mov	r0, r5
 8001152:	e705      	b.n	8000f60 <__udivmoddi4+0xa4>
 8001154:	4606      	mov	r6, r0
 8001156:	e6e3      	b.n	8000f20 <__udivmoddi4+0x64>
 8001158:	4618      	mov	r0, r3
 800115a:	e6f8      	b.n	8000f4e <__udivmoddi4+0x92>
 800115c:	454b      	cmp	r3, r9
 800115e:	d2a9      	bcs.n	80010b4 <__udivmoddi4+0x1f8>
 8001160:	ebb9 0802 	subs.w	r8, r9, r2
 8001164:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001168:	3801      	subs	r0, #1
 800116a:	e7a3      	b.n	80010b4 <__udivmoddi4+0x1f8>
 800116c:	4646      	mov	r6, r8
 800116e:	e7ea      	b.n	8001146 <__udivmoddi4+0x28a>
 8001170:	4620      	mov	r0, r4
 8001172:	e794      	b.n	800109e <__udivmoddi4+0x1e2>
 8001174:	4640      	mov	r0, r8
 8001176:	e7d1      	b.n	800111c <__udivmoddi4+0x260>
 8001178:	46d0      	mov	r8, sl
 800117a:	e77b      	b.n	8001074 <__udivmoddi4+0x1b8>
 800117c:	3b02      	subs	r3, #2
 800117e:	4461      	add	r1, ip
 8001180:	e732      	b.n	8000fe8 <__udivmoddi4+0x12c>
 8001182:	4630      	mov	r0, r6
 8001184:	e709      	b.n	8000f9a <__udivmoddi4+0xde>
 8001186:	4464      	add	r4, ip
 8001188:	3802      	subs	r0, #2
 800118a:	e742      	b.n	8001012 <__udivmoddi4+0x156>

0800118c <__aeabi_idiv0>:
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <Fusion_datas_init>:
static int64_t Timestamp = 0;

LSM6DSO_Axes_t acc_IMU;
LSM6DSO_Axes_t gyro_IMU;

void Fusion_datas_init(void){
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0

	INIT_IMU();
 8001194:	f000 fe78 	bl	8001e88 <INIT_IMU>

	/* Dynamic Inclinometer API initialization function */
	MotionDI_Initialize(&freq);
 8001198:	4817      	ldr	r0, [pc, #92]	; (80011f8 <Fusion_datas_init+0x68>)
 800119a:	f00d fd6d 	bl	800ec78 <MotionDI_Initialize>
	/* Optional: Get version */
	MotionDI_GetLibVersion(lib_version);
 800119e:	4817      	ldr	r0, [pc, #92]	; (80011fc <Fusion_datas_init+0x6c>)
 80011a0:	f011 fcf2 	bl	8012b88 <MotionDI_GetLibVersion>

	/* Optional: Modify knobs settings & set the knobs */
	MotionDI_getKnobs(ipKnobs);
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <Fusion_datas_init+0x70>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f00e f8b5 	bl	800f318 <MotionDI_getKnobs>

	ipKnobs->AccKnob.CalType = MDI_CAL_CONTINUOUS;
 80011ae:	4b14      	ldr	r3, [pc, #80]	; (8001200 <Fusion_datas_init+0x70>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2202      	movs	r2, #2
 80011b4:	711a      	strb	r2, [r3, #4]
	ipKnobs->GyrKnob.CalType = MDI_CAL_CONTINUOUS;
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <Fusion_datas_init+0x70>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2202      	movs	r2, #2
 80011bc:	771a      	strb	r2, [r3, #28]

	BSP_SENSOR_ACC_GetOrientation(ipKnobs->AccOrientation);
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <Fusion_datas_init+0x70>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	332c      	adds	r3, #44	; 0x2c
 80011c4:	4618      	mov	r0, r3
 80011c6:	f001 ff44 	bl	8003052 <BSP_SENSOR_ACC_GetOrientation>
	BSP_SENSOR_GYR_GetOrientation(ipKnobs->GyroOrientation);
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <Fusion_datas_init+0x70>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	3330      	adds	r3, #48	; 0x30
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 ff53 	bl	800307c <BSP_SENSOR_GYR_GetOrientation>

	ipKnobs->SFKnob.output_type = MDI_ENGINE_OUTPUT_ENU;
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <Fusion_datas_init+0x70>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2201      	movs	r2, #1
 80011dc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	ipKnobs->SFKnob.modx = DECIMATION;
 80011e0:	4b07      	ldr	r3, [pc, #28]	; (8001200 <Fusion_datas_init+0x70>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	MotionDI_setKnobs(ipKnobs);
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <Fusion_datas_init+0x70>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f00e f888 	bl	800f304 <MotionDI_setKnobs>
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200011c0 	.word	0x200011c0
 80011fc:	20001d80 	.word	0x20001d80
 8001200:	200011c4 	.word	0x200011c4

08001204 <Fusion_datas>:


MDI_output_t Fusion_datas(void){
 8001204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001206:	b087      	sub	sp, #28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6178      	str	r0, [r7, #20]


	if(Flag_compute_fusion ==1){
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <Fusion_datas+0x124>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d179      	bne.n	8001308 <Fusion_datas+0x104>

		Flag_compute_fusion =0;
 8001214:	4b44      	ldr	r3, [pc, #272]	; (8001328 <Fusion_datas+0x124>)
 8001216:	2200      	movs	r2, #0
 8001218:	701a      	strb	r2, [r3, #0]

		/* Get acceleration X/Y/Z in g */
		acc_IMU = Get_AXIS_ACC__IMU();
 800121a:	4e44      	ldr	r6, [pc, #272]	; (800132c <Fusion_datas+0x128>)
 800121c:	463b      	mov	r3, r7
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fe7c 	bl	8001f1c <Get_AXIS_ACC__IMU>
 8001224:	463b      	mov	r3, r7
 8001226:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800122a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
		/* Get angular velocity  X/Y/Z in mdps */
		gyro_IMU =   Get_AXIS_GYRO__IMU();
 800122e:	4e40      	ldr	r6, [pc, #256]	; (8001330 <Fusion_datas+0x12c>)
 8001230:	463b      	mov	r3, r7
 8001232:	4618      	mov	r0, r3
 8001234:	f000 fe5a 	bl	8001eec <Get_AXIS_GYRO__IMU>
 8001238:	463b      	mov	r3, r7
 800123a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800123e:	e886 0007 	stmia.w	r6, {r0, r1, r2}

		/* Convert acceleration from [mg] to [g] */
		data_in.Acc[0] = (float)acc_IMU.x * FROM_MG_TO_G;
 8001242:	4b3a      	ldr	r3, [pc, #232]	; (800132c <Fusion_datas+0x128>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	ee07 3a90 	vmov	s15, r3
 800124a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800124e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001334 <Fusion_datas+0x130>
 8001252:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001256:	4b38      	ldr	r3, [pc, #224]	; (8001338 <Fusion_datas+0x134>)
 8001258:	edc3 7a02 	vstr	s15, [r3, #8]
		data_in.Acc[1] = (float)acc_IMU.y * FROM_MG_TO_G;
 800125c:	4b33      	ldr	r3, [pc, #204]	; (800132c <Fusion_datas+0x128>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	ee07 3a90 	vmov	s15, r3
 8001264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001268:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001334 <Fusion_datas+0x130>
 800126c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001270:	4b31      	ldr	r3, [pc, #196]	; (8001338 <Fusion_datas+0x134>)
 8001272:	edc3 7a03 	vstr	s15, [r3, #12]
		data_in.Acc[2] = (float)acc_IMU.z * FROM_MG_TO_G;
 8001276:	4b2d      	ldr	r3, [pc, #180]	; (800132c <Fusion_datas+0x128>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	ee07 3a90 	vmov	s15, r3
 800127e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001282:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001334 <Fusion_datas+0x130>
 8001286:	ee67 7a87 	vmul.f32	s15, s15, s14
 800128a:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <Fusion_datas+0x134>)
 800128c:	edc3 7a04 	vstr	s15, [r3, #16]

		/* Convert angular velocity from [mdps] to [dps] */
		data_in.Gyro[0] = (float)gyro_IMU.x * FROM_MG_TO_G;
 8001290:	4b27      	ldr	r3, [pc, #156]	; (8001330 <Fusion_datas+0x12c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129c:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001334 <Fusion_datas+0x130>
 80012a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <Fusion_datas+0x134>)
 80012a6:	edc3 7a05 	vstr	s15, [r3, #20]
		data_in.Gyro[1] = (float)gyro_IMU.y * FROM_MDPS_TO_DPS;
 80012aa:	4b21      	ldr	r3, [pc, #132]	; (8001330 <Fusion_datas+0x12c>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	ee07 3a90 	vmov	s15, r3
 80012b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001334 <Fusion_datas+0x130>
 80012ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012be:	4b1e      	ldr	r3, [pc, #120]	; (8001338 <Fusion_datas+0x134>)
 80012c0:	edc3 7a06 	vstr	s15, [r3, #24]
		data_in.Gyro[2] = (float)gyro_IMU.z * FROM_MDPS_TO_DPS;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <Fusion_datas+0x12c>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d0:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001334 <Fusion_datas+0x130>
 80012d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <Fusion_datas+0x134>)
 80012da:	edc3 7a07 	vstr	s15, [r3, #28]

		//Increment sample time
		data_in.Timestamp = Timestamp;
 80012de:	4b17      	ldr	r3, [pc, #92]	; (800133c <Fusion_datas+0x138>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	4914      	ldr	r1, [pc, #80]	; (8001338 <Fusion_datas+0x134>)
 80012e6:	e9c1 2300 	strd	r2, r3, [r1]
		Timestamp += ALGO_PERIOD;
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <Fusion_datas+0x138>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f242 7110 	movw	r1, #10000	; 0x2710
 80012f4:	1854      	adds	r4, r2, r1
 80012f6:	f143 0500 	adc.w	r5, r3, #0
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <Fusion_datas+0x138>)
 80012fc:	e9c3 4500 	strd	r4, r5, [r3]

		/* Run Dynamic Inclinometer algorithm */
		MotionDI_update(&data_out, &data_in);
 8001300:	490d      	ldr	r1, [pc, #52]	; (8001338 <Fusion_datas+0x134>)
 8001302:	480f      	ldr	r0, [pc, #60]	; (8001340 <Fusion_datas+0x13c>)
 8001304:	f00e f854 	bl	800f3b0 <MotionDI_update>


	}
	return data_out;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	4a0d      	ldr	r2, [pc, #52]	; (8001340 <Fusion_datas+0x13c>)
 800130c:	461c      	mov	r4, r3
 800130e:	4615      	mov	r5, r2
 8001310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001314:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001316:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800131a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800131c:	682b      	ldr	r3, [r5, #0]
 800131e:	6023      	str	r3, [r4, #0]
}
 8001320:	6978      	ldr	r0, [r7, #20]
 8001322:	371c      	adds	r7, #28
 8001324:	46bd      	mov	sp, r7
 8001326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001328:	20002128 	.word	0x20002128
 800132c:	20001e38 	.word	0x20001e38
 8001330:	20001e44 	.word	0x20001e44
 8001334:	3a83126f 	.word	0x3a83126f
 8001338:	20001dd8 	.word	0x20001dd8
 800133c:	20001e30 	.word	0x20001e30
 8001340:	20001df8 	.word	0x20001df8

08001344 <DRV_Init>:
#include "drv8311.h"
#include "pwm_driver.h"



void DRV_Init(void){
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af02      	add	r7, sp, #8
	//Init CS pin should default high
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 800134a:	2201      	movs	r2, #1
 800134c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001350:	48c3      	ldr	r0, [pc, #780]	; (8001660 <DRV_Init+0x31c>)
 8001352:	f002 fe0d 	bl	8003f70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(nSleep_GPIO_Port, nSleep_Pin, GPIO_PIN_SET);
 8001356:	2201      	movs	r2, #1
 8001358:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800135c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001360:	f002 fe06 	bl	8003f70 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001364:	2001      	movs	r0, #1
 8001366:	f002 fa21 	bl	80037ac <HAL_Delay>

	//Set PWM freq (reset = 0x0000 )
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 800136a:	4bbe      	ldr	r3, [pc, #760]	; (8001664 <DRV_Init+0x320>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_PERIOD <<3);  	//reg adr + cmd
 8001370:	4bbc      	ldr	r3, [pc, #752]	; (8001664 <DRV_Init+0x320>)
 8001372:	22c0      	movs	r2, #192	; 0xc0
 8001374:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 8001376:	4bbb      	ldr	r3, [pc, #748]	; (8001664 <DRV_Init+0x320>)
 8001378:	2200      	movs	r2, #0
 800137a:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0xFF;									//data (si read osf)
 800137c:	4bb9      	ldr	r3, [pc, #740]	; (8001664 <DRV_Init+0x320>)
 800137e:	22ff      	movs	r2, #255	; 0xff
 8001380:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001388:	48b5      	ldr	r0, [pc, #724]	; (8001660 <DRV_Init+0x31c>)
 800138a:	f002 fdf1 	bl	8003f70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2304      	movs	r3, #4
 8001396:	4ab4      	ldr	r2, [pc, #720]	; (8001668 <DRV_Init+0x324>)
 8001398:	49b2      	ldr	r1, [pc, #712]	; (8001664 <DRV_Init+0x320>)
 800139a:	48b4      	ldr	r0, [pc, #720]	; (800166c <DRV_Init+0x328>)
 800139c:	f005 fa03 	bl	80067a6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80013a0:	2201      	movs	r2, #1
 80013a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013a6:	48ae      	ldr	r0, [pc, #696]	; (8001660 <DRV_Init+0x31c>)
 80013a8:	f002 fde2 	bl	8003f70 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 80013ac:	4bad      	ldr	r3, [pc, #692]	; (8001664 <DRV_Init+0x320>)
 80013ae:	2280      	movs	r2, #128	; 0x80
 80013b0:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_PERIOD <<3);  	//reg adr + cmd
 80013b2:	4bac      	ldr	r3, [pc, #688]	; (8001664 <DRV_Init+0x320>)
 80013b4:	22c0      	movs	r2, #192	; 0xc0
 80013b6:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80013b8:	4baa      	ldr	r3, [pc, #680]	; (8001664 <DRV_Init+0x320>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 80013be:	4ba9      	ldr	r3, [pc, #676]	; (8001664 <DRV_Init+0x320>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ca:	48a5      	ldr	r0, [pc, #660]	; (8001660 <DRV_Init+0x31c>)
 80013cc:	f002 fdd0 	bl	8003f70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2304      	movs	r3, #4
 80013d8:	4aa3      	ldr	r2, [pc, #652]	; (8001668 <DRV_Init+0x324>)
 80013da:	49a2      	ldr	r1, [pc, #648]	; (8001664 <DRV_Init+0x320>)
 80013dc:	48a3      	ldr	r0, [pc, #652]	; (800166c <DRV_Init+0x328>)
 80013de:	f005 f9e2 	bl	80067a6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80013e2:	2201      	movs	r2, #1
 80013e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e8:	489d      	ldr	r0, [pc, #628]	; (8001660 <DRV_Init+0x31c>)
 80013ea:	f002 fdc1 	bl	8003f70 <HAL_GPIO_WritePin>

	//Set PWM duty_cycle A   (reset = 0x0000 )
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 80013ee:	4b9d      	ldr	r3, [pc, #628]	; (8001664 <DRV_Init+0x320>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_A_DUTY <<3);  	//reg adr + cmd
 80013f4:	4b9b      	ldr	r3, [pc, #620]	; (8001664 <DRV_Init+0x320>)
 80013f6:	22c8      	movs	r2, #200	; 0xc8
 80013f8:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80013fa:	4b9a      	ldr	r3, [pc, #616]	; (8001664 <DRV_Init+0x320>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8001400:	4b98      	ldr	r3, [pc, #608]	; (8001664 <DRV_Init+0x320>)
 8001402:	2200      	movs	r2, #0
 8001404:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800140c:	4894      	ldr	r0, [pc, #592]	; (8001660 <DRV_Init+0x31c>)
 800140e:	f002 fdaf 	bl	8003f70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	2304      	movs	r3, #4
 800141a:	4a93      	ldr	r2, [pc, #588]	; (8001668 <DRV_Init+0x324>)
 800141c:	4991      	ldr	r1, [pc, #580]	; (8001664 <DRV_Init+0x320>)
 800141e:	4893      	ldr	r0, [pc, #588]	; (800166c <DRV_Init+0x328>)
 8001420:	f005 f9c1 	bl	80067a6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142a:	488d      	ldr	r0, [pc, #564]	; (8001660 <DRV_Init+0x31c>)
 800142c:	f002 fda0 	bl	8003f70 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 8001430:	4b8c      	ldr	r3, [pc, #560]	; (8001664 <DRV_Init+0x320>)
 8001432:	2280      	movs	r2, #128	; 0x80
 8001434:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_A_DUTY <<3);  	//reg adr + cmd
 8001436:	4b8b      	ldr	r3, [pc, #556]	; (8001664 <DRV_Init+0x320>)
 8001438:	22c8      	movs	r2, #200	; 0xc8
 800143a:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 800143c:	4b89      	ldr	r3, [pc, #548]	; (8001664 <DRV_Init+0x320>)
 800143e:	2200      	movs	r2, #0
 8001440:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8001442:	4b88      	ldr	r3, [pc, #544]	; (8001664 <DRV_Init+0x320>)
 8001444:	2200      	movs	r2, #0
 8001446:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800144e:	4884      	ldr	r0, [pc, #528]	; (8001660 <DRV_Init+0x31c>)
 8001450:	f002 fd8e 	bl	8003f70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8001454:	f04f 33ff 	mov.w	r3, #4294967295
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2304      	movs	r3, #4
 800145c:	4a82      	ldr	r2, [pc, #520]	; (8001668 <DRV_Init+0x324>)
 800145e:	4981      	ldr	r1, [pc, #516]	; (8001664 <DRV_Init+0x320>)
 8001460:	4882      	ldr	r0, [pc, #520]	; (800166c <DRV_Init+0x328>)
 8001462:	f005 f9a0 	bl	80067a6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8001466:	2201      	movs	r2, #1
 8001468:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800146c:	487c      	ldr	r0, [pc, #496]	; (8001660 <DRV_Init+0x31c>)
 800146e:	f002 fd7f 	bl	8003f70 <HAL_GPIO_WritePin>

	//Set PWM duty_cycle B  (reset = 0x0000 )
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 8001472:	4b7c      	ldr	r3, [pc, #496]	; (8001664 <DRV_Init+0x320>)
 8001474:	2200      	movs	r2, #0
 8001476:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_B_DUTY <<3);  	//reg adr + cmd
 8001478:	4b7a      	ldr	r3, [pc, #488]	; (8001664 <DRV_Init+0x320>)
 800147a:	22d0      	movs	r2, #208	; 0xd0
 800147c:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 800147e:	4b79      	ldr	r3, [pc, #484]	; (8001664 <DRV_Init+0x320>)
 8001480:	2200      	movs	r2, #0
 8001482:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8001484:	4b77      	ldr	r3, [pc, #476]	; (8001664 <DRV_Init+0x320>)
 8001486:	2200      	movs	r2, #0
 8001488:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800148a:	2200      	movs	r2, #0
 800148c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001490:	4873      	ldr	r0, [pc, #460]	; (8001660 <DRV_Init+0x31c>)
 8001492:	f002 fd6d 	bl	8003f70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	2304      	movs	r3, #4
 800149e:	4a72      	ldr	r2, [pc, #456]	; (8001668 <DRV_Init+0x324>)
 80014a0:	4970      	ldr	r1, [pc, #448]	; (8001664 <DRV_Init+0x320>)
 80014a2:	4872      	ldr	r0, [pc, #456]	; (800166c <DRV_Init+0x328>)
 80014a4:	f005 f97f 	bl	80067a6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014ae:	486c      	ldr	r0, [pc, #432]	; (8001660 <DRV_Init+0x31c>)
 80014b0:	f002 fd5e 	bl	8003f70 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 80014b4:	4b6b      	ldr	r3, [pc, #428]	; (8001664 <DRV_Init+0x320>)
 80014b6:	2280      	movs	r2, #128	; 0x80
 80014b8:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_B_DUTY <<3);  	//reg adr + cmd
 80014ba:	4b6a      	ldr	r3, [pc, #424]	; (8001664 <DRV_Init+0x320>)
 80014bc:	22d0      	movs	r2, #208	; 0xd0
 80014be:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80014c0:	4b68      	ldr	r3, [pc, #416]	; (8001664 <DRV_Init+0x320>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 80014c6:	4b67      	ldr	r3, [pc, #412]	; (8001664 <DRV_Init+0x320>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80014cc:	2200      	movs	r2, #0
 80014ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d2:	4863      	ldr	r0, [pc, #396]	; (8001660 <DRV_Init+0x31c>)
 80014d4:	f002 fd4c 	bl	8003f70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80014d8:	f04f 33ff 	mov.w	r3, #4294967295
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2304      	movs	r3, #4
 80014e0:	4a61      	ldr	r2, [pc, #388]	; (8001668 <DRV_Init+0x324>)
 80014e2:	4960      	ldr	r1, [pc, #384]	; (8001664 <DRV_Init+0x320>)
 80014e4:	4861      	ldr	r0, [pc, #388]	; (800166c <DRV_Init+0x328>)
 80014e6:	f005 f95e 	bl	80067a6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014f0:	485b      	ldr	r0, [pc, #364]	; (8001660 <DRV_Init+0x31c>)
 80014f2:	f002 fd3d 	bl	8003f70 <HAL_GPIO_WritePin>

	//Set PWM duty_cycle C (reset = 0x0000 )
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00 ;               					//cmd
 80014f6:	4b5b      	ldr	r3, [pc, #364]	; (8001664 <DRV_Init+0x320>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_C_DUTY <<3);  	//reg adr + cmd
 80014fc:	4b59      	ldr	r3, [pc, #356]	; (8001664 <DRV_Init+0x320>)
 80014fe:	22d8      	movs	r2, #216	; 0xd8
 8001500:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 8001502:	4b58      	ldr	r3, [pc, #352]	; (8001664 <DRV_Init+0x320>)
 8001504:	2200      	movs	r2, #0
 8001506:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8001508:	4b56      	ldr	r3, [pc, #344]	; (8001664 <DRV_Init+0x320>)
 800150a:	2200      	movs	r2, #0
 800150c:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001514:	4852      	ldr	r0, [pc, #328]	; (8001660 <DRV_Init+0x31c>)
 8001516:	f002 fd2b 	bl	8003f70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 800151a:	f04f 33ff 	mov.w	r3, #4294967295
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2304      	movs	r3, #4
 8001522:	4a51      	ldr	r2, [pc, #324]	; (8001668 <DRV_Init+0x324>)
 8001524:	494f      	ldr	r1, [pc, #316]	; (8001664 <DRV_Init+0x320>)
 8001526:	4851      	ldr	r0, [pc, #324]	; (800166c <DRV_Init+0x328>)
 8001528:	f005 f93d 	bl	80067a6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 800152c:	2201      	movs	r2, #1
 800152e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001532:	484b      	ldr	r0, [pc, #300]	; (8001660 <DRV_Init+0x31c>)
 8001534:	f002 fd1c 	bl	8003f70 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 8001538:	4b4a      	ldr	r3, [pc, #296]	; (8001664 <DRV_Init+0x320>)
 800153a:	2280      	movs	r2, #128	; 0x80
 800153c:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_C_DUTY <<3);  	//reg adr + cmd
 800153e:	4b49      	ldr	r3, [pc, #292]	; (8001664 <DRV_Init+0x320>)
 8001540:	22d8      	movs	r2, #216	; 0xd8
 8001542:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 8001544:	4b47      	ldr	r3, [pc, #284]	; (8001664 <DRV_Init+0x320>)
 8001546:	2200      	movs	r2, #0
 8001548:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 800154a:	4b46      	ldr	r3, [pc, #280]	; (8001664 <DRV_Init+0x320>)
 800154c:	2200      	movs	r2, #0
 800154e:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8001550:	2200      	movs	r2, #0
 8001552:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001556:	4842      	ldr	r0, [pc, #264]	; (8001660 <DRV_Init+0x31c>)
 8001558:	f002 fd0a 	bl	8003f70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 800155c:	f04f 33ff 	mov.w	r3, #4294967295
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	2304      	movs	r3, #4
 8001564:	4a40      	ldr	r2, [pc, #256]	; (8001668 <DRV_Init+0x324>)
 8001566:	493f      	ldr	r1, [pc, #252]	; (8001664 <DRV_Init+0x320>)
 8001568:	4840      	ldr	r0, [pc, #256]	; (800166c <DRV_Init+0x328>)
 800156a:	f005 f91c 	bl	80067a6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 800156e:	2201      	movs	r2, #1
 8001570:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001574:	483a      	ldr	r0, [pc, #232]	; (8001660 <DRV_Init+0x31c>)
 8001576:	f002 fcfb 	bl	8003f70 <HAL_GPIO_WritePin>
	HAL_Delay(1);*/


	//counter mode
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 800157a:	4b3a      	ldr	r3, [pc, #232]	; (8001664 <DRV_Init+0x320>)
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_CTRL <<3);  	//reg adr + cmd
 8001580:	4b38      	ldr	r3, [pc, #224]	; (8001664 <DRV_Init+0x320>)
 8001582:	22e8      	movs	r2, #232	; 0xe8
 8001584:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00 | (0x01);						//data (si read osf)
 8001586:	4b37      	ldr	r3, [pc, #220]	; (8001664 <DRV_Init+0x320>)
 8001588:	2201      	movs	r2, #1
 800158a:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 800158c:	4b35      	ldr	r3, [pc, #212]	; (8001664 <DRV_Init+0x320>)
 800158e:	2200      	movs	r2, #0
 8001590:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001598:	4831      	ldr	r0, [pc, #196]	; (8001660 <DRV_Init+0x31c>)
 800159a:	f002 fce9 	bl	8003f70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 800159e:	f04f 33ff 	mov.w	r3, #4294967295
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	2304      	movs	r3, #4
 80015a6:	4a30      	ldr	r2, [pc, #192]	; (8001668 <DRV_Init+0x324>)
 80015a8:	492e      	ldr	r1, [pc, #184]	; (8001664 <DRV_Init+0x320>)
 80015aa:	4830      	ldr	r0, [pc, #192]	; (800166c <DRV_Init+0x328>)
 80015ac:	f005 f8fb 	bl	80067a6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80015b0:	2201      	movs	r2, #1
 80015b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015b6:	482a      	ldr	r0, [pc, #168]	; (8001660 <DRV_Init+0x31c>)
 80015b8:	f002 fcda 	bl	8003f70 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 80015bc:	4b29      	ldr	r3, [pc, #164]	; (8001664 <DRV_Init+0x320>)
 80015be:	2280      	movs	r2, #128	; 0x80
 80015c0:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_CTRL <<3);  	//reg adr + cmd
 80015c2:	4b28      	ldr	r3, [pc, #160]	; (8001664 <DRV_Init+0x320>)
 80015c4:	22e8      	movs	r2, #232	; 0xe8
 80015c6:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80015c8:	4b26      	ldr	r3, [pc, #152]	; (8001664 <DRV_Init+0x320>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 80015ce:	4b25      	ldr	r3, [pc, #148]	; (8001664 <DRV_Init+0x320>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015da:	4821      	ldr	r0, [pc, #132]	; (8001660 <DRV_Init+0x31c>)
 80015dc:	f002 fcc8 	bl	8003f70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295
 80015e4:	9300      	str	r3, [sp, #0]
 80015e6:	2304      	movs	r3, #4
 80015e8:	4a1f      	ldr	r2, [pc, #124]	; (8001668 <DRV_Init+0x324>)
 80015ea:	491e      	ldr	r1, [pc, #120]	; (8001664 <DRV_Init+0x320>)
 80015ec:	481f      	ldr	r0, [pc, #124]	; (800166c <DRV_Init+0x328>)
 80015ee:	f005 f8da 	bl	80067a6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80015f2:	2201      	movs	r2, #1
 80015f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f8:	4819      	ldr	r0, [pc, #100]	; (8001660 <DRV_Init+0x31c>)
 80015fa:	f002 fcb9 	bl	8003f70 <HAL_GPIO_WritePin>

	//pwm state
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <DRV_Init+0x320>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWM_STATE <<3);  	//reg adr + cmd
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <DRV_Init+0x320>)
 8001606:	22e0      	movs	r2, #224	; 0xe0
 8001608:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x07;						//data (si read osf)
 800160a:	4b16      	ldr	r3, [pc, #88]	; (8001664 <DRV_Init+0x320>)
 800160c:	2207      	movs	r2, #7
 800160e:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x77;									//data (si read osf)
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <DRV_Init+0x320>)
 8001612:	2277      	movs	r2, #119	; 0x77
 8001614:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800161c:	4810      	ldr	r0, [pc, #64]	; (8001660 <DRV_Init+0x31c>)
 800161e:	f002 fca7 	bl	8003f70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8001622:	f04f 33ff 	mov.w	r3, #4294967295
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2304      	movs	r3, #4
 800162a:	4a0f      	ldr	r2, [pc, #60]	; (8001668 <DRV_Init+0x324>)
 800162c:	490d      	ldr	r1, [pc, #52]	; (8001664 <DRV_Init+0x320>)
 800162e:	480f      	ldr	r0, [pc, #60]	; (800166c <DRV_Init+0x328>)
 8001630:	f005 f8b9 	bl	80067a6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8001634:	2201      	movs	r2, #1
 8001636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800163a:	4809      	ldr	r0, [pc, #36]	; (8001660 <DRV_Init+0x31c>)
 800163c:	f002 fc98 	bl	8003f70 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 8001640:	4b08      	ldr	r3, [pc, #32]	; (8001664 <DRV_Init+0x320>)
 8001642:	2280      	movs	r2, #128	; 0x80
 8001644:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWM_STATE <<3);  	//reg adr + cmd
 8001646:	4b07      	ldr	r3, [pc, #28]	; (8001664 <DRV_Init+0x320>)
 8001648:	22e0      	movs	r2, #224	; 0xe0
 800164a:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <DRV_Init+0x320>)
 800164e:	2200      	movs	r2, #0
 8001650:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 8001652:	4b04      	ldr	r3, [pc, #16]	; (8001664 <DRV_Init+0x320>)
 8001654:	2200      	movs	r2, #0
 8001656:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800165e:	e007      	b.n	8001670 <DRV_Init+0x32c>
 8001660:	48000400 	.word	0x48000400
 8001664:	200020cc 	.word	0x200020cc
 8001668:	200020e0 	.word	0x200020e0
 800166c:	20001f4c 	.word	0x20001f4c
 8001670:	482b      	ldr	r0, [pc, #172]	; (8001720 <DRV_Init+0x3dc>)
 8001672:	f002 fc7d 	bl	8003f70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	2304      	movs	r3, #4
 800167e:	4a29      	ldr	r2, [pc, #164]	; (8001724 <DRV_Init+0x3e0>)
 8001680:	4929      	ldr	r1, [pc, #164]	; (8001728 <DRV_Init+0x3e4>)
 8001682:	482a      	ldr	r0, [pc, #168]	; (800172c <DRV_Init+0x3e8>)
 8001684:	f005 f88f 	bl	80067a6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8001688:	2201      	movs	r2, #1
 800168a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800168e:	4824      	ldr	r0, [pc, #144]	; (8001720 <DRV_Init+0x3dc>)
 8001690:	f002 fc6e 	bl	8003f70 <HAL_GPIO_WritePin>


	//Enable PWM Generation  (reset = 0x0000 ) + synchro
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x00;               					//cmd
 8001694:	4b24      	ldr	r3, [pc, #144]	; (8001728 <DRV_Init+0x3e4>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_CTRL <<3);  	//reg adr + cmd
 800169a:	4b23      	ldr	r3, [pc, #140]	; (8001728 <DRV_Init+0x3e4>)
 800169c:	22e8      	movs	r2, #232	; 0xe8
 800169e:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00 | (0x01<<2);						//data (si read osf)
 80016a0:	4b21      	ldr	r3, [pc, #132]	; (8001728 <DRV_Init+0x3e4>)
 80016a2:	2204      	movs	r2, #4
 80016a4:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00 | (0x05<<5);									//data (si read osf)
 80016a6:	4b20      	ldr	r3, [pc, #128]	; (8001728 <DRV_Init+0x3e4>)
 80016a8:	22a0      	movs	r2, #160	; 0xa0
 80016aa:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80016ac:	2200      	movs	r2, #0
 80016ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016b2:	481b      	ldr	r0, [pc, #108]	; (8001720 <DRV_Init+0x3dc>)
 80016b4:	f002 fc5c 	bl	8003f70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	2304      	movs	r3, #4
 80016c0:	4a18      	ldr	r2, [pc, #96]	; (8001724 <DRV_Init+0x3e0>)
 80016c2:	4919      	ldr	r1, [pc, #100]	; (8001728 <DRV_Init+0x3e4>)
 80016c4:	4819      	ldr	r0, [pc, #100]	; (800172c <DRV_Init+0x3e8>)
 80016c6:	f005 f86e 	bl	80067a6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 80016ca:	2201      	movs	r2, #1
 80016cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d0:	4813      	ldr	r0, [pc, #76]	; (8001720 <DRV_Init+0x3dc>)
 80016d2:	f002 fc4d 	bl	8003f70 <HAL_GPIO_WritePin>
	//Read settings_____________________________________________________________
	//fill TX buffer for SPI--------------------------------------------
	buf_SPI_TX[0] = 0x80;               					//cmd
 80016d6:	4b14      	ldr	r3, [pc, #80]	; (8001728 <DRV_Init+0x3e4>)
 80016d8:	2280      	movs	r2, #128	; 0x80
 80016da:	701a      	strb	r2, [r3, #0]
	buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_CTRL <<3);  	//reg adr + cmd
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <DRV_Init+0x3e4>)
 80016de:	22e8      	movs	r2, #232	; 0xe8
 80016e0:	705a      	strb	r2, [r3, #1]
	buf_SPI_TX[2] = 0x00;									//data (si read osf)
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <DRV_Init+0x3e4>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	709a      	strb	r2, [r3, #2]
	buf_SPI_TX[3] = 0x00;									//data (si read osf)
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <DRV_Init+0x3e4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	70da      	strb	r2, [r3, #3]
	//Send/Read Datas---------------------------------------------------
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f4:	480a      	ldr	r0, [pc, #40]	; (8001720 <DRV_Init+0x3dc>)
 80016f6:	f002 fc3b 	bl	8003f70 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
 80016fe:	9300      	str	r3, [sp, #0]
 8001700:	2304      	movs	r3, #4
 8001702:	4a08      	ldr	r2, [pc, #32]	; (8001724 <DRV_Init+0x3e0>)
 8001704:	4908      	ldr	r1, [pc, #32]	; (8001728 <DRV_Init+0x3e4>)
 8001706:	4809      	ldr	r0, [pc, #36]	; (800172c <DRV_Init+0x3e8>)
 8001708:	f005 f84d 	bl	80067a6 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 800170c:	2201      	movs	r2, #1
 800170e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001712:	4803      	ldr	r0, [pc, #12]	; (8001720 <DRV_Init+0x3dc>)
 8001714:	f002 fc2c 	bl	8003f70 <HAL_GPIO_WritePin>

}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	48000400 	.word	0x48000400
 8001724:	200020e0 	.word	0x200020e0
 8001728:	200020cc 	.word	0x200020cc
 800172c:	20001f4c 	.word	0x20001f4c

08001730 <LSM6DSO_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d103      	bne.n	800174c <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8001744:	f04f 33ff 	mov.w	r3, #4294967295
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	e04d      	b.n	80017e8 <LSM6DSO_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	689a      	ldr	r2, [r3, #8]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	7b1a      	ldrb	r2, [r3, #12]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	691a      	ldr	r2, [r3, #16]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	695a      	ldr	r2, [r3, #20]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	699a      	ldr	r2, [r3, #24]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a1b      	ldr	r2, [pc, #108]	; (80017f4 <LSM6DSO_RegisterBusIO+0xc4>)
 8001788:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a1a      	ldr	r2, [pc, #104]	; (80017f8 <LSM6DSO_RegisterBusIO+0xc8>)
 800178e:	61da      	str	r2, [r3, #28]

    //MODIFIED
    pObj->Ctx.handle   = pObj;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d103      	bne.n	80017a6 <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 800179e:	f04f 33ff 	mov.w	r3, #4294967295
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	e020      	b.n	80017e8 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4798      	blx	r3
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <LSM6DSO_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO_ERROR;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e016      	b.n	80017e8 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d112      	bne.n	80017e8 <LSM6DSO_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d10d      	bne.n	80017e8 <LSM6DSO_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 80017cc:	230c      	movs	r3, #12
 80017ce:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 80017d0:	7afb      	ldrb	r3, [r7, #11]
 80017d2:	461a      	mov	r2, r3
 80017d4:	2112      	movs	r1, #18
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 fac4 	bl	8001d64 <LSM6DSO_Write_Reg>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <LSM6DSO_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO_ERROR;
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80017e8:	68fb      	ldr	r3, [r7, #12]
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	08001d9b 	.word	0x08001d9b
 80017f8:	08001dd1 	.word	0x08001dd1

080017fc <LSM6DSO_Init>:
  * @brief  Initialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	331c      	adds	r3, #28
 8001808:	2180      	movs	r1, #128	; 0x80
 800180a:	4618      	mov	r0, r3
 800180c:	f001 f85e 	bl	80028cc <lsm6dso_i3c_disable_set>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d002      	beq.n	800181c <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
 800181a:	e060      	b.n	80018de <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	331c      	adds	r3, #28
 8001820:	2101      	movs	r1, #1
 8001822:	4618      	mov	r0, r3
 8001824:	f001 f82c 	bl	8002880 <lsm6dso_auto_increment_set>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	e054      	b.n	80018de <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	331c      	adds	r3, #28
 8001838:	2101      	movs	r1, #1
 800183a:	4618      	mov	r0, r3
 800183c:	f000 ff3e 	bl	80026bc <lsm6dso_block_data_update_set>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 8001846:	f04f 33ff 	mov.w	r3, #4294967295
 800184a:	e048      	b.n	80018de <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	331c      	adds	r3, #28
 8001850:	2100      	movs	r1, #0
 8001852:	4618      	mov	r0, r3
 8001854:	f001 f880 	bl	8002958 <lsm6dso_fifo_mode_set>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d002      	beq.n	8001864 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 800185e:	f04f 33ff 	mov.w	r3, #4294967295
 8001862:	e03c      	b.n	80018de <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2204      	movs	r2, #4
 8001868:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	331c      	adds	r3, #28
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f000 fbf8 	bl	8002068 <lsm6dso_xl_data_rate_set>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d002      	beq.n	8001884 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	e02c      	b.n	80018de <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	331c      	adds	r3, #28
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f000 fb8e 	bl	8001fac <lsm6dso_xl_full_scale_set>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d002      	beq.n	800189c <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	e020      	b.n	80018de <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2204      	movs	r2, #4
 80018a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	331c      	adds	r3, #28
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 fda8 	bl	8002400 <lsm6dso_gy_data_rate_set>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
 80018ba:	e010      	b.n	80018de <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	331c      	adds	r3, #28
 80018c0:	2106      	movs	r1, #6
 80018c2:	4618      	mov	r0, r3
 80018c4:	f000 fd34 	bl	8002330 <lsm6dso_gy_full_scale_set>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	e004      	b.n	80018de <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2201      	movs	r2, #1
 80018d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <LSM6DSO_DeInit>:
  * @brief  Deinitialize the LSM6DSO sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b082      	sub	sp, #8
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f872 	bl	80019d8 <LSM6DSO_ACC_Disable>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d002      	beq.n	8001900 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295
 80018fe:	e015      	b.n	800192c <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8001900:	6878      	ldr	r0, [r7, #4]
 8001902:	f000 f95a 	bl	8001bba <LSM6DSO_GYRO_Disable>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d002      	beq.n	8001912 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	e00c      	b.n	800192c <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <LSM6DSO_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to LSM6DSO sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	2201      	movs	r2, #1
 8001942:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	2201      	movs	r2, #1
 8001948:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	2200      	movs	r2, #0
 800194e:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	2200      	movs	r2, #0
 8001954:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800195c:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2210      	movs	r2, #16
 8001962:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	4a07      	ldr	r2, [pc, #28]	; (800198c <LSM6DSO_GetCapabilities+0x58>)
 800196e:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	4a06      	ldr	r2, [pc, #24]	; (800198c <LSM6DSO_GetCapabilities+0x58>)
 8001974:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	45d02000 	.word	0x45d02000

08001990 <LSM6DSO_ACC_Enable>:
  * @brief  Enable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 80019a2:	2300      	movs	r3, #0
 80019a4:	e014      	b.n	80019d0 <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f103 021c 	add.w	r2, r3, #28
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80019b2:	4619      	mov	r1, r3
 80019b4:	4610      	mov	r0, r2
 80019b6:	f000 fb57 	bl	8002068 <lsm6dso_xl_data_rate_set>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d002      	beq.n	80019c6 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 80019c0:	f04f 33ff 	mov.w	r3, #4294967295
 80019c4:	e004      	b.n	80019d0 <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2201      	movs	r2, #1
 80019ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <LSM6DSO_ACC_Disable>:
  * @brief  Disable the LSM6DSO accelerometer sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e01f      	b.n	8001a2e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f103 021c 	add.w	r2, r3, #28
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	332b      	adds	r3, #43	; 0x2b
 80019f8:	4619      	mov	r1, r3
 80019fa:	4610      	mov	r0, r2
 80019fc:	f000 fc30 	bl	8002260 <lsm6dso_xl_data_rate_get>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d002      	beq.n	8001a0c <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	e010      	b.n	8001a2e <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	331c      	adds	r3, #28
 8001a10:	2100      	movs	r1, #0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 fb28 	bl	8002068 <lsm6dso_xl_data_rate_set>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d002      	beq.n	8001a24 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8001a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a22:	e004      	b.n	8001a2e <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <LSM6DSO_ACC_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	331c      	adds	r3, #28
 8001a4a:	f107 020b 	add.w	r2, r7, #11
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f000 fad1 	bl	8001ff8 <lsm6dso_xl_full_scale_get>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d002      	beq.n	8001a62 <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8001a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001a60:	e023      	b.n	8001aaa <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8001a62:	7afb      	ldrb	r3, [r7, #11]
 8001a64:	2b03      	cmp	r3, #3
 8001a66:	d81b      	bhi.n	8001aa0 <LSM6DSO_ACC_GetSensitivity+0x68>
 8001a68:	a201      	add	r2, pc, #4	; (adr r2, 8001a70 <LSM6DSO_ACC_GetSensitivity+0x38>)
 8001a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a6e:	bf00      	nop
 8001a70:	08001a81 	.word	0x08001a81
 8001a74:	08001a99 	.word	0x08001a99
 8001a78:	08001a89 	.word	0x08001a89
 8001a7c:	08001a91 	.word	0x08001a91
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	4a0c      	ldr	r2, [pc, #48]	; (8001ab4 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8001a84:	601a      	str	r2, [r3, #0]
      break;
 8001a86:	e00f      	b.n	8001aa8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	4a0b      	ldr	r2, [pc, #44]	; (8001ab8 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8001a8c:	601a      	str	r2, [r3, #0]
      break;
 8001a8e:	e00b      	b.n	8001aa8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <LSM6DSO_ACC_GetSensitivity+0x84>)
 8001a94:	601a      	str	r2, [r3, #0]
      break;
 8001a96:	e007      	b.n	8001aa8 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	4a09      	ldr	r2, [pc, #36]	; (8001ac0 <LSM6DSO_ACC_GetSensitivity+0x88>)
 8001a9c:	601a      	str	r2, [r3, #0]
      break;
 8001a9e:	e003      	b.n	8001aa8 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa4:	60fb      	str	r3, [r7, #12]
      break;
 8001aa6:	bf00      	nop
  }

  return ret;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	3d79db23 	.word	0x3d79db23
 8001ab8:	3df9db23 	.word	0x3df9db23
 8001abc:	3e79db23 	.word	0x3e79db23
 8001ac0:	3ef9db23 	.word	0x3ef9db23

08001ac4 <LSM6DSO_ACC_GetAxes>:
  * @param  pObj the device pObj
  * @param  Acceleration pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	331c      	adds	r3, #28
 8001ad8:	f107 0210 	add.w	r2, r7, #16
 8001adc:	4611      	mov	r1, r2
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f000 fe5d 	bl	800279e <lsm6dso_acceleration_raw_get>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	e03c      	b.n	8001b6a <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	4619      	mov	r1, r3
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ff9e 	bl	8001a38 <LSM6DSO_ACC_GetSensitivity>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
 8001b06:	e030      	b.n	8001b6a <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8001b08:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b0c:	ee07 3a90 	vmov	s15, r3
 8001b10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b14:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b20:	ee17 2a90 	vmov	r2, s15
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8001b28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b2c:	ee07 3a90 	vmov	s15, r3
 8001b30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b34:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b40:	ee17 2a90 	vmov	r2, s15
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8001b48:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b4c:	ee07 3a90 	vmov	s15, r3
 8001b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b54:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b60:	ee17 2a90 	vmov	r2, s15
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8001b68:	2300      	movs	r3, #0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <LSM6DSO_GYRO_Enable>:
  * @brief  Enable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d101      	bne.n	8001b88 <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	e014      	b.n	8001bb2 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f103 021c 	add.w	r2, r3, #28
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001b94:	4619      	mov	r1, r3
 8001b96:	4610      	mov	r0, r2
 8001b98:	f000 fc32 	bl	8002400 <lsm6dso_gy_data_rate_set>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8001ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba6:	e004      	b.n	8001bb2 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <LSM6DSO_GYRO_Disable>:
  * @brief  Disable the LSM6DSO gyroscope sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e01f      	b.n	8001c10 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f103 021c 	add.w	r2, r3, #28
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	332c      	adds	r3, #44	; 0x2c
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4610      	mov	r0, r2
 8001bde:	f000 fd0b 	bl	80025f8 <lsm6dso_gy_data_rate_get>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d002      	beq.n	8001bee <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8001be8:	f04f 33ff 	mov.w	r3, #4294967295
 8001bec:	e010      	b.n	8001c10 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	331c      	adds	r3, #28
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 fc03 	bl	8002400 <lsm6dso_gy_data_rate_set>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8001c00:	f04f 33ff 	mov.w	r3, #4294967295
 8001c04:	e004      	b.n	8001c10 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}

08001c18 <LSM6DSO_GYRO_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Sensitivity pointer
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	331c      	adds	r3, #28
 8001c2a:	f107 020b 	add.w	r2, r7, #11
 8001c2e:	4611      	mov	r1, r2
 8001c30:	4618      	mov	r0, r3
 8001c32:	f000 fba3 	bl	800237c <lsm6dso_gy_full_scale_get>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8001c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c40:	e02d      	b.n	8001c9e <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8001c42:	7afb      	ldrb	r3, [r7, #11]
 8001c44:	2b06      	cmp	r3, #6
 8001c46:	d825      	bhi.n	8001c94 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 8001c48:	a201      	add	r2, pc, #4	; (adr r2, 8001c50 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 8001c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4e:	bf00      	nop
 8001c50:	08001c75 	.word	0x08001c75
 8001c54:	08001c6d 	.word	0x08001c6d
 8001c58:	08001c7d 	.word	0x08001c7d
 8001c5c:	08001c95 	.word	0x08001c95
 8001c60:	08001c85 	.word	0x08001c85
 8001c64:	08001c95 	.word	0x08001c95
 8001c68:	08001c8d 	.word	0x08001c8d
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	4a0e      	ldr	r2, [pc, #56]	; (8001ca8 <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8001c70:	601a      	str	r2, [r3, #0]
      break;
 8001c72:	e013      	b.n	8001c9c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <LSM6DSO_GYRO_GetSensitivity+0x94>)
 8001c78:	601a      	str	r2, [r3, #0]
      break;
 8001c7a:	e00f      	b.n	8001c9c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	4a0c      	ldr	r2, [pc, #48]	; (8001cb0 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8001c80:	601a      	str	r2, [r3, #0]
      break;
 8001c82:	e00b      	b.n	8001c9c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 8001c88:	601a      	str	r2, [r3, #0]
      break;
 8001c8a:	e007      	b.n	8001c9c <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	4a0a      	ldr	r2, [pc, #40]	; (8001cb8 <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8001c90:	601a      	str	r2, [r3, #0]
      break;
 8001c92:	e003      	b.n	8001c9c <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8001c94:	f04f 33ff 	mov.w	r3, #4294967295
 8001c98:	60fb      	str	r3, [r7, #12]
      break;
 8001c9a:	bf00      	nop
  }

  return ret;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	408c0000 	.word	0x408c0000
 8001cac:	410c0000 	.word	0x410c0000
 8001cb0:	418c0000 	.word	0x418c0000
 8001cb4:	420c0000 	.word	0x420c0000
 8001cb8:	428c0000 	.word	0x428c0000

08001cbc <LSM6DSO_GYRO_GetAxes>:
  * @param  pObj the device pObj
  * @param  AngularRate pointer where the values of the axes are written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSO_OK)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	331c      	adds	r3, #28
 8001cca:	f107 0210 	add.w	r2, r7, #16
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f000 fd19 	bl	8002708 <lsm6dso_angular_rate_raw_get>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d002      	beq.n	8001ce2 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8001cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce0:	e03c      	b.n	8001d5c <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8001ce2:	f107 030c 	add.w	r3, r7, #12
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ff95 	bl	8001c18 <LSM6DSO_GYRO_GetSensitivity>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d002      	beq.n	8001cfa <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 8001cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf8:	e030      	b.n	8001d5c <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8001cfa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001cfe:	ee07 3a90 	vmov	s15, r3
 8001d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d06:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d12:	ee17 2a90 	vmov	r2, s15
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8001d1a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d1e:	ee07 3a90 	vmov	s15, r3
 8001d22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d26:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d32:	ee17 2a90 	vmov	r2, s15
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8001d3a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001d3e:	ee07 3a90 	vmov	s15, r3
 8001d42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d52:	ee17 2a90 	vmov	r2, s15
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <LSM6DSO_Write_Reg>:
  * @param  Reg address to be written
  * @param  Data value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	70fb      	strb	r3, [r7, #3]
 8001d70:	4613      	mov	r3, r2
 8001d72:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f103 001c 	add.w	r0, r3, #28
 8001d7a:	1cba      	adds	r2, r7, #2
 8001d7c:	78f9      	ldrb	r1, [r7, #3]
 8001d7e:	2301      	movs	r3, #1
 8001d80:	f000 f8fc 	bl	8001f7c <lsm6dso_write_reg>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d002      	beq.n	8001d90 <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8001d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8e:	e000      	b.n	8001d92 <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001d9a:	b590      	push	{r4, r7, lr}
 8001d9c:	b087      	sub	sp, #28
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	607a      	str	r2, [r7, #4]
 8001da4:	461a      	mov	r2, r3
 8001da6:	460b      	mov	r3, r1
 8001da8:	72fb      	strb	r3, [r7, #11]
 8001daa:	4613      	mov	r3, r2
 8001dac:	813b      	strh	r3, [r7, #8]
	LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	617b      	str	r3, [r7, #20]
	return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	695c      	ldr	r4, [r3, #20]
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	7b1b      	ldrb	r3, [r3, #12]
 8001dba:	b298      	uxth	r0, r3
 8001dbc:	7afb      	ldrb	r3, [r7, #11]
 8001dbe:	b299      	uxth	r1, r3
 8001dc0:	893b      	ldrh	r3, [r7, #8]
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	47a0      	blx	r4
 8001dc6:	4603      	mov	r3, r0
	//MODIFIED
	//HAL_I2C_Mem_Read(Handle, LSM6DSO_I2C_ADD_L, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 1000);
	//return 0;
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	371c      	adds	r7, #28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd90      	pop	{r4, r7, pc}

08001dd0 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b087      	sub	sp, #28
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	607a      	str	r2, [r7, #4]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	460b      	mov	r3, r1
 8001dde:	72fb      	strb	r3, [r7, #11]
 8001de0:	4613      	mov	r3, r2
 8001de2:	813b      	strh	r3, [r7, #8]
	LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	617b      	str	r3, [r7, #20]
	return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	691c      	ldr	r4, [r3, #16]
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	7b1b      	ldrb	r3, [r3, #12]
 8001df0:	b298      	uxth	r0, r3
 8001df2:	7afb      	ldrb	r3, [r7, #11]
 8001df4:	b299      	uxth	r1, r3
 8001df6:	893b      	ldrh	r3, [r7, #8]
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	47a0      	blx	r4
 8001dfc:	4603      	mov	r3, r0
	//MODIFIED
	//HAL_I2C_Mem_Read(Handle, LSM6DSO_I2C_ADD_L, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 1000);
	//return 0;
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	371c      	adds	r7, #28
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd90      	pop	{r4, r7, pc}
	...

08001e08 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af04      	add	r7, sp, #16
 8001e0e:	60ba      	str	r2, [r7, #8]
 8001e10:	461a      	mov	r2, r3
 8001e12:	4603      	mov	r3, r0
 8001e14:	81fb      	strh	r3, [r7, #14]
 8001e16:	460b      	mov	r3, r1
 8001e18:	81bb      	strh	r3, [r7, #12]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	80fb      	strh	r3, [r7, #6]
  HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, 1000);
 8001e1e:	89ba      	ldrh	r2, [r7, #12]
 8001e20:	89f9      	ldrh	r1, [r7, #14]
 8001e22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e26:	9302      	str	r3, [sp, #8]
 8001e28:	88fb      	ldrh	r3, [r7, #6]
 8001e2a:	9301      	str	r3, [sp, #4]
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	9300      	str	r3, [sp, #0]
 8001e30:	2301      	movs	r3, #1
 8001e32:	4804      	ldr	r0, [pc, #16]	; (8001e44 <BSP_I2C1_ReadReg+0x3c>)
 8001e34:	f002 fa58 	bl	80042e8 <HAL_I2C_Mem_Read>

  return 0;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20001edc 	.word	0x20001edc

08001e48 <BSP_I2C1_WriteReg>:
  * @param  pData  Pointer to data buffer to write
  * @param  Length Data Length
  * @retval BSP statu
  */
int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b088      	sub	sp, #32
 8001e4c:	af04      	add	r7, sp, #16
 8001e4e:	60ba      	str	r2, [r7, #8]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4603      	mov	r3, r0
 8001e54:	81fb      	strh	r3, [r7, #14]
 8001e56:	460b      	mov	r3, r1
 8001e58:	81bb      	strh	r3, [r7, #12]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	80fb      	strh	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, 1000);
 8001e5e:	89ba      	ldrh	r2, [r7, #12]
 8001e60:	89f9      	ldrh	r1, [r7, #14]
 8001e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e66:	9302      	str	r3, [sp, #8]
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	9301      	str	r3, [sp, #4]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	2301      	movs	r3, #1
 8001e72:	4804      	ldr	r0, [pc, #16]	; (8001e84 <BSP_I2C1_WriteReg+0x3c>)
 8001e74:	f002 f924 	bl	80040c0 <HAL_I2C_Mem_Write>
	return 0;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20001edc 	.word	0x20001edc

08001e88 <INIT_IMU>:





void INIT_IMU(void){
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	af00      	add	r7, sp, #0
	//IMU------------------------------------------------
	  /* Configure the accelero driver */
	  IO_IMU.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8001e8c:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <INIT_IMU+0x48>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
	  IO_IMU.Address     = LSM6DSO_I2C_ADD_H;
 8001e92:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <INIT_IMU+0x48>)
 8001e94:	22d7      	movs	r2, #215	; 0xd7
 8001e96:	731a      	strb	r2, [r3, #12]
	  IO_IMU.Init        = LSM6DSO_Init;
 8001e98:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <INIT_IMU+0x48>)
 8001e9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ed4 <INIT_IMU+0x4c>)
 8001e9c:	601a      	str	r2, [r3, #0]
	  IO_IMU.DeInit      = LSM6DSO_DeInit;
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <INIT_IMU+0x48>)
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	; (8001ed8 <INIT_IMU+0x50>)
 8001ea2:	605a      	str	r2, [r3, #4]
	  IO_IMU.ReadReg     = IMU_BSP_I2C1_ReadReg;
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <INIT_IMU+0x48>)
 8001ea6:	4a0d      	ldr	r2, [pc, #52]	; (8001edc <INIT_IMU+0x54>)
 8001ea8:	615a      	str	r2, [r3, #20]
	  IO_IMU.WriteReg    = IMU_BSP_I2C1_WriteReg;
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <INIT_IMU+0x48>)
 8001eac:	4a0c      	ldr	r2, [pc, #48]	; (8001ee0 <INIT_IMU+0x58>)
 8001eae:	611a      	str	r2, [r3, #16]
	  LSM6DSO_RegisterBusIO(&IMU, &IO_IMU);
 8001eb0:	4907      	ldr	r1, [pc, #28]	; (8001ed0 <INIT_IMU+0x48>)
 8001eb2:	480c      	ldr	r0, [pc, #48]	; (8001ee4 <INIT_IMU+0x5c>)
 8001eb4:	f7ff fc3c 	bl	8001730 <LSM6DSO_RegisterBusIO>

	  LSM6DSO_GetCapabilities(&IMU, &capabilities_IMU);
 8001eb8:	490b      	ldr	r1, [pc, #44]	; (8001ee8 <INIT_IMU+0x60>)
 8001eba:	480a      	ldr	r0, [pc, #40]	; (8001ee4 <INIT_IMU+0x5c>)
 8001ebc:	f7ff fd3a 	bl	8001934 <LSM6DSO_GetCapabilities>

	  LSM6DSO_ACC_Enable(&IMU);
 8001ec0:	4808      	ldr	r0, [pc, #32]	; (8001ee4 <INIT_IMU+0x5c>)
 8001ec2:	f7ff fd65 	bl	8001990 <LSM6DSO_ACC_Enable>
	  LSM6DSO_GYRO_Enable(&IMU);
 8001ec6:	4807      	ldr	r0, [pc, #28]	; (8001ee4 <INIT_IMU+0x5c>)
 8001ec8:	f7ff fe53 	bl	8001b72 <LSM6DSO_GYRO_Enable>
}
 8001ecc:	bf00      	nop
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20001e80 	.word	0x20001e80
 8001ed4:	080017fd 	.word	0x080017fd
 8001ed8:	080018e7 	.word	0x080018e7
 8001edc:	08001e09 	.word	0x08001e09
 8001ee0:	08001e49 	.word	0x08001e49
 8001ee4:	20001e50 	.word	0x20001e50
 8001ee8:	20001e9c 	.word	0x20001e9c

08001eec <Get_AXIS_GYRO__IMU>:



LSM6DSO_Axes_t Get_AXIS_GYRO__IMU(void){
 8001eec:	b590      	push	{r4, r7, lr}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
	LSM6DSO_Axes_t gyro_IMU;
	LSM6DSO_GYRO_GetAxes(&IMU, &gyro_IMU);
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4807      	ldr	r0, [pc, #28]	; (8001f18 <Get_AXIS_GYRO__IMU+0x2c>)
 8001efc:	f7ff fede 	bl	8001cbc <LSM6DSO_GYRO_GetAxes>
	return gyro_IMU;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	461c      	mov	r4, r3
 8001f04:	f107 030c 	add.w	r3, r7, #12
 8001f08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	371c      	adds	r7, #28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd90      	pop	{r4, r7, pc}
 8001f18:	20001e50 	.word	0x20001e50

08001f1c <Get_AXIS_ACC__IMU>:

LSM6DSO_Axes_t Get_AXIS_ACC__IMU(void){
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b087      	sub	sp, #28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
	LSM6DSO_Axes_t acc_IMU;
	LSM6DSO_ACC_GetAxes(&IMU, &acc_IMU);
 8001f24:	f107 030c 	add.w	r3, r7, #12
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4807      	ldr	r0, [pc, #28]	; (8001f48 <Get_AXIS_ACC__IMU+0x2c>)
 8001f2c:	f7ff fdca 	bl	8001ac4 <LSM6DSO_ACC_GetAxes>
	return acc_IMU;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	461c      	mov	r4, r3
 8001f34:	f107 030c 	add.w	r3, r7, #12
 8001f38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	371c      	adds	r7, #28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd90      	pop	{r4, r7, pc}
 8001f48:	20001e50 	.word	0x20001e50

08001f4c <lsm6dso_read_reg>:
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001f4c:	b590      	push	{r4, r7, lr}
 8001f4e:	b087      	sub	sp, #28
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	461a      	mov	r2, r3
 8001f58:	460b      	mov	r3, r1
 8001f5a:	72fb      	strb	r3, [r7, #11]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	685c      	ldr	r4, [r3, #4]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6898      	ldr	r0, [r3, #8]
 8001f68:	893b      	ldrh	r3, [r7, #8]
 8001f6a:	7af9      	ldrb	r1, [r7, #11]
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	47a0      	blx	r4
 8001f70:	6178      	str	r0, [r7, #20]

  return ret;
 8001f72:	697b      	ldr	r3, [r7, #20]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	371c      	adds	r7, #28
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd90      	pop	{r4, r7, pc}

08001f7c <lsm6dso_write_reg>:
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b087      	sub	sp, #28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	461a      	mov	r2, r3
 8001f88:	460b      	mov	r3, r1
 8001f8a:	72fb      	strb	r3, [r7, #11]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681c      	ldr	r4, [r3, #0]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6898      	ldr	r0, [r3, #8]
 8001f98:	893b      	ldrh	r3, [r7, #8]
 8001f9a:	7af9      	ldrb	r1, [r7, #11]
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	47a0      	blx	r4
 8001fa0:	6178      	str	r0, [r7, #20]

  return ret;
 8001fa2:	697b      	ldr	r3, [r7, #20]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	371c      	adds	r7, #28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd90      	pop	{r4, r7, pc}

08001fac <lsm6dso_xl_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8001fb8:	f107 0208 	add.w	r2, r7, #8
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	2110      	movs	r1, #16
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff ffc3 	bl	8001f4c <lsm6dso_read_reg>
 8001fc6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10f      	bne.n	8001fee <lsm6dso_xl_full_scale_set+0x42>
  {
    reg.fs_xl = (uint8_t) val;
 8001fce:	78fb      	ldrb	r3, [r7, #3]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	7a3b      	ldrb	r3, [r7, #8]
 8001fd8:	f362 0383 	bfi	r3, r2, #2, #2
 8001fdc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8001fde:	f107 0208 	add.w	r2, r7, #8
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	2110      	movs	r1, #16
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f7ff ffc8 	bl	8001f7c <lsm6dso_write_reg>
 8001fec:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001fee:	68fb      	ldr	r3, [r7, #12]
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	3710      	adds	r7, #16
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <lsm6dso_xl_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t *val)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002002:	f107 0208 	add.w	r2, r7, #8
 8002006:	2301      	movs	r3, #1
 8002008:	2110      	movs	r1, #16
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ff9e 	bl	8001f4c <lsm6dso_read_reg>
 8002010:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_xl)
 8002012:	7a3b      	ldrb	r3, [r7, #8]
 8002014:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b03      	cmp	r3, #3
 800201c:	d81a      	bhi.n	8002054 <lsm6dso_xl_full_scale_get+0x5c>
 800201e:	a201      	add	r2, pc, #4	; (adr r2, 8002024 <lsm6dso_xl_full_scale_get+0x2c>)
 8002020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002024:	08002035 	.word	0x08002035
 8002028:	0800203d 	.word	0x0800203d
 800202c:	08002045 	.word	0x08002045
 8002030:	0800204d 	.word	0x0800204d
  {
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
      break;
 800203a:	e00f      	b.n	800205c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
      break;
 8002042:	e00b      	b.n	800205c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2202      	movs	r2, #2
 8002048:	701a      	strb	r2, [r3, #0]
      break;
 800204a:	e007      	b.n	800205c <lsm6dso_xl_full_scale_get+0x64>

    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	2203      	movs	r2, #3
 8002050:	701a      	strb	r2, [r3, #0]
      break;
 8002052:	e003      	b.n	800205c <lsm6dso_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSO_2g;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]
      break;
 800205a:	bf00      	nop
  }

  return ret;
 800205c:	68fb      	ldr	r3, [r7, #12]
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop

08002068 <lsm6dso_xl_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t val)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8002078:	f107 030c 	add.w	r3, r7, #12
 800207c:	4619      	mov	r1, r3
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 fc90 	bl	80029a4 <lsm6dso_fsm_enable_get>
 8002084:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	2b00      	cmp	r3, #0
 800208a:	f040 80c4 	bne.w	8002216 <lsm6dso_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800208e:	7b3b      	ldrb	r3, [r7, #12]
 8002090:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002094:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8002096:	7b3b      	ldrb	r3, [r7, #12]
 8002098:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800209c:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800209e:	4313      	orrs	r3, r2
 80020a0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80020a2:	7b3b      	ldrb	r3, [r7, #12]
 80020a4:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80020a8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 80020aa:	4313      	orrs	r3, r2
 80020ac:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80020ae:	7b3b      	ldrb	r3, [r7, #12]
 80020b0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80020b4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 80020b6:	4313      	orrs	r3, r2
 80020b8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80020ba:	7b3b      	ldrb	r3, [r7, #12]
 80020bc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80020c0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 80020c2:	4313      	orrs	r3, r2
 80020c4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80020c6:	7b3b      	ldrb	r3, [r7, #12]
 80020c8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80020cc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 80020ce:	4313      	orrs	r3, r2
 80020d0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80020d2:	7b3b      	ldrb	r3, [r7, #12]
 80020d4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80020d8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 80020da:	4313      	orrs	r3, r2
 80020dc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80020de:	7b3b      	ldrb	r3, [r7, #12]
 80020e0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80020e4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80020e6:	4313      	orrs	r3, r2
 80020e8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80020ea:	7b7b      	ldrb	r3, [r7, #13]
 80020ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80020f0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80020f2:	4313      	orrs	r3, r2
 80020f4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80020f6:	7b7b      	ldrb	r3, [r7, #13]
 80020f8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80020fc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80020fe:	4313      	orrs	r3, r2
 8002100:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8002102:	7b7b      	ldrb	r3, [r7, #13]
 8002104:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002108:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800210a:	4313      	orrs	r3, r2
 800210c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 800210e:	7b7b      	ldrb	r3, [r7, #13]
 8002110:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002114:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 8002116:	4313      	orrs	r3, r2
 8002118:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800211a:	7b7b      	ldrb	r3, [r7, #13]
 800211c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002120:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 8002122:	4313      	orrs	r3, r2
 8002124:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 8002126:	7b7b      	ldrb	r3, [r7, #13]
 8002128:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800212c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 800212e:	4313      	orrs	r3, r2
 8002130:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8002132:	7b7b      	ldrb	r3, [r7, #13]
 8002134:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002138:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 800213a:	4313      	orrs	r3, r2
 800213c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 800213e:	7b7b      	ldrb	r3, [r7, #13]
 8002140:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002144:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8002146:	4313      	orrs	r3, r2
 8002148:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800214a:	2b01      	cmp	r3, #1
 800214c:	d163      	bne.n	8002216 <lsm6dso_xl_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 800214e:	f107 030b 	add.w	r3, r7, #11
 8002152:	4619      	mov	r1, r3
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f000 fc47 	bl	80029e8 <lsm6dso_fsm_data_rate_get>
 800215a:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d159      	bne.n	8002216 <lsm6dso_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 8002162:	7afb      	ldrb	r3, [r7, #11]
 8002164:	2b03      	cmp	r3, #3
 8002166:	d853      	bhi.n	8002210 <lsm6dso_xl_data_rate_set+0x1a8>
 8002168:	a201      	add	r2, pc, #4	; (adr r2, 8002170 <lsm6dso_xl_data_rate_set+0x108>)
 800216a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216e:	bf00      	nop
 8002170:	08002181 	.word	0x08002181
 8002174:	08002193 	.word	0x08002193
 8002178:	080021b1 	.word	0x080021b1
 800217c:	080021db 	.word	0x080021db
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_XL_ODR_OFF)
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d102      	bne.n	800218c <lsm6dso_xl_data_rate_set+0x124>
            {
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8002186:	2301      	movs	r3, #1
 8002188:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800218a:	e045      	b.n	8002218 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	75fb      	strb	r3, [r7, #23]
            break;
 8002190:	e042      	b.n	8002218 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 8002192:	78fb      	ldrb	r3, [r7, #3]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d102      	bne.n	800219e <lsm6dso_xl_data_rate_set+0x136>
            {
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8002198:	2302      	movs	r3, #2
 800219a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800219c:	e03c      	b.n	8002218 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 800219e:	78fb      	ldrb	r3, [r7, #3]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d102      	bne.n	80021aa <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 80021a4:	2302      	movs	r3, #2
 80021a6:	75fb      	strb	r3, [r7, #23]
            break;
 80021a8:	e036      	b.n	8002218 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	75fb      	strb	r3, [r7, #23]
            break;
 80021ae:	e033      	b.n	8002218 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d102      	bne.n	80021bc <lsm6dso_xl_data_rate_set+0x154>
            {
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80021b6:	2303      	movs	r3, #3
 80021b8:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80021ba:	e02d      	b.n	8002218 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d102      	bne.n	80021c8 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80021c2:	2303      	movs	r3, #3
 80021c4:	75fb      	strb	r3, [r7, #23]
            break;
 80021c6:	e027      	b.n	8002218 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 80021c8:	78fb      	ldrb	r3, [r7, #3]
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d102      	bne.n	80021d4 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 80021ce:	2303      	movs	r3, #3
 80021d0:	75fb      	strb	r3, [r7, #23]
            break;
 80021d2:	e021      	b.n	8002218 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80021d4:	78fb      	ldrb	r3, [r7, #3]
 80021d6:	75fb      	strb	r3, [r7, #23]
            break;
 80021d8:	e01e      	b.n	8002218 <lsm6dso_xl_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_XL_ODR_OFF)
 80021da:	78fb      	ldrb	r3, [r7, #3]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d102      	bne.n	80021e6 <lsm6dso_xl_data_rate_set+0x17e>
            {
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80021e0:	2304      	movs	r3, #4
 80021e2:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80021e4:	e018      	b.n	8002218 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_12Hz5)
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d102      	bne.n	80021f2 <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80021ec:	2304      	movs	r3, #4
 80021ee:	75fb      	strb	r3, [r7, #23]
            break;
 80021f0:	e012      	b.n	8002218 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_26Hz)
 80021f2:	78fb      	ldrb	r3, [r7, #3]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d102      	bne.n	80021fe <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 80021f8:	2304      	movs	r3, #4
 80021fa:	75fb      	strb	r3, [r7, #23]
            break;
 80021fc:	e00c      	b.n	8002218 <lsm6dso_xl_data_rate_set+0x1b0>
            else if (val == LSM6DSO_XL_ODR_52Hz)
 80021fe:	78fb      	ldrb	r3, [r7, #3]
 8002200:	2b03      	cmp	r3, #3
 8002202:	d102      	bne.n	800220a <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8002204:	2304      	movs	r3, #4
 8002206:	75fb      	strb	r3, [r7, #23]
            break;
 8002208:	e006      	b.n	8002218 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	75fb      	strb	r3, [r7, #23]
            break;
 800220e:	e003      	b.n	8002218 <lsm6dso_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	75fb      	strb	r3, [r7, #23]
            break;
 8002214:	e000      	b.n	8002218 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8002216:	bf00      	nop
    }
  }

  if (ret == 0)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d107      	bne.n	800222e <lsm6dso_xl_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800221e:	f107 0208 	add.w	r2, r7, #8
 8002222:	2301      	movs	r3, #1
 8002224:	2110      	movs	r1, #16
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7ff fe90 	bl	8001f4c <lsm6dso_read_reg>
 800222c:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10f      	bne.n	8002254 <lsm6dso_xl_data_rate_set+0x1ec>
  {
    reg.odr_xl = (uint8_t) odr_xl;
 8002234:	7dfb      	ldrb	r3, [r7, #23]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	b2da      	uxtb	r2, r3
 800223c:	7a3b      	ldrb	r3, [r7, #8]
 800223e:	f362 1307 	bfi	r3, r2, #4, #4
 8002242:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 8002244:	f107 0208 	add.w	r2, r7, #8
 8002248:	2301      	movs	r3, #1
 800224a:	2110      	movs	r1, #16
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff fe95 	bl	8001f7c <lsm6dso_write_reg>
 8002252:	6138      	str	r0, [r7, #16]
  }

  return ret;
 8002254:	693b      	ldr	r3, [r7, #16]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop

08002260 <lsm6dso_xl_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_xl_t *val)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t *)&reg, 1);
 800226a:	f107 0208 	add.w	r2, r7, #8
 800226e:	2301      	movs	r3, #1
 8002270:	2110      	movs	r1, #16
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7ff fe6a 	bl	8001f4c <lsm6dso_read_reg>
 8002278:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl)
 800227a:	7a3b      	ldrb	r3, [r7, #8]
 800227c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b0b      	cmp	r3, #11
 8002284:	d84a      	bhi.n	800231c <lsm6dso_xl_data_rate_get+0xbc>
 8002286:	a201      	add	r2, pc, #4	; (adr r2, 800228c <lsm6dso_xl_data_rate_get+0x2c>)
 8002288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228c:	080022bd 	.word	0x080022bd
 8002290:	080022c5 	.word	0x080022c5
 8002294:	080022cd 	.word	0x080022cd
 8002298:	080022d5 	.word	0x080022d5
 800229c:	080022dd 	.word	0x080022dd
 80022a0:	080022e5 	.word	0x080022e5
 80022a4:	080022ed 	.word	0x080022ed
 80022a8:	080022f5 	.word	0x080022f5
 80022ac:	080022fd 	.word	0x080022fd
 80022b0:	08002305 	.word	0x08002305
 80022b4:	0800230d 	.word	0x0800230d
 80022b8:	08002315 	.word	0x08002315
  {
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
      break;
 80022c2:	e02f      	b.n	8002324 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	2201      	movs	r2, #1
 80022c8:	701a      	strb	r2, [r3, #0]
      break;
 80022ca:	e02b      	b.n	8002324 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	2202      	movs	r2, #2
 80022d0:	701a      	strb	r2, [r3, #0]
      break;
 80022d2:	e027      	b.n	8002324 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	2203      	movs	r2, #3
 80022d8:	701a      	strb	r2, [r3, #0]
      break;
 80022da:	e023      	b.n	8002324 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	2204      	movs	r2, #4
 80022e0:	701a      	strb	r2, [r3, #0]
      break;
 80022e2:	e01f      	b.n	8002324 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	2205      	movs	r2, #5
 80022e8:	701a      	strb	r2, [r3, #0]
      break;
 80022ea:	e01b      	b.n	8002324 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	2206      	movs	r2, #6
 80022f0:	701a      	strb	r2, [r3, #0]
      break;
 80022f2:	e017      	b.n	8002324 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	2207      	movs	r2, #7
 80022f8:	701a      	strb	r2, [r3, #0]
      break;
 80022fa:	e013      	b.n	8002324 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	2208      	movs	r2, #8
 8002300:	701a      	strb	r2, [r3, #0]
      break;
 8002302:	e00f      	b.n	8002324 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	2209      	movs	r2, #9
 8002308:	701a      	strb	r2, [r3, #0]
      break;
 800230a:	e00b      	b.n	8002324 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	220a      	movs	r2, #10
 8002310:	701a      	strb	r2, [r3, #0]
      break;
 8002312:	e007      	b.n	8002324 <lsm6dso_xl_data_rate_get+0xc4>

    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	220b      	movs	r2, #11
 8002318:	701a      	strb	r2, [r3, #0]
      break;
 800231a:	e003      	b.n	8002324 <lsm6dso_xl_data_rate_get+0xc4>

    default:
      *val = LSM6DSO_XL_ODR_OFF;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
      break;
 8002322:	bf00      	nop
  }

  return ret;
 8002324:	68fb      	ldr	r3, [r7, #12]
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop

08002330 <lsm6dso_gy_full_scale_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t val)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 800233c:	f107 0208 	add.w	r2, r7, #8
 8002340:	2301      	movs	r3, #1
 8002342:	2111      	movs	r1, #17
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff fe01 	bl	8001f4c <lsm6dso_read_reg>
 800234a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10f      	bne.n	8002372 <lsm6dso_gy_full_scale_set+0x42>
  {
    reg.fs_g = (uint8_t) val;
 8002352:	78fb      	ldrb	r3, [r7, #3]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	b2da      	uxtb	r2, r3
 800235a:	7a3b      	ldrb	r3, [r7, #8]
 800235c:	f362 0343 	bfi	r3, r2, #1, #3
 8002360:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002362:	f107 0208 	add.w	r2, r7, #8
 8002366:	2301      	movs	r3, #1
 8002368:	2111      	movs	r1, #17
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff fe06 	bl	8001f7c <lsm6dso_write_reg>
 8002370:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002372:	68fb      	ldr	r3, [r7, #12]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <lsm6dso_gy_full_scale_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_g_t *val)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002386:	f107 0208 	add.w	r2, r7, #8
 800238a:	2301      	movs	r3, #1
 800238c:	2111      	movs	r1, #17
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff fddc 	bl	8001f4c <lsm6dso_read_reg>
 8002394:	60f8      	str	r0, [r7, #12]

  switch (reg.fs_g)
 8002396:	7a3b      	ldrb	r3, [r7, #8]
 8002398:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d824      	bhi.n	80023ec <lsm6dso_gy_full_scale_get+0x70>
 80023a2:	a201      	add	r2, pc, #4	; (adr r2, 80023a8 <lsm6dso_gy_full_scale_get+0x2c>)
 80023a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a8:	080023c5 	.word	0x080023c5
 80023ac:	080023cd 	.word	0x080023cd
 80023b0:	080023d5 	.word	0x080023d5
 80023b4:	080023ed 	.word	0x080023ed
 80023b8:	080023dd 	.word	0x080023dd
 80023bc:	080023ed 	.word	0x080023ed
 80023c0:	080023e5 	.word	0x080023e5
  {
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
      break;
 80023ca:	e013      	b.n	80023f4 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2201      	movs	r2, #1
 80023d0:	701a      	strb	r2, [r3, #0]
      break;
 80023d2:	e00f      	b.n	80023f4 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2202      	movs	r2, #2
 80023d8:	701a      	strb	r2, [r3, #0]
      break;
 80023da:	e00b      	b.n	80023f4 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2204      	movs	r2, #4
 80023e0:	701a      	strb	r2, [r3, #0]
      break;
 80023e2:	e007      	b.n	80023f4 <lsm6dso_gy_full_scale_get+0x78>

    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2206      	movs	r2, #6
 80023e8:	701a      	strb	r2, [r3, #0]
      break;
 80023ea:	e003      	b.n	80023f4 <lsm6dso_gy_full_scale_get+0x78>

    default:
      *val = LSM6DSO_250dps;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
      break;
 80023f2:	bf00      	nop
  }

  return ret;
 80023f4:	68fb      	ldr	r3, [r7, #12]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop

08002400 <lsm6dso_gy_data_rate_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t val)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8002410:	f107 030c 	add.w	r3, r7, #12
 8002414:	4619      	mov	r1, r3
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f000 fac4 	bl	80029a4 <lsm6dso_fsm_enable_get>
 800241c:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	2b00      	cmp	r3, #0
 8002422:	f040 80c4 	bne.w	80025ae <lsm6dso_gy_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002426:	7b3b      	ldrb	r3, [r7, #12]
 8002428:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800242c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 800242e:	7b3b      	ldrb	r3, [r7, #12]
 8002430:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002434:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002436:	4313      	orrs	r3, r2
 8002438:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800243a:	7b3b      	ldrb	r3, [r7, #12]
 800243c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002440:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8002442:	4313      	orrs	r3, r2
 8002444:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 8002446:	7b3b      	ldrb	r3, [r7, #12]
 8002448:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800244c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800244e:	4313      	orrs	r3, r2
 8002450:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8002452:	7b3b      	ldrb	r3, [r7, #12]
 8002454:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002458:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800245a:	4313      	orrs	r3, r2
 800245c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 800245e:	7b3b      	ldrb	r3, [r7, #12]
 8002460:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002464:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8002466:	4313      	orrs	r3, r2
 8002468:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800246a:	7b3b      	ldrb	r3, [r7, #12]
 800246c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002470:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8002472:	4313      	orrs	r3, r2
 8002474:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 8002476:	7b3b      	ldrb	r3, [r7, #12]
 8002478:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800247c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800247e:	4313      	orrs	r3, r2
 8002480:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8002482:	7b7b      	ldrb	r3, [r7, #13]
 8002484:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002488:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800248a:	4313      	orrs	r3, r2
 800248c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 800248e:	7b7b      	ldrb	r3, [r7, #13]
 8002490:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002494:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 8002496:	4313      	orrs	r3, r2
 8002498:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 800249a:	7b7b      	ldrb	r3, [r7, #13]
 800249c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80024a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80024a2:	4313      	orrs	r3, r2
 80024a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80024a6:	7b7b      	ldrb	r3, [r7, #13]
 80024a8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80024ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80024ae:	4313      	orrs	r3, r2
 80024b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80024b2:	7b7b      	ldrb	r3, [r7, #13]
 80024b4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80024b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80024ba:	4313      	orrs	r3, r2
 80024bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80024be:	7b7b      	ldrb	r3, [r7, #13]
 80024c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80024c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80024c6:	4313      	orrs	r3, r2
 80024c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80024ca:	7b7b      	ldrb	r3, [r7, #13]
 80024cc:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80024d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80024d2:	4313      	orrs	r3, r2
 80024d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80024d6:	7b7b      	ldrb	r3, [r7, #13]
 80024d8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80024dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80024de:	4313      	orrs	r3, r2
 80024e0:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d163      	bne.n	80025ae <lsm6dso_gy_data_rate_set+0x1ae>
    {
      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80024e6:	f107 030b 	add.w	r3, r7, #11
 80024ea:	4619      	mov	r1, r3
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 fa7b 	bl	80029e8 <lsm6dso_fsm_data_rate_get>
 80024f2:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d159      	bne.n	80025ae <lsm6dso_gy_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 80024fa:	7afb      	ldrb	r3, [r7, #11]
 80024fc:	2b03      	cmp	r3, #3
 80024fe:	d853      	bhi.n	80025a8 <lsm6dso_gy_data_rate_set+0x1a8>
 8002500:	a201      	add	r2, pc, #4	; (adr r2, 8002508 <lsm6dso_gy_data_rate_set+0x108>)
 8002502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002506:	bf00      	nop
 8002508:	08002519 	.word	0x08002519
 800250c:	0800252b 	.word	0x0800252b
 8002510:	08002549 	.word	0x08002549
 8002514:	08002573 	.word	0x08002573
        {
          case LSM6DSO_ODR_FSM_12Hz5:
            if (val == LSM6DSO_GY_ODR_OFF)
 8002518:	78fb      	ldrb	r3, [r7, #3]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d102      	bne.n	8002524 <lsm6dso_gy_data_rate_set+0x124>
            {
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 800251e:	2301      	movs	r3, #1
 8002520:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8002522:	e045      	b.n	80025b0 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8002524:	78fb      	ldrb	r3, [r7, #3]
 8002526:	75fb      	strb	r3, [r7, #23]
            break;
 8002528:	e042      	b.n	80025b0 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_26Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 800252a:	78fb      	ldrb	r3, [r7, #3]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d102      	bne.n	8002536 <lsm6dso_gy_data_rate_set+0x136>
            {
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8002530:	2302      	movs	r3, #2
 8002532:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8002534:	e03c      	b.n	80025b0 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8002536:	78fb      	ldrb	r3, [r7, #3]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d102      	bne.n	8002542 <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 800253c:	2302      	movs	r3, #2
 800253e:	75fb      	strb	r3, [r7, #23]
            break;
 8002540:	e036      	b.n	80025b0 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8002542:	78fb      	ldrb	r3, [r7, #3]
 8002544:	75fb      	strb	r3, [r7, #23]
            break;
 8002546:	e033      	b.n	80025b0 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_52Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8002548:	78fb      	ldrb	r3, [r7, #3]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <lsm6dso_gy_data_rate_set+0x154>
            {
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 800254e:	2303      	movs	r3, #3
 8002550:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 8002552:	e02d      	b.n	80025b0 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 8002554:	78fb      	ldrb	r3, [r7, #3]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d102      	bne.n	8002560 <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 800255a:	2303      	movs	r3, #3
 800255c:	75fb      	strb	r3, [r7, #23]
            break;
 800255e:	e027      	b.n	80025b0 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 8002560:	78fb      	ldrb	r3, [r7, #3]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d102      	bne.n	800256c <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8002566:	2303      	movs	r3, #3
 8002568:	75fb      	strb	r3, [r7, #23]
            break;
 800256a:	e021      	b.n	80025b0 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800256c:	78fb      	ldrb	r3, [r7, #3]
 800256e:	75fb      	strb	r3, [r7, #23]
            break;
 8002570:	e01e      	b.n	80025b0 <lsm6dso_gy_data_rate_set+0x1b0>

          case LSM6DSO_ODR_FSM_104Hz:
            if (val == LSM6DSO_GY_ODR_OFF)
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d102      	bne.n	800257e <lsm6dso_gy_data_rate_set+0x17e>
            {
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002578:	2304      	movs	r3, #4
 800257a:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_gy = val;
            }

            break;
 800257c:	e018      	b.n	80025b0 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_12Hz5)
 800257e:	78fb      	ldrb	r3, [r7, #3]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d102      	bne.n	800258a <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002584:	2304      	movs	r3, #4
 8002586:	75fb      	strb	r3, [r7, #23]
            break;
 8002588:	e012      	b.n	80025b0 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_26Hz)
 800258a:	78fb      	ldrb	r3, [r7, #3]
 800258c:	2b02      	cmp	r3, #2
 800258e:	d102      	bne.n	8002596 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002590:	2304      	movs	r3, #4
 8002592:	75fb      	strb	r3, [r7, #23]
            break;
 8002594:	e00c      	b.n	80025b0 <lsm6dso_gy_data_rate_set+0x1b0>
            else if (val == LSM6DSO_GY_ODR_52Hz)
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	2b03      	cmp	r3, #3
 800259a:	d102      	bne.n	80025a2 <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800259c:	2304      	movs	r3, #4
 800259e:	75fb      	strb	r3, [r7, #23]
            break;
 80025a0:	e006      	b.n	80025b0 <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80025a2:	78fb      	ldrb	r3, [r7, #3]
 80025a4:	75fb      	strb	r3, [r7, #23]
            break;
 80025a6:	e003      	b.n	80025b0 <lsm6dso_gy_data_rate_set+0x1b0>

          default:
            odr_gy = val;
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	75fb      	strb	r3, [r7, #23]
            break;
 80025ac:	e000      	b.n	80025b0 <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 80025ae:	bf00      	nop
    }
  }

  if (ret == 0)
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d107      	bne.n	80025c6 <lsm6dso_gy_data_rate_set+0x1c6>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80025b6:	f107 0208 	add.w	r2, r7, #8
 80025ba:	2301      	movs	r3, #1
 80025bc:	2111      	movs	r1, #17
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff fcc4 	bl	8001f4c <lsm6dso_read_reg>
 80025c4:	6138      	str	r0, [r7, #16]
  }

  if (ret == 0)
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10f      	bne.n	80025ec <lsm6dso_gy_data_rate_set+0x1ec>
  {
    reg.odr_g = (uint8_t) odr_gy;
 80025cc:	7dfb      	ldrb	r3, [r7, #23]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	7a3b      	ldrb	r3, [r7, #8]
 80025d6:	f362 1307 	bfi	r3, r2, #4, #4
 80025da:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 80025dc:	f107 0208 	add.w	r2, r7, #8
 80025e0:	2301      	movs	r3, #1
 80025e2:	2111      	movs	r1, #17
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff fcc9 	bl	8001f7c <lsm6dso_write_reg>
 80025ea:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80025ec:	693b      	ldr	r3, [r7, #16]
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop

080025f8 <lsm6dso_gy_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx,
                                 lsm6dso_odr_g_t *val)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t *)&reg, 1);
 8002602:	f107 0208 	add.w	r2, r7, #8
 8002606:	2301      	movs	r3, #1
 8002608:	2111      	movs	r1, #17
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff fc9e 	bl	8001f4c <lsm6dso_read_reg>
 8002610:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_g)
 8002612:	7a3b      	ldrb	r3, [r7, #8]
 8002614:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b0a      	cmp	r3, #10
 800261c:	d844      	bhi.n	80026a8 <lsm6dso_gy_data_rate_get+0xb0>
 800261e:	a201      	add	r2, pc, #4	; (adr r2, 8002624 <lsm6dso_gy_data_rate_get+0x2c>)
 8002620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002624:	08002651 	.word	0x08002651
 8002628:	08002659 	.word	0x08002659
 800262c:	08002661 	.word	0x08002661
 8002630:	08002669 	.word	0x08002669
 8002634:	08002671 	.word	0x08002671
 8002638:	08002679 	.word	0x08002679
 800263c:	08002681 	.word	0x08002681
 8002640:	08002689 	.word	0x08002689
 8002644:	08002691 	.word	0x08002691
 8002648:	08002699 	.word	0x08002699
 800264c:	080026a1 	.word	0x080026a1
  {
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
      break;
 8002656:	e02b      	b.n	80026b0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	2201      	movs	r2, #1
 800265c:	701a      	strb	r2, [r3, #0]
      break;
 800265e:	e027      	b.n	80026b0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	2202      	movs	r2, #2
 8002664:	701a      	strb	r2, [r3, #0]
      break;
 8002666:	e023      	b.n	80026b0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2203      	movs	r2, #3
 800266c:	701a      	strb	r2, [r3, #0]
      break;
 800266e:	e01f      	b.n	80026b0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	2204      	movs	r2, #4
 8002674:	701a      	strb	r2, [r3, #0]
      break;
 8002676:	e01b      	b.n	80026b0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	2205      	movs	r2, #5
 800267c:	701a      	strb	r2, [r3, #0]
      break;
 800267e:	e017      	b.n	80026b0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	2206      	movs	r2, #6
 8002684:	701a      	strb	r2, [r3, #0]
      break;
 8002686:	e013      	b.n	80026b0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	2207      	movs	r2, #7
 800268c:	701a      	strb	r2, [r3, #0]
      break;
 800268e:	e00f      	b.n	80026b0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	2208      	movs	r2, #8
 8002694:	701a      	strb	r2, [r3, #0]
      break;
 8002696:	e00b      	b.n	80026b0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	2209      	movs	r2, #9
 800269c:	701a      	strb	r2, [r3, #0]
      break;
 800269e:	e007      	b.n	80026b0 <lsm6dso_gy_data_rate_get+0xb8>

    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	220a      	movs	r2, #10
 80026a4:	701a      	strb	r2, [r3, #0]
      break;
 80026a6:	e003      	b.n	80026b0 <lsm6dso_gy_data_rate_get+0xb8>

    default:
      *val = LSM6DSO_GY_ODR_OFF;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2200      	movs	r2, #0
 80026ac:	701a      	strb	r2, [r3, #0]
      break;
 80026ae:	bf00      	nop
  }

  return ret;
 80026b0:	68fb      	ldr	r3, [r7, #12]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop

080026bc <lsm6dso_block_data_update_set>:
  * @param  val      change the values of bdu in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80026c8:	f107 0208 	add.w	r2, r7, #8
 80026cc:	2301      	movs	r3, #1
 80026ce:	2112      	movs	r1, #18
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff fc3b 	bl	8001f4c <lsm6dso_read_reg>
 80026d6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10f      	bne.n	80026fe <lsm6dso_block_data_update_set+0x42>
  {
    reg.bdu = val;
 80026de:	78fb      	ldrb	r3, [r7, #3]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	7a3b      	ldrb	r3, [r7, #8]
 80026e8:	f362 1386 	bfi	r3, r2, #6, #1
 80026ec:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80026ee:	f107 0208 	add.w	r2, r7, #8
 80026f2:	2301      	movs	r3, #1
 80026f4:	2112      	movs	r1, #18
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff fc40 	bl	8001f7c <lsm6dso_write_reg>
 80026fc:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80026fe:	68fb      	ldr	r3, [r7, #12]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <lsm6dso_angular_rate_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8002712:	f107 020c 	add.w	r2, r7, #12
 8002716:	2306      	movs	r3, #6
 8002718:	2122      	movs	r1, #34	; 0x22
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff fc16 	bl	8001f4c <lsm6dso_read_reg>
 8002720:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002722:	7b7b      	ldrb	r3, [r7, #13]
 8002724:	b21a      	sxth	r2, r3
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002730:	b29b      	uxth	r3, r3
 8002732:	021b      	lsls	r3, r3, #8
 8002734:	b29a      	uxth	r2, r3
 8002736:	7b3b      	ldrb	r3, [r7, #12]
 8002738:	b29b      	uxth	r3, r3
 800273a:	4413      	add	r3, r2
 800273c:	b29b      	uxth	r3, r3
 800273e:	b21a      	sxth	r2, r3
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8002744:	7bfa      	ldrb	r2, [r7, #15]
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	3302      	adds	r3, #2
 800274a:	b212      	sxth	r2, r2
 800274c:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	3302      	adds	r3, #2
 8002752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002756:	b29b      	uxth	r3, r3
 8002758:	021b      	lsls	r3, r3, #8
 800275a:	b29a      	uxth	r2, r3
 800275c:	7bbb      	ldrb	r3, [r7, #14]
 800275e:	b29b      	uxth	r3, r3
 8002760:	4413      	add	r3, r2
 8002762:	b29a      	uxth	r2, r3
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	3302      	adds	r3, #2
 8002768:	b212      	sxth	r2, r2
 800276a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 800276c:	7c7a      	ldrb	r2, [r7, #17]
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	3304      	adds	r3, #4
 8002772:	b212      	sxth	r2, r2
 8002774:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	3304      	adds	r3, #4
 800277a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800277e:	b29b      	uxth	r3, r3
 8002780:	021b      	lsls	r3, r3, #8
 8002782:	b29a      	uxth	r2, r3
 8002784:	7c3b      	ldrb	r3, [r7, #16]
 8002786:	b29b      	uxth	r3, r3
 8002788:	4413      	add	r3, r2
 800278a:	b29a      	uxth	r2, r3
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	3304      	adds	r3, #4
 8002790:	b212      	sxth	r2, r2
 8002792:	801a      	strh	r2, [r3, #0]

  return ret;
 8002794:	697b      	ldr	r3, [r7, #20]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <lsm6dso_acceleration_raw_get>:
  * @param  buff     buffer that stores data read
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
 80027a6:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 80027a8:	f107 020c 	add.w	r2, r7, #12
 80027ac:	2306      	movs	r3, #6
 80027ae:	2128      	movs	r1, #40	; 0x28
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff fbcb 	bl	8001f4c <lsm6dso_read_reg>
 80027b6:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 80027b8:	7b7b      	ldrb	r3, [r7, #13]
 80027ba:	b21a      	sxth	r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	021b      	lsls	r3, r3, #8
 80027ca:	b29a      	uxth	r2, r3
 80027cc:	7b3b      	ldrb	r3, [r7, #12]
 80027ce:	b29b      	uxth	r3, r3
 80027d0:	4413      	add	r3, r2
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	b21a      	sxth	r2, r3
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80027da:	7bfa      	ldrb	r2, [r7, #15]
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	3302      	adds	r3, #2
 80027e0:	b212      	sxth	r2, r2
 80027e2:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	3302      	adds	r3, #2
 80027e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	021b      	lsls	r3, r3, #8
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	7bbb      	ldrb	r3, [r7, #14]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	4413      	add	r3, r2
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	3302      	adds	r3, #2
 80027fe:	b212      	sxth	r2, r2
 8002800:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8002802:	7c7a      	ldrb	r2, [r7, #17]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	3304      	adds	r3, #4
 8002808:	b212      	sxth	r2, r2
 800280a:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	3304      	adds	r3, #4
 8002810:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002814:	b29b      	uxth	r3, r3
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	b29a      	uxth	r2, r3
 800281a:	7c3b      	ldrb	r3, [r7, #16]
 800281c:	b29b      	uxth	r3, r3
 800281e:	4413      	add	r3, r2
 8002820:	b29a      	uxth	r2, r3
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	3304      	adds	r3, #4
 8002826:	b212      	sxth	r2, r2
 8002828:	801a      	strh	r2, [r3, #0]

  return ret;
 800282a:	697b      	ldr	r3, [r7, #20]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3718      	adds	r7, #24
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <lsm6dso_mem_bank_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx,
                             lsm6dso_reg_access_t val)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	460b      	mov	r3, r1
 800283e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8002840:	f107 0208 	add.w	r2, r7, #8
 8002844:	2301      	movs	r3, #1
 8002846:	2101      	movs	r1, #1
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff fb7f 	bl	8001f4c <lsm6dso_read_reg>
 800284e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d10f      	bne.n	8002876 <lsm6dso_mem_bank_set+0x42>
  {
    reg.reg_access = (uint8_t)val;
 8002856:	78fb      	ldrb	r3, [r7, #3]
 8002858:	f003 0303 	and.w	r3, r3, #3
 800285c:	b2da      	uxtb	r2, r3
 800285e:	7a3b      	ldrb	r3, [r7, #8]
 8002860:	f362 1387 	bfi	r3, r2, #6, #2
 8002864:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t *)&reg, 1);
 8002866:	f107 0208 	add.w	r2, r7, #8
 800286a:	2301      	movs	r3, #1
 800286c:	2101      	movs	r1, #1
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff fb84 	bl	8001f7c <lsm6dso_write_reg>
 8002874:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002876:	68fb      	ldr	r3, [r7, #12]
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <lsm6dso_auto_increment_set>:
  * @param  val      change the values of if_inc in reg CTRL3_C
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 800288c:	f107 0208 	add.w	r2, r7, #8
 8002890:	2301      	movs	r3, #1
 8002892:	2112      	movs	r1, #18
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff fb59 	bl	8001f4c <lsm6dso_read_reg>
 800289a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10f      	bne.n	80028c2 <lsm6dso_auto_increment_set+0x42>
  {
    reg.if_inc = val;
 80028a2:	78fb      	ldrb	r3, [r7, #3]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	7a3b      	ldrb	r3, [r7, #8]
 80028ac:	f362 0382 	bfi	r3, r2, #2, #1
 80028b0:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t *)&reg, 1);
 80028b2:	f107 0208 	add.w	r2, r7, #8
 80028b6:	2301      	movs	r3, #1
 80028b8:	2112      	movs	r1, #18
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff fb5e 	bl	8001f7c <lsm6dso_write_reg>
 80028c0:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80028c2:	68fb      	ldr	r3, [r7, #12]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <lsm6dso_i3c_disable_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx,
                                lsm6dso_i3c_disable_t val)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
 80028d4:	460b      	mov	r3, r1
 80028d6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 80028d8:	f107 020c 	add.w	r2, r7, #12
 80028dc:	2301      	movs	r3, #1
 80028de:	2118      	movs	r1, #24
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f7ff fb33 	bl	8001f4c <lsm6dso_read_reg>
 80028e6:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d111      	bne.n	8002912 <lsm6dso_i3c_disable_set+0x46>
  {
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80028ee:	78fb      	ldrb	r3, [r7, #3]
 80028f0:	09db      	lsrs	r3, r3, #7
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	7b3b      	ldrb	r3, [r7, #12]
 80028fc:	f362 0341 	bfi	r3, r2, #1, #1
 8002900:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t *)&ctrl9_xl, 1);
 8002902:	f107 020c 	add.w	r2, r7, #12
 8002906:	2301      	movs	r3, #1
 8002908:	2118      	movs	r1, #24
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff fb36 	bl	8001f7c <lsm6dso_write_reg>
 8002910:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d107      	bne.n	8002928 <lsm6dso_i3c_disable_set+0x5c>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8002918:	f107 0210 	add.w	r2, r7, #16
 800291c:	2301      	movs	r3, #1
 800291e:	2162      	movs	r1, #98	; 0x62
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff fb13 	bl	8001f4c <lsm6dso_read_reg>
 8002926:	6178      	str	r0, [r7, #20]
                           (uint8_t *)&i3c_bus_avb, 1);
  }

  if (ret == 0)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10f      	bne.n	800294e <lsm6dso_i3c_disable_set+0x82>
  {
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 800292e:	78fb      	ldrb	r3, [r7, #3]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	b2da      	uxtb	r2, r3
 8002936:	7c3b      	ldrb	r3, [r7, #16]
 8002938:	f362 03c4 	bfi	r3, r2, #3, #2
 800293c:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 800293e:	f107 0210 	add.w	r2, r7, #16
 8002942:	2301      	movs	r3, #1
 8002944:	2162      	movs	r1, #98	; 0x62
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff fb18 	bl	8001f7c <lsm6dso_write_reg>
 800294c:	6178      	str	r0, [r7, #20]
                            (uint8_t *)&i3c_bus_avb, 1);
  }

  return ret;
 800294e:	697b      	ldr	r3, [r7, #20]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3718      	adds	r7, #24
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <lsm6dso_fifo_mode_set>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dso_fifo_mode_t val)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 8002964:	f107 0208 	add.w	r2, r7, #8
 8002968:	2301      	movs	r3, #1
 800296a:	210a      	movs	r1, #10
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff faed 	bl	8001f4c <lsm6dso_read_reg>
 8002972:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d10f      	bne.n	800299a <lsm6dso_fifo_mode_set+0x42>
  {
    reg.fifo_mode = (uint8_t)val;
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	b2da      	uxtb	r2, r3
 8002982:	7a3b      	ldrb	r3, [r7, #8]
 8002984:	f362 0302 	bfi	r3, r2, #0, #3
 8002988:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t *)&reg, 1);
 800298a:	f107 0208 	add.w	r2, r7, #8
 800298e:	2301      	movs	r3, #1
 8002990:	210a      	movs	r1, #10
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff faf2 	bl	8001f7c <lsm6dso_write_reg>
 8002998:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800299a:	68fb      	ldr	r3, [r7, #12]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <lsm6dso_fsm_enable_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80029ae:	2102      	movs	r1, #2
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f7ff ff3f 	bl	8002834 <lsm6dso_mem_bank_set>
 80029b6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <lsm6dso_fsm_enable_get+0x28>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t *) val, 2);
 80029be:	2302      	movs	r3, #2
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	2146      	movs	r1, #70	; 0x46
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff fac1 	bl	8001f4c <lsm6dso_read_reg>
 80029ca:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d104      	bne.n	80029dc <lsm6dso_fsm_enable_get+0x38>
  {
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80029d2:	2100      	movs	r1, #0
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff ff2d 	bl	8002834 <lsm6dso_mem_bank_set>
 80029da:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80029dc:	68fb      	ldr	r3, [r7, #12]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <lsm6dso_fsm_data_rate_get>:
  * @retval             interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                  lsm6dso_fsm_odr_t *val)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80029f2:	2102      	movs	r1, #2
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff1d 	bl	8002834 <lsm6dso_mem_bank_set>
 80029fa:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d107      	bne.n	8002a12 <lsm6dso_fsm_data_rate_get+0x2a>
  {
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8002a02:	f107 0208 	add.w	r2, r7, #8
 8002a06:	2301      	movs	r3, #1
 8002a08:	215f      	movs	r1, #95	; 0x5f
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff fa9e 	bl	8001f4c <lsm6dso_read_reg>
 8002a10:	60f8      	str	r0, [r7, #12]
                           (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d12a      	bne.n	8002a6e <lsm6dso_fsm_data_rate_get+0x86>
  {
    switch (reg.fsm_odr)
 8002a18:	7a3b      	ldrb	r3, [r7, #8]
 8002a1a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d81b      	bhi.n	8002a5c <lsm6dso_fsm_data_rate_get+0x74>
 8002a24:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <lsm6dso_fsm_data_rate_get+0x44>)
 8002a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2a:	bf00      	nop
 8002a2c:	08002a3d 	.word	0x08002a3d
 8002a30:	08002a45 	.word	0x08002a45
 8002a34:	08002a4d 	.word	0x08002a4d
 8002a38:	08002a55 	.word	0x08002a55
    {
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	701a      	strb	r2, [r3, #0]
        break;
 8002a42:	e00f      	b.n	8002a64 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2201      	movs	r2, #1
 8002a48:	701a      	strb	r2, [r3, #0]
        break;
 8002a4a:	e00b      	b.n	8002a64 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	701a      	strb	r2, [r3, #0]
        break;
 8002a52:	e007      	b.n	8002a64 <lsm6dso_fsm_data_rate_get+0x7c>

      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2203      	movs	r2, #3
 8002a58:	701a      	strb	r2, [r3, #0]
        break;
 8002a5a:	e003      	b.n	8002a64 <lsm6dso_fsm_data_rate_get+0x7c>

      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	701a      	strb	r2, [r3, #0]
        break;
 8002a62:	bf00      	nop
    }

    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8002a64:	2100      	movs	r1, #0
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff fee4 	bl	8002834 <lsm6dso_mem_bank_set>
 8002a6c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a78:	b5b0      	push	{r4, r5, r7, lr}
 8002a7a:	b08e      	sub	sp, #56	; 0x38
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a7e:	f000 fe19 	bl	80036b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a82:	f000 f831 	bl	8002ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a86:	f000 fa4b 	bl	8002f20 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002a8a:	f000 f8a3 	bl	8002bd4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002a8e:	f000 fa17 	bl	8002ec0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8002a92:	f000 f93b 	bl	8002d0c <MX_SPI2_Init>
  MX_TIM2_Init();
 8002a96:	f000 f977 	bl	8002d88 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002a9a:	f000 f9c3 	bl	8002e24 <MX_TIM3_Init>
  MX_CRC_Init();
 8002a9e:	f000 f877 	bl	8002b90 <MX_CRC_Init>
  MX_RTC_Init();
 8002aa2:	f000 f8d7 	bl	8002c54 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  DRV_Init();
 8002aa6:	f7fe fc4d 	bl	8001344 <DRV_Init>
  Fusion_datas_init();
 8002aaa:	f7fe fb71 	bl	8001190 <Fusion_datas_init>

  //INTERRUPTS
  HAL_TIM_Base_Start_IT(&htim3);
 8002aae:	480b      	ldr	r0, [pc, #44]	; (8002adc <main+0x64>)
 8002ab0:	f004 fa48 	bl	8006f44 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8002ab4:	480a      	ldr	r0, [pc, #40]	; (8002ae0 <main+0x68>)
 8002ab6:	f004 fa45 	bl	8006f44 <HAL_TIM_Base_Start_IT>
	{
    /* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		//pwm_sine();
		datas_fusion = Fusion_datas();
 8002aba:	4c0a      	ldr	r4, [pc, #40]	; (8002ae4 <main+0x6c>)
 8002abc:	463b      	mov	r3, r7
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f7fe fba0 	bl	8001204 <Fusion_datas>
 8002ac4:	4625      	mov	r5, r4
 8002ac6:	463c      	mov	r4, r7
 8002ac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ad2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	602b      	str	r3, [r5, #0]
 8002ad8:	e7ef      	b.n	8002aba <main+0x42>
 8002ada:	bf00      	nop
 8002adc:	20001ffc 	.word	0x20001ffc
 8002ae0:	20001fb0 	.word	0x20001fb0
 8002ae4:	200020f4 	.word	0x200020f4

08002ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b096      	sub	sp, #88	; 0x58
 8002aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aee:	f107 0314 	add.w	r3, r7, #20
 8002af2:	2244      	movs	r2, #68	; 0x44
 8002af4:	2100      	movs	r1, #0
 8002af6:	4618      	mov	r0, r3
 8002af8:	f010 f8a4 	bl	8012c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002afc:	463b      	mov	r3, r7
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
 8002b04:	609a      	str	r2, [r3, #8]
 8002b06:	60da      	str	r2, [r3, #12]
 8002b08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002b0a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b0e:	f002 f851 	bl	8004bb4 <HAL_PWREx_ControlVoltageScaling>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002b18:	f000 fa96 	bl	8003048 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002b1c:	230a      	movs	r3, #10
 8002b1e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b26:	2310      	movs	r3, #16
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002b32:	2302      	movs	r3, #2
 8002b34:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002b36:	2301      	movs	r3, #1
 8002b38:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002b3a:	230a      	movs	r3, #10
 8002b3c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002b3e:	2307      	movs	r3, #7
 8002b40:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002b42:	2302      	movs	r3, #2
 8002b44:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002b46:	2302      	movs	r3, #2
 8002b48:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b4a:	f107 0314 	add.w	r3, r7, #20
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f002 f886 	bl	8004c60 <HAL_RCC_OscConfig>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <SystemClock_Config+0x76>
  {
    Error_Handler();
 8002b5a:	f000 fa75 	bl	8003048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b5e:	230f      	movs	r3, #15
 8002b60:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b62:	2303      	movs	r3, #3
 8002b64:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b66:	2300      	movs	r3, #0
 8002b68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b72:	463b      	mov	r3, r7
 8002b74:	2104      	movs	r1, #4
 8002b76:	4618      	mov	r0, r3
 8002b78:	f002 fc5a 	bl	8005430 <HAL_RCC_ClockConfig>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002b82:	f000 fa61 	bl	8003048 <Error_Handler>
  }
}
 8002b86:	bf00      	nop
 8002b88:	3758      	adds	r7, #88	; 0x58
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8002b94:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <MX_CRC_Init+0x3c>)
 8002b96:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <MX_CRC_Init+0x40>)
 8002b98:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8002b9a:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <MX_CRC_Init+0x3c>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8002ba0:	4b0a      	ldr	r3, [pc, #40]	; (8002bcc <MX_CRC_Init+0x3c>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8002ba6:	4b09      	ldr	r3, [pc, #36]	; (8002bcc <MX_CRC_Init+0x3c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8002bac:	4b07      	ldr	r3, [pc, #28]	; (8002bcc <MX_CRC_Init+0x3c>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <MX_CRC_Init+0x3c>)
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002bb8:	4804      	ldr	r0, [pc, #16]	; (8002bcc <MX_CRC_Init+0x3c>)
 8002bba:	f000 ff2d 	bl	8003a18 <HAL_CRC_Init>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002bc4:	f000 fa40 	bl	8003048 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002bc8:	bf00      	nop
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20001eb8 	.word	0x20001eb8
 8002bd0:	40023000 	.word	0x40023000

08002bd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002bda:	4a1c      	ldr	r2, [pc, #112]	; (8002c4c <MX_I2C1_Init+0x78>)
 8002bdc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8002bde:	4b1a      	ldr	r3, [pc, #104]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002be0:	4a1b      	ldr	r2, [pc, #108]	; (8002c50 <MX_I2C1_Init+0x7c>)
 8002be2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002be4:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002bea:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002bf0:	4b15      	ldr	r3, [pc, #84]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002bf6:	4b14      	ldr	r3, [pc, #80]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002bfc:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c02:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c08:	4b0f      	ldr	r3, [pc, #60]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002c0e:	480e      	ldr	r0, [pc, #56]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002c10:	f001 f9c6 	bl	8003fa0 <HAL_I2C_Init>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002c1a:	f000 fa15 	bl	8003048 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002c1e:	2100      	movs	r1, #0
 8002c20:	4809      	ldr	r0, [pc, #36]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002c22:	f001 ff21 	bl	8004a68 <HAL_I2CEx_ConfigAnalogFilter>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002c2c:	f000 fa0c 	bl	8003048 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002c30:	2100      	movs	r1, #0
 8002c32:	4805      	ldr	r0, [pc, #20]	; (8002c48 <MX_I2C1_Init+0x74>)
 8002c34:	f001 ff63 	bl	8004afe <HAL_I2CEx_ConfigDigitalFilter>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002c3e:	f000 fa03 	bl	8003048 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002c42:	bf00      	nop
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20001edc 	.word	0x20001edc
 8002c4c:	40005400 	.word	0x40005400
 8002c50:	00702991 	.word	0x00702991

08002c54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002c5a:	1d3b      	adds	r3, r7, #4
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	609a      	str	r2, [r3, #8]
 8002c64:	60da      	str	r2, [r3, #12]
 8002c66:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002c68:	2300      	movs	r3, #0
 8002c6a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002c6c:	4b25      	ldr	r3, [pc, #148]	; (8002d04 <MX_RTC_Init+0xb0>)
 8002c6e:	4a26      	ldr	r2, [pc, #152]	; (8002d08 <MX_RTC_Init+0xb4>)
 8002c70:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002c72:	4b24      	ldr	r3, [pc, #144]	; (8002d04 <MX_RTC_Init+0xb0>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002c78:	4b22      	ldr	r3, [pc, #136]	; (8002d04 <MX_RTC_Init+0xb0>)
 8002c7a:	227f      	movs	r2, #127	; 0x7f
 8002c7c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002c7e:	4b21      	ldr	r3, [pc, #132]	; (8002d04 <MX_RTC_Init+0xb0>)
 8002c80:	22ff      	movs	r2, #255	; 0xff
 8002c82:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c84:	4b1f      	ldr	r3, [pc, #124]	; (8002d04 <MX_RTC_Init+0xb0>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002c8a:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <MX_RTC_Init+0xb0>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c90:	4b1c      	ldr	r3, [pc, #112]	; (8002d04 <MX_RTC_Init+0xb0>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c96:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <MX_RTC_Init+0xb0>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c9c:	4819      	ldr	r0, [pc, #100]	; (8002d04 <MX_RTC_Init+0xb0>)
 8002c9e:	f003 fa89 	bl	80061b4 <HAL_RTC_Init>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d001      	beq.n	8002cac <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8002ca8:	f000 f9ce 	bl	8003048 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002cc0:	1d3b      	adds	r3, r7, #4
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	480f      	ldr	r0, [pc, #60]	; (8002d04 <MX_RTC_Init+0xb0>)
 8002cc8:	f003 faef 	bl	80062aa <HAL_RTC_SetTime>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8002cd2:	f000 f9b9 	bl	8003048 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002ce6:	463b      	mov	r3, r7
 8002ce8:	2201      	movs	r2, #1
 8002cea:	4619      	mov	r1, r3
 8002cec:	4805      	ldr	r0, [pc, #20]	; (8002d04 <MX_RTC_Init+0xb0>)
 8002cee:	f003 fb79 	bl	80063e4 <HAL_RTC_SetDate>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 8002cf8:	f000 f9a6 	bl	8003048 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002cfc:	bf00      	nop
 8002cfe:	3718      	adds	r7, #24
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	20001f28 	.word	0x20001f28
 8002d08:	40002800 	.word	0x40002800

08002d0c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <MX_SPI2_Init+0x74>)
 8002d12:	4a1c      	ldr	r2, [pc, #112]	; (8002d84 <MX_SPI2_Init+0x78>)
 8002d14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d16:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <MX_SPI2_Init+0x74>)
 8002d18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d1e:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <MX_SPI2_Init+0x74>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d24:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <MX_SPI2_Init+0x74>)
 8002d26:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002d2a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d2c:	4b14      	ldr	r3, [pc, #80]	; (8002d80 <MX_SPI2_Init+0x74>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d32:	4b13      	ldr	r3, [pc, #76]	; (8002d80 <MX_SPI2_Init+0x74>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d38:	4b11      	ldr	r3, [pc, #68]	; (8002d80 <MX_SPI2_Init+0x74>)
 8002d3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d3e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002d40:	4b0f      	ldr	r3, [pc, #60]	; (8002d80 <MX_SPI2_Init+0x74>)
 8002d42:	2228      	movs	r2, #40	; 0x28
 8002d44:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d46:	4b0e      	ldr	r3, [pc, #56]	; (8002d80 <MX_SPI2_Init+0x74>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <MX_SPI2_Init+0x74>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d52:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <MX_SPI2_Init+0x74>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <MX_SPI2_Init+0x74>)
 8002d5a:	2207      	movs	r2, #7
 8002d5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002d5e:	4b08      	ldr	r3, [pc, #32]	; (8002d80 <MX_SPI2_Init+0x74>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <MX_SPI2_Init+0x74>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002d6a:	4805      	ldr	r0, [pc, #20]	; (8002d80 <MX_SPI2_Init+0x74>)
 8002d6c:	f003 fc78 	bl	8006660 <HAL_SPI_Init>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002d76:	f000 f967 	bl	8003048 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20001f4c 	.word	0x20001f4c
 8002d84:	40003800 	.word	0x40003800

08002d88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b088      	sub	sp, #32
 8002d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d8e:	f107 0310 	add.w	r3, r7, #16
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d9c:	1d3b      	adds	r3, r7, #4
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002da6:	4b1e      	ldr	r3, [pc, #120]	; (8002e20 <MX_TIM2_Init+0x98>)
 8002da8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8002dae:	4b1c      	ldr	r3, [pc, #112]	; (8002e20 <MX_TIM2_Init+0x98>)
 8002db0:	224f      	movs	r2, #79	; 0x4f
 8002db2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002db4:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <MX_TIM2_Init+0x98>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4999;
 8002dba:	4b19      	ldr	r3, [pc, #100]	; (8002e20 <MX_TIM2_Init+0x98>)
 8002dbc:	f241 3287 	movw	r2, #4999	; 0x1387
 8002dc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dc2:	4b17      	ldr	r3, [pc, #92]	; (8002e20 <MX_TIM2_Init+0x98>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dc8:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <MX_TIM2_Init+0x98>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002dce:	4814      	ldr	r0, [pc, #80]	; (8002e20 <MX_TIM2_Init+0x98>)
 8002dd0:	f004 f860 	bl	8006e94 <HAL_TIM_Base_Init>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002dda:	f000 f935 	bl	8003048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002de2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002de4:	f107 0310 	add.w	r3, r7, #16
 8002de8:	4619      	mov	r1, r3
 8002dea:	480d      	ldr	r0, [pc, #52]	; (8002e20 <MX_TIM2_Init+0x98>)
 8002dec:	f004 fa39 	bl	8007262 <HAL_TIM_ConfigClockSource>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002df6:	f000 f927 	bl	8003048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002e02:	1d3b      	adds	r3, r7, #4
 8002e04:	4619      	mov	r1, r3
 8002e06:	4806      	ldr	r0, [pc, #24]	; (8002e20 <MX_TIM2_Init+0x98>)
 8002e08:	f004 fc5a 	bl	80076c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002e12:	f000 f919 	bl	8003048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e16:	bf00      	nop
 8002e18:	3720      	adds	r7, #32
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20001fb0 	.word	0x20001fb0

08002e24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e2a:	f107 0310 	add.w	r3, r7, #16
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	605a      	str	r2, [r3, #4]
 8002e34:	609a      	str	r2, [r3, #8]
 8002e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	605a      	str	r2, [r3, #4]
 8002e40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e42:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <MX_TIM3_Init+0x94>)
 8002e44:	4a1d      	ldr	r2, [pc, #116]	; (8002ebc <MX_TIM3_Init+0x98>)
 8002e46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8002e48:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <MX_TIM3_Init+0x94>)
 8002e4a:	2207      	movs	r2, #7
 8002e4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e4e:	4b1a      	ldr	r3, [pc, #104]	; (8002eb8 <MX_TIM3_Init+0x94>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002e54:	4b18      	ldr	r3, [pc, #96]	; (8002eb8 <MX_TIM3_Init+0x94>)
 8002e56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e5c:	4b16      	ldr	r3, [pc, #88]	; (8002eb8 <MX_TIM3_Init+0x94>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e62:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <MX_TIM3_Init+0x94>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e68:	4813      	ldr	r0, [pc, #76]	; (8002eb8 <MX_TIM3_Init+0x94>)
 8002e6a:	f004 f813 	bl	8006e94 <HAL_TIM_Base_Init>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d001      	beq.n	8002e78 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002e74:	f000 f8e8 	bl	8003048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e7e:	f107 0310 	add.w	r3, r7, #16
 8002e82:	4619      	mov	r1, r3
 8002e84:	480c      	ldr	r0, [pc, #48]	; (8002eb8 <MX_TIM3_Init+0x94>)
 8002e86:	f004 f9ec 	bl	8007262 <HAL_TIM_ConfigClockSource>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002e90:	f000 f8da 	bl	8003048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e94:	2300      	movs	r3, #0
 8002e96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e9c:	1d3b      	adds	r3, r7, #4
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4805      	ldr	r0, [pc, #20]	; (8002eb8 <MX_TIM3_Init+0x94>)
 8002ea2:	f004 fc0d 	bl	80076c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002eac:	f000 f8cc 	bl	8003048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002eb0:	bf00      	nop
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	20001ffc 	.word	0x20001ffc
 8002ebc:	40000400 	.word	0x40000400

08002ec0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002ec4:	4b14      	ldr	r3, [pc, #80]	; (8002f18 <MX_USART2_UART_Init+0x58>)
 8002ec6:	4a15      	ldr	r2, [pc, #84]	; (8002f1c <MX_USART2_UART_Init+0x5c>)
 8002ec8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002eca:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <MX_USART2_UART_Init+0x58>)
 8002ecc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ed0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ed2:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <MX_USART2_UART_Init+0x58>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <MX_USART2_UART_Init+0x58>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ede:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <MX_USART2_UART_Init+0x58>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ee4:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <MX_USART2_UART_Init+0x58>)
 8002ee6:	220c      	movs	r2, #12
 8002ee8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eea:	4b0b      	ldr	r3, [pc, #44]	; (8002f18 <MX_USART2_UART_Init+0x58>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <MX_USART2_UART_Init+0x58>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ef6:	4b08      	ldr	r3, [pc, #32]	; (8002f18 <MX_USART2_UART_Init+0x58>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <MX_USART2_UART_Init+0x58>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f02:	4805      	ldr	r0, [pc, #20]	; (8002f18 <MX_USART2_UART_Init+0x58>)
 8002f04:	f004 fc82 	bl	800780c <HAL_UART_Init>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002f0e:	f000 f89b 	bl	8003048 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20002048 	.word	0x20002048
 8002f1c:	40004400 	.word	0x40004400

08002f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	; 0x28
 8002f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f26:	f107 0314 	add.w	r3, r7, #20
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	609a      	str	r2, [r3, #8]
 8002f32:	60da      	str	r2, [r3, #12]
 8002f34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f36:	4b41      	ldr	r3, [pc, #260]	; (800303c <MX_GPIO_Init+0x11c>)
 8002f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3a:	4a40      	ldr	r2, [pc, #256]	; (800303c <MX_GPIO_Init+0x11c>)
 8002f3c:	f043 0304 	orr.w	r3, r3, #4
 8002f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f42:	4b3e      	ldr	r3, [pc, #248]	; (800303c <MX_GPIO_Init+0x11c>)
 8002f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	613b      	str	r3, [r7, #16]
 8002f4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f4e:	4b3b      	ldr	r3, [pc, #236]	; (800303c <MX_GPIO_Init+0x11c>)
 8002f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f52:	4a3a      	ldr	r2, [pc, #232]	; (800303c <MX_GPIO_Init+0x11c>)
 8002f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f5a:	4b38      	ldr	r3, [pc, #224]	; (800303c <MX_GPIO_Init+0x11c>)
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f66:	4b35      	ldr	r3, [pc, #212]	; (800303c <MX_GPIO_Init+0x11c>)
 8002f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6a:	4a34      	ldr	r2, [pc, #208]	; (800303c <MX_GPIO_Init+0x11c>)
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f72:	4b32      	ldr	r3, [pc, #200]	; (800303c <MX_GPIO_Init+0x11c>)
 8002f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	60bb      	str	r3, [r7, #8]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7e:	4b2f      	ldr	r3, [pc, #188]	; (800303c <MX_GPIO_Init+0x11c>)
 8002f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f82:	4a2e      	ldr	r2, [pc, #184]	; (800303c <MX_GPIO_Init+0x11c>)
 8002f84:	f043 0302 	orr.w	r3, r3, #2
 8002f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f8a:	4b2c      	ldr	r3, [pc, #176]	; (800303c <MX_GPIO_Init+0x11c>)
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	607b      	str	r3, [r7, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|nSleep_Pin, GPIO_PIN_RESET);
 8002f96:	2200      	movs	r2, #0
 8002f98:	f44f 5181 	mov.w	r1, #4128	; 0x1020
 8002f9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fa0:	f000 ffe6 	bl	8003f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002faa:	4825      	ldr	r0, [pc, #148]	; (8003040 <MX_GPIO_Init+0x120>)
 8002fac:	f000 ffe0 	bl	8003f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PWM_sync_Pin|PWM_timer_Pin, GPIO_PIN_RESET);
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 8002fb6:	4823      	ldr	r0, [pc, #140]	; (8003044 <MX_GPIO_Init+0x124>)
 8002fb8:	f000 ffda 	bl	8003f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fc2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002fc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002fcc:	f107 0314 	add.w	r3, r7, #20
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	481c      	ldr	r0, [pc, #112]	; (8003044 <MX_GPIO_Init+0x124>)
 8002fd4:	f000 fe0a 	bl	8003bec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin nSleep_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|nSleep_Pin;
 8002fd8:	f44f 5381 	mov.w	r3, #4128	; 0x1020
 8002fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fea:	f107 0314 	add.w	r3, r7, #20
 8002fee:	4619      	mov	r1, r3
 8002ff0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ff4:	f000 fdfa 	bl	8003bec <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_SS_Pin */
  GPIO_InitStruct.Pin = SPI2_SS_Pin;
 8002ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ffe:	2301      	movs	r3, #1
 8003000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003002:	2300      	movs	r3, #0
 8003004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003006:	2300      	movs	r3, #0
 8003008:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_SS_GPIO_Port, &GPIO_InitStruct);
 800300a:	f107 0314 	add.w	r3, r7, #20
 800300e:	4619      	mov	r1, r3
 8003010:	480b      	ldr	r0, [pc, #44]	; (8003040 <MX_GPIO_Init+0x120>)
 8003012:	f000 fdeb 	bl	8003bec <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM_sync_Pin PWM_timer_Pin */
  GPIO_InitStruct.Pin = PWM_sync_Pin|PWM_timer_Pin;
 8003016:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800301a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800301c:	2301      	movs	r3, #1
 800301e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003020:	2300      	movs	r3, #0
 8003022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003024:	2300      	movs	r3, #0
 8003026:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003028:	f107 0314 	add.w	r3, r7, #20
 800302c:	4619      	mov	r1, r3
 800302e:	4805      	ldr	r0, [pc, #20]	; (8003044 <MX_GPIO_Init+0x124>)
 8003030:	f000 fddc 	bl	8003bec <HAL_GPIO_Init>

}
 8003034:	bf00      	nop
 8003036:	3728      	adds	r7, #40	; 0x28
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000
 8003040:	48000400 	.word	0x48000400
 8003044:	48000800 	.word	0x48000800

08003048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800304c:	b672      	cpsid	i
}
 800304e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003050:	e7fe      	b.n	8003050 <Error_Handler+0x8>

08003052 <BSP_SENSOR_ACC_GetOrientation>:
  * @brief  Get accelerometer sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_ACC_GetOrientation(char *Orientation)
{
 8003052:	b480      	push	{r7}
 8003054:	b083      	sub	sp, #12
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
  Orientation[0] = 's';
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2273      	movs	r2, #115	; 0x73
 800305e:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3301      	adds	r3, #1
 8003064:	2265      	movs	r2, #101	; 0x65
 8003066:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	3302      	adds	r3, #2
 800306c:	2275      	movs	r2, #117	; 0x75
 800306e:	701a      	strb	r2, [r3, #0]
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <BSP_SENSOR_GYR_GetOrientation>:
  * @brief  Get gyroscope sensor orientation
  * @param  Orientation Pointer to sensor orientation
  * @retval None
  */
void BSP_SENSOR_GYR_GetOrientation(char *Orientation)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  Orientation[0] = 's';
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2273      	movs	r2, #115	; 0x73
 8003088:	701a      	strb	r2, [r3, #0]
  Orientation[1] = 'e';
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3301      	adds	r3, #1
 800308e:	2265      	movs	r2, #101	; 0x65
 8003090:	701a      	strb	r2, [r3, #0]
  Orientation[2] = 'u';
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3302      	adds	r3, #2
 8003096:	2275      	movs	r2, #117	; 0x75
 8003098:	701a      	strb	r2, [r3, #0]
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
	...

080030a8 <pwm_sine>:


#define pas_deg sizeof phase_A / sizeof phase_A[0]

void pwm_sine(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af02      	add	r7, sp, #8
	if(1){//Flag_driver ==1
		Flag_driver =0;
 80030ae:	4b4b      	ldr	r3, [pc, #300]	; (80031dc <pwm_sine+0x134>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
		if(cpt_pwm >= 10)   				//correspond to 2800us (28*100us)
 80030b4:	4b4a      	ldr	r3, [pc, #296]	; (80031e0 <pwm_sine+0x138>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b09      	cmp	r3, #9
 80030ba:	f240 8086 	bls.w	80031ca <pwm_sine+0x122>
		{
			cpt_pwm =0;//reset
 80030be:	4b48      	ldr	r3, [pc, #288]	; (80031e0 <pwm_sine+0x138>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]

			//Set PWM duty_cycle A   (reset = 0x0000 )
			//fill TX buffer for SPI--------------------------------------------
			buf_SPI_TX[0] = 0x00;               					//cmd
 80030c4:	4b47      	ldr	r3, [pc, #284]	; (80031e4 <pwm_sine+0x13c>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]
			buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_A_DUTY <<3);  	//reg adr + cmd
 80030ca:	4b46      	ldr	r3, [pc, #280]	; (80031e4 <pwm_sine+0x13c>)
 80030cc:	22c8      	movs	r2, #200	; 0xc8
 80030ce:	705a      	strb	r2, [r3, #1]
			buf_SPI_TX[2] = 0x00;				//data (si read osf)
 80030d0:	4b44      	ldr	r3, [pc, #272]	; (80031e4 <pwm_sine+0x13c>)
 80030d2:	2200      	movs	r2, #0
 80030d4:	709a      	strb	r2, [r3, #2]
			buf_SPI_TX[3] = phase_A[cpt_deg];									//data (si read osf)
 80030d6:	4b44      	ldr	r3, [pc, #272]	; (80031e8 <pwm_sine+0x140>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a44      	ldr	r2, [pc, #272]	; (80031ec <pwm_sine+0x144>)
 80030dc:	5cd2      	ldrb	r2, [r2, r3]
 80030de:	4b41      	ldr	r3, [pc, #260]	; (80031e4 <pwm_sine+0x13c>)
 80030e0:	70da      	strb	r2, [r3, #3]
			//Send/Read Datas---------------------------------------------------
			HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 80030e2:	2200      	movs	r2, #0
 80030e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030e8:	4841      	ldr	r0, [pc, #260]	; (80031f0 <pwm_sine+0x148>)
 80030ea:	f000 ff41 	bl	8003f70 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 80030ee:	f04f 33ff 	mov.w	r3, #4294967295
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	2304      	movs	r3, #4
 80030f6:	4a3f      	ldr	r2, [pc, #252]	; (80031f4 <pwm_sine+0x14c>)
 80030f8:	493a      	ldr	r1, [pc, #232]	; (80031e4 <pwm_sine+0x13c>)
 80030fa:	483f      	ldr	r0, [pc, #252]	; (80031f8 <pwm_sine+0x150>)
 80030fc:	f003 fb53 	bl	80067a6 <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8003100:	2201      	movs	r2, #1
 8003102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003106:	483a      	ldr	r0, [pc, #232]	; (80031f0 <pwm_sine+0x148>)
 8003108:	f000 ff32 	bl	8003f70 <HAL_GPIO_WritePin>
			//Set PWM duty_cycle B   (reset = 0x0000 )
			//fill TX buffer for SPI--------------------------------------------
			buf_SPI_TX[0] = 0x00;               					//cmd
 800310c:	4b35      	ldr	r3, [pc, #212]	; (80031e4 <pwm_sine+0x13c>)
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
			buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_B_DUTY <<3);  	//reg adr + cmd
 8003112:	4b34      	ldr	r3, [pc, #208]	; (80031e4 <pwm_sine+0x13c>)
 8003114:	22d0      	movs	r2, #208	; 0xd0
 8003116:	705a      	strb	r2, [r3, #1]
			buf_SPI_TX[2] = 0x00;				//data (si read osf)
 8003118:	4b32      	ldr	r3, [pc, #200]	; (80031e4 <pwm_sine+0x13c>)
 800311a:	2200      	movs	r2, #0
 800311c:	709a      	strb	r2, [r3, #2]
			buf_SPI_TX[3] = phase_B[cpt_deg];									//data (si read osf)
 800311e:	4b32      	ldr	r3, [pc, #200]	; (80031e8 <pwm_sine+0x140>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a36      	ldr	r2, [pc, #216]	; (80031fc <pwm_sine+0x154>)
 8003124:	5cd2      	ldrb	r2, [r2, r3]
 8003126:	4b2f      	ldr	r3, [pc, #188]	; (80031e4 <pwm_sine+0x13c>)
 8003128:	70da      	strb	r2, [r3, #3]
			//Send/Read Datas---------------------------------------------------
			HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 800312a:	2200      	movs	r2, #0
 800312c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003130:	482f      	ldr	r0, [pc, #188]	; (80031f0 <pwm_sine+0x148>)
 8003132:	f000 ff1d 	bl	8003f70 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 8003136:	f04f 33ff 	mov.w	r3, #4294967295
 800313a:	9300      	str	r3, [sp, #0]
 800313c:	2304      	movs	r3, #4
 800313e:	4a2d      	ldr	r2, [pc, #180]	; (80031f4 <pwm_sine+0x14c>)
 8003140:	4928      	ldr	r1, [pc, #160]	; (80031e4 <pwm_sine+0x13c>)
 8003142:	482d      	ldr	r0, [pc, #180]	; (80031f8 <pwm_sine+0x150>)
 8003144:	f003 fb2f 	bl	80067a6 <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8003148:	2201      	movs	r2, #1
 800314a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800314e:	4828      	ldr	r0, [pc, #160]	; (80031f0 <pwm_sine+0x148>)
 8003150:	f000 ff0e 	bl	8003f70 <HAL_GPIO_WritePin>

			//Set PWM duty_cycle C   (reset = 0x0000 )
			//fill TX buffer for SPI--------------------------------------------
			buf_SPI_TX[0] = 0x00;               					//cmd
 8003154:	4b23      	ldr	r3, [pc, #140]	; (80031e4 <pwm_sine+0x13c>)
 8003156:	2200      	movs	r2, #0
 8003158:	701a      	strb	r2, [r3, #0]
			buf_SPI_TX[1] = 0x00 | (DRV8311_REG_PWMG_C_DUTY <<3);  	//reg adr + cmd
 800315a:	4b22      	ldr	r3, [pc, #136]	; (80031e4 <pwm_sine+0x13c>)
 800315c:	22d8      	movs	r2, #216	; 0xd8
 800315e:	705a      	strb	r2, [r3, #1]
			buf_SPI_TX[2] = 0x00;				//data (si read osf)
 8003160:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <pwm_sine+0x13c>)
 8003162:	2200      	movs	r2, #0
 8003164:	709a      	strb	r2, [r3, #2]
			buf_SPI_TX[3] = phase_C[cpt_deg];									//data (si read osf)
 8003166:	4b20      	ldr	r3, [pc, #128]	; (80031e8 <pwm_sine+0x140>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a25      	ldr	r2, [pc, #148]	; (8003200 <pwm_sine+0x158>)
 800316c:	5cd2      	ldrb	r2, [r2, r3]
 800316e:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <pwm_sine+0x13c>)
 8003170:	70da      	strb	r2, [r3, #3]
			//Send/Read Datas---------------------------------------------------
			HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_RESET);
 8003172:	2200      	movs	r2, #0
 8003174:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003178:	481d      	ldr	r0, [pc, #116]	; (80031f0 <pwm_sine+0x148>)
 800317a:	f000 fef9 	bl	8003f70 <HAL_GPIO_WritePin>
			HAL_SPI_TransmitReceive(&hspi2, (uint8_t *)buf_SPI_TX, (uint8_t *)buf_SPI_RX, 4, HAL_MAX_DELAY);  //trame de 32bits=4octets
 800317e:	f04f 33ff 	mov.w	r3, #4294967295
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	2304      	movs	r3, #4
 8003186:	4a1b      	ldr	r2, [pc, #108]	; (80031f4 <pwm_sine+0x14c>)
 8003188:	4916      	ldr	r1, [pc, #88]	; (80031e4 <pwm_sine+0x13c>)
 800318a:	481b      	ldr	r0, [pc, #108]	; (80031f8 <pwm_sine+0x150>)
 800318c:	f003 fb0b 	bl	80067a6 <HAL_SPI_TransmitReceive>
			HAL_GPIO_WritePin(SPI2_SS_GPIO_Port, SPI2_SS_Pin, GPIO_PIN_SET);
 8003190:	2201      	movs	r2, #1
 8003192:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003196:	4816      	ldr	r0, [pc, #88]	; (80031f0 <pwm_sine+0x148>)
 8003198:	f000 feea 	bl	8003f70 <HAL_GPIO_WritePin>


			//if button not pressed: clockwise else counter clockwise
			if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == 1)
 800319c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80031a0:	4818      	ldr	r0, [pc, #96]	; (8003204 <pwm_sine+0x15c>)
 80031a2:	f000 fecd 	bl	8003f40 <HAL_GPIO_ReadPin>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d113      	bne.n	80031d4 <pwm_sine+0x12c>
			{
				//clockwise direction
				if(cpt_deg>=pas_deg-1)			//360°
 80031ac:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <pwm_sine+0x140>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f5b3 7fb3 	cmp.w	r3, #358	; 0x166
 80031b4:	d903      	bls.n	80031be <pwm_sine+0x116>
				{
					cpt_deg =0;					//reset cpt °
 80031b6:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <pwm_sine+0x140>)
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
		{
			cpt_pwm++;
		}
		//HAL_GPIO_TogglePin(PWM_timer_GPIO_Port, PWM_timer_Pin);
	}
}
 80031bc:	e00a      	b.n	80031d4 <pwm_sine+0x12c>
					cpt_deg++;					//+1°
 80031be:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <pwm_sine+0x140>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	3301      	adds	r3, #1
 80031c4:	4a08      	ldr	r2, [pc, #32]	; (80031e8 <pwm_sine+0x140>)
 80031c6:	6013      	str	r3, [r2, #0]
}
 80031c8:	e004      	b.n	80031d4 <pwm_sine+0x12c>
			cpt_pwm++;
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <pwm_sine+0x138>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	3301      	adds	r3, #1
 80031d0:	4a03      	ldr	r2, [pc, #12]	; (80031e0 <pwm_sine+0x138>)
 80031d2:	6013      	str	r3, [r2, #0]
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20002129 	.word	0x20002129
 80031e0:	2000212c 	.word	0x2000212c
 80031e4:	200020cc 	.word	0x200020cc
 80031e8:	20002130 	.word	0x20002130
 80031ec:	200011c8 	.word	0x200011c8
 80031f0:	48000400 	.word	0x48000400
 80031f4:	200020e0 	.word	0x200020e0
 80031f8:	20001f4c 	.word	0x20001f4c
 80031fc:	20001330 	.word	0x20001330
 8003200:	20001498 	.word	0x20001498
 8003204:	48000800 	.word	0x48000800

08003208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320e:	4b0f      	ldr	r3, [pc, #60]	; (800324c <HAL_MspInit+0x44>)
 8003210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003212:	4a0e      	ldr	r2, [pc, #56]	; (800324c <HAL_MspInit+0x44>)
 8003214:	f043 0301 	orr.w	r3, r3, #1
 8003218:	6613      	str	r3, [r2, #96]	; 0x60
 800321a:	4b0c      	ldr	r3, [pc, #48]	; (800324c <HAL_MspInit+0x44>)
 800321c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	607b      	str	r3, [r7, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <HAL_MspInit+0x44>)
 8003228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322a:	4a08      	ldr	r2, [pc, #32]	; (800324c <HAL_MspInit+0x44>)
 800322c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003230:	6593      	str	r3, [r2, #88]	; 0x58
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_MspInit+0x44>)
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800323e:	bf00      	nop
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40021000 	.word	0x40021000

08003250 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <HAL_CRC_MspInit+0x38>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d10b      	bne.n	800327a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8003262:	4b0a      	ldr	r3, [pc, #40]	; (800328c <HAL_CRC_MspInit+0x3c>)
 8003264:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003266:	4a09      	ldr	r2, [pc, #36]	; (800328c <HAL_CRC_MspInit+0x3c>)
 8003268:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800326c:	6493      	str	r3, [r2, #72]	; 0x48
 800326e:	4b07      	ldr	r3, [pc, #28]	; (800328c <HAL_CRC_MspInit+0x3c>)
 8003270:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800327a:	bf00      	nop
 800327c:	3714      	adds	r7, #20
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	40023000 	.word	0x40023000
 800328c:	40021000 	.word	0x40021000

08003290 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b0ac      	sub	sp, #176	; 0xb0
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003298:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	60da      	str	r2, [r3, #12]
 80032a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032a8:	f107 0314 	add.w	r3, r7, #20
 80032ac:	2288      	movs	r2, #136	; 0x88
 80032ae:	2100      	movs	r1, #0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f00f fcc7 	bl	8012c44 <memset>
  if(hi2c->Instance==I2C1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a21      	ldr	r2, [pc, #132]	; (8003340 <HAL_I2C_MspInit+0xb0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d13b      	bne.n	8003338 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80032c0:	2340      	movs	r3, #64	; 0x40
 80032c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80032c4:	2300      	movs	r3, #0
 80032c6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80032c8:	f107 0314 	add.w	r3, r7, #20
 80032cc:	4618      	mov	r0, r3
 80032ce:	f002 fab5 	bl	800583c <HAL_RCCEx_PeriphCLKConfig>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80032d8:	f7ff feb6 	bl	8003048 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032dc:	4b19      	ldr	r3, [pc, #100]	; (8003344 <HAL_I2C_MspInit+0xb4>)
 80032de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032e0:	4a18      	ldr	r2, [pc, #96]	; (8003344 <HAL_I2C_MspInit+0xb4>)
 80032e2:	f043 0302 	orr.w	r3, r3, #2
 80032e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032e8:	4b16      	ldr	r3, [pc, #88]	; (8003344 <HAL_I2C_MspInit+0xb4>)
 80032ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80032f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80032f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032fc:	2312      	movs	r3, #18
 80032fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003302:	2300      	movs	r3, #0
 8003304:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003308:	2303      	movs	r3, #3
 800330a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800330e:	2304      	movs	r3, #4
 8003310:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003314:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003318:	4619      	mov	r1, r3
 800331a:	480b      	ldr	r0, [pc, #44]	; (8003348 <HAL_I2C_MspInit+0xb8>)
 800331c:	f000 fc66 	bl	8003bec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003320:	4b08      	ldr	r3, [pc, #32]	; (8003344 <HAL_I2C_MspInit+0xb4>)
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	4a07      	ldr	r2, [pc, #28]	; (8003344 <HAL_I2C_MspInit+0xb4>)
 8003326:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800332a:	6593      	str	r3, [r2, #88]	; 0x58
 800332c:	4b05      	ldr	r3, [pc, #20]	; (8003344 <HAL_I2C_MspInit+0xb4>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003338:	bf00      	nop
 800333a:	37b0      	adds	r7, #176	; 0xb0
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40005400 	.word	0x40005400
 8003344:	40021000 	.word	0x40021000
 8003348:	48000400 	.word	0x48000400

0800334c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b0a4      	sub	sp, #144	; 0x90
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003354:	f107 0308 	add.w	r3, r7, #8
 8003358:	2288      	movs	r2, #136	; 0x88
 800335a:	2100      	movs	r1, #0
 800335c:	4618      	mov	r0, r3
 800335e:	f00f fc71 	bl	8012c44 <memset>
  if(hrtc->Instance==RTC)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a10      	ldr	r2, [pc, #64]	; (80033a8 <HAL_RTC_MspInit+0x5c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d118      	bne.n	800339e <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800336c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003370:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003372:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003376:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800337a:	f107 0308 	add.w	r3, r7, #8
 800337e:	4618      	mov	r0, r3
 8003380:	f002 fa5c 	bl	800583c <HAL_RCCEx_PeriphCLKConfig>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800338a:	f7ff fe5d 	bl	8003048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800338e:	4b07      	ldr	r3, [pc, #28]	; (80033ac <HAL_RTC_MspInit+0x60>)
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003394:	4a05      	ldr	r2, [pc, #20]	; (80033ac <HAL_RTC_MspInit+0x60>)
 8003396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800339a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800339e:	bf00      	nop
 80033a0:	3790      	adds	r7, #144	; 0x90
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	40002800 	.word	0x40002800
 80033ac:	40021000 	.word	0x40021000

080033b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b08a      	sub	sp, #40	; 0x28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b8:	f107 0314 	add.w	r3, r7, #20
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	605a      	str	r2, [r3, #4]
 80033c2:	609a      	str	r2, [r3, #8]
 80033c4:	60da      	str	r2, [r3, #12]
 80033c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a25      	ldr	r2, [pc, #148]	; (8003464 <HAL_SPI_MspInit+0xb4>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d144      	bne.n	800345c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80033d2:	4b25      	ldr	r3, [pc, #148]	; (8003468 <HAL_SPI_MspInit+0xb8>)
 80033d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d6:	4a24      	ldr	r2, [pc, #144]	; (8003468 <HAL_SPI_MspInit+0xb8>)
 80033d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033dc:	6593      	str	r3, [r2, #88]	; 0x58
 80033de:	4b22      	ldr	r3, [pc, #136]	; (8003468 <HAL_SPI_MspInit+0xb8>)
 80033e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033e6:	613b      	str	r3, [r7, #16]
 80033e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033ea:	4b1f      	ldr	r3, [pc, #124]	; (8003468 <HAL_SPI_MspInit+0xb8>)
 80033ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ee:	4a1e      	ldr	r2, [pc, #120]	; (8003468 <HAL_SPI_MspInit+0xb8>)
 80033f0:	f043 0304 	orr.w	r3, r3, #4
 80033f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033f6:	4b1c      	ldr	r3, [pc, #112]	; (8003468 <HAL_SPI_MspInit+0xb8>)
 80033f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fa:	f003 0304 	and.w	r3, r3, #4
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003402:	4b19      	ldr	r3, [pc, #100]	; (8003468 <HAL_SPI_MspInit+0xb8>)
 8003404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003406:	4a18      	ldr	r2, [pc, #96]	; (8003468 <HAL_SPI_MspInit+0xb8>)
 8003408:	f043 0302 	orr.w	r3, r3, #2
 800340c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800340e:	4b16      	ldr	r3, [pc, #88]	; (8003468 <HAL_SPI_MspInit+0xb8>)
 8003410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800341a:	230c      	movs	r3, #12
 800341c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341e:	2302      	movs	r3, #2
 8003420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003422:	2300      	movs	r3, #0
 8003424:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003426:	2303      	movs	r3, #3
 8003428:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800342a:	2305      	movs	r3, #5
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800342e:	f107 0314 	add.w	r3, r7, #20
 8003432:	4619      	mov	r1, r3
 8003434:	480d      	ldr	r0, [pc, #52]	; (800346c <HAL_SPI_MspInit+0xbc>)
 8003436:	f000 fbd9 	bl	8003bec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800343a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800343e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003440:	2302      	movs	r3, #2
 8003442:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003444:	2300      	movs	r3, #0
 8003446:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003448:	2303      	movs	r3, #3
 800344a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800344c:	2305      	movs	r3, #5
 800344e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003450:	f107 0314 	add.w	r3, r7, #20
 8003454:	4619      	mov	r1, r3
 8003456:	4806      	ldr	r0, [pc, #24]	; (8003470 <HAL_SPI_MspInit+0xc0>)
 8003458:	f000 fbc8 	bl	8003bec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800345c:	bf00      	nop
 800345e:	3728      	adds	r7, #40	; 0x28
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40003800 	.word	0x40003800
 8003468:	40021000 	.word	0x40021000
 800346c:	48000800 	.word	0x48000800
 8003470:	48000400 	.word	0x48000400

08003474 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003484:	d114      	bne.n	80034b0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003486:	4b19      	ldr	r3, [pc, #100]	; (80034ec <HAL_TIM_Base_MspInit+0x78>)
 8003488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348a:	4a18      	ldr	r2, [pc, #96]	; (80034ec <HAL_TIM_Base_MspInit+0x78>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6593      	str	r3, [r2, #88]	; 0x58
 8003492:	4b16      	ldr	r3, [pc, #88]	; (80034ec <HAL_TIM_Base_MspInit+0x78>)
 8003494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	60fb      	str	r3, [r7, #12]
 800349c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800349e:	2200      	movs	r2, #0
 80034a0:	2100      	movs	r1, #0
 80034a2:	201c      	movs	r0, #28
 80034a4:	f000 fa81 	bl	80039aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80034a8:	201c      	movs	r0, #28
 80034aa:	f000 fa9a 	bl	80039e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80034ae:	e018      	b.n	80034e2 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a0e      	ldr	r2, [pc, #56]	; (80034f0 <HAL_TIM_Base_MspInit+0x7c>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d113      	bne.n	80034e2 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80034ba:	4b0c      	ldr	r3, [pc, #48]	; (80034ec <HAL_TIM_Base_MspInit+0x78>)
 80034bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034be:	4a0b      	ldr	r2, [pc, #44]	; (80034ec <HAL_TIM_Base_MspInit+0x78>)
 80034c0:	f043 0302 	orr.w	r3, r3, #2
 80034c4:	6593      	str	r3, [r2, #88]	; 0x58
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <HAL_TIM_Base_MspInit+0x78>)
 80034c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	60bb      	str	r3, [r7, #8]
 80034d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80034d2:	2200      	movs	r2, #0
 80034d4:	2100      	movs	r1, #0
 80034d6:	201d      	movs	r0, #29
 80034d8:	f000 fa67 	bl	80039aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80034dc:	201d      	movs	r0, #29
 80034de:	f000 fa80 	bl	80039e2 <HAL_NVIC_EnableIRQ>
}
 80034e2:	bf00      	nop
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000
 80034f0:	40000400 	.word	0x40000400

080034f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b0ac      	sub	sp, #176	; 0xb0
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	60da      	str	r2, [r3, #12]
 800350a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800350c:	f107 0314 	add.w	r3, r7, #20
 8003510:	2288      	movs	r2, #136	; 0x88
 8003512:	2100      	movs	r1, #0
 8003514:	4618      	mov	r0, r3
 8003516:	f00f fb95 	bl	8012c44 <memset>
  if(huart->Instance==USART2)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a21      	ldr	r2, [pc, #132]	; (80035a4 <HAL_UART_MspInit+0xb0>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d13b      	bne.n	800359c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003524:	2302      	movs	r3, #2
 8003526:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003528:	2300      	movs	r3, #0
 800352a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	4618      	mov	r0, r3
 8003532:	f002 f983 	bl	800583c <HAL_RCCEx_PeriphCLKConfig>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800353c:	f7ff fd84 	bl	8003048 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003540:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <HAL_UART_MspInit+0xb4>)
 8003542:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003544:	4a18      	ldr	r2, [pc, #96]	; (80035a8 <HAL_UART_MspInit+0xb4>)
 8003546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800354a:	6593      	str	r3, [r2, #88]	; 0x58
 800354c:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <HAL_UART_MspInit+0xb4>)
 800354e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003554:	613b      	str	r3, [r7, #16]
 8003556:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003558:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <HAL_UART_MspInit+0xb4>)
 800355a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800355c:	4a12      	ldr	r2, [pc, #72]	; (80035a8 <HAL_UART_MspInit+0xb4>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003564:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <HAL_UART_MspInit+0xb4>)
 8003566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	60fb      	str	r3, [r7, #12]
 800356e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003570:	230c      	movs	r3, #12
 8003572:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003576:	2302      	movs	r3, #2
 8003578:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800357c:	2300      	movs	r3, #0
 800357e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003582:	2303      	movs	r3, #3
 8003584:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003588:	2307      	movs	r3, #7
 800358a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800358e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003592:	4619      	mov	r1, r3
 8003594:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003598:	f000 fb28 	bl	8003bec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800359c:	bf00      	nop
 800359e:	37b0      	adds	r7, #176	; 0xb0
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40004400 	.word	0x40004400
 80035a8:	40021000 	.word	0x40021000

080035ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035b0:	e7fe      	b.n	80035b0 <NMI_Handler+0x4>

080035b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035b2:	b480      	push	{r7}
 80035b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035b6:	e7fe      	b.n	80035b6 <HardFault_Handler+0x4>

080035b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035bc:	e7fe      	b.n	80035bc <MemManage_Handler+0x4>

080035be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035be:	b480      	push	{r7}
 80035c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035c2:	e7fe      	b.n	80035c2 <BusFault_Handler+0x4>

080035c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035c8:	e7fe      	b.n	80035c8 <UsageFault_Handler+0x4>

080035ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035ca:	b480      	push	{r7}
 80035cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035dc:	bf00      	nop
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr

080035e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035e6:	b480      	push	{r7}
 80035e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035ea:	bf00      	nop
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035f8:	f000 f8b8 	bl	800376c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035fc:	bf00      	nop
 80035fe:	bd80      	pop	{r7, pc}

08003600 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003604:	4803      	ldr	r0, [pc, #12]	; (8003614 <TIM2_IRQHandler+0x14>)
 8003606:	f003 fd0d 	bl	8007024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  Flag_compute_fusion = 1;
 800360a:	4b03      	ldr	r3, [pc, #12]	; (8003618 <TIM2_IRQHandler+0x18>)
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 1 */
}
 8003610:	bf00      	nop
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20001fb0 	.word	0x20001fb0
 8003618:	20002128 	.word	0x20002128

0800361c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003620:	4804      	ldr	r0, [pc, #16]	; (8003634 <TIM3_IRQHandler+0x18>)
 8003622:	f003 fcff 	bl	8007024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  Flag_driver = 1;
 8003626:	4b04      	ldr	r3, [pc, #16]	; (8003638 <TIM3_IRQHandler+0x1c>)
 8003628:	2201      	movs	r2, #1
 800362a:	701a      	strb	r2, [r3, #0]
  pwm_sine();
 800362c:	f7ff fd3c 	bl	80030a8 <pwm_sine>
  /* USER CODE END TIM3_IRQn 1 */
}
 8003630:	bf00      	nop
 8003632:	bd80      	pop	{r7, pc}
 8003634:	20001ffc 	.word	0x20001ffc
 8003638:	20002129 	.word	0x20002129

0800363c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003640:	4b06      	ldr	r3, [pc, #24]	; (800365c <SystemInit+0x20>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003646:	4a05      	ldr	r2, [pc, #20]	; (800365c <SystemInit+0x20>)
 8003648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800364c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	e000ed00 	.word	0xe000ed00

08003660 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
    ldr   sp, =_estack    /* Set stack pointer */
 8003660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003698 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003664:	f7ff ffea 	bl	800363c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003668:	480c      	ldr	r0, [pc, #48]	; (800369c <LoopForever+0x6>)
  ldr r1, =_edata
 800366a:	490d      	ldr	r1, [pc, #52]	; (80036a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800366c:	4a0d      	ldr	r2, [pc, #52]	; (80036a4 <LoopForever+0xe>)
  movs r3, #0
 800366e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003670:	e002      	b.n	8003678 <LoopCopyDataInit>

08003672 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003672:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003674:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003676:	3304      	adds	r3, #4

08003678 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003678:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800367a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800367c:	d3f9      	bcc.n	8003672 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800367e:	4a0a      	ldr	r2, [pc, #40]	; (80036a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003680:	4c0a      	ldr	r4, [pc, #40]	; (80036ac <LoopForever+0x16>)
  movs r3, #0
 8003682:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003684:	e001      	b.n	800368a <LoopFillZerobss>

08003686 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003686:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003688:	3204      	adds	r2, #4

0800368a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800368a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800368c:	d3fb      	bcc.n	8003686 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800368e:	f00f faa7 	bl	8012be0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003692:	f7ff f9f1 	bl	8002a78 <main>

08003696 <LoopForever>:

LoopForever:
    b LoopForever
 8003696:	e7fe      	b.n	8003696 <LoopForever>
    ldr   sp, =_estack    /* Set stack pointer */
 8003698:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800369c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036a0:	20001670 	.word	0x20001670
  ldr r2, =_sidata
 80036a4:	08015360 	.word	0x08015360
  ldr r2, =_sbss
 80036a8:	20001670 	.word	0x20001670
  ldr r4, =_ebss
 80036ac:	200025a8 	.word	0x200025a8

080036b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036b0:	e7fe      	b.n	80036b0 <ADC1_2_IRQHandler>
	...

080036b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036be:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <HAL_Init+0x3c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a0b      	ldr	r2, [pc, #44]	; (80036f0 <HAL_Init+0x3c>)
 80036c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ca:	2003      	movs	r0, #3
 80036cc:	f000 f962 	bl	8003994 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036d0:	2000      	movs	r0, #0
 80036d2:	f000 f80f 	bl	80036f4 <HAL_InitTick>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d002      	beq.n	80036e2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	71fb      	strb	r3, [r7, #7]
 80036e0:	e001      	b.n	80036e6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036e2:	f7ff fd91 	bl	8003208 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036e6:	79fb      	ldrb	r3, [r7, #7]
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3708      	adds	r7, #8
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40022000 	.word	0x40022000

080036f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003700:	4b17      	ldr	r3, [pc, #92]	; (8003760 <HAL_InitTick+0x6c>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d023      	beq.n	8003750 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003708:	4b16      	ldr	r3, [pc, #88]	; (8003764 <HAL_InitTick+0x70>)
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	4b14      	ldr	r3, [pc, #80]	; (8003760 <HAL_InitTick+0x6c>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	4619      	mov	r1, r3
 8003712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003716:	fbb3 f3f1 	udiv	r3, r3, r1
 800371a:	fbb2 f3f3 	udiv	r3, r2, r3
 800371e:	4618      	mov	r0, r3
 8003720:	f000 f96d 	bl	80039fe <HAL_SYSTICK_Config>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10f      	bne.n	800374a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2b0f      	cmp	r3, #15
 800372e:	d809      	bhi.n	8003744 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003730:	2200      	movs	r2, #0
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	f04f 30ff 	mov.w	r0, #4294967295
 8003738:	f000 f937 	bl	80039aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800373c:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <HAL_InitTick+0x74>)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	e007      	b.n	8003754 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]
 8003748:	e004      	b.n	8003754 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
 800374e:	e001      	b.n	8003754 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003754:	7bfb      	ldrb	r3, [r7, #15]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	20001608 	.word	0x20001608
 8003764:	20001600 	.word	0x20001600
 8003768:	20001604 	.word	0x20001604

0800376c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003770:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_IncTick+0x20>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	4b06      	ldr	r3, [pc, #24]	; (8003790 <HAL_IncTick+0x24>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4413      	add	r3, r2
 800377c:	4a04      	ldr	r2, [pc, #16]	; (8003790 <HAL_IncTick+0x24>)
 800377e:	6013      	str	r3, [r2, #0]
}
 8003780:	bf00      	nop
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	20001608 	.word	0x20001608
 8003790:	20002134 	.word	0x20002134

08003794 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return uwTick;
 8003798:	4b03      	ldr	r3, [pc, #12]	; (80037a8 <HAL_GetTick+0x14>)
 800379a:	681b      	ldr	r3, [r3, #0]
}
 800379c:	4618      	mov	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	20002134 	.word	0x20002134

080037ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037b4:	f7ff ffee 	bl	8003794 <HAL_GetTick>
 80037b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d005      	beq.n	80037d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80037c6:	4b0a      	ldr	r3, [pc, #40]	; (80037f0 <HAL_Delay+0x44>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	461a      	mov	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4413      	add	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037d2:	bf00      	nop
 80037d4:	f7ff ffde 	bl	8003794 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d8f7      	bhi.n	80037d4 <HAL_Delay+0x28>
  {
  }
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20001608 	.word	0x20001608

080037f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <__NVIC_SetPriorityGrouping+0x44>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003810:	4013      	ands	r3, r2
 8003812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800381c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003826:	4a04      	ldr	r2, [pc, #16]	; (8003838 <__NVIC_SetPriorityGrouping+0x44>)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	60d3      	str	r3, [r2, #12]
}
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <__NVIC_GetPriorityGrouping+0x18>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	f003 0307 	and.w	r3, r3, #7
}
 800384a:	4618      	mov	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	2b00      	cmp	r3, #0
 8003868:	db0b      	blt.n	8003882 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	f003 021f 	and.w	r2, r3, #31
 8003870:	4907      	ldr	r1, [pc, #28]	; (8003890 <__NVIC_EnableIRQ+0x38>)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	2001      	movs	r0, #1
 800387a:	fa00 f202 	lsl.w	r2, r0, r2
 800387e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	e000e100 	.word	0xe000e100

08003894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	6039      	str	r1, [r7, #0]
 800389e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	db0a      	blt.n	80038be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	490c      	ldr	r1, [pc, #48]	; (80038e0 <__NVIC_SetPriority+0x4c>)
 80038ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b2:	0112      	lsls	r2, r2, #4
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	440b      	add	r3, r1
 80038b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038bc:	e00a      	b.n	80038d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	4908      	ldr	r1, [pc, #32]	; (80038e4 <__NVIC_SetPriority+0x50>)
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	3b04      	subs	r3, #4
 80038cc:	0112      	lsls	r2, r2, #4
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	440b      	add	r3, r1
 80038d2:	761a      	strb	r2, [r3, #24]
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	e000e100 	.word	0xe000e100
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	; 0x24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f1c3 0307 	rsb	r3, r3, #7
 8003902:	2b04      	cmp	r3, #4
 8003904:	bf28      	it	cs
 8003906:	2304      	movcs	r3, #4
 8003908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	3304      	adds	r3, #4
 800390e:	2b06      	cmp	r3, #6
 8003910:	d902      	bls.n	8003918 <NVIC_EncodePriority+0x30>
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	3b03      	subs	r3, #3
 8003916:	e000      	b.n	800391a <NVIC_EncodePriority+0x32>
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800391c:	f04f 32ff 	mov.w	r2, #4294967295
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43da      	mvns	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	401a      	ands	r2, r3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003930:	f04f 31ff 	mov.w	r1, #4294967295
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	fa01 f303 	lsl.w	r3, r1, r3
 800393a:	43d9      	mvns	r1, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003940:	4313      	orrs	r3, r2
         );
}
 8003942:	4618      	mov	r0, r3
 8003944:	3724      	adds	r7, #36	; 0x24
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b082      	sub	sp, #8
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3b01      	subs	r3, #1
 800395c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003960:	d301      	bcc.n	8003966 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003962:	2301      	movs	r3, #1
 8003964:	e00f      	b.n	8003986 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003966:	4a0a      	ldr	r2, [pc, #40]	; (8003990 <SysTick_Config+0x40>)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3b01      	subs	r3, #1
 800396c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800396e:	210f      	movs	r1, #15
 8003970:	f04f 30ff 	mov.w	r0, #4294967295
 8003974:	f7ff ff8e 	bl	8003894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <SysTick_Config+0x40>)
 800397a:	2200      	movs	r2, #0
 800397c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800397e:	4b04      	ldr	r3, [pc, #16]	; (8003990 <SysTick_Config+0x40>)
 8003980:	2207      	movs	r2, #7
 8003982:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	e000e010 	.word	0xe000e010

08003994 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff ff29 	bl	80037f4 <__NVIC_SetPriorityGrouping>
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b086      	sub	sp, #24
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	4603      	mov	r3, r0
 80039b2:	60b9      	str	r1, [r7, #8]
 80039b4:	607a      	str	r2, [r7, #4]
 80039b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039bc:	f7ff ff3e 	bl	800383c <__NVIC_GetPriorityGrouping>
 80039c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	68b9      	ldr	r1, [r7, #8]
 80039c6:	6978      	ldr	r0, [r7, #20]
 80039c8:	f7ff ff8e 	bl	80038e8 <NVIC_EncodePriority>
 80039cc:	4602      	mov	r2, r0
 80039ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039d2:	4611      	mov	r1, r2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff ff5d 	bl	8003894 <__NVIC_SetPriority>
}
 80039da:	bf00      	nop
 80039dc:	3718      	adds	r7, #24
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}

080039e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b082      	sub	sp, #8
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	4603      	mov	r3, r0
 80039ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff ff31 	bl	8003858 <__NVIC_EnableIRQ>
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7ff ffa2 	bl	8003950 <SysTick_Config>
 8003a0c:	4603      	mov	r3, r0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3708      	adds	r7, #8
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e054      	b.n	8003ad4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	7f5b      	ldrb	r3, [r3, #29]
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d105      	bne.n	8003a40 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f7ff fc08 	bl	8003250 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2202      	movs	r2, #2
 8003a44:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	791b      	ldrb	r3, [r3, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d10c      	bne.n	8003a68 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a22      	ldr	r2, [pc, #136]	; (8003adc <HAL_CRC_Init+0xc4>)
 8003a54:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0218 	bic.w	r2, r2, #24
 8003a64:	609a      	str	r2, [r3, #8]
 8003a66:	e00c      	b.n	8003a82 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6899      	ldr	r1, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	461a      	mov	r2, r3
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 f834 	bl	8003ae0 <HAL_CRCEx_Polynomial_Set>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d001      	beq.n	8003a82 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e028      	b.n	8003ad4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	795b      	ldrb	r3, [r3, #5]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d105      	bne.n	8003a96 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a92:	611a      	str	r2, [r3, #16]
 8003a94:	e004      	b.n	8003aa0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6912      	ldr	r2, [r2, #16]
 8003a9e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	695a      	ldr	r2, [r3, #20]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	699a      	ldr	r2, [r3, #24]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	04c11db7 	.word	0x04c11db7

08003ae0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003af0:	231f      	movs	r3, #31
 8003af2:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003af4:	bf00      	nop
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1e5a      	subs	r2, r3, #1
 8003afa:	613a      	str	r2, [r7, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d009      	beq.n	8003b14 <HAL_CRCEx_Polynomial_Set+0x34>
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f003 031f 	and.w	r3, r3, #31
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	fa22 f303 	lsr.w	r3, r2, r3
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b18      	cmp	r3, #24
 8003b18:	d846      	bhi.n	8003ba8 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003b1a:	a201      	add	r2, pc, #4	; (adr r2, 8003b20 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b20:	08003baf 	.word	0x08003baf
 8003b24:	08003ba9 	.word	0x08003ba9
 8003b28:	08003ba9 	.word	0x08003ba9
 8003b2c:	08003ba9 	.word	0x08003ba9
 8003b30:	08003ba9 	.word	0x08003ba9
 8003b34:	08003ba9 	.word	0x08003ba9
 8003b38:	08003ba9 	.word	0x08003ba9
 8003b3c:	08003ba9 	.word	0x08003ba9
 8003b40:	08003b9d 	.word	0x08003b9d
 8003b44:	08003ba9 	.word	0x08003ba9
 8003b48:	08003ba9 	.word	0x08003ba9
 8003b4c:	08003ba9 	.word	0x08003ba9
 8003b50:	08003ba9 	.word	0x08003ba9
 8003b54:	08003ba9 	.word	0x08003ba9
 8003b58:	08003ba9 	.word	0x08003ba9
 8003b5c:	08003ba9 	.word	0x08003ba9
 8003b60:	08003b91 	.word	0x08003b91
 8003b64:	08003ba9 	.word	0x08003ba9
 8003b68:	08003ba9 	.word	0x08003ba9
 8003b6c:	08003ba9 	.word	0x08003ba9
 8003b70:	08003ba9 	.word	0x08003ba9
 8003b74:	08003ba9 	.word	0x08003ba9
 8003b78:	08003ba9 	.word	0x08003ba9
 8003b7c:	08003ba9 	.word	0x08003ba9
 8003b80:	08003b85 	.word	0x08003b85
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	2b06      	cmp	r3, #6
 8003b88:	d913      	bls.n	8003bb2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003b8e:	e010      	b.n	8003bb2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	2b07      	cmp	r3, #7
 8003b94:	d90f      	bls.n	8003bb6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003b9a:	e00c      	b.n	8003bb6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	2b0f      	cmp	r3, #15
 8003ba0:	d90b      	bls.n	8003bba <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003ba6:	e008      	b.n	8003bba <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	75fb      	strb	r3, [r7, #23]
      break;
 8003bac:	e006      	b.n	8003bbc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003bae:	bf00      	nop
 8003bb0:	e004      	b.n	8003bbc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003bb2:	bf00      	nop
 8003bb4:	e002      	b.n	8003bbc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003bb6:	bf00      	nop
 8003bb8:	e000      	b.n	8003bbc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003bba:	bf00      	nop
  }
  if (status == HAL_OK)
 8003bbc:	7dfb      	ldrb	r3, [r7, #23]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10d      	bne.n	8003bde <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f023 0118 	bic.w	r1, r3, #24
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	371c      	adds	r7, #28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b087      	sub	sp, #28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bfa:	e17f      	b.n	8003efc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	2101      	movs	r1, #1
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	fa01 f303 	lsl.w	r3, r1, r3
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	f000 8171 	beq.w	8003ef6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d005      	beq.n	8003c2c <HAL_GPIO_Init+0x40>
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d130      	bne.n	8003c8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	005b      	lsls	r3, r3, #1
 8003c36:	2203      	movs	r2, #3
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	4013      	ands	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c62:	2201      	movs	r2, #1
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	091b      	lsrs	r3, r3, #4
 8003c78:	f003 0201 	and.w	r2, r3, #1
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d118      	bne.n	8003ccc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4013      	ands	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	08db      	lsrs	r3, r3, #3
 8003cb6:	f003 0201 	and.w	r2, r3, #1
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d017      	beq.n	8003d08 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	005b      	lsls	r3, r3, #1
 8003ce2:	2203      	movs	r2, #3
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	43db      	mvns	r3, r3
 8003cea:	693a      	ldr	r2, [r7, #16]
 8003cec:	4013      	ands	r3, r2
 8003cee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d123      	bne.n	8003d5c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	08da      	lsrs	r2, r3, #3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3208      	adds	r2, #8
 8003d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d20:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f003 0307 	and.w	r3, r3, #7
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	220f      	movs	r2, #15
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4013      	ands	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f003 0307 	and.w	r3, r3, #7
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	693a      	ldr	r2, [r7, #16]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	08da      	lsrs	r2, r3, #3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3208      	adds	r2, #8
 8003d56:	6939      	ldr	r1, [r7, #16]
 8003d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	2203      	movs	r2, #3
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	43db      	mvns	r3, r3
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	4013      	ands	r3, r2
 8003d72:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 0203 	and.w	r2, r3, #3
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80ac 	beq.w	8003ef6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d9e:	4b5f      	ldr	r3, [pc, #380]	; (8003f1c <HAL_GPIO_Init+0x330>)
 8003da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003da2:	4a5e      	ldr	r2, [pc, #376]	; (8003f1c <HAL_GPIO_Init+0x330>)
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	6613      	str	r3, [r2, #96]	; 0x60
 8003daa:	4b5c      	ldr	r3, [pc, #368]	; (8003f1c <HAL_GPIO_Init+0x330>)
 8003dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	60bb      	str	r3, [r7, #8]
 8003db4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003db6:	4a5a      	ldr	r2, [pc, #360]	; (8003f20 <HAL_GPIO_Init+0x334>)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	089b      	lsrs	r3, r3, #2
 8003dbc:	3302      	adds	r3, #2
 8003dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	f003 0303 	and.w	r3, r3, #3
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	220f      	movs	r2, #15
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003de0:	d025      	beq.n	8003e2e <HAL_GPIO_Init+0x242>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a4f      	ldr	r2, [pc, #316]	; (8003f24 <HAL_GPIO_Init+0x338>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d01f      	beq.n	8003e2a <HAL_GPIO_Init+0x23e>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a4e      	ldr	r2, [pc, #312]	; (8003f28 <HAL_GPIO_Init+0x33c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d019      	beq.n	8003e26 <HAL_GPIO_Init+0x23a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a4d      	ldr	r2, [pc, #308]	; (8003f2c <HAL_GPIO_Init+0x340>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d013      	beq.n	8003e22 <HAL_GPIO_Init+0x236>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a4c      	ldr	r2, [pc, #304]	; (8003f30 <HAL_GPIO_Init+0x344>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00d      	beq.n	8003e1e <HAL_GPIO_Init+0x232>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a4b      	ldr	r2, [pc, #300]	; (8003f34 <HAL_GPIO_Init+0x348>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d007      	beq.n	8003e1a <HAL_GPIO_Init+0x22e>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a4a      	ldr	r2, [pc, #296]	; (8003f38 <HAL_GPIO_Init+0x34c>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d101      	bne.n	8003e16 <HAL_GPIO_Init+0x22a>
 8003e12:	2306      	movs	r3, #6
 8003e14:	e00c      	b.n	8003e30 <HAL_GPIO_Init+0x244>
 8003e16:	2307      	movs	r3, #7
 8003e18:	e00a      	b.n	8003e30 <HAL_GPIO_Init+0x244>
 8003e1a:	2305      	movs	r3, #5
 8003e1c:	e008      	b.n	8003e30 <HAL_GPIO_Init+0x244>
 8003e1e:	2304      	movs	r3, #4
 8003e20:	e006      	b.n	8003e30 <HAL_GPIO_Init+0x244>
 8003e22:	2303      	movs	r3, #3
 8003e24:	e004      	b.n	8003e30 <HAL_GPIO_Init+0x244>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e002      	b.n	8003e30 <HAL_GPIO_Init+0x244>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e000      	b.n	8003e30 <HAL_GPIO_Init+0x244>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	f002 0203 	and.w	r2, r2, #3
 8003e36:	0092      	lsls	r2, r2, #2
 8003e38:	4093      	lsls	r3, r2
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003e40:	4937      	ldr	r1, [pc, #220]	; (8003f20 <HAL_GPIO_Init+0x334>)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	089b      	lsrs	r3, r3, #2
 8003e46:	3302      	adds	r3, #2
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e4e:	4b3b      	ldr	r3, [pc, #236]	; (8003f3c <HAL_GPIO_Init+0x350>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	43db      	mvns	r3, r3
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e72:	4a32      	ldr	r2, [pc, #200]	; (8003f3c <HAL_GPIO_Init+0x350>)
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e78:	4b30      	ldr	r3, [pc, #192]	; (8003f3c <HAL_GPIO_Init+0x350>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	43db      	mvns	r3, r3
 8003e82:	693a      	ldr	r2, [r7, #16]
 8003e84:	4013      	ands	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e9c:	4a27      	ldr	r2, [pc, #156]	; (8003f3c <HAL_GPIO_Init+0x350>)
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003ea2:	4b26      	ldr	r3, [pc, #152]	; (8003f3c <HAL_GPIO_Init+0x350>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	43db      	mvns	r3, r3
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ec6:	4a1d      	ldr	r2, [pc, #116]	; (8003f3c <HAL_GPIO_Init+0x350>)
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003ecc:	4b1b      	ldr	r3, [pc, #108]	; (8003f3c <HAL_GPIO_Init+0x350>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ef0:	4a12      	ldr	r2, [pc, #72]	; (8003f3c <HAL_GPIO_Init+0x350>)
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	fa22 f303 	lsr.w	r3, r2, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f47f ae78 	bne.w	8003bfc <HAL_GPIO_Init+0x10>
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	40010000 	.word	0x40010000
 8003f24:	48000400 	.word	0x48000400
 8003f28:	48000800 	.word	0x48000800
 8003f2c:	48000c00 	.word	0x48000c00
 8003f30:	48001000 	.word	0x48001000
 8003f34:	48001400 	.word	0x48001400
 8003f38:	48001800 	.word	0x48001800
 8003f3c:	40010400 	.word	0x40010400

08003f40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	887b      	ldrh	r3, [r7, #2]
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
 8003f5c:	e001      	b.n	8003f62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	807b      	strh	r3, [r7, #2]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f80:	787b      	ldrb	r3, [r7, #1]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f86:	887a      	ldrh	r2, [r7, #2]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f8c:	e002      	b.n	8003f94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f8e:	887a      	ldrh	r2, [r7, #2]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e081      	b.n	80040b6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d106      	bne.n	8003fcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7ff f962 	bl	8003290 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2224      	movs	r2, #36	; 0x24
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0201 	bic.w	r2, r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685a      	ldr	r2, [r3, #4]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ff0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004000:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d107      	bne.n	800401a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689a      	ldr	r2, [r3, #8]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004016:	609a      	str	r2, [r3, #8]
 8004018:	e006      	b.n	8004028 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689a      	ldr	r2, [r3, #8]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004026:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d104      	bne.n	800403a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004038:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6812      	ldr	r2, [r2, #0]
 8004044:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800404c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800405c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	69d9      	ldr	r1, [r3, #28]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1a      	ldr	r2, [r3, #32]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2220      	movs	r2, #32
 80040a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	4608      	mov	r0, r1
 80040ca:	4611      	mov	r1, r2
 80040cc:	461a      	mov	r2, r3
 80040ce:	4603      	mov	r3, r0
 80040d0:	817b      	strh	r3, [r7, #10]
 80040d2:	460b      	mov	r3, r1
 80040d4:	813b      	strh	r3, [r7, #8]
 80040d6:	4613      	mov	r3, r2
 80040d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b20      	cmp	r3, #32
 80040e4:	f040 80f9 	bne.w	80042da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d002      	beq.n	80040f4 <HAL_I2C_Mem_Write+0x34>
 80040ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d105      	bne.n	8004100 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e0ed      	b.n	80042dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_I2C_Mem_Write+0x4e>
 800410a:	2302      	movs	r3, #2
 800410c:	e0e6      	b.n	80042dc <HAL_I2C_Mem_Write+0x21c>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004116:	f7ff fb3d 	bl	8003794 <HAL_GetTick>
 800411a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	2319      	movs	r3, #25
 8004122:	2201      	movs	r2, #1
 8004124:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 fac3 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d001      	beq.n	8004138 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e0d1      	b.n	80042dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2221      	movs	r2, #33	; 0x21
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2240      	movs	r2, #64	; 0x40
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6a3a      	ldr	r2, [r7, #32]
 8004152:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004158:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004160:	88f8      	ldrh	r0, [r7, #6]
 8004162:	893a      	ldrh	r2, [r7, #8]
 8004164:	8979      	ldrh	r1, [r7, #10]
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	9301      	str	r3, [sp, #4]
 800416a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416c:	9300      	str	r3, [sp, #0]
 800416e:	4603      	mov	r3, r0
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f9d3 	bl	800451c <I2C_RequestMemoryWrite>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e0a9      	b.n	80042dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	2bff      	cmp	r3, #255	; 0xff
 8004190:	d90e      	bls.n	80041b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	22ff      	movs	r2, #255	; 0xff
 8004196:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419c:	b2da      	uxtb	r2, r3
 800419e:	8979      	ldrh	r1, [r7, #10]
 80041a0:	2300      	movs	r3, #0
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 fc2b 	bl	8004a04 <I2C_TransferConfig>
 80041ae:	e00f      	b.n	80041d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	8979      	ldrh	r1, [r7, #10]
 80041c2:	2300      	movs	r3, #0
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 fc1a 	bl	8004a04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 faad 	bl	8004734 <I2C_WaitOnTXISFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e07b      	b.n	80042dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e8:	781a      	ldrb	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420c:	3b01      	subs	r3, #1
 800420e:	b29a      	uxth	r2, r3
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004218:	b29b      	uxth	r3, r3
 800421a:	2b00      	cmp	r3, #0
 800421c:	d034      	beq.n	8004288 <HAL_I2C_Mem_Write+0x1c8>
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004222:	2b00      	cmp	r3, #0
 8004224:	d130      	bne.n	8004288 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800422c:	2200      	movs	r2, #0
 800422e:	2180      	movs	r1, #128	; 0x80
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 fa3f 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e04d      	b.n	80042dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004244:	b29b      	uxth	r3, r3
 8004246:	2bff      	cmp	r3, #255	; 0xff
 8004248:	d90e      	bls.n	8004268 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	22ff      	movs	r2, #255	; 0xff
 800424e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004254:	b2da      	uxtb	r2, r3
 8004256:	8979      	ldrh	r1, [r7, #10]
 8004258:	2300      	movs	r3, #0
 800425a:	9300      	str	r3, [sp, #0]
 800425c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f000 fbcf 	bl	8004a04 <I2C_TransferConfig>
 8004266:	e00f      	b.n	8004288 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004276:	b2da      	uxtb	r2, r3
 8004278:	8979      	ldrh	r1, [r7, #10]
 800427a:	2300      	movs	r3, #0
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 fbbe 	bl	8004a04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d19e      	bne.n	80041d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 fa8c 	bl	80047b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e01a      	b.n	80042dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2220      	movs	r2, #32
 80042ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6859      	ldr	r1, [r3, #4]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <HAL_I2C_Mem_Write+0x224>)
 80042ba:	400b      	ands	r3, r1
 80042bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2220      	movs	r2, #32
 80042c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042d6:	2300      	movs	r3, #0
 80042d8:	e000      	b.n	80042dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80042da:	2302      	movs	r3, #2
  }
}
 80042dc:	4618      	mov	r0, r3
 80042de:	3718      	adds	r7, #24
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	fe00e800 	.word	0xfe00e800

080042e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	4608      	mov	r0, r1
 80042f2:	4611      	mov	r1, r2
 80042f4:	461a      	mov	r2, r3
 80042f6:	4603      	mov	r3, r0
 80042f8:	817b      	strh	r3, [r7, #10]
 80042fa:	460b      	mov	r3, r1
 80042fc:	813b      	strh	r3, [r7, #8]
 80042fe:	4613      	mov	r3, r2
 8004300:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b20      	cmp	r3, #32
 800430c:	f040 80fd 	bne.w	800450a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8004310:	6a3b      	ldr	r3, [r7, #32]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_I2C_Mem_Read+0x34>
 8004316:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004318:	2b00      	cmp	r3, #0
 800431a:	d105      	bne.n	8004328 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004322:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	e0f1      	b.n	800450c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800432e:	2b01      	cmp	r3, #1
 8004330:	d101      	bne.n	8004336 <HAL_I2C_Mem_Read+0x4e>
 8004332:	2302      	movs	r3, #2
 8004334:	e0ea      	b.n	800450c <HAL_I2C_Mem_Read+0x224>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2201      	movs	r2, #1
 800433a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800433e:	f7ff fa29 	bl	8003794 <HAL_GetTick>
 8004342:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	2319      	movs	r3, #25
 800434a:	2201      	movs	r2, #1
 800434c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 f9af 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d001      	beq.n	8004360 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e0d5      	b.n	800450c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2222      	movs	r2, #34	; 0x22
 8004364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2240      	movs	r2, #64	; 0x40
 800436c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2200      	movs	r2, #0
 8004374:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a3a      	ldr	r2, [r7, #32]
 800437a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004380:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004388:	88f8      	ldrh	r0, [r7, #6]
 800438a:	893a      	ldrh	r2, [r7, #8]
 800438c:	8979      	ldrh	r1, [r7, #10]
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	9301      	str	r3, [sp, #4]
 8004392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004394:	9300      	str	r3, [sp, #0]
 8004396:	4603      	mov	r3, r0
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f913 	bl	80045c4 <I2C_RequestMemoryRead>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e0ad      	b.n	800450c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	2bff      	cmp	r3, #255	; 0xff
 80043b8:	d90e      	bls.n	80043d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	22ff      	movs	r2, #255	; 0xff
 80043be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	8979      	ldrh	r1, [r7, #10]
 80043c8:	4b52      	ldr	r3, [pc, #328]	; (8004514 <HAL_I2C_Mem_Read+0x22c>)
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 fb17 	bl	8004a04 <I2C_TransferConfig>
 80043d6:	e00f      	b.n	80043f8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	8979      	ldrh	r1, [r7, #10]
 80043ea:	4b4a      	ldr	r3, [pc, #296]	; (8004514 <HAL_I2C_Mem_Read+0x22c>)
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043f2:	68f8      	ldr	r0, [r7, #12]
 80043f4:	f000 fb06 	bl	8004a04 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	9300      	str	r3, [sp, #0]
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	2200      	movs	r2, #0
 8004400:	2104      	movs	r1, #4
 8004402:	68f8      	ldr	r0, [r7, #12]
 8004404:	f000 f956 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d001      	beq.n	8004412 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e07c      	b.n	800450c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	b2d2      	uxtb	r2, r2
 800441e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442e:	3b01      	subs	r3, #1
 8004430:	b29a      	uxth	r2, r3
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443a:	b29b      	uxth	r3, r3
 800443c:	3b01      	subs	r3, #1
 800443e:	b29a      	uxth	r2, r3
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d034      	beq.n	80044b8 <HAL_I2C_Mem_Read+0x1d0>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004452:	2b00      	cmp	r3, #0
 8004454:	d130      	bne.n	80044b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445c:	2200      	movs	r2, #0
 800445e:	2180      	movs	r1, #128	; 0x80
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 f927 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e04d      	b.n	800450c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	2bff      	cmp	r3, #255	; 0xff
 8004478:	d90e      	bls.n	8004498 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	22ff      	movs	r2, #255	; 0xff
 800447e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004484:	b2da      	uxtb	r2, r3
 8004486:	8979      	ldrh	r1, [r7, #10]
 8004488:	2300      	movs	r3, #0
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 fab7 	bl	8004a04 <I2C_TransferConfig>
 8004496:	e00f      	b.n	80044b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29a      	uxth	r2, r3
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	8979      	ldrh	r1, [r7, #10]
 80044aa:	2300      	movs	r3, #0
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 faa6 	bl	8004a04 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d19a      	bne.n	80043f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 f974 	bl	80047b4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e01a      	b.n	800450c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2220      	movs	r2, #32
 80044dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6859      	ldr	r1, [r3, #4]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4b0b      	ldr	r3, [pc, #44]	; (8004518 <HAL_I2C_Mem_Read+0x230>)
 80044ea:	400b      	ands	r3, r1
 80044ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2220      	movs	r2, #32
 80044f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004506:	2300      	movs	r3, #0
 8004508:	e000      	b.n	800450c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800450a:	2302      	movs	r3, #2
  }
}
 800450c:	4618      	mov	r0, r3
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	80002400 	.word	0x80002400
 8004518:	fe00e800 	.word	0xfe00e800

0800451c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af02      	add	r7, sp, #8
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	4608      	mov	r0, r1
 8004526:	4611      	mov	r1, r2
 8004528:	461a      	mov	r2, r3
 800452a:	4603      	mov	r3, r0
 800452c:	817b      	strh	r3, [r7, #10]
 800452e:	460b      	mov	r3, r1
 8004530:	813b      	strh	r3, [r7, #8]
 8004532:	4613      	mov	r3, r2
 8004534:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004536:	88fb      	ldrh	r3, [r7, #6]
 8004538:	b2da      	uxtb	r2, r3
 800453a:	8979      	ldrh	r1, [r7, #10]
 800453c:	4b20      	ldr	r3, [pc, #128]	; (80045c0 <I2C_RequestMemoryWrite+0xa4>)
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 fa5d 	bl	8004a04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800454a:	69fa      	ldr	r2, [r7, #28]
 800454c:	69b9      	ldr	r1, [r7, #24]
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f8f0 	bl	8004734 <I2C_WaitOnTXISFlagUntilTimeout>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e02c      	b.n	80045b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800455e:	88fb      	ldrh	r3, [r7, #6]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d105      	bne.n	8004570 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004564:	893b      	ldrh	r3, [r7, #8]
 8004566:	b2da      	uxtb	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	629a      	str	r2, [r3, #40]	; 0x28
 800456e:	e015      	b.n	800459c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004570:	893b      	ldrh	r3, [r7, #8]
 8004572:	0a1b      	lsrs	r3, r3, #8
 8004574:	b29b      	uxth	r3, r3
 8004576:	b2da      	uxtb	r2, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800457e:	69fa      	ldr	r2, [r7, #28]
 8004580:	69b9      	ldr	r1, [r7, #24]
 8004582:	68f8      	ldr	r0, [r7, #12]
 8004584:	f000 f8d6 	bl	8004734 <I2C_WaitOnTXISFlagUntilTimeout>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e012      	b.n	80045b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004592:	893b      	ldrh	r3, [r7, #8]
 8004594:	b2da      	uxtb	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2200      	movs	r2, #0
 80045a4:	2180      	movs	r1, #128	; 0x80
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f884 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	80002000 	.word	0x80002000

080045c4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	4608      	mov	r0, r1
 80045ce:	4611      	mov	r1, r2
 80045d0:	461a      	mov	r2, r3
 80045d2:	4603      	mov	r3, r0
 80045d4:	817b      	strh	r3, [r7, #10]
 80045d6:	460b      	mov	r3, r1
 80045d8:	813b      	strh	r3, [r7, #8]
 80045da:	4613      	mov	r3, r2
 80045dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80045de:	88fb      	ldrh	r3, [r7, #6]
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	8979      	ldrh	r1, [r7, #10]
 80045e4:	4b20      	ldr	r3, [pc, #128]	; (8004668 <I2C_RequestMemoryRead+0xa4>)
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	2300      	movs	r3, #0
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f000 fa0a 	bl	8004a04 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045f0:	69fa      	ldr	r2, [r7, #28]
 80045f2:	69b9      	ldr	r1, [r7, #24]
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f89d 	bl	8004734 <I2C_WaitOnTXISFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e02c      	b.n	800465e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004604:	88fb      	ldrh	r3, [r7, #6]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d105      	bne.n	8004616 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800460a:	893b      	ldrh	r3, [r7, #8]
 800460c:	b2da      	uxtb	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	629a      	str	r2, [r3, #40]	; 0x28
 8004614:	e015      	b.n	8004642 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004616:	893b      	ldrh	r3, [r7, #8]
 8004618:	0a1b      	lsrs	r3, r3, #8
 800461a:	b29b      	uxth	r3, r3
 800461c:	b2da      	uxtb	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004624:	69fa      	ldr	r2, [r7, #28]
 8004626:	69b9      	ldr	r1, [r7, #24]
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f000 f883 	bl	8004734 <I2C_WaitOnTXISFlagUntilTimeout>
 800462e:	4603      	mov	r3, r0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e012      	b.n	800465e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004638:	893b      	ldrh	r3, [r7, #8]
 800463a:	b2da      	uxtb	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	69bb      	ldr	r3, [r7, #24]
 8004648:	2200      	movs	r2, #0
 800464a:	2140      	movs	r1, #64	; 0x40
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f000 f831 	bl	80046b4 <I2C_WaitOnFlagUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e000      	b.n	800465e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	80002000 	.word	0x80002000

0800466c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b02      	cmp	r3, #2
 8004680:	d103      	bne.n	800468a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2200      	movs	r2, #0
 8004688:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b01      	cmp	r3, #1
 8004696:	d007      	beq.n	80046a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	699a      	ldr	r2, [r3, #24]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0201 	orr.w	r2, r2, #1
 80046a6:	619a      	str	r2, [r3, #24]
  }
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	4613      	mov	r3, r2
 80046c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046c4:	e022      	b.n	800470c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046cc:	d01e      	beq.n	800470c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ce:	f7ff f861 	bl	8003794 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d302      	bcc.n	80046e4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d113      	bne.n	800470c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e8:	f043 0220 	orr.w	r2, r3, #32
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e00f      	b.n	800472c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699a      	ldr	r2, [r3, #24]
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	4013      	ands	r3, r2
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	429a      	cmp	r2, r3
 800471a:	bf0c      	ite	eq
 800471c:	2301      	moveq	r3, #1
 800471e:	2300      	movne	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	461a      	mov	r2, r3
 8004724:	79fb      	ldrb	r3, [r7, #7]
 8004726:	429a      	cmp	r2, r3
 8004728:	d0cd      	beq.n	80046c6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004740:	e02c      	b.n	800479c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	68b9      	ldr	r1, [r7, #8]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f000 f870 	bl	800482c <I2C_IsErrorOccurred>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e02a      	b.n	80047ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475c:	d01e      	beq.n	800479c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800475e:	f7ff f819 	bl	8003794 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	429a      	cmp	r2, r3
 800476c:	d302      	bcc.n	8004774 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d113      	bne.n	800479c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004778:	f043 0220 	orr.w	r2, r3, #32
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	e007      	b.n	80047ac <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b02      	cmp	r3, #2
 80047a8:	d1cb      	bne.n	8004742 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047c0:	e028      	b.n	8004814 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 f830 	bl	800482c <I2C_IsErrorOccurred>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e026      	b.n	8004824 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d6:	f7fe ffdd 	bl	8003794 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d302      	bcc.n	80047ec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d113      	bne.n	8004814 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f0:	f043 0220 	orr.w	r2, r3, #32
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e007      	b.n	8004824 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	f003 0320 	and.w	r3, r3, #32
 800481e:	2b20      	cmp	r3, #32
 8004820:	d1cf      	bne.n	80047c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b08a      	sub	sp, #40	; 0x28
 8004830:	af00      	add	r7, sp, #0
 8004832:	60f8      	str	r0, [r7, #12]
 8004834:	60b9      	str	r1, [r7, #8]
 8004836:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004846:	2300      	movs	r3, #0
 8004848:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2b00      	cmp	r3, #0
 8004856:	d075      	beq.n	8004944 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2210      	movs	r2, #16
 800485e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004860:	e056      	b.n	8004910 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004868:	d052      	beq.n	8004910 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800486a:	f7fe ff93 	bl	8003794 <HAL_GetTick>
 800486e:	4602      	mov	r2, r0
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	1ad3      	subs	r3, r2, r3
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	429a      	cmp	r2, r3
 8004878:	d302      	bcc.n	8004880 <I2C_IsErrorOccurred+0x54>
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d147      	bne.n	8004910 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800488a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004892:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800489e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048a2:	d12e      	bne.n	8004902 <I2C_IsErrorOccurred+0xd6>
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048aa:	d02a      	beq.n	8004902 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80048ac:	7cfb      	ldrb	r3, [r7, #19]
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	d027      	beq.n	8004902 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048c0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048c2:	f7fe ff67 	bl	8003794 <HAL_GetTick>
 80048c6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048c8:	e01b      	b.n	8004902 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048ca:	f7fe ff63 	bl	8003794 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b19      	cmp	r3, #25
 80048d6:	d914      	bls.n	8004902 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048dc:	f043 0220 	orr.w	r2, r3, #32
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	699b      	ldr	r3, [r3, #24]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b20      	cmp	r3, #32
 800490e:	d1dc      	bne.n	80048ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b20      	cmp	r3, #32
 800491c:	d003      	beq.n	8004926 <I2C_IsErrorOccurred+0xfa>
 800491e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004922:	2b00      	cmp	r3, #0
 8004924:	d09d      	beq.n	8004862 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800492a:	2b00      	cmp	r3, #0
 800492c:	d103      	bne.n	8004936 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2220      	movs	r2, #32
 8004934:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	f043 0304 	orr.w	r3, r3, #4
 800493c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699b      	ldr	r3, [r3, #24]
 800494a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00b      	beq.n	800496e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	f043 0301 	orr.w	r3, r3, #1
 800495c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004966:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00b      	beq.n	8004990 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	f043 0308 	orr.w	r3, r3, #8
 800497e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004988:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00b      	beq.n	80049b2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	f043 0302 	orr.w	r3, r3, #2
 80049a0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80049b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d01c      	beq.n	80049f4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049ba:	68f8      	ldr	r0, [r7, #12]
 80049bc:	f7ff fe56 	bl	800466c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6859      	ldr	r1, [r3, #4]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	4b0d      	ldr	r3, [pc, #52]	; (8004a00 <I2C_IsErrorOccurred+0x1d4>)
 80049cc:	400b      	ands	r3, r1
 80049ce:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	431a      	orrs	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2220      	movs	r2, #32
 80049e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80049f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3728      	adds	r7, #40	; 0x28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	fe00e800 	.word	0xfe00e800

08004a04 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	607b      	str	r3, [r7, #4]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	817b      	strh	r3, [r7, #10]
 8004a12:	4613      	mov	r3, r2
 8004a14:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a16:	897b      	ldrh	r3, [r7, #10]
 8004a18:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a1c:	7a7b      	ldrb	r3, [r7, #9]
 8004a1e:	041b      	lsls	r3, r3, #16
 8004a20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a24:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a2a:	6a3b      	ldr	r3, [r7, #32]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a32:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	0d5b      	lsrs	r3, r3, #21
 8004a3e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a42:	4b08      	ldr	r3, [pc, #32]	; (8004a64 <I2C_TransferConfig+0x60>)
 8004a44:	430b      	orrs	r3, r1
 8004a46:	43db      	mvns	r3, r3
 8004a48:	ea02 0103 	and.w	r1, r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	697a      	ldr	r2, [r7, #20]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a56:	bf00      	nop
 8004a58:	371c      	adds	r7, #28
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	03ff63ff 	.word	0x03ff63ff

08004a68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	2b20      	cmp	r3, #32
 8004a7c:	d138      	bne.n	8004af0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	d101      	bne.n	8004a8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a88:	2302      	movs	r3, #2
 8004a8a:	e032      	b.n	8004af2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2224      	movs	r2, #36	; 0x24
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f022 0201 	bic.w	r2, r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004aba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6819      	ldr	r1, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0201 	orr.w	r2, r2, #1
 8004ada:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004aec:	2300      	movs	r3, #0
 8004aee:	e000      	b.n	8004af2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004af0:	2302      	movs	r3, #2
  }
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b085      	sub	sp, #20
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
 8004b06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	d139      	bne.n	8004b88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d101      	bne.n	8004b22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b1e:	2302      	movs	r3, #2
 8004b20:	e033      	b.n	8004b8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2201      	movs	r2, #1
 8004b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2224      	movs	r2, #36	; 0x24
 8004b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0201 	bic.w	r2, r2, #1
 8004b40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68fa      	ldr	r2, [r7, #12]
 8004b62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0201 	orr.w	r2, r2, #1
 8004b72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2220      	movs	r2, #32
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b84:	2300      	movs	r3, #0
 8004b86:	e000      	b.n	8004b8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b88:	2302      	movs	r3, #2
  }
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
	...

08004b98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004b9c:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	40007000 	.word	0x40007000

08004bb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bc2:	d130      	bne.n	8004c26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bc4:	4b23      	ldr	r3, [pc, #140]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bd0:	d038      	beq.n	8004c44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bd2:	4b20      	ldr	r3, [pc, #128]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004bda:	4a1e      	ldr	r2, [pc, #120]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004be0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004be2:	4b1d      	ldr	r3, [pc, #116]	; (8004c58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2232      	movs	r2, #50	; 0x32
 8004be8:	fb02 f303 	mul.w	r3, r2, r3
 8004bec:	4a1b      	ldr	r2, [pc, #108]	; (8004c5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004bee:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf2:	0c9b      	lsrs	r3, r3, #18
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bf8:	e002      	b.n	8004c00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c00:	4b14      	ldr	r3, [pc, #80]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c0c:	d102      	bne.n	8004c14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1f2      	bne.n	8004bfa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c14:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c20:	d110      	bne.n	8004c44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e00f      	b.n	8004c46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c26:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c32:	d007      	beq.n	8004c44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c34:	4b07      	ldr	r3, [pc, #28]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c3c:	4a05      	ldr	r2, [pc, #20]	; (8004c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	40007000 	.word	0x40007000
 8004c58:	20001600 	.word	0x20001600
 8004c5c:	431bde83 	.word	0x431bde83

08004c60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b088      	sub	sp, #32
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e3d8      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c72:	4b97      	ldr	r3, [pc, #604]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 030c 	and.w	r3, r3, #12
 8004c7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c7c:	4b94      	ldr	r3, [pc, #592]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0303 	and.w	r3, r3, #3
 8004c84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 80e4 	beq.w	8004e5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c94:	69bb      	ldr	r3, [r7, #24]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d007      	beq.n	8004caa <HAL_RCC_OscConfig+0x4a>
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	2b0c      	cmp	r3, #12
 8004c9e:	f040 808b 	bne.w	8004db8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	f040 8087 	bne.w	8004db8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004caa:	4b89      	ldr	r3, [pc, #548]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d005      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x62>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e3b0      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6a1a      	ldr	r2, [r3, #32]
 8004cc6:	4b82      	ldr	r3, [pc, #520]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d004      	beq.n	8004cdc <HAL_RCC_OscConfig+0x7c>
 8004cd2:	4b7f      	ldr	r3, [pc, #508]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cda:	e005      	b.n	8004ce8 <HAL_RCC_OscConfig+0x88>
 8004cdc:	4b7c      	ldr	r3, [pc, #496]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004cde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ce2:	091b      	lsrs	r3, r3, #4
 8004ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d223      	bcs.n	8004d34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f000 fd43 	bl	800577c <RCC_SetFlashLatencyFromMSIRange>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e391      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d00:	4b73      	ldr	r3, [pc, #460]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a72      	ldr	r2, [pc, #456]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004d06:	f043 0308 	orr.w	r3, r3, #8
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	4b70      	ldr	r3, [pc, #448]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	496d      	ldr	r1, [pc, #436]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d1e:	4b6c      	ldr	r3, [pc, #432]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	69db      	ldr	r3, [r3, #28]
 8004d2a:	021b      	lsls	r3, r3, #8
 8004d2c:	4968      	ldr	r1, [pc, #416]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	604b      	str	r3, [r1, #4]
 8004d32:	e025      	b.n	8004d80 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d34:	4b66      	ldr	r3, [pc, #408]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a65      	ldr	r2, [pc, #404]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004d3a:	f043 0308 	orr.w	r3, r3, #8
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	4b63      	ldr	r3, [pc, #396]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a1b      	ldr	r3, [r3, #32]
 8004d4c:	4960      	ldr	r1, [pc, #384]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d52:	4b5f      	ldr	r3, [pc, #380]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	021b      	lsls	r3, r3, #8
 8004d60:	495b      	ldr	r1, [pc, #364]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d109      	bne.n	8004d80 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a1b      	ldr	r3, [r3, #32]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fd03 	bl	800577c <RCC_SetFlashLatencyFromMSIRange>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e351      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d80:	f000 fc38 	bl	80055f4 <HAL_RCC_GetSysClockFreq>
 8004d84:	4602      	mov	r2, r0
 8004d86:	4b52      	ldr	r3, [pc, #328]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	091b      	lsrs	r3, r3, #4
 8004d8c:	f003 030f 	and.w	r3, r3, #15
 8004d90:	4950      	ldr	r1, [pc, #320]	; (8004ed4 <HAL_RCC_OscConfig+0x274>)
 8004d92:	5ccb      	ldrb	r3, [r1, r3]
 8004d94:	f003 031f 	and.w	r3, r3, #31
 8004d98:	fa22 f303 	lsr.w	r3, r2, r3
 8004d9c:	4a4e      	ldr	r2, [pc, #312]	; (8004ed8 <HAL_RCC_OscConfig+0x278>)
 8004d9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004da0:	4b4e      	ldr	r3, [pc, #312]	; (8004edc <HAL_RCC_OscConfig+0x27c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7fe fca5 	bl	80036f4 <HAL_InitTick>
 8004daa:	4603      	mov	r3, r0
 8004dac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d052      	beq.n	8004e5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	e335      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d032      	beq.n	8004e26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004dc0:	4b43      	ldr	r3, [pc, #268]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a42      	ldr	r2, [pc, #264]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004dc6:	f043 0301 	orr.w	r3, r3, #1
 8004dca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004dcc:	f7fe fce2 	bl	8003794 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004dd4:	f7fe fcde 	bl	8003794 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e31e      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004de6:	4b3a      	ldr	r3, [pc, #232]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d0f0      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004df2:	4b37      	ldr	r3, [pc, #220]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a36      	ldr	r2, [pc, #216]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004df8:	f043 0308 	orr.w	r3, r3, #8
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	4b34      	ldr	r3, [pc, #208]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	4931      	ldr	r1, [pc, #196]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e10:	4b2f      	ldr	r3, [pc, #188]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	021b      	lsls	r3, r3, #8
 8004e1e:	492c      	ldr	r1, [pc, #176]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	604b      	str	r3, [r1, #4]
 8004e24:	e01a      	b.n	8004e5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e26:	4b2a      	ldr	r3, [pc, #168]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a29      	ldr	r2, [pc, #164]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004e2c:	f023 0301 	bic.w	r3, r3, #1
 8004e30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e32:	f7fe fcaf 	bl	8003794 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e3a:	f7fe fcab 	bl	8003794 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e2eb      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e4c:	4b20      	ldr	r3, [pc, #128]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1f0      	bne.n	8004e3a <HAL_RCC_OscConfig+0x1da>
 8004e58:	e000      	b.n	8004e5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d074      	beq.n	8004f52 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d005      	beq.n	8004e7a <HAL_RCC_OscConfig+0x21a>
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	2b0c      	cmp	r3, #12
 8004e72:	d10e      	bne.n	8004e92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	d10b      	bne.n	8004e92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e7a:	4b15      	ldr	r3, [pc, #84]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d064      	beq.n	8004f50 <HAL_RCC_OscConfig+0x2f0>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d160      	bne.n	8004f50 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e2c8      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e9a:	d106      	bne.n	8004eaa <HAL_RCC_OscConfig+0x24a>
 8004e9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a0b      	ldr	r2, [pc, #44]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004ea2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	e026      	b.n	8004ef8 <HAL_RCC_OscConfig+0x298>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004eb2:	d115      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x280>
 8004eb4:	4b06      	ldr	r3, [pc, #24]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a05      	ldr	r2, [pc, #20]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004eba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ebe:	6013      	str	r3, [r2, #0]
 8004ec0:	4b03      	ldr	r3, [pc, #12]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a02      	ldr	r2, [pc, #8]	; (8004ed0 <HAL_RCC_OscConfig+0x270>)
 8004ec6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eca:	6013      	str	r3, [r2, #0]
 8004ecc:	e014      	b.n	8004ef8 <HAL_RCC_OscConfig+0x298>
 8004ece:	bf00      	nop
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	08014e8c 	.word	0x08014e8c
 8004ed8:	20001600 	.word	0x20001600
 8004edc:	20001604 	.word	0x20001604
 8004ee0:	4ba0      	ldr	r3, [pc, #640]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a9f      	ldr	r2, [pc, #636]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8004ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	4b9d      	ldr	r3, [pc, #628]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a9c      	ldr	r2, [pc, #624]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8004ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d013      	beq.n	8004f28 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f00:	f7fe fc48 	bl	8003794 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f08:	f7fe fc44 	bl	8003794 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b64      	cmp	r3, #100	; 0x64
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e284      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f1a:	4b92      	ldr	r3, [pc, #584]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f0      	beq.n	8004f08 <HAL_RCC_OscConfig+0x2a8>
 8004f26:	e014      	b.n	8004f52 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f28:	f7fe fc34 	bl	8003794 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f30:	f7fe fc30 	bl	8003794 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b64      	cmp	r3, #100	; 0x64
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e270      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f42:	4b88      	ldr	r3, [pc, #544]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <HAL_RCC_OscConfig+0x2d0>
 8004f4e:	e000      	b.n	8004f52 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d060      	beq.n	8005020 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	d005      	beq.n	8004f70 <HAL_RCC_OscConfig+0x310>
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	2b0c      	cmp	r3, #12
 8004f68:	d119      	bne.n	8004f9e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d116      	bne.n	8004f9e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f70:	4b7c      	ldr	r3, [pc, #496]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d005      	beq.n	8004f88 <HAL_RCC_OscConfig+0x328>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e24d      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f88:	4b76      	ldr	r3, [pc, #472]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	061b      	lsls	r3, r3, #24
 8004f96:	4973      	ldr	r1, [pc, #460]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f9c:	e040      	b.n	8005020 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d023      	beq.n	8004fee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fa6:	4b6f      	ldr	r3, [pc, #444]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a6e      	ldr	r2, [pc, #440]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8004fac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb2:	f7fe fbef 	bl	8003794 <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fba:	f7fe fbeb 	bl	8003794 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e22b      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fcc:	4b65      	ldr	r3, [pc, #404]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0f0      	beq.n	8004fba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd8:	4b62      	ldr	r3, [pc, #392]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	061b      	lsls	r3, r3, #24
 8004fe6:	495f      	ldr	r1, [pc, #380]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	604b      	str	r3, [r1, #4]
 8004fec:	e018      	b.n	8005020 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fee:	4b5d      	ldr	r3, [pc, #372]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a5c      	ldr	r2, [pc, #368]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8004ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffa:	f7fe fbcb 	bl	8003794 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005002:	f7fe fbc7 	bl	8003794 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e207      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005014:	4b53      	ldr	r3, [pc, #332]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1f0      	bne.n	8005002 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b00      	cmp	r3, #0
 800502a:	d03c      	beq.n	80050a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d01c      	beq.n	800506e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005034:	4b4b      	ldr	r3, [pc, #300]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8005036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800503a:	4a4a      	ldr	r2, [pc, #296]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 800503c:	f043 0301 	orr.w	r3, r3, #1
 8005040:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005044:	f7fe fba6 	bl	8003794 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800504c:	f7fe fba2 	bl	8003794 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e1e2      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800505e:	4b41      	ldr	r3, [pc, #260]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8005060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0ef      	beq.n	800504c <HAL_RCC_OscConfig+0x3ec>
 800506c:	e01b      	b.n	80050a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800506e:	4b3d      	ldr	r3, [pc, #244]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8005070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005074:	4a3b      	ldr	r2, [pc, #236]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8005076:	f023 0301 	bic.w	r3, r3, #1
 800507a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507e:	f7fe fb89 	bl	8003794 <HAL_GetTick>
 8005082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005084:	e008      	b.n	8005098 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005086:	f7fe fb85 	bl	8003794 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e1c5      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005098:	4b32      	ldr	r3, [pc, #200]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 800509a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1ef      	bne.n	8005086 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 80a6 	beq.w	8005200 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050b4:	2300      	movs	r3, #0
 80050b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80050b8:	4b2a      	ldr	r3, [pc, #168]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 80050ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10d      	bne.n	80050e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050c4:	4b27      	ldr	r3, [pc, #156]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 80050c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c8:	4a26      	ldr	r2, [pc, #152]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 80050ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050ce:	6593      	str	r3, [r2, #88]	; 0x58
 80050d0:	4b24      	ldr	r3, [pc, #144]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 80050d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d8:	60bb      	str	r3, [r7, #8]
 80050da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050dc:	2301      	movs	r3, #1
 80050de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050e0:	4b21      	ldr	r3, [pc, #132]	; (8005168 <HAL_RCC_OscConfig+0x508>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d118      	bne.n	800511e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050ec:	4b1e      	ldr	r3, [pc, #120]	; (8005168 <HAL_RCC_OscConfig+0x508>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a1d      	ldr	r2, [pc, #116]	; (8005168 <HAL_RCC_OscConfig+0x508>)
 80050f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050f8:	f7fe fb4c 	bl	8003794 <HAL_GetTick>
 80050fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050fe:	e008      	b.n	8005112 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005100:	f7fe fb48 	bl	8003794 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d901      	bls.n	8005112 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e188      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005112:	4b15      	ldr	r3, [pc, #84]	; (8005168 <HAL_RCC_OscConfig+0x508>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0f0      	beq.n	8005100 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d108      	bne.n	8005138 <HAL_RCC_OscConfig+0x4d8>
 8005126:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8005128:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800512c:	4a0d      	ldr	r2, [pc, #52]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 800512e:	f043 0301 	orr.w	r3, r3, #1
 8005132:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005136:	e029      	b.n	800518c <HAL_RCC_OscConfig+0x52c>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	2b05      	cmp	r3, #5
 800513e:	d115      	bne.n	800516c <HAL_RCC_OscConfig+0x50c>
 8005140:	4b08      	ldr	r3, [pc, #32]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8005142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005146:	4a07      	ldr	r2, [pc, #28]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8005148:	f043 0304 	orr.w	r3, r3, #4
 800514c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005150:	4b04      	ldr	r3, [pc, #16]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8005152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005156:	4a03      	ldr	r2, [pc, #12]	; (8005164 <HAL_RCC_OscConfig+0x504>)
 8005158:	f043 0301 	orr.w	r3, r3, #1
 800515c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005160:	e014      	b.n	800518c <HAL_RCC_OscConfig+0x52c>
 8005162:	bf00      	nop
 8005164:	40021000 	.word	0x40021000
 8005168:	40007000 	.word	0x40007000
 800516c:	4b91      	ldr	r3, [pc, #580]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 800516e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005172:	4a90      	ldr	r2, [pc, #576]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 8005174:	f023 0301 	bic.w	r3, r3, #1
 8005178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800517c:	4b8d      	ldr	r3, [pc, #564]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 800517e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005182:	4a8c      	ldr	r2, [pc, #560]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 8005184:	f023 0304 	bic.w	r3, r3, #4
 8005188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d016      	beq.n	80051c2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005194:	f7fe fafe 	bl	8003794 <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800519a:	e00a      	b.n	80051b2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519c:	f7fe fafa 	bl	8003794 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e138      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051b2:	4b80      	ldr	r3, [pc, #512]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 80051b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d0ed      	beq.n	800519c <HAL_RCC_OscConfig+0x53c>
 80051c0:	e015      	b.n	80051ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051c2:	f7fe fae7 	bl	8003794 <HAL_GetTick>
 80051c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051c8:	e00a      	b.n	80051e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ca:	f7fe fae3 	bl	8003794 <HAL_GetTick>
 80051ce:	4602      	mov	r2, r0
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	1ad3      	subs	r3, r2, r3
 80051d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d8:	4293      	cmp	r3, r2
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e121      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051e0:	4b74      	ldr	r3, [pc, #464]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 80051e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1ed      	bne.n	80051ca <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051ee:	7ffb      	ldrb	r3, [r7, #31]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d105      	bne.n	8005200 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051f4:	4b6f      	ldr	r3, [pc, #444]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 80051f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051f8:	4a6e      	ldr	r2, [pc, #440]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 80051fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 810c 	beq.w	8005422 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	2b02      	cmp	r3, #2
 8005210:	f040 80d4 	bne.w	80053bc <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005214:	4b67      	ldr	r3, [pc, #412]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f003 0203 	and.w	r2, r3, #3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	429a      	cmp	r2, r3
 8005226:	d130      	bne.n	800528a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005232:	3b01      	subs	r3, #1
 8005234:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005236:	429a      	cmp	r2, r3
 8005238:	d127      	bne.n	800528a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005244:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005246:	429a      	cmp	r2, r3
 8005248:	d11f      	bne.n	800528a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005254:	2a07      	cmp	r2, #7
 8005256:	bf14      	ite	ne
 8005258:	2201      	movne	r2, #1
 800525a:	2200      	moveq	r2, #0
 800525c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800525e:	4293      	cmp	r3, r2
 8005260:	d113      	bne.n	800528a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526c:	085b      	lsrs	r3, r3, #1
 800526e:	3b01      	subs	r3, #1
 8005270:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005272:	429a      	cmp	r2, r3
 8005274:	d109      	bne.n	800528a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005280:	085b      	lsrs	r3, r3, #1
 8005282:	3b01      	subs	r3, #1
 8005284:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005286:	429a      	cmp	r2, r3
 8005288:	d06e      	beq.n	8005368 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	2b0c      	cmp	r3, #12
 800528e:	d069      	beq.n	8005364 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005290:	4b48      	ldr	r3, [pc, #288]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d105      	bne.n	80052a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800529c:	4b45      	ldr	r3, [pc, #276]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e0bb      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80052ac:	4b41      	ldr	r3, [pc, #260]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a40      	ldr	r2, [pc, #256]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 80052b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052b8:	f7fe fa6c 	bl	8003794 <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c0:	f7fe fa68 	bl	8003794 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b02      	cmp	r3, #2
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e0a8      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80052d2:	4b38      	ldr	r3, [pc, #224]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f0      	bne.n	80052c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052de:	4b35      	ldr	r3, [pc, #212]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	4b35      	ldr	r3, [pc, #212]	; (80053b8 <HAL_RCC_OscConfig+0x758>)
 80052e4:	4013      	ands	r3, r2
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80052ee:	3a01      	subs	r2, #1
 80052f0:	0112      	lsls	r2, r2, #4
 80052f2:	4311      	orrs	r1, r2
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80052f8:	0212      	lsls	r2, r2, #8
 80052fa:	4311      	orrs	r1, r2
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005300:	0852      	lsrs	r2, r2, #1
 8005302:	3a01      	subs	r2, #1
 8005304:	0552      	lsls	r2, r2, #21
 8005306:	4311      	orrs	r1, r2
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800530c:	0852      	lsrs	r2, r2, #1
 800530e:	3a01      	subs	r2, #1
 8005310:	0652      	lsls	r2, r2, #25
 8005312:	4311      	orrs	r1, r2
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005318:	0912      	lsrs	r2, r2, #4
 800531a:	0452      	lsls	r2, r2, #17
 800531c:	430a      	orrs	r2, r1
 800531e:	4925      	ldr	r1, [pc, #148]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 8005320:	4313      	orrs	r3, r2
 8005322:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005324:	4b23      	ldr	r3, [pc, #140]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a22      	ldr	r2, [pc, #136]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 800532a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800532e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005330:	4b20      	ldr	r3, [pc, #128]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	4a1f      	ldr	r2, [pc, #124]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 8005336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800533a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800533c:	f7fe fa2a 	bl	8003794 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005344:	f7fe fa26 	bl	8003794 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e066      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005356:	4b17      	ldr	r3, [pc, #92]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0f0      	beq.n	8005344 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005362:	e05e      	b.n	8005422 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e05d      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005368:	4b12      	ldr	r3, [pc, #72]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d156      	bne.n	8005422 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005374:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a0e      	ldr	r2, [pc, #56]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 800537a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800537e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005380:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	4a0b      	ldr	r2, [pc, #44]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 8005386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800538a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800538c:	f7fe fa02 	bl	8003794 <HAL_GetTick>
 8005390:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005392:	e008      	b.n	80053a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005394:	f7fe f9fe 	bl	8003794 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d901      	bls.n	80053a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e03e      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053a6:	4b03      	ldr	r3, [pc, #12]	; (80053b4 <HAL_RCC_OscConfig+0x754>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0f0      	beq.n	8005394 <HAL_RCC_OscConfig+0x734>
 80053b2:	e036      	b.n	8005422 <HAL_RCC_OscConfig+0x7c2>
 80053b4:	40021000 	.word	0x40021000
 80053b8:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	2b0c      	cmp	r3, #12
 80053c0:	d02d      	beq.n	800541e <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c2:	4b1a      	ldr	r3, [pc, #104]	; (800542c <HAL_RCC_OscConfig+0x7cc>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a19      	ldr	r2, [pc, #100]	; (800542c <HAL_RCC_OscConfig+0x7cc>)
 80053c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053cc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80053ce:	4b17      	ldr	r3, [pc, #92]	; (800542c <HAL_RCC_OscConfig+0x7cc>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d105      	bne.n	80053e6 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80053da:	4b14      	ldr	r3, [pc, #80]	; (800542c <HAL_RCC_OscConfig+0x7cc>)
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	4a13      	ldr	r2, [pc, #76]	; (800542c <HAL_RCC_OscConfig+0x7cc>)
 80053e0:	f023 0303 	bic.w	r3, r3, #3
 80053e4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80053e6:	4b11      	ldr	r3, [pc, #68]	; (800542c <HAL_RCC_OscConfig+0x7cc>)
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	4a10      	ldr	r2, [pc, #64]	; (800542c <HAL_RCC_OscConfig+0x7cc>)
 80053ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80053f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053f6:	f7fe f9cd 	bl	8003794 <HAL_GetTick>
 80053fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053fc:	e008      	b.n	8005410 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053fe:	f7fe f9c9 	bl	8003794 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	2b02      	cmp	r3, #2
 800540a:	d901      	bls.n	8005410 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e009      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005410:	4b06      	ldr	r3, [pc, #24]	; (800542c <HAL_RCC_OscConfig+0x7cc>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1f0      	bne.n	80053fe <HAL_RCC_OscConfig+0x79e>
 800541c:	e001      	b.n	8005422 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3720      	adds	r7, #32
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40021000 	.word	0x40021000

08005430 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e0c8      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005444:	4b66      	ldr	r3, [pc, #408]	; (80055e0 <HAL_RCC_ClockConfig+0x1b0>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	683a      	ldr	r2, [r7, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d910      	bls.n	8005474 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005452:	4b63      	ldr	r3, [pc, #396]	; (80055e0 <HAL_RCC_ClockConfig+0x1b0>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f023 0207 	bic.w	r2, r3, #7
 800545a:	4961      	ldr	r1, [pc, #388]	; (80055e0 <HAL_RCC_ClockConfig+0x1b0>)
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	4313      	orrs	r3, r2
 8005460:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005462:	4b5f      	ldr	r3, [pc, #380]	; (80055e0 <HAL_RCC_ClockConfig+0x1b0>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	429a      	cmp	r2, r3
 800546e:	d001      	beq.n	8005474 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e0b0      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d04c      	beq.n	800551a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2b03      	cmp	r3, #3
 8005486:	d107      	bne.n	8005498 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005488:	4b56      	ldr	r3, [pc, #344]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005490:	2b00      	cmp	r3, #0
 8005492:	d121      	bne.n	80054d8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e09e      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2b02      	cmp	r3, #2
 800549e:	d107      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054a0:	4b50      	ldr	r3, [pc, #320]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d115      	bne.n	80054d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e092      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d107      	bne.n	80054c8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054b8:	4b4a      	ldr	r3, [pc, #296]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d109      	bne.n	80054d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e086      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054c8:	4b46      	ldr	r3, [pc, #280]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d101      	bne.n	80054d8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e07e      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80054d8:	4b42      	ldr	r3, [pc, #264]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f023 0203 	bic.w	r2, r3, #3
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	493f      	ldr	r1, [pc, #252]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054ea:	f7fe f953 	bl	8003794 <HAL_GetTick>
 80054ee:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f0:	e00a      	b.n	8005508 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054f2:	f7fe f94f 	bl	8003794 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005500:	4293      	cmp	r3, r2
 8005502:	d901      	bls.n	8005508 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e066      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005508:	4b36      	ldr	r3, [pc, #216]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f003 020c 	and.w	r2, r3, #12
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	429a      	cmp	r2, r3
 8005518:	d1eb      	bne.n	80054f2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d008      	beq.n	8005538 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005526:	4b2f      	ldr	r3, [pc, #188]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	492c      	ldr	r1, [pc, #176]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 8005534:	4313      	orrs	r3, r2
 8005536:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005538:	4b29      	ldr	r3, [pc, #164]	; (80055e0 <HAL_RCC_ClockConfig+0x1b0>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0307 	and.w	r3, r3, #7
 8005540:	683a      	ldr	r2, [r7, #0]
 8005542:	429a      	cmp	r2, r3
 8005544:	d210      	bcs.n	8005568 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005546:	4b26      	ldr	r3, [pc, #152]	; (80055e0 <HAL_RCC_ClockConfig+0x1b0>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f023 0207 	bic.w	r2, r3, #7
 800554e:	4924      	ldr	r1, [pc, #144]	; (80055e0 <HAL_RCC_ClockConfig+0x1b0>)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	4313      	orrs	r3, r2
 8005554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005556:	4b22      	ldr	r3, [pc, #136]	; (80055e0 <HAL_RCC_ClockConfig+0x1b0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	429a      	cmp	r2, r3
 8005562:	d001      	beq.n	8005568 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e036      	b.n	80055d6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0304 	and.w	r3, r3, #4
 8005570:	2b00      	cmp	r3, #0
 8005572:	d008      	beq.n	8005586 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005574:	4b1b      	ldr	r3, [pc, #108]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	4918      	ldr	r1, [pc, #96]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 8005582:	4313      	orrs	r3, r2
 8005584:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	2b00      	cmp	r3, #0
 8005590:	d009      	beq.n	80055a6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005592:	4b14      	ldr	r3, [pc, #80]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	00db      	lsls	r3, r3, #3
 80055a0:	4910      	ldr	r1, [pc, #64]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055a6:	f000 f825 	bl	80055f4 <HAL_RCC_GetSysClockFreq>
 80055aa:	4602      	mov	r2, r0
 80055ac:	4b0d      	ldr	r3, [pc, #52]	; (80055e4 <HAL_RCC_ClockConfig+0x1b4>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	091b      	lsrs	r3, r3, #4
 80055b2:	f003 030f 	and.w	r3, r3, #15
 80055b6:	490c      	ldr	r1, [pc, #48]	; (80055e8 <HAL_RCC_ClockConfig+0x1b8>)
 80055b8:	5ccb      	ldrb	r3, [r1, r3]
 80055ba:	f003 031f 	and.w	r3, r3, #31
 80055be:	fa22 f303 	lsr.w	r3, r2, r3
 80055c2:	4a0a      	ldr	r2, [pc, #40]	; (80055ec <HAL_RCC_ClockConfig+0x1bc>)
 80055c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80055c6:	4b0a      	ldr	r3, [pc, #40]	; (80055f0 <HAL_RCC_ClockConfig+0x1c0>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fe f892 	bl	80036f4 <HAL_InitTick>
 80055d0:	4603      	mov	r3, r0
 80055d2:	72fb      	strb	r3, [r7, #11]

  return status;
 80055d4:	7afb      	ldrb	r3, [r7, #11]
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	40022000 	.word	0x40022000
 80055e4:	40021000 	.word	0x40021000
 80055e8:	08014e8c 	.word	0x08014e8c
 80055ec:	20001600 	.word	0x20001600
 80055f0:	20001604 	.word	0x20001604

080055f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b089      	sub	sp, #36	; 0x24
 80055f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80055fa:	2300      	movs	r3, #0
 80055fc:	61fb      	str	r3, [r7, #28]
 80055fe:	2300      	movs	r3, #0
 8005600:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005602:	4b3e      	ldr	r3, [pc, #248]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	f003 030c 	and.w	r3, r3, #12
 800560a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800560c:	4b3b      	ldr	r3, [pc, #236]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 800560e:	68db      	ldr	r3, [r3, #12]
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d005      	beq.n	8005628 <HAL_RCC_GetSysClockFreq+0x34>
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	2b0c      	cmp	r3, #12
 8005620:	d121      	bne.n	8005666 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2b01      	cmp	r3, #1
 8005626:	d11e      	bne.n	8005666 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005628:	4b34      	ldr	r3, [pc, #208]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d107      	bne.n	8005644 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005634:	4b31      	ldr	r3, [pc, #196]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800563a:	0a1b      	lsrs	r3, r3, #8
 800563c:	f003 030f 	and.w	r3, r3, #15
 8005640:	61fb      	str	r3, [r7, #28]
 8005642:	e005      	b.n	8005650 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005644:	4b2d      	ldr	r3, [pc, #180]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	091b      	lsrs	r3, r3, #4
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005650:	4a2b      	ldr	r2, [pc, #172]	; (8005700 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005658:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10d      	bne.n	800567c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005664:	e00a      	b.n	800567c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	2b04      	cmp	r3, #4
 800566a:	d102      	bne.n	8005672 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800566c:	4b25      	ldr	r3, [pc, #148]	; (8005704 <HAL_RCC_GetSysClockFreq+0x110>)
 800566e:	61bb      	str	r3, [r7, #24]
 8005670:	e004      	b.n	800567c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	2b08      	cmp	r3, #8
 8005676:	d101      	bne.n	800567c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005678:	4b23      	ldr	r3, [pc, #140]	; (8005708 <HAL_RCC_GetSysClockFreq+0x114>)
 800567a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	2b0c      	cmp	r3, #12
 8005680:	d134      	bne.n	80056ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005682:	4b1e      	ldr	r3, [pc, #120]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f003 0303 	and.w	r3, r3, #3
 800568a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2b02      	cmp	r3, #2
 8005690:	d003      	beq.n	800569a <HAL_RCC_GetSysClockFreq+0xa6>
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	2b03      	cmp	r3, #3
 8005696:	d003      	beq.n	80056a0 <HAL_RCC_GetSysClockFreq+0xac>
 8005698:	e005      	b.n	80056a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800569a:	4b1a      	ldr	r3, [pc, #104]	; (8005704 <HAL_RCC_GetSysClockFreq+0x110>)
 800569c:	617b      	str	r3, [r7, #20]
      break;
 800569e:	e005      	b.n	80056ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80056a0:	4b19      	ldr	r3, [pc, #100]	; (8005708 <HAL_RCC_GetSysClockFreq+0x114>)
 80056a2:	617b      	str	r3, [r7, #20]
      break;
 80056a4:	e002      	b.n	80056ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	617b      	str	r3, [r7, #20]
      break;
 80056aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80056ac:	4b13      	ldr	r3, [pc, #76]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	091b      	lsrs	r3, r3, #4
 80056b2:	f003 0307 	and.w	r3, r3, #7
 80056b6:	3301      	adds	r3, #1
 80056b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80056ba:	4b10      	ldr	r3, [pc, #64]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	0a1b      	lsrs	r3, r3, #8
 80056c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	fb03 f202 	mul.w	r2, r3, r2
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056d2:	4b0a      	ldr	r3, [pc, #40]	; (80056fc <HAL_RCC_GetSysClockFreq+0x108>)
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	0e5b      	lsrs	r3, r3, #25
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	3301      	adds	r3, #1
 80056de:	005b      	lsls	r3, r3, #1
 80056e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80056e2:	697a      	ldr	r2, [r7, #20]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80056ec:	69bb      	ldr	r3, [r7, #24]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3724      	adds	r7, #36	; 0x24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40021000 	.word	0x40021000
 8005700:	08014ea4 	.word	0x08014ea4
 8005704:	00f42400 	.word	0x00f42400
 8005708:	007a1200 	.word	0x007a1200

0800570c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800570c:	b480      	push	{r7}
 800570e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005710:	4b03      	ldr	r3, [pc, #12]	; (8005720 <HAL_RCC_GetHCLKFreq+0x14>)
 8005712:	681b      	ldr	r3, [r3, #0]
}
 8005714:	4618      	mov	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	20001600 	.word	0x20001600

08005724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005728:	f7ff fff0 	bl	800570c <HAL_RCC_GetHCLKFreq>
 800572c:	4602      	mov	r2, r0
 800572e:	4b06      	ldr	r3, [pc, #24]	; (8005748 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	0a1b      	lsrs	r3, r3, #8
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	4904      	ldr	r1, [pc, #16]	; (800574c <HAL_RCC_GetPCLK1Freq+0x28>)
 800573a:	5ccb      	ldrb	r3, [r1, r3]
 800573c:	f003 031f 	and.w	r3, r3, #31
 8005740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005744:	4618      	mov	r0, r3
 8005746:	bd80      	pop	{r7, pc}
 8005748:	40021000 	.word	0x40021000
 800574c:	08014e9c 	.word	0x08014e9c

08005750 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005754:	f7ff ffda 	bl	800570c <HAL_RCC_GetHCLKFreq>
 8005758:	4602      	mov	r2, r0
 800575a:	4b06      	ldr	r3, [pc, #24]	; (8005774 <HAL_RCC_GetPCLK2Freq+0x24>)
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	0adb      	lsrs	r3, r3, #11
 8005760:	f003 0307 	and.w	r3, r3, #7
 8005764:	4904      	ldr	r1, [pc, #16]	; (8005778 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005766:	5ccb      	ldrb	r3, [r1, r3]
 8005768:	f003 031f 	and.w	r3, r3, #31
 800576c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005770:	4618      	mov	r0, r3
 8005772:	bd80      	pop	{r7, pc}
 8005774:	40021000 	.word	0x40021000
 8005778:	08014e9c 	.word	0x08014e9c

0800577c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005784:	2300      	movs	r3, #0
 8005786:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005788:	4b2a      	ldr	r3, [pc, #168]	; (8005834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800578a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800578c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d003      	beq.n	800579c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005794:	f7ff fa00 	bl	8004b98 <HAL_PWREx_GetVoltageRange>
 8005798:	6178      	str	r0, [r7, #20]
 800579a:	e014      	b.n	80057c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800579c:	4b25      	ldr	r3, [pc, #148]	; (8005834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800579e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a0:	4a24      	ldr	r2, [pc, #144]	; (8005834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a6:	6593      	str	r3, [r2, #88]	; 0x58
 80057a8:	4b22      	ldr	r3, [pc, #136]	; (8005834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80057b4:	f7ff f9f0 	bl	8004b98 <HAL_PWREx_GetVoltageRange>
 80057b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80057ba:	4b1e      	ldr	r3, [pc, #120]	; (8005834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057be:	4a1d      	ldr	r2, [pc, #116]	; (8005834 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80057c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057cc:	d10b      	bne.n	80057e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b80      	cmp	r3, #128	; 0x80
 80057d2:	d919      	bls.n	8005808 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2ba0      	cmp	r3, #160	; 0xa0
 80057d8:	d902      	bls.n	80057e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057da:	2302      	movs	r3, #2
 80057dc:	613b      	str	r3, [r7, #16]
 80057de:	e013      	b.n	8005808 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80057e0:	2301      	movs	r3, #1
 80057e2:	613b      	str	r3, [r7, #16]
 80057e4:	e010      	b.n	8005808 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b80      	cmp	r3, #128	; 0x80
 80057ea:	d902      	bls.n	80057f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80057ec:	2303      	movs	r3, #3
 80057ee:	613b      	str	r3, [r7, #16]
 80057f0:	e00a      	b.n	8005808 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b80      	cmp	r3, #128	; 0x80
 80057f6:	d102      	bne.n	80057fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80057f8:	2302      	movs	r3, #2
 80057fa:	613b      	str	r3, [r7, #16]
 80057fc:	e004      	b.n	8005808 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b70      	cmp	r3, #112	; 0x70
 8005802:	d101      	bne.n	8005808 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005804:	2301      	movs	r3, #1
 8005806:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005808:	4b0b      	ldr	r3, [pc, #44]	; (8005838 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f023 0207 	bic.w	r2, r3, #7
 8005810:	4909      	ldr	r1, [pc, #36]	; (8005838 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	4313      	orrs	r3, r2
 8005816:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005818:	4b07      	ldr	r3, [pc, #28]	; (8005838 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	429a      	cmp	r2, r3
 8005824:	d001      	beq.n	800582a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	e000      	b.n	800582c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3718      	adds	r7, #24
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40021000 	.word	0x40021000
 8005838:	40022000 	.word	0x40022000

0800583c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005844:	2300      	movs	r3, #0
 8005846:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005848:	2300      	movs	r3, #0
 800584a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005854:	2b00      	cmp	r3, #0
 8005856:	d041      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800585c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005860:	d02a      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005862:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005866:	d824      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005868:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800586c:	d008      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800586e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005872:	d81e      	bhi.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00a      	beq.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005878:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800587c:	d010      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800587e:	e018      	b.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005880:	4b86      	ldr	r3, [pc, #536]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	4a85      	ldr	r2, [pc, #532]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800588a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800588c:	e015      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3304      	adds	r3, #4
 8005892:	2100      	movs	r1, #0
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fabb 	bl	8005e10 <RCCEx_PLLSAI1_Config>
 800589a:	4603      	mov	r3, r0
 800589c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800589e:	e00c      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3320      	adds	r3, #32
 80058a4:	2100      	movs	r1, #0
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fba6 	bl	8005ff8 <RCCEx_PLLSAI2_Config>
 80058ac:	4603      	mov	r3, r0
 80058ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80058b0:	e003      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	74fb      	strb	r3, [r7, #19]
      break;
 80058b6:	e000      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80058b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058ba:	7cfb      	ldrb	r3, [r7, #19]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10b      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80058c0:	4b76      	ldr	r3, [pc, #472]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058ce:	4973      	ldr	r1, [pc, #460]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80058d6:	e001      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d8:	7cfb      	ldrb	r3, [r7, #19]
 80058da:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d041      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058ec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058f0:	d02a      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80058f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80058f6:	d824      	bhi.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80058f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80058fc:	d008      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80058fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005902:	d81e      	bhi.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00a      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800590c:	d010      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800590e:	e018      	b.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005910:	4b62      	ldr	r3, [pc, #392]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	4a61      	ldr	r2, [pc, #388]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800591a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800591c:	e015      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	3304      	adds	r3, #4
 8005922:	2100      	movs	r1, #0
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fa73 	bl	8005e10 <RCCEx_PLLSAI1_Config>
 800592a:	4603      	mov	r3, r0
 800592c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800592e:	e00c      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3320      	adds	r3, #32
 8005934:	2100      	movs	r1, #0
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fb5e 	bl	8005ff8 <RCCEx_PLLSAI2_Config>
 800593c:	4603      	mov	r3, r0
 800593e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005940:	e003      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	74fb      	strb	r3, [r7, #19]
      break;
 8005946:	e000      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005948:	bf00      	nop
    }

    if(ret == HAL_OK)
 800594a:	7cfb      	ldrb	r3, [r7, #19]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10b      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005950:	4b52      	ldr	r3, [pc, #328]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005956:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800595e:	494f      	ldr	r1, [pc, #316]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005960:	4313      	orrs	r3, r2
 8005962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005966:	e001      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005968:	7cfb      	ldrb	r3, [r7, #19]
 800596a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 80a0 	beq.w	8005aba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800597a:	2300      	movs	r3, #0
 800597c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800597e:	4b47      	ldr	r3, [pc, #284]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d101      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800598a:	2301      	movs	r3, #1
 800598c:	e000      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800598e:	2300      	movs	r3, #0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d00d      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005994:	4b41      	ldr	r3, [pc, #260]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005998:	4a40      	ldr	r2, [pc, #256]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800599a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800599e:	6593      	str	r3, [r2, #88]	; 0x58
 80059a0:	4b3e      	ldr	r3, [pc, #248]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a8:	60bb      	str	r3, [r7, #8]
 80059aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059ac:	2301      	movs	r3, #1
 80059ae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059b0:	4b3b      	ldr	r3, [pc, #236]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a3a      	ldr	r2, [pc, #232]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80059b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059bc:	f7fd feea 	bl	8003794 <HAL_GetTick>
 80059c0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059c2:	e009      	b.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059c4:	f7fd fee6 	bl	8003794 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d902      	bls.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	74fb      	strb	r3, [r7, #19]
        break;
 80059d6:	e005      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059d8:	4b31      	ldr	r3, [pc, #196]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d0ef      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80059e4:	7cfb      	ldrb	r3, [r7, #19]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d15c      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059ea:	4b2c      	ldr	r3, [pc, #176]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059f4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d01f      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d019      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a08:	4b24      	ldr	r3, [pc, #144]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a14:	4b21      	ldr	r3, [pc, #132]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1a:	4a20      	ldr	r2, [pc, #128]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a24:	4b1d      	ldr	r3, [pc, #116]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a2a:	4a1c      	ldr	r2, [pc, #112]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a34:	4a19      	ldr	r2, [pc, #100]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d016      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a46:	f7fd fea5 	bl	8003794 <HAL_GetTick>
 8005a4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a4c:	e00b      	b.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a4e:	f7fd fea1 	bl	8003794 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d902      	bls.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	74fb      	strb	r3, [r7, #19]
            break;
 8005a64:	e006      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a66:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6c:	f003 0302 	and.w	r3, r3, #2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0ec      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005a74:	7cfb      	ldrb	r3, [r7, #19]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10c      	bne.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a7a:	4b08      	ldr	r3, [pc, #32]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a8a:	4904      	ldr	r1, [pc, #16]	; (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005a92:	e009      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a94:	7cfb      	ldrb	r3, [r7, #19]
 8005a96:	74bb      	strb	r3, [r7, #18]
 8005a98:	e006      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005a9a:	bf00      	nop
 8005a9c:	40021000 	.word	0x40021000
 8005aa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa4:	7cfb      	ldrb	r3, [r7, #19]
 8005aa6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005aa8:	7c7b      	ldrb	r3, [r7, #17]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d105      	bne.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aae:	4b9e      	ldr	r3, [pc, #632]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab2:	4a9d      	ldr	r2, [pc, #628]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ab8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00a      	beq.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ac6:	4b98      	ldr	r3, [pc, #608]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005acc:	f023 0203 	bic.w	r2, r3, #3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	4994      	ldr	r1, [pc, #592]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00a      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ae8:	4b8f      	ldr	r3, [pc, #572]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aee:	f023 020c 	bic.w	r2, r3, #12
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af6:	498c      	ldr	r1, [pc, #560]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0304 	and.w	r3, r3, #4
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00a      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b0a:	4b87      	ldr	r3, [pc, #540]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b18:	4983      	ldr	r1, [pc, #524]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d00a      	beq.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b2c:	4b7e      	ldr	r3, [pc, #504]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b3a:	497b      	ldr	r1, [pc, #492]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0310 	and.w	r3, r3, #16
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00a      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b4e:	4b76      	ldr	r3, [pc, #472]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b5c:	4972      	ldr	r1, [pc, #456]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0320 	and.w	r3, r3, #32
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00a      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b70:	4b6d      	ldr	r3, [pc, #436]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b7e:	496a      	ldr	r1, [pc, #424]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00a      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b92:	4b65      	ldr	r3, [pc, #404]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ba0:	4961      	ldr	r1, [pc, #388]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d00a      	beq.n	8005bca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005bb4:	4b5c      	ldr	r3, [pc, #368]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bc2:	4959      	ldr	r1, [pc, #356]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005bd6:	4b54      	ldr	r3, [pc, #336]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bdc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005be4:	4950      	ldr	r1, [pc, #320]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005be6:	4313      	orrs	r3, r2
 8005be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00a      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005bf8:	4b4b      	ldr	r3, [pc, #300]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c06:	4948      	ldr	r1, [pc, #288]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005c1a:	4b43      	ldr	r3, [pc, #268]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c28:	493f      	ldr	r1, [pc, #252]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d028      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c3c:	4b3a      	ldr	r3, [pc, #232]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c4a:	4937      	ldr	r1, [pc, #220]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c5a:	d106      	bne.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c5c:	4b32      	ldr	r3, [pc, #200]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	4a31      	ldr	r2, [pc, #196]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c66:	60d3      	str	r3, [r2, #12]
 8005c68:	e011      	b.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c72:	d10c      	bne.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3304      	adds	r3, #4
 8005c78:	2101      	movs	r1, #1
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 f8c8 	bl	8005e10 <RCCEx_PLLSAI1_Config>
 8005c80:	4603      	mov	r3, r0
 8005c82:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005c84:	7cfb      	ldrb	r3, [r7, #19]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005c8a:	7cfb      	ldrb	r3, [r7, #19]
 8005c8c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d028      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c9a:	4b23      	ldr	r3, [pc, #140]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca8:	491f      	ldr	r1, [pc, #124]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cb8:	d106      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cba:	4b1b      	ldr	r3, [pc, #108]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	4a1a      	ldr	r2, [pc, #104]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cc4:	60d3      	str	r3, [r2, #12]
 8005cc6:	e011      	b.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ccc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005cd0:	d10c      	bne.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 f899 	bl	8005e10 <RCCEx_PLLSAI1_Config>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ce2:	7cfb      	ldrb	r3, [r7, #19]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005ce8:	7cfb      	ldrb	r3, [r7, #19]
 8005cea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d02b      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cf8:	4b0b      	ldr	r3, [pc, #44]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d06:	4908      	ldr	r1, [pc, #32]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d16:	d109      	bne.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d18:	4b03      	ldr	r3, [pc, #12]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	4a02      	ldr	r2, [pc, #8]	; (8005d28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d22:	60d3      	str	r3, [r2, #12]
 8005d24:	e014      	b.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005d26:	bf00      	nop
 8005d28:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d34:	d10c      	bne.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	3304      	adds	r3, #4
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 f867 	bl	8005e10 <RCCEx_PLLSAI1_Config>
 8005d42:	4603      	mov	r3, r0
 8005d44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d46:	7cfb      	ldrb	r3, [r7, #19]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005d4c:	7cfb      	ldrb	r3, [r7, #19]
 8005d4e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d02f      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005d5c:	4b2b      	ldr	r3, [pc, #172]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d6a:	4928      	ldr	r1, [pc, #160]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d7a:	d10d      	bne.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	2102      	movs	r1, #2
 8005d82:	4618      	mov	r0, r3
 8005d84:	f000 f844 	bl	8005e10 <RCCEx_PLLSAI1_Config>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005d8c:	7cfb      	ldrb	r3, [r7, #19]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d014      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005d92:	7cfb      	ldrb	r3, [r7, #19]
 8005d94:	74bb      	strb	r3, [r7, #18]
 8005d96:	e011      	b.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005da0:	d10c      	bne.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	3320      	adds	r3, #32
 8005da6:	2102      	movs	r1, #2
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 f925 	bl	8005ff8 <RCCEx_PLLSAI2_Config>
 8005dae:	4603      	mov	r3, r0
 8005db0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005db2:	7cfb      	ldrb	r3, [r7, #19]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005db8:	7cfb      	ldrb	r3, [r7, #19]
 8005dba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00a      	beq.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005dc8:	4b10      	ldr	r3, [pc, #64]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dd6:	490d      	ldr	r1, [pc, #52]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005dd8:	4313      	orrs	r3, r2
 8005dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d00b      	beq.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005dea:	4b08      	ldr	r3, [pc, #32]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dfa:	4904      	ldr	r1, [pc, #16]	; (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005e02:	7cbb      	ldrb	r3, [r7, #18]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}
 8005e0c:	40021000 	.word	0x40021000

08005e10 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e1e:	4b75      	ldr	r3, [pc, #468]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d018      	beq.n	8005e5c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005e2a:	4b72      	ldr	r3, [pc, #456]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f003 0203 	and.w	r2, r3, #3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d10d      	bne.n	8005e56 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
       ||
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d009      	beq.n	8005e56 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005e42:	4b6c      	ldr	r3, [pc, #432]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	091b      	lsrs	r3, r3, #4
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
       ||
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d047      	beq.n	8005ee6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	73fb      	strb	r3, [r7, #15]
 8005e5a:	e044      	b.n	8005ee6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b03      	cmp	r3, #3
 8005e62:	d018      	beq.n	8005e96 <RCCEx_PLLSAI1_Config+0x86>
 8005e64:	2b03      	cmp	r3, #3
 8005e66:	d825      	bhi.n	8005eb4 <RCCEx_PLLSAI1_Config+0xa4>
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d002      	beq.n	8005e72 <RCCEx_PLLSAI1_Config+0x62>
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d009      	beq.n	8005e84 <RCCEx_PLLSAI1_Config+0x74>
 8005e70:	e020      	b.n	8005eb4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e72:	4b60      	ldr	r3, [pc, #384]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0302 	and.w	r3, r3, #2
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d11d      	bne.n	8005eba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e82:	e01a      	b.n	8005eba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e84:	4b5b      	ldr	r3, [pc, #364]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d116      	bne.n	8005ebe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e94:	e013      	b.n	8005ebe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e96:	4b57      	ldr	r3, [pc, #348]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10f      	bne.n	8005ec2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ea2:	4b54      	ldr	r3, [pc, #336]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d109      	bne.n	8005ec2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005eb2:	e006      	b.n	8005ec2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8005eb8:	e004      	b.n	8005ec4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005eba:	bf00      	nop
 8005ebc:	e002      	b.n	8005ec4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ebe:	bf00      	nop
 8005ec0:	e000      	b.n	8005ec4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ec2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10d      	bne.n	8005ee6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005eca:	4b4a      	ldr	r3, [pc, #296]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6819      	ldr	r1, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	011b      	lsls	r3, r3, #4
 8005ede:	430b      	orrs	r3, r1
 8005ee0:	4944      	ldr	r1, [pc, #272]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d17d      	bne.n	8005fe8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005eec:	4b41      	ldr	r3, [pc, #260]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a40      	ldr	r2, [pc, #256]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ef2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ef6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ef8:	f7fd fc4c 	bl	8003794 <HAL_GetTick>
 8005efc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005efe:	e009      	b.n	8005f14 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005f00:	f7fd fc48 	bl	8003794 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d902      	bls.n	8005f14 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	73fb      	strb	r3, [r7, #15]
        break;
 8005f12:	e005      	b.n	8005f20 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005f14:	4b37      	ldr	r3, [pc, #220]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1ef      	bne.n	8005f00 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d160      	bne.n	8005fe8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d111      	bne.n	8005f50 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f2c:	4b31      	ldr	r3, [pc, #196]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f2e:	691b      	ldr	r3, [r3, #16]
 8005f30:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	6892      	ldr	r2, [r2, #8]
 8005f3c:	0211      	lsls	r1, r2, #8
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	68d2      	ldr	r2, [r2, #12]
 8005f42:	0912      	lsrs	r2, r2, #4
 8005f44:	0452      	lsls	r2, r2, #17
 8005f46:	430a      	orrs	r2, r1
 8005f48:	492a      	ldr	r1, [pc, #168]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	610b      	str	r3, [r1, #16]
 8005f4e:	e027      	b.n	8005fa0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d112      	bne.n	8005f7c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f56:	4b27      	ldr	r3, [pc, #156]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005f5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6892      	ldr	r2, [r2, #8]
 8005f66:	0211      	lsls	r1, r2, #8
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6912      	ldr	r2, [r2, #16]
 8005f6c:	0852      	lsrs	r2, r2, #1
 8005f6e:	3a01      	subs	r2, #1
 8005f70:	0552      	lsls	r2, r2, #21
 8005f72:	430a      	orrs	r2, r1
 8005f74:	491f      	ldr	r1, [pc, #124]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	610b      	str	r3, [r1, #16]
 8005f7a:	e011      	b.n	8005fa0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005f7c:	4b1d      	ldr	r3, [pc, #116]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005f84:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	6892      	ldr	r2, [r2, #8]
 8005f8c:	0211      	lsls	r1, r2, #8
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	6952      	ldr	r2, [r2, #20]
 8005f92:	0852      	lsrs	r2, r2, #1
 8005f94:	3a01      	subs	r2, #1
 8005f96:	0652      	lsls	r2, r2, #25
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	4916      	ldr	r1, [pc, #88]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005fa0:	4b14      	ldr	r3, [pc, #80]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a13      	ldr	r2, [pc, #76]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005faa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fac:	f7fd fbf2 	bl	8003794 <HAL_GetTick>
 8005fb0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fb2:	e009      	b.n	8005fc8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005fb4:	f7fd fbee 	bl	8003794 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d902      	bls.n	8005fc8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	73fb      	strb	r3, [r7, #15]
          break;
 8005fc6:	e005      	b.n	8005fd4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d0ef      	beq.n	8005fb4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d106      	bne.n	8005fe8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005fda:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fdc:	691a      	ldr	r2, [r3, #16]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	4904      	ldr	r1, [pc, #16]	; (8005ff4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	40021000 	.word	0x40021000

08005ff8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006002:	2300      	movs	r3, #0
 8006004:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006006:	4b6a      	ldr	r3, [pc, #424]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d018      	beq.n	8006044 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006012:	4b67      	ldr	r3, [pc, #412]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f003 0203 	and.w	r2, r3, #3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	429a      	cmp	r2, r3
 8006020:	d10d      	bne.n	800603e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
       ||
 8006026:	2b00      	cmp	r3, #0
 8006028:	d009      	beq.n	800603e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800602a:	4b61      	ldr	r3, [pc, #388]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	091b      	lsrs	r3, r3, #4
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
       ||
 800603a:	429a      	cmp	r2, r3
 800603c:	d047      	beq.n	80060ce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	73fb      	strb	r3, [r7, #15]
 8006042:	e044      	b.n	80060ce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b03      	cmp	r3, #3
 800604a:	d018      	beq.n	800607e <RCCEx_PLLSAI2_Config+0x86>
 800604c:	2b03      	cmp	r3, #3
 800604e:	d825      	bhi.n	800609c <RCCEx_PLLSAI2_Config+0xa4>
 8006050:	2b01      	cmp	r3, #1
 8006052:	d002      	beq.n	800605a <RCCEx_PLLSAI2_Config+0x62>
 8006054:	2b02      	cmp	r3, #2
 8006056:	d009      	beq.n	800606c <RCCEx_PLLSAI2_Config+0x74>
 8006058:	e020      	b.n	800609c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800605a:	4b55      	ldr	r3, [pc, #340]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f003 0302 	and.w	r3, r3, #2
 8006062:	2b00      	cmp	r3, #0
 8006064:	d11d      	bne.n	80060a2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800606a:	e01a      	b.n	80060a2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800606c:	4b50      	ldr	r3, [pc, #320]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006074:	2b00      	cmp	r3, #0
 8006076:	d116      	bne.n	80060a6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800607c:	e013      	b.n	80060a6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800607e:	4b4c      	ldr	r3, [pc, #304]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10f      	bne.n	80060aa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800608a:	4b49      	ldr	r3, [pc, #292]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d109      	bne.n	80060aa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800609a:	e006      	b.n	80060aa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	73fb      	strb	r3, [r7, #15]
      break;
 80060a0:	e004      	b.n	80060ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060a2:	bf00      	nop
 80060a4:	e002      	b.n	80060ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060a6:	bf00      	nop
 80060a8:	e000      	b.n	80060ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80060aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10d      	bne.n	80060ce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80060b2:	4b3f      	ldr	r3, [pc, #252]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6819      	ldr	r1, [r3, #0]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	430b      	orrs	r3, r1
 80060c8:	4939      	ldr	r1, [pc, #228]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80060ce:	7bfb      	ldrb	r3, [r7, #15]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d167      	bne.n	80061a4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80060d4:	4b36      	ldr	r3, [pc, #216]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a35      	ldr	r2, [pc, #212]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060e0:	f7fd fb58 	bl	8003794 <HAL_GetTick>
 80060e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060e6:	e009      	b.n	80060fc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80060e8:	f7fd fb54 	bl	8003794 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d902      	bls.n	80060fc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80060f6:	2303      	movs	r3, #3
 80060f8:	73fb      	strb	r3, [r7, #15]
        break;
 80060fa:	e005      	b.n	8006108 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80060fc:	4b2c      	ldr	r3, [pc, #176]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1ef      	bne.n	80060e8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d14a      	bne.n	80061a4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d111      	bne.n	8006138 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006114:	4b26      	ldr	r3, [pc, #152]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800611c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6892      	ldr	r2, [r2, #8]
 8006124:	0211      	lsls	r1, r2, #8
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	68d2      	ldr	r2, [r2, #12]
 800612a:	0912      	lsrs	r2, r2, #4
 800612c:	0452      	lsls	r2, r2, #17
 800612e:	430a      	orrs	r2, r1
 8006130:	491f      	ldr	r1, [pc, #124]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006132:	4313      	orrs	r3, r2
 8006134:	614b      	str	r3, [r1, #20]
 8006136:	e011      	b.n	800615c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006138:	4b1d      	ldr	r3, [pc, #116]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006140:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6892      	ldr	r2, [r2, #8]
 8006148:	0211      	lsls	r1, r2, #8
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6912      	ldr	r2, [r2, #16]
 800614e:	0852      	lsrs	r2, r2, #1
 8006150:	3a01      	subs	r2, #1
 8006152:	0652      	lsls	r2, r2, #25
 8006154:	430a      	orrs	r2, r1
 8006156:	4916      	ldr	r1, [pc, #88]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006158:	4313      	orrs	r3, r2
 800615a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800615c:	4b14      	ldr	r3, [pc, #80]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a13      	ldr	r2, [pc, #76]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006166:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006168:	f7fd fb14 	bl	8003794 <HAL_GetTick>
 800616c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800616e:	e009      	b.n	8006184 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006170:	f7fd fb10 	bl	8003794 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d902      	bls.n	8006184 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	73fb      	strb	r3, [r7, #15]
          break;
 8006182:	e005      	b.n	8006190 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006184:	4b0a      	ldr	r3, [pc, #40]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0ef      	beq.n	8006170 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006190:	7bfb      	ldrb	r3, [r7, #15]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d106      	bne.n	80061a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006196:	4b06      	ldr	r3, [pc, #24]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006198:	695a      	ldr	r2, [r3, #20]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	4904      	ldr	r1, [pc, #16]	; (80061b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3710      	adds	r7, #16
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	40021000 	.word	0x40021000

080061b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b084      	sub	sp, #16
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80061bc:	2301      	movs	r3, #1
 80061be:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d06c      	beq.n	80062a0 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7fd f8b6 	bl	800334c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2202      	movs	r2, #2
 80061e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	22ca      	movs	r2, #202	; 0xca
 80061ee:	625a      	str	r2, [r3, #36]	; 0x24
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2253      	movs	r2, #83	; 0x53
 80061f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f9a0 	bl	800653e <RTC_EnterInitMode>
 80061fe:	4603      	mov	r3, r0
 8006200:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8006202:	7bfb      	ldrb	r3, [r7, #15]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d14b      	bne.n	80062a0 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6812      	ldr	r2, [r2, #0]
 8006212:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800621a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6899      	ldr	r1, [r3, #8]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	431a      	orrs	r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	431a      	orrs	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	430a      	orrs	r2, r1
 8006238:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	68d2      	ldr	r2, [r2, #12]
 8006242:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6919      	ldr	r1, [r3, #16]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	041a      	lsls	r2, r3, #16
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f9a3 	bl	80065a4 <RTC_ExitInitMode>
 800625e:	4603      	mov	r3, r0
 8006260:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8006262:	7bfb      	ldrb	r3, [r7, #15]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d11b      	bne.n	80062a0 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f022 0203 	bic.w	r2, r2, #3
 8006276:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	69da      	ldr	r2, [r3, #28]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	431a      	orrs	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	22ff      	movs	r2, #255	; 0xff
 8006296:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2201      	movs	r2, #1
 800629c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80062aa:	b590      	push	{r4, r7, lr}
 80062ac:	b087      	sub	sp, #28
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d101      	bne.n	80062c4 <HAL_RTC_SetTime+0x1a>
 80062c0:	2302      	movs	r3, #2
 80062c2:	e08b      	b.n	80063dc <HAL_RTC_SetTime+0x132>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2201      	movs	r2, #1
 80062c8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2202      	movs	r2, #2
 80062d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	22ca      	movs	r2, #202	; 0xca
 80062da:	625a      	str	r2, [r3, #36]	; 0x24
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2253      	movs	r2, #83	; 0x53
 80062e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 f92a 	bl	800653e <RTC_EnterInitMode>
 80062ea:	4603      	mov	r3, r0
 80062ec:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80062ee:	7cfb      	ldrb	r3, [r7, #19]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d163      	bne.n	80063bc <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d126      	bne.n	8006348 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	d102      	bne.n	800630e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	2200      	movs	r2, #0
 800630c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	4618      	mov	r0, r3
 8006314:	f000 f984 	bl	8006620 <RTC_ByteToBcd2>
 8006318:	4603      	mov	r3, r0
 800631a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	785b      	ldrb	r3, [r3, #1]
 8006320:	4618      	mov	r0, r3
 8006322:	f000 f97d 	bl	8006620 <RTC_ByteToBcd2>
 8006326:	4603      	mov	r3, r0
 8006328:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800632a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	789b      	ldrb	r3, [r3, #2]
 8006330:	4618      	mov	r0, r3
 8006332:	f000 f975 	bl	8006620 <RTC_ByteToBcd2>
 8006336:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006338:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	78db      	ldrb	r3, [r3, #3]
 8006340:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	e018      	b.n	800637a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006352:	2b00      	cmp	r3, #0
 8006354:	d102      	bne.n	800635c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	2200      	movs	r2, #0
 800635a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	785b      	ldrb	r3, [r3, #1]
 8006366:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006368:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800636e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	78db      	ldrb	r3, [r3, #3]
 8006374:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8006376:	4313      	orrs	r3, r2
 8006378:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006384:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006388:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	689a      	ldr	r2, [r3, #8]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006398:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6899      	ldr	r1, [r3, #8]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	431a      	orrs	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80063b2:	68f8      	ldr	r0, [r7, #12]
 80063b4:	f000 f8f6 	bl	80065a4 <RTC_ExitInitMode>
 80063b8:	4603      	mov	r3, r0
 80063ba:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	22ff      	movs	r2, #255	; 0xff
 80063c2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80063c4:	7cfb      	ldrb	r3, [r7, #19]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d103      	bne.n	80063d2 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80063da:	7cfb      	ldrb	r3, [r7, #19]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	371c      	adds	r7, #28
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd90      	pop	{r4, r7, pc}

080063e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80063e4:	b590      	push	{r4, r7, lr}
 80063e6:	b087      	sub	sp, #28
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d101      	bne.n	80063fe <HAL_RTC_SetDate+0x1a>
 80063fa:	2302      	movs	r3, #2
 80063fc:	e075      	b.n	80064ea <HAL_RTC_SetDate+0x106>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2202      	movs	r2, #2
 800640a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10e      	bne.n	8006432 <HAL_RTC_SetDate+0x4e>
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	785b      	ldrb	r3, [r3, #1]
 8006418:	f003 0310 	and.w	r3, r3, #16
 800641c:	2b00      	cmp	r3, #0
 800641e:	d008      	beq.n	8006432 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	785b      	ldrb	r3, [r3, #1]
 8006424:	f023 0310 	bic.w	r3, r3, #16
 8006428:	b2db      	uxtb	r3, r3
 800642a:	330a      	adds	r3, #10
 800642c:	b2da      	uxtb	r2, r3
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d11c      	bne.n	8006472 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	78db      	ldrb	r3, [r3, #3]
 800643c:	4618      	mov	r0, r3
 800643e:	f000 f8ef 	bl	8006620 <RTC_ByteToBcd2>
 8006442:	4603      	mov	r3, r0
 8006444:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	785b      	ldrb	r3, [r3, #1]
 800644a:	4618      	mov	r0, r3
 800644c:	f000 f8e8 	bl	8006620 <RTC_ByteToBcd2>
 8006450:	4603      	mov	r3, r0
 8006452:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8006454:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	789b      	ldrb	r3, [r3, #2]
 800645a:	4618      	mov	r0, r3
 800645c:	f000 f8e0 	bl	8006620 <RTC_ByteToBcd2>
 8006460:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006462:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800646c:	4313      	orrs	r3, r2
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	e00e      	b.n	8006490 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	78db      	ldrb	r3, [r3, #3]
 8006476:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	785b      	ldrb	r3, [r3, #1]
 800647c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800647e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8006480:	68ba      	ldr	r2, [r7, #8]
 8006482:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8006484:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800648c:	4313      	orrs	r3, r2
 800648e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	22ca      	movs	r2, #202	; 0xca
 8006496:	625a      	str	r2, [r3, #36]	; 0x24
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2253      	movs	r2, #83	; 0x53
 800649e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 f84c 	bl	800653e <RTC_EnterInitMode>
 80064a6:	4603      	mov	r3, r0
 80064a8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80064aa:	7cfb      	ldrb	r3, [r7, #19]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10c      	bne.n	80064ca <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80064ba:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80064be:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 f86f 	bl	80065a4 <RTC_ExitInitMode>
 80064c6:	4603      	mov	r3, r0
 80064c8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	22ff      	movs	r2, #255	; 0xff
 80064d0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80064d2:	7cfb      	ldrb	r3, [r7, #19]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d103      	bne.n	80064e0 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80064e8:	7cfb      	ldrb	r3, [r7, #19]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	371c      	adds	r7, #28
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd90      	pop	{r4, r7, pc}

080064f2 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68da      	ldr	r2, [r3, #12]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006508:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800650a:	f7fd f943 	bl	8003794 <HAL_GetTick>
 800650e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006510:	e009      	b.n	8006526 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006512:	f7fd f93f 	bl	8003794 <HAL_GetTick>
 8006516:	4602      	mov	r2, r0
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006520:	d901      	bls.n	8006526 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006522:	2303      	movs	r3, #3
 8006524:	e007      	b.n	8006536 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f003 0320 	and.w	r3, r3, #32
 8006530:	2b00      	cmp	r3, #0
 8006532:	d0ee      	beq.n	8006512 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b084      	sub	sp, #16
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006554:	2b00      	cmp	r3, #0
 8006556:	d120      	bne.n	800659a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f04f 32ff 	mov.w	r2, #4294967295
 8006560:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8006562:	f7fd f917 	bl	8003794 <HAL_GetTick>
 8006566:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006568:	e00d      	b.n	8006586 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800656a:	f7fd f913 	bl	8003794 <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006578:	d905      	bls.n	8006586 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2203      	movs	r2, #3
 8006582:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006590:	2b00      	cmp	r3, #0
 8006592:	d102      	bne.n	800659a <RTC_EnterInitMode+0x5c>
 8006594:	7bfb      	ldrb	r3, [r7, #15]
 8006596:	2b03      	cmp	r3, #3
 8006598:	d1e7      	bne.n	800656a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800659a:	7bfb      	ldrb	r3, [r7, #15]
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80065b0:	4b1a      	ldr	r3, [pc, #104]	; (800661c <RTC_ExitInitMode+0x78>)
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	4a19      	ldr	r2, [pc, #100]	; (800661c <RTC_ExitInitMode+0x78>)
 80065b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065ba:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80065bc:	4b17      	ldr	r3, [pc, #92]	; (800661c <RTC_ExitInitMode+0x78>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f003 0320 	and.w	r3, r3, #32
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10c      	bne.n	80065e2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f7ff ff92 	bl	80064f2 <HAL_RTC_WaitForSynchro>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d01e      	beq.n	8006612 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2203      	movs	r2, #3
 80065d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	73fb      	strb	r3, [r7, #15]
 80065e0:	e017      	b.n	8006612 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80065e2:	4b0e      	ldr	r3, [pc, #56]	; (800661c <RTC_ExitInitMode+0x78>)
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	4a0d      	ldr	r2, [pc, #52]	; (800661c <RTC_ExitInitMode+0x78>)
 80065e8:	f023 0320 	bic.w	r3, r3, #32
 80065ec:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7ff ff7f 	bl	80064f2 <HAL_RTC_WaitForSynchro>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d005      	beq.n	8006606 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2203      	movs	r2, #3
 80065fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006606:	4b05      	ldr	r3, [pc, #20]	; (800661c <RTC_ExitInitMode+0x78>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	4a04      	ldr	r2, [pc, #16]	; (800661c <RTC_ExitInitMode+0x78>)
 800660c:	f043 0320 	orr.w	r3, r3, #32
 8006610:	6093      	str	r3, [r2, #8]
  }

  return status;
 8006612:	7bfb      	ldrb	r3, [r7, #15]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	40002800 	.word	0x40002800

08006620 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	4603      	mov	r3, r0
 8006628:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800662a:	2300      	movs	r3, #0
 800662c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800662e:	79fb      	ldrb	r3, [r7, #7]
 8006630:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8006632:	e005      	b.n	8006640 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	3301      	adds	r3, #1
 8006638:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800663a:	7afb      	ldrb	r3, [r7, #11]
 800663c:	3b0a      	subs	r3, #10
 800663e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8006640:	7afb      	ldrb	r3, [r7, #11]
 8006642:	2b09      	cmp	r3, #9
 8006644:	d8f6      	bhi.n	8006634 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	b2db      	uxtb	r3, r3
 800664a:	011b      	lsls	r3, r3, #4
 800664c:	b2da      	uxtb	r2, r3
 800664e:	7afb      	ldrb	r3, [r7, #11]
 8006650:	4313      	orrs	r3, r2
 8006652:	b2db      	uxtb	r3, r3
}
 8006654:	4618      	mov	r0, r3
 8006656:	3714      	adds	r7, #20
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e095      	b.n	800679e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006676:	2b00      	cmp	r3, #0
 8006678:	d108      	bne.n	800668c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006682:	d009      	beq.n	8006698 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	61da      	str	r2, [r3, #28]
 800668a:	e005      	b.n	8006698 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d106      	bne.n	80066b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7fc fe7c 	bl	80033b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066ce:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066d8:	d902      	bls.n	80066e0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80066da:	2300      	movs	r3, #0
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	e002      	b.n	80066e6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80066e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066e4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80066ee:	d007      	beq.n	8006700 <HAL_SPI_Init+0xa0>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066f8:	d002      	beq.n	8006700 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006710:	431a      	orrs	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	f003 0301 	and.w	r3, r3, #1
 8006724:	431a      	orrs	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800672e:	431a      	orrs	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	69db      	ldr	r3, [r3, #28]
 8006734:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006738:	431a      	orrs	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a1b      	ldr	r3, [r3, #32]
 800673e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006742:	ea42 0103 	orr.w	r1, r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	430a      	orrs	r2, r1
 8006754:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	0c1b      	lsrs	r3, r3, #16
 800675c:	f003 0204 	and.w	r2, r3, #4
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	f003 0310 	and.w	r3, r3, #16
 8006768:	431a      	orrs	r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800676e:	f003 0308 	and.w	r3, r3, #8
 8006772:	431a      	orrs	r2, r3
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800677c:	ea42 0103 	orr.w	r1, r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b08a      	sub	sp, #40	; 0x28
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	607a      	str	r2, [r7, #4]
 80067b2:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80067b4:	2301      	movs	r3, #1
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80067b8:	2300      	movs	r3, #0
 80067ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d101      	bne.n	80067cc <HAL_SPI_TransmitReceive+0x26>
 80067c8:	2302      	movs	r3, #2
 80067ca:	e1fb      	b.n	8006bc4 <HAL_SPI_TransmitReceive+0x41e>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2201      	movs	r2, #1
 80067d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067d4:	f7fc ffde 	bl	8003794 <HAL_GetTick>
 80067d8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067e0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80067e8:	887b      	ldrh	r3, [r7, #2]
 80067ea:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80067ec:	887b      	ldrh	r3, [r7, #2]
 80067ee:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067f0:	7efb      	ldrb	r3, [r7, #27]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d00e      	beq.n	8006814 <HAL_SPI_TransmitReceive+0x6e>
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067fc:	d106      	bne.n	800680c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d102      	bne.n	800680c <HAL_SPI_TransmitReceive+0x66>
 8006806:	7efb      	ldrb	r3, [r7, #27]
 8006808:	2b04      	cmp	r3, #4
 800680a:	d003      	beq.n	8006814 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800680c:	2302      	movs	r3, #2
 800680e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006812:	e1cd      	b.n	8006bb0 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d005      	beq.n	8006826 <HAL_SPI_TransmitReceive+0x80>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <HAL_SPI_TransmitReceive+0x80>
 8006820:	887b      	ldrh	r3, [r7, #2]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d103      	bne.n	800682e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800682c:	e1c0      	b.n	8006bb0 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006834:	b2db      	uxtb	r3, r3
 8006836:	2b04      	cmp	r3, #4
 8006838:	d003      	beq.n	8006842 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2205      	movs	r2, #5
 800683e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	887a      	ldrh	r2, [r7, #2]
 8006852:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	887a      	ldrh	r2, [r7, #2]
 800685a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	887a      	ldrh	r2, [r7, #2]
 8006868:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	887a      	ldrh	r2, [r7, #2]
 800686e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006884:	d802      	bhi.n	800688c <HAL_SPI_TransmitReceive+0xe6>
 8006886:	8a3b      	ldrh	r3, [r7, #16]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d908      	bls.n	800689e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800689a:	605a      	str	r2, [r3, #4]
 800689c:	e007      	b.n	80068ae <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068ac:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b8:	2b40      	cmp	r3, #64	; 0x40
 80068ba:	d007      	beq.n	80068cc <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068d4:	d97c      	bls.n	80069d0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d002      	beq.n	80068e4 <HAL_SPI_TransmitReceive+0x13e>
 80068de:	8a7b      	ldrh	r3, [r7, #18]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d169      	bne.n	80069b8 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e8:	881a      	ldrh	r2, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f4:	1c9a      	adds	r2, r3, #2
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068fe:	b29b      	uxth	r3, r3
 8006900:	3b01      	subs	r3, #1
 8006902:	b29a      	uxth	r2, r3
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006908:	e056      	b.n	80069b8 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b02      	cmp	r3, #2
 8006916:	d11b      	bne.n	8006950 <HAL_SPI_TransmitReceive+0x1aa>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d016      	beq.n	8006950 <HAL_SPI_TransmitReceive+0x1aa>
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	2b01      	cmp	r3, #1
 8006926:	d113      	bne.n	8006950 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692c:	881a      	ldrh	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006938:	1c9a      	adds	r2, r3, #2
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006942:	b29b      	uxth	r3, r3
 8006944:	3b01      	subs	r3, #1
 8006946:	b29a      	uxth	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b01      	cmp	r3, #1
 800695c:	d11c      	bne.n	8006998 <HAL_SPI_TransmitReceive+0x1f2>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006964:	b29b      	uxth	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d016      	beq.n	8006998 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006974:	b292      	uxth	r2, r2
 8006976:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697c:	1c9a      	adds	r2, r3, #2
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006988:	b29b      	uxth	r3, r3
 800698a:	3b01      	subs	r3, #1
 800698c:	b29a      	uxth	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006994:	2301      	movs	r3, #1
 8006996:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006998:	f7fc fefc 	bl	8003794 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	69fb      	ldr	r3, [r7, #28]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d807      	bhi.n	80069b8 <HAL_SPI_TransmitReceive+0x212>
 80069a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ae:	d003      	beq.n	80069b8 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80069b6:	e0fb      	b.n	8006bb0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069bc:	b29b      	uxth	r3, r3
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1a3      	bne.n	800690a <HAL_SPI_TransmitReceive+0x164>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069c8:	b29b      	uxth	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d19d      	bne.n	800690a <HAL_SPI_TransmitReceive+0x164>
 80069ce:	e0df      	b.n	8006b90 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d003      	beq.n	80069e0 <HAL_SPI_TransmitReceive+0x23a>
 80069d8:	8a7b      	ldrh	r3, [r7, #18]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	f040 80cb 	bne.w	8006b76 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d912      	bls.n	8006a10 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ee:	881a      	ldrh	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069fa:	1c9a      	adds	r2, r3, #2
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b02      	subs	r3, #2
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a0e:	e0b2      	b.n	8006b76 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	330c      	adds	r3, #12
 8006a1a:	7812      	ldrb	r2, [r2, #0]
 8006a1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a36:	e09e      	b.n	8006b76 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	2b02      	cmp	r3, #2
 8006a44:	d134      	bne.n	8006ab0 <HAL_SPI_TransmitReceive+0x30a>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d02f      	beq.n	8006ab0 <HAL_SPI_TransmitReceive+0x30a>
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d12c      	bne.n	8006ab0 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d912      	bls.n	8006a86 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a64:	881a      	ldrh	r2, [r3, #0]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a70:	1c9a      	adds	r2, r3, #2
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	3b02      	subs	r3, #2
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a84:	e012      	b.n	8006aac <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	330c      	adds	r3, #12
 8006a90:	7812      	ldrb	r2, [r2, #0]
 8006a92:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a98:	1c5a      	adds	r2, r3, #1
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	3b01      	subs	r3, #1
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006aac:	2300      	movs	r3, #0
 8006aae:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f003 0301 	and.w	r3, r3, #1
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d148      	bne.n	8006b50 <HAL_SPI_TransmitReceive+0x3aa>
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d042      	beq.n	8006b50 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d923      	bls.n	8006b1e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae0:	b292      	uxth	r2, r2
 8006ae2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae8:	1c9a      	adds	r2, r3, #2
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	3b02      	subs	r3, #2
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d81f      	bhi.n	8006b4c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	685a      	ldr	r2, [r3, #4]
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b1a:	605a      	str	r2, [r3, #4]
 8006b1c:	e016      	b.n	8006b4c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f103 020c 	add.w	r2, r3, #12
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b2a:	7812      	ldrb	r2, [r2, #0]
 8006b2c:	b2d2      	uxtb	r2, r2
 8006b2e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b34:	1c5a      	adds	r2, r3, #1
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	3b01      	subs	r3, #1
 8006b44:	b29a      	uxth	r2, r3
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b50:	f7fc fe20 	bl	8003794 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d803      	bhi.n	8006b68 <HAL_SPI_TransmitReceive+0x3c2>
 8006b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b66:	d102      	bne.n	8006b6e <HAL_SPI_TransmitReceive+0x3c8>
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d103      	bne.n	8006b76 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006b74:	e01c      	b.n	8006bb0 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f47f af5b 	bne.w	8006a38 <HAL_SPI_TransmitReceive+0x292>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f47f af54 	bne.w	8006a38 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b90:	69fa      	ldr	r2, [r7, #28]
 8006b92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b94:	68f8      	ldr	r0, [r7, #12]
 8006b96:	f000 f937 	bl	8006e08 <SPI_EndRxTxTransaction>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d006      	beq.n	8006bae <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2220      	movs	r2, #32
 8006baa:	661a      	str	r2, [r3, #96]	; 0x60
 8006bac:	e000      	b.n	8006bb0 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006bae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006bc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3728      	adds	r7, #40	; 0x28
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	603b      	str	r3, [r7, #0]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006bdc:	f7fc fdda 	bl	8003794 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be4:	1a9b      	subs	r3, r3, r2
 8006be6:	683a      	ldr	r2, [r7, #0]
 8006be8:	4413      	add	r3, r2
 8006bea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006bec:	f7fc fdd2 	bl	8003794 <HAL_GetTick>
 8006bf0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006bf2:	4b39      	ldr	r3, [pc, #228]	; (8006cd8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	015b      	lsls	r3, r3, #5
 8006bf8:	0d1b      	lsrs	r3, r3, #20
 8006bfa:	69fa      	ldr	r2, [r7, #28]
 8006bfc:	fb02 f303 	mul.w	r3, r2, r3
 8006c00:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c02:	e054      	b.n	8006cae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0a:	d050      	beq.n	8006cae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c0c:	f7fc fdc2 	bl	8003794 <HAL_GetTick>
 8006c10:	4602      	mov	r2, r0
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	1ad3      	subs	r3, r2, r3
 8006c16:	69fa      	ldr	r2, [r7, #28]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d902      	bls.n	8006c22 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d13d      	bne.n	8006c9e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c30:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c3a:	d111      	bne.n	8006c60 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c44:	d004      	beq.n	8006c50 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c4e:	d107      	bne.n	8006c60 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c68:	d10f      	bne.n	8006c8a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c88:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e017      	b.n	8006cce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	689a      	ldr	r2, [r3, #8]
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	4013      	ands	r3, r2
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	bf0c      	ite	eq
 8006cbe:	2301      	moveq	r3, #1
 8006cc0:	2300      	movne	r3, #0
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	79fb      	ldrb	r3, [r7, #7]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d19b      	bne.n	8006c04 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3720      	adds	r7, #32
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20001600 	.word	0x20001600

08006cdc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08a      	sub	sp, #40	; 0x28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006cea:	2300      	movs	r3, #0
 8006cec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006cee:	f7fc fd51 	bl	8003794 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf6:	1a9b      	subs	r3, r3, r2
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006cfe:	f7fc fd49 	bl	8003794 <HAL_GetTick>
 8006d02:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	330c      	adds	r3, #12
 8006d0a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d0c:	4b3d      	ldr	r3, [pc, #244]	; (8006e04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	4613      	mov	r3, r2
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	00da      	lsls	r2, r3, #3
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	0d1b      	lsrs	r3, r3, #20
 8006d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d1e:	fb02 f303 	mul.w	r3, r2, r3
 8006d22:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006d24:	e060      	b.n	8006de8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d2c:	d107      	bne.n	8006d3e <SPI_WaitFifoStateUntilTimeout+0x62>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d104      	bne.n	8006d3e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d3c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d44:	d050      	beq.n	8006de8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d46:	f7fc fd25 	bl	8003794 <HAL_GetTick>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	6a3b      	ldr	r3, [r7, #32]
 8006d4e:	1ad3      	subs	r3, r2, r3
 8006d50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d902      	bls.n	8006d5c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d13d      	bne.n	8006dd8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685a      	ldr	r2, [r3, #4]
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d74:	d111      	bne.n	8006d9a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d7e:	d004      	beq.n	8006d8a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d88:	d107      	bne.n	8006d9a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d98:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da2:	d10f      	bne.n	8006dc4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006dc2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e010      	b.n	8006dfa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006dde:	2300      	movs	r3, #0
 8006de0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689a      	ldr	r2, [r3, #8]
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	4013      	ands	r3, r2
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d196      	bne.n	8006d26 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3728      	adds	r7, #40	; 0x28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	20001600 	.word	0x20001600

08006e08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b086      	sub	sp, #24
 8006e0c:	af02      	add	r7, sp, #8
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f7ff ff5b 	bl	8006cdc <SPI_WaitFifoStateUntilTimeout>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d007      	beq.n	8006e3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e30:	f043 0220 	orr.w	r2, r3, #32
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e027      	b.n	8006e8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	9300      	str	r3, [sp, #0]
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	2200      	movs	r2, #0
 8006e44:	2180      	movs	r1, #128	; 0x80
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f7ff fec0 	bl	8006bcc <SPI_WaitFlagStateUntilTimeout>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d007      	beq.n	8006e62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e56:	f043 0220 	orr.w	r2, r3, #32
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e014      	b.n	8006e8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f7ff ff34 	bl	8006cdc <SPI_WaitFifoStateUntilTimeout>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d007      	beq.n	8006e8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e7e:	f043 0220 	orr.w	r2, r3, #32
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e000      	b.n	8006e8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3710      	adds	r7, #16
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e049      	b.n	8006f3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d106      	bne.n	8006ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7fc fada 	bl	8003474 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	3304      	adds	r3, #4
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	f000 fac0 	bl	8007458 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
	...

08006f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f52:	b2db      	uxtb	r3, r3
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d001      	beq.n	8006f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e04f      	b.n	8006ffc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68da      	ldr	r2, [r3, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0201 	orr.w	r2, r2, #1
 8006f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a23      	ldr	r2, [pc, #140]	; (8007008 <HAL_TIM_Base_Start_IT+0xc4>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d01d      	beq.n	8006fba <HAL_TIM_Base_Start_IT+0x76>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f86:	d018      	beq.n	8006fba <HAL_TIM_Base_Start_IT+0x76>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a1f      	ldr	r2, [pc, #124]	; (800700c <HAL_TIM_Base_Start_IT+0xc8>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d013      	beq.n	8006fba <HAL_TIM_Base_Start_IT+0x76>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a1e      	ldr	r2, [pc, #120]	; (8007010 <HAL_TIM_Base_Start_IT+0xcc>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d00e      	beq.n	8006fba <HAL_TIM_Base_Start_IT+0x76>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a1c      	ldr	r2, [pc, #112]	; (8007014 <HAL_TIM_Base_Start_IT+0xd0>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d009      	beq.n	8006fba <HAL_TIM_Base_Start_IT+0x76>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a1b      	ldr	r2, [pc, #108]	; (8007018 <HAL_TIM_Base_Start_IT+0xd4>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d004      	beq.n	8006fba <HAL_TIM_Base_Start_IT+0x76>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a19      	ldr	r2, [pc, #100]	; (800701c <HAL_TIM_Base_Start_IT+0xd8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d115      	bne.n	8006fe6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	4b17      	ldr	r3, [pc, #92]	; (8007020 <HAL_TIM_Base_Start_IT+0xdc>)
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2b06      	cmp	r3, #6
 8006fca:	d015      	beq.n	8006ff8 <HAL_TIM_Base_Start_IT+0xb4>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fd2:	d011      	beq.n	8006ff8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f042 0201 	orr.w	r2, r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe4:	e008      	b.n	8006ff8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f042 0201 	orr.w	r2, r2, #1
 8006ff4:	601a      	str	r2, [r3, #0]
 8006ff6:	e000      	b.n	8006ffa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ff8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3714      	adds	r7, #20
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr
 8007008:	40012c00 	.word	0x40012c00
 800700c:	40000400 	.word	0x40000400
 8007010:	40000800 	.word	0x40000800
 8007014:	40000c00 	.word	0x40000c00
 8007018:	40013400 	.word	0x40013400
 800701c:	40014000 	.word	0x40014000
 8007020:	00010007 	.word	0x00010007

08007024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	f003 0302 	and.w	r3, r3, #2
 8007036:	2b02      	cmp	r3, #2
 8007038:	d122      	bne.n	8007080 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	2b02      	cmp	r3, #2
 8007046:	d11b      	bne.n	8007080 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f06f 0202 	mvn.w	r2, #2
 8007050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	f003 0303 	and.w	r3, r3, #3
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f9d8 	bl	800741c <HAL_TIM_IC_CaptureCallback>
 800706c:	e005      	b.n	800707a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f9ca 	bl	8007408 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f9db 	bl	8007430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	691b      	ldr	r3, [r3, #16]
 8007086:	f003 0304 	and.w	r3, r3, #4
 800708a:	2b04      	cmp	r3, #4
 800708c:	d122      	bne.n	80070d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b04      	cmp	r3, #4
 800709a:	d11b      	bne.n	80070d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f06f 0204 	mvn.w	r2, #4
 80070a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2202      	movs	r2, #2
 80070aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d003      	beq.n	80070c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 f9ae 	bl	800741c <HAL_TIM_IC_CaptureCallback>
 80070c0:	e005      	b.n	80070ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f9a0 	bl	8007408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 f9b1 	bl	8007430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	691b      	ldr	r3, [r3, #16]
 80070da:	f003 0308 	and.w	r3, r3, #8
 80070de:	2b08      	cmp	r3, #8
 80070e0:	d122      	bne.n	8007128 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	f003 0308 	and.w	r3, r3, #8
 80070ec:	2b08      	cmp	r3, #8
 80070ee:	d11b      	bne.n	8007128 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f06f 0208 	mvn.w	r2, #8
 80070f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2204      	movs	r2, #4
 80070fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	69db      	ldr	r3, [r3, #28]
 8007106:	f003 0303 	and.w	r3, r3, #3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d003      	beq.n	8007116 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f984 	bl	800741c <HAL_TIM_IC_CaptureCallback>
 8007114:	e005      	b.n	8007122 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f976 	bl	8007408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f000 f987 	bl	8007430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	f003 0310 	and.w	r3, r3, #16
 8007132:	2b10      	cmp	r3, #16
 8007134:	d122      	bne.n	800717c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f003 0310 	and.w	r3, r3, #16
 8007140:	2b10      	cmp	r3, #16
 8007142:	d11b      	bne.n	800717c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f06f 0210 	mvn.w	r2, #16
 800714c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2208      	movs	r2, #8
 8007152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 f95a 	bl	800741c <HAL_TIM_IC_CaptureCallback>
 8007168:	e005      	b.n	8007176 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f94c 	bl	8007408 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f95d 	bl	8007430 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b01      	cmp	r3, #1
 8007188:	d10e      	bne.n	80071a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	f003 0301 	and.w	r3, r3, #1
 8007194:	2b01      	cmp	r3, #1
 8007196:	d107      	bne.n	80071a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f06f 0201 	mvn.w	r2, #1
 80071a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f926 	bl	80073f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b2:	2b80      	cmp	r3, #128	; 0x80
 80071b4:	d10e      	bne.n	80071d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68db      	ldr	r3, [r3, #12]
 80071bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c0:	2b80      	cmp	r3, #128	; 0x80
 80071c2:	d107      	bne.n	80071d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fb08 	bl	80077e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071e2:	d10e      	bne.n	8007202 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ee:	2b80      	cmp	r3, #128	; 0x80
 80071f0:	d107      	bne.n	8007202 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80071fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 fafb 	bl	80077f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720c:	2b40      	cmp	r3, #64	; 0x40
 800720e:	d10e      	bne.n	800722e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800721a:	2b40      	cmp	r3, #64	; 0x40
 800721c:	d107      	bne.n	800722e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007226:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 f90b 	bl	8007444 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	f003 0320 	and.w	r3, r3, #32
 8007238:	2b20      	cmp	r3, #32
 800723a:	d10e      	bne.n	800725a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	f003 0320 	and.w	r3, r3, #32
 8007246:	2b20      	cmp	r3, #32
 8007248:	d107      	bne.n	800725a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f06f 0220 	mvn.w	r2, #32
 8007252:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f000 fabb 	bl	80077d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800725a:	bf00      	nop
 800725c:	3708      	adds	r7, #8
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800726c:	2300      	movs	r3, #0
 800726e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007276:	2b01      	cmp	r3, #1
 8007278:	d101      	bne.n	800727e <HAL_TIM_ConfigClockSource+0x1c>
 800727a:	2302      	movs	r3, #2
 800727c:	e0b6      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x18a>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2201      	movs	r2, #1
 8007282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2202      	movs	r2, #2
 800728a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800729c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072a0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072a8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072ba:	d03e      	beq.n	800733a <HAL_TIM_ConfigClockSource+0xd8>
 80072bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072c0:	f200 8087 	bhi.w	80073d2 <HAL_TIM_ConfigClockSource+0x170>
 80072c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072c8:	f000 8086 	beq.w	80073d8 <HAL_TIM_ConfigClockSource+0x176>
 80072cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d0:	d87f      	bhi.n	80073d2 <HAL_TIM_ConfigClockSource+0x170>
 80072d2:	2b70      	cmp	r3, #112	; 0x70
 80072d4:	d01a      	beq.n	800730c <HAL_TIM_ConfigClockSource+0xaa>
 80072d6:	2b70      	cmp	r3, #112	; 0x70
 80072d8:	d87b      	bhi.n	80073d2 <HAL_TIM_ConfigClockSource+0x170>
 80072da:	2b60      	cmp	r3, #96	; 0x60
 80072dc:	d050      	beq.n	8007380 <HAL_TIM_ConfigClockSource+0x11e>
 80072de:	2b60      	cmp	r3, #96	; 0x60
 80072e0:	d877      	bhi.n	80073d2 <HAL_TIM_ConfigClockSource+0x170>
 80072e2:	2b50      	cmp	r3, #80	; 0x50
 80072e4:	d03c      	beq.n	8007360 <HAL_TIM_ConfigClockSource+0xfe>
 80072e6:	2b50      	cmp	r3, #80	; 0x50
 80072e8:	d873      	bhi.n	80073d2 <HAL_TIM_ConfigClockSource+0x170>
 80072ea:	2b40      	cmp	r3, #64	; 0x40
 80072ec:	d058      	beq.n	80073a0 <HAL_TIM_ConfigClockSource+0x13e>
 80072ee:	2b40      	cmp	r3, #64	; 0x40
 80072f0:	d86f      	bhi.n	80073d2 <HAL_TIM_ConfigClockSource+0x170>
 80072f2:	2b30      	cmp	r3, #48	; 0x30
 80072f4:	d064      	beq.n	80073c0 <HAL_TIM_ConfigClockSource+0x15e>
 80072f6:	2b30      	cmp	r3, #48	; 0x30
 80072f8:	d86b      	bhi.n	80073d2 <HAL_TIM_ConfigClockSource+0x170>
 80072fa:	2b20      	cmp	r3, #32
 80072fc:	d060      	beq.n	80073c0 <HAL_TIM_ConfigClockSource+0x15e>
 80072fe:	2b20      	cmp	r3, #32
 8007300:	d867      	bhi.n	80073d2 <HAL_TIM_ConfigClockSource+0x170>
 8007302:	2b00      	cmp	r3, #0
 8007304:	d05c      	beq.n	80073c0 <HAL_TIM_ConfigClockSource+0x15e>
 8007306:	2b10      	cmp	r3, #16
 8007308:	d05a      	beq.n	80073c0 <HAL_TIM_ConfigClockSource+0x15e>
 800730a:	e062      	b.n	80073d2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6818      	ldr	r0, [r3, #0]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	6899      	ldr	r1, [r3, #8]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	f000 f9b0 	bl	8007680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800732e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	68ba      	ldr	r2, [r7, #8]
 8007336:	609a      	str	r2, [r3, #8]
      break;
 8007338:	e04f      	b.n	80073da <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6818      	ldr	r0, [r3, #0]
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	6899      	ldr	r1, [r3, #8]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	685a      	ldr	r2, [r3, #4]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f000 f999 	bl	8007680 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	689a      	ldr	r2, [r3, #8]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800735c:	609a      	str	r2, [r3, #8]
      break;
 800735e:	e03c      	b.n	80073da <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6818      	ldr	r0, [r3, #0]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	6859      	ldr	r1, [r3, #4]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	461a      	mov	r2, r3
 800736e:	f000 f90d 	bl	800758c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	2150      	movs	r1, #80	; 0x50
 8007378:	4618      	mov	r0, r3
 800737a:	f000 f966 	bl	800764a <TIM_ITRx_SetConfig>
      break;
 800737e:	e02c      	b.n	80073da <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6818      	ldr	r0, [r3, #0]
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	6859      	ldr	r1, [r3, #4]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	461a      	mov	r2, r3
 800738e:	f000 f92c 	bl	80075ea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2160      	movs	r1, #96	; 0x60
 8007398:	4618      	mov	r0, r3
 800739a:	f000 f956 	bl	800764a <TIM_ITRx_SetConfig>
      break;
 800739e:	e01c      	b.n	80073da <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6818      	ldr	r0, [r3, #0]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	6859      	ldr	r1, [r3, #4]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	461a      	mov	r2, r3
 80073ae:	f000 f8ed 	bl	800758c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	2140      	movs	r1, #64	; 0x40
 80073b8:	4618      	mov	r0, r3
 80073ba:	f000 f946 	bl	800764a <TIM_ITRx_SetConfig>
      break;
 80073be:	e00c      	b.n	80073da <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4619      	mov	r1, r3
 80073ca:	4610      	mov	r0, r2
 80073cc:	f000 f93d 	bl	800764a <TIM_ITRx_SetConfig>
      break;
 80073d0:	e003      	b.n	80073da <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80073d2:	2301      	movs	r3, #1
 80073d4:	73fb      	strb	r3, [r7, #15]
      break;
 80073d6:	e000      	b.n	80073da <HAL_TIM_ConfigClockSource+0x178>
      break;
 80073d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2201      	movs	r2, #1
 80073de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80073ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80073fc:	bf00      	nop
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007430:	b480      	push	{r7}
 8007432:	b083      	sub	sp, #12
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007438:	bf00      	nop
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800744c:	bf00      	nop
 800744e:	370c      	adds	r7, #12
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr

08007458 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007458:	b480      	push	{r7}
 800745a:	b085      	sub	sp, #20
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a40      	ldr	r2, [pc, #256]	; (800756c <TIM_Base_SetConfig+0x114>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d013      	beq.n	8007498 <TIM_Base_SetConfig+0x40>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007476:	d00f      	beq.n	8007498 <TIM_Base_SetConfig+0x40>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a3d      	ldr	r2, [pc, #244]	; (8007570 <TIM_Base_SetConfig+0x118>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00b      	beq.n	8007498 <TIM_Base_SetConfig+0x40>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a3c      	ldr	r2, [pc, #240]	; (8007574 <TIM_Base_SetConfig+0x11c>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d007      	beq.n	8007498 <TIM_Base_SetConfig+0x40>
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a3b      	ldr	r2, [pc, #236]	; (8007578 <TIM_Base_SetConfig+0x120>)
 800748c:	4293      	cmp	r3, r2
 800748e:	d003      	beq.n	8007498 <TIM_Base_SetConfig+0x40>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a3a      	ldr	r2, [pc, #232]	; (800757c <TIM_Base_SetConfig+0x124>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d108      	bne.n	80074aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800749e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a2f      	ldr	r2, [pc, #188]	; (800756c <TIM_Base_SetConfig+0x114>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d01f      	beq.n	80074f2 <TIM_Base_SetConfig+0x9a>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b8:	d01b      	beq.n	80074f2 <TIM_Base_SetConfig+0x9a>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a2c      	ldr	r2, [pc, #176]	; (8007570 <TIM_Base_SetConfig+0x118>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d017      	beq.n	80074f2 <TIM_Base_SetConfig+0x9a>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a2b      	ldr	r2, [pc, #172]	; (8007574 <TIM_Base_SetConfig+0x11c>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d013      	beq.n	80074f2 <TIM_Base_SetConfig+0x9a>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a2a      	ldr	r2, [pc, #168]	; (8007578 <TIM_Base_SetConfig+0x120>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d00f      	beq.n	80074f2 <TIM_Base_SetConfig+0x9a>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a29      	ldr	r2, [pc, #164]	; (800757c <TIM_Base_SetConfig+0x124>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d00b      	beq.n	80074f2 <TIM_Base_SetConfig+0x9a>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a28      	ldr	r2, [pc, #160]	; (8007580 <TIM_Base_SetConfig+0x128>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d007      	beq.n	80074f2 <TIM_Base_SetConfig+0x9a>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a27      	ldr	r2, [pc, #156]	; (8007584 <TIM_Base_SetConfig+0x12c>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d003      	beq.n	80074f2 <TIM_Base_SetConfig+0x9a>
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a26      	ldr	r2, [pc, #152]	; (8007588 <TIM_Base_SetConfig+0x130>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d108      	bne.n	8007504 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	4313      	orrs	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	695b      	ldr	r3, [r3, #20]
 800750e:	4313      	orrs	r3, r2
 8007510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	4a10      	ldr	r2, [pc, #64]	; (800756c <TIM_Base_SetConfig+0x114>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d00f      	beq.n	8007550 <TIM_Base_SetConfig+0xf8>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	4a12      	ldr	r2, [pc, #72]	; (800757c <TIM_Base_SetConfig+0x124>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d00b      	beq.n	8007550 <TIM_Base_SetConfig+0xf8>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4a11      	ldr	r2, [pc, #68]	; (8007580 <TIM_Base_SetConfig+0x128>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d007      	beq.n	8007550 <TIM_Base_SetConfig+0xf8>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a10      	ldr	r2, [pc, #64]	; (8007584 <TIM_Base_SetConfig+0x12c>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d003      	beq.n	8007550 <TIM_Base_SetConfig+0xf8>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a0f      	ldr	r2, [pc, #60]	; (8007588 <TIM_Base_SetConfig+0x130>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d103      	bne.n	8007558 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	691a      	ldr	r2, [r3, #16]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	615a      	str	r2, [r3, #20]
}
 800755e:	bf00      	nop
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	40012c00 	.word	0x40012c00
 8007570:	40000400 	.word	0x40000400
 8007574:	40000800 	.word	0x40000800
 8007578:	40000c00 	.word	0x40000c00
 800757c:	40013400 	.word	0x40013400
 8007580:	40014000 	.word	0x40014000
 8007584:	40014400 	.word	0x40014400
 8007588:	40014800 	.word	0x40014800

0800758c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800758c:	b480      	push	{r7}
 800758e:	b087      	sub	sp, #28
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6a1b      	ldr	r3, [r3, #32]
 800759c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	6a1b      	ldr	r3, [r3, #32]
 80075a2:	f023 0201 	bic.w	r2, r3, #1
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	011b      	lsls	r3, r3, #4
 80075bc:	693a      	ldr	r2, [r7, #16]
 80075be:	4313      	orrs	r3, r2
 80075c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	f023 030a 	bic.w	r3, r3, #10
 80075c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	4313      	orrs	r3, r2
 80075d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	621a      	str	r2, [r3, #32]
}
 80075de:	bf00      	nop
 80075e0:	371c      	adds	r7, #28
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075ea:	b480      	push	{r7}
 80075ec:	b087      	sub	sp, #28
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	60f8      	str	r0, [r7, #12]
 80075f2:	60b9      	str	r1, [r7, #8]
 80075f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	f023 0210 	bic.w	r2, r3, #16
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	6a1b      	ldr	r3, [r3, #32]
 800760c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007614:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	031b      	lsls	r3, r3, #12
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	4313      	orrs	r3, r2
 800761e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007626:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	011b      	lsls	r3, r3, #4
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	4313      	orrs	r3, r2
 8007630:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	621a      	str	r2, [r3, #32]
}
 800763e:	bf00      	nop
 8007640:	371c      	adds	r7, #28
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr

0800764a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800764a:	b480      	push	{r7}
 800764c:	b085      	sub	sp, #20
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007660:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007662:	683a      	ldr	r2, [r7, #0]
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	4313      	orrs	r3, r2
 8007668:	f043 0307 	orr.w	r3, r3, #7
 800766c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68fa      	ldr	r2, [r7, #12]
 8007672:	609a      	str	r2, [r3, #8]
}
 8007674:	bf00      	nop
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007680:	b480      	push	{r7}
 8007682:	b087      	sub	sp, #28
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
 800768c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800769a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	021a      	lsls	r2, r3, #8
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	431a      	orrs	r2, r3
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	697a      	ldr	r2, [r7, #20]
 80076aa:	4313      	orrs	r3, r2
 80076ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	609a      	str	r2, [r3, #8]
}
 80076b4:	bf00      	nop
 80076b6:	371c      	adds	r7, #28
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d101      	bne.n	80076d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076d4:	2302      	movs	r3, #2
 80076d6:	e068      	b.n	80077aa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2202      	movs	r2, #2
 80076e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a2e      	ldr	r2, [pc, #184]	; (80077b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d004      	beq.n	800770c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a2d      	ldr	r2, [pc, #180]	; (80077bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d108      	bne.n	800771e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007712:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	4313      	orrs	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007724:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	4313      	orrs	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	4a1e      	ldr	r2, [pc, #120]	; (80077b8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d01d      	beq.n	800777e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800774a:	d018      	beq.n	800777e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a1b      	ldr	r2, [pc, #108]	; (80077c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d013      	beq.n	800777e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a1a      	ldr	r2, [pc, #104]	; (80077c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d00e      	beq.n	800777e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a18      	ldr	r2, [pc, #96]	; (80077c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d009      	beq.n	800777e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a13      	ldr	r2, [pc, #76]	; (80077bc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d004      	beq.n	800777e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a14      	ldr	r2, [pc, #80]	; (80077cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d10c      	bne.n	8007798 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800777e:	68bb      	ldr	r3, [r7, #8]
 8007780:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007784:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	689b      	ldr	r3, [r3, #8]
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	4313      	orrs	r3, r2
 800778e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	40012c00 	.word	0x40012c00
 80077bc:	40013400 	.word	0x40013400
 80077c0:	40000400 	.word	0x40000400
 80077c4:	40000800 	.word	0x40000800
 80077c8:	40000c00 	.word	0x40000c00
 80077cc:	40014000 	.word	0x40014000

080077d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b083      	sub	sp, #12
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077ec:	bf00      	nop
 80077ee:	370c      	adds	r7, #12
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr

080077f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007800:	bf00      	nop
 8007802:	370c      	adds	r7, #12
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800781a:	2301      	movs	r3, #1
 800781c:	e040      	b.n	80078a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007822:	2b00      	cmp	r3, #0
 8007824:	d106      	bne.n	8007834 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f7fb fe60 	bl	80034f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2224      	movs	r2, #36	; 0x24
 8007838:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f022 0201 	bic.w	r2, r2, #1
 8007848:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f82c 	bl	80078a8 <UART_SetConfig>
 8007850:	4603      	mov	r3, r0
 8007852:	2b01      	cmp	r3, #1
 8007854:	d101      	bne.n	800785a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e022      	b.n	80078a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 fad8 	bl	8007e18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	685a      	ldr	r2, [r3, #4]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007876:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	689a      	ldr	r2, [r3, #8]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007886:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f042 0201 	orr.w	r2, r2, #1
 8007896:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fb5f 	bl	8007f5c <UART_CheckIdleState>
 800789e:	4603      	mov	r3, r0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078ac:	b08a      	sub	sp, #40	; 0x28
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078b2:	2300      	movs	r3, #0
 80078b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	689a      	ldr	r2, [r3, #8]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	431a      	orrs	r2, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	431a      	orrs	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	4ba4      	ldr	r3, [pc, #656]	; (8007b68 <UART_SetConfig+0x2c0>)
 80078d8:	4013      	ands	r3, r2
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	6812      	ldr	r2, [r2, #0]
 80078de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078e0:	430b      	orrs	r3, r1
 80078e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	68da      	ldr	r2, [r3, #12]
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a99      	ldr	r2, [pc, #612]	; (8007b6c <UART_SetConfig+0x2c4>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d004      	beq.n	8007914 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007910:	4313      	orrs	r3, r2
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	689b      	ldr	r3, [r3, #8]
 800791a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007924:	430a      	orrs	r2, r1
 8007926:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a90      	ldr	r2, [pc, #576]	; (8007b70 <UART_SetConfig+0x2c8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d126      	bne.n	8007980 <UART_SetConfig+0xd8>
 8007932:	4b90      	ldr	r3, [pc, #576]	; (8007b74 <UART_SetConfig+0x2cc>)
 8007934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007938:	f003 0303 	and.w	r3, r3, #3
 800793c:	2b03      	cmp	r3, #3
 800793e:	d81b      	bhi.n	8007978 <UART_SetConfig+0xd0>
 8007940:	a201      	add	r2, pc, #4	; (adr r2, 8007948 <UART_SetConfig+0xa0>)
 8007942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007946:	bf00      	nop
 8007948:	08007959 	.word	0x08007959
 800794c:	08007969 	.word	0x08007969
 8007950:	08007961 	.word	0x08007961
 8007954:	08007971 	.word	0x08007971
 8007958:	2301      	movs	r3, #1
 800795a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800795e:	e116      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007960:	2302      	movs	r3, #2
 8007962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007966:	e112      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007968:	2304      	movs	r3, #4
 800796a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800796e:	e10e      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007970:	2308      	movs	r3, #8
 8007972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007976:	e10a      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007978:	2310      	movs	r3, #16
 800797a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800797e:	e106      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a7c      	ldr	r2, [pc, #496]	; (8007b78 <UART_SetConfig+0x2d0>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d138      	bne.n	80079fc <UART_SetConfig+0x154>
 800798a:	4b7a      	ldr	r3, [pc, #488]	; (8007b74 <UART_SetConfig+0x2cc>)
 800798c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007990:	f003 030c 	and.w	r3, r3, #12
 8007994:	2b0c      	cmp	r3, #12
 8007996:	d82d      	bhi.n	80079f4 <UART_SetConfig+0x14c>
 8007998:	a201      	add	r2, pc, #4	; (adr r2, 80079a0 <UART_SetConfig+0xf8>)
 800799a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799e:	bf00      	nop
 80079a0:	080079d5 	.word	0x080079d5
 80079a4:	080079f5 	.word	0x080079f5
 80079a8:	080079f5 	.word	0x080079f5
 80079ac:	080079f5 	.word	0x080079f5
 80079b0:	080079e5 	.word	0x080079e5
 80079b4:	080079f5 	.word	0x080079f5
 80079b8:	080079f5 	.word	0x080079f5
 80079bc:	080079f5 	.word	0x080079f5
 80079c0:	080079dd 	.word	0x080079dd
 80079c4:	080079f5 	.word	0x080079f5
 80079c8:	080079f5 	.word	0x080079f5
 80079cc:	080079f5 	.word	0x080079f5
 80079d0:	080079ed 	.word	0x080079ed
 80079d4:	2300      	movs	r3, #0
 80079d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079da:	e0d8      	b.n	8007b8e <UART_SetConfig+0x2e6>
 80079dc:	2302      	movs	r3, #2
 80079de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079e2:	e0d4      	b.n	8007b8e <UART_SetConfig+0x2e6>
 80079e4:	2304      	movs	r3, #4
 80079e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079ea:	e0d0      	b.n	8007b8e <UART_SetConfig+0x2e6>
 80079ec:	2308      	movs	r3, #8
 80079ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079f2:	e0cc      	b.n	8007b8e <UART_SetConfig+0x2e6>
 80079f4:	2310      	movs	r3, #16
 80079f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80079fa:	e0c8      	b.n	8007b8e <UART_SetConfig+0x2e6>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a5e      	ldr	r2, [pc, #376]	; (8007b7c <UART_SetConfig+0x2d4>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d125      	bne.n	8007a52 <UART_SetConfig+0x1aa>
 8007a06:	4b5b      	ldr	r3, [pc, #364]	; (8007b74 <UART_SetConfig+0x2cc>)
 8007a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a10:	2b30      	cmp	r3, #48	; 0x30
 8007a12:	d016      	beq.n	8007a42 <UART_SetConfig+0x19a>
 8007a14:	2b30      	cmp	r3, #48	; 0x30
 8007a16:	d818      	bhi.n	8007a4a <UART_SetConfig+0x1a2>
 8007a18:	2b20      	cmp	r3, #32
 8007a1a:	d00a      	beq.n	8007a32 <UART_SetConfig+0x18a>
 8007a1c:	2b20      	cmp	r3, #32
 8007a1e:	d814      	bhi.n	8007a4a <UART_SetConfig+0x1a2>
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <UART_SetConfig+0x182>
 8007a24:	2b10      	cmp	r3, #16
 8007a26:	d008      	beq.n	8007a3a <UART_SetConfig+0x192>
 8007a28:	e00f      	b.n	8007a4a <UART_SetConfig+0x1a2>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a30:	e0ad      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007a32:	2302      	movs	r3, #2
 8007a34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a38:	e0a9      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007a3a:	2304      	movs	r3, #4
 8007a3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a40:	e0a5      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007a42:	2308      	movs	r3, #8
 8007a44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a48:	e0a1      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007a4a:	2310      	movs	r3, #16
 8007a4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a50:	e09d      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a4a      	ldr	r2, [pc, #296]	; (8007b80 <UART_SetConfig+0x2d8>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d125      	bne.n	8007aa8 <UART_SetConfig+0x200>
 8007a5c:	4b45      	ldr	r3, [pc, #276]	; (8007b74 <UART_SetConfig+0x2cc>)
 8007a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a66:	2bc0      	cmp	r3, #192	; 0xc0
 8007a68:	d016      	beq.n	8007a98 <UART_SetConfig+0x1f0>
 8007a6a:	2bc0      	cmp	r3, #192	; 0xc0
 8007a6c:	d818      	bhi.n	8007aa0 <UART_SetConfig+0x1f8>
 8007a6e:	2b80      	cmp	r3, #128	; 0x80
 8007a70:	d00a      	beq.n	8007a88 <UART_SetConfig+0x1e0>
 8007a72:	2b80      	cmp	r3, #128	; 0x80
 8007a74:	d814      	bhi.n	8007aa0 <UART_SetConfig+0x1f8>
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <UART_SetConfig+0x1d8>
 8007a7a:	2b40      	cmp	r3, #64	; 0x40
 8007a7c:	d008      	beq.n	8007a90 <UART_SetConfig+0x1e8>
 8007a7e:	e00f      	b.n	8007aa0 <UART_SetConfig+0x1f8>
 8007a80:	2300      	movs	r3, #0
 8007a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a86:	e082      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007a88:	2302      	movs	r3, #2
 8007a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a8e:	e07e      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007a90:	2304      	movs	r3, #4
 8007a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a96:	e07a      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007a98:	2308      	movs	r3, #8
 8007a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007a9e:	e076      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007aa0:	2310      	movs	r3, #16
 8007aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aa6:	e072      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a35      	ldr	r2, [pc, #212]	; (8007b84 <UART_SetConfig+0x2dc>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d12a      	bne.n	8007b08 <UART_SetConfig+0x260>
 8007ab2:	4b30      	ldr	r3, [pc, #192]	; (8007b74 <UART_SetConfig+0x2cc>)
 8007ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007abc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ac0:	d01a      	beq.n	8007af8 <UART_SetConfig+0x250>
 8007ac2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ac6:	d81b      	bhi.n	8007b00 <UART_SetConfig+0x258>
 8007ac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007acc:	d00c      	beq.n	8007ae8 <UART_SetConfig+0x240>
 8007ace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ad2:	d815      	bhi.n	8007b00 <UART_SetConfig+0x258>
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d003      	beq.n	8007ae0 <UART_SetConfig+0x238>
 8007ad8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007adc:	d008      	beq.n	8007af0 <UART_SetConfig+0x248>
 8007ade:	e00f      	b.n	8007b00 <UART_SetConfig+0x258>
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ae6:	e052      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007aee:	e04e      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007af0:	2304      	movs	r3, #4
 8007af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007af6:	e04a      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007af8:	2308      	movs	r3, #8
 8007afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007afe:	e046      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007b00:	2310      	movs	r3, #16
 8007b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b06:	e042      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a17      	ldr	r2, [pc, #92]	; (8007b6c <UART_SetConfig+0x2c4>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d13a      	bne.n	8007b88 <UART_SetConfig+0x2e0>
 8007b12:	4b18      	ldr	r3, [pc, #96]	; (8007b74 <UART_SetConfig+0x2cc>)
 8007b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007b1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b20:	d01a      	beq.n	8007b58 <UART_SetConfig+0x2b0>
 8007b22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b26:	d81b      	bhi.n	8007b60 <UART_SetConfig+0x2b8>
 8007b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b2c:	d00c      	beq.n	8007b48 <UART_SetConfig+0x2a0>
 8007b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b32:	d815      	bhi.n	8007b60 <UART_SetConfig+0x2b8>
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d003      	beq.n	8007b40 <UART_SetConfig+0x298>
 8007b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b3c:	d008      	beq.n	8007b50 <UART_SetConfig+0x2a8>
 8007b3e:	e00f      	b.n	8007b60 <UART_SetConfig+0x2b8>
 8007b40:	2300      	movs	r3, #0
 8007b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b46:	e022      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007b48:	2302      	movs	r3, #2
 8007b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b4e:	e01e      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007b50:	2304      	movs	r3, #4
 8007b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b56:	e01a      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007b58:	2308      	movs	r3, #8
 8007b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b5e:	e016      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007b60:	2310      	movs	r3, #16
 8007b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007b66:	e012      	b.n	8007b8e <UART_SetConfig+0x2e6>
 8007b68:	efff69f3 	.word	0xefff69f3
 8007b6c:	40008000 	.word	0x40008000
 8007b70:	40013800 	.word	0x40013800
 8007b74:	40021000 	.word	0x40021000
 8007b78:	40004400 	.word	0x40004400
 8007b7c:	40004800 	.word	0x40004800
 8007b80:	40004c00 	.word	0x40004c00
 8007b84:	40005000 	.word	0x40005000
 8007b88:	2310      	movs	r3, #16
 8007b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a9f      	ldr	r2, [pc, #636]	; (8007e10 <UART_SetConfig+0x568>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d17a      	bne.n	8007c8e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007b98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007b9c:	2b08      	cmp	r3, #8
 8007b9e:	d824      	bhi.n	8007bea <UART_SetConfig+0x342>
 8007ba0:	a201      	add	r2, pc, #4	; (adr r2, 8007ba8 <UART_SetConfig+0x300>)
 8007ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba6:	bf00      	nop
 8007ba8:	08007bcd 	.word	0x08007bcd
 8007bac:	08007beb 	.word	0x08007beb
 8007bb0:	08007bd5 	.word	0x08007bd5
 8007bb4:	08007beb 	.word	0x08007beb
 8007bb8:	08007bdb 	.word	0x08007bdb
 8007bbc:	08007beb 	.word	0x08007beb
 8007bc0:	08007beb 	.word	0x08007beb
 8007bc4:	08007beb 	.word	0x08007beb
 8007bc8:	08007be3 	.word	0x08007be3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bcc:	f7fd fdaa 	bl	8005724 <HAL_RCC_GetPCLK1Freq>
 8007bd0:	61f8      	str	r0, [r7, #28]
        break;
 8007bd2:	e010      	b.n	8007bf6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bd4:	4b8f      	ldr	r3, [pc, #572]	; (8007e14 <UART_SetConfig+0x56c>)
 8007bd6:	61fb      	str	r3, [r7, #28]
        break;
 8007bd8:	e00d      	b.n	8007bf6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bda:	f7fd fd0b 	bl	80055f4 <HAL_RCC_GetSysClockFreq>
 8007bde:	61f8      	str	r0, [r7, #28]
        break;
 8007be0:	e009      	b.n	8007bf6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007be6:	61fb      	str	r3, [r7, #28]
        break;
 8007be8:	e005      	b.n	8007bf6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007bea:	2300      	movs	r3, #0
 8007bec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007bf4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 80fb 	beq.w	8007df4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	4613      	mov	r3, r2
 8007c04:	005b      	lsls	r3, r3, #1
 8007c06:	4413      	add	r3, r2
 8007c08:	69fa      	ldr	r2, [r7, #28]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d305      	bcc.n	8007c1a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	685b      	ldr	r3, [r3, #4]
 8007c12:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007c14:	69fa      	ldr	r2, [r7, #28]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	d903      	bls.n	8007c22 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007c20:	e0e8      	b.n	8007df4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	2200      	movs	r2, #0
 8007c26:	461c      	mov	r4, r3
 8007c28:	4615      	mov	r5, r2
 8007c2a:	f04f 0200 	mov.w	r2, #0
 8007c2e:	f04f 0300 	mov.w	r3, #0
 8007c32:	022b      	lsls	r3, r5, #8
 8007c34:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007c38:	0222      	lsls	r2, r4, #8
 8007c3a:	68f9      	ldr	r1, [r7, #12]
 8007c3c:	6849      	ldr	r1, [r1, #4]
 8007c3e:	0849      	lsrs	r1, r1, #1
 8007c40:	2000      	movs	r0, #0
 8007c42:	4688      	mov	r8, r1
 8007c44:	4681      	mov	r9, r0
 8007c46:	eb12 0a08 	adds.w	sl, r2, r8
 8007c4a:	eb43 0b09 	adc.w	fp, r3, r9
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	603b      	str	r3, [r7, #0]
 8007c56:	607a      	str	r2, [r7, #4]
 8007c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c5c:	4650      	mov	r0, sl
 8007c5e:	4659      	mov	r1, fp
 8007c60:	f7f9 f914 	bl	8000e8c <__aeabi_uldivmod>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	4613      	mov	r3, r2
 8007c6a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c72:	d308      	bcc.n	8007c86 <UART_SetConfig+0x3de>
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c7a:	d204      	bcs.n	8007c86 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	60da      	str	r2, [r3, #12]
 8007c84:	e0b6      	b.n	8007df4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007c8c:	e0b2      	b.n	8007df4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c96:	d15e      	bne.n	8007d56 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007c98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007c9c:	2b08      	cmp	r3, #8
 8007c9e:	d828      	bhi.n	8007cf2 <UART_SetConfig+0x44a>
 8007ca0:	a201      	add	r2, pc, #4	; (adr r2, 8007ca8 <UART_SetConfig+0x400>)
 8007ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca6:	bf00      	nop
 8007ca8:	08007ccd 	.word	0x08007ccd
 8007cac:	08007cd5 	.word	0x08007cd5
 8007cb0:	08007cdd 	.word	0x08007cdd
 8007cb4:	08007cf3 	.word	0x08007cf3
 8007cb8:	08007ce3 	.word	0x08007ce3
 8007cbc:	08007cf3 	.word	0x08007cf3
 8007cc0:	08007cf3 	.word	0x08007cf3
 8007cc4:	08007cf3 	.word	0x08007cf3
 8007cc8:	08007ceb 	.word	0x08007ceb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ccc:	f7fd fd2a 	bl	8005724 <HAL_RCC_GetPCLK1Freq>
 8007cd0:	61f8      	str	r0, [r7, #28]
        break;
 8007cd2:	e014      	b.n	8007cfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cd4:	f7fd fd3c 	bl	8005750 <HAL_RCC_GetPCLK2Freq>
 8007cd8:	61f8      	str	r0, [r7, #28]
        break;
 8007cda:	e010      	b.n	8007cfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007cdc:	4b4d      	ldr	r3, [pc, #308]	; (8007e14 <UART_SetConfig+0x56c>)
 8007cde:	61fb      	str	r3, [r7, #28]
        break;
 8007ce0:	e00d      	b.n	8007cfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ce2:	f7fd fc87 	bl	80055f4 <HAL_RCC_GetSysClockFreq>
 8007ce6:	61f8      	str	r0, [r7, #28]
        break;
 8007ce8:	e009      	b.n	8007cfe <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cee:	61fb      	str	r3, [r7, #28]
        break;
 8007cf0:	e005      	b.n	8007cfe <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007cfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d077      	beq.n	8007df4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	005a      	lsls	r2, r3, #1
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	085b      	lsrs	r3, r3, #1
 8007d0e:	441a      	add	r2, r3
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d18:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	2b0f      	cmp	r3, #15
 8007d1e:	d916      	bls.n	8007d4e <UART_SetConfig+0x4a6>
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d26:	d212      	bcs.n	8007d4e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	f023 030f 	bic.w	r3, r3, #15
 8007d30:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	085b      	lsrs	r3, r3, #1
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	f003 0307 	and.w	r3, r3, #7
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	8afb      	ldrh	r3, [r7, #22]
 8007d40:	4313      	orrs	r3, r2
 8007d42:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	8afa      	ldrh	r2, [r7, #22]
 8007d4a:	60da      	str	r2, [r3, #12]
 8007d4c:	e052      	b.n	8007df4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007d54:	e04e      	b.n	8007df4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d5a:	2b08      	cmp	r3, #8
 8007d5c:	d827      	bhi.n	8007dae <UART_SetConfig+0x506>
 8007d5e:	a201      	add	r2, pc, #4	; (adr r2, 8007d64 <UART_SetConfig+0x4bc>)
 8007d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d64:	08007d89 	.word	0x08007d89
 8007d68:	08007d91 	.word	0x08007d91
 8007d6c:	08007d99 	.word	0x08007d99
 8007d70:	08007daf 	.word	0x08007daf
 8007d74:	08007d9f 	.word	0x08007d9f
 8007d78:	08007daf 	.word	0x08007daf
 8007d7c:	08007daf 	.word	0x08007daf
 8007d80:	08007daf 	.word	0x08007daf
 8007d84:	08007da7 	.word	0x08007da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d88:	f7fd fccc 	bl	8005724 <HAL_RCC_GetPCLK1Freq>
 8007d8c:	61f8      	str	r0, [r7, #28]
        break;
 8007d8e:	e014      	b.n	8007dba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d90:	f7fd fcde 	bl	8005750 <HAL_RCC_GetPCLK2Freq>
 8007d94:	61f8      	str	r0, [r7, #28]
        break;
 8007d96:	e010      	b.n	8007dba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d98:	4b1e      	ldr	r3, [pc, #120]	; (8007e14 <UART_SetConfig+0x56c>)
 8007d9a:	61fb      	str	r3, [r7, #28]
        break;
 8007d9c:	e00d      	b.n	8007dba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d9e:	f7fd fc29 	bl	80055f4 <HAL_RCC_GetSysClockFreq>
 8007da2:	61f8      	str	r0, [r7, #28]
        break;
 8007da4:	e009      	b.n	8007dba <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007daa:	61fb      	str	r3, [r7, #28]
        break;
 8007dac:	e005      	b.n	8007dba <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007dae:	2300      	movs	r3, #0
 8007db0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007db8:	bf00      	nop
    }

    if (pclk != 0U)
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d019      	beq.n	8007df4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	085a      	lsrs	r2, r3, #1
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	441a      	add	r2, r3
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	2b0f      	cmp	r3, #15
 8007dd8:	d909      	bls.n	8007dee <UART_SetConfig+0x546>
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007de0:	d205      	bcs.n	8007dee <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	b29a      	uxth	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	60da      	str	r2, [r3, #12]
 8007dec:	e002      	b.n	8007df4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007dee:	2301      	movs	r3, #1
 8007df0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007e00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3728      	adds	r7, #40	; 0x28
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e0e:	bf00      	nop
 8007e10:	40008000 	.word	0x40008000
 8007e14:	00f42400 	.word	0x00f42400

08007e18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e24:	f003 0301 	and.w	r3, r3, #1
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00a      	beq.n	8007e42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	685b      	ldr	r3, [r3, #4]
 8007e32:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00a      	beq.n	8007e64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	430a      	orrs	r2, r1
 8007e62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e68:	f003 0304 	and.w	r3, r3, #4
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00a      	beq.n	8007e86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	430a      	orrs	r2, r1
 8007e84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8a:	f003 0308 	and.w	r3, r3, #8
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d00a      	beq.n	8007ea8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	430a      	orrs	r2, r1
 8007ea6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eac:	f003 0310 	and.w	r3, r3, #16
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d00a      	beq.n	8007eca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	430a      	orrs	r2, r1
 8007ec8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ece:	f003 0320 	and.w	r3, r3, #32
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00a      	beq.n	8007eec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	430a      	orrs	r2, r1
 8007eea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d01a      	beq.n	8007f2e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f16:	d10a      	bne.n	8007f2e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	430a      	orrs	r2, r1
 8007f2c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00a      	beq.n	8007f50 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	605a      	str	r2, [r3, #4]
  }
}
 8007f50:	bf00      	nop
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af02      	add	r7, sp, #8
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f6c:	f7fb fc12 	bl	8003794 <HAL_GetTick>
 8007f70:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f003 0308 	and.w	r3, r3, #8
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	d10e      	bne.n	8007f9e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f82d 	bl	8007fee <UART_WaitOnFlagUntilTimeout>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d001      	beq.n	8007f9e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e023      	b.n	8007fe6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0304 	and.w	r3, r3, #4
 8007fa8:	2b04      	cmp	r3, #4
 8007faa:	d10e      	bne.n	8007fca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f817 	bl	8007fee <UART_WaitOnFlagUntilTimeout>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e00d      	b.n	8007fe6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007fe4:	2300      	movs	r3, #0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	3710      	adds	r7, #16
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	b09c      	sub	sp, #112	; 0x70
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	60f8      	str	r0, [r7, #12]
 8007ff6:	60b9      	str	r1, [r7, #8]
 8007ff8:	603b      	str	r3, [r7, #0]
 8007ffa:	4613      	mov	r3, r2
 8007ffc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ffe:	e0a5      	b.n	800814c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008006:	f000 80a1 	beq.w	800814c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800800a:	f7fb fbc3 	bl	8003794 <HAL_GetTick>
 800800e:	4602      	mov	r2, r0
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008016:	429a      	cmp	r2, r3
 8008018:	d302      	bcc.n	8008020 <UART_WaitOnFlagUntilTimeout+0x32>
 800801a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800801c:	2b00      	cmp	r3, #0
 800801e:	d13e      	bne.n	800809e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008026:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008028:	e853 3f00 	ldrex	r3, [r3]
 800802c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800802e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008030:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008034:	667b      	str	r3, [r7, #100]	; 0x64
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	461a      	mov	r2, r3
 800803c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800803e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008040:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008042:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008044:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008046:	e841 2300 	strex	r3, r2, [r1]
 800804a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800804c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1e6      	bne.n	8008020 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	3308      	adds	r3, #8
 8008058:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800805c:	e853 3f00 	ldrex	r3, [r3]
 8008060:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008064:	f023 0301 	bic.w	r3, r3, #1
 8008068:	663b      	str	r3, [r7, #96]	; 0x60
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	3308      	adds	r3, #8
 8008070:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008072:	64ba      	str	r2, [r7, #72]	; 0x48
 8008074:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008076:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800807a:	e841 2300 	strex	r3, r2, [r1]
 800807e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008080:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1e5      	bne.n	8008052 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	2220      	movs	r2, #32
 800808a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2220      	movs	r2, #32
 8008090:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e067      	b.n	800816e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0304 	and.w	r3, r3, #4
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d04f      	beq.n	800814c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	69db      	ldr	r3, [r3, #28]
 80080b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080ba:	d147      	bne.n	800814c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080c4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ce:	e853 3f00 	ldrex	r3, [r3]
 80080d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	461a      	mov	r2, r3
 80080e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080e4:	637b      	str	r3, [r7, #52]	; 0x34
 80080e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080ec:	e841 2300 	strex	r3, r2, [r1]
 80080f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1e6      	bne.n	80080c6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3308      	adds	r3, #8
 80080fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	e853 3f00 	ldrex	r3, [r3]
 8008106:	613b      	str	r3, [r7, #16]
   return(result);
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	f023 0301 	bic.w	r3, r3, #1
 800810e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3308      	adds	r3, #8
 8008116:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008118:	623a      	str	r2, [r7, #32]
 800811a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811c:	69f9      	ldr	r1, [r7, #28]
 800811e:	6a3a      	ldr	r2, [r7, #32]
 8008120:	e841 2300 	strex	r3, r2, [r1]
 8008124:	61bb      	str	r3, [r7, #24]
   return(result);
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1e5      	bne.n	80080f8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2220      	movs	r2, #32
 8008130:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2220      	movs	r2, #32
 8008136:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2220      	movs	r2, #32
 800813c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	e010      	b.n	800816e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	69da      	ldr	r2, [r3, #28]
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	4013      	ands	r3, r2
 8008156:	68ba      	ldr	r2, [r7, #8]
 8008158:	429a      	cmp	r2, r3
 800815a:	bf0c      	ite	eq
 800815c:	2301      	moveq	r3, #1
 800815e:	2300      	movne	r3, #0
 8008160:	b2db      	uxtb	r3, r3
 8008162:	461a      	mov	r2, r3
 8008164:	79fb      	ldrb	r3, [r7, #7]
 8008166:	429a      	cmp	r2, r3
 8008168:	f43f af4a 	beq.w	8008000 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3770      	adds	r7, #112	; 0x70
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
	...

08008178 <iNemoEngine_gbias_init>:
 8008178:	b430      	push	{r4, r5}
 800817a:	4b1f      	ldr	r3, [pc, #124]	; (80081f8 <iNemoEngine_gbias_init+0x80>)
 800817c:	4a1f      	ldr	r2, [pc, #124]	; (80081fc <iNemoEngine_gbias_init+0x84>)
 800817e:	4920      	ldr	r1, [pc, #128]	; (8008200 <iNemoEngine_gbias_init+0x88>)
 8008180:	4d20      	ldr	r5, [pc, #128]	; (8008204 <iNemoEngine_gbias_init+0x8c>)
 8008182:	4c21      	ldr	r4, [pc, #132]	; (8008208 <iNemoEngine_gbias_init+0x90>)
 8008184:	601a      	str	r2, [r3, #0]
 8008186:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800818a:	2200      	movs	r2, #0
 800818c:	6059      	str	r1, [r3, #4]
 800818e:	481f      	ldr	r0, [pc, #124]	; (800820c <iNemoEngine_gbias_init+0x94>)
 8008190:	609d      	str	r5, [r3, #8]
 8008192:	2100      	movs	r1, #0
 8008194:	60dc      	str	r4, [r3, #12]
 8008196:	ed83 0a04 	vstr	s0, [r3, #16]
 800819a:	6158      	str	r0, [r3, #20]
 800819c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80081a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80081a4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80081a8:	655a      	str	r2, [r3, #84]	; 0x54
 80081aa:	661a      	str	r2, [r3, #96]	; 0x60
 80081ac:	659a      	str	r2, [r3, #88]	; 0x58
 80081ae:	665a      	str	r2, [r3, #100]	; 0x64
 80081b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80081b2:	669a      	str	r2, [r3, #104]	; 0x68
 80081b4:	671a      	str	r2, [r3, #112]	; 0x70
 80081b6:	67da      	str	r2, [r3, #124]	; 0x7c
 80081b8:	675a      	str	r2, [r3, #116]	; 0x74
 80081ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80081be:	679a      	str	r2, [r3, #120]	; 0x78
 80081c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80081c4:	61da      	str	r2, [r3, #28]
 80081c6:	629a      	str	r2, [r3, #40]	; 0x28
 80081c8:	621a      	str	r2, [r3, #32]
 80081ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80081cc:	625a      	str	r2, [r3, #36]	; 0x24
 80081ce:	631a      	str	r2, [r3, #48]	; 0x30
 80081d0:	f8a3 1088 	strh.w	r1, [r3, #136]	; 0x88
 80081d4:	f8a3 1050 	strh.w	r1, [r3, #80]	; 0x50
 80081d8:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
 80081dc:	8319      	strh	r1, [r3, #24]
 80081de:	8699      	strh	r1, [r3, #52]	; 0x34
 80081e0:	f883 108a 	strb.w	r1, [r3, #138]	; 0x8a
 80081e4:	bc30      	pop	{r4, r5}
 80081e6:	639a      	str	r2, [r3, #56]	; 0x38
 80081e8:	645a      	str	r2, [r3, #68]	; 0x44
 80081ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80081ec:	649a      	str	r2, [r3, #72]	; 0x48
 80081ee:	641a      	str	r2, [r3, #64]	; 0x40
 80081f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80081f2:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
 80081f6:	4770      	bx	lr
 80081f8:	20001690 	.word	0x20001690
 80081fc:	3ab20043 	.word	0x3ab20043
 8008200:	3e8a3d71 	.word	0x3e8a3d71
 8008204:	3ea8f5c3 	.word	0x3ea8f5c3
 8008208:	3d09c927 	.word	0x3d09c927
 800820c:	41700000 	.word	0x41700000

08008210 <rotVect>:
 8008210:	f991 3001 	ldrsb.w	r3, [r1, #1]
 8008214:	ed92 5a01 	vldr	s10, [r2, #4]
 8008218:	edd2 5a00 	vldr	s11, [r2]
 800821c:	ed92 6a02 	vldr	s12, [r2, #8]
 8008220:	ee07 3a90 	vmov	s15, r3
 8008224:	f991 3000 	ldrsb.w	r3, [r1]
 8008228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800822c:	ee06 3a90 	vmov	s13, r3
 8008230:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008234:	f991 3002 	ldrsb.w	r3, [r1, #2]
 8008238:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800823c:	ee07 3a10 	vmov	s14, r3
 8008240:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8008244:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008248:	eee7 7a06 	vfma.f32	s15, s14, s12
 800824c:	edc0 7a00 	vstr	s15, [r0]
 8008250:	f991 3004 	ldrsb.w	r3, [r1, #4]
 8008254:	ed92 5a01 	vldr	s10, [r2, #4]
 8008258:	edd2 5a00 	vldr	s11, [r2]
 800825c:	ed92 6a02 	vldr	s12, [r2, #8]
 8008260:	ee07 3a90 	vmov	s15, r3
 8008264:	f991 3003 	ldrsb.w	r3, [r1, #3]
 8008268:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800826c:	ee06 3a90 	vmov	s13, r3
 8008270:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008274:	f991 3005 	ldrsb.w	r3, [r1, #5]
 8008278:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800827c:	ee07 3a10 	vmov	s14, r3
 8008280:	eee6 7aa5 	vfma.f32	s15, s13, s11
 8008284:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008288:	eee7 7a06 	vfma.f32	s15, s14, s12
 800828c:	edc0 7a01 	vstr	s15, [r0, #4]
 8008290:	f991 3007 	ldrsb.w	r3, [r1, #7]
 8008294:	ed92 5a01 	vldr	s10, [r2, #4]
 8008298:	edd2 5a00 	vldr	s11, [r2]
 800829c:	ed92 6a02 	vldr	s12, [r2, #8]
 80082a0:	ee07 3a90 	vmov	s15, r3
 80082a4:	f991 3006 	ldrsb.w	r3, [r1, #6]
 80082a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082ac:	ee06 3a90 	vmov	s13, r3
 80082b0:	ee67 7a85 	vmul.f32	s15, s15, s10
 80082b4:	f991 3008 	ldrsb.w	r3, [r1, #8]
 80082b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80082bc:	ee07 3a10 	vmov	s14, r3
 80082c0:	eee6 7aa5 	vfma.f32	s15, s13, s11
 80082c4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80082c8:	eee7 7a06 	vfma.f32	s15, s14, s12
 80082cc:	edc0 7a02 	vstr	s15, [r0, #8]
 80082d0:	4770      	bx	lr
 80082d2:	bf00      	nop

080082d4 <m_mldivide>:
 80082d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d8:	b097      	sub	sp, #92	; 0x5c
 80082da:	4607      	mov	r7, r0
 80082dc:	460d      	mov	r5, r1
 80082de:	4614      	mov	r4, r2
 80082e0:	4606      	mov	r6, r0
 80082e2:	f100 0820 	add.w	r8, r0, #32
 80082e6:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 80082ea:	6830      	ldr	r0, [r6, #0]
 80082ec:	6871      	ldr	r1, [r6, #4]
 80082ee:	68b2      	ldr	r2, [r6, #8]
 80082f0:	68f3      	ldr	r3, [r6, #12]
 80082f2:	46f4      	mov	ip, lr
 80082f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80082f8:	3610      	adds	r6, #16
 80082fa:	4546      	cmp	r6, r8
 80082fc:	46e6      	mov	lr, ip
 80082fe:	d1f4      	bne.n	80082ea <m_mldivide+0x16>
 8008300:	edd7 7a00 	vldr	s15, [r7]
 8008304:	ed97 7a01 	vldr	s14, [r7, #4]
 8008308:	6830      	ldr	r0, [r6, #0]
 800830a:	f8cc 0000 	str.w	r0, [ip]
 800830e:	eef0 7ae7 	vabs.f32	s15, s15
 8008312:	eeb0 7ac7 	vabs.f32	s14, s14
 8008316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800831a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800831e:	f140 8170 	bpl.w	8008602 <m_mldivide+0x32e>
 8008322:	2206      	movs	r2, #6
 8008324:	f04f 0804 	mov.w	r8, #4
 8008328:	2300      	movs	r3, #0
 800832a:	9203      	str	r2, [sp, #12]
 800832c:	2201      	movs	r2, #1
 800832e:	eef0 7a47 	vmov.f32	s15, s14
 8008332:	4646      	mov	r6, r8
 8008334:	4618      	mov	r0, r3
 8008336:	f04f 0e07 	mov.w	lr, #7
 800833a:	f04f 0903 	mov.w	r9, #3
 800833e:	9201      	str	r2, [sp, #4]
 8008340:	ed97 7a02 	vldr	s14, [r7, #8]
 8008344:	eeb0 7ac7 	vabs.f32	s14, s14
 8008348:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800834c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008350:	f340 8150 	ble.w	80085f4 <m_mldivide+0x320>
 8008354:	2307      	movs	r3, #7
 8008356:	f04f 0e08 	mov.w	lr, #8
 800835a:	f04f 0904 	mov.w	r9, #4
 800835e:	9303      	str	r3, [sp, #12]
 8008360:	2202      	movs	r2, #2
 8008362:	2300      	movs	r3, #0
 8008364:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8008368:	4676      	mov	r6, lr
 800836a:	4648      	mov	r0, r9
 800836c:	f04f 0b06 	mov.w	fp, #6
 8008370:	f04f 0c03 	mov.w	ip, #3
 8008374:	f04f 0805 	mov.w	r8, #5
 8008378:	2301      	movs	r3, #1
 800837a:	4438      	add	r0, r7
 800837c:	4437      	add	r7, r6
 800837e:	edd0 6a00 	vldr	s13, [r0]
 8008382:	ed97 7a00 	vldr	s14, [r7]
 8008386:	9902      	ldr	r1, [sp, #8]
 8008388:	9f03      	ldr	r7, [sp, #12]
 800838a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800838e:	aa16      	add	r2, sp, #88	; 0x58
 8008390:	eb02 0a81 	add.w	sl, r2, r1, lsl #2
 8008394:	eb02 0088 	add.w	r0, r2, r8, lsl #2
 8008398:	eb02 0689 	add.w	r6, r2, r9, lsl #2
 800839c:	ea4f 0288 	mov.w	r2, r8, lsl #2
 80083a0:	920a      	str	r2, [sp, #40]	; 0x28
 80083a2:	aa16      	add	r2, sp, #88	; 0x58
 80083a4:	eb02 088c 	add.w	r8, r2, ip, lsl #2
 80083a8:	ea4f 018c 	mov.w	r1, ip, lsl #2
 80083ac:	eb02 0c8e 	add.w	ip, r2, lr, lsl #2
 80083b0:	ea4f 028e 	mov.w	r2, lr, lsl #2
 80083b4:	920b      	str	r2, [sp, #44]	; 0x2c
 80083b6:	aa16      	add	r2, sp, #88	; 0x58
 80083b8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80083bc:	ed42 7a09 	vstr	s15, [r2, #-36]	; 0xffffffdc
 80083c0:	9208      	str	r2, [sp, #32]
 80083c2:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
 80083c6:	9a01      	ldr	r2, [sp, #4]
 80083c8:	ed1a 7a09 	vldr	s14, [sl, #-36]	; 0xffffffdc
 80083cc:	eb0e 0e87 	add.w	lr, lr, r7, lsl #2
 80083d0:	af16      	add	r7, sp, #88	; 0x58
 80083d2:	eb07 0782 	add.w	r7, r7, r2, lsl #2
 80083d6:	ed57 7a09 	vldr	s15, [r7, #-36]	; 0xffffffdc
 80083da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80083de:	009a      	lsls	r2, r3, #2
 80083e0:	9205      	str	r2, [sp, #20]
 80083e2:	af16      	add	r7, sp, #88	; 0x58
 80083e4:	9a02      	ldr	r2, [sp, #8]
 80083e6:	eb07 078b 	add.w	r7, r7, fp, lsl #2
 80083ea:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80083ee:	f8cd b010 	str.w	fp, [sp, #16]
 80083f2:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 80083f6:	9a01      	ldr	r2, [sp, #4]
 80083f8:	0092      	lsls	r2, r2, #2
 80083fa:	9209      	str	r2, [sp, #36]	; 0x24
 80083fc:	ea4f 0289 	mov.w	r2, r9, lsl #2
 8008400:	9206      	str	r2, [sp, #24]
 8008402:	9a03      	ldr	r2, [sp, #12]
 8008404:	ed4a 6a09 	vstr	s13, [sl, #-36]	; 0xffffffdc
 8008408:	0092      	lsls	r2, r2, #2
 800840a:	9207      	str	r2, [sp, #28]
 800840c:	9a08      	ldr	r2, [sp, #32]
 800840e:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 8008412:	ed12 6a09 	vldr	s12, [r2, #-36]	; 0xffffffdc
 8008416:	ed56 7a09 	vldr	s15, [r6, #-36]	; 0xffffffdc
 800841a:	eee6 7a47 	vfms.f32	s15, s12, s14
 800841e:	ed46 7a09 	vstr	s15, [r6, #-36]	; 0xffffffdc
 8008422:	ed10 7a09 	vldr	s14, [r0, #-36]	; 0xffffffdc
 8008426:	ed58 7a09 	vldr	s15, [r8, #-36]	; 0xffffffdc
 800842a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800842e:	ed48 7a09 	vstr	s15, [r8, #-36]	; 0xffffffdc
 8008432:	ed5c 5a09 	vldr	s11, [ip, #-36]	; 0xffffffdc
 8008436:	ed1e 7a09 	vldr	s14, [lr, #-36]	; 0xffffffdc
 800843a:	eea6 7a65 	vfms.f32	s14, s12, s11
 800843e:	eef0 7ae7 	vabs.f32	s15, s15
 8008442:	ed0e 7a09 	vstr	s14, [lr, #-36]	; 0xffffffdc
 8008446:	ed1c 6a09 	vldr	s12, [ip, #-36]	; 0xffffffdc
 800844a:	ed17 7a09 	vldr	s14, [r7, #-36]	; 0xffffffdc
 800844e:	eea6 7ac6 	vfms.f32	s14, s13, s12
 8008452:	ed07 7a09 	vstr	s14, [r7, #-36]	; 0xffffffdc
 8008456:	ed16 7a09 	vldr	s14, [r6, #-36]	; 0xffffffdc
 800845a:	eeb0 7ac7 	vabs.f32	s14, s14
 800845e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008466:	dd0e      	ble.n	8008486 <m_mldivide+0x1b2>
 8008468:	9a03      	ldr	r2, [sp, #12]
 800846a:	9106      	str	r1, [sp, #24]
 800846c:	4618      	mov	r0, r3
 800846e:	9b02      	ldr	r3, [sp, #8]
 8008470:	9904      	ldr	r1, [sp, #16]
 8008472:	9107      	str	r1, [sp, #28]
 8008474:	0092      	lsls	r2, r2, #2
 8008476:	9204      	str	r2, [sp, #16]
 8008478:	009a      	lsls	r2, r3, #2
 800847a:	9002      	str	r0, [sp, #8]
 800847c:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8008480:	ea4f 0b80 	mov.w	fp, r0, lsl #2
 8008484:	9205      	str	r2, [sp, #20]
 8008486:	460a      	mov	r2, r1
 8008488:	a916      	add	r1, sp, #88	; 0x58
 800848a:	440a      	add	r2, r1
 800848c:	4616      	mov	r6, r2
 800848e:	9a06      	ldr	r2, [sp, #24]
 8008490:	ed16 7a09 	vldr	s14, [r6, #-36]	; 0xffffffdc
 8008494:	440a      	add	r2, r1
 8008496:	ed52 7a09 	vldr	s15, [r2, #-36]	; 0xffffffdc
 800849a:	eec7 2a27 	vdiv.f32	s5, s14, s15
 800849e:	4694      	mov	ip, r2
 80084a0:	9a07      	ldr	r2, [sp, #28]
 80084a2:	440a      	add	r2, r1
 80084a4:	4617      	mov	r7, r2
 80084a6:	9a04      	ldr	r2, [sp, #16]
 80084a8:	440a      	add	r2, r1
 80084aa:	4610      	mov	r0, r2
 80084ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084ae:	a916      	add	r1, sp, #88	; 0x58
 80084b0:	eb05 0a02 	add.w	sl, r5, r2
 80084b4:	eb01 0e02 	add.w	lr, r1, r2
 80084b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80084ba:	ed46 2a09 	vstr	s5, [r6, #-36]	; 0xffffffdc
 80084be:	ed17 7a09 	vldr	s14, [r7, #-36]	; 0xffffffdc
 80084c2:	ed50 7a09 	vldr	s15, [r0, #-36]	; 0xffffffdc
 80084c6:	edda 6a00 	vldr	s13, [sl]
 80084ca:	440a      	add	r2, r1
 80084cc:	4691      	mov	r9, r2
 80084ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084d0:	edc4 6a00 	vstr	s13, [r4]
 80084d4:	eee2 7ac7 	vfms.f32	s15, s5, s14
 80084d8:	440a      	add	r2, r1
 80084da:	4690      	mov	r8, r2
 80084dc:	9a05      	ldr	r2, [sp, #20]
 80084de:	ed40 7a09 	vstr	s15, [r0, #-36]	; 0xffffffdc
 80084e2:	188e      	adds	r6, r1, r2
 80084e4:	eb05 0a02 	add.w	sl, r5, r2
 80084e8:	ed9a 6a00 	vldr	s12, [sl]
 80084ec:	ed16 1a09 	vldr	s2, [r6, #-36]	; 0xffffffdc
 80084f0:	ed1c 5a09 	vldr	s10, [ip, #-36]	; 0xffffffdc
 80084f4:	ed5e 5a09 	vldr	s11, [lr, #-36]	; 0xffffffdc
 80084f8:	ed17 3a09 	vldr	s6, [r7, #-36]	; 0xffffffdc
 80084fc:	ed59 3a09 	vldr	s7, [r9, #-36]	; 0xffffffdc
 8008500:	ed58 4a09 	vldr	s9, [r8, #-36]	; 0xffffffdc
 8008504:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008508:	ee87 2a27 	vdiv.f32	s4, s14, s15
 800850c:	eb05 0c0b 	add.w	ip, r5, fp
 8008510:	448b      	add	fp, r1
 8008512:	9901      	ldr	r1, [sp, #4]
 8008514:	eb05 0781 	add.w	r7, r5, r1, lsl #2
 8008518:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 800851c:	9902      	ldr	r1, [sp, #8]
 800851e:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 8008522:	eea1 6a66 	vfms.f32	s12, s2, s13
 8008526:	ed5b 1a09 	vldr	s3, [fp, #-36]	; 0xffffffdc
 800852a:	ed84 6a01 	vstr	s12, [r4, #4]
 800852e:	eddc 7a00 	vldr	s15, [ip]
 8008532:	ee87 4a05 	vdiv.f32	s8, s14, s10
 8008536:	eee1 7ae6 	vfms.f32	s15, s3, s13
 800853a:	ee87 5a25 	vdiv.f32	s10, s14, s11
 800853e:	eee2 7ac6 	vfms.f32	s15, s5, s12
 8008542:	ee62 7a27 	vmul.f32	s15, s4, s15
 8008546:	eea3 6a67 	vfms.f32	s12, s6, s15
 800854a:	eee3 6ae7 	vfms.f32	s13, s7, s15
 800854e:	ee24 6a06 	vmul.f32	s12, s8, s12
 8008552:	edc4 7a02 	vstr	s15, [r4, #8]
 8008556:	eee4 6ac6 	vfms.f32	s13, s9, s12
 800855a:	ed84 6a01 	vstr	s12, [r4, #4]
 800855e:	ee65 6a26 	vmul.f32	s13, s10, s13
 8008562:	edc4 6a00 	vstr	s13, [r4]
 8008566:	edd7 6a03 	vldr	s13, [r7, #12]
 800856a:	edc4 6a03 	vstr	s13, [r4, #12]
 800856e:	ed96 6a03 	vldr	s12, [r6, #12]
 8008572:	eea1 6a66 	vfms.f32	s12, s2, s13
 8008576:	ed84 6a04 	vstr	s12, [r4, #16]
 800857a:	edd0 5a03 	vldr	s11, [r0, #12]
 800857e:	eee1 5ae6 	vfms.f32	s11, s3, s13
 8008582:	eee2 5ac6 	vfms.f32	s11, s5, s12
 8008586:	ee62 5a25 	vmul.f32	s11, s4, s11
 800858a:	eea3 6a65 	vfms.f32	s12, s6, s11
 800858e:	eee3 6ae5 	vfms.f32	s13, s7, s11
 8008592:	ee24 6a06 	vmul.f32	s12, s8, s12
 8008596:	edc4 5a05 	vstr	s11, [r4, #20]
 800859a:	eee4 6ac6 	vfms.f32	s13, s9, s12
 800859e:	ed84 6a04 	vstr	s12, [r4, #16]
 80085a2:	ee65 6a26 	vmul.f32	s13, s10, s13
 80085a6:	edc4 6a03 	vstr	s13, [r4, #12]
 80085aa:	edd7 7a06 	vldr	s15, [r7, #24]
 80085ae:	edc4 7a06 	vstr	s15, [r4, #24]
 80085b2:	ed96 7a06 	vldr	s14, [r6, #24]
 80085b6:	eea7 7ac1 	vfms.f32	s14, s15, s2
 80085ba:	ed84 7a07 	vstr	s14, [r4, #28]
 80085be:	edd0 6a06 	vldr	s13, [r0, #24]
 80085c2:	eee7 6ae1 	vfms.f32	s13, s15, s3
 80085c6:	eee2 6ac7 	vfms.f32	s13, s5, s14
 80085ca:	ee66 6a82 	vmul.f32	s13, s13, s4
 80085ce:	eea6 7ac3 	vfms.f32	s14, s13, s6
 80085d2:	eee6 7ae3 	vfms.f32	s15, s13, s7
 80085d6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80085da:	edc4 6a08 	vstr	s13, [r4, #32]
 80085de:	eee7 7a64 	vfms.f32	s15, s14, s9
 80085e2:	ed84 7a07 	vstr	s14, [r4, #28]
 80085e6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80085ea:	edc4 7a06 	vstr	s15, [r4, #24]
 80085ee:	b017      	add	sp, #92	; 0x5c
 80085f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f4:	2202      	movs	r2, #2
 80085f6:	f04f 0b08 	mov.w	fp, #8
 80085fa:	f04f 0c05 	mov.w	ip, #5
 80085fe:	9202      	str	r2, [sp, #8]
 8008600:	e6bb      	b.n	800837a <m_mldivide+0xa6>
 8008602:	2300      	movs	r3, #0
 8008604:	f04f 0904 	mov.w	r9, #4
 8008608:	9301      	str	r3, [sp, #4]
 800860a:	461e      	mov	r6, r3
 800860c:	2307      	movs	r3, #7
 800860e:	9303      	str	r3, [sp, #12]
 8008610:	4648      	mov	r0, r9
 8008612:	f04f 0e06 	mov.w	lr, #6
 8008616:	f04f 0803 	mov.w	r8, #3
 800861a:	2301      	movs	r3, #1
 800861c:	e690      	b.n	8008340 <m_mldivide+0x6c>
 800861e:	bf00      	nop

08008620 <m_qmult_eml>:
 8008620:	ed90 2a01 	vldr	s4, [r0, #4]
 8008624:	edd1 4a02 	vldr	s9, [r1, #8]
 8008628:	edd1 5a03 	vldr	s11, [r1, #12]
 800862c:	edd0 2a02 	vldr	s5, [r0, #8]
 8008630:	edd1 3a00 	vldr	s7, [r1]
 8008634:	ed90 3a00 	vldr	s6, [r0]
 8008638:	ed91 4a01 	vldr	s8, [r1, #4]
 800863c:	ed90 5a03 	vldr	s10, [r0, #12]
 8008640:	ee22 6a24 	vmul.f32	s12, s4, s9
 8008644:	ee62 6aa3 	vmul.f32	s13, s5, s7
 8008648:	ee22 7aa5 	vmul.f32	s14, s5, s11
 800864c:	ee64 7ae2 	vnmul.f32	s15, s9, s5
 8008650:	eea3 6a25 	vfma.f32	s12, s6, s11
 8008654:	eee2 6a25 	vfma.f32	s13, s4, s11
 8008658:	eea3 7ac2 	vfms.f32	s14, s7, s4
 800865c:	eee4 7a42 	vfms.f32	s15, s8, s4
 8008660:	eea4 6a62 	vfms.f32	s12, s8, s5
 8008664:	eee4 6ac3 	vfms.f32	s13, s9, s6
 8008668:	eea3 7a04 	vfma.f32	s14, s6, s8
 800866c:	eee3 7ac3 	vfms.f32	s15, s7, s6
 8008670:	eea5 6a23 	vfma.f32	s12, s10, s7
 8008674:	eee5 6a04 	vfma.f32	s13, s10, s8
 8008678:	eea5 7a24 	vfma.f32	s14, s10, s9
 800867c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008680:	ed82 6a00 	vstr	s12, [r2]
 8008684:	edc2 6a01 	vstr	s13, [r2, #4]
 8008688:	ed82 7a02 	vstr	s14, [r2, #8]
 800868c:	edc2 7a03 	vstr	s15, [r2, #12]
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop

08008694 <m_q2dcm_eml>:
 8008694:	b510      	push	{r4, lr}
 8008696:	ed2d 8b06 	vpush	{d8-d10}
 800869a:	ed90 aa03 	vldr	s20, [r0, #12]
 800869e:	ed90 9a02 	vldr	s18, [r0, #8]
 80086a2:	ed90 8a00 	vldr	s16, [r0]
 80086a6:	edd0 8a01 	vldr	s17, [r0, #4]
 80086aa:	ee6a 9a0a 	vmul.f32	s19, s20, s20
 80086ae:	460c      	mov	r4, r1
 80086b0:	1d08      	adds	r0, r1, #4
 80086b2:	2220      	movs	r2, #32
 80086b4:	2100      	movs	r1, #0
 80086b6:	f00a fac5 	bl	8012c44 <memset>
 80086ba:	eef0 5a69 	vmov.f32	s11, s19
 80086be:	eeb0 6a69 	vmov.f32	s12, s19
 80086c2:	eee9 9a09 	vfma.f32	s19, s18, s18
 80086c6:	eee8 5a08 	vfma.f32	s11, s16, s16
 80086ca:	eea8 6aa8 	vfma.f32	s12, s17, s17
 80086ce:	eee8 9a48 	vfms.f32	s19, s16, s16
 80086d2:	ee69 6a0a 	vmul.f32	s13, s18, s20
 80086d6:	ee28 7a8a 	vmul.f32	s14, s17, s20
 80086da:	ee68 7a89 	vmul.f32	s15, s17, s18
 80086de:	eee8 5ae8 	vfms.f32	s11, s17, s17
 80086e2:	eea8 6a48 	vfms.f32	s12, s16, s16
 80086e6:	eee8 9ae8 	vfms.f32	s19, s17, s17
 80086ea:	eeb0 4a66 	vmov.f32	s8, s13
 80086ee:	eef0 4a47 	vmov.f32	s9, s14
 80086f2:	eeb0 5a67 	vmov.f32	s10, s15
 80086f6:	eea8 4a28 	vfma.f32	s8, s16, s17
 80086fa:	eed8 6a28 	vfnms.f32	s13, s16, s17
 80086fe:	eed8 4a09 	vfnms.f32	s9, s16, s18
 8008702:	eea8 7a09 	vfma.f32	s14, s16, s18
 8008706:	eea8 5a0a 	vfma.f32	s10, s16, s20
 800870a:	eee8 7a4a 	vfms.f32	s15, s16, s20
 800870e:	eee9 5a49 	vfms.f32	s11, s18, s18
 8008712:	eea9 6a49 	vfms.f32	s12, s18, s18
 8008716:	edc4 9a08 	vstr	s19, [r4, #32]
 800871a:	ecbd 8b06 	vpop	{d8-d10}
 800871e:	ee34 4a04 	vadd.f32	s8, s8, s8
 8008722:	ee76 6aa6 	vadd.f32	s13, s13, s13
 8008726:	ee74 4aa4 	vadd.f32	s9, s9, s9
 800872a:	ee37 7a07 	vadd.f32	s14, s14, s14
 800872e:	ee35 5a05 	vadd.f32	s10, s10, s10
 8008732:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008736:	edc4 5a00 	vstr	s11, [r4]
 800873a:	ed84 4a03 	vstr	s8, [r4, #12]
 800873e:	edc4 6a01 	vstr	s13, [r4, #4]
 8008742:	edc4 4a06 	vstr	s9, [r4, #24]
 8008746:	ed84 7a02 	vstr	s14, [r4, #8]
 800874a:	ed84 6a04 	vstr	s12, [r4, #16]
 800874e:	ed84 5a07 	vstr	s10, [r4, #28]
 8008752:	edc4 7a05 	vstr	s15, [r4, #20]
 8008756:	bd10      	pop	{r4, pc}

08008758 <st_accCal_MEMS_EIG3>:
 8008758:	ed90 5a02 	vldr	s10, [r0, #8]
 800875c:	edd0 4a01 	vldr	s9, [r0, #4]
 8008760:	ed90 7a05 	vldr	s14, [r0, #20]
 8008764:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008924 <st_accCal_MEMS_EIG3+0x1cc>
 8008768:	ee65 7a05 	vmul.f32	s15, s10, s10
 800876c:	b510      	push	{r4, lr}
 800876e:	eee4 7aa4 	vfma.f32	s15, s9, s9
 8008772:	460c      	mov	r4, r1
 8008774:	ed2d 8b04 	vpush	{d8-d9}
 8008778:	eee7 7a07 	vfma.f32	s15, s14, s14
 800877c:	b08a      	sub	sp, #40	; 0x28
 800877e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008786:	d509      	bpl.n	800879c <st_accCal_MEMS_EIG3+0x44>
 8008788:	6803      	ldr	r3, [r0, #0]
 800878a:	600b      	str	r3, [r1, #0]
 800878c:	6903      	ldr	r3, [r0, #16]
 800878e:	604b      	str	r3, [r1, #4]
 8008790:	6a03      	ldr	r3, [r0, #32]
 8008792:	608b      	str	r3, [r1, #8]
 8008794:	b00a      	add	sp, #40	; 0x28
 8008796:	ecbd 8b04 	vpop	{d8-d9}
 800879a:	bd10      	pop	{r4, pc}
 800879c:	edd0 3a00 	vldr	s7, [r0]
 80087a0:	edd0 5a04 	vldr	s11, [r0, #16]
 80087a4:	ed90 3a08 	vldr	s6, [r0, #32]
 80087a8:	edd0 1a06 	vldr	s3, [r0, #24]
 80087ac:	eddf 9a5e 	vldr	s19, [pc, #376]	; 8008928 <st_accCal_MEMS_EIG3+0x1d0>
 80087b0:	ed90 1a03 	vldr	s2, [r0, #12]
 80087b4:	ed90 6a07 	vldr	s12, [r0, #28]
 80087b8:	ed9f 4a5c 	vldr	s8, [pc, #368]	; 800892c <st_accCal_MEMS_EIG3+0x1d4>
 80087bc:	ee33 8aa5 	vadd.f32	s16, s7, s11
 80087c0:	ee65 6a21 	vmul.f32	s13, s10, s3
 80087c4:	ee38 8a03 	vadd.f32	s16, s16, s6
 80087c8:	eee4 6a81 	vfma.f32	s13, s9, s2
 80087cc:	ee28 8a29 	vmul.f32	s16, s16, s19
 80087d0:	eee7 6a06 	vfma.f32	s13, s14, s12
 80087d4:	ee75 5ac8 	vsub.f32	s11, s11, s16
 80087d8:	ee73 3ac8 	vsub.f32	s7, s7, s16
 80087dc:	ee65 7aa5 	vmul.f32	s15, s11, s11
 80087e0:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
 80087e4:	eee3 7aa3 	vfma.f32	s15, s7, s7
 80087e8:	ee33 3a48 	vsub.f32	s6, s6, s16
 80087ec:	eee6 7aa2 	vfma.f32	s15, s13, s5
 80087f0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80087f4:	eee3 7a03 	vfma.f32	s15, s6, s6
 80087f8:	eeb8 2a00 	vmov.f32	s4, #128	; 0xc0000000 -2.0
 80087fc:	ee67 7a84 	vmul.f32	s15, s15, s8
 8008800:	eef1 8ae7 	vsqrt.f32	s17, s15
 8008804:	eec0 6a28 	vdiv.f32	s13, s0, s17
 8008808:	ee83 4a28 	vdiv.f32	s8, s6, s17
 800880c:	eec3 0aa8 	vdiv.f32	s1, s7, s17
 8008810:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8008814:	ee61 3aa6 	vmul.f32	s7, s3, s13
 8008818:	ee21 3a26 	vmul.f32	s6, s2, s13
 800881c:	ee26 6a26 	vmul.f32	s12, s12, s13
 8008820:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008824:	ee63 7ae5 	vnmul.f32	s15, s7, s11
 8008828:	ee26 5a85 	vmul.f32	s10, s13, s10
 800882c:	eee6 7a03 	vfma.f32	s15, s12, s6
 8008830:	ee26 6a47 	vnmul.f32	s12, s12, s14
 8008834:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008838:	eea5 6a84 	vfma.f32	s12, s11, s8
 800883c:	ee24 4a43 	vnmul.f32	s8, s8, s6
 8008840:	eee6 7a20 	vfma.f32	s15, s12, s1
 8008844:	eea7 4a23 	vfma.f32	s8, s14, s7
 8008848:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800884c:	eee4 7a26 	vfma.f32	s15, s8, s13
 8008850:	eef4 7ac2 	vcmpe.f32	s15, s4
 8008854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008858:	d909      	bls.n	800886e <st_accCal_MEMS_EIG3+0x116>
 800885a:	eef4 7ae2 	vcmpe.f32	s15, s5
 800885e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008862:	db49      	blt.n	80088f8 <st_accCal_MEMS_EIG3+0x1a0>
 8008864:	eeb0 9a40 	vmov.f32	s18, s0
 8008868:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8008930 <st_accCal_MEMS_EIG3+0x1d8>
 800886c:	e003      	b.n	8008876 <st_accCal_MEMS_EIG3+0x11e>
 800886e:	ed9f 9a31 	vldr	s18, [pc, #196]	; 8008934 <st_accCal_MEMS_EIG3+0x1dc>
 8008872:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8008876:	ee78 8aa8 	vadd.f32	s17, s17, s17
 800887a:	eeb0 7a48 	vmov.f32	s14, s16
 800887e:	eef0 6a48 	vmov.f32	s13, s16
 8008882:	eea8 7a89 	vfma.f32	s14, s17, s18
 8008886:	eee8 6a80 	vfma.f32	s13, s17, s0
 800888a:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800888e:	ee77 7a26 	vadd.f32	s15, s14, s13
 8008892:	ed84 7a00 	vstr	s14, [r4]
 8008896:	eed8 7a06 	vfnms.f32	s15, s16, s12
 800889a:	edc4 6a02 	vstr	s13, [r4, #8]
 800889e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088a6:	edc4 7a01 	vstr	s15, [r4, #4]
 80088aa:	dd09      	ble.n	80088c0 <st_accCal_MEMS_EIG3+0x168>
 80088ac:	eeb0 6a47 	vmov.f32	s12, s14
 80088b0:	ed84 7a01 	vstr	s14, [r4, #4]
 80088b4:	edc4 7a00 	vstr	s15, [r4]
 80088b8:	eeb0 7a67 	vmov.f32	s14, s15
 80088bc:	eef0 7a46 	vmov.f32	s15, s12
 80088c0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80088c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088c8:	d509      	bpl.n	80088de <st_accCal_MEMS_EIG3+0x186>
 80088ca:	edc4 7a02 	vstr	s15, [r4, #8]
 80088ce:	ed84 7a01 	vstr	s14, [r4, #4]
 80088d2:	edc4 6a00 	vstr	s13, [r4]
 80088d6:	b00a      	add	sp, #40	; 0x28
 80088d8:	ecbd 8b04 	vpop	{d8-d9}
 80088dc:	bd10      	pop	{r4, pc}
 80088de:	eef4 6ae7 	vcmpe.f32	s13, s15
 80088e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e6:	bf44      	itt	mi
 80088e8:	edc4 7a02 	vstrmi	s15, [r4, #8]
 80088ec:	edc4 6a01 	vstrmi	s13, [r4, #4]
 80088f0:	b00a      	add	sp, #40	; 0x28
 80088f2:	ecbd 8b04 	vpop	{d8-d9}
 80088f6:	bd10      	pop	{r4, pc}
 80088f8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80088fc:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008900:	f00a fbae 	bl	8013060 <acosf>
 8008904:	ee60 9a29 	vmul.f32	s19, s0, s19
 8008908:	eeb0 0a69 	vmov.f32	s0, s19
 800890c:	f00a fa24 	bl	8012d58 <cosf>
 8008910:	eeb0 9a40 	vmov.f32	s18, s0
 8008914:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8008938 <st_accCal_MEMS_EIG3+0x1e0>
 8008918:	ee39 0a80 	vadd.f32	s0, s19, s0
 800891c:	f00a fa1c 	bl	8012d58 <cosf>
 8008920:	e7a9      	b.n	8008876 <st_accCal_MEMS_EIG3+0x11e>
 8008922:	bf00      	nop
 8008924:	358637bd 	.word	0x358637bd
 8008928:	3eaaaaab 	.word	0x3eaaaaab
 800892c:	3e2aaaab 	.word	0x3e2aaaab
 8008930:	bf000001 	.word	0xbf000001
 8008934:	3effffff 	.word	0x3effffff
 8008938:	40060a92 	.word	0x40060a92

0800893c <st_accCal_MEMS_ellipsoidFit7>:
 800893c:	b570      	push	{r4, r5, r6, lr}
 800893e:	ed2d 8b10 	vpush	{d8-d15}
 8008942:	4604      	mov	r4, r0
 8008944:	b0c6      	sub	sp, #280	; 0x118
 8008946:	edd0 7a13 	vldr	s15, [r0, #76]	; 0x4c
 800894a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800894c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800894e:	9011      	str	r0, [sp, #68]	; 0x44
 8008950:	2600      	movs	r6, #0
 8008952:	eeb0 8a67 	vmov.f32	s16, s15
 8008956:	223c      	movs	r2, #60	; 0x3c
 8008958:	9015      	str	r0, [sp, #84]	; 0x54
 800895a:	460d      	mov	r5, r1
 800895c:	a837      	add	r0, sp, #220	; 0xdc
 800895e:	4631      	mov	r1, r6
 8008960:	9314      	str	r3, [sp, #80]	; 0x50
 8008962:	9316      	str	r3, [sp, #88]	; 0x58
 8008964:	edd4 9a12 	vldr	s19, [r4, #72]	; 0x48
 8008968:	edd4 8a16 	vldr	s17, [r4, #88]	; 0x58
 800896c:	ed94 9a19 	vldr	s18, [r4, #100]	; 0x64
 8008970:	960c      	str	r6, [sp, #48]	; 0x30
 8008972:	960e      	str	r6, [sp, #56]	; 0x38
 8008974:	f00a f966 	bl	8012c44 <memset>
 8008978:	ee38 7a48 	vsub.f32	s14, s16, s16
 800897c:	eddf 6a41 	vldr	s13, [pc, #260]	; 8008a84 <st_accCal_MEMS_ellipsoidFit7+0x148>
 8008980:	eddd 1a11 	vldr	s3, [sp, #68]	; 0x44
 8008984:	ed9d 4a15 	vldr	s8, [sp, #84]	; 0x54
 8008988:	eeb0 7ac7 	vabs.f32	s14, s14
 800898c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8008990:	a936      	add	r1, sp, #216	; 0xd8
 8008992:	aa3a      	add	r2, sp, #232	; 0xe8
 8008994:	ab3e      	add	r3, sp, #248	; 0xf8
 8008996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800899a:	e9cd 1203 	strd	r1, r2, [sp, #12]
 800899e:	eef0 7a48 	vmov.f32	s15, s16
 80089a2:	eef0 5a48 	vmov.f32	s11, s16
 80089a6:	9305      	str	r3, [sp, #20]
 80089a8:	f100 825b 	bmi.w	8008e62 <st_accCal_MEMS_ellipsoidFit7+0x526>
 80089ac:	ed9d 2a14 	vldr	s4, [sp, #80]	; 0x50
 80089b0:	eddd 2a16 	vldr	s5, [sp, #88]	; 0x58
 80089b4:	ee29 5a65 	vnmul.f32	s10, s18, s11
 80089b8:	ee62 6ac2 	vnmul.f32	s13, s5, s4
 80089bc:	eea4 5a02 	vfma.f32	s10, s8, s4
 80089c0:	eee9 6a28 	vfma.f32	s13, s18, s17
 80089c4:	ee27 6a85 	vmul.f32	s12, s15, s10
 80089c8:	ee28 7ac4 	vnmul.f32	s14, s17, s8
 80089cc:	eea6 6aa9 	vfma.f32	s12, s13, s19
 80089d0:	eea5 7aa2 	vfma.f32	s14, s11, s5
 80089d4:	eeb0 3a45 	vmov.f32	s6, s10
 80089d8:	eea7 6a21 	vfma.f32	s12, s14, s3
 80089dc:	ed8d 5a3a 	vstr	s10, [sp, #232]	; 0xe8
 80089e0:	ed9f 5a28 	vldr	s10, [pc, #160]	; 8008a84 <st_accCal_MEMS_ellipsoidFit7+0x148>
 80089e4:	edcd 6a36 	vstr	s13, [sp, #216]	; 0xd8
 80089e8:	eef0 4ac6 	vabs.f32	s9, s12
 80089ec:	eef4 4ac5 	vcmpe.f32	s9, s10
 80089f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089f4:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 80089f8:	dd46      	ble.n	8008a88 <st_accCal_MEMS_ellipsoidFit7+0x14c>
 80089fa:	ee69 3ae2 	vnmul.f32	s7, s19, s5
 80089fe:	ee65 4ae7 	vnmul.f32	s9, s11, s15
 8008a02:	eee7 3a84 	vfma.f32	s7, s15, s8
 8008a06:	eee9 4aa8 	vfma.f32	s9, s19, s17
 8008a0a:	ee24 1a61 	vnmul.f32	s2, s8, s3
 8008a0e:	eeb0 4a63 	vmov.f32	s8, s7
 8008a12:	eea9 1a29 	vfma.f32	s2, s18, s19
 8008a16:	eef0 3a64 	vmov.f32	s7, s9
 8008a1a:	2e00      	cmp	r6, #0
 8008a1c:	f000 823b 	beq.w	8008e96 <st_accCal_MEMS_ellipsoidFit7+0x55a>
 8008a20:	eef0 7a47 	vmov.f32	s15, s14
 8008a24:	eeb0 5a43 	vmov.f32	s10, s6
 8008a28:	ed8d 4a3c 	vstr	s8, [sp, #240]	; 0xf0
 8008a2c:	eef0 2a44 	vmov.f32	s5, s8
 8008a30:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8008a34:	eec4 5a86 	vdiv.f32	s11, s9, s12
 8008a38:	ee25 6a85 	vmul.f32	s12, s11, s10
 8008a3c:	ee65 6aa6 	vmul.f32	s13, s11, s13
 8008a40:	ee25 5a83 	vmul.f32	s10, s11, s6
 8008a44:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8008a48:	ee25 3a81 	vmul.f32	s6, s11, s2
 8008a4c:	ee25 7a87 	vmul.f32	s14, s11, s14
 8008a50:	ee25 4a84 	vmul.f32	s8, s11, s8
 8008a54:	ee65 4aa3 	vmul.f32	s9, s11, s7
 8008a58:	ee65 5aa2 	vmul.f32	s11, s11, s5
 8008a5c:	edcd 6a36 	vstr	s13, [sp, #216]	; 0xd8
 8008a60:	ed8d 6a37 	vstr	s12, [sp, #220]	; 0xdc
 8008a64:	edcd 7a38 	vstr	s15, [sp, #224]	; 0xe0
 8008a68:	ed8d 5a3a 	vstr	s10, [sp, #232]	; 0xe8
 8008a6c:	ed8d 3a3b 	vstr	s6, [sp, #236]	; 0xec
 8008a70:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 8008a74:	ed8d 4a3f 	vstr	s8, [sp, #252]	; 0xfc
 8008a78:	edcd 4a40 	vstr	s9, [sp, #256]	; 0x100
 8008a7c:	edcd 5a3c 	vstr	s11, [sp, #240]	; 0xf0
 8008a80:	e002      	b.n	8008a88 <st_accCal_MEMS_ellipsoidFit7+0x14c>
 8008a82:	bf00      	nop
 8008a84:	3a83126f 	.word	0x3a83126f
 8008a88:	ed94 4a04 	vldr	s8, [r4, #16]
 8008a8c:	ed94 3a0a 	vldr	s6, [r4, #40]	; 0x28
 8008a90:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
 8008a94:	ed9d 8a3b 	vldr	s16, [sp, #236]	; 0xec
 8008a98:	ed94 1a03 	vldr	s2, [r4, #12]
 8008a9c:	edd4 ba09 	vldr	s23, [r4, #36]	; 0x24
 8008aa0:	ed94 da0e 	vldr	s26, [r4, #56]	; 0x38
 8008aa4:	eddd 3a3a 	vldr	s7, [sp, #232]	; 0xe8
 8008aa8:	edd4 8a1b 	vldr	s17, [r4, #108]	; 0x6c
 8008aac:	ed9d 9a37 	vldr	s18, [sp, #220]	; 0xdc
 8008ab0:	eddd 5a3f 	vldr	s11, [sp, #252]	; 0xfc
 8008ab4:	edd4 1a05 	vldr	s3, [r4, #20]
 8008ab8:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8008abc:	edd4 ca10 	vldr	s25, [r4, #64]	; 0x40
 8008ac0:	ed9d 5a3c 	vldr	s10, [sp, #240]	; 0xf0
 8008ac4:	eddd 2a36 	vldr	s5, [sp, #216]	; 0xd8
 8008ac8:	ed9d 7a3e 	vldr	s14, [sp, #248]	; 0xf8
 8008acc:	edd4 0a0c 	vldr	s1, [r4, #48]	; 0x30
 8008ad0:	ed94 2a06 	vldr	s4, [r4, #24]
 8008ad4:	ed94 ca11 	vldr	s24, [r4, #68]	; 0x44
 8008ad8:	eddd 6a3d 	vldr	s13, [sp, #244]	; 0xf4
 8008adc:	eddd 4a38 	vldr	s9, [sp, #224]	; 0xe0
 8008ae0:	eddd fa40 	vldr	s31, [sp, #256]	; 0x100
 8008ae4:	ed9d 6a39 	vldr	s12, [sp, #228]	; 0xe4
 8008ae8:	eddd ea41 	vldr	s29, [sp, #260]	; 0x104
 8008aec:	ee68 aa04 	vmul.f32	s21, s16, s8
 8008af0:	ee68 9a03 	vmul.f32	s19, s16, s6
 8008af4:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008af8:	eee3 aa81 	vfma.f32	s21, s7, s2
 8008afc:	a906      	add	r1, sp, #24
 8008afe:	a821      	add	r0, sp, #132	; 0x84
 8008b00:	eee3 9aab 	vfma.f32	s19, s7, s23
 8008b04:	eea3 8a8d 	vfma.f32	s16, s7, s26
 8008b08:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
 8008b0c:	eece da28 	vdiv.f32	s27, s28, s17
 8008b10:	ee29 ba04 	vmul.f32	s22, s18, s8
 8008b14:	ee69 8a03 	vmul.f32	s17, s18, s6
 8008b18:	ee25 aa84 	vmul.f32	s20, s11, s8
 8008b1c:	ee29 9a27 	vmul.f32	s18, s18, s15
 8008b20:	eee5 aa21 	vfma.f32	s21, s10, s3
 8008b24:	eee5 9a00 	vfma.f32	s19, s10, s0
 8008b28:	eea5 8a2c 	vfma.f32	s16, s10, s25
 8008b2c:	eea2 ba81 	vfma.f32	s22, s5, s2
 8008b30:	eee2 8aab 	vfma.f32	s17, s5, s23
 8008b34:	eea2 9a8d 	vfma.f32	s18, s5, s26
 8008b38:	eea7 aa01 	vfma.f32	s20, s14, s2
 8008b3c:	eee6 9aa0 	vfma.f32	s19, s13, s1
 8008b40:	eea6 8a8c 	vfma.f32	s16, s13, s24
 8008b44:	eee6 aa82 	vfma.f32	s21, s13, s4
 8008b48:	ee65 6aa7 	vmul.f32	s13, s11, s15
 8008b4c:	eea4 baa1 	vfma.f32	s22, s9, s3
 8008b50:	eee4 8a80 	vfma.f32	s17, s9, s0
 8008b54:	eea4 9aac 	vfma.f32	s18, s9, s25
 8008b58:	eeaf aaa1 	vfma.f32	s20, s31, s3
 8008b5c:	eee7 6a0d 	vfma.f32	s13, s14, s26
 8008b60:	eee6 8a20 	vfma.f32	s17, s12, s1
 8008b64:	eea6 9a0c 	vfma.f32	s18, s12, s24
 8008b68:	eea6 ba02 	vfma.f32	s22, s12, s4
 8008b6c:	eeae aa82 	vfma.f32	s20, s29, s4
 8008b70:	eeef 6aac 	vfma.f32	s13, s31, s25
 8008b74:	ee65 5a83 	vmul.f32	s11, s11, s6
 8008b78:	edcd 8a2b 	vstr	s17, [sp, #172]	; 0xac
 8008b7c:	edcd da45 	vstr	s27, [sp, #276]	; 0x114
 8008b80:	ed8d ba2a 	vstr	s22, [sp, #168]	; 0xa8
 8008b84:	ed8d 9a2c 	vstr	s18, [sp, #176]	; 0xb0
 8008b88:	edcd aa2d 	vstr	s21, [sp, #180]	; 0xb4
 8008b8c:	edcd 9a2e 	vstr	s19, [sp, #184]	; 0xb8
 8008b90:	ed8d 8a2f 	vstr	s16, [sp, #188]	; 0xbc
 8008b94:	ed8d aa30 	vstr	s20, [sp, #192]	; 0xc0
 8008b98:	ed9d 6a43 	vldr	s12, [sp, #268]	; 0x10c
 8008b9c:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8008ba0:	ed9d fa44 	vldr	s30, [sp, #272]	; 0x110
 8008ba4:	eeee 6a8c 	vfma.f32	s13, s29, s24
 8008ba8:	eee7 5a2b 	vfma.f32	s11, s14, s23
 8008bac:	ee26 7a27 	vmul.f32	s14, s12, s15
 8008bb0:	ee6a 3a84 	vmul.f32	s7, s21, s8
 8008bb4:	eea5 7a0d 	vfma.f32	s14, s10, s26
 8008bb8:	ee66 2a04 	vmul.f32	s5, s12, s8
 8008bbc:	ee26 6a03 	vmul.f32	s12, s12, s6
 8008bc0:	eeef 5a80 	vfma.f32	s11, s31, s0
 8008bc4:	eee1 3a0b 	vfma.f32	s7, s2, s22
 8008bc8:	eef0 fa66 	vmov.f32	s31, s13
 8008bcc:	ee64 4a08 	vmul.f32	s9, s8, s16
 8008bd0:	edd4 6a02 	vldr	s13, [r4, #8]
 8008bd4:	edcd fa32 	vstr	s31, [sp, #200]	; 0xc8
 8008bd8:	eee5 2a01 	vfma.f32	s5, s10, s2
 8008bdc:	eea5 6a2b 	vfma.f32	s12, s10, s23
 8008be0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8008be4:	ee28 5a03 	vmul.f32	s10, s16, s6
 8008be8:	edcd 6a01 	vstr	s13, [sp, #4]
 8008bec:	eee1 4a09 	vfma.f32	s9, s2, s18
 8008bf0:	edd4 6a00 	vldr	s13, [r4]
 8008bf4:	eeaf 7a2c 	vfma.f32	s14, s30, s25
 8008bf8:	eee9 7a0d 	vfma.f32	s15, s18, s26
 8008bfc:	eea9 5a2b 	vfma.f32	s10, s18, s23
 8008c00:	ee24 4a29 	vmul.f32	s8, s8, s19
 8008c04:	ee76 3ae3 	vsub.f32	s7, s13, s7
 8008c08:	eddd 6a01 	vldr	s13, [sp, #4]
 8008c0c:	ed9d da0c 	vldr	s26, [sp, #48]	; 0x30
 8008c10:	eeef 2a21 	vfma.f32	s5, s30, s3
 8008c14:	eea1 4a28 	vfma.f32	s8, s2, s17
 8008c18:	eeaf 6a00 	vfma.f32	s12, s30, s0
 8008c1c:	ed94 1a0d 	vldr	s2, [r4, #52]	; 0x34
 8008c20:	ed94 fa08 	vldr	s30, [r4, #32]
 8008c24:	ee76 4ae4 	vsub.f32	s9, s13, s9
 8008c28:	eeee 5aa0 	vfma.f32	s11, s29, s1
 8008c2c:	eead 7a8c 	vfma.f32	s14, s27, s24
 8008c30:	edd4 6a01 	vldr	s13, [r4, #4]
 8008c34:	ed8d 7a35 	vstr	s14, [sp, #212]	; 0xd4
 8008c38:	ee71 7a67 	vsub.f32	s15, s2, s15
 8008c3c:	ee3f 5a45 	vsub.f32	s10, s30, s10
 8008c40:	ee29 3a83 	vmul.f32	s6, s19, s6
 8008c44:	eee1 4aef 	vfms.f32	s9, s3, s31
 8008c48:	eea8 3aab 	vfma.f32	s6, s17, s23
 8008c4c:	eeec 7aef 	vfms.f32	s15, s25, s31
 8008c50:	eeaf 5ac0 	vfms.f32	s10, s31, s0
 8008c54:	ee36 4ac4 	vsub.f32	s8, s13, s8
 8008c58:	eead 6aa0 	vfma.f32	s12, s27, s1
 8008c5c:	eeb0 fa47 	vmov.f32	s30, s14
 8008c60:	eea1 4ae5 	vfms.f32	s8, s3, s11
 8008c64:	ed94 7a07 	vldr	s14, [r4, #28]
 8008c68:	edcd 5a31 	vstr	s11, [sp, #196]	; 0xc4
 8008c6c:	eee2 4a4f 	vfms.f32	s9, s4, s30
 8008c70:	eeed 2a82 	vfma.f32	s5, s27, s4
 8008c74:	eeaf 5a60 	vfms.f32	s10, s30, s1
 8008c78:	eeec 7a4f 	vfms.f32	s15, s24, s30
 8008c7c:	eeea 3a61 	vfms.f32	s7, s20, s3
 8008c80:	ee37 3a43 	vsub.f32	s6, s14, s6
 8008c84:	eea2 4a46 	vfms.f32	s8, s4, s12
 8008c88:	eea5 3ac0 	vfms.f32	s6, s11, s0
 8008c8c:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
 8008c90:	ed8d 6a34 	vstr	s12, [sp, #208]	; 0xd0
 8008c94:	eef0 ea65 	vmov.f32	s29, s11
 8008c98:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8008c9c:	eef0 ba46 	vmov.f32	s23, s12
 8008ca0:	ee24 6aa5 	vmul.f32	s12, s9, s11
 8008ca4:	eee2 3a62 	vfms.f32	s7, s4, s5
 8008ca8:	ee27 2a27 	vmul.f32	s4, s14, s15
 8008cac:	ee27 7a05 	vmul.f32	s14, s14, s10
 8008cb0:	eef0 ca46 	vmov.f32	s25, s12
 8008cb4:	eea4 7a25 	vfma.f32	s14, s8, s11
 8008cb8:	eeed ca04 	vfma.f32	s25, s26, s8
 8008cbc:	eef0 1a47 	vmov.f32	s3, s14
 8008cc0:	eeb0 7a6c 	vmov.f32	s14, s25
 8008cc4:	eea3 7aa5 	vfma.f32	s14, s7, s11
 8008cc8:	ee23 1aa5 	vmul.f32	s2, s7, s11
 8008ccc:	ee27 0aa5 	vmul.f32	s0, s15, s11
 8008cd0:	eea4 1a25 	vfma.f32	s2, s8, s11
 8008cd4:	ed8d 7a24 	vstr	s14, [sp, #144]	; 0x90
 8008cd8:	ed9d 7a0e 	vldr	s14, [sp, #56]	; 0x38
 8008cdc:	edcd 2a33 	vstr	s5, [sp, #204]	; 0xcc
 8008ce0:	ee65 7a25 	vmul.f32	s15, s10, s11
 8008ce4:	eea7 1a24 	vfma.f32	s2, s14, s9
 8008ce8:	eeb0 ca40 	vmov.f32	s24, s0
 8008cec:	eeb0 7a40 	vmov.f32	s14, s0
 8008cf0:	eea4 caa5 	vfma.f32	s24, s9, s11
 8008cf4:	eea4 6a25 	vfma.f32	s12, s8, s11
 8008cf8:	eea5 7a25 	vfma.f32	s14, s10, s11
 8008cfc:	eef0 6a67 	vmov.f32	s13, s15
 8008d00:	eeab 3ae0 	vfms.f32	s6, s23, s1
 8008d04:	eea4 2aa5 	vfma.f32	s4, s9, s11
 8008d08:	eee4 6a25 	vfma.f32	s13, s8, s11
 8008d0c:	ed8d 6a21 	vstr	s12, [sp, #132]	; 0x84
 8008d10:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
 8008d14:	eeb0 6a4c 	vmov.f32	s12, s24
 8008d18:	eeb0 7a61 	vmov.f32	s14, s3
 8008d1c:	eea5 2a25 	vfma.f32	s4, s10, s11
 8008d20:	eea3 7a25 	vfma.f32	s14, s6, s11
 8008d24:	eee3 7a25 	vfma.f32	s15, s6, s11
 8008d28:	eead 6a05 	vfma.f32	s12, s26, s10
 8008d2c:	eeed 6a03 	vfma.f32	s13, s26, s6
 8008d30:	edcd 2a01 	vstr	s5, [sp, #4]
 8008d34:	ed8d 1a27 	vstr	s2, [sp, #156]	; 0x9c
 8008d38:	ed8d 6a26 	vstr	s12, [sp, #152]	; 0x98
 8008d3c:	ed8d 2a29 	vstr	s4, [sp, #164]	; 0xa4
 8008d40:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8008d44:	ed8d 7a28 	vstr	s14, [sp, #160]	; 0xa0
 8008d48:	edcd 7a22 	vstr	s15, [sp, #136]	; 0x88
 8008d4c:	f7ff fd04 	bl	8008758 <st_accCal_MEMS_EIG3>
 8008d50:	ed9d 6a21 	vldr	s12, [sp, #132]	; 0x84
 8008d54:	ed9d 4a07 	vldr	s8, [sp, #28]
 8008d58:	ed9d 3a06 	vldr	s6, [sp, #24]
 8008d5c:	eddd 3a27 	vldr	s7, [sp, #156]	; 0x9c
 8008d60:	ed9d 7a23 	vldr	s14, [sp, #140]	; 0x8c
 8008d64:	ed9d 5a25 	vldr	s10, [sp, #148]	; 0x94
 8008d68:	eddd 7a26 	vldr	s15, [sp, #152]	; 0x98
 8008d6c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8008d70:	eddd 1a22 	vldr	s3, [sp, #136]	; 0x88
 8008d74:	ed9d 2a29 	vldr	s4, [sp, #164]	; 0xa4
 8008d78:	eddd 6a28 	vldr	s13, [sp, #160]	; 0xa0
 8008d7c:	ee36 4a44 	vsub.f32	s8, s12, s8
 8008d80:	ee23 7a87 	vmul.f32	s14, s7, s14
 8008d84:	ee74 5a43 	vsub.f32	s11, s8, s6
 8008d88:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8008d8c:	ee35 5a85 	vadd.f32	s10, s11, s10
 8008d90:	eea1 7aa4 	vfma.f32	s14, s3, s9
 8008d94:	ee75 5a82 	vadd.f32	s11, s11, s4
 8008d98:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8008d9c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008da0:	eee3 6aa5 	vfma.f32	s13, s7, s11
 8008da4:	ee36 6a43 	vsub.f32	s12, s12, s6
 8008da8:	eef0 7ae7 	vabs.f32	s15, s15
 8008dac:	eea6 7a04 	vfma.f32	s14, s12, s8
 8008db0:	eec6 caa7 	vdiv.f32	s25, s13, s15
 8008db4:	ee87 ca27 	vdiv.f32	s24, s14, s15
 8008db8:	ee6c 7aac 	vmul.f32	s15, s25, s25
 8008dbc:	eeec 7a0c 	vfma.f32	s15, s24, s24
 8008dc0:	ee77 7a8e 	vadd.f32	s15, s15, s28
 8008dc4:	ee17 0a90 	vmov	r0, s15
 8008dc8:	f7f7 fb62 	bl	8000490 <__aeabi_f2d>
 8008dcc:	ec41 0b10 	vmov	d0, r0, r1
 8008dd0:	f00a f91a 	bl	8013008 <sqrt>
 8008dd4:	ec51 0b10 	vmov	r0, r1, d0
 8008dd8:	f7f7 feaa 	bl	8000b30 <__aeabi_d2f>
 8008ddc:	ee07 0a90 	vmov	s15, r0
 8008de0:	eece 4a27 	vdiv.f32	s9, s28, s15
 8008de4:	eddd 2a01 	vldr	s5, [sp, #4]
 8008de8:	edc5 4a01 	vstr	s9, [r5, #4]
 8008dec:	ee6c 5aa4 	vmul.f32	s11, s25, s9
 8008df0:	ee2c 5a24 	vmul.f32	s10, s24, s9
 8008df4:	ee68 8aa4 	vmul.f32	s17, s17, s9
 8008df8:	ee68 6a25 	vmul.f32	s13, s16, s11
 8008dfc:	ee2f 7aa5 	vmul.f32	s14, s31, s11
 8008e00:	ee6f 7a25 	vmul.f32	s15, s30, s11
 8008e04:	eee5 8a0b 	vfma.f32	s17, s10, s22
 8008e08:	eee9 6aa4 	vfma.f32	s13, s19, s9
 8008e0c:	eea4 7aae 	vfma.f32	s14, s9, s29
 8008e10:	eee4 7aab 	vfma.f32	s15, s9, s23
 8008e14:	eeb0 6a68 	vmov.f32	s12, s17
 8008e18:	eeea 6a85 	vfma.f32	s13, s21, s10
 8008e1c:	eeaa 7a05 	vfma.f32	s14, s20, s10
 8008e20:	eee5 7a22 	vfma.f32	s15, s10, s5
 8008e24:	eea5 6a89 	vfma.f32	s12, s11, s18
 8008e28:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8008e2c:	eef1 6a66 	vneg.f32	s13, s13
 8008e30:	eeb1 7a47 	vneg.f32	s14, s14
 8008e34:	eef1 7a67 	vneg.f32	s15, s15
 8008e38:	eeb1 6a46 	vneg.f32	s12, s12
 8008e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e40:	edc5 6a04 	vstr	s13, [r5, #16]
 8008e44:	ed85 7a05 	vstr	s14, [r5, #20]
 8008e48:	edc5 7a06 	vstr	s15, [r5, #24]
 8008e4c:	ed85 6a03 	vstr	s12, [r5, #12]
 8008e50:	ed85 5a00 	vstr	s10, [r5]
 8008e54:	edc5 5a02 	vstr	s11, [r5, #8]
 8008e58:	d430      	bmi.n	8008ebc <st_accCal_MEMS_ellipsoidFit7+0x580>
 8008e5a:	b046      	add	sp, #280	; 0x118
 8008e5c:	ecbd 8b10 	vpop	{d8-d15}
 8008e60:	bd70      	pop	{r4, r5, r6, pc}
 8008e62:	ee31 7ac4 	vsub.f32	s14, s3, s8
 8008e66:	ed9d 2a14 	vldr	s4, [sp, #80]	; 0x50
 8008e6a:	eddd 2a16 	vldr	s5, [sp, #88]	; 0x58
 8008e6e:	eeb0 7ac7 	vabs.f32	s14, s14
 8008e72:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8008e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e7a:	f57f ad9b 	bpl.w	80089b4 <st_accCal_MEMS_ellipsoidFit7+0x78>
 8008e7e:	ee32 7a62 	vsub.f32	s14, s4, s5
 8008e82:	eeb0 7ac7 	vabs.f32	s14, s14
 8008e86:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8008e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e8e:	bf4c      	ite	mi
 8008e90:	2601      	movmi	r6, #1
 8008e92:	2600      	movpl	r6, #0
 8008e94:	e58e      	b.n	80089b4 <st_accCal_MEMS_ellipsoidFit7+0x78>
 8008e96:	ee69 4ac2 	vnmul.f32	s9, s19, s4
 8008e9a:	ee29 5a67 	vnmul.f32	s10, s18, s15
 8008e9e:	eee5 4aa1 	vfma.f32	s9, s11, s3
 8008ea2:	ee68 5ae1 	vnmul.f32	s11, s17, s3
 8008ea6:	eea1 5aa2 	vfma.f32	s10, s3, s5
 8008eaa:	eee7 5a82 	vfma.f32	s11, s15, s4
 8008eae:	edcd 4a3c 	vstr	s9, [sp, #240]	; 0xf0
 8008eb2:	eef0 7a65 	vmov.f32	s15, s11
 8008eb6:	eef0 2a64 	vmov.f32	s5, s9
 8008eba:	e5b9      	b.n	8008a30 <st_accCal_MEMS_ellipsoidFit7+0xf4>
 8008ebc:	eeb1 5a45 	vneg.f32	s10, s10
 8008ec0:	eef1 4a64 	vneg.f32	s9, s9
 8008ec4:	eef1 5a65 	vneg.f32	s11, s11
 8008ec8:	eeb1 6a46 	vneg.f32	s12, s12
 8008ecc:	eef1 6a66 	vneg.f32	s13, s13
 8008ed0:	eeb1 7a47 	vneg.f32	s14, s14
 8008ed4:	eef1 7a67 	vneg.f32	s15, s15
 8008ed8:	ed85 5a00 	vstr	s10, [r5]
 8008edc:	edc5 4a01 	vstr	s9, [r5, #4]
 8008ee0:	edc5 5a02 	vstr	s11, [r5, #8]
 8008ee4:	ed85 6a03 	vstr	s12, [r5, #12]
 8008ee8:	edc5 6a04 	vstr	s13, [r5, #16]
 8008eec:	ed85 7a05 	vstr	s14, [r5, #20]
 8008ef0:	edc5 7a06 	vstr	s15, [r5, #24]
 8008ef4:	b046      	add	sp, #280	; 0x118
 8008ef6:	ecbd 8b10 	vpop	{d8-d15}
 8008efa:	bd70      	pop	{r4, r5, r6, pc}

08008efc <m_dcm2q_eml>:
 8008efc:	ed90 7a04 	vldr	s14, [r0, #16]
 8008f00:	edd0 6a08 	vldr	s13, [r0, #32]
 8008f04:	edd0 7a00 	vldr	s15, [r0]
 8008f08:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008f0c:	b538      	push	{r3, r4, r5, lr}
 8008f0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008f12:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8008f16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f1e:	ed2d 8b02 	vpush	{d8}
 8008f22:	4604      	mov	r4, r0
 8008f24:	460d      	mov	r5, r1
 8008f26:	f340 80c1 	ble.w	80090ac <m_dcm2q_eml+0x1b0>
 8008f2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008f32:	ee17 0a90 	vmov	r0, s15
 8008f36:	f7f7 faab 	bl	8000490 <__aeabi_f2d>
 8008f3a:	ec41 0b10 	vmov	d0, r0, r1
 8008f3e:	f00a f863 	bl	8013008 <sqrt>
 8008f42:	ec51 0b10 	vmov	r0, r1, d0
 8008f46:	f7f7 fdf3 	bl	8000b30 <__aeabi_d2f>
 8008f4a:	ee07 0a90 	vmov	s15, r0
 8008f4e:	edd4 6a05 	vldr	s13, [r4, #20]
 8008f52:	ed94 7a07 	vldr	s14, [r4, #28]
 8008f56:	edd4 5a06 	vldr	s11, [r4, #24]
 8008f5a:	ed94 5a02 	vldr	s10, [r4, #8]
 8008f5e:	ed94 6a03 	vldr	s12, [r4, #12]
 8008f62:	ed94 4a01 	vldr	s8, [r4, #4]
 8008f66:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008f6a:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8008f6e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008f7a:	bf54      	ite	pl
 8008f7c:	eef0 4a47 	vmovpl.f32	s9, s14
 8008f80:	eef0 4a66 	vmovmi.f32	s9, s13
 8008f84:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8008f88:	ee35 5a65 	vsub.f32	s10, s10, s11
 8008f8c:	edc5 7a00 	vstr	s15, [r5]
 8008f90:	edd4 5a00 	vldr	s11, [r4]
 8008f94:	edd4 4a08 	vldr	s9, [r4, #32]
 8008f98:	edd4 7a04 	vldr	s15, [r4, #16]
 8008f9c:	ee75 5aa4 	vadd.f32	s11, s11, s9
 8008fa0:	ee36 6a44 	vsub.f32	s12, s12, s8
 8008fa4:	eeb5 5ac0 	vcmpe.f32	s10, #0.0
 8008fa8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8008fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb0:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8008fb4:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 8008fb8:	bf54      	ite	pl
 8008fba:	eef0 8a47 	vmovpl.f32	s17, s14
 8008fbe:	eef0 8a66 	vmovmi.f32	s17, s13
 8008fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fc6:	eef4 7ac6 	vcmpe.f32	s15, s12
 8008fca:	bf54      	ite	pl
 8008fcc:	eeb0 8a47 	vmovpl.f32	s16, s14
 8008fd0:	eeb0 8a66 	vmovmi.f32	s16, s13
 8008fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fd8:	dd75      	ble.n	80090c6 <m_dcm2q_eml+0x1ca>
 8008fda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fde:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008fe2:	ee17 0a90 	vmov	r0, s15
 8008fe6:	f7f7 fa53 	bl	8000490 <__aeabi_f2d>
 8008fea:	ec41 0b10 	vmov	d0, r0, r1
 8008fee:	f00a f80b 	bl	8013008 <sqrt>
 8008ff2:	ec51 0b10 	vmov	r0, r1, d0
 8008ff6:	f7f7 fd9b 	bl	8000b30 <__aeabi_d2f>
 8008ffa:	ee07 0a90 	vmov	s15, r0
 8008ffe:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8009002:	edc5 7a01 	vstr	s15, [r5, #4]
 8009006:	edd4 6a04 	vldr	s13, [r4, #16]
 800900a:	ed94 7a00 	vldr	s14, [r4]
 800900e:	edd4 7a08 	vldr	s15, [r4, #32]
 8009012:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009016:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 800901a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800901e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009026:	dd4b      	ble.n	80090c0 <m_dcm2q_eml+0x1c4>
 8009028:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800902c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009030:	ee17 0a90 	vmov	r0, s15
 8009034:	f7f7 fa2c 	bl	8000490 <__aeabi_f2d>
 8009038:	ec41 0b10 	vmov	d0, r0, r1
 800903c:	f009 ffe4 	bl	8013008 <sqrt>
 8009040:	ec51 0b10 	vmov	r0, r1, d0
 8009044:	f7f7 fd74 	bl	8000b30 <__aeabi_d2f>
 8009048:	ee07 0a90 	vmov	s15, r0
 800904c:	ee27 7a88 	vmul.f32	s14, s15, s16
 8009050:	ed85 7a02 	vstr	s14, [r5, #8]
 8009054:	ed94 7a04 	vldr	s14, [r4, #16]
 8009058:	edd4 7a00 	vldr	s15, [r4]
 800905c:	edd4 6a08 	vldr	s13, [r4, #32]
 8009060:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009064:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8009068:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800906c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009074:	dd1d      	ble.n	80090b2 <m_dcm2q_eml+0x1b6>
 8009076:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800907a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800907e:	ee17 0a90 	vmov	r0, s15
 8009082:	f7f7 fa05 	bl	8000490 <__aeabi_f2d>
 8009086:	ec41 0b10 	vmov	d0, r0, r1
 800908a:	f009 ffbd 	bl	8013008 <sqrt>
 800908e:	ec51 0b10 	vmov	r0, r1, d0
 8009092:	f7f7 fd4d 	bl	8000b30 <__aeabi_d2f>
 8009096:	ecbd 8b02 	vpop	{d8}
 800909a:	ee07 0a10 	vmov	s14, r0
 800909e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80090a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80090a6:	edc5 7a03 	vstr	s15, [r5, #12]
 80090aa:	bd38      	pop	{r3, r4, r5, pc}
 80090ac:	eddf 7a07 	vldr	s15, [pc, #28]	; 80090cc <m_dcm2q_eml+0x1d0>
 80090b0:	e74d      	b.n	8008f4e <m_dcm2q_eml+0x52>
 80090b2:	ecbd 8b02 	vpop	{d8}
 80090b6:	eddf 7a05 	vldr	s15, [pc, #20]	; 80090cc <m_dcm2q_eml+0x1d0>
 80090ba:	edc5 7a03 	vstr	s15, [r5, #12]
 80090be:	bd38      	pop	{r3, r4, r5, pc}
 80090c0:	ed9f 7a02 	vldr	s14, [pc, #8]	; 80090cc <m_dcm2q_eml+0x1d0>
 80090c4:	e7c4      	b.n	8009050 <m_dcm2q_eml+0x154>
 80090c6:	eddf 7a01 	vldr	s15, [pc, #4]	; 80090cc <m_dcm2q_eml+0x1d0>
 80090ca:	e79a      	b.n	8009002 <m_dcm2q_eml+0x106>
 80090cc:	00000000 	.word	0x00000000

080090d0 <SpacePointGyroProp>:
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	eddf 6a46 	vldr	s13, [pc, #280]	; 80091ec <SpacePointGyroProp+0x11c>
 80090d6:	ed92 6a01 	vldr	s12, [r2, #4]
 80090da:	ed92 7a00 	vldr	s14, [r2]
 80090de:	edd1 7a02 	vldr	s15, [r1, #8]
 80090e2:	ed2d 8b04 	vpush	{d8-d9}
 80090e6:	edd1 8a01 	vldr	s17, [r1, #4]
 80090ea:	ed91 9a00 	vldr	s18, [r1]
 80090ee:	ed92 8a02 	vldr	s16, [r2, #8]
 80090f2:	9d08      	ldr	r5, [sp, #32]
 80090f4:	ee20 0a26 	vmul.f32	s0, s0, s13
 80090f8:	ee78 8ac6 	vsub.f32	s17, s17, s12
 80090fc:	ee39 9a47 	vsub.f32	s18, s18, s14
 8009100:	ee68 8a80 	vmul.f32	s17, s17, s0
 8009104:	ee29 9a00 	vmul.f32	s18, s18, s0
 8009108:	ee28 7aa8 	vmul.f32	s14, s17, s17
 800910c:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8009110:	eea9 7a09 	vfma.f32	s14, s18, s18
 8009114:	4606      	mov	r6, r0
 8009116:	461c      	mov	r4, r3
 8009118:	ee27 8a80 	vmul.f32	s16, s15, s0
 800911c:	eef0 7a47 	vmov.f32	s15, s14
 8009120:	eee8 7a08 	vfma.f32	s15, s16, s16
 8009124:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8009128:	eef4 7ae6 	vcmpe.f32	s15, s13
 800912c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009130:	d55a      	bpl.n	80091e8 <SpacePointGyroProp+0x118>
 8009132:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8009136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800913a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800913e:	ee17 0a10 	vmov	r0, s14
 8009142:	f7f7 f9a5 	bl	8000490 <__aeabi_f2d>
 8009146:	ec41 0b10 	vmov	d0, r0, r1
 800914a:	f009 ff5d 	bl	8013008 <sqrt>
 800914e:	ec51 0b10 	vmov	r0, r1, d0
 8009152:	f7f7 fced 	bl	8000b30 <__aeabi_d2f>
 8009156:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800915a:	ee29 9a27 	vmul.f32	s18, s18, s15
 800915e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8009162:	ee28 8a27 	vmul.f32	s16, s16, s15
 8009166:	4622      	mov	r2, r4
 8009168:	60e8      	str	r0, [r5, #12]
 800916a:	4631      	mov	r1, r6
 800916c:	ed85 9a00 	vstr	s18, [r5]
 8009170:	edc5 8a01 	vstr	s17, [r5, #4]
 8009174:	ed85 8a02 	vstr	s16, [r5, #8]
 8009178:	4628      	mov	r0, r5
 800917a:	f7ff fa51 	bl	8008620 <m_qmult_eml>
 800917e:	edd4 8a02 	vldr	s17, [r4, #8]
 8009182:	ed94 9a01 	vldr	s18, [r4, #4]
 8009186:	ed94 8a03 	vldr	s16, [r4, #12]
 800918a:	edd4 9a00 	vldr	s19, [r4]
 800918e:	ee68 7aa8 	vmul.f32	s15, s17, s17
 8009192:	eee9 7a09 	vfma.f32	s15, s18, s18
 8009196:	eee8 7a08 	vfma.f32	s15, s16, s16
 800919a:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800919e:	ee17 0a90 	vmov	r0, s15
 80091a2:	f7f7 f975 	bl	8000490 <__aeabi_f2d>
 80091a6:	ec41 0b10 	vmov	d0, r0, r1
 80091aa:	f009 ff2d 	bl	8013008 <sqrt>
 80091ae:	ec51 0b10 	vmov	r0, r1, d0
 80091b2:	f7f7 fcbd 	bl	8000b30 <__aeabi_d2f>
 80091b6:	ee07 0a90 	vmov	s15, r0
 80091ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80091be:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80091c2:	ee67 9aa9 	vmul.f32	s19, s15, s19
 80091c6:	ee29 9a27 	vmul.f32	s18, s18, s15
 80091ca:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80091ce:	ee28 8a27 	vmul.f32	s16, s16, s15
 80091d2:	edc4 9a00 	vstr	s19, [r4]
 80091d6:	ed84 9a01 	vstr	s18, [r4, #4]
 80091da:	edc4 8a02 	vstr	s17, [r4, #8]
 80091de:	ed84 8a03 	vstr	s16, [r4, #12]
 80091e2:	ecbd 8b04 	vpop	{d8-d9}
 80091e6:	bd70      	pop	{r4, r5, r6, pc}
 80091e8:	2000      	movs	r0, #0
 80091ea:	e7b4      	b.n	8009156 <SpacePointGyroProp+0x86>
 80091ec:	3c8efa35 	.word	0x3c8efa35

080091f0 <SpacePointGyroPropRedist>:
 80091f0:	b570      	push	{r4, r5, r6, lr}
 80091f2:	460d      	mov	r5, r1
 80091f4:	ed2d 8b04 	vpush	{d8-d9}
 80091f8:	4619      	mov	r1, r3
 80091fa:	4606      	mov	r6, r0
 80091fc:	4610      	mov	r0, r2
 80091fe:	461a      	mov	r2, r3
 8009200:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8009202:	f7ff fa0d 	bl	8008620 <m_qmult_eml>
 8009206:	462a      	mov	r2, r5
 8009208:	4629      	mov	r1, r5
 800920a:	4630      	mov	r0, r6
 800920c:	f7ff fa08 	bl	8008620 <m_qmult_eml>
 8009210:	4622      	mov	r2, r4
 8009212:	4618      	mov	r0, r3
 8009214:	9908      	ldr	r1, [sp, #32]
 8009216:	f7ff fa03 	bl	8008620 <m_qmult_eml>
 800921a:	4621      	mov	r1, r4
 800921c:	4628      	mov	r0, r5
 800921e:	f7ff f9ff 	bl	8008620 <m_qmult_eml>
 8009222:	ed94 9a01 	vldr	s18, [r4, #4]
 8009226:	edd4 9a00 	vldr	s19, [r4]
 800922a:	edd4 8a02 	vldr	s17, [r4, #8]
 800922e:	ed94 8a03 	vldr	s16, [r4, #12]
 8009232:	ee69 7a09 	vmul.f32	s15, s18, s18
 8009236:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800923a:	eee8 7aa8 	vfma.f32	s15, s17, s17
 800923e:	eee8 7a08 	vfma.f32	s15, s16, s16
 8009242:	ee17 0a90 	vmov	r0, s15
 8009246:	f7f7 f923 	bl	8000490 <__aeabi_f2d>
 800924a:	ec41 0b10 	vmov	d0, r0, r1
 800924e:	f009 fedb 	bl	8013008 <sqrt>
 8009252:	ec51 0b10 	vmov	r0, r1, d0
 8009256:	f7f7 fc6b 	bl	8000b30 <__aeabi_d2f>
 800925a:	ee07 0a90 	vmov	s15, r0
 800925e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009262:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8009266:	ee67 9aa9 	vmul.f32	s19, s15, s19
 800926a:	ee29 9a27 	vmul.f32	s18, s18, s15
 800926e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8009272:	ee28 8a27 	vmul.f32	s16, s16, s15
 8009276:	edc4 9a00 	vstr	s19, [r4]
 800927a:	ed84 9a01 	vstr	s18, [r4, #4]
 800927e:	edc4 8a02 	vstr	s17, [r4, #8]
 8009282:	ed84 8a03 	vstr	s16, [r4, #12]
 8009286:	ecbd 8b04 	vpop	{d8-d9}
 800928a:	bd70      	pop	{r4, r5, r6, pc}

0800928c <quatErr2EulerErr>:
 800928c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009290:	2300      	movs	r3, #0
 8009292:	ed2d 8b04 	vpush	{d8-d9}
 8009296:	6013      	str	r3, [r2, #0]
 8009298:	6053      	str	r3, [r2, #4]
 800929a:	6093      	str	r3, [r2, #8]
 800929c:	ed90 0a01 	vldr	s0, [r0, #4]
 80092a0:	ed9f 8a6c 	vldr	s16, [pc, #432]	; 8009454 <quatErr2EulerErr+0x1c8>
 80092a4:	4606      	mov	r6, r0
 80092a6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80092aa:	460c      	mov	r4, r1
 80092ac:	4615      	mov	r5, r2
 80092ae:	f009 fd53 	bl	8012d58 <cosf>
 80092b2:	ed96 9a02 	vldr	s18, [r6, #8]
 80092b6:	ee29 9a08 	vmul.f32	s18, s18, s16
 80092ba:	eef0 8a40 	vmov.f32	s17, s0
 80092be:	eeb0 0a49 	vmov.f32	s0, s18
 80092c2:	f009 fdb1 	bl	8012e28 <sinf>
 80092c6:	eeb0 8a40 	vmov.f32	s16, s0
 80092ca:	eeb0 0a49 	vmov.f32	s0, s18
 80092ce:	f009 fd43 	bl	8012d58 <cosf>
 80092d2:	edd4 7a01 	vldr	s15, [r4, #4]
 80092d6:	edd4 6a02 	vldr	s13, [r4, #8]
 80092da:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8009458 <quatErr2EulerErr+0x1cc>
 80092de:	ee20 9a00 	vmul.f32	s18, s0, s0
 80092e2:	ee28 8a08 	vmul.f32	s16, s16, s16
 80092e6:	ee69 7a27 	vmul.f32	s15, s18, s15
 80092ea:	eee8 7a26 	vfma.f32	s15, s16, s13
 80092ee:	eef1 6ae7 	vsqrt.f32	s13, s15
 80092f2:	ee66 7a87 	vmul.f32	s15, s13, s14
 80092f6:	ee17 0a90 	vmov	r0, s15
 80092fa:	f7f7 f8c9 	bl	8000490 <__aeabi_f2d>
 80092fe:	4b57      	ldr	r3, [pc, #348]	; (800945c <quatErr2EulerErr+0x1d0>)
 8009300:	2200      	movs	r2, #0
 8009302:	4680      	mov	r8, r0
 8009304:	4689      	mov	r9, r1
 8009306:	f7f7 fb97 	bl	8000a38 <__aeabi_dcmple>
 800930a:	b918      	cbnz	r0, 8009314 <quatErr2EulerErr+0x88>
 800930c:	f8df 914c 	ldr.w	r9, [pc, #332]	; 800945c <quatErr2EulerErr+0x1d0>
 8009310:	f04f 0800 	mov.w	r8, #0
 8009314:	4649      	mov	r1, r9
 8009316:	4640      	mov	r0, r8
 8009318:	f7f7 fc0a 	bl	8000b30 <__aeabi_d2f>
 800931c:	f7f7 f8b8 	bl	8000490 <__aeabi_f2d>
 8009320:	4b4f      	ldr	r3, [pc, #316]	; (8009460 <quatErr2EulerErr+0x1d4>)
 8009322:	2200      	movs	r2, #0
 8009324:	4680      	mov	r8, r0
 8009326:	4689      	mov	r9, r1
 8009328:	f7f7 fb90 	bl	8000a4c <__aeabi_dcmpge>
 800932c:	b918      	cbnz	r0, 8009336 <quatErr2EulerErr+0xaa>
 800932e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 8009460 <quatErr2EulerErr+0x1d4>
 8009332:	f04f 0800 	mov.w	r8, #0
 8009336:	4649      	mov	r1, r9
 8009338:	4640      	mov	r0, r8
 800933a:	f7f7 fbf9 	bl	8000b30 <__aeabi_d2f>
 800933e:	6068      	str	r0, [r5, #4]
 8009340:	edd4 7a02 	vldr	s15, [r4, #8]
 8009344:	ed94 6a01 	vldr	s12, [r4, #4]
 8009348:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8009464 <quatErr2EulerErr+0x1d8>
 800934c:	eddf 6a42 	vldr	s13, [pc, #264]	; 8009458 <quatErr2EulerErr+0x1cc>
 8009350:	ee69 7a27 	vmul.f32	s15, s18, s15
 8009354:	eea8 7aa8 	vfma.f32	s14, s17, s17
 8009358:	eee8 7a06 	vfma.f32	s15, s16, s12
 800935c:	ee87 6a87 	vdiv.f32	s12, s15, s14
 8009360:	eef1 7ac6 	vsqrt.f32	s15, s12
 8009364:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009368:	ee17 0a90 	vmov	r0, s15
 800936c:	f7f7 f890 	bl	8000490 <__aeabi_f2d>
 8009370:	4b3d      	ldr	r3, [pc, #244]	; (8009468 <quatErr2EulerErr+0x1dc>)
 8009372:	2200      	movs	r2, #0
 8009374:	4680      	mov	r8, r0
 8009376:	4689      	mov	r9, r1
 8009378:	f7f7 fb5e 	bl	8000a38 <__aeabi_dcmple>
 800937c:	b918      	cbnz	r0, 8009386 <quatErr2EulerErr+0xfa>
 800937e:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8009468 <quatErr2EulerErr+0x1dc>
 8009382:	f04f 0800 	mov.w	r8, #0
 8009386:	4649      	mov	r1, r9
 8009388:	4640      	mov	r0, r8
 800938a:	f7f7 fbd1 	bl	8000b30 <__aeabi_d2f>
 800938e:	f7f7 f87f 	bl	8000490 <__aeabi_f2d>
 8009392:	4b33      	ldr	r3, [pc, #204]	; (8009460 <quatErr2EulerErr+0x1d4>)
 8009394:	2200      	movs	r2, #0
 8009396:	4680      	mov	r8, r0
 8009398:	4689      	mov	r9, r1
 800939a:	f7f7 fb57 	bl	8000a4c <__aeabi_dcmpge>
 800939e:	b918      	cbnz	r0, 80093a8 <quatErr2EulerErr+0x11c>
 80093a0:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 8009460 <quatErr2EulerErr+0x1d4>
 80093a4:	f04f 0800 	mov.w	r8, #0
 80093a8:	4640      	mov	r0, r8
 80093aa:	4649      	mov	r1, r9
 80093ac:	f7f7 fbc0 	bl	8000b30 <__aeabi_d2f>
 80093b0:	6028      	str	r0, [r5, #0]
 80093b2:	ed96 0a01 	vldr	s0, [r6, #4]
 80093b6:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8009454 <quatErr2EulerErr+0x1c8>
 80093ba:	ed94 7a02 	vldr	s14, [r4, #8]
 80093be:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800946c <quatErr2EulerErr+0x1e0>
 80093c2:	edd4 6a01 	vldr	s13, [r4, #4]
 80093c6:	ee20 0a06 	vmul.f32	s0, s0, s12
 80093ca:	ee28 8a07 	vmul.f32	s16, s16, s14
 80093ce:	eeb0 7ac0 	vabs.f32	s14, s0
 80093d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80093d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093da:	eea9 8a26 	vfma.f32	s16, s18, s13
 80093de:	d532      	bpl.n	8009446 <quatErr2EulerErr+0x1ba>
 80093e0:	f009 fd68 	bl	8012eb4 <tanf>
 80093e4:	edd4 7a00 	vldr	s15, [r4]
 80093e8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80093ec:	eee0 7a08 	vfma.f32	s15, s0, s16
 80093f0:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80093f4:	eddf 7a18 	vldr	s15, [pc, #96]	; 8009458 <quatErr2EulerErr+0x1cc>
 80093f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093fc:	ee17 0a90 	vmov	r0, s15
 8009400:	f7f7 f846 	bl	8000490 <__aeabi_f2d>
 8009404:	4b18      	ldr	r3, [pc, #96]	; (8009468 <quatErr2EulerErr+0x1dc>)
 8009406:	2200      	movs	r2, #0
 8009408:	4606      	mov	r6, r0
 800940a:	460f      	mov	r7, r1
 800940c:	f7f7 fb14 	bl	8000a38 <__aeabi_dcmple>
 8009410:	b908      	cbnz	r0, 8009416 <quatErr2EulerErr+0x18a>
 8009412:	4f15      	ldr	r7, [pc, #84]	; (8009468 <quatErr2EulerErr+0x1dc>)
 8009414:	2600      	movs	r6, #0
 8009416:	4639      	mov	r1, r7
 8009418:	4630      	mov	r0, r6
 800941a:	f7f7 fb89 	bl	8000b30 <__aeabi_d2f>
 800941e:	f7f7 f837 	bl	8000490 <__aeabi_f2d>
 8009422:	4b0f      	ldr	r3, [pc, #60]	; (8009460 <quatErr2EulerErr+0x1d4>)
 8009424:	2200      	movs	r2, #0
 8009426:	4606      	mov	r6, r0
 8009428:	460f      	mov	r7, r1
 800942a:	f7f7 fb0f 	bl	8000a4c <__aeabi_dcmpge>
 800942e:	b908      	cbnz	r0, 8009434 <quatErr2EulerErr+0x1a8>
 8009430:	4f0b      	ldr	r7, [pc, #44]	; (8009460 <quatErr2EulerErr+0x1d4>)
 8009432:	2600      	movs	r6, #0
 8009434:	4630      	mov	r0, r6
 8009436:	4639      	mov	r1, r7
 8009438:	f7f7 fb7a 	bl	8000b30 <__aeabi_d2f>
 800943c:	ecbd 8b04 	vpop	{d8-d9}
 8009440:	60a8      	str	r0, [r5, #8]
 8009442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009446:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8009470 <quatErr2EulerErr+0x1e4>
 800944a:	edd4 7a00 	vldr	s15, [r4]
 800944e:	eee8 7a07 	vfma.f32	s15, s16, s14
 8009452:	e7cd      	b.n	80093f0 <quatErr2EulerErr+0x164>
 8009454:	3c8efa35 	.word	0x3c8efa35
 8009458:	42e52ee1 	.word	0x42e52ee1
 800945c:	40568000 	.word	0x40568000
 8009460:	3ff00000 	.word	0x3ff00000
 8009464:	3a83126f 	.word	0x3a83126f
 8009468:	40668000 	.word	0x40668000
 800946c:	3fbc430e 	.word	0x3fbc430e
 8009470:	42c6ab07 	.word	0x42c6ab07

08009474 <m_b_interp1q_constrain>:
 8009474:	ed90 7a00 	vldr	s14, [r0]
 8009478:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800947c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009480:	d53d      	bpl.n	80094fe <m_b_interp1q_constrain+0x8a>
 8009482:	edd0 7a09 	vldr	s15, [r0, #36]	; 0x24
 8009486:	eef4 7ac0 	vcmpe.f32	s15, s0
 800948a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800948e:	dd33      	ble.n	80094f8 <m_b_interp1q_constrain+0x84>
 8009490:	b4f0      	push	{r4, r5, r6, r7}
 8009492:	240a      	movs	r4, #10
 8009494:	2602      	movs	r6, #2
 8009496:	2501      	movs	r5, #1
 8009498:	f06f 4740 	mvn.w	r7, #3221225472	; 0xc0000000
 800949c:	e008      	b.n	80094b0 <m_b_interp1q_constrain+0x3c>
 800949e:	edd2 7a00 	vldr	s15, [r2]
 80094a2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80094a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094aa:	bfb8      	it	lt
 80094ac:	461c      	movlt	r4, r3
 80094ae:	da29      	bge.n	8009504 <m_b_interp1q_constrain+0x90>
 80094b0:	1963      	adds	r3, r4, r5
 80094b2:	eb07 0253 	add.w	r2, r7, r3, lsr #1
 80094b6:	42b4      	cmp	r4, r6
 80094b8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80094bc:	ea4f 0353 	mov.w	r3, r3, lsr #1
 80094c0:	d8ed      	bhi.n	800949e <m_b_interp1q_constrain+0x2a>
 80094c2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80094c6:	3d01      	subs	r5, #1
 80094c8:	00ab      	lsls	r3, r5, #2
 80094ca:	3304      	adds	r3, #4
 80094cc:	4418      	add	r0, r3
 80094ce:	edd0 7a00 	vldr	s15, [r0]
 80094d2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80094d6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80094da:	440b      	add	r3, r1
 80094dc:	eec0 6a07 	vdiv.f32	s13, s0, s14
 80094e0:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80094e4:	bcf0      	pop	{r4, r5, r6, r7}
 80094e6:	ed91 0a00 	vldr	s0, [r1]
 80094ea:	edd3 7a00 	vldr	s15, [r3]
 80094ee:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80094f2:	eea6 0aa7 	vfma.f32	s0, s13, s15
 80094f6:	4770      	bx	lr
 80094f8:	ed91 0a09 	vldr	s0, [r1, #36]	; 0x24
 80094fc:	4770      	bx	lr
 80094fe:	ed91 0a00 	vldr	s0, [r1]
 8009502:	4770      	bx	lr
 8009504:	eeb0 7a67 	vmov.f32	s14, s15
 8009508:	1c5e      	adds	r6, r3, #1
 800950a:	461d      	mov	r5, r3
 800950c:	e7d0      	b.n	80094b0 <m_b_interp1q_constrain+0x3c>
 800950e:	bf00      	nop

08009510 <m_interp1q_constrain>:
 8009510:	ed90 7a00 	vldr	s14, [r0]
 8009514:	eeb4 7ac0 	vcmpe.f32	s14, s0
 8009518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800951c:	d53d      	bpl.n	800959a <m_interp1q_constrain+0x8a>
 800951e:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8009522:	eef4 7ac0 	vcmpe.f32	s15, s0
 8009526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800952a:	dd33      	ble.n	8009594 <m_interp1q_constrain+0x84>
 800952c:	b4f0      	push	{r4, r5, r6, r7}
 800952e:	240d      	movs	r4, #13
 8009530:	2602      	movs	r6, #2
 8009532:	2501      	movs	r5, #1
 8009534:	f06f 4740 	mvn.w	r7, #3221225472	; 0xc0000000
 8009538:	e008      	b.n	800954c <m_interp1q_constrain+0x3c>
 800953a:	edd2 7a00 	vldr	s15, [r2]
 800953e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8009542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009546:	bfb8      	it	lt
 8009548:	461c      	movlt	r4, r3
 800954a:	da29      	bge.n	80095a0 <m_interp1q_constrain+0x90>
 800954c:	1963      	adds	r3, r4, r5
 800954e:	eb07 0253 	add.w	r2, r7, r3, lsr #1
 8009552:	42b4      	cmp	r4, r6
 8009554:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009558:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800955c:	d8ed      	bhi.n	800953a <m_interp1q_constrain+0x2a>
 800955e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8009562:	3d01      	subs	r5, #1
 8009564:	00ab      	lsls	r3, r5, #2
 8009566:	3304      	adds	r3, #4
 8009568:	4418      	add	r0, r3
 800956a:	edd0 7a00 	vldr	s15, [r0]
 800956e:	ee30 0a47 	vsub.f32	s0, s0, s14
 8009572:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8009576:	440b      	add	r3, r1
 8009578:	eec0 6a07 	vdiv.f32	s13, s0, s14
 800957c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8009580:	bcf0      	pop	{r4, r5, r6, r7}
 8009582:	ed91 0a00 	vldr	s0, [r1]
 8009586:	edd3 7a00 	vldr	s15, [r3]
 800958a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800958e:	eea6 0aa7 	vfma.f32	s0, s13, s15
 8009592:	4770      	bx	lr
 8009594:	ed91 0a0c 	vldr	s0, [r1, #48]	; 0x30
 8009598:	4770      	bx	lr
 800959a:	ed91 0a00 	vldr	s0, [r1]
 800959e:	4770      	bx	lr
 80095a0:	eeb0 7a67 	vmov.f32	s14, s15
 80095a4:	1c5e      	adds	r6, r3, #1
 80095a6:	461d      	mov	r5, r3
 80095a8:	e7d0      	b.n	800954c <m_interp1q_constrain+0x3c>
 80095aa:	bf00      	nop

080095ac <m_rt_atan2f_snf>:
 80095ac:	b508      	push	{r3, lr}
 80095ae:	4b39      	ldr	r3, [pc, #228]	; (8009694 <m_rt_atan2f_snf+0xe8>)
 80095b0:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80095b4:	eeb4 0a67 	vcmp.f32	s0, s15
 80095b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095bc:	ed2d 8b02 	vpush	{d8}
 80095c0:	eeb0 8a40 	vmov.f32	s16, s0
 80095c4:	d014      	beq.n	80095f0 <m_rt_atan2f_snf+0x44>
 80095c6:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 80095ca:	eeb4 0a47 	vcmp.f32	s0, s14
 80095ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d2:	d00d      	beq.n	80095f0 <m_rt_atan2f_snf+0x44>
 80095d4:	eef5 0a40 	vcmp.f32	s1, #0.0
 80095d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095dc:	d135      	bne.n	800964a <m_rt_atan2f_snf+0x9e>
 80095de:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80095e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095e6:	dc4d      	bgt.n	8009684 <m_rt_atan2f_snf+0xd8>
 80095e8:	d451      	bmi.n	800968e <m_rt_atan2f_snf+0xe2>
 80095ea:	eeb0 0a60 	vmov.f32	s0, s1
 80095ee:	e01d      	b.n	800962c <m_rt_atan2f_snf+0x80>
 80095f0:	eef4 0a67 	vcmp.f32	s1, s15
 80095f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f8:	d11b      	bne.n	8009632 <m_rt_atan2f_snf+0x86>
 80095fa:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80095fe:	eddf 7a26 	vldr	s15, [pc, #152]	; 8009698 <m_rt_atan2f_snf+0xec>
 8009602:	eddf 6a26 	vldr	s13, [pc, #152]	; 800969c <m_rt_atan2f_snf+0xf0>
 8009606:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80096a0 <m_rt_atan2f_snf+0xf4>
 800960a:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80096a4 <m_rt_atan2f_snf+0xf8>
 800960e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009612:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 8009616:	bfd8      	it	le
 8009618:	eef0 7a66 	vmovle.f32	s15, s13
 800961c:	bfc8      	it	gt
 800961e:	eeb0 0a47 	vmovgt.f32	s0, s14
 8009622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009626:	bfd8      	it	le
 8009628:	eeb0 0a67 	vmovle.f32	s0, s15
 800962c:	ecbd 8b02 	vpop	{d8}
 8009630:	bd08      	pop	{r3, pc}
 8009632:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8009636:	eef4 0a67 	vcmp.f32	s1, s15
 800963a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800963e:	d0dc      	beq.n	80095fa <m_rt_atan2f_snf+0x4e>
 8009640:	eef5 0a40 	vcmp.f32	s1, #0.0
 8009644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009648:	d0c9      	beq.n	80095de <m_rt_atan2f_snf+0x32>
 800964a:	ee10 0a90 	vmov	r0, s1
 800964e:	f7f6 ff1f 	bl	8000490 <__aeabi_f2d>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	ee18 0a10 	vmov	r0, s16
 800965a:	ec43 2b18 	vmov	d8, r2, r3
 800965e:	f7f6 ff17 	bl	8000490 <__aeabi_f2d>
 8009662:	eeb0 1a48 	vmov.f32	s2, s16
 8009666:	eef0 1a68 	vmov.f32	s3, s17
 800966a:	ec41 0b10 	vmov	d0, r0, r1
 800966e:	f009 fc81 	bl	8012f74 <atan2>
 8009672:	ec51 0b10 	vmov	r0, r1, d0
 8009676:	f7f7 fa5b 	bl	8000b30 <__aeabi_d2f>
 800967a:	ecbd 8b02 	vpop	{d8}
 800967e:	ee00 0a10 	vmov	s0, r0
 8009682:	bd08      	pop	{r3, pc}
 8009684:	ecbd 8b02 	vpop	{d8}
 8009688:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80096a8 <m_rt_atan2f_snf+0xfc>
 800968c:	bd08      	pop	{r3, pc}
 800968e:	ed9f 0a07 	vldr	s0, [pc, #28]	; 80096ac <m_rt_atan2f_snf+0x100>
 8009692:	e7cb      	b.n	800962c <m_rt_atan2f_snf+0x80>
 8009694:	20001690 	.word	0x20001690
 8009698:	4016cbe4 	.word	0x4016cbe4
 800969c:	c016cbe4 	.word	0xc016cbe4
 80096a0:	3f490fdb 	.word	0x3f490fdb
 80096a4:	bf490fdb 	.word	0xbf490fdb
 80096a8:	3fc90fdb 	.word	0x3fc90fdb
 80096ac:	bfc90fdb 	.word	0xbfc90fdb

080096b0 <output_update>:
 80096b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096b4:	ed2d 8b0a 	vpush	{d8-d12}
 80096b8:	edd0 6a00 	vldr	s13, [r0]
 80096bc:	ed90 7a01 	vldr	s14, [r0, #4]
 80096c0:	edd0 7a02 	vldr	s15, [r0, #8]
 80096c4:	b08b      	sub	sp, #44	; 0x2c
 80096c6:	eef1 6a66 	vneg.f32	s13, s13
 80096ca:	f89d 9074 	ldrb.w	r9, [sp, #116]	; 0x74
 80096ce:	edc0 6a00 	vstr	s13, [r0]
 80096d2:	eeb1 7a47 	vneg.f32	s14, s14
 80096d6:	eef1 7a67 	vneg.f32	s15, s15
 80096da:	460f      	mov	r7, r1
 80096dc:	ed80 7a01 	vstr	s14, [r0, #4]
 80096e0:	edc0 7a02 	vstr	s15, [r0, #8]
 80096e4:	a901      	add	r1, sp, #4
 80096e6:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80096ea:	4604      	mov	r4, r0
 80096ec:	4615      	mov	r5, r2
 80096ee:	461e      	mov	r6, r3
 80096f0:	f7fe ffd0 	bl	8008694 <m_q2dcm_eml>
 80096f4:	f1b9 0f00 	cmp.w	r9, #0
 80096f8:	f040 8088 	bne.w	800980c <output_update+0x15c>
 80096fc:	9a08      	ldr	r2, [sp, #32]
 80096fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009700:	9907      	ldr	r1, [sp, #28]
 8009702:	6072      	str	r2, [r6, #4]
 8009704:	60b3      	str	r3, [r6, #8]
 8009706:	6031      	str	r1, [r6, #0]
 8009708:	ed94 0a03 	vldr	s0, [r4, #12]
 800970c:	ed94 aa00 	vldr	s20, [r4]
 8009710:	edd4 aa02 	vldr	s21, [r4, #8]
 8009714:	edd4 9a01 	vldr	s19, [r4, #4]
 8009718:	ee20 9a00 	vmul.f32	s18, s0, s0
 800971c:	ee2a 0a80 	vmul.f32	s0, s21, s0
 8009720:	eef0 0a49 	vmov.f32	s1, s18
 8009724:	eeea 0a0a 	vfma.f32	s1, s20, s20
 8009728:	eeaa 0a29 	vfma.f32	s0, s20, s19
 800972c:	eee9 0ae9 	vfms.f32	s1, s19, s19
 8009730:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009734:	eeea 0aea 	vfms.f32	s1, s21, s21
 8009738:	f7ff ff38 	bl	80095ac <m_rt_atan2f_snf>
 800973c:	ed85 0a00 	vstr	s0, [r5]
 8009740:	ed94 7a01 	vldr	s14, [r4, #4]
 8009744:	edd4 7a03 	vldr	s15, [r4, #12]
 8009748:	ed94 6a00 	vldr	s12, [r4]
 800974c:	edd4 6a02 	vldr	s13, [r4, #8]
 8009750:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8009754:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8009758:	eee6 7a26 	vfma.f32	s15, s12, s13
 800975c:	eef0 8a40 	vmov.f32	s17, s0
 8009760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009764:	eeb1 ba69 	vneg.f32	s22, s19
 8009768:	ee17 0a90 	vmov	r0, s15
 800976c:	f7f6 fe90 	bl	8000490 <__aeabi_f2d>
 8009770:	ec41 0b10 	vmov	d0, r0, r1
 8009774:	f009 fbca 	bl	8012f0c <asin>
 8009778:	ec51 0b10 	vmov	r0, r1, d0
 800977c:	f7f7 f9d8 	bl	8000b30 <__aeabi_d2f>
 8009780:	eef0 0a49 	vmov.f32	s1, s18
 8009784:	6068      	str	r0, [r5, #4]
 8009786:	edd4 6a03 	vldr	s13, [r4, #12]
 800978a:	ed94 0a00 	vldr	s0, [r4]
 800978e:	ed94 7a01 	vldr	s14, [r4, #4]
 8009792:	edd4 7a02 	vldr	s15, [r4, #8]
 8009796:	eeea 0aaa 	vfma.f32	s1, s21, s21
 800979a:	ee20 0a26 	vmul.f32	s0, s0, s13
 800979e:	eeea 0a4a 	vfms.f32	s1, s20, s20
 80097a2:	eea7 0a27 	vfma.f32	s0, s14, s15
 80097a6:	eeeb 0a29 	vfma.f32	s1, s22, s19
 80097aa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80097ae:	ee08 0a10 	vmov	s16, r0
 80097b2:	f7ff fefb 	bl	80095ac <m_rt_atan2f_snf>
 80097b6:	eddf 7a7d 	vldr	s15, [pc, #500]	; 80099ac <output_update+0x2fc>
 80097ba:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80097be:	ee28 8a27 	vmul.f32	s16, s16, s15
 80097c2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80097c6:	edc5 8a00 	vstr	s17, [r5]
 80097ca:	ed85 8a01 	vstr	s16, [r5, #4]
 80097ce:	ed85 0a02 	vstr	s0, [r5, #8]
 80097d2:	ed97 7a00 	vldr	s14, [r7]
 80097d6:	edd6 7a00 	vldr	s15, [r6]
 80097da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80097de:	edc8 7a00 	vstr	s15, [r8]
 80097e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80097e6:	edd6 7a01 	vldr	s15, [r6, #4]
 80097ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80097ee:	edc8 7a01 	vstr	s15, [r8, #4]
 80097f2:	edd6 7a02 	vldr	s15, [r6, #8]
 80097f6:	ed97 7a02 	vldr	s14, [r7, #8]
 80097fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80097fe:	edc8 7a02 	vstr	s15, [r8, #8]
 8009802:	b00b      	add	sp, #44	; 0x2c
 8009804:	ecbd 8b0a 	vpop	{d8-d12}
 8009808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800980c:	f1b9 0f01 	cmp.w	r9, #1
 8009810:	d018      	beq.n	8009844 <output_update+0x194>
 8009812:	ed9f 6a66 	vldr	s12, [pc, #408]	; 80099ac <output_update+0x2fc>
 8009816:	edd5 6a00 	vldr	s13, [r5]
 800981a:	ed95 7a01 	vldr	s14, [r5, #4]
 800981e:	edd5 7a02 	vldr	s15, [r5, #8]
 8009822:	ee66 6a86 	vmul.f32	s13, s13, s12
 8009826:	ee27 7a06 	vmul.f32	s14, s14, s12
 800982a:	ee67 7a86 	vmul.f32	s15, s15, s12
 800982e:	edc5 6a00 	vstr	s13, [r5]
 8009832:	ed85 7a01 	vstr	s14, [r5, #4]
 8009836:	edc5 7a02 	vstr	s15, [r5, #8]
 800983a:	b00b      	add	sp, #44	; 0x2c
 800983c:	ecbd 8b0a 	vpop	{d8-d12}
 8009840:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009844:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8009848:	9a08      	ldr	r2, [sp, #32]
 800984a:	9b07      	ldr	r3, [sp, #28]
 800984c:	6032      	str	r2, [r6, #0]
 800984e:	eef1 7a67 	vneg.f32	s15, s15
 8009852:	6073      	str	r3, [r6, #4]
 8009854:	edc6 7a02 	vstr	s15, [r6, #8]
 8009858:	edd4 7a02 	vldr	s15, [r4, #8]
 800985c:	edd4 8a00 	vldr	s17, [r4]
 8009860:	ed94 9a01 	vldr	s18, [r4, #4]
 8009864:	ed94 8a03 	vldr	s16, [r4, #12]
 8009868:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800986c:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8009870:	eea8 7aa8 	vfma.f32	s14, s17, s17
 8009874:	eef0 ca00 	vmov.f32	s25, #0	; 0x40000000  2.0
 8009878:	eef0 6a4c 	vmov.f32	s13, s24
 800987c:	eee7 6a6c 	vfms.f32	s13, s14, s25
 8009880:	ee68 9a89 	vmul.f32	s19, s17, s18
 8009884:	ee16 0a90 	vmov	r0, s13
 8009888:	eee7 9ac8 	vfms.f32	s19, s15, s16
 800988c:	eef1 aa67 	vneg.f32	s21, s15
 8009890:	f7f6 fdfe 	bl	8000490 <__aeabi_f2d>
 8009894:	ee79 7aa9 	vadd.f32	s15, s19, s19
 8009898:	4602      	mov	r2, r0
 800989a:	460b      	mov	r3, r1
 800989c:	ee17 0a90 	vmov	r0, s15
 80098a0:	ec43 2b1b 	vmov	d11, r2, r3
 80098a4:	f7f6 fdf4 	bl	8000490 <__aeabi_f2d>
 80098a8:	eeb0 1a4b 	vmov.f32	s2, s22
 80098ac:	eef0 1a6b 	vmov.f32	s3, s23
 80098b0:	ee69 9a09 	vmul.f32	s19, s18, s18
 80098b4:	ec41 0b10 	vmov	d0, r0, r1
 80098b8:	eee8 9aa8 	vfma.f32	s19, s17, s17
 80098bc:	f009 fb5a 	bl	8012f74 <atan2>
 80098c0:	eea9 caec 	vfms.f32	s24, s19, s25
 80098c4:	ec51 0b10 	vmov	r0, r1, d0
 80098c8:	ee29 aa08 	vmul.f32	s20, s18, s16
 80098cc:	f7f7 f930 	bl	8000b30 <__aeabi_d2f>
 80098d0:	eea8 aaaa 	vfma.f32	s20, s17, s21
 80098d4:	4603      	mov	r3, r0
 80098d6:	ee1c 0a10 	vmov	r0, s24
 80098da:	ee09 3a90 	vmov	s19, r3
 80098de:	f7f6 fdd7 	bl	8000490 <__aeabi_f2d>
 80098e2:	ee7a 7a0a 	vadd.f32	s15, s20, s20
 80098e6:	4602      	mov	r2, r0
 80098e8:	460b      	mov	r3, r1
 80098ea:	ee17 0a90 	vmov	r0, s15
 80098ee:	ec43 2b1b 	vmov	d11, r2, r3
 80098f2:	f7f6 fdcd 	bl	8000490 <__aeabi_f2d>
 80098f6:	eeb0 1a4b 	vmov.f32	s2, s22
 80098fa:	eef0 1a6b 	vmov.f32	s3, s23
 80098fe:	ec41 0b10 	vmov	d0, r0, r1
 8009902:	f009 fb37 	bl	8012f74 <atan2>
 8009906:	ee28 8a68 	vnmul.f32	s16, s16, s17
 800990a:	ec51 0b10 	vmov	r0, r1, d0
 800990e:	f7f7 f90f 	bl	8000b30 <__aeabi_d2f>
 8009912:	eeaa 8a89 	vfma.f32	s16, s21, s18
 8009916:	ee07 0a90 	vmov	s15, r0
 800991a:	eef1 8a67 	vneg.f32	s17, s15
 800991e:	ee78 7a08 	vadd.f32	s15, s16, s16
 8009922:	eeb1 9a69 	vneg.f32	s18, s19
 8009926:	ee17 0a90 	vmov	r0, s15
 800992a:	f7f6 fdb1 	bl	8000490 <__aeabi_f2d>
 800992e:	ec41 0b10 	vmov	d0, r0, r1
 8009932:	f009 faeb 	bl	8012f0c <asin>
 8009936:	ec51 0b10 	vmov	r0, r1, d0
 800993a:	f7f7 f8f9 	bl	8000b30 <__aeabi_d2f>
 800993e:	eef5 9ac0 	vcmpe.f32	s19, #0.0
 8009942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009946:	bfc8      	it	gt
 8009948:	ed9f 9a19 	vldrgt	s18, [pc, #100]	; 80099b0 <output_update+0x300>
 800994c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80099ac <output_update+0x2fc>
 8009950:	ee07 0a90 	vmov	s15, r0
 8009954:	bfc8      	it	gt
 8009956:	ee39 9a69 	vsubgt.f32	s18, s18, s19
 800995a:	ee68 8a87 	vmul.f32	s17, s17, s14
 800995e:	ee29 9a07 	vmul.f32	s18, s18, s14
 8009962:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009966:	ed85 9a00 	vstr	s18, [r5]
 800996a:	edc5 8a01 	vstr	s17, [r5, #4]
 800996e:	edc5 7a02 	vstr	s15, [r5, #8]
 8009972:	ed97 7a01 	vldr	s14, [r7, #4]
 8009976:	edd6 7a00 	vldr	s15, [r6]
 800997a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800997e:	edc8 7a00 	vstr	s15, [r8]
 8009982:	ed97 7a00 	vldr	s14, [r7]
 8009986:	edd6 7a01 	vldr	s15, [r6, #4]
 800998a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800998e:	edc8 7a01 	vstr	s15, [r8, #4]
 8009992:	edd6 7a02 	vldr	s15, [r6, #8]
 8009996:	ed97 7a02 	vldr	s14, [r7, #8]
 800999a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800999e:	edc8 7a02 	vstr	s15, [r8, #8]
 80099a2:	b00b      	add	sp, #44	; 0x2c
 80099a4:	ecbd 8b0a 	vpop	{d8-d12}
 80099a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099ac:	42652ee1 	.word	0x42652ee1
 80099b0:	40c90e56 	.word	0x40c90e56

080099b4 <iNemo_setOrientation.constprop.0>:
 80099b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099b8:	4a70      	ldr	r2, [pc, #448]	; (8009b7c <iNemo_setOrientation.constprop.0+0x1c8>)
 80099ba:	4b71      	ldr	r3, [pc, #452]	; (8009b80 <iNemo_setOrientation.constprop.0+0x1cc>)
 80099bc:	f892 e000 	ldrb.w	lr, [r2]
 80099c0:	7915      	ldrb	r5, [r2, #4]
 80099c2:	7857      	ldrb	r7, [r2, #1]
 80099c4:	7954      	ldrb	r4, [r2, #5]
 80099c6:	f892 c009 	ldrb.w	ip, [r2, #9]
 80099ca:	f1ae 0642 	sub.w	r6, lr, #66	; 0x42
 80099ce:	2100      	movs	r1, #0
 80099d0:	2e17      	cmp	r6, #23
 80099d2:	bf98      	it	ls
 80099d4:	f10e 0e20 	addls.w	lr, lr, #32
 80099d8:	f8c3 10a8 	str.w	r1, [r3, #168]	; 0xa8
 80099dc:	f883 10ac 	strb.w	r1, [r3, #172]	; 0xac
 80099e0:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
 80099e4:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
 80099e8:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
 80099ec:	f8c3 10b4 	str.w	r1, [r3, #180]	; 0xb4
 80099f0:	f883 10b8 	strb.w	r1, [r3, #184]	; 0xb8
 80099f4:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
 80099f8:	f883 10c4 	strb.w	r1, [r3, #196]	; 0xc4
 80099fc:	f1a5 0142 	sub.w	r1, r5, #66	; 0x42
 8009a00:	bf98      	it	ls
 8009a02:	fa5f fe8e 	uxtbls.w	lr, lr
 8009a06:	2917      	cmp	r1, #23
 8009a08:	7a11      	ldrb	r1, [r2, #8]
 8009a0a:	7896      	ldrb	r6, [r2, #2]
 8009a0c:	f1a1 0042 	sub.w	r0, r1, #66	; 0x42
 8009a10:	bf9c      	itt	ls
 8009a12:	3520      	addls	r5, #32
 8009a14:	b2ed      	uxtbls	r5, r5
 8009a16:	2817      	cmp	r0, #23
 8009a18:	bf98      	it	ls
 8009a1a:	3120      	addls	r1, #32
 8009a1c:	f1a7 0042 	sub.w	r0, r7, #66	; 0x42
 8009a20:	bf98      	it	ls
 8009a22:	b2c9      	uxtbls	r1, r1
 8009a24:	2817      	cmp	r0, #23
 8009a26:	bf98      	it	ls
 8009a28:	3720      	addls	r7, #32
 8009a2a:	f1a4 0042 	sub.w	r0, r4, #66	; 0x42
 8009a2e:	bf98      	it	ls
 8009a30:	b2ff      	uxtbls	r7, r7
 8009a32:	2817      	cmp	r0, #23
 8009a34:	bf98      	it	ls
 8009a36:	3420      	addls	r4, #32
 8009a38:	f1ac 0042 	sub.w	r0, ip, #66	; 0x42
 8009a3c:	bf98      	it	ls
 8009a3e:	b2e4      	uxtbls	r4, r4
 8009a40:	2817      	cmp	r0, #23
 8009a42:	bf98      	it	ls
 8009a44:	f10c 0c20 	addls.w	ip, ip, #32
 8009a48:	f1a6 0042 	sub.w	r0, r6, #66	; 0x42
 8009a4c:	bf98      	it	ls
 8009a4e:	fa5f fc8c 	uxtbls.w	ip, ip
 8009a52:	2817      	cmp	r0, #23
 8009a54:	7990      	ldrb	r0, [r2, #6]
 8009a56:	7a92      	ldrb	r2, [r2, #10]
 8009a58:	f1a0 0842 	sub.w	r8, r0, #66	; 0x42
 8009a5c:	bf9c      	itt	ls
 8009a5e:	3620      	addls	r6, #32
 8009a60:	b2f6      	uxtbls	r6, r6
 8009a62:	f1b8 0f17 	cmp.w	r8, #23
 8009a66:	bf98      	it	ls
 8009a68:	3020      	addls	r0, #32
 8009a6a:	f1a2 0842 	sub.w	r8, r2, #66	; 0x42
 8009a6e:	bf98      	it	ls
 8009a70:	b2c0      	uxtbls	r0, r0
 8009a72:	f1b8 0f17 	cmp.w	r8, #23
 8009a76:	bf98      	it	ls
 8009a78:	3220      	addls	r2, #32
 8009a7a:	f1ae 0e64 	sub.w	lr, lr, #100	; 0x64
 8009a7e:	bf98      	it	ls
 8009a80:	b2d2      	uxtbls	r2, r2
 8009a82:	f1be 0f13 	cmp.w	lr, #19
 8009a86:	d80f      	bhi.n	8009aa8 <iNemo_setOrientation.constprop.0+0xf4>
 8009a88:	e8df f00e 	tbb	[pc, lr]
 8009a8c:	0e0eac0a 	.word	0x0e0eac0a
 8009a90:	0e0e0e0e 	.word	0x0e0e0e0e
 8009a94:	0eb10e0e 	.word	0x0eb10e0e
 8009a98:	b60e0e0e 	.word	0xb60e0e0e
 8009a9c:	c00ebb0e 	.word	0xc00ebb0e
 8009aa0:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8009aa4:	f883 e0aa 	strb.w	lr, [r3, #170]	; 0xaa
 8009aa8:	3f64      	subs	r7, #100	; 0x64
 8009aaa:	2f13      	cmp	r7, #19
 8009aac:	d80e      	bhi.n	8009acc <iNemo_setOrientation.constprop.0+0x118>
 8009aae:	e8df f007 	tbb	[pc, r7]
 8009ab2:	b20a      	.short	0xb20a
 8009ab4:	0d0d0d0d 	.word	0x0d0d0d0d
 8009ab8:	0d0d0d0d 	.word	0x0d0d0d0d
 8009abc:	0d0d0db6 	.word	0x0d0d0db6
 8009ac0:	be0dba0d 	.word	0xbe0dba0d
 8009ac4:	c20d      	.short	0xc20d
 8009ac6:	27ff      	movs	r7, #255	; 0xff
 8009ac8:	f883 70ab 	strb.w	r7, [r3, #171]	; 0xab
 8009acc:	3e64      	subs	r6, #100	; 0x64
 8009ace:	2e13      	cmp	r6, #19
 8009ad0:	d80e      	bhi.n	8009af0 <iNemo_setOrientation.constprop.0+0x13c>
 8009ad2:	e8df f006 	tbb	[pc, r6]
 8009ad6:	b40a      	.short	0xb40a
 8009ad8:	0d0d0d0d 	.word	0x0d0d0d0d
 8009adc:	0d0d0d0d 	.word	0x0d0d0d0d
 8009ae0:	0d0d0db8 	.word	0x0d0d0db8
 8009ae4:	c00dbc0d 	.word	0xc00dbc0d
 8009ae8:	c40d      	.short	0xc40d
 8009aea:	26ff      	movs	r6, #255	; 0xff
 8009aec:	f883 60ac 	strb.w	r6, [r3, #172]	; 0xac
 8009af0:	3d64      	subs	r5, #100	; 0x64
 8009af2:	2d13      	cmp	r5, #19
 8009af4:	d80e      	bhi.n	8009b14 <iNemo_setOrientation.constprop.0+0x160>
 8009af6:	e8df f005 	tbb	[pc, r5]
 8009afa:	b60a      	.short	0xb60a
 8009afc:	0d0d0d0d 	.word	0x0d0d0d0d
 8009b00:	0d0d0d0d 	.word	0x0d0d0d0d
 8009b04:	0d0d0dba 	.word	0x0d0d0dba
 8009b08:	c20dbe0d 	.word	0xc20dbe0d
 8009b0c:	c60d      	.short	0xc60d
 8009b0e:	25ff      	movs	r5, #255	; 0xff
 8009b10:	f883 50c2 	strb.w	r5, [r3, #194]	; 0xc2
 8009b14:	3c64      	subs	r4, #100	; 0x64
 8009b16:	2c13      	cmp	r4, #19
 8009b18:	d80e      	bhi.n	8009b38 <iNemo_setOrientation.constprop.0+0x184>
 8009b1a:	e8df f004 	tbb	[pc, r4]
 8009b1e:	b80a      	.short	0xb80a
 8009b20:	0d0d0d0d 	.word	0x0d0d0d0d
 8009b24:	0d0d0d0d 	.word	0x0d0d0d0d
 8009b28:	0d0d0dbc 	.word	0x0d0d0dbc
 8009b2c:	c40dc00d 	.word	0xc40dc00d
 8009b30:	c80d      	.short	0xc80d
 8009b32:	24ff      	movs	r4, #255	; 0xff
 8009b34:	f883 40c3 	strb.w	r4, [r3, #195]	; 0xc3
 8009b38:	3864      	subs	r0, #100	; 0x64
 8009b3a:	2813      	cmp	r0, #19
 8009b3c:	d80e      	bhi.n	8009b5c <iNemo_setOrientation.constprop.0+0x1a8>
 8009b3e:	e8df f000 	tbb	[pc, r0]
 8009b42:	ba0a      	.short	0xba0a
 8009b44:	0d0d0d0d 	.word	0x0d0d0d0d
 8009b48:	0d0d0d0d 	.word	0x0d0d0d0d
 8009b4c:	0d0d0dbe 	.word	0x0d0d0dbe
 8009b50:	c60dc20d 	.word	0xc60dc20d
 8009b54:	ca0d      	.short	0xca0d
 8009b56:	20ff      	movs	r0, #255	; 0xff
 8009b58:	f883 00c4 	strb.w	r0, [r3, #196]	; 0xc4
 8009b5c:	3964      	subs	r1, #100	; 0x64
 8009b5e:	2913      	cmp	r1, #19
 8009b60:	d813      	bhi.n	8009b8a <iNemo_setOrientation.constprop.0+0x1d6>
 8009b62:	e8df f001 	tbb	[pc, r1]
 8009b66:	bc0f      	.short	0xbc0f
 8009b68:	12121212 	.word	0x12121212
 8009b6c:	12121212 	.word	0x12121212
 8009b70:	121212c0 	.word	0x121212c0
 8009b74:	c812c412 	.word	0xc812c412
 8009b78:	cc12      	.short	0xcc12
 8009b7a:	bf00      	nop
 8009b7c:	20000000 	.word	0x20000000
 8009b80:	20001690 	.word	0x20001690
 8009b84:	21ff      	movs	r1, #255	; 0xff
 8009b86:	f883 10b6 	strb.w	r1, [r3, #182]	; 0xb6
 8009b8a:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 8009b8e:	f1bc 0f13 	cmp.w	ip, #19
 8009b92:	d80e      	bhi.n	8009bb2 <iNemo_setOrientation.constprop.0+0x1fe>
 8009b94:	e8df f00c 	tbb	[pc, ip]
 8009b98:	0d0db70a 	.word	0x0d0db70a
 8009b9c:	0d0d0d0d 	.word	0x0d0d0d0d
 8009ba0:	0dbb0d0d 	.word	0x0dbb0d0d
 8009ba4:	bf0d0d0d 	.word	0xbf0d0d0d
 8009ba8:	c70dc30d 	.word	0xc70dc30d
 8009bac:	21ff      	movs	r1, #255	; 0xff
 8009bae:	f883 10b7 	strb.w	r1, [r3, #183]	; 0xb7
 8009bb2:	3a64      	subs	r2, #100	; 0x64
 8009bb4:	2a13      	cmp	r2, #19
 8009bb6:	d80e      	bhi.n	8009bd6 <iNemo_setOrientation.constprop.0+0x222>
 8009bb8:	e8df f002 	tbb	[pc, r2]
 8009bbc:	0d0db90a 	.word	0x0d0db90a
 8009bc0:	0d0d0d0d 	.word	0x0d0d0d0d
 8009bc4:	0dbe0d0d 	.word	0x0dbe0d0d
 8009bc8:	c30d0d0d 	.word	0xc30d0d0d
 8009bcc:	0f0dc80d 	.word	0x0f0dc80d
 8009bd0:	22ff      	movs	r2, #255	; 0xff
 8009bd2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8009bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bda:	22ff      	movs	r2, #255	; 0xff
 8009bdc:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8009be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009be4:	f04f 0e01 	mov.w	lr, #1
 8009be8:	f883 e0a4 	strb.w	lr, [r3, #164]	; 0xa4
 8009bec:	e75c      	b.n	8009aa8 <iNemo_setOrientation.constprop.0+0xf4>
 8009bee:	f04f 0e01 	mov.w	lr, #1
 8009bf2:	f883 e0a7 	strb.w	lr, [r3, #167]	; 0xa7
 8009bf6:	e757      	b.n	8009aa8 <iNemo_setOrientation.constprop.0+0xf4>
 8009bf8:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8009bfc:	f883 e0a7 	strb.w	lr, [r3, #167]	; 0xa7
 8009c00:	e752      	b.n	8009aa8 <iNemo_setOrientation.constprop.0+0xf4>
 8009c02:	f04f 0e01 	mov.w	lr, #1
 8009c06:	f883 e0aa 	strb.w	lr, [r3, #170]	; 0xaa
 8009c0a:	e74d      	b.n	8009aa8 <iNemo_setOrientation.constprop.0+0xf4>
 8009c0c:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8009c10:	f883 e0a4 	strb.w	lr, [r3, #164]	; 0xa4
 8009c14:	e748      	b.n	8009aa8 <iNemo_setOrientation.constprop.0+0xf4>
 8009c16:	2701      	movs	r7, #1
 8009c18:	f883 70a5 	strb.w	r7, [r3, #165]	; 0xa5
 8009c1c:	e756      	b.n	8009acc <iNemo_setOrientation.constprop.0+0x118>
 8009c1e:	2701      	movs	r7, #1
 8009c20:	f883 70a8 	strb.w	r7, [r3, #168]	; 0xa8
 8009c24:	e752      	b.n	8009acc <iNemo_setOrientation.constprop.0+0x118>
 8009c26:	27ff      	movs	r7, #255	; 0xff
 8009c28:	f883 70a8 	strb.w	r7, [r3, #168]	; 0xa8
 8009c2c:	e74e      	b.n	8009acc <iNemo_setOrientation.constprop.0+0x118>
 8009c2e:	2701      	movs	r7, #1
 8009c30:	f883 70ab 	strb.w	r7, [r3, #171]	; 0xab
 8009c34:	e74a      	b.n	8009acc <iNemo_setOrientation.constprop.0+0x118>
 8009c36:	27ff      	movs	r7, #255	; 0xff
 8009c38:	f883 70a5 	strb.w	r7, [r3, #165]	; 0xa5
 8009c3c:	e746      	b.n	8009acc <iNemo_setOrientation.constprop.0+0x118>
 8009c3e:	2601      	movs	r6, #1
 8009c40:	f883 60a6 	strb.w	r6, [r3, #166]	; 0xa6
 8009c44:	e754      	b.n	8009af0 <iNemo_setOrientation.constprop.0+0x13c>
 8009c46:	2601      	movs	r6, #1
 8009c48:	f883 60a9 	strb.w	r6, [r3, #169]	; 0xa9
 8009c4c:	e750      	b.n	8009af0 <iNemo_setOrientation.constprop.0+0x13c>
 8009c4e:	26ff      	movs	r6, #255	; 0xff
 8009c50:	f883 60a9 	strb.w	r6, [r3, #169]	; 0xa9
 8009c54:	e74c      	b.n	8009af0 <iNemo_setOrientation.constprop.0+0x13c>
 8009c56:	2601      	movs	r6, #1
 8009c58:	f883 60ac 	strb.w	r6, [r3, #172]	; 0xac
 8009c5c:	e748      	b.n	8009af0 <iNemo_setOrientation.constprop.0+0x13c>
 8009c5e:	26ff      	movs	r6, #255	; 0xff
 8009c60:	f883 60a6 	strb.w	r6, [r3, #166]	; 0xa6
 8009c64:	e744      	b.n	8009af0 <iNemo_setOrientation.constprop.0+0x13c>
 8009c66:	2501      	movs	r5, #1
 8009c68:	f883 50bc 	strb.w	r5, [r3, #188]	; 0xbc
 8009c6c:	e752      	b.n	8009b14 <iNemo_setOrientation.constprop.0+0x160>
 8009c6e:	2501      	movs	r5, #1
 8009c70:	f883 50bf 	strb.w	r5, [r3, #191]	; 0xbf
 8009c74:	e74e      	b.n	8009b14 <iNemo_setOrientation.constprop.0+0x160>
 8009c76:	25ff      	movs	r5, #255	; 0xff
 8009c78:	f883 50bf 	strb.w	r5, [r3, #191]	; 0xbf
 8009c7c:	e74a      	b.n	8009b14 <iNemo_setOrientation.constprop.0+0x160>
 8009c7e:	2501      	movs	r5, #1
 8009c80:	f883 50c2 	strb.w	r5, [r3, #194]	; 0xc2
 8009c84:	e746      	b.n	8009b14 <iNemo_setOrientation.constprop.0+0x160>
 8009c86:	25ff      	movs	r5, #255	; 0xff
 8009c88:	f883 50bc 	strb.w	r5, [r3, #188]	; 0xbc
 8009c8c:	e742      	b.n	8009b14 <iNemo_setOrientation.constprop.0+0x160>
 8009c8e:	2401      	movs	r4, #1
 8009c90:	f883 40bd 	strb.w	r4, [r3, #189]	; 0xbd
 8009c94:	e750      	b.n	8009b38 <iNemo_setOrientation.constprop.0+0x184>
 8009c96:	2401      	movs	r4, #1
 8009c98:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
 8009c9c:	e74c      	b.n	8009b38 <iNemo_setOrientation.constprop.0+0x184>
 8009c9e:	24ff      	movs	r4, #255	; 0xff
 8009ca0:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
 8009ca4:	e748      	b.n	8009b38 <iNemo_setOrientation.constprop.0+0x184>
 8009ca6:	2401      	movs	r4, #1
 8009ca8:	f883 40c3 	strb.w	r4, [r3, #195]	; 0xc3
 8009cac:	e744      	b.n	8009b38 <iNemo_setOrientation.constprop.0+0x184>
 8009cae:	24ff      	movs	r4, #255	; 0xff
 8009cb0:	f883 40bd 	strb.w	r4, [r3, #189]	; 0xbd
 8009cb4:	e740      	b.n	8009b38 <iNemo_setOrientation.constprop.0+0x184>
 8009cb6:	2001      	movs	r0, #1
 8009cb8:	f883 00be 	strb.w	r0, [r3, #190]	; 0xbe
 8009cbc:	e74e      	b.n	8009b5c <iNemo_setOrientation.constprop.0+0x1a8>
 8009cbe:	2001      	movs	r0, #1
 8009cc0:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
 8009cc4:	e74a      	b.n	8009b5c <iNemo_setOrientation.constprop.0+0x1a8>
 8009cc6:	20ff      	movs	r0, #255	; 0xff
 8009cc8:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
 8009ccc:	e746      	b.n	8009b5c <iNemo_setOrientation.constprop.0+0x1a8>
 8009cce:	2001      	movs	r0, #1
 8009cd0:	f883 00c4 	strb.w	r0, [r3, #196]	; 0xc4
 8009cd4:	e742      	b.n	8009b5c <iNemo_setOrientation.constprop.0+0x1a8>
 8009cd6:	20ff      	movs	r0, #255	; 0xff
 8009cd8:	f883 00be 	strb.w	r0, [r3, #190]	; 0xbe
 8009cdc:	e73e      	b.n	8009b5c <iNemo_setOrientation.constprop.0+0x1a8>
 8009cde:	2101      	movs	r1, #1
 8009ce0:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
 8009ce4:	e751      	b.n	8009b8a <iNemo_setOrientation.constprop.0+0x1d6>
 8009ce6:	2101      	movs	r1, #1
 8009ce8:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
 8009cec:	e74d      	b.n	8009b8a <iNemo_setOrientation.constprop.0+0x1d6>
 8009cee:	21ff      	movs	r1, #255	; 0xff
 8009cf0:	f883 10b3 	strb.w	r1, [r3, #179]	; 0xb3
 8009cf4:	e749      	b.n	8009b8a <iNemo_setOrientation.constprop.0+0x1d6>
 8009cf6:	2101      	movs	r1, #1
 8009cf8:	f883 10b6 	strb.w	r1, [r3, #182]	; 0xb6
 8009cfc:	e745      	b.n	8009b8a <iNemo_setOrientation.constprop.0+0x1d6>
 8009cfe:	21ff      	movs	r1, #255	; 0xff
 8009d00:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
 8009d04:	e741      	b.n	8009b8a <iNemo_setOrientation.constprop.0+0x1d6>
 8009d06:	2101      	movs	r1, #1
 8009d08:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
 8009d0c:	e751      	b.n	8009bb2 <iNemo_setOrientation.constprop.0+0x1fe>
 8009d0e:	2101      	movs	r1, #1
 8009d10:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
 8009d14:	e74d      	b.n	8009bb2 <iNemo_setOrientation.constprop.0+0x1fe>
 8009d16:	21ff      	movs	r1, #255	; 0xff
 8009d18:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
 8009d1c:	e749      	b.n	8009bb2 <iNemo_setOrientation.constprop.0+0x1fe>
 8009d1e:	2101      	movs	r1, #1
 8009d20:	f883 10b7 	strb.w	r1, [r3, #183]	; 0xb7
 8009d24:	e745      	b.n	8009bb2 <iNemo_setOrientation.constprop.0+0x1fe>
 8009d26:	21ff      	movs	r1, #255	; 0xff
 8009d28:	f883 10b1 	strb.w	r1, [r3, #177]	; 0xb1
 8009d2c:	e741      	b.n	8009bb2 <iNemo_setOrientation.constprop.0+0x1fe>
 8009d2e:	2201      	movs	r2, #1
 8009d30:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
 8009d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d38:	2201      	movs	r2, #1
 8009d3a:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 8009d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d42:	22ff      	movs	r2, #255	; 0xff
 8009d44:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
 8009d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 8009d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d56:	bf00      	nop

08009d58 <iNemo_setOrientation_6X.constprop.0>:
 8009d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d5c:	4a70      	ldr	r2, [pc, #448]	; (8009f20 <iNemo_setOrientation_6X.constprop.0+0x1c8>)
 8009d5e:	4b71      	ldr	r3, [pc, #452]	; (8009f24 <iNemo_setOrientation_6X.constprop.0+0x1cc>)
 8009d60:	f892 e000 	ldrb.w	lr, [r2]
 8009d64:	7915      	ldrb	r5, [r2, #4]
 8009d66:	7857      	ldrb	r7, [r2, #1]
 8009d68:	7954      	ldrb	r4, [r2, #5]
 8009d6a:	f892 c009 	ldrb.w	ip, [r2, #9]
 8009d6e:	f1ae 0642 	sub.w	r6, lr, #66	; 0x42
 8009d72:	2100      	movs	r1, #0
 8009d74:	2e17      	cmp	r6, #23
 8009d76:	bf98      	it	ls
 8009d78:	f10e 0e20 	addls.w	lr, lr, #32
 8009d7c:	f8c3 10cc 	str.w	r1, [r3, #204]	; 0xcc
 8009d80:	f883 10d0 	strb.w	r1, [r3, #208]	; 0xd0
 8009d84:	f8c3 10c8 	str.w	r1, [r3, #200]	; 0xc8
 8009d88:	f8c3 10d4 	str.w	r1, [r3, #212]	; 0xd4
 8009d8c:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
 8009d90:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
 8009d94:	f883 10dc 	strb.w	r1, [r3, #220]	; 0xdc
 8009d98:	f8c3 10e4 	str.w	r1, [r3, #228]	; 0xe4
 8009d9c:	f883 10e8 	strb.w	r1, [r3, #232]	; 0xe8
 8009da0:	f1a5 0142 	sub.w	r1, r5, #66	; 0x42
 8009da4:	bf98      	it	ls
 8009da6:	fa5f fe8e 	uxtbls.w	lr, lr
 8009daa:	2917      	cmp	r1, #23
 8009dac:	7a11      	ldrb	r1, [r2, #8]
 8009dae:	7896      	ldrb	r6, [r2, #2]
 8009db0:	f1a1 0042 	sub.w	r0, r1, #66	; 0x42
 8009db4:	bf9c      	itt	ls
 8009db6:	3520      	addls	r5, #32
 8009db8:	b2ed      	uxtbls	r5, r5
 8009dba:	2817      	cmp	r0, #23
 8009dbc:	bf98      	it	ls
 8009dbe:	3120      	addls	r1, #32
 8009dc0:	f1a7 0042 	sub.w	r0, r7, #66	; 0x42
 8009dc4:	bf98      	it	ls
 8009dc6:	b2c9      	uxtbls	r1, r1
 8009dc8:	2817      	cmp	r0, #23
 8009dca:	bf98      	it	ls
 8009dcc:	3720      	addls	r7, #32
 8009dce:	f1a4 0042 	sub.w	r0, r4, #66	; 0x42
 8009dd2:	bf98      	it	ls
 8009dd4:	b2ff      	uxtbls	r7, r7
 8009dd6:	2817      	cmp	r0, #23
 8009dd8:	bf98      	it	ls
 8009dda:	3420      	addls	r4, #32
 8009ddc:	f1ac 0042 	sub.w	r0, ip, #66	; 0x42
 8009de0:	bf98      	it	ls
 8009de2:	b2e4      	uxtbls	r4, r4
 8009de4:	2817      	cmp	r0, #23
 8009de6:	bf98      	it	ls
 8009de8:	f10c 0c20 	addls.w	ip, ip, #32
 8009dec:	f1a6 0042 	sub.w	r0, r6, #66	; 0x42
 8009df0:	bf98      	it	ls
 8009df2:	fa5f fc8c 	uxtbls.w	ip, ip
 8009df6:	2817      	cmp	r0, #23
 8009df8:	7990      	ldrb	r0, [r2, #6]
 8009dfa:	7a92      	ldrb	r2, [r2, #10]
 8009dfc:	f1a0 0842 	sub.w	r8, r0, #66	; 0x42
 8009e00:	bf9c      	itt	ls
 8009e02:	3620      	addls	r6, #32
 8009e04:	b2f6      	uxtbls	r6, r6
 8009e06:	f1b8 0f17 	cmp.w	r8, #23
 8009e0a:	bf98      	it	ls
 8009e0c:	3020      	addls	r0, #32
 8009e0e:	f1a2 0842 	sub.w	r8, r2, #66	; 0x42
 8009e12:	bf98      	it	ls
 8009e14:	b2c0      	uxtbls	r0, r0
 8009e16:	f1b8 0f17 	cmp.w	r8, #23
 8009e1a:	bf98      	it	ls
 8009e1c:	3220      	addls	r2, #32
 8009e1e:	f1ae 0e64 	sub.w	lr, lr, #100	; 0x64
 8009e22:	bf98      	it	ls
 8009e24:	b2d2      	uxtbls	r2, r2
 8009e26:	f1be 0f13 	cmp.w	lr, #19
 8009e2a:	d80f      	bhi.n	8009e4c <iNemo_setOrientation_6X.constprop.0+0xf4>
 8009e2c:	e8df f00e 	tbb	[pc, lr]
 8009e30:	0e0eac0a 	.word	0x0e0eac0a
 8009e34:	0e0e0e0e 	.word	0x0e0e0e0e
 8009e38:	0eb10e0e 	.word	0x0eb10e0e
 8009e3c:	b60e0e0e 	.word	0xb60e0e0e
 8009e40:	c00ebb0e 	.word	0xc00ebb0e
 8009e44:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8009e48:	f883 e0ce 	strb.w	lr, [r3, #206]	; 0xce
 8009e4c:	3f64      	subs	r7, #100	; 0x64
 8009e4e:	2f13      	cmp	r7, #19
 8009e50:	d80e      	bhi.n	8009e70 <iNemo_setOrientation_6X.constprop.0+0x118>
 8009e52:	e8df f007 	tbb	[pc, r7]
 8009e56:	b20a      	.short	0xb20a
 8009e58:	0d0d0d0d 	.word	0x0d0d0d0d
 8009e5c:	0d0d0d0d 	.word	0x0d0d0d0d
 8009e60:	0d0d0db6 	.word	0x0d0d0db6
 8009e64:	be0dba0d 	.word	0xbe0dba0d
 8009e68:	c20d      	.short	0xc20d
 8009e6a:	27ff      	movs	r7, #255	; 0xff
 8009e6c:	f883 70cf 	strb.w	r7, [r3, #207]	; 0xcf
 8009e70:	3e64      	subs	r6, #100	; 0x64
 8009e72:	2e13      	cmp	r6, #19
 8009e74:	d80e      	bhi.n	8009e94 <iNemo_setOrientation_6X.constprop.0+0x13c>
 8009e76:	e8df f006 	tbb	[pc, r6]
 8009e7a:	b40a      	.short	0xb40a
 8009e7c:	0d0d0d0d 	.word	0x0d0d0d0d
 8009e80:	0d0d0d0d 	.word	0x0d0d0d0d
 8009e84:	0d0d0db8 	.word	0x0d0d0db8
 8009e88:	c00dbc0d 	.word	0xc00dbc0d
 8009e8c:	c40d      	.short	0xc40d
 8009e8e:	26ff      	movs	r6, #255	; 0xff
 8009e90:	f883 60d0 	strb.w	r6, [r3, #208]	; 0xd0
 8009e94:	3d64      	subs	r5, #100	; 0x64
 8009e96:	2d13      	cmp	r5, #19
 8009e98:	d80e      	bhi.n	8009eb8 <iNemo_setOrientation_6X.constprop.0+0x160>
 8009e9a:	e8df f005 	tbb	[pc, r5]
 8009e9e:	b60a      	.short	0xb60a
 8009ea0:	0d0d0d0d 	.word	0x0d0d0d0d
 8009ea4:	0d0d0d0d 	.word	0x0d0d0d0d
 8009ea8:	0d0d0dba 	.word	0x0d0d0dba
 8009eac:	c20dbe0d 	.word	0xc20dbe0d
 8009eb0:	c60d      	.short	0xc60d
 8009eb2:	25ff      	movs	r5, #255	; 0xff
 8009eb4:	f883 50e6 	strb.w	r5, [r3, #230]	; 0xe6
 8009eb8:	3c64      	subs	r4, #100	; 0x64
 8009eba:	2c13      	cmp	r4, #19
 8009ebc:	d80e      	bhi.n	8009edc <iNemo_setOrientation_6X.constprop.0+0x184>
 8009ebe:	e8df f004 	tbb	[pc, r4]
 8009ec2:	b80a      	.short	0xb80a
 8009ec4:	0d0d0d0d 	.word	0x0d0d0d0d
 8009ec8:	0d0d0d0d 	.word	0x0d0d0d0d
 8009ecc:	0d0d0dbc 	.word	0x0d0d0dbc
 8009ed0:	c40dc00d 	.word	0xc40dc00d
 8009ed4:	c80d      	.short	0xc80d
 8009ed6:	24ff      	movs	r4, #255	; 0xff
 8009ed8:	f883 40e7 	strb.w	r4, [r3, #231]	; 0xe7
 8009edc:	3864      	subs	r0, #100	; 0x64
 8009ede:	2813      	cmp	r0, #19
 8009ee0:	d80e      	bhi.n	8009f00 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 8009ee2:	e8df f000 	tbb	[pc, r0]
 8009ee6:	ba0a      	.short	0xba0a
 8009ee8:	0d0d0d0d 	.word	0x0d0d0d0d
 8009eec:	0d0d0d0d 	.word	0x0d0d0d0d
 8009ef0:	0d0d0dbe 	.word	0x0d0d0dbe
 8009ef4:	c60dc20d 	.word	0xc60dc20d
 8009ef8:	ca0d      	.short	0xca0d
 8009efa:	20ff      	movs	r0, #255	; 0xff
 8009efc:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
 8009f00:	3964      	subs	r1, #100	; 0x64
 8009f02:	2913      	cmp	r1, #19
 8009f04:	d813      	bhi.n	8009f2e <iNemo_setOrientation_6X.constprop.0+0x1d6>
 8009f06:	e8df f001 	tbb	[pc, r1]
 8009f0a:	bc0f      	.short	0xbc0f
 8009f0c:	12121212 	.word	0x12121212
 8009f10:	12121212 	.word	0x12121212
 8009f14:	121212c0 	.word	0x121212c0
 8009f18:	c812c412 	.word	0xc812c412
 8009f1c:	cc12      	.short	0xcc12
 8009f1e:	bf00      	nop
 8009f20:	20000000 	.word	0x20000000
 8009f24:	20001690 	.word	0x20001690
 8009f28:	21ff      	movs	r1, #255	; 0xff
 8009f2a:	f883 10da 	strb.w	r1, [r3, #218]	; 0xda
 8009f2e:	f1ac 0c64 	sub.w	ip, ip, #100	; 0x64
 8009f32:	f1bc 0f13 	cmp.w	ip, #19
 8009f36:	d80e      	bhi.n	8009f56 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 8009f38:	e8df f00c 	tbb	[pc, ip]
 8009f3c:	0d0db70a 	.word	0x0d0db70a
 8009f40:	0d0d0d0d 	.word	0x0d0d0d0d
 8009f44:	0dbb0d0d 	.word	0x0dbb0d0d
 8009f48:	bf0d0d0d 	.word	0xbf0d0d0d
 8009f4c:	c70dc30d 	.word	0xc70dc30d
 8009f50:	21ff      	movs	r1, #255	; 0xff
 8009f52:	f883 10db 	strb.w	r1, [r3, #219]	; 0xdb
 8009f56:	3a64      	subs	r2, #100	; 0x64
 8009f58:	2a13      	cmp	r2, #19
 8009f5a:	d80e      	bhi.n	8009f7a <iNemo_setOrientation_6X.constprop.0+0x222>
 8009f5c:	e8df f002 	tbb	[pc, r2]
 8009f60:	0d0db90a 	.word	0x0d0db90a
 8009f64:	0d0d0d0d 	.word	0x0d0d0d0d
 8009f68:	0dbe0d0d 	.word	0x0dbe0d0d
 8009f6c:	c30d0d0d 	.word	0xc30d0d0d
 8009f70:	0f0dc80d 	.word	0x0f0dc80d
 8009f74:	22ff      	movs	r2, #255	; 0xff
 8009f76:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 8009f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f7e:	22ff      	movs	r2, #255	; 0xff
 8009f80:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 8009f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f88:	f04f 0e01 	mov.w	lr, #1
 8009f8c:	f883 e0c8 	strb.w	lr, [r3, #200]	; 0xc8
 8009f90:	e75c      	b.n	8009e4c <iNemo_setOrientation_6X.constprop.0+0xf4>
 8009f92:	f04f 0e01 	mov.w	lr, #1
 8009f96:	f883 e0cb 	strb.w	lr, [r3, #203]	; 0xcb
 8009f9a:	e757      	b.n	8009e4c <iNemo_setOrientation_6X.constprop.0+0xf4>
 8009f9c:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8009fa0:	f883 e0cb 	strb.w	lr, [r3, #203]	; 0xcb
 8009fa4:	e752      	b.n	8009e4c <iNemo_setOrientation_6X.constprop.0+0xf4>
 8009fa6:	f04f 0e01 	mov.w	lr, #1
 8009faa:	f883 e0ce 	strb.w	lr, [r3, #206]	; 0xce
 8009fae:	e74d      	b.n	8009e4c <iNemo_setOrientation_6X.constprop.0+0xf4>
 8009fb0:	f04f 0eff 	mov.w	lr, #255	; 0xff
 8009fb4:	f883 e0c8 	strb.w	lr, [r3, #200]	; 0xc8
 8009fb8:	e748      	b.n	8009e4c <iNemo_setOrientation_6X.constprop.0+0xf4>
 8009fba:	2701      	movs	r7, #1
 8009fbc:	f883 70c9 	strb.w	r7, [r3, #201]	; 0xc9
 8009fc0:	e756      	b.n	8009e70 <iNemo_setOrientation_6X.constprop.0+0x118>
 8009fc2:	2701      	movs	r7, #1
 8009fc4:	f883 70cc 	strb.w	r7, [r3, #204]	; 0xcc
 8009fc8:	e752      	b.n	8009e70 <iNemo_setOrientation_6X.constprop.0+0x118>
 8009fca:	27ff      	movs	r7, #255	; 0xff
 8009fcc:	f883 70cc 	strb.w	r7, [r3, #204]	; 0xcc
 8009fd0:	e74e      	b.n	8009e70 <iNemo_setOrientation_6X.constprop.0+0x118>
 8009fd2:	2701      	movs	r7, #1
 8009fd4:	f883 70cf 	strb.w	r7, [r3, #207]	; 0xcf
 8009fd8:	e74a      	b.n	8009e70 <iNemo_setOrientation_6X.constprop.0+0x118>
 8009fda:	27ff      	movs	r7, #255	; 0xff
 8009fdc:	f883 70c9 	strb.w	r7, [r3, #201]	; 0xc9
 8009fe0:	e746      	b.n	8009e70 <iNemo_setOrientation_6X.constprop.0+0x118>
 8009fe2:	2601      	movs	r6, #1
 8009fe4:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
 8009fe8:	e754      	b.n	8009e94 <iNemo_setOrientation_6X.constprop.0+0x13c>
 8009fea:	2601      	movs	r6, #1
 8009fec:	f883 60cd 	strb.w	r6, [r3, #205]	; 0xcd
 8009ff0:	e750      	b.n	8009e94 <iNemo_setOrientation_6X.constprop.0+0x13c>
 8009ff2:	26ff      	movs	r6, #255	; 0xff
 8009ff4:	f883 60cd 	strb.w	r6, [r3, #205]	; 0xcd
 8009ff8:	e74c      	b.n	8009e94 <iNemo_setOrientation_6X.constprop.0+0x13c>
 8009ffa:	2601      	movs	r6, #1
 8009ffc:	f883 60d0 	strb.w	r6, [r3, #208]	; 0xd0
 800a000:	e748      	b.n	8009e94 <iNemo_setOrientation_6X.constprop.0+0x13c>
 800a002:	26ff      	movs	r6, #255	; 0xff
 800a004:	f883 60ca 	strb.w	r6, [r3, #202]	; 0xca
 800a008:	e744      	b.n	8009e94 <iNemo_setOrientation_6X.constprop.0+0x13c>
 800a00a:	2501      	movs	r5, #1
 800a00c:	f883 50e0 	strb.w	r5, [r3, #224]	; 0xe0
 800a010:	e752      	b.n	8009eb8 <iNemo_setOrientation_6X.constprop.0+0x160>
 800a012:	2501      	movs	r5, #1
 800a014:	f883 50e3 	strb.w	r5, [r3, #227]	; 0xe3
 800a018:	e74e      	b.n	8009eb8 <iNemo_setOrientation_6X.constprop.0+0x160>
 800a01a:	25ff      	movs	r5, #255	; 0xff
 800a01c:	f883 50e3 	strb.w	r5, [r3, #227]	; 0xe3
 800a020:	e74a      	b.n	8009eb8 <iNemo_setOrientation_6X.constprop.0+0x160>
 800a022:	2501      	movs	r5, #1
 800a024:	f883 50e6 	strb.w	r5, [r3, #230]	; 0xe6
 800a028:	e746      	b.n	8009eb8 <iNemo_setOrientation_6X.constprop.0+0x160>
 800a02a:	25ff      	movs	r5, #255	; 0xff
 800a02c:	f883 50e0 	strb.w	r5, [r3, #224]	; 0xe0
 800a030:	e742      	b.n	8009eb8 <iNemo_setOrientation_6X.constprop.0+0x160>
 800a032:	2401      	movs	r4, #1
 800a034:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
 800a038:	e750      	b.n	8009edc <iNemo_setOrientation_6X.constprop.0+0x184>
 800a03a:	2401      	movs	r4, #1
 800a03c:	f883 40e4 	strb.w	r4, [r3, #228]	; 0xe4
 800a040:	e74c      	b.n	8009edc <iNemo_setOrientation_6X.constprop.0+0x184>
 800a042:	24ff      	movs	r4, #255	; 0xff
 800a044:	f883 40e4 	strb.w	r4, [r3, #228]	; 0xe4
 800a048:	e748      	b.n	8009edc <iNemo_setOrientation_6X.constprop.0+0x184>
 800a04a:	2401      	movs	r4, #1
 800a04c:	f883 40e7 	strb.w	r4, [r3, #231]	; 0xe7
 800a050:	e744      	b.n	8009edc <iNemo_setOrientation_6X.constprop.0+0x184>
 800a052:	24ff      	movs	r4, #255	; 0xff
 800a054:	f883 40e1 	strb.w	r4, [r3, #225]	; 0xe1
 800a058:	e740      	b.n	8009edc <iNemo_setOrientation_6X.constprop.0+0x184>
 800a05a:	2001      	movs	r0, #1
 800a05c:	f883 00e2 	strb.w	r0, [r3, #226]	; 0xe2
 800a060:	e74e      	b.n	8009f00 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 800a062:	2001      	movs	r0, #1
 800a064:	f883 00e5 	strb.w	r0, [r3, #229]	; 0xe5
 800a068:	e74a      	b.n	8009f00 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 800a06a:	20ff      	movs	r0, #255	; 0xff
 800a06c:	f883 00e5 	strb.w	r0, [r3, #229]	; 0xe5
 800a070:	e746      	b.n	8009f00 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 800a072:	2001      	movs	r0, #1
 800a074:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
 800a078:	e742      	b.n	8009f00 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 800a07a:	20ff      	movs	r0, #255	; 0xff
 800a07c:	f883 00e2 	strb.w	r0, [r3, #226]	; 0xe2
 800a080:	e73e      	b.n	8009f00 <iNemo_setOrientation_6X.constprop.0+0x1a8>
 800a082:	2101      	movs	r1, #1
 800a084:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
 800a088:	e751      	b.n	8009f2e <iNemo_setOrientation_6X.constprop.0+0x1d6>
 800a08a:	2101      	movs	r1, #1
 800a08c:	f883 10d7 	strb.w	r1, [r3, #215]	; 0xd7
 800a090:	e74d      	b.n	8009f2e <iNemo_setOrientation_6X.constprop.0+0x1d6>
 800a092:	21ff      	movs	r1, #255	; 0xff
 800a094:	f883 10d7 	strb.w	r1, [r3, #215]	; 0xd7
 800a098:	e749      	b.n	8009f2e <iNemo_setOrientation_6X.constprop.0+0x1d6>
 800a09a:	2101      	movs	r1, #1
 800a09c:	f883 10da 	strb.w	r1, [r3, #218]	; 0xda
 800a0a0:	e745      	b.n	8009f2e <iNemo_setOrientation_6X.constprop.0+0x1d6>
 800a0a2:	21ff      	movs	r1, #255	; 0xff
 800a0a4:	f883 10d4 	strb.w	r1, [r3, #212]	; 0xd4
 800a0a8:	e741      	b.n	8009f2e <iNemo_setOrientation_6X.constprop.0+0x1d6>
 800a0aa:	2101      	movs	r1, #1
 800a0ac:	f883 10d5 	strb.w	r1, [r3, #213]	; 0xd5
 800a0b0:	e751      	b.n	8009f56 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 800a0b2:	2101      	movs	r1, #1
 800a0b4:	f883 10d8 	strb.w	r1, [r3, #216]	; 0xd8
 800a0b8:	e74d      	b.n	8009f56 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 800a0ba:	21ff      	movs	r1, #255	; 0xff
 800a0bc:	f883 10d8 	strb.w	r1, [r3, #216]	; 0xd8
 800a0c0:	e749      	b.n	8009f56 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 800a0c2:	2101      	movs	r1, #1
 800a0c4:	f883 10db 	strb.w	r1, [r3, #219]	; 0xdb
 800a0c8:	e745      	b.n	8009f56 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 800a0ca:	21ff      	movs	r1, #255	; 0xff
 800a0cc:	f883 10d5 	strb.w	r1, [r3, #213]	; 0xd5
 800a0d0:	e741      	b.n	8009f56 <iNemo_setOrientation_6X.constprop.0+0x1fe>
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
 800a0d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0dc:	2201      	movs	r2, #1
 800a0de:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 800a0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0e6:	22ff      	movs	r2, #255	; 0xff
 800a0e8:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
 800a0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
 800a0f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0fa:	bf00      	nop

0800a0fc <MotionDI_setKnobs.part.0>:
 800a0fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0fe:	e9d0 160b 	ldrd	r1, r6, [r0, #44]	; 0x2c
 800a102:	b091      	sub	sp, #68	; 0x44
 800a104:	4b3c      	ldr	r3, [pc, #240]	; (800a1f8 <MotionDI_setKnobs.part.0+0xfc>)
 800a106:	f8cd 6031 	str.w	r6, [sp, #49]	; 0x31
 800a10a:	461a      	mov	r2, r3
 800a10c:	4604      	mov	r4, r0
 800a10e:	f8cd 102d 	str.w	r1, [sp, #45]	; 0x2d
 800a112:	f8bd 7031 	ldrh.w	r7, [sp, #49]	; 0x31
 800a116:	4d39      	ldr	r5, [pc, #228]	; (800a1fc <MotionDI_setKnobs.part.0+0x100>)
 800a118:	f832 0f08 	ldrh.w	r0, [r2, #8]!
 800a11c:	809f      	strh	r7, [r3, #4]
 800a11e:	f8bd 702d 	ldrh.w	r7, [sp, #45]	; 0x2d
 800a122:	6a26      	ldr	r6, [r4, #32]
 800a124:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800a126:	801f      	strh	r7, [r3, #0]
 800a128:	f89d 702f 	ldrb.w	r7, [sp, #47]	; 0x2f
 800a12c:	709f      	strb	r7, [r3, #2]
 800a12e:	f8d5 e0f0 	ldr.w	lr, [r5, #240]	; 0xf0
 800a132:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 800a136:	f8ad 0035 	strh.w	r0, [sp, #53]	; 0x35
 800a13a:	f8c5 6128 	str.w	r6, [r5, #296]	; 0x128
 800a13e:	7890      	ldrb	r0, [r2, #2]
 800a140:	f8c5 60ec 	str.w	r6, [r5, #236]	; 0xec
 800a144:	f8c5 1134 	str.w	r1, [r5, #308]	; 0x134
 800a148:	f894 6029 	ldrb.w	r6, [r4, #41]	; 0x29
 800a14c:	f8c5 10f8 	str.w	r1, [r5, #248]	; 0xf8
 800a150:	2100      	movs	r1, #0
 800a152:	f89d c033 	ldrb.w	ip, [sp, #51]	; 0x33
 800a156:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
 800a15a:	f8c5 e12c 	str.w	lr, [r5, #300]	; 0x12c
 800a15e:	f885 113d 	strb.w	r1, [r5, #317]	; 0x13d
 800a162:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
 800a166:	f885 7161 	strb.w	r7, [r5, #353]	; 0x161
 800a16a:	f885 6162 	strb.w	r6, [r5, #354]	; 0x162
 800a16e:	f885 7125 	strb.w	r7, [r5, #293]	; 0x125
 800a172:	f885 6126 	strb.w	r6, [r5, #294]	; 0x126
 800a176:	f885 1101 	strb.w	r1, [r5, #257]	; 0x101
 800a17a:	f8bd 1035 	ldrh.w	r1, [sp, #53]	; 0x35
 800a17e:	8119      	strh	r1, [r3, #8]
 800a180:	f883 c006 	strb.w	ip, [r3, #6]
 800a184:	7090      	strb	r0, [r2, #2]
 800a186:	f7ff fc15 	bl	80099b4 <iNemo_setOrientation.constprop.0>
 800a18a:	f7ff fde5 	bl	8009d58 <iNemo_setOrientation_6X.constprop.0>
 800a18e:	4a1c      	ldr	r2, [pc, #112]	; (800a200 <MotionDI_setKnobs.part.0+0x104>)
 800a190:	f8d2 3464 	ldr.w	r3, [r2, #1124]	; 0x464
 800a194:	1e59      	subs	r1, r3, #1
 800a196:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800a19a:	d211      	bcs.n	800a1c0 <MotionDI_setKnobs.part.0+0xc4>
 800a19c:	3b0a      	subs	r3, #10
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	2b5a      	cmp	r3, #90	; 0x5a
 800a1a2:	bf8c      	ite	hi
 800a1a4:	2300      	movhi	r3, #0
 800a1a6:	2301      	movls	r3, #1
 800a1a8:	6821      	ldr	r1, [r4, #0]
 800a1aa:	7013      	strb	r3, [r2, #0]
 800a1ac:	f502 638d 	add.w	r3, r2, #1128	; 0x468
 800a1b0:	4814      	ldr	r0, [pc, #80]	; (800a204 <MotionDI_setKnobs.part.0+0x108>)
 800a1b2:	6019      	str	r1, [r3, #0]
 800a1b4:	f502 618c 	add.w	r1, r2, #1120	; 0x460
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	6008      	str	r0, [r1, #0]
 800a1bc:	f882 346c 	strb.w	r3, [r2, #1132]	; 0x46c
 800a1c0:	68e3      	ldr	r3, [r4, #12]
 800a1c2:	6920      	ldr	r0, [r4, #16]
 800a1c4:	6961      	ldr	r1, [r4, #20]
 800a1c6:	69a2      	ldr	r2, [r4, #24]
 800a1c8:	606b      	str	r3, [r5, #4]
 800a1ca:	4e0f      	ldr	r6, [pc, #60]	; (800a208 <MotionDI_setKnobs.part.0+0x10c>)
 800a1cc:	68a3      	ldr	r3, [r4, #8]
 800a1ce:	6168      	str	r0, [r5, #20]
 800a1d0:	60a9      	str	r1, [r5, #8]
 800a1d2:	60ea      	str	r2, [r5, #12]
 800a1d4:	602b      	str	r3, [r5, #0]
 800a1d6:	f104 0730 	add.w	r7, r4, #48	; 0x30
 800a1da:	6820      	ldr	r0, [r4, #0]
 800a1dc:	6861      	ldr	r1, [r4, #4]
 800a1de:	68a2      	ldr	r2, [r4, #8]
 800a1e0:	68e3      	ldr	r3, [r4, #12]
 800a1e2:	4635      	mov	r5, r6
 800a1e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a1e6:	3410      	adds	r4, #16
 800a1e8:	42bc      	cmp	r4, r7
 800a1ea:	462e      	mov	r6, r5
 800a1ec:	d1f5      	bne.n	800a1da <MotionDI_setKnobs.part.0+0xde>
 800a1ee:	6820      	ldr	r0, [r4, #0]
 800a1f0:	6028      	str	r0, [r5, #0]
 800a1f2:	b011      	add	sp, #68	; 0x44
 800a1f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1f6:	bf00      	nop
 800a1f8:	20000000 	.word	0x20000000
 800a1fc:	20001690 	.word	0x20001690
 800a200:	20002138 	.word	0x20002138
 800a204:	3a83126f 	.word	0x3a83126f
 800a208:	200017f4 	.word	0x200017f4

0800a20c <getAccStats.constprop.0>:
 800a20c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a210:	eec7 3a80 	vdiv.f32	s7, s15, s0
 800a214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a218:	2400      	movs	r4, #0
 800a21a:	6014      	str	r4, [r2, #0]
 800a21c:	601c      	str	r4, [r3, #0]
 800a21e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a220:	4f68      	ldr	r7, [pc, #416]	; (800a3c4 <getAccStats.constprop.0+0x1b8>)
 800a222:	2500      	movs	r5, #0
 800a224:	7025      	strb	r5, [r4, #0]
 800a226:	f8b7 c050 	ldrh.w	ip, [r7, #80]	; 0x50
 800a22a:	f8b7 4052 	ldrh.w	r4, [r7, #82]	; 0x52
 800a22e:	ed9f 4a66 	vldr	s8, [pc, #408]	; 800a3c8 <getAccStats.constprop.0+0x1bc>
 800a232:	f9b7 5058 	ldrsh.w	r5, [r7, #88]	; 0x58
 800a236:	45a4      	cmp	ip, r4
 800a238:	ee23 4a84 	vmul.f32	s8, s7, s8
 800a23c:	f105 0501 	add.w	r5, r5, #1
 800a240:	f000 80b2 	beq.w	800a3a8 <getAccStats.constprop.0+0x19c>
 800a244:	eba5 050c 	sub.w	r5, r5, ip
 800a248:	fb95 faf4 	sdiv	sl, r5, r4
 800a24c:	fb04 551a 	mls	r5, r4, sl, r5
 800a250:	fa0f fa85 	sxth.w	sl, r5
 800a254:	f1ba 0f00 	cmp.w	sl, #0
 800a258:	bfbc      	itt	lt
 800a25a:	192d      	addlt	r5, r5, r4
 800a25c:	fa0f fa85 	sxthlt.w	sl, r5
 800a260:	f1bc 0f00 	cmp.w	ip, #0
 800a264:	f000 80aa 	beq.w	800a3bc <getAccStats.constprop.0+0x1b0>
 800a268:	f9b0 9000 	ldrsh.w	r9, [r0]
 800a26c:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 800a270:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 800a274:	2600      	movs	r6, #0
 800a276:	e018      	b.n	800a2aa <getAccStats.constprop.0+0x9e>
 800a278:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a27a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a27c:	7824      	ldrb	r4, [r4, #0]
 800a27e:	3401      	adds	r4, #1
 800a280:	702c      	strb	r4, [r5, #0]
 800a282:	edd3 7a00 	vldr	s15, [r3]
 800a286:	f8b7 c050 	ldrh.w	ip, [r7, #80]	; 0x50
 800a28a:	eee7 7a07 	vfma.f32	s15, s14, s14
 800a28e:	3601      	adds	r6, #1
 800a290:	b2b4      	uxth	r4, r6
 800a292:	45a4      	cmp	ip, r4
 800a294:	edc3 7a00 	vstr	s15, [r3]
 800a298:	d967      	bls.n	800a36a <getAccStats.constprop.0+0x15e>
 800a29a:	f9b0 9000 	ldrsh.w	r9, [r0]
 800a29e:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 800a2a2:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 800a2a6:	f8b7 4052 	ldrh.w	r4, [r7, #82]	; 0x52
 800a2aa:	edd1 4a04 	vldr	s9, [r1, #16]
 800a2ae:	ed91 5a00 	vldr	s10, [r1]
 800a2b2:	edd1 5a08 	vldr	s11, [r1, #32]
 800a2b6:	ed92 6a00 	vldr	s12, [r2]
 800a2ba:	fa1a fb86 	uxtah	fp, sl, r6
 800a2be:	fb9b f5f4 	sdiv	r5, fp, r4
 800a2c2:	fb04 b415 	mls	r4, r4, r5, fp
 800a2c6:	b224      	sxth	r4, r4
 800a2c8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 800a2cc:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800a2d0:	f9b4 b062 	ldrsh.w	fp, [r4, #98]	; 0x62
 800a2d4:	f9b4 5060 	ldrsh.w	r5, [r4, #96]	; 0x60
 800a2d8:	f9b4 4064 	ldrsh.w	r4, [r4, #100]	; 0x64
 800a2dc:	ebab 0b08 	sub.w	fp, fp, r8
 800a2e0:	ee06 ba90 	vmov	s13, fp
 800a2e4:	eba5 0509 	sub.w	r5, r5, r9
 800a2e8:	ee07 5a10 	vmov	s14, r5
 800a2ec:	eba4 040e 	sub.w	r4, r4, lr
 800a2f0:	ee07 4a90 	vmov	s15, r4
 800a2f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800a2f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a2fc:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800a300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a304:	ee27 7a05 	vmul.f32	s14, s14, s10
 800a308:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800a30c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a310:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800a314:	ee16 5a90 	vmov	r5, s13
 800a318:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a31c:	ee17 ba10 	vmov	fp, s14
 800a320:	ee17 4a90 	vmov	r4, s15
 800a324:	fb05 f505 	mul.w	r5, r5, r5
 800a328:	fb0b 5b0b 	mla	fp, fp, fp, r5
 800a32c:	fb04 b404 	mla	r4, r4, r4, fp
 800a330:	ee07 4a90 	vmov	s15, r4
 800a334:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a338:	eef1 6ae7 	vsqrt.f32	s13, s15
 800a33c:	ee36 7ae3 	vsub.f32	s14, s13, s7
 800a340:	ee76 7a26 	vadd.f32	s15, s12, s13
 800a344:	eef0 6ac7 	vabs.f32	s13, s14
 800a348:	eeb4 4ae6 	vcmpe.f32	s8, s13
 800a34c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a350:	edc2 7a00 	vstr	s15, [r2]
 800a354:	d490      	bmi.n	800a278 <getAccStats.constprop.0+0x6c>
 800a356:	edd3 7a00 	vldr	s15, [r3]
 800a35a:	eee7 7a07 	vfma.f32	s15, s14, s14
 800a35e:	3601      	adds	r6, #1
 800a360:	b2b4      	uxth	r4, r6
 800a362:	45a4      	cmp	ip, r4
 800a364:	edc3 7a00 	vstr	s15, [r3]
 800a368:	d89d      	bhi.n	800a2a6 <getAccStats.constprop.0+0x9a>
 800a36a:	ee07 ca10 	vmov	s14, ip
 800a36e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a372:	eddf 6a16 	vldr	s13, [pc, #88]	; 800a3cc <getAccStats.constprop.0+0x1c0>
 800a376:	ee87 6a87 	vdiv.f32	s12, s15, s14
 800a37a:	eef1 7ac6 	vsqrt.f32	s15, s12
 800a37e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800a382:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a38a:	bfb8      	it	lt
 800a38c:	eef0 7a66 	vmovlt.f32	s15, s13
 800a390:	edc3 7a00 	vstr	s15, [r3]
 800a394:	edd2 7a00 	vldr	s15, [r2]
 800a398:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a39c:	eec0 7a07 	vdiv.f32	s15, s0, s14
 800a3a0:	edc2 7a00 	vstr	s15, [r2]
 800a3a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3a8:	fb95 fafc 	sdiv	sl, r5, ip
 800a3ac:	fb0c 551a 	mls	r5, ip, sl, r5
 800a3b0:	fa0f fa85 	sxth.w	sl, r5
 800a3b4:	f1bc 0f00 	cmp.w	ip, #0
 800a3b8:	f47f af56 	bne.w	800a268 <getAccStats.constprop.0+0x5c>
 800a3bc:	edd3 7a00 	vldr	s15, [r3]
 800a3c0:	e7d3      	b.n	800a36a <getAccStats.constprop.0+0x15e>
 800a3c2:	bf00      	nop
 800a3c4:	20002138 	.word	0x20002138
 800a3c8:	3e4ccccd 	.word	0x3e4ccccd
 800a3cc:	3ca3d70a 	.word	0x3ca3d70a

0800a3d0 <iNemo_quat2heading>:
 800a3d0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800a3d4:	460e      	mov	r6, r1
 800a3d6:	ed2d 8b08 	vpush	{d8-d11}
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d15b      	bne.n	800a496 <iNemo_quat2heading+0xc6>
 800a3de:	edd2 6a00 	vldr	s13, [r2]
 800a3e2:	edd2 7a01 	vldr	s15, [r2, #4]
 800a3e6:	4dba      	ldr	r5, [pc, #744]	; (800a6d0 <iNemo_quat2heading+0x300>)
 800a3e8:	ed92 7a02 	vldr	s14, [r2, #8]
 800a3ec:	edd0 9a00 	vldr	s19, [r0]
 800a3f0:	f8d5 4198 	ldr.w	r4, [r5, #408]	; 0x198
 800a3f4:	ed90 aa01 	vldr	s20, [r0, #4]
 800a3f8:	edd0 8a02 	vldr	s17, [r0, #8]
 800a3fc:	ed90 8a03 	vldr	s16, [r0, #12]
 800a400:	eef0 aae6 	vabs.f32	s21, s13
 800a404:	eeb0 9ae7 	vabs.f32	s18, s15
 800a408:	eef4 aac9 	vcmpe.f32	s21, s18
 800a40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a410:	eeb0 bac7 	vabs.f32	s22, s14
 800a414:	f340 80b4 	ble.w	800a580 <iNemo_quat2heading+0x1b0>
 800a418:	eef4 aacb 	vcmpe.f32	s21, s22
 800a41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a420:	f340 80ae 	ble.w	800a580 <iNemo_quat2heading+0x1b0>
 800a424:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800a428:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a42c:	ee1a 0a90 	vmov	r0, s21
 800a430:	f340 81b3 	ble.w	800a79a <iNemo_quat2heading+0x3ca>
 800a434:	f7f6 f82c 	bl	8000490 <__aeabi_f2d>
 800a438:	4680      	mov	r8, r0
 800a43a:	ee19 0a10 	vmov	r0, s18
 800a43e:	4689      	mov	r9, r1
 800a440:	f7f6 f826 	bl	8000490 <__aeabi_f2d>
 800a444:	a39e      	add	r3, pc, #632	; (adr r3, 800a6c0 <iNemo_quat2heading+0x2f0>)
 800a446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a44a:	f7f6 f879 	bl	8000540 <__aeabi_dmul>
 800a44e:	4602      	mov	r2, r0
 800a450:	460b      	mov	r3, r1
 800a452:	4640      	mov	r0, r8
 800a454:	4649      	mov	r1, r9
 800a456:	f7f6 fb03 	bl	8000a60 <__aeabi_dcmpgt>
 800a45a:	b188      	cbz	r0, 800a480 <iNemo_quat2heading+0xb0>
 800a45c:	ee1b 0a10 	vmov	r0, s22
 800a460:	f7f6 f816 	bl	8000490 <__aeabi_f2d>
 800a464:	a396      	add	r3, pc, #600	; (adr r3, 800a6c0 <iNemo_quat2heading+0x2f0>)
 800a466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46a:	f7f6 f869 	bl	8000540 <__aeabi_dmul>
 800a46e:	4602      	mov	r2, r0
 800a470:	460b      	mov	r3, r1
 800a472:	4640      	mov	r0, r8
 800a474:	4649      	mov	r1, r9
 800a476:	f7f6 faf3 	bl	8000a60 <__aeabi_dcmpgt>
 800a47a:	2800      	cmp	r0, #0
 800a47c:	f040 81b9 	bne.w	800a7f2 <iNemo_quat2heading+0x422>
 800a480:	2c05      	cmp	r4, #5
 800a482:	f200 81ba 	bhi.w	800a7fa <iNemo_quat2heading+0x42a>
 800a486:	e8df f014 	tbh	[pc, r4, lsl #1]
 800a48a:	00b2      	.short	0x00b2
 800a48c:	005f00e7 	.word	0x005f00e7
 800a490:	005f0156 	.word	0x005f0156
 800a494:	00b2      	.short	0x00b2
 800a496:	edd2 6a01 	vldr	s13, [r2, #4]
 800a49a:	edd2 7a00 	vldr	s15, [r2]
 800a49e:	edd0 8a02 	vldr	s17, [r0, #8]
 800a4a2:	4d8b      	ldr	r5, [pc, #556]	; (800a6d0 <iNemo_quat2heading+0x300>)
 800a4a4:	ed92 7a02 	vldr	s14, [r2, #8]
 800a4a8:	edd0 9a01 	vldr	s19, [r0, #4]
 800a4ac:	f8d5 4198 	ldr.w	r4, [r5, #408]	; 0x198
 800a4b0:	ed90 aa00 	vldr	s20, [r0]
 800a4b4:	ed90 8a03 	vldr	s16, [r0, #12]
 800a4b8:	eef0 aae6 	vabs.f32	s21, s13
 800a4bc:	eeb0 9ae7 	vabs.f32	s18, s15
 800a4c0:	eef4 aac9 	vcmpe.f32	s21, s18
 800a4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4c8:	eef1 8a68 	vneg.f32	s17, s17
 800a4cc:	eeb0 bac7 	vabs.f32	s22, s14
 800a4d0:	dd04      	ble.n	800a4dc <iNemo_quat2heading+0x10c>
 800a4d2:	eef4 aacb 	vcmpe.f32	s21, s22
 800a4d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4da:	dca3      	bgt.n	800a424 <iNemo_quat2heading+0x54>
 800a4dc:	eeb4 9acb 	vcmpe.f32	s18, s22
 800a4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4e4:	f300 8086 	bgt.w	800a5f4 <iNemo_quat2heading+0x224>
 800a4e8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800a4ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4f0:	ee1b 0a10 	vmov	r0, s22
 800a4f4:	d450      	bmi.n	800a598 <iNemo_quat2heading+0x1c8>
 800a4f6:	f7f5 ffcb 	bl	8000490 <__aeabi_f2d>
 800a4fa:	4680      	mov	r8, r0
 800a4fc:	ee19 0a10 	vmov	r0, s18
 800a500:	4689      	mov	r9, r1
 800a502:	f7f5 ffc5 	bl	8000490 <__aeabi_f2d>
 800a506:	a36e      	add	r3, pc, #440	; (adr r3, 800a6c0 <iNemo_quat2heading+0x2f0>)
 800a508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a50c:	f7f6 f818 	bl	8000540 <__aeabi_dmul>
 800a510:	4602      	mov	r2, r0
 800a512:	460b      	mov	r3, r1
 800a514:	4640      	mov	r0, r8
 800a516:	4649      	mov	r1, r9
 800a518:	f7f6 faa2 	bl	8000a60 <__aeabi_dcmpgt>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	d0af      	beq.n	800a480 <iNemo_quat2heading+0xb0>
 800a520:	ee1a 0a90 	vmov	r0, s21
 800a524:	f7f5 ffb4 	bl	8000490 <__aeabi_f2d>
 800a528:	a365      	add	r3, pc, #404	; (adr r3, 800a6c0 <iNemo_quat2heading+0x2f0>)
 800a52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52e:	f7f6 f807 	bl	8000540 <__aeabi_dmul>
 800a532:	4602      	mov	r2, r0
 800a534:	460b      	mov	r3, r1
 800a536:	4640      	mov	r0, r8
 800a538:	4649      	mov	r1, r9
 800a53a:	f7f6 fa91 	bl	8000a60 <__aeabi_dcmpgt>
 800a53e:	2800      	cmp	r0, #0
 800a540:	d09e      	beq.n	800a480 <iNemo_quat2heading+0xb0>
 800a542:	2302      	movs	r3, #2
 800a544:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 800a548:	ed96 0a00 	vldr	s0, [r6]
 800a54c:	eddf 7a61 	vldr	s15, [pc, #388]	; 800a6d4 <iNemo_quat2heading+0x304>
 800a550:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a554:	eddf 7a60 	vldr	s15, [pc, #384]	; 800a6d8 <iNemo_quat2heading+0x308>
 800a558:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800a55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a560:	bfa8      	it	ge
 800a562:	ee30 0a67 	vsubge.f32	s0, s0, s15
 800a566:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a56e:	d503      	bpl.n	800a578 <iNemo_quat2heading+0x1a8>
 800a570:	eddf 7a59 	vldr	s15, [pc, #356]	; 800a6d8 <iNemo_quat2heading+0x308>
 800a574:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a578:	ecbd 8b08 	vpop	{d8-d11}
 800a57c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a580:	eeb4 9acb 	vcmpe.f32	s18, s22
 800a584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a588:	dc34      	bgt.n	800a5f4 <iNemo_quat2heading+0x224>
 800a58a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800a58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a592:	ee1b 0a10 	vmov	r0, s22
 800a596:	ddae      	ble.n	800a4f6 <iNemo_quat2heading+0x126>
 800a598:	f7f5 ff7a 	bl	8000490 <__aeabi_f2d>
 800a59c:	4680      	mov	r8, r0
 800a59e:	ee19 0a10 	vmov	r0, s18
 800a5a2:	4689      	mov	r9, r1
 800a5a4:	f7f5 ff74 	bl	8000490 <__aeabi_f2d>
 800a5a8:	a345      	add	r3, pc, #276	; (adr r3, 800a6c0 <iNemo_quat2heading+0x2f0>)
 800a5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5ae:	f7f5 ffc7 	bl	8000540 <__aeabi_dmul>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	460b      	mov	r3, r1
 800a5b6:	4640      	mov	r0, r8
 800a5b8:	4649      	mov	r1, r9
 800a5ba:	f7f6 fa51 	bl	8000a60 <__aeabi_dcmpgt>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	f43f af5e 	beq.w	800a480 <iNemo_quat2heading+0xb0>
 800a5c4:	ee1a 0a90 	vmov	r0, s21
 800a5c8:	f7f5 ff62 	bl	8000490 <__aeabi_f2d>
 800a5cc:	a33c      	add	r3, pc, #240	; (adr r3, 800a6c0 <iNemo_quat2heading+0x2f0>)
 800a5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5d2:	f7f5 ffb5 	bl	8000540 <__aeabi_dmul>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	4640      	mov	r0, r8
 800a5dc:	4649      	mov	r1, r9
 800a5de:	f7f6 fa3f 	bl	8000a60 <__aeabi_dcmpgt>
 800a5e2:	2800      	cmp	r0, #0
 800a5e4:	f43f af4c 	beq.w	800a480 <iNemo_quat2heading+0xb0>
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 800a5ee:	ed96 0a00 	vldr	s0, [r6]
 800a5f2:	e7af      	b.n	800a554 <iNemo_quat2heading+0x184>
 800a5f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5fc:	ee19 0a10 	vmov	r0, s18
 800a600:	dd6e      	ble.n	800a6e0 <iNemo_quat2heading+0x310>
 800a602:	f7f5 ff45 	bl	8000490 <__aeabi_f2d>
 800a606:	4680      	mov	r8, r0
 800a608:	ee1a 0a90 	vmov	r0, s21
 800a60c:	4689      	mov	r9, r1
 800a60e:	f7f5 ff3f 	bl	8000490 <__aeabi_f2d>
 800a612:	a32b      	add	r3, pc, #172	; (adr r3, 800a6c0 <iNemo_quat2heading+0x2f0>)
 800a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a618:	f7f5 ff92 	bl	8000540 <__aeabi_dmul>
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	4640      	mov	r0, r8
 800a622:	4649      	mov	r1, r9
 800a624:	f7f6 fa1c 	bl	8000a60 <__aeabi_dcmpgt>
 800a628:	2800      	cmp	r0, #0
 800a62a:	f43f af29 	beq.w	800a480 <iNemo_quat2heading+0xb0>
 800a62e:	ee1b 0a10 	vmov	r0, s22
 800a632:	f7f5 ff2d 	bl	8000490 <__aeabi_f2d>
 800a636:	a322      	add	r3, pc, #136	; (adr r3, 800a6c0 <iNemo_quat2heading+0x2f0>)
 800a638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63c:	f7f5 ff80 	bl	8000540 <__aeabi_dmul>
 800a640:	4602      	mov	r2, r0
 800a642:	460b      	mov	r3, r1
 800a644:	4640      	mov	r0, r8
 800a646:	4649      	mov	r1, r9
 800a648:	f7f6 fa0a 	bl	8000a60 <__aeabi_dcmpgt>
 800a64c:	2800      	cmp	r0, #0
 800a64e:	f43f af17 	beq.w	800a480 <iNemo_quat2heading+0xb0>
 800a652:	2301      	movs	r3, #1
 800a654:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 800a658:	ee68 7a08 	vmul.f32	s15, s16, s16
 800a65c:	ee28 8a28 	vmul.f32	s16, s16, s17
 800a660:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800a664:	eeaa 8a29 	vfma.f32	s16, s20, s19
 800a668:	eeea 7a4a 	vfms.f32	s15, s20, s20
 800a66c:	eee8 7ae8 	vfms.f32	s15, s17, s17
 800a670:	ee17 0a90 	vmov	r0, s15
 800a674:	f7f5 ff0c 	bl	8000490 <__aeabi_f2d>
 800a678:	ee78 7a08 	vadd.f32	s15, s16, s16
 800a67c:	4602      	mov	r2, r0
 800a67e:	460b      	mov	r3, r1
 800a680:	ee17 0a90 	vmov	r0, s15
 800a684:	ec43 2b18 	vmov	d8, r2, r3
 800a688:	f7f5 ff02 	bl	8000490 <__aeabi_f2d>
 800a68c:	eeb0 1a48 	vmov.f32	s2, s16
 800a690:	eef0 1a68 	vmov.f32	s3, s17
 800a694:	ec41 0b10 	vmov	d0, r0, r1
 800a698:	f008 fc6c 	bl	8012f74 <atan2>
 800a69c:	a30a      	add	r3, pc, #40	; (adr r3, 800a6c8 <iNemo_quat2heading+0x2f8>)
 800a69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a2:	ec51 0b10 	vmov	r0, r1, d0
 800a6a6:	f7f5 ff4b 	bl	8000540 <__aeabi_dmul>
 800a6aa:	4b0c      	ldr	r3, [pc, #48]	; (800a6dc <iNemo_quat2heading+0x30c>)
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	f7f5 fd8f 	bl	80001d0 <__aeabi_dsub>
 800a6b2:	f7f6 fa3d 	bl	8000b30 <__aeabi_d2f>
 800a6b6:	ee00 0a10 	vmov	s0, r0
 800a6ba:	e74b      	b.n	800a554 <iNemo_quat2heading+0x184>
 800a6bc:	f3af 8000 	nop.w
 800a6c0:	e0000000 	.word	0xe0000000
 800a6c4:	3ff6b851 	.word	0x3ff6b851
 800a6c8:	20000000 	.word	0x20000000
 800a6cc:	404ca5dc 	.word	0x404ca5dc
 800a6d0:	20001690 	.word	0x20001690
 800a6d4:	43340000 	.word	0x43340000
 800a6d8:	43b40000 	.word	0x43b40000
 800a6dc:	40568000 	.word	0x40568000
 800a6e0:	f7f5 fed6 	bl	8000490 <__aeabi_f2d>
 800a6e4:	4680      	mov	r8, r0
 800a6e6:	ee1a 0a90 	vmov	r0, s21
 800a6ea:	4689      	mov	r9, r1
 800a6ec:	f7f5 fed0 	bl	8000490 <__aeabi_f2d>
 800a6f0:	a343      	add	r3, pc, #268	; (adr r3, 800a800 <iNemo_quat2heading+0x430>)
 800a6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f6:	f7f5 ff23 	bl	8000540 <__aeabi_dmul>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	4640      	mov	r0, r8
 800a700:	4649      	mov	r1, r9
 800a702:	f7f6 f9ad 	bl	8000a60 <__aeabi_dcmpgt>
 800a706:	2800      	cmp	r0, #0
 800a708:	f43f aeba 	beq.w	800a480 <iNemo_quat2heading+0xb0>
 800a70c:	ee1b 0a10 	vmov	r0, s22
 800a710:	f7f5 febe 	bl	8000490 <__aeabi_f2d>
 800a714:	a33a      	add	r3, pc, #232	; (adr r3, 800a800 <iNemo_quat2heading+0x430>)
 800a716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71a:	f7f5 ff11 	bl	8000540 <__aeabi_dmul>
 800a71e:	4602      	mov	r2, r0
 800a720:	460b      	mov	r3, r1
 800a722:	4640      	mov	r0, r8
 800a724:	4649      	mov	r1, r9
 800a726:	f7f6 f99b 	bl	8000a60 <__aeabi_dcmpgt>
 800a72a:	2800      	cmp	r0, #0
 800a72c:	f43f aea8 	beq.w	800a480 <iNemo_quat2heading+0xb0>
 800a730:	2303      	movs	r3, #3
 800a732:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 800a736:	ee68 7a08 	vmul.f32	s15, s16, s16
 800a73a:	ee28 8a28 	vmul.f32	s16, s16, s17
 800a73e:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800a742:	eeaa 8a29 	vfma.f32	s16, s20, s19
 800a746:	eeea 7a4a 	vfms.f32	s15, s20, s20
 800a74a:	eee8 7ae8 	vfms.f32	s15, s17, s17
 800a74e:	ee17 0a90 	vmov	r0, s15
 800a752:	f7f5 fe9d 	bl	8000490 <__aeabi_f2d>
 800a756:	ee78 7a08 	vadd.f32	s15, s16, s16
 800a75a:	4602      	mov	r2, r0
 800a75c:	460b      	mov	r3, r1
 800a75e:	ee17 0a90 	vmov	r0, s15
 800a762:	ec43 2b18 	vmov	d8, r2, r3
 800a766:	f7f5 fe93 	bl	8000490 <__aeabi_f2d>
 800a76a:	eeb0 1a48 	vmov.f32	s2, s16
 800a76e:	eef0 1a68 	vmov.f32	s3, s17
 800a772:	ec41 0b10 	vmov	d0, r0, r1
 800a776:	f008 fbfd 	bl	8012f74 <atan2>
 800a77a:	a325      	add	r3, pc, #148	; (adr r3, 800a810 <iNemo_quat2heading+0x440>)
 800a77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a780:	ec51 0b10 	vmov	r0, r1, d0
 800a784:	f7f5 fedc 	bl	8000540 <__aeabi_dmul>
 800a788:	4b1f      	ldr	r3, [pc, #124]	; (800a808 <iNemo_quat2heading+0x438>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	f7f5 fd22 	bl	80001d4 <__adddf3>
 800a790:	f7f6 f9ce 	bl	8000b30 <__aeabi_d2f>
 800a794:	ee00 0a10 	vmov	s0, r0
 800a798:	e6dc      	b.n	800a554 <iNemo_quat2heading+0x184>
 800a79a:	f7f5 fe79 	bl	8000490 <__aeabi_f2d>
 800a79e:	4680      	mov	r8, r0
 800a7a0:	ee19 0a10 	vmov	r0, s18
 800a7a4:	4689      	mov	r9, r1
 800a7a6:	f7f5 fe73 	bl	8000490 <__aeabi_f2d>
 800a7aa:	a315      	add	r3, pc, #84	; (adr r3, 800a800 <iNemo_quat2heading+0x430>)
 800a7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b0:	f7f5 fec6 	bl	8000540 <__aeabi_dmul>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	460b      	mov	r3, r1
 800a7b8:	4640      	mov	r0, r8
 800a7ba:	4649      	mov	r1, r9
 800a7bc:	f7f6 f950 	bl	8000a60 <__aeabi_dcmpgt>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	f43f ae5d 	beq.w	800a480 <iNemo_quat2heading+0xb0>
 800a7c6:	ee1b 0a10 	vmov	r0, s22
 800a7ca:	f7f5 fe61 	bl	8000490 <__aeabi_f2d>
 800a7ce:	a30c      	add	r3, pc, #48	; (adr r3, 800a800 <iNemo_quat2heading+0x430>)
 800a7d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d4:	f7f5 feb4 	bl	8000540 <__aeabi_dmul>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	460b      	mov	r3, r1
 800a7dc:	4640      	mov	r0, r8
 800a7de:	4649      	mov	r1, r9
 800a7e0:	f7f6 f93e 	bl	8000a60 <__aeabi_dcmpgt>
 800a7e4:	2800      	cmp	r0, #0
 800a7e6:	f43f ae4b 	beq.w	800a480 <iNemo_quat2heading+0xb0>
 800a7ea:	2305      	movs	r3, #5
 800a7ec:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 800a7f0:	e6fd      	b.n	800a5ee <iNemo_quat2heading+0x21e>
 800a7f2:	2304      	movs	r3, #4
 800a7f4:	f8c5 3198 	str.w	r3, [r5, #408]	; 0x198
 800a7f8:	e6a6      	b.n	800a548 <iNemo_quat2heading+0x178>
 800a7fa:	ed9f 0a04 	vldr	s0, [pc, #16]	; 800a80c <iNemo_quat2heading+0x43c>
 800a7fe:	e6bb      	b.n	800a578 <iNemo_quat2heading+0x1a8>
 800a800:	e0000000 	.word	0xe0000000
 800a804:	3ff6b851 	.word	0x3ff6b851
 800a808:	40568000 	.word	0x40568000
 800a80c:	00000000 	.word	0x00000000
 800a810:	20000000 	.word	0x20000000
 800a814:	404ca5dc 	.word	0x404ca5dc

0800a818 <m_kalman_3gyro.isra.0.constprop.0>:
 800a818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a81c:	4cd4      	ldr	r4, [pc, #848]	; (800ab70 <m_kalman_3gyro.isra.0.constprop.0+0x358>)
 800a81e:	ed2d 8b10 	vpush	{d8-d15}
 800a822:	468e      	mov	lr, r1
 800a824:	4691      	mov	r9, r2
 800a826:	4680      	mov	r8, r0
 800a828:	469a      	mov	sl, r3
 800a82a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a82c:	f2ad 6d24 	subw	sp, sp, #1572	; 0x624
 800a830:	aeb2      	add	r6, sp, #712	; 0x2c8
 800a832:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a836:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a838:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a83a:	f89d 5690 	ldrb.w	r5, [sp, #1680]	; 0x690
 800a83e:	9518      	str	r5, [sp, #96]	; 0x60
 800a840:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a842:	f89d 5694 	ldrb.w	r5, [sp, #1684]	; 0x694
 800a846:	9509      	str	r5, [sp, #36]	; 0x24
 800a848:	4625      	mov	r5, r4
 800a84a:	afbf      	add	r7, sp, #764	; 0x2fc
 800a84c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a850:	6033      	str	r3, [r6, #0]
 800a852:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a854:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800a856:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a858:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800a85a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a85c:	f104 0c38 	add.w	ip, r4, #56	; 0x38
 800a860:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800a862:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a866:	aecc      	add	r6, sp, #816	; 0x330
 800a868:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a86a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a86e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a870:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a874:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800a876:	682a      	ldr	r2, [r5, #0]
 800a878:	f8dc 3000 	ldr.w	r3, [ip]
 800a87c:	603a      	str	r2, [r7, #0]
 800a87e:	f104 076c 	add.w	r7, r4, #108	; 0x6c
 800a882:	6033      	str	r3, [r6, #0]
 800a884:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a886:	add9      	add	r5, sp, #868	; 0x364
 800a888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a88a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a88c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a88e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800a890:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
 800a894:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a896:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a898:	683f      	ldr	r7, [r7, #0]
 800a89a:	602f      	str	r7, [r5, #0]
 800a89c:	ad94      	add	r5, sp, #592	; 0x250
 800a89e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a8a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a8a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a8a4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a8a8:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
 800a8ac:	e885 0003 	stmia.w	r5, {r0, r1}
 800a8b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a8b2:	ad9e      	add	r5, sp, #632	; 0x278
 800a8b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a8b6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a8b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a8ba:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a8be:	f104 06f0 	add.w	r6, r4, #240	; 0xf0
 800a8c2:	e885 0003 	stmia.w	r5, {r0, r1}
 800a8c6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a8c8:	ada8      	add	r5, sp, #672	; 0x2a0
 800a8ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a8cc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a8ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a8d0:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a8d4:	f504 768c 	add.w	r6, r4, #280	; 0x118
 800a8d8:	e885 0003 	stmia.w	r5, {r0, r1}
 800a8dc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a8de:	ad59      	add	r5, sp, #356	; 0x164
 800a8e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a8e2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800a8e6:	f8dd 66c4 	ldr.w	r6, [sp, #1732]	; 0x6c4
 800a8ea:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 800a8ee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a8f2:	2500      	movs	r5, #0
 800a8f4:	7035      	strb	r5, [r6, #0]
 800a8f6:	f8dd 66c8 	ldr.w	r6, [sp, #1736]	; 0x6c8
 800a8fa:	7035      	strb	r5, [r6, #0]
 800a8fc:	f8dd 66cc 	ldr.w	r6, [sp, #1740]	; 0x6cc
 800a900:	f504 749a 	add.w	r4, r4, #308	; 0x134
 800a904:	7035      	strb	r5, [r6, #0]
 800a906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a908:	ed9e 8a01 	vldr	s16, [lr, #4]
 800a90c:	edde ba00 	vldr	s23, [lr]
 800a910:	ed9e ca02 	vldr	s24, [lr, #8]
 800a914:	ed8d 1a11 	vstr	s2, [sp, #68]	; 0x44
 800a918:	ee68 7a08 	vmul.f32	s15, s16, s16
 800a91c:	ad60      	add	r5, sp, #384	; 0x180
 800a91e:	eeeb 7aab 	vfma.f32	s15, s23, s23
 800a922:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a924:	eeec 7a0c 	vfma.f32	s15, s24, s24
 800a928:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a92c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800a930:	ee17 0a90 	vmov	r0, s15
 800a934:	eeb0 aa61 	vmov.f32	s20, s3
 800a938:	ed8d 2a39 	vstr	s4, [sp, #228]	; 0xe4
 800a93c:	ed8d 8a2d 	vstr	s16, [sp, #180]	; 0xb4
 800a940:	ed8d 0a0d 	vstr	s0, [sp, #52]	; 0x34
 800a944:	edcd 0a0e 	vstr	s1, [sp, #56]	; 0x38
 800a948:	edcd ba2c 	vstr	s23, [sp, #176]	; 0xb0
 800a94c:	ed8d ca2e 	vstr	s24, [sp, #184]	; 0xb8
 800a950:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800a954:	f8cd a020 	str.w	sl, [sp, #32]
 800a958:	f7f5 fd9a 	bl	8000490 <__aeabi_f2d>
 800a95c:	ec41 0b10 	vmov	d0, r0, r1
 800a960:	f008 fb52 	bl	8013008 <sqrt>
 800a964:	ec51 0b10 	vmov	r0, r1, d0
 800a968:	f7f6 f8e2 	bl	8000b30 <__aeabi_d2f>
 800a96c:	ed99 9a01 	vldr	s18, [r9, #4]
 800a970:	edd9 9a00 	vldr	s19, [r9]
 800a974:	edd9 8a02 	vldr	s17, [r9, #8]
 800a978:	4b7e      	ldr	r3, [pc, #504]	; (800ab74 <m_kalman_3gyro.isra.0.constprop.0+0x35c>)
 800a97a:	ee69 7a09 	vmul.f32	s15, s18, s18
 800a97e:	f8c3 019c 	str.w	r0, [r3, #412]	; 0x19c
 800a982:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800a986:	4644      	mov	r4, r8
 800a988:	ee0c 0a90 	vmov	s25, r0
 800a98c:	eee8 7aa8 	vfma.f32	s15, s17, s17
 800a990:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 800a994:	ee17 0a90 	vmov	r0, s15
 800a998:	f7f5 fd7a 	bl	8000490 <__aeabi_f2d>
 800a99c:	ec41 0b10 	vmov	d0, r0, r1
 800a9a0:	f008 fb32 	bl	8013008 <sqrt>
 800a9a4:	ec51 0b10 	vmov	r0, r1, d0
 800a9a8:	f7f6 f8c2 	bl	8000b30 <__aeabi_d2f>
 800a9ac:	ee0a 0a90 	vmov	s21, r0
 800a9b0:	eecb da2c 	vdiv.f32	s27, s22, s25
 800a9b4:	e899 0007 	ldmia.w	r9, {r0, r1, r2}
 800a9b8:	ab56      	add	r3, sp, #344	; 0x158
 800a9ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a9be:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800a9c2:	f893 58cd 	ldrb.w	r5, [r3, #2253]	; 0x8cd
 800a9c6:	eecb 7a2a 	vdiv.f32	s15, s22, s21
 800a9ca:	ee2d ea88 	vmul.f32	s28, s27, s16
 800a9ce:	ee27 9a89 	vmul.f32	s18, s15, s18
 800a9d2:	eeb0 7a48 	vmov.f32	s14, s16
 800a9d6:	ee67 9aa9 	vmul.f32	s19, s15, s19
 800a9da:	ee2b 8aad 	vmul.f32	s16, s23, s27
 800a9de:	ee2e da09 	vmul.f32	s26, s28, s18
 800a9e2:	ee6d da8c 	vmul.f32	s27, s27, s24
 800a9e6:	eea8 da29 	vfma.f32	s26, s16, s19
 800a9ea:	ee67 8aa8 	vmul.f32	s17, s15, s17
 800a9ee:	ed8d 8a3d 	vstr	s16, [sp, #244]	; 0xf4
 800a9f2:	eea8 daad 	vfma.f32	s26, s17, s27
 800a9f6:	ed8d ea3e 	vstr	s28, [sp, #248]	; 0xf8
 800a9fa:	edcd da3f 	vstr	s27, [sp, #252]	; 0xfc
 800a9fe:	edcd ba53 	vstr	s23, [sp, #332]	; 0x14c
 800aa02:	ed8d 7a54 	vstr	s14, [sp, #336]	; 0x150
 800aa06:	ed8d ca55 	vstr	s24, [sp, #340]	; 0x154
 800aa0a:	2d00      	cmp	r5, #0
 800aa0c:	f001 8116 	beq.w	800bc3c <m_kalman_3gyro.isra.0.constprop.0+0x1424>
 800aa10:	f50d 63d5 	add.w	r3, sp, #1704	; 0x6a8
 800aa14:	e9d3 0100 	ldrd	r0, r1, [r3]
 800aa18:	f7f6 f88a 	bl	8000b30 <__aeabi_d2f>
 800aa1c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800aa20:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800ab78 <m_kalman_3gyro.isra.0.constprop.0+0x360>
 800aa24:	f503 7817 	add.w	r8, r3, #604	; 0x25c
 800aa28:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 800aa2c:	9310      	str	r3, [sp, #64]	; 0x40
 800aa2e:	ab43      	add	r3, sp, #268	; 0x10c
 800aa30:	9307      	str	r3, [sp, #28]
 800aa32:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800aa36:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aa3a:	9321      	str	r3, [sp, #132]	; 0x84
 800aa3c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800aa40:	f503 6a81 	add.w	sl, r3, #1032	; 0x408
 800aa44:	f203 4b0c 	addw	fp, r3, #1036	; 0x40c
 800aa48:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 800aa4c:	933a      	str	r3, [sp, #232]	; 0xe8
 800aa4e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800aa52:	f203 4314 	addw	r3, r3, #1044	; 0x414
 800aa56:	9334      	str	r3, [sp, #208]	; 0xd0
 800aa58:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800aa5c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800aa60:	932b      	str	r3, [sp, #172]	; 0xac
 800aa62:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800aa66:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 800aa6a:	9335      	str	r3, [sp, #212]	; 0xd4
 800aa6c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800aa70:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800aa74:	9336      	str	r3, [sp, #216]	; 0xd8
 800aa76:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800aa7a:	f503 6385 	add.w	r3, r3, #1064	; 0x428
 800aa7e:	9337      	str	r3, [sp, #220]	; 0xdc
 800aa80:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800aa84:	f203 432c 	addw	r3, r3, #1068	; 0x42c
 800aa88:	9338      	str	r3, [sp, #224]	; 0xe0
 800aa8a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800aa8e:	f503 6386 	add.w	r3, r3, #1072	; 0x430
 800aa92:	931e      	str	r3, [sp, #120]	; 0x78
 800aa94:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800aa98:	f203 4334 	addw	r3, r3, #1076	; 0x434
 800aa9c:	931f      	str	r3, [sp, #124]	; 0x7c
 800aa9e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800aaa2:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800aaa6:	9330      	str	r3, [sp, #192]	; 0xc0
 800aaa8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800aaac:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 800aab0:	930f      	str	r3, [sp, #60]	; 0x3c
 800aab2:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800aab6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800aaba:	9312      	str	r3, [sp, #72]	; 0x48
 800aabc:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800aac0:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800aac4:	9320      	str	r3, [sp, #128]	; 0x80
 800aac6:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800aaca:	f503 6389 	add.w	r3, r3, #1096	; 0x448
 800aace:	ee0b 0a10 	vmov	s22, r0
 800aad2:	9319      	str	r3, [sp, #100]	; 0x64
 800aad4:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800aad8:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800aadc:	f203 434c 	addw	r3, r3, #1100	; 0x44c
 800aae0:	931a      	str	r3, [sp, #104]	; 0x68
 800aae2:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800aae6:	eddf 4a25 	vldr	s9, [pc, #148]	; 800ab7c <m_kalman_3gyro.isra.0.constprop.0+0x364>
 800aaea:	ed9f 5a25 	vldr	s10, [pc, #148]	; 800ab80 <m_kalman_3gyro.isra.0.constprop.0+0x368>
 800aaee:	eddf 5a25 	vldr	s11, [pc, #148]	; 800ab84 <m_kalman_3gyro.isra.0.constprop.0+0x36c>
 800aaf2:	ed9f 6a25 	vldr	s12, [pc, #148]	; 800ab88 <m_kalman_3gyro.isra.0.constprop.0+0x370>
 800aaf6:	f203 4384 	addw	r3, r3, #1156	; 0x484
 800aafa:	edd3 6a00 	vldr	s13, [r3]
 800aafe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab00:	ee66 6aa4 	vmul.f32	s13, s13, s9
 800ab04:	edd3 7a00 	vldr	s15, [r3]
 800ab08:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800ab0c:	eee7 6a85 	vfma.f32	s13, s15, s10
 800ab10:	f203 46cc 	addw	r6, r3, #1228	; 0x4cc
 800ab14:	f503 659e 	add.w	r5, r3, #1264	; 0x4f0
 800ab18:	ed96 4a00 	vldr	s8, [r6]
 800ab1c:	edd5 7a00 	vldr	s15, [r5]
 800ab20:	eee4 6a25 	vfma.f32	s13, s8, s11
 800ab24:	f50d 65d5 	add.w	r5, sp, #1704	; 0x6a8
 800ab28:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800ab2c:	ed95 3b00 	vldr	d3, [r5]
 800ab30:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800ab34:	eee7 6a86 	vfma.f32	s13, s15, s12
 800ab38:	f204 4764 	addw	r7, r4, #1124	; 0x464
 800ab3c:	f504 6691 	add.w	r6, r4, #1160	; 0x488
 800ab40:	ed84 3b0e 	vstr	d3, [r4, #56]	; 0x38
 800ab44:	f504 659a 	add.w	r5, r4, #1232	; 0x4d0
 800ab48:	f204 4cf4 	addw	ip, r4, #1268	; 0x4f4
 800ab4c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800ab4e:	9731      	str	r7, [sp, #196]	; 0xc4
 800ab50:	ed84 7a00 	vstr	s14, [r4]
 800ab54:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800ab58:	edc4 6af8 	vstr	s13, [r4, #992]	; 0x3e0
 800ab5c:	edd6 7a00 	vldr	s15, [r6]
 800ab60:	edd7 3a00 	vldr	s7, [r7]
 800ab64:	ed95 4a00 	vldr	s8, [r5]
 800ab68:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800ab6c:	e00e      	b.n	800ab8c <m_kalman_3gyro.isra.0.constprop.0+0x374>
 800ab6e:	bf00      	nop
 800ab70:	08014cc8 	.word	0x08014cc8
 800ab74:	20001690 	.word	0x20001690
 800ab78:	3ca3d70a 	.word	0x3ca3d70a
 800ab7c:	bdcccccd 	.word	0xbdcccccd
 800ab80:	be4ccccd 	.word	0xbe4ccccd
 800ab84:	3dcccccd 	.word	0x3dcccccd
 800ab88:	3e4ccccd 	.word	0x3e4ccccd
 800ab8c:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 800ab90:	ed9c 7a00 	vldr	s14, [ip]
 800ab94:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800ab98:	f204 478c 	addw	r7, r4, #1164	; 0x48c
 800ab9c:	eee3 7a85 	vfma.f32	s15, s7, s10
 800aba0:	f504 648d 	add.w	r4, r4, #1128	; 0x468
 800aba4:	941b      	str	r4, [sp, #108]	; 0x6c
 800aba6:	f505 649f 	add.w	r4, r5, #1272	; 0x4f8
 800abaa:	eee4 7a25 	vfma.f32	s15, s8, s11
 800abae:	f205 46d4 	addw	r6, r5, #1236	; 0x4d4
 800abb2:	9400      	str	r4, [sp, #0]
 800abb4:	f505 6492 	add.w	r4, r5, #1168	; 0x490
 800abb8:	f205 456c 	addw	r5, r5, #1132	; 0x46c
 800abbc:	951c      	str	r5, [sp, #112]	; 0x70
 800abbe:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 800abc2:	eee7 7a06 	vfma.f32	s15, s14, s12
 800abc6:	f205 4efc 	addw	lr, r5, #1276	; 0x4fc
 800abca:	f505 6c9b 	add.w	ip, r5, #1240	; 0x4d8
 800abce:	f205 4994 	addw	r9, r5, #1172	; 0x494
 800abd2:	f505 658e 	add.w	r5, r5, #1136	; 0x470
 800abd6:	951d      	str	r5, [sp, #116]	; 0x74
 800abd8:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 800abdc:	edc5 7af9 	vstr	s15, [r5, #996]	; 0x3e4
 800abe0:	ed97 7a00 	vldr	s14, [r7]
 800abe4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800abe6:	ed96 4a00 	vldr	s8, [r6]
 800abea:	edd7 3a00 	vldr	s7, [r7]
 800abee:	9f07      	ldr	r7, [sp, #28]
 800abf0:	ee27 7a24 	vmul.f32	s14, s14, s9
 800abf4:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 800abf8:	eea3 7a85 	vfma.f32	s14, s7, s10
 800abfc:	f505 6293 	add.w	r2, r5, #1176	; 0x498
 800ac00:	f205 46dc 	addw	r6, r5, #1244	; 0x4dc
 800ac04:	f505 63a0 	add.w	r3, r5, #1280	; 0x500
 800ac08:	eea4 7a25 	vfma.f32	s14, s8, s11
 800ac0c:	9d00      	ldr	r5, [sp, #0]
 800ac0e:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800ac12:	ed95 4a00 	vldr	s8, [r5]
 800ac16:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 800ac1a:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800ac1e:	eea4 7a06 	vfma.f32	s14, s8, s12
 800ac22:	f201 4774 	addw	r7, r1, #1140	; 0x474
 800ac26:	9732      	str	r7, [sp, #200]	; 0xc8
 800ac28:	f501 619c 	add.w	r1, r1, #1248	; 0x4e0
 800ac2c:	ed85 7afa 	vstr	s14, [r5, #1000]	; 0x3e8
 800ac30:	ed94 4a00 	vldr	s8, [r4]
 800ac34:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800ac38:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800ac3a:	f204 449c 	addw	r4, r4, #1180	; 0x49c
 800ac3e:	9423      	str	r4, [sp, #140]	; 0x8c
 800ac40:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800ac44:	edd5 3a00 	vldr	s7, [r5]
 800ac48:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 800ac4c:	ee24 4a24 	vmul.f32	s8, s8, s9
 800ac50:	f504 648f 	add.w	r4, r4, #1144	; 0x478
 800ac54:	9413      	str	r4, [sp, #76]	; 0x4c
 800ac56:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800ac5a:	eea3 4a85 	vfma.f32	s8, s7, s10
 800ac5e:	f204 44e4 	addw	r4, r4, #1252	; 0x4e4
 800ac62:	9426      	str	r4, [sp, #152]	; 0x98
 800ac64:	eddc 3a00 	vldr	s7, [ip]
 800ac68:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800ac6c:	f505 6ca1 	add.w	ip, r5, #1288	; 0x508
 800ac70:	eea3 4aa5 	vfma.f32	s8, s7, s11
 800ac74:	f8cd c0a4 	str.w	ip, [sp, #164]	; 0xa4
 800ac78:	f504 6c94 	add.w	ip, r4, #1184	; 0x4a0
 800ac7c:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800ac80:	edde 3a00 	vldr	s7, [lr]
 800ac84:	f8cd c090 	str.w	ip, [sp, #144]	; 0x90
 800ac88:	f204 4c7c 	addw	ip, r4, #1148	; 0x47c
 800ac8c:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
 800ac90:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 800ac94:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800ac98:	eea3 4a86 	vfma.f32	s8, s7, s12
 800ac9c:	f505 6c9d 	add.w	ip, r5, #1256	; 0x4e8
 800aca0:	f8cd c09c 	str.w	ip, [sp, #156]	; 0x9c
 800aca4:	f204 5c0c 	addw	ip, r4, #1292	; 0x50c
 800aca8:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800acac:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800acae:	ed84 4afb 	vstr	s8, [r4, #1004]	; 0x3ec
 800acb2:	ed99 4a00 	vldr	s8, [r9]
 800acb6:	edd5 3a00 	vldr	s7, [r5]
 800acba:	f8cd c0a8 	str.w	ip, [sp, #168]	; 0xa8
 800acbe:	ee24 4a24 	vmul.f32	s8, s8, s9
 800acc2:	f200 5004 	addw	r0, r0, #1284	; 0x504
 800acc6:	eea3 4a85 	vfma.f32	s8, s7, s10
 800acca:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 800acce:	edd6 3a00 	vldr	s7, [r6]
 800acd2:	f8dd 66d0 	ldr.w	r6, [sp, #1744]	; 0x6d0
 800acd6:	eea3 4aa5 	vfma.f32	s8, s7, s11
 800acda:	f204 4ca4 	addw	ip, r4, #1188	; 0x4a4
 800acde:	f8cd c094 	str.w	ip, [sp, #148]	; 0x94
 800ace2:	edd3 3a00 	vldr	s7, [r3]
 800ace6:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800acea:	eea3 4a86 	vfma.f32	s8, s7, s12
 800acee:	f504 6c90 	add.w	ip, r4, #1152	; 0x480
 800acf2:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800acf6:	f8cd c054 	str.w	ip, [sp, #84]	; 0x54
 800acfa:	ed83 4afc 	vstr	s8, [r3, #1008]	; 0x3f0
 800acfe:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800ad02:	edd2 7a00 	vldr	s15, [r2]
 800ad06:	ed97 4a00 	vldr	s8, [r7]
 800ad0a:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800ad0e:	eee6 3aa6 	vfma.f32	s7, s13, s13
 800ad12:	f205 4cec 	addw	ip, r5, #1260	; 0x4ec
 800ad16:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
 800ad1a:	eee4 7a05 	vfma.f32	s15, s8, s10
 800ad1e:	46a4      	mov	ip, r4
 800ad20:	f50c 7c0e 	add.w	ip, ip, #568	; 0x238
 800ad24:	eef0 6a63 	vmov.f32	s13, s7
 800ad28:	edd1 3a00 	vldr	s7, [r1]
 800ad2c:	ed90 4a00 	vldr	s8, [r0]
 800ad30:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 800ad34:	eee3 7aa5 	vfma.f32	s15, s7, s11
 800ad38:	469c      	mov	ip, r3
 800ad3a:	f503 7705 	add.w	r7, r3, #532	; 0x214
 800ad3e:	eee7 6a07 	vfma.f32	s13, s14, s14
 800ad42:	f506 66a2 	add.w	r6, r6, #1296	; 0x510
 800ad46:	963b      	str	r6, [sp, #236]	; 0xec
 800ad48:	eee4 7a06 	vfma.f32	s15, s8, s12
 800ad4c:	9733      	str	r7, [sp, #204]	; 0xcc
 800ad4e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800ad52:	ee16 0a90 	vmov	r0, s13
 800ad56:	edc3 7afd 	vstr	s15, [r3, #1012]	; 0x3f4
 800ad5a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ad5c:	edd3 7a00 	vldr	s15, [r3]
 800ad60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad62:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800ad66:	ed93 4a00 	vldr	s8, [r3]
 800ad6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ad6c:	eee4 7a05 	vfma.f32	s15, s8, s10
 800ad70:	edd3 6a00 	vldr	s13, [r3]
 800ad74:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 800ad76:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800ad78:	ed95 7a00 	vldr	s14, [r5]
 800ad7c:	9d27      	ldr	r5, [sp, #156]	; 0x9c
 800ad7e:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800ad82:	ee2e ca68 	vnmul.f32	s24, s28, s17
 800ad86:	eee7 7a06 	vfma.f32	s15, s14, s12
 800ad8a:	eea9 ca2d 	vfma.f32	s24, s18, s27
 800ad8e:	edcc 7afe 	vstr	s15, [ip, #1016]	; 0x3f8
 800ad92:	edd3 7a00 	vldr	s15, [r3]
 800ad96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ad98:	edd5 6a00 	vldr	s13, [r5]
 800ad9c:	ed93 4a00 	vldr	s8, [r3]
 800ada0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 800ada2:	9d25      	ldr	r5, [sp, #148]	; 0x94
 800ada4:	ed93 7a00 	vldr	s14, [r3]
 800ada8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adaa:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800adae:	eee4 7a05 	vfma.f32	s15, s8, s10
 800adb2:	eee6 7aa5 	vfma.f32	s15, s13, s11
 800adb6:	eee7 7a06 	vfma.f32	s15, s14, s12
 800adba:	edcc 7aff 	vstr	s15, [ip, #1020]	; 0x3fc
 800adbe:	edd5 ba00 	vldr	s23, [r5]
 800adc2:	edd3 6a00 	vldr	s13, [r3]
 800adc6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
 800adc8:	edd6 7a00 	vldr	s15, [r6]
 800adcc:	ed95 7a00 	vldr	s14, [r5]
 800add0:	ee6b baa4 	vmul.f32	s23, s23, s9
 800add4:	eee6 ba85 	vfma.f32	s23, s13, s10
 800add8:	eee7 ba25 	vfma.f32	s23, s14, s11
 800addc:	eee7 ba86 	vfma.f32	s23, s15, s12
 800ade0:	edc4 ba00 	vstr	s23, [r4]
 800ade4:	f7f5 fb54 	bl	8000490 <__aeabi_f2d>
 800ade8:	ec41 0b10 	vmov	d0, r0, r1
 800adec:	f008 f90c 	bl	8013008 <sqrt>
 800adf0:	ec51 0b10 	vmov	r0, r1, d0
 800adf4:	f7f5 fe9c 	bl	8000b30 <__aeabi_d2f>
 800adf8:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800adfc:	4cb4      	ldr	r4, [pc, #720]	; (800b0d0 <m_kalman_3gyro.isra.0.constprop.0+0x8b8>)
 800adfe:	edd2 7afc 	vldr	s15, [r2, #1008]	; 0x3f0
 800ae02:	edd2 6afb 	vldr	s13, [r2, #1004]	; 0x3ec
 800ae06:	ed92 7afd 	vldr	s14, [r2, #1012]	; 0x3f4
 800ae0a:	900c      	str	r0, [sp, #48]	; 0x30
 800ae0c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ae10:	ee0e 0a90 	vmov	s29, r0
 800ae14:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800ae18:	f8c4 01a0 	str.w	r0, [r4, #416]	; 0x1a0
 800ae1c:	eee7 7a07 	vfma.f32	s15, s14, s14
 800ae20:	ee17 0a90 	vmov	r0, s15
 800ae24:	f7f5 fb34 	bl	8000490 <__aeabi_f2d>
 800ae28:	ec41 0b10 	vmov	d0, r0, r1
 800ae2c:	f008 f8ec 	bl	8013008 <sqrt>
 800ae30:	ec51 0b10 	vmov	r0, r1, d0
 800ae34:	f7f5 fe7c 	bl	8000b30 <__aeabi_d2f>
 800ae38:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800ae3c:	f8c4 01a4 	str.w	r0, [r4, #420]	; 0x1a4
 800ae40:	edd2 7aff 	vldr	s15, [r2, #1020]	; 0x3fc
 800ae44:	ed92 7afe 	vldr	s14, [r2, #1016]	; 0x3f8
 800ae48:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ae4c:	ee0f 0a90 	vmov	s31, r0
 800ae50:	eee7 7a07 	vfma.f32	s15, s14, s14
 800ae54:	eeeb 7aab 	vfma.f32	s15, s23, s23
 800ae58:	ee6d bae9 	vnmul.f32	s23, s27, s19
 800ae5c:	ee17 0a90 	vmov	r0, s15
 800ae60:	f7f5 fb16 	bl	8000490 <__aeabi_f2d>
 800ae64:	ec41 0b10 	vmov	d0, r0, r1
 800ae68:	f008 f8ce 	bl	8013008 <sqrt>
 800ae6c:	eee8 ba88 	vfma.f32	s23, s17, s16
 800ae70:	ec51 0b10 	vmov	r0, r1, d0
 800ae74:	f7f5 fe5c 	bl	8000b30 <__aeabi_d2f>
 800ae78:	ee29 8a48 	vnmul.f32	s16, s18, s16
 800ae7c:	ee6b 7aab 	vmul.f32	s15, s23, s23
 800ae80:	eeae 8a29 	vfma.f32	s16, s28, s19
 800ae84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ae86:	9017      	str	r0, [sp, #92]	; 0x5c
 800ae88:	eeec 7a0c 	vfma.f32	s15, s24, s24
 800ae8c:	ee07 0a10 	vmov	s14, r0
 800ae90:	eee8 7a08 	vfma.f32	s15, s16, s16
 800ae94:	edc2 ea00 	vstr	s29, [r2]
 800ae98:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800ae9c:	edca fa00 	vstr	s31, [sl]
 800aea0:	ee17 0a90 	vmov	r0, s15
 800aea4:	ed8b 7a00 	vstr	s14, [fp]
 800aea8:	ed84 7a6a 	vstr	s14, [r4, #424]	; 0x1a8
 800aeac:	edc2 9a90 	vstr	s19, [r2, #576]	; 0x240
 800aeb0:	ed82 9a93 	vstr	s18, [r2, #588]	; 0x24c
 800aeb4:	edc2 8a96 	vstr	s17, [r2, #600]	; 0x258
 800aeb8:	f7f5 faea 	bl	8000490 <__aeabi_f2d>
 800aebc:	ec41 0b10 	vmov	d0, r0, r1
 800aec0:	f008 f8a2 	bl	8013008 <sqrt>
 800aec4:	ec51 0b10 	vmov	r0, r1, d0
 800aec8:	f7f5 fe32 	bl	8000b30 <__aeabi_d2f>
 800aecc:	ee07 0a90 	vmov	s15, r0
 800aed0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aed4:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800aed8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800aedc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800aede:	aa79      	add	r2, sp, #484	; 0x1e4
 800aee0:	4638      	mov	r0, r7
 800aee2:	ee2c ca27 	vmul.f32	s24, s24, s15
 800aee6:	ee6b baa7 	vmul.f32	s23, s23, s15
 800aeea:	ee28 8a27 	vmul.f32	s16, s16, s15
 800aeee:	ee6c ea68 	vnmul.f32	s29, s24, s17
 800aef2:	ee28 fa49 	vnmul.f32	s30, s16, s18
 800aef6:	ee2b eae9 	vnmul.f32	s28, s23, s19
 800aefa:	eea8 faab 	vfma.f32	s30, s17, s23
 800aefe:	eee9 ea88 	vfma.f32	s29, s19, s16
 800af02:	eea9 ea0c 	vfma.f32	s28, s18, s24
 800af06:	ed83 ca8f 	vstr	s24, [r3, #572]	; 0x23c
 800af0a:	edc3 ba92 	vstr	s23, [r3, #584]	; 0x248
 800af0e:	ed83 8a95 	vstr	s16, [r3, #596]	; 0x254
 800af12:	ed83 fa8e 	vstr	s30, [r3, #568]	; 0x238
 800af16:	edc3 ea91 	vstr	s29, [r3, #580]	; 0x244
 800af1a:	ed83 ea94 	vstr	s28, [r3, #592]	; 0x250
 800af1e:	f7fd f9d9 	bl	80082d4 <m_mldivide>
 800af22:	a879      	add	r0, sp, #484	; 0x1e4
 800af24:	a947      	add	r1, sp, #284	; 0x11c
 800af26:	f7fd ffe9 	bl	8008efc <m_dcm2q_eml>
 800af2a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800af2e:	f5a3 70ae 	sub.w	r0, r3, #348	; 0x15c
 800af32:	f8d3 23ac 	ldr.w	r2, [r3, #940]	; 0x3ac
 800af36:	f8d3 13b0 	ldr.w	r1, [r3, #944]	; 0x3b0
 800af3a:	f8c3 23b8 	str.w	r2, [r3, #952]	; 0x3b8
 800af3e:	f8d3 23b4 	ldr.w	r2, [r3, #948]	; 0x3b4
 800af42:	f8c3 13bc 	str.w	r1, [r3, #956]	; 0x3bc
 800af46:	f8c3 23c0 	str.w	r2, [r3, #960]	; 0x3c0
 800af4a:	3b0c      	subs	r3, #12
 800af4c:	4298      	cmp	r0, r3
 800af4e:	d1f0      	bne.n	800af32 <m_kalman_3gyro.isra.0.constprop.0+0x71a>
 800af50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800af54:	ee87 6a8a 	vdiv.f32	s12, s15, s20
 800af58:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800af5c:	f8cd 80bc 	str.w	r8, [sp, #188]	; 0xbc
 800af60:	ac40      	add	r4, sp, #256	; 0x100
 800af62:	f508 72ae 	add.w	r2, r8, #348	; 0x15c
 800af66:	4641      	mov	r1, r8
 800af68:	2000      	movs	r0, #0
 800af6a:	eddd 6a47 	vldr	s13, [sp, #284]	; 0x11c
 800af6e:	ed9d 7a48 	vldr	s14, [sp, #288]	; 0x120
 800af72:	eddd 7a49 	vldr	s15, [sp, #292]	; 0x124
 800af76:	eddf 5a57 	vldr	s11, [pc, #348]	; 800b0d4 <m_kalman_3gyro.isra.0.constprop.0+0x8bc>
 800af7a:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800af7e:	ee37 7a07 	vadd.f32	s14, s14, s14
 800af82:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800af86:	ee66 6a86 	vmul.f32	s13, s13, s12
 800af8a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800af8e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800af92:	ed9f 6a51 	vldr	s12, [pc, #324]	; 800b0d8 <m_kalman_3gyro.isra.0.constprop.0+0x8c0>
 800af96:	edc3 6a97 	vstr	s13, [r3, #604]	; 0x25c
 800af9a:	ed83 7a98 	vstr	s14, [r3, #608]	; 0x260
 800af9e:	edc3 7a99 	vstr	s15, [r3, #612]	; 0x264
 800afa2:	edd1 6a00 	vldr	s13, [r1]
 800afa6:	3001      	adds	r0, #1
 800afa8:	eef0 7a66 	vmov.f32	s15, s13
 800afac:	460b      	mov	r3, r1
 800afae:	330c      	adds	r3, #12
 800afb0:	ed93 7a00 	vldr	s14, [r3]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800afba:	d1f8      	bne.n	800afae <m_kalman_3gyro.isra.0.constprop.0+0x796>
 800afbc:	ee27 7aa5 	vmul.f32	s14, s15, s11
 800afc0:	460b      	mov	r3, r1
 800afc2:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800afc6:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800afca:	edd3 7a03 	vldr	s15, [r3, #12]
 800afce:	330c      	adds	r3, #12
 800afd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800afd4:	4293      	cmp	r3, r2
 800afd6:	eee7 6aa7 	vfma.f32	s13, s15, s15
 800afda:	d1f6      	bne.n	800afca <m_kalman_3gyro.isra.0.constprop.0+0x7b2>
 800afdc:	ee66 6a86 	vmul.f32	s13, s13, s12
 800afe0:	2803      	cmp	r0, #3
 800afe2:	f101 0104 	add.w	r1, r1, #4
 800afe6:	ece4 6a01 	vstmia	r4!, {s13}
 800afea:	f103 0204 	add.w	r2, r3, #4
 800afee:	d1d8      	bne.n	800afa2 <m_kalman_3gyro.isra.0.constprop.0+0x78a>
 800aff0:	9840      	ldr	r0, [sp, #256]	; 0x100
 800aff2:	f7f5 fa4d 	bl	8000490 <__aeabi_f2d>
 800aff6:	ec41 0b10 	vmov	d0, r0, r1
 800affa:	f008 f805 	bl	8013008 <sqrt>
 800affe:	ec51 0b10 	vmov	r0, r1, d0
 800b002:	f7f5 fd95 	bl	8000b30 <__aeabi_d2f>
 800b006:	ee0d 0a90 	vmov	s27, r0
 800b00a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b00c:	edcd da40 	vstr	s27, [sp, #256]	; 0x100
 800b010:	f7f5 fa3e 	bl	8000490 <__aeabi_f2d>
 800b014:	ec41 0b10 	vmov	d0, r0, r1
 800b018:	f007 fff6 	bl	8013008 <sqrt>
 800b01c:	ec51 0b10 	vmov	r0, r1, d0
 800b020:	f7f5 fd86 	bl	8000b30 <__aeabi_d2f>
 800b024:	ee0a 0a10 	vmov	s20, r0
 800b028:	9842      	ldr	r0, [sp, #264]	; 0x108
 800b02a:	ed8d aa41 	vstr	s20, [sp, #260]	; 0x104
 800b02e:	f7f5 fa2f 	bl	8000490 <__aeabi_f2d>
 800b032:	ec41 0b10 	vmov	d0, r0, r1
 800b036:	f007 ffe7 	bl	8013008 <sqrt>
 800b03a:	ee2a aa0a 	vmul.f32	s20, s20, s20
 800b03e:	ec51 0b10 	vmov	r0, r1, d0
 800b042:	f7f5 fd75 	bl	8000b30 <__aeabi_d2f>
 800b046:	eead aaad 	vfma.f32	s20, s27, s27
 800b04a:	9042      	str	r0, [sp, #264]	; 0x108
 800b04c:	f8cd 8010 	str.w	r8, [sp, #16]
 800b050:	ee07 0a90 	vmov	s15, r0
 800b054:	eea7 aaa7 	vfma.f32	s20, s15, s15
 800b058:	f20d 4adc 	addw	sl, sp, #1244	; 0x4dc
 800b05c:	f50d 7b66 	add.w	fp, sp, #920	; 0x398
 800b060:	ee1a 0a10 	vmov	r0, s20
 800b064:	f7f5 fa14 	bl	8000490 <__aeabi_f2d>
 800b068:	ec41 0b10 	vmov	d0, r0, r1
 800b06c:	f007 ffcc 	bl	8013008 <sqrt>
 800b070:	ec51 0b10 	vmov	r0, r1, d0
 800b074:	f7f5 fd5c 	bl	8000b30 <__aeabi_d2f>
 800b078:	4b15      	ldr	r3, [pc, #84]	; (800b0d0 <m_kalman_3gyro.isra.0.constprop.0+0x8b8>)
 800b07a:	ed93 aa27 	vldr	s20, [r3, #156]	; 0x9c
 800b07e:	edd3 da28 	vldr	s27, [r3, #160]	; 0xa0
 800b082:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b086:	f8c3 03c4 	str.w	r0, [r3, #964]	; 0x3c4
 800b08a:	f20d 3397 	addw	r3, sp, #919	; 0x397
 800b08e:	f1c3 0301 	rsb	r3, r3, #1
 800b092:	930b      	str	r3, [sp, #44]	; 0x2c
 800b094:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b098:	f503 7372 	add.w	r3, r3, #968	; 0x3c8
 800b09c:	9306      	str	r3, [sp, #24]
 800b09e:	2300      	movs	r3, #0
 800b0a0:	9305      	str	r3, [sp, #20]
 800b0a2:	9b05      	ldr	r3, [sp, #20]
 800b0a4:	9a04      	ldr	r2, [sp, #16]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	9305      	str	r3, [sp, #20]
 800b0aa:	4653      	mov	r3, sl
 800b0ac:	f852 1b0c 	ldr.w	r1, [r2], #12
 800b0b0:	f843 1b04 	str.w	r1, [r3], #4
 800b0b4:	f20d 5154 	addw	r1, sp, #1364	; 0x554
 800b0b8:	428b      	cmp	r3, r1
 800b0ba:	d1f7      	bne.n	800b0ac <m_kalman_3gyro.isra.0.constprop.0+0x894>
 800b0bc:	2101      	movs	r1, #1
 800b0be:	221e      	movs	r2, #30
 800b0c0:	a88b      	add	r0, sp, #556	; 0x22c
 800b0c2:	f007 fdbf 	bl	8012c44 <memset>
 800b0c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b0c8:	f20d 3397 	addw	r3, sp, #919	; 0x397
 800b0cc:	e00a      	b.n	800b0e4 <m_kalman_3gyro.isra.0.constprop.0+0x8cc>
 800b0ce:	bf00      	nop
 800b0d0:	20001690 	.word	0x20001690
 800b0d4:	3d088889 	.word	0x3d088889
 800b0d8:	3d0d3dcb 	.word	0x3d0d3dcb
 800b0dc:	3f333333 	.word	0x3f333333
 800b0e0:	3f4ccccd 	.word	0x3f4ccccd
 800b0e4:	18ca      	adds	r2, r1, r3
 800b0e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b0ea:	f20d 32b5 	addw	r2, sp, #949	; 0x3b5
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d1f8      	bne.n	800b0e4 <m_kalman_3gyro.isra.0.constprop.0+0x8cc>
 800b0f2:	ed9a 7a00 	vldr	s14, [sl]
 800b0f6:	edda 7a01 	vldr	s15, [sl, #4]
 800b0fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b0fe:	ed9a 7a02 	vldr	s14, [sl, #8]
 800b102:	edda 7a03 	vldr	s15, [sl, #12]
 800b106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b10a:	bf88      	it	hi
 800b10c:	f44f 7381 	movhi.w	r3, #258	; 0x102
 800b110:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b114:	ed9a 7a04 	vldr	s14, [sl, #16]
 800b118:	edda 7a05 	vldr	s15, [sl, #20]
 800b11c:	bf88      	it	hi
 800b11e:	f8ab 3000 	strhhi.w	r3, [fp]
 800b122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b126:	bf88      	it	hi
 800b128:	f44f 7341 	movhi.w	r3, #772	; 0x304
 800b12c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b130:	ed9a 7a06 	vldr	s14, [sl, #24]
 800b134:	edda 7a07 	vldr	s15, [sl, #28]
 800b138:	bf88      	it	hi
 800b13a:	f8ab 3002 	strhhi.w	r3, [fp, #2]
 800b13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b142:	bf88      	it	hi
 800b144:	f240 5306 	movwhi	r3, #1286	; 0x506
 800b148:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b14c:	ed9a 7a08 	vldr	s14, [sl, #32]
 800b150:	edda 7a09 	vldr	s15, [sl, #36]	; 0x24
 800b154:	bf88      	it	hi
 800b156:	f8ab 3004 	strhhi.w	r3, [fp, #4]
 800b15a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b15e:	bf88      	it	hi
 800b160:	f44f 63e1 	movhi.w	r3, #1800	; 0x708
 800b164:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b168:	ed9a 7a0a 	vldr	s14, [sl, #40]	; 0x28
 800b16c:	edda 7a0b 	vldr	s15, [sl, #44]	; 0x2c
 800b170:	bf88      	it	hi
 800b172:	f8ab 3006 	strhhi.w	r3, [fp, #6]
 800b176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b17a:	bf88      	it	hi
 800b17c:	f640 130a 	movwhi	r3, #2314	; 0x90a
 800b180:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b184:	ed9a 7a0c 	vldr	s14, [sl, #48]	; 0x30
 800b188:	edda 7a0d 	vldr	s15, [sl, #52]	; 0x34
 800b18c:	bf88      	it	hi
 800b18e:	f8ab 3008 	strhhi.w	r3, [fp, #8]
 800b192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b196:	bf88      	it	hi
 800b198:	f640 330c 	movwhi	r3, #2828	; 0xb0c
 800b19c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1a0:	ed9a 7a0e 	vldr	s14, [sl, #56]	; 0x38
 800b1a4:	edda 7a0f 	vldr	s15, [sl, #60]	; 0x3c
 800b1a8:	bf88      	it	hi
 800b1aa:	f8ab 300a 	strhhi.w	r3, [fp, #10]
 800b1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1b2:	bf88      	it	hi
 800b1b4:	f640 530e 	movwhi	r3, #3342	; 0xd0e
 800b1b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1bc:	ed9a 7a10 	vldr	s14, [sl, #64]	; 0x40
 800b1c0:	edda 7a11 	vldr	s15, [sl, #68]	; 0x44
 800b1c4:	bf88      	it	hi
 800b1c6:	f8ab 300c 	strhhi.w	r3, [fp, #12]
 800b1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ce:	bf88      	it	hi
 800b1d0:	f44f 6371 	movhi.w	r3, #3856	; 0xf10
 800b1d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1d8:	ed9a 7a12 	vldr	s14, [sl, #72]	; 0x48
 800b1dc:	edda 7a13 	vldr	s15, [sl, #76]	; 0x4c
 800b1e0:	bf88      	it	hi
 800b1e2:	f8ab 300e 	strhhi.w	r3, [fp, #14]
 800b1e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ea:	bf88      	it	hi
 800b1ec:	f241 1312 	movwhi	r3, #4370	; 0x1112
 800b1f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b1f4:	ed9a 7a14 	vldr	s14, [sl, #80]	; 0x50
 800b1f8:	edda 7a15 	vldr	s15, [sl, #84]	; 0x54
 800b1fc:	bf88      	it	hi
 800b1fe:	f8ab 3010 	strhhi.w	r3, [fp, #16]
 800b202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b206:	bf88      	it	hi
 800b208:	f241 3314 	movwhi	r3, #4884	; 0x1314
 800b20c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b210:	bf88      	it	hi
 800b212:	f8ab 3012 	strhhi.w	r3, [fp, #18]
 800b216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b21a:	bf84      	itt	hi
 800b21c:	f241 5316 	movwhi	r3, #5398	; 0x1516
 800b220:	f8ab 3014 	strhhi.w	r3, [fp, #20]
 800b224:	ed9a 7a16 	vldr	s14, [sl, #88]	; 0x58
 800b228:	edda 7a17 	vldr	s15, [sl, #92]	; 0x5c
 800b22c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b230:	ed9a 7a18 	vldr	s14, [sl, #96]	; 0x60
 800b234:	edda 7a19 	vldr	s15, [sl, #100]	; 0x64
 800b238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b23c:	bf88      	it	hi
 800b23e:	f241 7318 	movwhi	r3, #5912	; 0x1718
 800b242:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b246:	ed9a 7a1a 	vldr	s14, [sl, #104]	; 0x68
 800b24a:	edda 7a1b 	vldr	s15, [sl, #108]	; 0x6c
 800b24e:	bf88      	it	hi
 800b250:	f8ab 3016 	strhhi.w	r3, [fp, #22]
 800b254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b258:	bf88      	it	hi
 800b25a:	f641 131a 	movwhi	r3, #6426	; 0x191a
 800b25e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b262:	ed9a 7a1c 	vldr	s14, [sl, #112]	; 0x70
 800b266:	edda 7a1d 	vldr	s15, [sl, #116]	; 0x74
 800b26a:	bf88      	it	hi
 800b26c:	f8ab 3018 	strhhi.w	r3, [fp, #24]
 800b270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b274:	bf88      	it	hi
 800b276:	f641 331c 	movwhi	r3, #6940	; 0x1b1c
 800b27a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b27e:	bf88      	it	hi
 800b280:	f8ab 301a 	strhhi.w	r3, [fp, #26]
 800b284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b288:	bf84      	itt	hi
 800b28a:	f641 531e 	movwhi	r3, #7454	; 0x1d1e
 800b28e:	f8ab 301c 	strhhi.w	r3, [fp, #28]
 800b292:	2304      	movs	r3, #4
 800b294:	9303      	str	r3, [sp, #12]
 800b296:	2302      	movs	r3, #2
 800b298:	9301      	str	r3, [sp, #4]
 800b29a:	9a01      	ldr	r2, [sp, #4]
 800b29c:	9202      	str	r2, [sp, #8]
 800b29e:	4613      	mov	r3, r2
 800b2a0:	f102 0901 	add.w	r9, r2, #1
 800b2a4:	2b1e      	cmp	r3, #30
 800b2a6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b2aa:	9201      	str	r2, [sp, #4]
 800b2ac:	bf18      	it	ne
 800b2ae:	2701      	movne	r7, #1
 800b2b0:	d050      	beq.n	800b354 <m_kalman_3gyro.isra.0.constprop.0+0xb3c>
 800b2b2:	9b01      	ldr	r3, [sp, #4]
 800b2b4:	9700      	str	r7, [sp, #0]
 800b2b6:	443b      	add	r3, r7
 800b2b8:	2b1f      	cmp	r3, #31
 800b2ba:	bfa8      	it	ge
 800b2bc:	231f      	movge	r3, #31
 800b2be:	463a      	mov	r2, r7
 800b2c0:	eba3 0802 	sub.w	r8, r3, r2
 800b2c4:	f1b8 0f00 	cmp.w	r8, #0
 800b2c8:	461f      	mov	r7, r3
 800b2ca:	dd3d      	ble.n	800b348 <m_kalman_3gyro.isra.0.constprop.0+0xb30>
 800b2cc:	4616      	mov	r6, r2
 800b2ce:	464d      	mov	r5, r9
 800b2d0:	2401      	movs	r4, #1
 800b2d2:	e008      	b.n	800b2e6 <m_kalman_3gyro.isra.0.constprop.0+0xace>
 800b2d4:	3501      	adds	r5, #1
 800b2d6:	42af      	cmp	r7, r5
 800b2d8:	f80c 2c01 	strb.w	r2, [ip, #-1]
 800b2dc:	f000 8402 	beq.w	800bae4 <m_kalman_3gyro.isra.0.constprop.0+0x12cc>
 800b2e0:	3401      	adds	r4, #1
 800b2e2:	45a0      	cmp	r8, r4
 800b2e4:	db29      	blt.n	800b33a <m_kalman_3gyro.isra.0.constprop.0+0xb22>
 800b2e6:	f106 3eff 	add.w	lr, r6, #4294967295
 800b2ea:	1e69      	subs	r1, r5, #1
 800b2ec:	f91b 300e 	ldrsb.w	r3, [fp, lr]
 800b2f0:	f91b 2001 	ldrsb.w	r2, [fp, r1]
 800b2f4:	eb0a 0c83 	add.w	ip, sl, r3, lsl #2
 800b2f8:	eb0a 0082 	add.w	r0, sl, r2, lsl #2
 800b2fc:	ed1c 7a01 	vldr	s14, [ip, #-4]
 800b300:	ed50 7a01 	vldr	s15, [r0, #-4]
 800b304:	a88b      	add	r0, sp, #556	; 0x22c
 800b306:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b30a:	eb00 0c04 	add.w	ip, r0, r4
 800b30e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b312:	4660      	mov	r0, ip
 800b314:	d8de      	bhi.n	800b2d4 <m_kalman_3gyro.isra.0.constprop.0+0xabc>
 800b316:	3601      	adds	r6, #1
 800b318:	454e      	cmp	r6, r9
 800b31a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 800b31e:	d1df      	bne.n	800b2e0 <m_kalman_3gyro.isra.0.constprop.0+0xac8>
 800b320:	42bd      	cmp	r5, r7
 800b322:	eba7 0205 	sub.w	r2, r7, r5
 800b326:	4459      	add	r1, fp
 800b328:	dada      	bge.n	800b2e0 <m_kalman_3gyro.isra.0.constprop.0+0xac8>
 800b32a:	443c      	add	r4, r7
 800b32c:	1b64      	subs	r4, r4, r5
 800b32e:	3401      	adds	r4, #1
 800b330:	f007 fc7a 	bl	8012c28 <memcpy>
 800b334:	45a0      	cmp	r8, r4
 800b336:	463d      	mov	r5, r7
 800b338:	dad5      	bge.n	800b2e6 <m_kalman_3gyro.isra.0.constprop.0+0xace>
 800b33a:	9b00      	ldr	r3, [sp, #0]
 800b33c:	1e58      	subs	r0, r3, #1
 800b33e:	4458      	add	r0, fp
 800b340:	4642      	mov	r2, r8
 800b342:	a98b      	add	r1, sp, #556	; 0x22c
 800b344:	f007 fc70 	bl	8012c28 <memcpy>
 800b348:	9b02      	ldr	r3, [sp, #8]
 800b34a:	eb07 0903 	add.w	r9, r7, r3
 800b34e:	f1b9 0f1e 	cmp.w	r9, #30
 800b352:	ddae      	ble.n	800b2b2 <m_kalman_3gyro.isra.0.constprop.0+0xa9a>
 800b354:	9b03      	ldr	r3, [sp, #12]
 800b356:	3b01      	subs	r3, #1
 800b358:	9303      	str	r3, [sp, #12]
 800b35a:	d19e      	bne.n	800b29a <m_kalman_3gyro.isra.0.constprop.0+0xa82>
 800b35c:	f99b 200e 	ldrsb.w	r2, [fp, #14]
 800b360:	f99b 300f 	ldrsb.w	r3, [fp, #15]
 800b364:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 800b368:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
 800b36c:	ed52 7a01 	vldr	s15, [r2, #-4]
 800b370:	ed13 7a01 	vldr	s14, [r3, #-4]
 800b374:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b37c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800b380:	bf4c      	ite	mi
 800b382:	2201      	movmi	r2, #1
 800b384:	2200      	movpl	r2, #0
 800b386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b38a:	bf4c      	ite	mi
 800b38c:	2301      	movmi	r3, #1
 800b38e:	2300      	movpl	r3, #0
 800b390:	429a      	cmp	r2, r3
 800b392:	f000 83b5 	beq.w	800bb00 <m_kalman_3gyro.isra.0.constprop.0+0x12e8>
 800b396:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b39a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b39e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b3a2:	9b06      	ldr	r3, [sp, #24]
 800b3a4:	ece3 7a01 	vstmia	r3!, {s15}
 800b3a8:	9306      	str	r3, [sp, #24]
 800b3aa:	9b04      	ldr	r3, [sp, #16]
 800b3ac:	3304      	adds	r3, #4
 800b3ae:	9304      	str	r3, [sp, #16]
 800b3b0:	9b05      	ldr	r3, [sp, #20]
 800b3b2:	2b03      	cmp	r3, #3
 800b3b4:	f47f ae75 	bne.w	800b0a2 <m_kalman_3gyro.isra.0.constprop.0+0x88a>
 800b3b8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b3bc:	ed1f aab9 	vldr	s20, [pc, #-740]	; 800b0dc <m_kalman_3gyro.isra.0.constprop.0+0x8c4>
 800b3c0:	edd3 7af3 	vldr	s15, [r3, #972]	; 0x3cc
 800b3c4:	edd3 6af2 	vldr	s13, [r3, #968]	; 0x3c8
 800b3c8:	ed93 7af4 	vldr	s14, [r3, #976]	; 0x3d0
 800b3cc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b3d0:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800b3d4:	eee7 7a07 	vfma.f32	s15, s14, s14
 800b3d8:	ee17 0a90 	vmov	r0, s15
 800b3dc:	f7f5 f858 	bl	8000490 <__aeabi_f2d>
 800b3e0:	ec41 0b10 	vmov	d0, r0, r1
 800b3e4:	f007 fe10 	bl	8013008 <sqrt>
 800b3e8:	ec51 0b10 	vmov	r0, r1, d0
 800b3ec:	f7f5 fba0 	bl	8000b30 <__aeabi_d2f>
 800b3f0:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
 800b3f4:	ed9d 7a0d 	vldr	s14, [sp, #52]	; 0x34
 800b3f8:	eddd 4a17 	vldr	s9, [sp, #92]	; 0x5c
 800b3fc:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800b3fe:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800b402:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800b406:	ee6f 7aa6 	vmul.f32	s15, s31, s13
 800b40a:	ee86 7a07 	vdiv.f32	s14, s12, s14
 800b40e:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
 800b412:	ed83 7a00 	vstr	s14, [r3]
 800b416:	eec7 5a86 	vdiv.f32	s11, s15, s12
 800b41a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800b41c:	ee24 5aa6 	vmul.f32	s10, s9, s13
 800b420:	ed9d 6a11 	vldr	s12, [sp, #68]	; 0x44
 800b424:	edc3 5a00 	vstr	s11, [r3]
 800b428:	ee85 6a06 	vdiv.f32	s12, s10, s12
 800b42c:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800b42e:	ee77 7a25 	vadd.f32	s15, s14, s11
 800b432:	ee0d 0a90 	vmov	s27, r0
 800b436:	ee24 aa8a 	vmul.f32	s20, s9, s20
 800b43a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b43e:	eeaf aa87 	vfma.f32	s20, s31, s14
 800b442:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b446:	ee2d 7a87 	vmul.f32	s14, s27, s14
 800b44a:	ed83 6a00 	vstr	s12, [r3]
 800b44e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b452:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800b454:	ed5f 5ade 	vldr	s11, [pc, #-888]	; 800b0e0 <m_kalman_3gyro.isra.0.constprop.0+0x8c8>
 800b458:	ed83 7a00 	vstr	s14, [r3]
 800b45c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b460:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b462:	ee2a aa25 	vmul.f32	s20, s20, s11
 800b466:	edc3 7a00 	vstr	s15, [r3]
 800b46a:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800b46c:	ed83 aa00 	vstr	s20, [r3]
 800b470:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b474:	f893 38ce 	ldrb.w	r3, [r3, #2254]	; 0x8ce
 800b478:	2b00      	cmp	r3, #0
 800b47a:	f000 8360 	beq.w	800bb3e <m_kalman_3gyro.isra.0.constprop.0+0x1326>
 800b47e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b482:	f603 06c4 	addw	r6, r3, #2244	; 0x8c4
 800b486:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 800b48a:	9300      	str	r3, [sp, #0]
 800b48c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b490:	f503 690c 	add.w	r9, r3, #2240	; 0x8c0
 800b494:	f603 08bc 	addw	r8, r3, #2236	; 0x8bc
 800b498:	f603 07b8 	addw	r7, r3, #2232	; 0x8b8
 800b49c:	ed96 7a00 	vldr	s14, [r6]
 800b4a0:	9b00      	ldr	r3, [sp, #0]
 800b4a2:	ed8d 7a05 	vstr	s14, [sp, #20]
 800b4a6:	ed83 7a00 	vstr	s14, [r3]
 800b4aa:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b4ae:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800b4b2:	f7f5 fb3d 	bl	8000b30 <__aeabi_d2f>
 800b4b6:	ed99 6a00 	vldr	s12, [r9]
 800b4ba:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800b4be:	ed86 6a00 	vstr	s12, [r6]
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	e9d2 0108 	ldrd	r0, r1, [r2, #32]
 800b4c8:	ed8d 6a04 	vstr	s12, [sp, #16]
 800b4cc:	9301      	str	r3, [sp, #4]
 800b4ce:	f7f5 fb2f 	bl	8000b30 <__aeabi_d2f>
 800b4d2:	edd8 7a00 	vldr	s15, [r8]
 800b4d6:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800b4da:	edc9 7a00 	vstr	s15, [r9]
 800b4de:	4603      	mov	r3, r0
 800b4e0:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
 800b4e4:	edcd 7a02 	vstr	s15, [sp, #8]
 800b4e8:	9300      	str	r3, [sp, #0]
 800b4ea:	f7f5 fb21 	bl	8000b30 <__aeabi_d2f>
 800b4ee:	eddd 7a02 	vldr	s15, [sp, #8]
 800b4f2:	ed9d 6a04 	vldr	s12, [sp, #16]
 800b4f6:	edd7 6a00 	vldr	s13, [r7]
 800b4fa:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b4fe:	edc8 6a00 	vstr	s13, [r8]
 800b502:	ee07 0a10 	vmov	s14, r0
 800b506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b50a:	ed9d 7a00 	vldr	s14, [sp]
 800b50e:	edcd 6a00 	vstr	s13, [sp]
 800b512:	eee7 7a06 	vfma.f32	s15, s14, s12
 800b516:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800b51a:	edcd 7a02 	vstr	s15, [sp, #8]
 800b51e:	f7f5 fb07 	bl	8000b30 <__aeabi_d2f>
 800b522:	eddd 6a00 	vldr	s13, [sp]
 800b526:	eddd 7a02 	vldr	s15, [sp, #8]
 800b52a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b52e:	ee07 0a10 	vmov	s14, r0
 800b532:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b536:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800b53a:	ed9d 7a05 	vldr	s14, [sp, #20]
 800b53e:	eddd 6a01 	vldr	s13, [sp, #4]
 800b542:	ed87 aa00 	vstr	s20, [r7]
 800b546:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b54a:	edcd 7a00 	vstr	s15, [sp]
 800b54e:	f7f5 faef 	bl	8000b30 <__aeabi_d2f>
 800b552:	eddd 7a00 	vldr	s15, [sp]
 800b556:	9935      	ldr	r1, [sp, #212]	; 0xd4
 800b558:	ee07 0a10 	vmov	s14, r0
 800b55c:	eeea 7a07 	vfma.f32	s15, s20, s14
 800b560:	2200      	movs	r2, #0
 800b562:	2300      	movs	r3, #0
 800b564:	edc1 7a00 	vstr	s15, [r1]
 800b568:	f50d 61d5 	add.w	r1, sp, #1704	; 0x6a8
 800b56c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b570:	eeb0 aa67 	vmov.f32	s20, s15
 800b574:	f7f5 fa60 	bl	8000a38 <__aeabi_dcmple>
 800b578:	2800      	cmp	r0, #0
 800b57a:	f040 84e8 	bne.w	800bf4e <m_kalman_3gyro.isra.0.constprop.0+0x1736>
 800b57e:	f50d 61d5 	add.w	r1, sp, #1704	; 0x6a8
 800b582:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b586:	4bb4      	ldr	r3, [pc, #720]	; (800b858 <m_kalman_3gyro.isra.0.constprop.0+0x1040>)
 800b588:	2200      	movs	r2, #0
 800b58a:	f7f5 fa41 	bl	8000a10 <__aeabi_dcmpeq>
 800b58e:	2800      	cmp	r0, #0
 800b590:	f042 8524 	bne.w	800dfdc <m_kalman_3gyro.isra.0.constprop.0+0x37c4>
 800b594:	eddd 6acc 	vldr	s13, [sp, #816]	; 0x330
 800b598:	ed9d 7ab3 	vldr	s14, [sp, #716]	; 0x2cc
 800b59c:	eddd 7acd 	vldr	s15, [sp, #820]	; 0x334
 800b5a0:	ed9d 6ab4 	vldr	s12, [sp, #720]	; 0x2d0
 800b5a4:	eddd 5ab2 	vldr	s11, [sp, #712]	; 0x2c8
 800b5a8:	ee66 6a8b 	vmul.f32	s13, s13, s22
 800b5ac:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800b5b0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b5b4:	edcd 6acc 	vstr	s13, [sp, #816]	; 0x330
 800b5b8:	ed8d 7ab3 	vstr	s14, [sp, #716]	; 0x2cc
 800b5bc:	eddd 6ace 	vldr	s13, [sp, #824]	; 0x338
 800b5c0:	ed9d 7ab5 	vldr	s14, [sp, #724]	; 0x2d4
 800b5c4:	edcd 7acd 	vstr	s15, [sp, #820]	; 0x334
 800b5c8:	eddd 7acf 	vldr	s15, [sp, #828]	; 0x33c
 800b5cc:	ee26 6a0b 	vmul.f32	s12, s12, s22
 800b5d0:	ee66 6a8b 	vmul.f32	s13, s13, s22
 800b5d4:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800b5d8:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b5dc:	ed8d 6ab4 	vstr	s12, [sp, #720]	; 0x2d0
 800b5e0:	edcd 6ace 	vstr	s13, [sp, #824]	; 0x338
 800b5e4:	ed9d 6ab6 	vldr	s12, [sp, #728]	; 0x2d8
 800b5e8:	eddd 6ad0 	vldr	s13, [sp, #832]	; 0x340
 800b5ec:	ed8d 7ab5 	vstr	s14, [sp, #724]	; 0x2d4
 800b5f0:	edcd 7acf 	vstr	s15, [sp, #828]	; 0x33c
 800b5f4:	ed9d 7ab7 	vldr	s14, [sp, #732]	; 0x2dc
 800b5f8:	eddd 7ad1 	vldr	s15, [sp, #836]	; 0x344
 800b5fc:	ee26 6a0b 	vmul.f32	s12, s12, s22
 800b600:	ee66 6a8b 	vmul.f32	s13, s13, s22
 800b604:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800b608:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b60c:	ed8d 6ab6 	vstr	s12, [sp, #728]	; 0x2d8
 800b610:	edcd 6ad0 	vstr	s13, [sp, #832]	; 0x340
 800b614:	ed9d 6ab8 	vldr	s12, [sp, #736]	; 0x2e0
 800b618:	eddd 6ad2 	vldr	s13, [sp, #840]	; 0x348
 800b61c:	ed8d 7ab7 	vstr	s14, [sp, #732]	; 0x2dc
 800b620:	edcd 7ad1 	vstr	s15, [sp, #836]	; 0x344
 800b624:	ed9d 7ab9 	vldr	s14, [sp, #740]	; 0x2e4
 800b628:	eddd 7ad3 	vldr	s15, [sp, #844]	; 0x34c
 800b62c:	ee65 5a8b 	vmul.f32	s11, s11, s22
 800b630:	ee26 6a0b 	vmul.f32	s12, s12, s22
 800b634:	ee66 6a8b 	vmul.f32	s13, s13, s22
 800b638:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800b63c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b640:	ed8d 6ab8 	vstr	s12, [sp, #736]	; 0x2e0
 800b644:	edcd 6ad2 	vstr	s13, [sp, #840]	; 0x348
 800b648:	ed8d 7ab9 	vstr	s14, [sp, #740]	; 0x2e4
 800b64c:	edcd 7ad3 	vstr	s15, [sp, #844]	; 0x34c
 800b650:	edcd 5ab2 	vstr	s11, [sp, #712]	; 0x2c8
 800b654:	eddd 5aba 	vldr	s11, [sp, #744]	; 0x2e8
 800b658:	eddd 7ad4 	vldr	s15, [sp, #848]	; 0x350
 800b65c:	ed9d 6abb 	vldr	s12, [sp, #748]	; 0x2ec
 800b660:	eddd 6ad5 	vldr	s13, [sp, #852]	; 0x354
 800b664:	ed9d 7abc 	vldr	s14, [sp, #752]	; 0x2f0
 800b668:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b66c:	ee26 6a0b 	vmul.f32	s12, s12, s22
 800b670:	edcd 7ad4 	vstr	s15, [sp, #848]	; 0x350
 800b674:	eddd 7ad6 	vldr	s15, [sp, #856]	; 0x358
 800b678:	ed8d 6abb 	vstr	s12, [sp, #748]	; 0x2ec
 800b67c:	ee66 6a8b 	vmul.f32	s13, s13, s22
 800b680:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800b684:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b688:	ed9d 6abd 	vldr	s12, [sp, #756]	; 0x2f4
 800b68c:	edcd 6ad5 	vstr	s13, [sp, #852]	; 0x354
 800b690:	ed8d 7abc 	vstr	s14, [sp, #752]	; 0x2f0
 800b694:	eddd 6ad7 	vldr	s13, [sp, #860]	; 0x35c
 800b698:	ed9d 7abe 	vldr	s14, [sp, #760]	; 0x2f8
 800b69c:	edcd 7ad6 	vstr	s15, [sp, #856]	; 0x358
 800b6a0:	eddd 7ad8 	vldr	s15, [sp, #864]	; 0x360
 800b6a4:	ee65 5a8b 	vmul.f32	s11, s11, s22
 800b6a8:	ee26 6a0b 	vmul.f32	s12, s12, s22
 800b6ac:	ee66 6a8b 	vmul.f32	s13, s13, s22
 800b6b0:	ee27 7a0b 	vmul.f32	s14, s14, s22
 800b6b4:	ee27 ba8b 	vmul.f32	s22, s15, s22
 800b6b8:	a9bf      	add	r1, sp, #764	; 0x2fc
 800b6ba:	edcd 5aba 	vstr	s11, [sp, #744]	; 0x2e8
 800b6be:	ed8d 6abd 	vstr	s12, [sp, #756]	; 0x2f4
 800b6c2:	edcd 6ad7 	vstr	s13, [sp, #860]	; 0x35c
 800b6c6:	a8b2      	add	r0, sp, #712	; 0x2c8
 800b6c8:	ed8d 7abe 	vstr	s14, [sp, #760]	; 0x2f8
 800b6cc:	eeb0 0a4a 	vmov.f32	s0, s20
 800b6d0:	ed8d bad8 	vstr	s22, [sp, #864]	; 0x360
 800b6d4:	f7fd ff1c 	bl	8009510 <m_interp1q_constrain>
 800b6d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800b6da:	eeb0 6a40 	vmov.f32	s12, s0
 800b6de:	ed83 0a00 	vstr	s0, [r3]
 800b6e2:	a9d9      	add	r1, sp, #868	; 0x364
 800b6e4:	a8cc      	add	r0, sp, #816	; 0x330
 800b6e6:	eeb0 0a4a 	vmov.f32	s0, s20
 800b6ea:	f7fd ff11 	bl	8009510 <m_interp1q_constrain>
 800b6ee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b6f0:	ed83 0a00 	vstr	s0, [r3]
 800b6f4:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b6f8:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 800b6fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b6fe:	ee7c 7ae7 	vsub.f32	s15, s25, s15
 800b702:	ed83 6a00 	vstr	s12, [r3]
 800b706:	eef0 7ae7 	vabs.f32	s15, s15
 800b70a:	ee17 0a90 	vmov	r0, s15
 800b70e:	f7f4 febf 	bl	8000490 <__aeabi_f2d>
 800b712:	ec41 0b10 	vmov	d0, r0, r1
 800b716:	f007 fa9f 	bl	8012c58 <floor>
 800b71a:	ec51 0b10 	vmov	r0, r1, d0
 800b71e:	f7f5 f9bf 	bl	8000aa0 <__aeabi_d2iz>
 800b722:	f8dd 36c4 	ldr.w	r3, [sp, #1732]	; 0x6c4
 800b726:	7018      	strb	r0, [r3, #0]
 800b728:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b72c:	ed93 ba2d 	vldr	s22, [r3, #180]	; 0xb4
 800b730:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 800b734:	4b49      	ldr	r3, [pc, #292]	; (800b85c <m_kalman_3gyro.isra.0.constprop.0+0x1044>)
 800b736:	ee3c bacb 	vsub.f32	s22, s25, s22
 800b73a:	ee7d 7a67 	vsub.f32	s15, s26, s15
 800b73e:	eeb0 bacb 	vabs.f32	s22, s22
 800b742:	eef0 7ae7 	vabs.f32	s15, s15
 800b746:	ee77 7a8b 	vadd.f32	s15, s15, s22
 800b74a:	ed83 ba6b 	vstr	s22, [r3, #428]	; 0x1ac
 800b74e:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800b750:	edcd 7a00 	vstr	s15, [sp]
 800b754:	edc3 7a00 	vstr	s15, [r3]
 800b758:	ee17 0a90 	vmov	r0, s15
 800b75c:	f7f4 fe98 	bl	8000490 <__aeabi_f2d>
 800b760:	a33b      	add	r3, pc, #236	; (adr r3, 800b850 <m_kalman_3gyro.isra.0.constprop.0+0x1038>)
 800b762:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b766:	f7f5 f97b 	bl	8000a60 <__aeabi_dcmpgt>
 800b76a:	2800      	cmp	r0, #0
 800b76c:	f000 83ec 	beq.w	800bf48 <m_kalman_3gyro.isra.0.constprop.0+0x1730>
 800b770:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800b860 <m_kalman_3gyro.isra.0.constprop.0+0x1048>
 800b774:	eddd 7a00 	vldr	s15, [sp]
 800b778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b77c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b780:	f302 8362 	bgt.w	800de48 <m_kalman_3gyro.isra.0.constprop.0+0x3630>
 800b784:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800b864 <m_kalman_3gyro.isra.0.constprop.0+0x104c>
 800b788:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b78c:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800b790:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b794:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800b798:	ee17 0a10 	vmov	r0, s14
 800b79c:	f7f4 fe78 	bl	8000490 <__aeabi_f2d>
 800b7a0:	4606      	mov	r6, r0
 800b7a2:	460f      	mov	r7, r1
 800b7a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b7a8:	ee7c 7ae7 	vsub.f32	s15, s25, s15
 800b7ac:	eef0 7ae7 	vabs.f32	s15, s15
 800b7b0:	ee17 0a90 	vmov	r0, s15
 800b7b4:	f7f4 fe6c 	bl	8000490 <__aeabi_f2d>
 800b7b8:	4b2b      	ldr	r3, [pc, #172]	; (800b868 <m_kalman_3gyro.isra.0.constprop.0+0x1050>)
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	f7f4 fd08 	bl	80001d0 <__aeabi_dsub>
 800b7c0:	4632      	mov	r2, r6
 800b7c2:	463b      	mov	r3, r7
 800b7c4:	4604      	mov	r4, r0
 800b7c6:	460d      	mov	r5, r1
 800b7c8:	f7f5 f940 	bl	8000a4c <__aeabi_dcmpge>
 800b7cc:	b908      	cbnz	r0, 800b7d2 <m_kalman_3gyro.isra.0.constprop.0+0xfba>
 800b7ce:	4634      	mov	r4, r6
 800b7d0:	463d      	mov	r5, r7
 800b7d2:	4620      	mov	r0, r4
 800b7d4:	4629      	mov	r1, r5
 800b7d6:	f7f5 f9ab 	bl	8000b30 <__aeabi_d2f>
 800b7da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7dc:	6018      	str	r0, [r3, #0]
 800b7de:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b7e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b7e6:	b19b      	cbz	r3, 800b810 <m_kalman_3gyro.isra.0.constprop.0+0xff8>
 800b7e8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b7ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b7f0:	b973      	cbnz	r3, 800b810 <m_kalman_3gyro.isra.0.constprop.0+0xff8>
 800b7f2:	ed9d 7a39 	vldr	s14, [sp, #228]	; 0xe4
 800b7f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b7f8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b7fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b800:	ed93 7a00 	vldr	s14, [r3]
 800b804:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b80c:	f102 84b9 	bmi.w	800e182 <m_kalman_3gyro.isra.0.constprop.0+0x396a>
 800b810:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b814:	3340      	adds	r3, #64	; 0x40
 800b816:	9304      	str	r3, [sp, #16]
 800b818:	9b07      	ldr	r3, [sp, #28]
 800b81a:	edd3 7a00 	vldr	s15, [r3]
 800b81e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b826:	f04f 0400 	mov.w	r4, #0
 800b82a:	d123      	bne.n	800b874 <m_kalman_3gyro.isra.0.constprop.0+0x105c>
 800b82c:	edd3 7a01 	vldr	s15, [r3, #4]
 800b830:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b838:	4619      	mov	r1, r3
 800b83a:	d11b      	bne.n	800b874 <m_kalman_3gyro.isra.0.constprop.0+0x105c>
 800b83c:	edd3 7a02 	vldr	s15, [r3, #8]
 800b840:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b848:	f002 8425 	beq.w	800e096 <m_kalman_3gyro.isra.0.constprop.0+0x387e>
 800b84c:	e012      	b.n	800b874 <m_kalman_3gyro.isra.0.constprop.0+0x105c>
 800b84e:	bf00      	nop
 800b850:	9999999a 	.word	0x9999999a
 800b854:	3fb99999 	.word	0x3fb99999
 800b858:	3ff00000 	.word	0x3ff00000
 800b85c:	20001690 	.word	0x20001690
 800b860:	3fb77778 	.word	0x3fb77778
 800b864:	3dcccccd 	.word	0x3dcccccd
 800b868:	3fe00000 	.word	0x3fe00000
 800b86c:	3f99999a 	.word	0x3f99999a
 800b870:	3f4ccccd 	.word	0x3f4ccccd
 800b874:	f50d 61d4 	add.w	r1, sp, #1696	; 0x6a0
 800b878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b87c:	2200      	movs	r2, #0
 800b87e:	2300      	movs	r3, #0
 800b880:	f7f5 f8c6 	bl	8000a10 <__aeabi_dcmpeq>
 800b884:	2800      	cmp	r0, #0
 800b886:	d144      	bne.n	800b912 <m_kalman_3gyro.isra.0.constprop.0+0x10fa>
 800b888:	eddd 7a39 	vldr	s15, [sp, #228]	; 0xe4
 800b88c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b88e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800b892:	edd3 7a00 	vldr	s15, [r3]
 800b896:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b89e:	d538      	bpl.n	800b912 <m_kalman_3gyro.isra.0.constprop.0+0x10fa>
 800b8a0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b8a4:	9907      	ldr	r1, [sp, #28]
 800b8a6:	edc3 9a12 	vstr	s19, [r3, #72]	; 0x48
 800b8aa:	ed83 9a15 	vstr	s18, [r3, #84]	; 0x54
 800b8ae:	edc3 8a18 	vstr	s17, [r3, #96]	; 0x60
 800b8b2:	ed83 ca11 	vstr	s24, [r3, #68]	; 0x44
 800b8b6:	edc3 ba14 	vstr	s23, [r3, #80]	; 0x50
 800b8ba:	ed83 8a17 	vstr	s16, [r3, #92]	; 0x5c
 800b8be:	ed83 fa10 	vstr	s30, [r3, #64]	; 0x40
 800b8c2:	edc3 ea13 	vstr	s29, [r3, #76]	; 0x4c
 800b8c6:	ed83 ea16 	vstr	s28, [r3, #88]	; 0x58
 800b8ca:	9804      	ldr	r0, [sp, #16]
 800b8cc:	f7fd fb16 	bl	8008efc <m_dcm2q_eml>
 800b8d0:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
 800b8d4:	2201      	movs	r2, #1
 800b8d6:	700a      	strb	r2, [r1, #0]
 800b8d8:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800b8dc:	2300      	movs	r3, #0
 800b8de:	ed82 da2b 	vstr	s26, [r2, #172]	; 0xac
 800b8e2:	edc2 ca2d 	vstr	s25, [r2, #180]	; 0xb4
 800b8e6:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 800b8ea:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
 800b8ee:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800b8f2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800b8f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b8fa:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800b8fe:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
 800b902:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 800b906:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 800b90a:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 800b90e:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8
 800b912:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800b916:	9904      	ldr	r1, [sp, #16]
 800b918:	9807      	ldr	r0, [sp, #28]
 800b91a:	2300      	movs	r3, #0
 800b91c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800b920:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800b924:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800b928:	f7fc feb4 	bl	8008694 <m_q2dcm_eml>
 800b92c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b930:	ed93 8a2b 	vldr	s16, [r3, #172]	; 0xac
 800b934:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b938:	eee8 7a48 	vfms.f32	s15, s16, s16
 800b93c:	ee17 0a90 	vmov	r0, s15
 800b940:	f7f4 fda6 	bl	8000490 <__aeabi_f2d>
 800b944:	ec41 0b10 	vmov	d0, r0, r1
 800b948:	f007 fb5e 	bl	8013008 <sqrt>
 800b94c:	ec51 0b10 	vmov	r0, r1, d0
 800b950:	f7f5 f8ee 	bl	8000b30 <__aeabi_d2f>
 800b954:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800b958:	ed9d 9a57 	vldr	s18, [sp, #348]	; 0x15c
 800b95c:	edd3 6a12 	vldr	s13, [r3, #72]	; 0x48
 800b960:	ed93 6a18 	vldr	s12, [r3, #96]	; 0x60
 800b964:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800b968:	edd3 5a15 	vldr	s11, [r3, #84]	; 0x54
 800b96c:	ed93 4a16 	vldr	s8, [r3, #88]	; 0x58
 800b970:	edd3 3a13 	vldr	s7, [r3, #76]	; 0x4c
 800b974:	eddd 9a58 	vldr	s19, [sp, #352]	; 0x160
 800b978:	eddd 8a56 	vldr	s17, [sp, #344]	; 0x158
 800b97c:	ed83 da22 	vstr	s26, [r3, #136]	; 0x88
 800b980:	ee07 0a10 	vmov	s14, r0
 800b984:	ee68 4a26 	vmul.f32	s9, s16, s13
 800b988:	ee28 5a25 	vmul.f32	s10, s16, s11
 800b98c:	eee7 4a27 	vfma.f32	s9, s14, s15
 800b990:	ee68 7a06 	vmul.f32	s15, s16, s12
 800b994:	eea7 5a23 	vfma.f32	s10, s14, s7
 800b998:	eee7 7a04 	vfma.f32	s15, s14, s8
 800b99c:	ed9d 7a55 	vldr	s14, [sp, #340]	; 0x154
 800b9a0:	eddd 3a53 	vldr	s7, [sp, #332]	; 0x14c
 800b9a4:	ed9d 4a54 	vldr	s8, [sp, #336]	; 0x150
 800b9a8:	edc3 7a84 	vstr	s15, [r3, #528]	; 0x210
 800b9ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b9b0:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 800b9b4:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 800b9b8:	ed1f 7a54 	vldr	s14, [pc, #-336]	; 800b86c <m_kalman_3gyro.isra.0.constprop.0+0x1054>
 800b9bc:	edc3 aa23 	vstr	s21, [r3, #140]	; 0x8c
 800b9c0:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800b9c4:	ee34 4a45 	vsub.f32	s8, s8, s10
 800b9c8:	ee79 5a65 	vsub.f32	s11, s18, s11
 800b9cc:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800b9d0:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800b9d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b9d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9dc:	edc3 ca24 	vstr	s25, [r3, #144]	; 0x90
 800b9e0:	edc3 4a82 	vstr	s9, [r3, #520]	; 0x208
 800b9e4:	edc3 3a19 	vstr	s7, [r3, #100]	; 0x64
 800b9e8:	ed83 5a83 	vstr	s10, [r3, #524]	; 0x20c
 800b9ec:	ed83 4a1a 	vstr	s8, [r3, #104]	; 0x68
 800b9f0:	edc3 5a1d 	vstr	s11, [r3, #116]	; 0x74
 800b9f4:	ed83 6a1e 	vstr	s12, [r3, #120]	; 0x78
 800b9f8:	edc3 6a1c 	vstr	s13, [r3, #112]	; 0x70
 800b9fc:	d506      	bpl.n	800ba0c <m_kalman_3gyro.isra.0.constprop.0+0x11f4>
 800b9fe:	ed1f 7a64 	vldr	s14, [pc, #-400]	; 800b870 <m_kalman_3gyro.isra.0.constprop.0+0x1058>
 800ba02:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba0a:	dc01      	bgt.n	800ba10 <m_kalman_3gyro.isra.0.constprop.0+0x11f8>
 800ba0c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ba10:	ee7a 7ae7 	vsub.f32	s15, s21, s15
 800ba14:	9b3a      	ldr	r3, [sp, #232]	; 0xe8
 800ba16:	eef0 7ae7 	vabs.f32	s15, s15
 800ba1a:	ee3f 6aa7 	vadd.f32	s12, s31, s15
 800ba1e:	edc3 7a00 	vstr	s15, [r3]
 800ba22:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800ba24:	a99e      	add	r1, sp, #632	; 0x278
 800ba26:	ed83 6a00 	vstr	s12, [r3]
 800ba2a:	eeb0 0a46 	vmov.f32	s0, s12
 800ba2e:	a894      	add	r0, sp, #592	; 0x250
 800ba30:	f7fd fd20 	bl	8009474 <m_b_interp1q_constrain>
 800ba34:	a9a8      	add	r1, sp, #672	; 0x2a0
 800ba36:	eeb0 8a40 	vmov.f32	s16, s0
 800ba3a:	a894      	add	r0, sp, #592	; 0x250
 800ba3c:	eeb0 0a46 	vmov.f32	s0, s12
 800ba40:	f7fd fd18 	bl	8009474 <m_b_interp1q_constrain>
 800ba44:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ba46:	edd3 7a00 	vldr	s15, [r3]
 800ba4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800ba4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba52:	eef0 aa40 	vmov.f32	s21, s0
 800ba56:	f340 8297 	ble.w	800bf88 <m_kalman_3gyro.isra.0.constprop.0+0x1770>
 800ba5a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ba5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba66:	f142 81f3 	bpl.w	800de50 <m_kalman_3gyro.isra.0.constprop.0+0x3638>
 800ba6a:	2107      	movs	r1, #7
 800ba6c:	2402      	movs	r4, #2
 800ba6e:	2301      	movs	r3, #1
 800ba70:	f06f 4540 	mvn.w	r5, #3221225472	; 0xc0000000
 800ba74:	4618      	mov	r0, r3
 800ba76:	e008      	b.n	800ba8a <m_kalman_3gyro.isra.0.constprop.0+0x1272>
 800ba78:	ed92 7a00 	vldr	s14, [r2]
 800ba7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ba80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba84:	f282 84ea 	bge.w	800e45c <m_kalman_3gyro.isra.0.constprop.0+0x3c44>
 800ba88:	4619      	mov	r1, r3
 800ba8a:	180b      	adds	r3, r1, r0
 800ba8c:	eb05 0253 	add.w	r2, r5, r3, lsr #1
 800ba90:	f50d 66c4 	add.w	r6, sp, #1568	; 0x620
 800ba94:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800ba98:	42a1      	cmp	r1, r4
 800ba9a:	f2a2 42bc 	subw	r2, r2, #1212	; 0x4bc
 800ba9e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 800baa2:	d8e9      	bhi.n	800ba78 <m_kalman_3gyro.isra.0.constprop.0+0x1260>
 800baa4:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 800baa8:	3801      	subs	r0, #1
 800baaa:	0082      	lsls	r2, r0, #2
 800baac:	3204      	adds	r2, #4
 800baae:	ab59      	add	r3, sp, #356	; 0x164
 800bab0:	1899      	adds	r1, r3, r2
 800bab2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800bab6:	edd3 6a00 	vldr	s13, [r3]
 800baba:	ed91 7a00 	vldr	s14, [r1]
 800babe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bac2:	ee37 7a66 	vsub.f32	s14, s14, s13
 800bac6:	ab60      	add	r3, sp, #384	; 0x180
 800bac8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bacc:	441a      	add	r2, r3
 800bace:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bad2:	edd0 ba00 	vldr	s23, [r0]
 800bad6:	edd2 7a00 	vldr	s15, [r2]
 800bada:	ee77 7aeb 	vsub.f32	s15, s15, s23
 800bade:	eee6 baa7 	vfma.f32	s23, s13, s15
 800bae2:	e253      	b.n	800bf8c <m_kalman_3gyro.isra.0.constprop.0+0x1774>
 800bae4:	454e      	cmp	r6, r9
 800bae6:	f6bf abfb 	bge.w	800b2e0 <m_kalman_3gyro.isra.0.constprop.0+0xac8>
 800baea:	eba9 0206 	sub.w	r2, r9, r6
 800baee:	eb0b 010e 	add.w	r1, fp, lr
 800baf2:	444c      	add	r4, r9
 800baf4:	1ba4      	subs	r4, r4, r6
 800baf6:	f007 f897 	bl	8012c28 <memcpy>
 800bafa:	464e      	mov	r6, r9
 800bafc:	f7ff bbf0 	b.w	800b2e0 <m_kalman_3gyro.isra.0.constprop.0+0xac8>
 800bb00:	eef4 7a4a 	vcmp.f32	s15, s20
 800bb04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb08:	f43f ac45 	beq.w	800b396 <m_kalman_3gyro.isra.0.constprop.0+0xb7e>
 800bb0c:	eef4 7a6d 	vcmp.f32	s15, s27
 800bb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb14:	f43f ac3f 	beq.w	800b396 <m_kalman_3gyro.isra.0.constprop.0+0xb7e>
 800bb18:	eeb4 7a4a 	vcmp.f32	s14, s20
 800bb1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb20:	f43f ac39 	beq.w	800b396 <m_kalman_3gyro.isra.0.constprop.0+0xb7e>
 800bb24:	eeb4 7a6d 	vcmp.f32	s14, s27
 800bb28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb2c:	f43f ac33 	beq.w	800b396 <m_kalman_3gyro.isra.0.constprop.0+0xb7e>
 800bb30:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bb34:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800bb38:	eee7 7a26 	vfma.f32	s15, s14, s13
 800bb3c:	e431      	b.n	800b3a2 <m_kalman_3gyro.isra.0.constprop.0+0xb8a>
 800bb3e:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800bb42:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800bb46:	f8dd 66d0 	ldr.w	r6, [sp, #1744]	; 0x6d0
 800bb4a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800bb4e:	f602 07b8 	addw	r7, r2, #2232	; 0x8b8
 800bb52:	2301      	movs	r3, #1
 800bb54:	f602 08bc 	addw	r8, r2, #2236	; 0x8bc
 800bb58:	f502 690c 	add.w	r9, r2, #2240	; 0x8c0
 800bb5c:	e9d2 4502 	ldrd	r4, r5, [r2, #8]
 800bb60:	f882 38ce 	strb.w	r3, [r2, #2254]	; 0x8ce
 800bb64:	e9d2 2306 	ldrd	r2, r3, [r2, #24]
 800bb68:	ed87 aa00 	vstr	s20, [r7]
 800bb6c:	ed88 aa00 	vstr	s20, [r8]
 800bb70:	ed89 aa00 	vstr	s20, [r9]
 800bb74:	f7f4 fb2e 	bl	80001d4 <__adddf3>
 800bb78:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800bb7c:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800bb80:	f603 03c8 	addw	r3, r3, #2248	; 0x8c8
 800bb84:	f606 06c4 	addw	r6, r6, #2244	; 0x8c4
 800bb88:	9300      	str	r3, [sp, #0]
 800bb8a:	ed86 aa00 	vstr	s20, [r6]
 800bb8e:	e9d2 2308 	ldrd	r2, r3, [r2, #32]
 800bb92:	f7f4 fb1f 	bl	80001d4 <__adddf3>
 800bb96:	9b00      	ldr	r3, [sp, #0]
 800bb98:	ed83 aa00 	vstr	s20, [r3]
 800bb9c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800bba0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800bba4:	f7f4 fb16 	bl	80001d4 <__adddf3>
 800bba8:	4622      	mov	r2, r4
 800bbaa:	462b      	mov	r3, r5
 800bbac:	f7f4 fb12 	bl	80001d4 <__adddf3>
 800bbb0:	4602      	mov	r2, r0
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	2000      	movs	r0, #0
 800bbb6:	4920      	ldr	r1, [pc, #128]	; (800bc38 <m_kalman_3gyro.isra.0.constprop.0+0x1420>)
 800bbb8:	f7f4 fdec 	bl	8000794 <__aeabi_ddiv>
 800bbbc:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	460d      	mov	r5, r1
 800bbc4:	4622      	mov	r2, r4
 800bbc6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800bbca:	462b      	mov	r3, r5
 800bbcc:	f7f4 fcb8 	bl	8000540 <__aeabi_dmul>
 800bbd0:	ec41 0b17 	vmov	d7, r0, r1
 800bbd4:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800bbd8:	4622      	mov	r2, r4
 800bbda:	ed81 7b02 	vstr	d7, [r1, #8]
 800bbde:	462b      	mov	r3, r5
 800bbe0:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800bbe4:	f7f4 fcac 	bl	8000540 <__aeabi_dmul>
 800bbe8:	ec41 0b17 	vmov	d7, r0, r1
 800bbec:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800bbf0:	4622      	mov	r2, r4
 800bbf2:	ed81 7b04 	vstr	d7, [r1, #16]
 800bbf6:	462b      	mov	r3, r5
 800bbf8:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
 800bbfc:	f7f4 fca0 	bl	8000540 <__aeabi_dmul>
 800bc00:	ec41 0b17 	vmov	d7, r0, r1
 800bc04:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800bc08:	4622      	mov	r2, r4
 800bc0a:	ed81 7b06 	vstr	d7, [r1, #24]
 800bc0e:	462b      	mov	r3, r5
 800bc10:	e9d1 0108 	ldrd	r0, r1, [r1, #32]
 800bc14:	f7f4 fc94 	bl	8000540 <__aeabi_dmul>
 800bc18:	4622      	mov	r2, r4
 800bc1a:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800bc1e:	462b      	mov	r3, r5
 800bc20:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800bc24:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
 800bc28:	f7f4 fc8a 	bl	8000540 <__aeabi_dmul>
 800bc2c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800bc30:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
 800bc34:	e432      	b.n	800b49c <m_kalman_3gyro.isra.0.constprop.0+0xc84>
 800bc36:	bf00      	nop
 800bc38:	3ff00000 	.word	0x3ff00000
 800bc3c:	f50d 67d5 	add.w	r7, sp, #1704	; 0x6a8
 800bc40:	ed97 7b00 	vldr	d7, [r7]
 800bc44:	2101      	movs	r1, #1
 800bc46:	af43      	add	r7, sp, #268	; 0x10c
 800bc48:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bc4c:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38
 800bc50:	2600      	movs	r6, #0
 800bc52:	e9c3 5512 	strd	r5, r5, [r3, #72]	; 0x48
 800bc56:	e9c3 5515 	strd	r5, r5, [r3, #84]	; 0x54
 800bc5a:	645d      	str	r5, [r3, #68]	; 0x44
 800bc5c:	f883 18cd 	strb.w	r1, [r3, #2253]	; 0x8cd
 800bc60:	861a      	strh	r2, [r3, #48]	; 0x30
 800bc62:	65dd      	str	r5, [r3, #92]	; 0x5c
 800bc64:	ed83 ba18 	vstr	s22, [r3, #96]	; 0x60
 800bc68:	ed83 ba14 	vstr	s22, [r3, #80]	; 0x50
 800bc6c:	ed83 ba10 	vstr	s22, [r3, #64]	; 0x40
 800bc70:	4629      	mov	r1, r5
 800bc72:	2230      	movs	r2, #48	; 0x30
 800bc74:	f103 0064 	add.w	r0, r3, #100	; 0x64
 800bc78:	603e      	str	r6, [r7, #0]
 800bc7a:	607e      	str	r6, [r7, #4]
 800bc7c:	60fe      	str	r6, [r7, #12]
 800bc7e:	9707      	str	r7, [sp, #28]
 800bc80:	9645      	str	r6, [sp, #276]	; 0x114
 800bc82:	f006 ffdf 	bl	8012c44 <memset>
 800bc86:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800bc8a:	4bb7      	ldr	r3, [pc, #732]	; (800bf68 <m_kalman_3gyro.isra.0.constprop.0+0x1750>)
 800bc8c:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 800bc90:	4613      	mov	r3, r2
 800bc92:	f8c2 6094 	str.w	r6, [r2, #148]	; 0x94
 800bc96:	f8c2 6098 	str.w	r6, [r2, #152]	; 0x98
 800bc9a:	f8c2 609c 	str.w	r6, [r2, #156]	; 0x9c
 800bc9e:	ed82 ba2c 	vstr	s22, [r2, #176]	; 0xb0
 800bca2:	ed82 ba2d 	vstr	s22, [r2, #180]	; 0xb4
 800bca6:	4629      	mov	r1, r5
 800bca8:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800bcac:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 800bcb0:	f006 ffc8 	bl	8012c44 <memset>
 800bcb4:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800bcb8:	4bac      	ldr	r3, [pc, #688]	; (800bf6c <m_kalman_3gyro.isra.0.constprop.0+0x1754>)
 800bcba:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
 800bcbe:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
 800bcc2:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 800bcc6:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 800bcca:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
 800bcce:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8
 800bcd2:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 800bcd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800bcda:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 800bcde:	4613      	mov	r3, r2
 800bce0:	f502 7206 	add.w	r2, r2, #536	; 0x218
 800bce4:	2500      	movs	r5, #0
 800bce6:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
 800bcea:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
 800bcee:	f8c3 11fc 	str.w	r1, [r3, #508]	; 0x1fc
 800bcf2:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
 800bcf6:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
 800bcfa:	f8c3 5218 	str.w	r5, [r3, #536]	; 0x218
 800bcfe:	f503 7817 	add.w	r8, r3, #604	; 0x25c
 800bd02:	e9c2 5501 	strd	r5, r5, [r2, #4]
 800bd06:	e9c2 5504 	strd	r5, r5, [r2, #16]
 800bd0a:	6195      	str	r5, [r2, #24]
 800bd0c:	e9c3 5590 	strd	r5, r5, [r3, #576]	; 0x240
 800bd10:	e9c3 5593 	strd	r5, r5, [r3, #588]	; 0x24c
 800bd14:	f8c3 523c 	str.w	r5, [r3, #572]	; 0x23c
 800bd18:	f8c3 9234 	str.w	r9, [r3, #564]	; 0x234
 800bd1c:	f8c3 9224 	str.w	r9, [r3, #548]	; 0x224
 800bd20:	f8c3 9214 	str.w	r9, [r3, #532]	; 0x214
 800bd24:	f8c3 5254 	str.w	r5, [r3, #596]	; 0x254
 800bd28:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	f8c3 9258 	str.w	r9, [r3, #600]	; 0x258
 800bd32:	f8c3 9248 	str.w	r9, [r3, #584]	; 0x248
 800bd36:	f8c3 9238 	str.w	r9, [r3, #568]	; 0x238
 800bd3a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800bd3e:	4640      	mov	r0, r8
 800bd40:	f006 ff80 	bl	8012c44 <memset>
 800bd44:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800bd48:	2700      	movs	r7, #0
 800bd4a:	4629      	mov	r1, r5
 800bd4c:	f8c3 73c4 	str.w	r7, [r3, #964]	; 0x3c4
 800bd50:	f8c3 73c8 	str.w	r7, [r3, #968]	; 0x3c8
 800bd54:	f8c3 73cc 	str.w	r7, [r3, #972]	; 0x3cc
 800bd58:	f8c3 73d0 	str.w	r7, [r3, #976]	; 0x3d0
 800bd5c:	2230      	movs	r2, #48	; 0x30
 800bd5e:	f503 7075 	add.w	r0, r3, #980	; 0x3d4
 800bd62:	f006 ff6f 	bl	8012c44 <memset>
 800bd66:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800bd6a:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800bd6e:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800bd72:	f203 4104 	addw	r1, r3, #1028	; 0x404
 800bd76:	f503 6582 	add.w	r5, r3, #1040	; 0x410
 800bd7a:	f203 4614 	addw	r6, r3, #1044	; 0x414
 800bd7e:	f503 6a81 	add.w	sl, r3, #1032	; 0x408
 800bd82:	f203 4b0c 	addw	fp, r3, #1036	; 0x40c
 800bd86:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 800bd8a:	932b      	str	r3, [sp, #172]	; 0xac
 800bd8c:	f500 6384 	add.w	r3, r0, #1056	; 0x420
 800bd90:	f200 4024 	addw	r0, r0, #1060	; 0x424
 800bd94:	9036      	str	r0, [sp, #216]	; 0xd8
 800bd96:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800bd9a:	600f      	str	r7, [r1, #0]
 800bd9c:	f500 6085 	add.w	r0, r0, #1064	; 0x428
 800bda0:	9037      	str	r0, [sp, #220]	; 0xdc
 800bda2:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800bda6:	f8ca 7000 	str.w	r7, [sl]
 800bdaa:	f200 4c2c 	addw	ip, r0, #1068	; 0x42c
 800bdae:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800bdb2:	f8cd c0e0 	str.w	ip, [sp, #224]	; 0xe0
 800bdb6:	f500 6c86 	add.w	ip, r0, #1072	; 0x430
 800bdba:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800bdbe:	f8cd c078 	str.w	ip, [sp, #120]	; 0x78
 800bdc2:	f200 4c34 	addw	ip, r0, #1076	; 0x434
 800bdc6:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800bdca:	f8cb 7000 	str.w	r7, [fp]
 800bdce:	953a      	str	r5, [sp, #232]	; 0xe8
 800bdd0:	602f      	str	r7, [r5, #0]
 800bdd2:	f202 421c 	addw	r2, r2, #1052	; 0x41c
 800bdd6:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800bdd8:	9235      	str	r2, [sp, #212]	; 0xd4
 800bdda:	f8cd c07c 	str.w	ip, [sp, #124]	; 0x7c
 800bdde:	f500 6c87 	add.w	ip, r0, #1080	; 0x438
 800bde2:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800bde6:	6037      	str	r7, [r6, #0]
 800bde8:	602f      	str	r7, [r5, #0]
 800bdea:	9d35      	ldr	r5, [sp, #212]	; 0xd4
 800bdec:	9121      	str	r1, [sp, #132]	; 0x84
 800bdee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800bdf2:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
 800bdf6:	f50d 61d5 	add.w	r1, sp, #1704	; 0x6a8
 800bdfa:	f200 4c3c 	addw	ip, r0, #1084	; 0x43c
 800bdfe:	602f      	str	r7, [r5, #0]
 800be00:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be04:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 800be08:	601a      	str	r2, [r3, #0]
 800be0a:	9634      	str	r6, [sp, #208]	; 0xd0
 800be0c:	9b36      	ldr	r3, [sp, #216]	; 0xd8
 800be0e:	601f      	str	r7, [r3, #0]
 800be10:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 800be12:	601f      	str	r7, [r3, #0]
 800be14:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 800be16:	601f      	str	r7, [r3, #0]
 800be18:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800be1a:	601f      	str	r7, [r3, #0]
 800be1c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800be1e:	601f      	str	r7, [r3, #0]
 800be20:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800be22:	601f      	str	r7, [r3, #0]
 800be24:	f8cc 9000 	str.w	r9, [ip]
 800be28:	f7f4 fe82 	bl	8000b30 <__aeabi_d2f>
 800be2c:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800be30:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800bf70 <m_kalman_3gyro.isra.0.constprop.0+0x1758>
 800be34:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800be38:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800be3c:	f8dd 56d0 	ldr.w	r5, [sp, #1744]	; 0x6d0
 800be40:	ee0b 0a10 	vmov	s22, r0
 800be44:	f501 6189 	add.w	r1, r1, #1096	; 0x448
 800be48:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800be4c:	9119      	str	r1, [sp, #100]	; 0x64
 800be4e:	ee2b 7a07 	vmul.f32	s14, s22, s14
 800be52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800be56:	ed83 7a00 	vstr	s14, [r3]
 800be5a:	f202 4244 	addw	r2, r2, #1092	; 0x444
 800be5e:	9312      	str	r3, [sp, #72]	; 0x48
 800be60:	f200 404c 	addw	r0, r0, #1100	; 0x44c
 800be64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800be66:	901a      	str	r0, [sp, #104]	; 0x68
 800be68:	6017      	str	r7, [r2, #0]
 800be6a:	f8c3 9000 	str.w	r9, [r3]
 800be6e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800be70:	9220      	str	r2, [sp, #128]	; 0x80
 800be72:	601f      	str	r7, [r3, #0]
 800be74:	f505 668a 	add.w	r6, r5, #1104	; 0x450
 800be78:	2000      	movs	r0, #0
 800be7a:	2100      	movs	r1, #0
 800be7c:	f505 658b 	add.w	r5, r5, #1112	; 0x458
 800be80:	2232      	movs	r2, #50	; 0x32
 800be82:	2300      	movs	r3, #0
 800be84:	e9c6 0100 	strd	r0, r1, [r6]
 800be88:	e9c5 2300 	strd	r2, r3, [r5]
 800be8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be92:	ab70      	add	r3, sp, #448	; 0x1c0
 800be94:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800be98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be9a:	ca07      	ldmia	r2, {r0, r1, r2}
 800be9c:	ad73      	add	r5, sp, #460	; 0x1cc
 800be9e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800bea2:	9a08      	ldr	r2, [sp, #32]
 800bea4:	edd3 7a00 	vldr	s15, [r3]
 800bea8:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800beac:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800beb0:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800beb4:	691f      	ldr	r7, [r3, #16]
 800beb6:	695e      	ldr	r6, [r3, #20]
 800beb8:	ca07      	ldmia	r2, {r0, r1, r2}
 800beba:	ad76      	add	r5, sp, #472	; 0x1d8
 800bebc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800bec0:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800bec4:	699d      	ldr	r5, [r3, #24]
 800bec6:	69d8      	ldr	r0, [r3, #28]
 800bec8:	6a19      	ldr	r1, [r3, #32]
 800beca:	f502 628c 	add.w	r2, r2, #1120	; 0x460
 800bece:	9210      	str	r2, [sp, #64]	; 0x40
 800bed0:	4613      	mov	r3, r2
 800bed2:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800bed6:	f602 0298 	addw	r2, r2, #2200	; 0x898
 800beda:	edc3 7a00 	vstr	s15, [r3]
 800bede:	f8c3 9004 	str.w	r9, [r3, #4]
 800bee2:	f8c3 e008 	str.w	lr, [r3, #8]
 800bee6:	f8c3 c00c 	str.w	ip, [r3, #12]
 800beea:	611f      	str	r7, [r3, #16]
 800beec:	615e      	str	r6, [r3, #20]
 800beee:	619d      	str	r5, [r3, #24]
 800bef0:	61d8      	str	r0, [r3, #28]
 800bef2:	6219      	str	r1, [r3, #32]
 800bef4:	3324      	adds	r3, #36	; 0x24
 800bef6:	4293      	cmp	r3, r2
 800bef8:	d1ef      	bne.n	800beda <m_kalman_3gyro.isra.0.constprop.0+0x16c2>
 800befa:	f8dd 26b0 	ldr.w	r2, [sp, #1712]	; 0x6b0
 800befe:	6812      	ldr	r2, [r2, #0]
 800bf00:	601a      	str	r2, [r3, #0]
 800bf02:	f8dd 36b0 	ldr.w	r3, [sp, #1712]	; 0x6b0
 800bf06:	685a      	ldr	r2, [r3, #4]
 800bf08:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800bf0c:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800bf10:	601a      	str	r2, [r3, #0]
 800bf12:	f8dd 36b0 	ldr.w	r3, [sp, #1712]	; 0x6b0
 800bf16:	6899      	ldr	r1, [r3, #8]
 800bf18:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800bf1c:	f503 620a 	add.w	r2, r3, #2208	; 0x8a0
 800bf20:	2300      	movs	r3, #0
 800bf22:	6011      	str	r1, [r2, #0]
 800bf24:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800bf28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf2c:	f881 38a4 	strb.w	r3, [r1, #2212]	; 0x8a4
 800bf30:	f8c1 38a6 	str.w	r3, [r1, #2214]	; 0x8a6
 800bf34:	f881 38ad 	strb.w	r3, [r1, #2221]	; 0x8ad
 800bf38:	f881 38ae 	strb.w	r3, [r1, #2222]	; 0x8ae
 800bf3c:	f8c1 38b0 	str.w	r3, [r1, #2224]	; 0x8b0
 800bf40:	f8a1 28aa 	strh.w	r2, [r1, #2218]	; 0x8aa
 800bf44:	f7fe bdcd 	b.w	800aae2 <m_kalman_3gyro.isra.0.constprop.0+0x2ca>
 800bf48:	4f0a      	ldr	r7, [pc, #40]	; (800bf74 <m_kalman_3gyro.isra.0.constprop.0+0x175c>)
 800bf4a:	2600      	movs	r6, #0
 800bf4c:	e42a      	b.n	800b7a4 <m_kalman_3gyro.isra.0.constprop.0+0xf8c>
 800bf4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800bf50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bf54:	edc3 7a00 	vstr	s15, [r3]
 800bf58:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800bf5a:	eeb0 6a67 	vmov.f32	s12, s15
 800bf5e:	edc3 7a00 	vstr	s15, [r3]
 800bf62:	f7ff bbc7 	b.w	800b6f4 <m_kalman_3gyro.isra.0.constprop.0+0xedc>
 800bf66:	bf00      	nop
 800bf68:	3f666666 	.word	0x3f666666
 800bf6c:	40a00000 	.word	0x40a00000
 800bf70:	3ca3d70a 	.word	0x3ca3d70a
 800bf74:	3ff00000 	.word	0x3ff00000
 800bf78:	00000000 	.word	0x00000000
 800bf7c:	3d088889 	.word	0x3d088889
 800bf80:	42480000 	.word	0x42480000
 800bf84:	3c23d70a 	.word	0x3c23d70a
 800bf88:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 800bf8c:	ed5f 7a06 	vldr	s15, [pc, #-24]	; 800bf78 <m_kalman_3gyro.isra.0.constprop.0+0x1760>
 800bf90:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800bf94:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 800bf96:	edc3 7af5 	vstr	s15, [r3, #980]	; 0x3d4
 800bf9a:	edc3 7af6 	vstr	s15, [r3, #984]	; 0x3d8
 800bf9e:	edc3 7af7 	vstr	s15, [r3, #988]	; 0x3dc
 800bfa2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bfa4:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800bfa8:	eeb0 7a67 	vmov.f32	s14, s15
 800bfac:	eef0 6a67 	vmov.f32	s13, s15
 800bfb0:	eeb0 6a67 	vmov.f32	s12, s15
 800bfb4:	461c      	mov	r4, r3
 800bfb6:	f503 6587 	add.w	r5, r3, #1080	; 0x438
 800bfba:	edd3 7a06 	vldr	s15, [r3, #24]
 800bfbe:	edd2 5a00 	vldr	s11, [r2]
 800bfc2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800bfc6:	3324      	adds	r3, #36	; 0x24
 800bfc8:	ee36 6a27 	vadd.f32	s12, s12, s15
 800bfcc:	320c      	adds	r2, #12
 800bfce:	ed81 6af5 	vstr	s12, [r1, #980]	; 0x3d4
 800bfd2:	ed53 7a02 	vldr	s15, [r3, #-8]
 800bfd6:	ed52 5a02 	vldr	s11, [r2, #-8]
 800bfda:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800bfde:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800bfe2:	edc1 6af6 	vstr	s13, [r1, #984]	; 0x3d8
 800bfe6:	ed53 7a01 	vldr	s15, [r3, #-4]
 800bfea:	ed52 5a01 	vldr	s11, [r2, #-4]
 800bfee:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800bff2:	429d      	cmp	r5, r3
 800bff4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bff8:	ed81 7af7 	vstr	s14, [r1, #988]	; 0x3dc
 800bffc:	d1dd      	bne.n	800bfba <m_kalman_3gyro.isra.0.constprop.0+0x17a2>
 800bffe:	ed5f 7a21 	vldr	s15, [pc, #-132]	; 800bf7c <m_kalman_3gyro.isra.0.constprop.0+0x1764>
 800c002:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c006:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800c008:	ee26 6a27 	vmul.f32	s12, s12, s15
 800c00c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c010:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c014:	ed83 6af5 	vstr	s12, [r3, #980]	; 0x3d4
 800c018:	edc3 6af6 	vstr	s13, [r3, #984]	; 0x3d8
 800c01c:	ed83 7af7 	vstr	s14, [r3, #988]	; 0x3dc
 800c020:	f503 6305 	add.w	r3, r3, #2128	; 0x850
 800c024:	681a      	ldr	r2, [r3, #0]
 800c026:	6859      	ldr	r1, [r3, #4]
 800c028:	625a      	str	r2, [r3, #36]	; 0x24
 800c02a:	689a      	ldr	r2, [r3, #8]
 800c02c:	6299      	str	r1, [r3, #40]	; 0x28
 800c02e:	62da      	str	r2, [r3, #44]	; 0x2c
 800c030:	68d9      	ldr	r1, [r3, #12]
 800c032:	691a      	ldr	r2, [r3, #16]
 800c034:	6319      	str	r1, [r3, #48]	; 0x30
 800c036:	635a      	str	r2, [r3, #52]	; 0x34
 800c038:	6959      	ldr	r1, [r3, #20]
 800c03a:	699a      	ldr	r2, [r3, #24]
 800c03c:	6399      	str	r1, [r3, #56]	; 0x38
 800c03e:	63da      	str	r2, [r3, #60]	; 0x3c
 800c040:	69d9      	ldr	r1, [r3, #28]
 800c042:	6a1a      	ldr	r2, [r3, #32]
 800c044:	6419      	str	r1, [r3, #64]	; 0x40
 800c046:	645a      	str	r2, [r3, #68]	; 0x44
 800c048:	3b24      	subs	r3, #36	; 0x24
 800c04a:	4298      	cmp	r0, r3
 800c04c:	d1ea      	bne.n	800c024 <m_kalman_3gyro.isra.0.constprop.0+0x180c>
 800c04e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c050:	9910      	ldr	r1, [sp, #64]	; 0x40
 800c052:	6813      	ldr	r3, [r2, #0]
 800c054:	600b      	str	r3, [r1, #0]
 800c056:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c058:	981c      	ldr	r0, [sp, #112]	; 0x70
 800c05a:	680b      	ldr	r3, [r1, #0]
 800c05c:	6003      	str	r3, [r0, #0]
 800c05e:	9808      	ldr	r0, [sp, #32]
 800c060:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 800c062:	6803      	ldr	r3, [r0, #0]
 800c064:	6033      	str	r3, [r6, #0]
 800c066:	9e31      	ldr	r6, [sp, #196]	; 0xc4
 800c068:	6853      	ldr	r3, [r2, #4]
 800c06a:	6033      	str	r3, [r6, #0]
 800c06c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c06e:	684b      	ldr	r3, [r1, #4]
 800c070:	6033      	str	r3, [r6, #0]
 800c072:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800c074:	6843      	ldr	r3, [r0, #4]
 800c076:	6033      	str	r3, [r6, #0]
 800c078:	6893      	ldr	r3, [r2, #8]
 800c07a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c07c:	6013      	str	r3, [r2, #0]
 800c07e:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 800c080:	688b      	ldr	r3, [r1, #8]
 800c082:	6013      	str	r3, [r2, #0]
 800c084:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c086:	6883      	ldr	r3, [r0, #8]
 800c088:	6013      	str	r3, [r2, #0]
 800c08a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c08c:	2b02      	cmp	r3, #2
 800c08e:	f001 81a7 	beq.w	800d3e0 <m_kalman_3gyro.isra.0.constprop.0+0x2bc8>
 800c092:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 800c096:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
 800c09a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a2:	f301 8544 	bgt.w	800db2e <m_kalman_3gyro.isra.0.constprop.0+0x3316>
 800c0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	f041 854c 	bne.w	800db46 <m_kalman_3gyro.isra.0.constprop.0+0x332e>
 800c0ae:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c0b2:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800c0b6:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800c0ba:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800c0be:	f8d1 10a0 	ldr.w	r1, [r1, #160]	; 0xa0
 800c0c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c0c6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 800c0ca:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 800c0ce:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	67c1      	str	r1, [r0, #124]	; 0x7c
 800c0d6:	f8a0 3202 	strh.w	r3, [r0, #514]	; 0x202
 800c0da:	f880 3204 	strb.w	r3, [r0, #516]	; 0x204
 800c0de:	f8c0 345c 	str.w	r3, [r0, #1116]	; 0x45c
 800c0e2:	2a00      	cmp	r2, #0
 800c0e4:	f001 8171 	beq.w	800d3ca <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 800c0e8:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 800c0ec:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 800c0f0:	ed5f 7a5d 	vldr	s15, [pc, #-372]	; 800bf80 <m_kalman_3gyro.isra.0.constprop.0+0x1768>
 800c0f4:	eef4 aae7 	vcmpe.f32	s21, s15
 800c0f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0fc:	f2c1 80e3 	blt.w	800d2c6 <m_kalman_3gyro.isra.0.constprop.0+0x2aae>
 800c100:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c104:	2300      	movs	r3, #0
 800c106:	f8a2 3202 	strh.w	r3, [r2, #514]	; 0x202
 800c10a:	f882 3204 	strb.w	r3, [r2, #516]	; 0x204
 800c10e:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
 800c112:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800c116:	9920      	ldr	r1, [sp, #128]	; 0x80
 800c118:	edd3 7a08 	vldr	s15, [r3, #32]
 800c11c:	edd3 6a06 	vldr	s13, [r3, #24]
 800c120:	ed93 7a07 	vldr	s14, [r3, #28]
 800c124:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 800c128:	ee66 6aaa 	vmul.f32	s13, s13, s21
 800c12c:	ee27 7a2a 	vmul.f32	s14, s14, s21
 800c130:	ee67 aaaa 	vmul.f32	s21, s15, s21
 800c134:	edc3 6a06 	vstr	s13, [r3, #24]
 800c138:	ed83 7a07 	vstr	s14, [r3, #28]
 800c13c:	edc3 aa08 	vstr	s21, [r3, #32]
 800c140:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c142:	edd1 7a00 	vldr	s15, [r1]
 800c146:	ed93 6a00 	vldr	s12, [r3]
 800c14a:	ed92 7a00 	vldr	s14, [r2]
 800c14e:	edd2 6a01 	vldr	s13, [r2, #4]
 800c152:	ee26 6a27 	vmul.f32	s12, s12, s15
 800c156:	edd2 7a02 	vldr	s15, [r2, #8]
 800c15a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c15e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c162:	ed82 7a00 	vstr	s14, [r2]
 800c166:	ed93 6a00 	vldr	s12, [r3]
 800c16a:	ed91 7a00 	vldr	s14, [r1]
 800c16e:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 800c172:	ee26 6a07 	vmul.f32	s12, s12, s14
 800c176:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c17a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c17e:	ee38 7a07 	vadd.f32	s14, s16, s14
 800c182:	edc2 6a01 	vstr	s13, [r2, #4]
 800c186:	ed93 6a00 	vldr	s12, [r3]
 800c18a:	edd1 6a00 	vldr	s13, [r1]
 800c18e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800c190:	ee66 6a86 	vmul.f32	s13, s13, s12
 800c194:	ee85 6a87 	vdiv.f32	s12, s11, s14
 800c198:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c19c:	edc2 7a02 	vstr	s15, [r2, #8]
 800c1a0:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 800c1a4:	edd3 7a00 	vldr	s15, [r3]
 800c1a8:	edd2 6a03 	vldr	s13, [r2, #12]
 800c1ac:	ed92 7a04 	vldr	s14, [r2, #16]
 800c1b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800c1b4:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 800c1b8:	edc2 6a03 	vstr	s13, [r2, #12]
 800c1bc:	edd3 6a00 	vldr	s13, [r3]
 800c1c0:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 800c1c4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c1c8:	edd2 6a05 	vldr	s13, [r2, #20]
 800c1cc:	ed82 7a04 	vstr	s14, [r2, #16]
 800c1d0:	ed93 7a00 	vldr	s14, [r3]
 800c1d4:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 800c1d8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c1dc:	ee66 6a87 	vmul.f32	s13, s13, s14
 800c1e0:	ee27 7a88 	vmul.f32	s14, s15, s16
 800c1e4:	ed5f 7a99 	vldr	s15, [pc, #-612]	; 800bf84 <m_kalman_3gyro.isra.0.constprop.0+0x176c>
 800c1e8:	edc2 6a05 	vstr	s13, [r2, #20]
 800c1ec:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 800c1f0:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800c1f4:	ed93 7a06 	vldr	s14, [r3, #24]
 800c1f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1fc:	bfa8      	it	ge
 800c1fe:	eef0 7a46 	vmovge.f32	s15, s12
 800c202:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c206:	ed83 7a06 	vstr	s14, [r3, #24]
 800c20a:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
 800c20e:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 800c212:	ee37 7a07 	vadd.f32	s14, s14, s14
 800c216:	ee27 7a08 	vmul.f32	s14, s14, s16
 800c21a:	ed82 7a0a 	vstr	s14, [r2, #40]	; 0x28
 800c21e:	ed93 7a07 	vldr	s14, [r3, #28]
 800c222:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c226:	ed83 7a07 	vstr	s14, [r3, #28]
 800c22a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c22c:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
 800c230:	edd3 6a00 	vldr	s13, [r3]
 800c234:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c236:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c23a:	ed82 7a0b 	vstr	s14, [r2, #44]	; 0x2c
 800c23e:	b3cb      	cbz	r3, 800c2b4 <m_kalman_3gyro.isra.0.constprop.0+0x1a9c>
 800c240:	ed92 7a03 	vldr	s14, [r2, #12]
 800c244:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 800c248:	ee27 7a08 	vmul.f32	s14, s14, s16
 800c24c:	ed82 7a03 	vstr	s14, [r2, #12]
 800c250:	ed93 7a00 	vldr	s14, [r3]
 800c254:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c258:	ed83 7a00 	vstr	s14, [r3]
 800c25c:	ed92 7a04 	vldr	s14, [r2, #16]
 800c260:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 800c264:	ee27 7a08 	vmul.f32	s14, s14, s16
 800c268:	ed82 7a04 	vstr	s14, [r2, #16]
 800c26c:	ed93 7a01 	vldr	s14, [r3, #4]
 800c270:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c274:	ed83 7a01 	vstr	s14, [r3, #4]
 800c278:	ed92 7a05 	vldr	s14, [r2, #20]
 800c27c:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 800c280:	ee27 7a08 	vmul.f32	s14, s14, s16
 800c284:	ed82 7a05 	vstr	s14, [r2, #20]
 800c288:	ed93 7a02 	vldr	s14, [r3, #8]
 800c28c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c290:	ed83 7a02 	vstr	s14, [r3, #8]
 800c294:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
 800c298:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 800c29c:	ee37 7a07 	vadd.f32	s14, s14, s14
 800c2a0:	ee27 8a08 	vmul.f32	s16, s14, s16
 800c2a4:	ed82 8a0a 	vstr	s16, [r2, #40]	; 0x28
 800c2a8:	ed93 7a07 	vldr	s14, [r3, #28]
 800c2ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2b0:	edc3 7a07 	vstr	s15, [r3, #28]
 800c2b4:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 800c2b8:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c2bc:	edd3 7a00 	vldr	s15, [r3]
 800c2c0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c2c4:	ed9d 6a2e 	vldr	s12, [sp, #184]	; 0xb8
 800c2c8:	ed93 7a2e 	vldr	s14, [r3, #184]	; 0xb8
 800c2cc:	eddd 5a2d 	vldr	s11, [sp, #180]	; 0xb4
 800c2d0:	ed89 6a01 	vstr	s12, [r9, #4]
 800c2d4:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800c2d8:	edd3 7a38 	vldr	s15, [r3, #224]	; 0xe0
 800c2dc:	ed83 7a2e 	vstr	s14, [r3, #184]	; 0xb8
 800c2e0:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 800c2e4:	edc9 5a06 	vstr	s11, [r9, #24]
 800c2e8:	ed93 7a01 	vldr	s14, [r3, #4]
 800c2ec:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c2f0:	eee7 7a07 	vfma.f32	s15, s14, s14
 800c2f4:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
 800c2f8:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
 800c2fc:	f8dd 368c 	ldr.w	r3, [sp, #1676]	; 0x68c
 800c300:	edd3 6a02 	vldr	s13, [r3, #8]
 800c304:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c308:	eea6 7aa6 	vfma.f32	s14, s13, s13
 800c30c:	edd3 7a4c 	vldr	s15, [r3, #304]	; 0x130
 800c310:	ed82 7a42 	vstr	s14, [r2, #264]	; 0x108
 800c314:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 800c318:	ed92 7a03 	vldr	s14, [r2, #12]
 800c31c:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c320:	eee7 7a07 	vfma.f32	s15, s14, s14
 800c324:	2300      	movs	r3, #0
 800c326:	f8c9 3000 	str.w	r3, [r9]
 800c32a:	ed92 7a56 	vldr	s14, [r2, #344]	; 0x158
 800c32e:	edc2 7a4c 	vstr	s15, [r2, #304]	; 0x130
 800c332:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 800c336:	eef1 6a46 	vneg.f32	s13, s12
 800c33a:	edc9 6a03 	vstr	s13, [r9, #12]
 800c33e:	edd2 6a04 	vldr	s13, [r2, #16]
 800c342:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c346:	eea6 7aa6 	vfma.f32	s14, s13, s13
 800c34a:	edd2 7a60 	vldr	s15, [r2, #384]	; 0x180
 800c34e:	edd2 6a6a 	vldr	s13, [r2, #424]	; 0x1a8
 800c352:	ed82 7a56 	vstr	s14, [r2, #344]	; 0x158
 800c356:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 800c35a:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800c35e:	ed92 7a05 	vldr	s14, [r2, #20]
 800c362:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c366:	ed9d 5a2c 	vldr	s10, [sp, #176]	; 0xb0
 800c36a:	f8c9 3010 	str.w	r3, [r9, #16]
 800c36e:	eee7 7a07 	vfma.f32	s15, s14, s14
 800c372:	ed92 7a74 	vldr	s14, [r2, #464]	; 0x1d0
 800c376:	edc2 7a60 	vstr	s15, [r2, #384]	; 0x180
 800c37a:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 800c37e:	ed92 6a06 	vldr	s12, [r2, #24]
 800c382:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c386:	eee6 6a06 	vfma.f32	s13, s12, s12
 800c38a:	edd2 7a7e 	vldr	s15, [r2, #504]	; 0x1f8
 800c38e:	edc2 6a6a 	vstr	s13, [r2, #424]	; 0x1a8
 800c392:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 800c396:	edd2 6a07 	vldr	s13, [r2, #28]
 800c39a:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c39e:	eea6 7aa6 	vfma.f32	s14, s13, s13
 800c3a2:	eeb1 6a65 	vneg.f32	s12, s11
 800c3a6:	ed82 7a74 	vstr	s14, [r2, #464]	; 0x1d0
 800c3aa:	f8dd 268c 	ldr.w	r2, [sp, #1676]	; 0x68c
 800c3ae:	ed92 7a08 	vldr	s14, [r2, #32]
 800c3b2:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c3b6:	eee7 7a07 	vfma.f32	s15, s14, s14
 800c3ba:	eef1 5a45 	vneg.f32	s11, s10
 800c3be:	edc2 7a7e 	vstr	s15, [r2, #504]	; 0x1f8
 800c3c2:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 800c3c6:	edc9 5a07 	vstr	s11, [r9, #28]
 800c3ca:	7812      	ldrb	r2, [r2, #0]
 800c3cc:	f881 21fc 	strb.w	r2, [r1, #508]	; 0x1fc
 800c3d0:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 800c3d4:	7812      	ldrb	r2, [r2, #0]
 800c3d6:	f881 21fd 	strb.w	r2, [r1, #509]	; 0x1fd
 800c3da:	f881 21fe 	strb.w	r2, [r1, #510]	; 0x1fe
 800c3de:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 800c3e2:	7852      	ldrb	r2, [r2, #1]
 800c3e4:	f881 21ff 	strb.w	r2, [r1, #511]	; 0x1ff
 800c3e8:	f881 2200 	strb.w	r2, [r1, #512]	; 0x200
 800c3ec:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
 800c3f0:	f8c9 3020 	str.w	r3, [r9, #32]
 800c3f4:	938b      	str	r3, [sp, #556]	; 0x22c
 800c3f6:	938f      	str	r3, [sp, #572]	; 0x23c
 800c3f8:	9393      	str	r3, [sp, #588]	; 0x24c
 800c3fa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c3fc:	7852      	ldrb	r2, [r2, #1]
 800c3fe:	ed89 6a02 	vstr	s12, [r9, #8]
 800c402:	eef1 6a49 	vneg.f32	s13, s18
 800c406:	eeb1 7a69 	vneg.f32	s14, s19
 800c40a:	eef1 7a68 	vneg.f32	s15, s17
 800c40e:	ed89 5a05 	vstr	s10, [r9, #20]
 800c412:	ed8d 9a91 	vstr	s18, [sp, #580]	; 0x244
 800c416:	edcd 6a8d 	vstr	s13, [sp, #564]	; 0x234
 800c41a:	edcd 9a8c 	vstr	s19, [sp, #560]	; 0x230
 800c41e:	ed8d 7a8e 	vstr	s14, [sp, #568]	; 0x238
 800c422:	edcd 8a90 	vstr	s17, [sp, #576]	; 0x240
 800c426:	edcd 7a92 	vstr	s15, [sp, #584]	; 0x248
 800c42a:	f881 2201 	strb.w	r2, [r1, #513]	; 0x201
 800c42e:	b183      	cbz	r3, 800c452 <m_kalman_3gyro.isra.0.constprop.0+0x1c3a>
 800c430:	b17a      	cbz	r2, 800c452 <m_kalman_3gyro.isra.0.constprop.0+0x1c3a>
 800c432:	9b34      	ldr	r3, [sp, #208]	; 0xd0
 800c434:	ed93 7a00 	vldr	s14, [r3]
 800c438:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c43c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c444:	f341 86f5 	ble.w	800e232 <m_kalman_3gyro.isra.0.constprop.0+0x3a1a>
 800c448:	2300      	movs	r3, #0
 800c44a:	f881 31ff 	strb.w	r3, [r1, #511]	; 0x1ff
 800c44e:	f8a1 3200 	strh.w	r3, [r1, #512]	; 0x200
 800c452:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c454:	edd3 7a00 	vldr	s15, [r3]
 800c458:	eef4 7aca 	vcmpe.f32	s15, s20
 800c45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c460:	f2c0 86ae 	blt.w	800d1c0 <m_kalman_3gyro.isra.0.constprop.0+0x29a8>
 800c464:	f50d 63d5 	add.w	r3, sp, #1704	; 0x6a8
 800c468:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c46c:	2200      	movs	r2, #0
 800c46e:	2300      	movs	r3, #0
 800c470:	f7f4 faf6 	bl	8000a60 <__aeabi_dcmpgt>
 800c474:	2800      	cmp	r0, #0
 800c476:	f000 86a3 	beq.w	800d1c0 <m_kalman_3gyro.isra.0.constprop.0+0x29a8>
 800c47a:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c47e:	2300      	movs	r3, #0
 800c480:	f8a2 31fc 	strh.w	r3, [r2, #508]	; 0x1fc
 800c484:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
 800c488:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c48c:	edd2 7a24 	vldr	s15, [r2, #144]	; 0x90
 800c490:	f882 3207 	strb.w	r3, [r2, #519]	; 0x207
 800c494:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800c498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c49c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4a0:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 800c4a4:	dc06      	bgt.n	800c4b4 <m_kalman_3gyro.isra.0.constprop.0+0x1c9c>
 800c4a6:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800c63c <m_kalman_3gyro.isra.0.constprop.0+0x1e24>
 800c4aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c4ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4b2:	d50a      	bpl.n	800c4ca <m_kalman_3gyro.isra.0.constprop.0+0x1cb2>
 800c4b4:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	f8a2 31fc 	strh.w	r3, [r2, #508]	; 0x1fc
 800c4be:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
 800c4c2:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 800c4c6:	f882 3207 	strb.w	r3, [r2, #519]	; 0x207
 800c4ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c4ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c4d2:	eef0 7ae7 	vabs.f32	s15, s15
 800c4d6:	ee17 0a90 	vmov	r0, s15
 800c4da:	f7f3 ffd9 	bl	8000490 <__aeabi_f2d>
 800c4de:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800c4e2:	4604      	mov	r4, r0
 800c4e4:	6818      	ldr	r0, [r3, #0]
 800c4e6:	460d      	mov	r5, r1
 800c4e8:	f7f3 ffd2 	bl	8000490 <__aeabi_f2d>
 800c4ec:	4606      	mov	r6, r0
 800c4ee:	460f      	mov	r7, r1
 800c4f0:	4620      	mov	r0, r4
 800c4f2:	4629      	mov	r1, r5
 800c4f4:	4632      	mov	r2, r6
 800c4f6:	463b      	mov	r3, r7
 800c4f8:	f7f4 faa8 	bl	8000a4c <__aeabi_dcmpge>
 800c4fc:	b908      	cbnz	r0, 800c502 <m_kalman_3gyro.isra.0.constprop.0+0x1cea>
 800c4fe:	4634      	mov	r4, r6
 800c500:	463d      	mov	r5, r7
 800c502:	4620      	mov	r0, r4
 800c504:	4629      	mov	r1, r5
 800c506:	f7f4 fb13 	bl	8000b30 <__aeabi_d2f>
 800c50a:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800c50e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800c640 <m_kalman_3gyro.isra.0.constprop.0+0x1e28>
 800c512:	6018      	str	r0, [r3, #0]
 800c514:	6058      	str	r0, [r3, #4]
 800c516:	6098      	str	r0, [r3, #8]
 800c518:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c51c:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800c520:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c528:	f300 8621 	bgt.w	800d16e <m_kalman_3gyro.isra.0.constprop.0+0x2956>
 800c52c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800c644 <m_kalman_3gyro.isra.0.constprop.0+0x1e2c>
 800c530:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c538:	f100 8619 	bmi.w	800d16e <m_kalman_3gyro.isra.0.constprop.0+0x2956>
 800c53c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800c540:	ee37 8ac8 	vsub.f32	s16, s15, s16
 800c544:	eef0 7ac8 	vabs.f32	s15, s16
 800c548:	ee17 0a90 	vmov	r0, s15
 800c54c:	f7f3 ffa0 	bl	8000490 <__aeabi_f2d>
 800c550:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800c554:	4604      	mov	r4, r0
 800c556:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800c558:	460d      	mov	r5, r1
 800c55a:	f7f3 ff99 	bl	8000490 <__aeabi_f2d>
 800c55e:	4606      	mov	r6, r0
 800c560:	460f      	mov	r7, r1
 800c562:	4620      	mov	r0, r4
 800c564:	4629      	mov	r1, r5
 800c566:	4632      	mov	r2, r6
 800c568:	463b      	mov	r3, r7
 800c56a:	f7f4 fa6f 	bl	8000a4c <__aeabi_dcmpge>
 800c56e:	2800      	cmp	r0, #0
 800c570:	f001 8603 	beq.w	800e17a <m_kalman_3gyro.isra.0.constprop.0+0x3962>
 800c574:	4620      	mov	r0, r4
 800c576:	4629      	mov	r1, r5
 800c578:	f7f4 fada 	bl	8000b30 <__aeabi_d2f>
 800c57c:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800c580:	ed93 7a03 	vldr	s14, [r3, #12]
 800c584:	6298      	str	r0, [r3, #40]	; 0x28
 800c586:	ee68 7a08 	vmul.f32	s15, s16, s16
 800c58a:	ee67 6a07 	vmul.f32	s13, s14, s14
 800c58e:	eef4 7ae6 	vcmpe.f32	s15, s13
 800c592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c596:	f301 85d6 	bgt.w	800e146 <m_kalman_3gyro.isra.0.constprop.0+0x392e>
 800c59a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c59e:	eeb4 bae7 	vcmpe.f32	s22, s15
 800c5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5a6:	f340 85f5 	ble.w	800d194 <m_kalman_3gyro.isra.0.constprop.0+0x297c>
 800c5aa:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	f8a2 31fc 	strh.w	r3, [r2, #508]	; 0x1fc
 800c5b4:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
 800c5b8:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 800c5bc:	ed92 7a09 	vldr	s14, [r2, #36]	; 0x24
 800c5c0:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800c5c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5c8:	ee7b 6a26 	vadd.f32	s13, s22, s13
 800c5cc:	ee37 7a07 	vadd.f32	s14, s14, s14
 800c5d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c5d4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800c5d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c5dc:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800c5e0:	eeb4 bae6 	vcmpe.f32	s22, s13
 800c5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5e8:	ed82 7a09 	vstr	s14, [r2, #36]	; 0x24
 800c5ec:	edc2 7a0b 	vstr	s15, [r2, #44]	; 0x2c
 800c5f0:	dd05      	ble.n	800c5fe <m_kalman_3gyro.isra.0.constprop.0+0x1de6>
 800c5f2:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c5f6:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 800c5fa:	f882 3207 	strb.w	r3, [r2, #519]	; 0x207
 800c5fe:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c602:	f893 38ae 	ldrb.w	r3, [r3, #2222]	; 0x8ae
 800c606:	2b0e      	cmp	r3, #14
 800c608:	d804      	bhi.n	800c614 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 800c60a:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800c60e:	3305      	adds	r3, #5
 800c610:	f882 38ae 	strb.w	r3, [r2, #2222]	; 0x8ae
 800c614:	ab79      	add	r3, sp, #484	; 0x1e4
 800c616:	9300      	str	r3, [sp, #0]
 800c618:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c61c:	eddf 8a0a 	vldr	s17, [pc, #40]	; 800c648 <m_kalman_3gyro.isra.0.constprop.0+0x1e30>
 800c620:	9e03      	ldr	r6, [sp, #12]
 800c622:	f8dd 76d0 	ldr.w	r7, [sp, #1744]	; 0x6d0
 800c626:	3364      	adds	r3, #100	; 0x64
 800c628:	9301      	str	r3, [sp, #4]
 800c62a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c62e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800c632:	f50d 780b 	add.w	r8, sp, #556	; 0x22c
 800c636:	9302      	str	r3, [sp, #8]
 800c638:	e02a      	b.n	800c690 <m_kalman_3gyro.isra.0.constprop.0+0x1e78>
 800c63a:	bf00      	nop
 800c63c:	3e4ccccd 	.word	0x3e4ccccd
 800c640:	3f8f5c29 	.word	0x3f8f5c29
 800c644:	3f59999a 	.word	0x3f59999a
 800c648:	00000000 	.word	0x00000000
 800c64c:	ed18 da03 	vldr	s26, [r8, #-12]
 800c650:	edd8 da00 	vldr	s27, [r8]
 800c654:	ed98 ea03 	vldr	s28, [r8, #12]
 800c658:	9b02      	ldr	r3, [sp, #8]
 800c65a:	ee3d da0d 	vadd.f32	s26, s26, s26
 800c65e:	ee7d daad 	vadd.f32	s27, s27, s27
 800c662:	ee3e ea0e 	vadd.f32	s28, s28, s28
 800c666:	5d9b      	ldrb	r3, [r3, r6]
 800c668:	ed8d da79 	vstr	s26, [sp, #484]	; 0x1e4
 800c66c:	edcd da7a 	vstr	s27, [sp, #488]	; 0x1e8
 800c670:	ed8d ea7b 	vstr	s28, [sp, #492]	; 0x1ec
 800c674:	2b00      	cmp	r3, #0
 800c676:	f040 80f1 	bne.w	800c85c <m_kalman_3gyro.isra.0.constprop.0+0x2044>
 800c67a:	9b00      	ldr	r3, [sp, #0]
 800c67c:	3304      	adds	r3, #4
 800c67e:	9300      	str	r3, [sp, #0]
 800c680:	9b01      	ldr	r3, [sp, #4]
 800c682:	3304      	adds	r3, #4
 800c684:	3601      	adds	r6, #1
 800c686:	9301      	str	r3, [sp, #4]
 800c688:	f108 0804 	add.w	r8, r8, #4
 800c68c:	f109 0904 	add.w	r9, r9, #4
 800c690:	2e02      	cmp	r6, #2
 800c692:	edcd 8a79 	vstr	s17, [sp, #484]	; 0x1e4
 800c696:	edcd 8a7a 	vstr	s17, [sp, #488]	; 0x1e8
 800c69a:	edcd 8a7b 	vstr	s17, [sp, #492]	; 0x1ec
 800c69e:	edcd 8a7c 	vstr	s17, [sp, #496]	; 0x1f0
 800c6a2:	edcd 8a7d 	vstr	s17, [sp, #500]	; 0x1f4
 800c6a6:	edcd 8a7e 	vstr	s17, [sp, #504]	; 0x1f8
 800c6aa:	edcd 8a7f 	vstr	s17, [sp, #508]	; 0x1fc
 800c6ae:	edcd 8a80 	vstr	s17, [sp, #512]	; 0x200
 800c6b2:	edcd 8a81 	vstr	s17, [sp, #516]	; 0x204
 800c6b6:	f240 80ca 	bls.w	800c84e <m_kalman_3gyro.isra.0.constprop.0+0x2036>
 800c6ba:	2e05      	cmp	r6, #5
 800c6bc:	ddc6      	ble.n	800c64c <m_kalman_3gyro.isra.0.constprop.0+0x1e34>
 800c6be:	9b02      	ldr	r3, [sp, #8]
 800c6c0:	9900      	ldr	r1, [sp, #0]
 800c6c2:	5d9b      	ldrb	r3, [r3, r6]
 800c6c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c6c8:	f841 2c0c 	str.w	r2, [r1, #-12]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	f040 857f 	bne.w	800d1d0 <m_kalman_3gyro.isra.0.constprop.0+0x29b8>
 800c6d2:	2e0b      	cmp	r6, #11
 800c6d4:	d1d1      	bne.n	800c67a <m_kalman_3gyro.isra.0.constprop.0+0x1e62>
 800c6d6:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c6da:	edd3 8a26 	vldr	s17, [r3, #152]	; 0x98
 800c6de:	ed93 9a25 	vldr	s18, [r3, #148]	; 0x94
 800c6e2:	ed93 8a27 	vldr	s16, [r3, #156]	; 0x9c
 800c6e6:	ee68 9aa8 	vmul.f32	s19, s17, s17
 800c6ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c6ee:	eee9 9a09 	vfma.f32	s19, s18, s18
 800c6f2:	eee8 9a08 	vfma.f32	s19, s16, s16
 800c6f6:	eef4 9ae7 	vcmpe.f32	s19, s15
 800c6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6fe:	f100 860f 	bmi.w	800d320 <m_kalman_3gyro.isra.0.constprop.0+0x2b08>
 800c702:	ed1f aa2f 	vldr	s20, [pc, #-188]	; 800c648 <m_kalman_3gyro.isra.0.constprop.0+0x1e30>
 800c706:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c70a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	f000 8579 	beq.w	800d204 <m_kalman_3gyro.isra.0.constprop.0+0x29ec>
 800c712:	f8dd 06b8 	ldr.w	r0, [sp, #1720]	; 0x6b8
 800c716:	9907      	ldr	r1, [sp, #28]
 800c718:	2300      	movs	r3, #0
 800c71a:	6003      	str	r3, [r0, #0]
 800c71c:	f8dd 06b8 	ldr.w	r0, [sp, #1720]	; 0x6b8
 800c720:	600b      	str	r3, [r1, #0]
 800c722:	6043      	str	r3, [r0, #4]
 800c724:	f8dd 06b8 	ldr.w	r0, [sp, #1720]	; 0x6b8
 800c728:	604b      	str	r3, [r1, #4]
 800c72a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800c72e:	608b      	str	r3, [r1, #8]
 800c730:	6083      	str	r3, [r0, #8]
 800c732:	60ca      	str	r2, [r1, #12]
 800c734:	60c2      	str	r2, [r0, #12]
 800c736:	9f07      	ldr	r7, [sp, #28]
 800c738:	9904      	ldr	r1, [sp, #16]
 800c73a:	4638      	mov	r0, r7
 800c73c:	f7fb ffaa 	bl	8008694 <m_q2dcm_eml>
 800c740:	ed97 9a01 	vldr	s18, [r7, #4]
 800c744:	edd7 9a00 	vldr	s19, [r7]
 800c748:	edd7 8a02 	vldr	s17, [r7, #8]
 800c74c:	ed97 8a03 	vldr	s16, [r7, #12]
 800c750:	ee69 7a09 	vmul.f32	s15, s18, s18
 800c754:	eee9 7aa9 	vfma.f32	s15, s19, s19
 800c758:	eee8 7aa8 	vfma.f32	s15, s17, s17
 800c75c:	eee8 7a08 	vfma.f32	s15, s16, s16
 800c760:	ee17 0a90 	vmov	r0, s15
 800c764:	f7f3 fe94 	bl	8000490 <__aeabi_f2d>
 800c768:	ec41 0b10 	vmov	d0, r0, r1
 800c76c:	f006 fc4c 	bl	8013008 <sqrt>
 800c770:	ec51 0b10 	vmov	r0, r1, d0
 800c774:	f7f4 f9dc 	bl	8000b30 <__aeabi_d2f>
 800c778:	ee07 0a90 	vmov	s15, r0
 800c77c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c780:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800c784:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c788:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800c78a:	9d33      	ldr	r5, [sp, #204]	; 0xcc
 800c78c:	f503 7616 	add.w	r6, r3, #600	; 0x258
 800c790:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800c794:	ee29 9a27 	vmul.f32	s18, s18, s15
 800c798:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800c79c:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c7a0:	edc7 9a00 	vstr	s19, [r7]
 800c7a4:	ed87 9a01 	vstr	s18, [r7, #4]
 800c7a8:	edc7 8a02 	vstr	s17, [r7, #8]
 800c7ac:	ed87 8a03 	vstr	s16, [r7, #12]
 800c7b0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800c7b4:	f8dd 76b4 	ldr.w	r7, [sp, #1716]	; 0x6b4
 800c7b8:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 800c7bc:	6821      	ldr	r1, [r4, #0]
 800c7be:	6862      	ldr	r2, [r4, #4]
 800c7c0:	68a3      	ldr	r3, [r4, #8]
 800c7c2:	68e0      	ldr	r0, [r4, #12]
 800c7c4:	60e8      	str	r0, [r5, #12]
 800c7c6:	3410      	adds	r4, #16
 800c7c8:	42b4      	cmp	r4, r6
 800c7ca:	6029      	str	r1, [r5, #0]
 800c7cc:	606a      	str	r2, [r5, #4]
 800c7ce:	60ab      	str	r3, [r5, #8]
 800c7d0:	f105 0510 	add.w	r5, r5, #16
 800c7d4:	d1f2      	bne.n	800c7bc <m_kalman_3gyro.isra.0.constprop.0+0x1fa4>
 800c7d6:	6823      	ldr	r3, [r4, #0]
 800c7d8:	602b      	str	r3, [r5, #0]
 800c7da:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c7de:	f8dd 26c0 	ldr.w	r2, [sp, #1728]	; 0x6c0
 800c7e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c7e6:	6013      	str	r3, [r2, #0]
 800c7e8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c7ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c7f0:	6053      	str	r3, [r2, #4]
 800c7f2:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c7f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c7fa:	6093      	str	r3, [r2, #8]
 800c7fc:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c800:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c804:	60d3      	str	r3, [r2, #12]
 800c806:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c80a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c80e:	6113      	str	r3, [r2, #16]
 800c810:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c814:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c818:	6153      	str	r3, [r2, #20]
 800c81a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c81e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c822:	6193      	str	r3, [r2, #24]
 800c824:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c828:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c82c:	61d3      	str	r3, [r2, #28]
 800c82e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800c832:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800c836:	6213      	str	r3, [r2, #32]
 800c838:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f8dd 26bc 	ldr.w	r2, [sp, #1724]	; 0x6bc
 800c840:	6013      	str	r3, [r2, #0]
 800c842:	f20d 6d24 	addw	sp, sp, #1572	; 0x624
 800c846:	ecbd 8b10 	vpop	{d8-d15}
 800c84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c84e:	ed99 da00 	vldr	s26, [r9]
 800c852:	edd9 da03 	vldr	s27, [r9, #12]
 800c856:	ed99 ea06 	vldr	s28, [r9, #24]
 800c85a:	e6fd      	b.n	800c658 <m_kalman_3gyro.isra.0.constprop.0+0x1e40>
 800c85c:	eef0 ea68 	vmov.f32	s29, s17
 800c860:	eef0 5a68 	vmov.f32	s11, s17
 800c864:	eeb0 6a68 	vmov.f32	s12, s17
 800c868:	eef0 6a68 	vmov.f32	s13, s17
 800c86c:	eef0 fa68 	vmov.f32	s31, s17
 800c870:	eeb0 fa68 	vmov.f32	s30, s17
 800c874:	ad70      	add	r5, sp, #448	; 0x1c0
 800c876:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800c87a:	9303      	str	r3, [sp, #12]
 800c87c:	462a      	mov	r2, r5
 800c87e:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 800c882:	edc5 8a00 	vstr	s17, [r5]
 800c886:	edc5 8a01 	vstr	s17, [r5, #4]
 800c88a:	edc5 8a02 	vstr	s17, [r5, #8]
 800c88e:	edc5 8a03 	vstr	s17, [r5, #12]
 800c892:	edc5 8a04 	vstr	s17, [r5, #16]
 800c896:	edc5 8a05 	vstr	s17, [r5, #20]
 800c89a:	edc5 8a06 	vstr	s17, [r5, #24]
 800c89e:	edc5 8a07 	vstr	s17, [r5, #28]
 800c8a2:	edc5 8a08 	vstr	s17, [r5, #32]
 800c8a6:	ecb3 7a01 	vldmia	r3!, {s14}
 800c8aa:	ecf2 7a01 	vldmia	r2!, {s15}
 800c8ae:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c8b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8b6:	d006      	beq.n	800c8c6 <m_kalman_3gyro.isra.0.constprop.0+0x20ae>
 800c8b8:	eeb5 da40 	vcmp.f32	s26, #0.0
 800c8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8c0:	bf18      	it	ne
 800c8c2:	eeed 7a07 	vfmane.f32	s15, s26, s14
 800c8c6:	ed93 7a08 	vldr	s14, [r3, #32]
 800c8ca:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c8ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8d2:	d006      	beq.n	800c8e2 <m_kalman_3gyro.isra.0.constprop.0+0x20ca>
 800c8d4:	eef5 da40 	vcmp.f32	s27, #0.0
 800c8d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8dc:	bf18      	it	ne
 800c8de:	eeed 7a87 	vfmane.f32	s15, s27, s14
 800c8e2:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800c8e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c8ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8ee:	d006      	beq.n	800c8fe <m_kalman_3gyro.isra.0.constprop.0+0x20e6>
 800c8f0:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800c8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8f8:	bf18      	it	ne
 800c8fa:	eeee 7a07 	vfmane.f32	s15, s28, s14
 800c8fe:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800c902:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c90a:	d006      	beq.n	800c91a <m_kalman_3gyro.isra.0.constprop.0+0x2102>
 800c90c:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800c910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c914:	bf18      	it	ne
 800c916:	eeef 7a07 	vfmane.f32	s15, s30, s14
 800c91a:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 800c91e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c926:	d006      	beq.n	800c936 <m_kalman_3gyro.isra.0.constprop.0+0x211e>
 800c928:	eef5 fa40 	vcmp.f32	s31, #0.0
 800c92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c930:	bf18      	it	ne
 800c932:	eeef 7a87 	vfmane.f32	s15, s31, s14
 800c936:	ed93 7a2c 	vldr	s14, [r3, #176]	; 0xb0
 800c93a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c93e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c942:	d006      	beq.n	800c952 <m_kalman_3gyro.isra.0.constprop.0+0x213a>
 800c944:	eef5 6a40 	vcmp.f32	s13, #0.0
 800c948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c94c:	bf18      	it	ne
 800c94e:	eee6 7a87 	vfmane.f32	s15, s13, s14
 800c952:	ed93 7a35 	vldr	s14, [r3, #212]	; 0xd4
 800c956:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c95a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c95e:	d006      	beq.n	800c96e <m_kalman_3gyro.isra.0.constprop.0+0x2156>
 800c960:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800c964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c968:	bf18      	it	ne
 800c96a:	eee6 7a07 	vfmane.f32	s15, s12, s14
 800c96e:	ed93 7a3e 	vldr	s14, [r3, #248]	; 0xf8
 800c972:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c97a:	d006      	beq.n	800c98a <m_kalman_3gyro.isra.0.constprop.0+0x2172>
 800c97c:	eef5 5a40 	vcmp.f32	s11, #0.0
 800c980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c984:	bf18      	it	ne
 800c986:	eee5 7a87 	vfmane.f32	s15, s11, s14
 800c98a:	ed93 7a47 	vldr	s14, [r3, #284]	; 0x11c
 800c98e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c996:	d006      	beq.n	800c9a6 <m_kalman_3gyro.isra.0.constprop.0+0x218e>
 800c998:	eef5 ea40 	vcmp.f32	s29, #0.0
 800c99c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9a0:	bf18      	it	ne
 800c9a2:	eeee 7a87 	vfmane.f32	s15, s29, s14
 800c9a6:	428b      	cmp	r3, r1
 800c9a8:	ed42 7a01 	vstr	s15, [r2, #-4]
 800c9ac:	f47f af7b 	bne.w	800c8a6 <m_kalman_3gyro.isra.0.constprop.0+0x208e>
 800c9b0:	eeb5 da40 	vcmp.f32	s26, #0.0
 800c9b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9b8:	f000 83d6 	beq.w	800d168 <m_kalman_3gyro.isra.0.constprop.0+0x2950>
 800c9bc:	edd5 7a00 	vldr	s15, [r5]
 800c9c0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c9c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9c8:	d001      	beq.n	800c9ce <m_kalman_3gyro.isra.0.constprop.0+0x21b6>
 800c9ca:	ee67 7a8d 	vmul.f32	s15, s15, s26
 800c9ce:	eef5 da40 	vcmp.f32	s27, #0.0
 800c9d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9d6:	ed95 ba01 	vldr	s22, [r5, #4]
 800c9da:	d006      	beq.n	800c9ea <m_kalman_3gyro.isra.0.constprop.0+0x21d2>
 800c9dc:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800c9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9e4:	bf18      	it	ne
 800c9e6:	eeeb 7a2d 	vfmane.f32	s15, s22, s27
 800c9ea:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800c9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9f2:	edd5 9a02 	vldr	s19, [r5, #8]
 800c9f6:	d006      	beq.n	800ca06 <m_kalman_3gyro.isra.0.constprop.0+0x21ee>
 800c9f8:	eef5 9a40 	vcmp.f32	s19, #0.0
 800c9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca00:	bf18      	it	ne
 800ca02:	eee9 7a8e 	vfmane.f32	s15, s19, s28
 800ca06:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800ca0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca0e:	d008      	beq.n	800ca22 <m_kalman_3gyro.isra.0.constprop.0+0x220a>
 800ca10:	ed95 7a03 	vldr	s14, [r5, #12]
 800ca14:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ca18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca1c:	bf18      	it	ne
 800ca1e:	eee7 7a0f 	vfmane.f32	s15, s14, s30
 800ca22:	eef5 fa40 	vcmp.f32	s31, #0.0
 800ca26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca2a:	d008      	beq.n	800ca3e <m_kalman_3gyro.isra.0.constprop.0+0x2226>
 800ca2c:	ed95 7a04 	vldr	s14, [r5, #16]
 800ca30:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ca34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca38:	bf18      	it	ne
 800ca3a:	eee7 7a2f 	vfmane.f32	s15, s14, s31
 800ca3e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800ca42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca46:	d008      	beq.n	800ca5a <m_kalman_3gyro.isra.0.constprop.0+0x2242>
 800ca48:	ed95 7a05 	vldr	s14, [r5, #20]
 800ca4c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ca50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca54:	bf18      	it	ne
 800ca56:	eee7 7a26 	vfmane.f32	s15, s14, s13
 800ca5a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ca5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca62:	d008      	beq.n	800ca76 <m_kalman_3gyro.isra.0.constprop.0+0x225e>
 800ca64:	ed95 7a06 	vldr	s14, [r5, #24]
 800ca68:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ca6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca70:	bf18      	it	ne
 800ca72:	eee7 7a06 	vfmane.f32	s15, s14, s12
 800ca76:	eef5 5a40 	vcmp.f32	s11, #0.0
 800ca7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca7e:	d008      	beq.n	800ca92 <m_kalman_3gyro.isra.0.constprop.0+0x227a>
 800ca80:	ed95 7a07 	vldr	s14, [r5, #28]
 800ca84:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800ca88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca8c:	bf18      	it	ne
 800ca8e:	eee7 7a25 	vfmane.f32	s15, s14, s11
 800ca92:	eef5 ea40 	vcmp.f32	s29, #0.0
 800ca96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca9a:	d008      	beq.n	800caae <m_kalman_3gyro.isra.0.constprop.0+0x2296>
 800ca9c:	ed95 7a08 	vldr	s14, [r5, #32]
 800caa0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800caa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caa8:	bf18      	it	ne
 800caaa:	eee7 7a2e 	vfmane.f32	s15, s14, s29
 800caae:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800cab2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800cab6:	ed93 7a00 	vldr	s14, [r3]
 800caba:	ed95 8a00 	vldr	s16, [r5]
 800cabe:	edd5 ba03 	vldr	s23, [r5, #12]
 800cac2:	ed95 ca04 	vldr	s24, [r5, #16]
 800cac6:	edd5 ca05 	vldr	s25, [r5, #20]
 800caca:	edd5 aa06 	vldr	s21, [r5, #24]
 800cace:	ed95 aa07 	vldr	s20, [r5, #28]
 800cad2:	ed95 5a08 	vldr	s10, [r5, #32]
 800cad6:	eee7 7a07 	vfma.f32	s15, s14, s14
 800cada:	2e05      	cmp	r6, #5
 800cadc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cae0:	ee87 9a27 	vdiv.f32	s18, s14, s15
 800cae4:	ee2b ba09 	vmul.f32	s22, s22, s18
 800cae8:	ee69 9a89 	vmul.f32	s19, s19, s18
 800caec:	ee29 8a08 	vmul.f32	s16, s18, s16
 800caf0:	ee69 ba2b 	vmul.f32	s23, s18, s23
 800caf4:	ee29 ca0c 	vmul.f32	s24, s18, s24
 800caf8:	ee69 ca2c 	vmul.f32	s25, s18, s25
 800cafc:	ee69 aa2a 	vmul.f32	s21, s18, s21
 800cb00:	ee29 aa0a 	vmul.f32	s20, s18, s20
 800cb04:	ee29 9a05 	vmul.f32	s18, s18, s10
 800cb08:	ed8d ba68 	vstr	s22, [sp, #416]	; 0x1a0
 800cb0c:	edcd 9a69 	vstr	s19, [sp, #420]	; 0x1a4
 800cb10:	ed8d 8a67 	vstr	s16, [sp, #412]	; 0x19c
 800cb14:	edcd ba6a 	vstr	s23, [sp, #424]	; 0x1a8
 800cb18:	ed8d ca6b 	vstr	s24, [sp, #428]	; 0x1ac
 800cb1c:	edcd ca6c 	vstr	s25, [sp, #432]	; 0x1b0
 800cb20:	edcd aa6d 	vstr	s21, [sp, #436]	; 0x1b4
 800cb24:	ed8d aa6e 	vstr	s20, [sp, #440]	; 0x1b8
 800cb28:	ed8d 9a6f 	vstr	s18, [sp, #444]	; 0x1bc
 800cb2c:	f240 8087 	bls.w	800cc3e <m_kalman_3gyro.isra.0.constprop.0+0x2426>
 800cb30:	9b01      	ldr	r3, [sp, #4]
 800cb32:	eeb5 da40 	vcmp.f32	s26, #0.0
 800cb36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb3a:	ed93 7a00 	vldr	s14, [r3]
 800cb3e:	f000 835e 	beq.w	800d1fe <m_kalman_3gyro.isra.0.constprop.0+0x29e6>
 800cb42:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800cb46:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cb4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb4e:	d001      	beq.n	800cb54 <m_kalman_3gyro.isra.0.constprop.0+0x233c>
 800cb50:	ee67 7a8d 	vmul.f32	s15, s15, s26
 800cb54:	eef5 da40 	vcmp.f32	s27, #0.0
 800cb58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb5c:	d008      	beq.n	800cb70 <m_kalman_3gyro.isra.0.constprop.0+0x2358>
 800cb5e:	ed97 5a26 	vldr	s10, [r7, #152]	; 0x98
 800cb62:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800cb66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb6a:	bf18      	it	ne
 800cb6c:	eee5 7a2d 	vfmane.f32	s15, s10, s27
 800cb70:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800cb74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb78:	d008      	beq.n	800cb8c <m_kalman_3gyro.isra.0.constprop.0+0x2374>
 800cb7a:	ed97 5a27 	vldr	s10, [r7, #156]	; 0x9c
 800cb7e:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800cb82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb86:	bf18      	it	ne
 800cb88:	eee5 7a0e 	vfmane.f32	s15, s10, s28
 800cb8c:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800cb90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb94:	d008      	beq.n	800cba8 <m_kalman_3gyro.isra.0.constprop.0+0x2390>
 800cb96:	ed97 5a28 	vldr	s10, [r7, #160]	; 0xa0
 800cb9a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800cb9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cba2:	bf18      	it	ne
 800cba4:	eee5 7a0f 	vfmane.f32	s15, s10, s30
 800cba8:	eef5 fa40 	vcmp.f32	s31, #0.0
 800cbac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbb0:	d008      	beq.n	800cbc4 <m_kalman_3gyro.isra.0.constprop.0+0x23ac>
 800cbb2:	ed97 5a29 	vldr	s10, [r7, #164]	; 0xa4
 800cbb6:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800cbba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbbe:	bf18      	it	ne
 800cbc0:	eee5 7a2f 	vfmane.f32	s15, s10, s31
 800cbc4:	eef5 6a40 	vcmp.f32	s13, #0.0
 800cbc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbcc:	d008      	beq.n	800cbe0 <m_kalman_3gyro.isra.0.constprop.0+0x23c8>
 800cbce:	ed97 5a2a 	vldr	s10, [r7, #168]	; 0xa8
 800cbd2:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800cbd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbda:	bf18      	it	ne
 800cbdc:	eee5 7a26 	vfmane.f32	s15, s10, s13
 800cbe0:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800cbe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbe8:	d008      	beq.n	800cbfc <m_kalman_3gyro.isra.0.constprop.0+0x23e4>
 800cbea:	ed97 5a2b 	vldr	s10, [r7, #172]	; 0xac
 800cbee:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800cbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbf6:	bf18      	it	ne
 800cbf8:	eee5 7a06 	vfmane.f32	s15, s10, s12
 800cbfc:	eef5 5a40 	vcmp.f32	s11, #0.0
 800cc00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc04:	d008      	beq.n	800cc18 <m_kalman_3gyro.isra.0.constprop.0+0x2400>
 800cc06:	ed97 5a2c 	vldr	s10, [r7, #176]	; 0xb0
 800cc0a:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800cc0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc12:	bf18      	it	ne
 800cc14:	eee5 7a25 	vfmane.f32	s15, s10, s11
 800cc18:	eef5 ea40 	vcmp.f32	s29, #0.0
 800cc1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc20:	d008      	beq.n	800cc34 <m_kalman_3gyro.isra.0.constprop.0+0x241c>
 800cc22:	ed97 5a2d 	vldr	s10, [r7, #180]	; 0xb4
 800cc26:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800cc2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc2e:	bf18      	it	ne
 800cc30:	eee5 7a2e 	vfmane.f32	s15, s10, s29
 800cc34:	9b01      	ldr	r3, [sp, #4]
 800cc36:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc3a:	edc3 7a00 	vstr	s15, [r3]
 800cc3e:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800cc42:	2100      	movs	r1, #0
 800cc44:	4658      	mov	r0, fp
 800cc46:	edcd 5a08 	vstr	s11, [sp, #32]
 800cc4a:	ed8d 6a06 	vstr	s12, [sp, #24]
 800cc4e:	edcd 6a05 	vstr	s13, [sp, #20]
 800cc52:	f005 fff7 	bl	8012c44 <memset>
 800cc56:	eddd 5a08 	vldr	s11, [sp, #32]
 800cc5a:	ed9d 6a06 	vldr	s12, [sp, #24]
 800cc5e:	eddd 6a05 	vldr	s13, [sp, #20]
 800cc62:	465c      	mov	r4, fp
 800cc64:	aa67      	add	r2, sp, #412	; 0x19c
 800cc66:	465b      	mov	r3, fp
 800cc68:	ecf2 7a01 	vldmia	r2!, {s15}
 800cc6c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cc70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc74:	d062      	beq.n	800cd3c <m_kalman_3gyro.isra.0.constprop.0+0x2524>
 800cc76:	eeb5 da40 	vcmp.f32	s26, #0.0
 800cc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc7e:	d005      	beq.n	800cc8c <m_kalman_3gyro.isra.0.constprop.0+0x2474>
 800cc80:	ed93 7a00 	vldr	s14, [r3]
 800cc84:	eea7 7a8d 	vfma.f32	s14, s15, s26
 800cc88:	ed83 7a00 	vstr	s14, [r3]
 800cc8c:	eef5 da40 	vcmp.f32	s27, #0.0
 800cc90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc94:	d005      	beq.n	800cca2 <m_kalman_3gyro.isra.0.constprop.0+0x248a>
 800cc96:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800cc9a:	eea7 7aad 	vfma.f32	s14, s15, s27
 800cc9e:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
 800cca2:	eeb5 ea40 	vcmp.f32	s28, #0.0
 800cca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccaa:	d005      	beq.n	800ccb8 <m_kalman_3gyro.isra.0.constprop.0+0x24a0>
 800ccac:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800ccb0:	eea7 7a8e 	vfma.f32	s14, s15, s28
 800ccb4:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
 800ccb8:	eeb5 fa40 	vcmp.f32	s30, #0.0
 800ccbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccc0:	d005      	beq.n	800ccce <m_kalman_3gyro.isra.0.constprop.0+0x24b6>
 800ccc2:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 800ccc6:	eea7 7a8f 	vfma.f32	s14, s15, s30
 800ccca:	ed83 7a1b 	vstr	s14, [r3, #108]	; 0x6c
 800ccce:	eef5 fa40 	vcmp.f32	s31, #0.0
 800ccd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccd6:	d005      	beq.n	800cce4 <m_kalman_3gyro.isra.0.constprop.0+0x24cc>
 800ccd8:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 800ccdc:	eea7 7aaf 	vfma.f32	s14, s15, s31
 800cce0:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 800cce4:	eef5 6a40 	vcmp.f32	s13, #0.0
 800cce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccec:	d005      	beq.n	800ccfa <m_kalman_3gyro.isra.0.constprop.0+0x24e2>
 800ccee:	ed93 7a2d 	vldr	s14, [r3, #180]	; 0xb4
 800ccf2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800ccf6:	ed83 7a2d 	vstr	s14, [r3, #180]	; 0xb4
 800ccfa:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ccfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd02:	d005      	beq.n	800cd10 <m_kalman_3gyro.isra.0.constprop.0+0x24f8>
 800cd04:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 800cd08:	eea7 7a86 	vfma.f32	s14, s15, s12
 800cd0c:	ed83 7a36 	vstr	s14, [r3, #216]	; 0xd8
 800cd10:	eef5 5a40 	vcmp.f32	s11, #0.0
 800cd14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd18:	d005      	beq.n	800cd26 <m_kalman_3gyro.isra.0.constprop.0+0x250e>
 800cd1a:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 800cd1e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800cd22:	ed83 7a3f 	vstr	s14, [r3, #252]	; 0xfc
 800cd26:	eef5 ea40 	vcmp.f32	s29, #0.0
 800cd2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd2e:	d005      	beq.n	800cd3c <m_kalman_3gyro.isra.0.constprop.0+0x2524>
 800cd30:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 800cd34:	eea7 7aae 	vfma.f32	s14, s15, s29
 800cd38:	ed83 7a48 	vstr	s14, [r3, #288]	; 0x120
 800cd3c:	4295      	cmp	r5, r2
 800cd3e:	f103 0304 	add.w	r3, r3, #4
 800cd42:	d191      	bne.n	800cc68 <m_kalman_3gyro.isra.0.constprop.0+0x2450>
 800cd44:	f8df e690 	ldr.w	lr, [pc, #1680]	; 800d3d8 <m_kalman_3gyro.isra.0.constprop.0+0x2bc0>
 800cd48:	f8df c690 	ldr.w	ip, [pc, #1680]	; 800d3dc <m_kalman_3gyro.isra.0.constprop.0+0x2bc4>
 800cd4c:	f50b 70a2 	add.w	r0, fp, #324	; 0x144
 800cd50:	465b      	mov	r3, fp
 800cd52:	2200      	movs	r2, #0
 800cd54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd58:	fb0e f102 	mul.w	r1, lr, r2
 800cd5c:	ebbc 0f71 	cmp.w	ip, r1, ror #1
 800cd60:	edd3 7a00 	vldr	s15, [r3]
 800cd64:	f0c0 81da 	bcc.w	800d11c <m_kalman_3gyro.isra.0.constprop.0+0x2904>
 800cd68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd6c:	3201      	adds	r2, #1
 800cd6e:	ece3 7a01 	vstmia	r3!, {s15}
 800cd72:	4298      	cmp	r0, r3
 800cd74:	d1f0      	bne.n	800cd58 <m_kalman_3gyro.isra.0.constprop.0+0x2540>
 800cd76:	ed9d da03 	vldr	s26, [sp, #12]
 800cd7a:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800cd7e:	ee1d 1a10 	vmov	r1, s26
 800cd82:	4650      	mov	r0, sl
 800cd84:	f005 ff50 	bl	8012c28 <memcpy>
 800cd88:	2100      	movs	r1, #0
 800cd8a:	ee1d 0a10 	vmov	r0, s26
 800cd8e:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800cd92:	f005 ff57 	bl	8012c44 <memset>
 800cd96:	46bc      	mov	ip, r7
 800cd98:	2000      	movs	r0, #0
 800cd9a:	f50d 61c4 	add.w	r1, sp, #1568	; 0x620
 800cd9e:	ecf4 3a01 	vldmia	r4!, {s7}
 800cda2:	ed94 4a08 	vldr	s8, [r4, #32]
 800cda6:	edd4 4a11 	vldr	s9, [r4, #68]	; 0x44
 800cdaa:	ed94 5a1a 	vldr	s10, [r4, #104]	; 0x68
 800cdae:	edd4 5a23 	vldr	s11, [r4, #140]	; 0x8c
 800cdb2:	ed94 6a2c 	vldr	s12, [r4, #176]	; 0xb0
 800cdb6:	edd4 6a35 	vldr	s13, [r4, #212]	; 0xd4
 800cdba:	ed94 7a3e 	vldr	s14, [r4, #248]	; 0xf8
 800cdbe:	edd4 7a47 	vldr	s15, [r4, #284]	; 0x11c
 800cdc2:	4653      	mov	r3, sl
 800cdc4:	4662      	mov	r2, ip
 800cdc6:	eef5 3a40 	vcmp.f32	s7, #0.0
 800cdca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdce:	d00c      	beq.n	800cdea <m_kalman_3gyro.isra.0.constprop.0+0x25d2>
 800cdd0:	ed93 3a00 	vldr	s6, [r3]
 800cdd4:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800cdd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cddc:	d005      	beq.n	800cdea <m_kalman_3gyro.isra.0.constprop.0+0x25d2>
 800cdde:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 800cde2:	eee3 2a83 	vfma.f32	s5, s7, s6
 800cde6:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 800cdea:	eeb5 4a40 	vcmp.f32	s8, #0.0
 800cdee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdf2:	d00c      	beq.n	800ce0e <m_kalman_3gyro.isra.0.constprop.0+0x25f6>
 800cdf4:	ed93 3a01 	vldr	s6, [r3, #4]
 800cdf8:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800cdfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce00:	d005      	beq.n	800ce0e <m_kalman_3gyro.isra.0.constprop.0+0x25f6>
 800ce02:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 800ce06:	eee4 2a03 	vfma.f32	s5, s8, s6
 800ce0a:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 800ce0e:	eef5 4a40 	vcmp.f32	s9, #0.0
 800ce12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce16:	d00c      	beq.n	800ce32 <m_kalman_3gyro.isra.0.constprop.0+0x261a>
 800ce18:	ed93 3a02 	vldr	s6, [r3, #8]
 800ce1c:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800ce20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce24:	d005      	beq.n	800ce32 <m_kalman_3gyro.isra.0.constprop.0+0x261a>
 800ce26:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 800ce2a:	eee4 2a83 	vfma.f32	s5, s9, s6
 800ce2e:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 800ce32:	eeb5 5a40 	vcmp.f32	s10, #0.0
 800ce36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce3a:	d00c      	beq.n	800ce56 <m_kalman_3gyro.isra.0.constprop.0+0x263e>
 800ce3c:	ed93 3a03 	vldr	s6, [r3, #12]
 800ce40:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800ce44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce48:	d005      	beq.n	800ce56 <m_kalman_3gyro.isra.0.constprop.0+0x263e>
 800ce4a:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 800ce4e:	eee5 2a03 	vfma.f32	s5, s10, s6
 800ce52:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 800ce56:	eef5 5a40 	vcmp.f32	s11, #0.0
 800ce5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce5e:	d00c      	beq.n	800ce7a <m_kalman_3gyro.isra.0.constprop.0+0x2662>
 800ce60:	ed93 3a04 	vldr	s6, [r3, #16]
 800ce64:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800ce68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce6c:	d005      	beq.n	800ce7a <m_kalman_3gyro.isra.0.constprop.0+0x2662>
 800ce6e:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 800ce72:	eee5 2a83 	vfma.f32	s5, s11, s6
 800ce76:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 800ce7a:	eeb5 6a40 	vcmp.f32	s12, #0.0
 800ce7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce82:	d00c      	beq.n	800ce9e <m_kalman_3gyro.isra.0.constprop.0+0x2686>
 800ce84:	ed93 3a05 	vldr	s6, [r3, #20]
 800ce88:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800ce8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce90:	d005      	beq.n	800ce9e <m_kalman_3gyro.isra.0.constprop.0+0x2686>
 800ce92:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 800ce96:	eee6 2a03 	vfma.f32	s5, s12, s6
 800ce9a:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 800ce9e:	eef5 6a40 	vcmp.f32	s13, #0.0
 800cea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cea6:	d00c      	beq.n	800cec2 <m_kalman_3gyro.isra.0.constprop.0+0x26aa>
 800cea8:	ed93 3a06 	vldr	s6, [r3, #24]
 800ceac:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800ceb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceb4:	d005      	beq.n	800cec2 <m_kalman_3gyro.isra.0.constprop.0+0x26aa>
 800ceb6:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 800ceba:	eee6 2a83 	vfma.f32	s5, s13, s6
 800cebe:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 800cec2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800cec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceca:	d00c      	beq.n	800cee6 <m_kalman_3gyro.isra.0.constprop.0+0x26ce>
 800cecc:	ed93 3a07 	vldr	s6, [r3, #28]
 800ced0:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800ced4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ced8:	d005      	beq.n	800cee6 <m_kalman_3gyro.isra.0.constprop.0+0x26ce>
 800ceda:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 800cede:	eee7 2a03 	vfma.f32	s5, s14, s6
 800cee2:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 800cee6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ceea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceee:	d00c      	beq.n	800cf0a <m_kalman_3gyro.isra.0.constprop.0+0x26f2>
 800cef0:	ed93 3a08 	vldr	s6, [r3, #32]
 800cef4:	eeb5 3a40 	vcmp.f32	s6, #0.0
 800cef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cefc:	d005      	beq.n	800cf0a <m_kalman_3gyro.isra.0.constprop.0+0x26f2>
 800cefe:	edd2 2a2e 	vldr	s5, [r2, #184]	; 0xb8
 800cf02:	eee7 2a83 	vfma.f32	s5, s15, s6
 800cf06:	edc2 2a2e 	vstr	s5, [r2, #184]	; 0xb8
 800cf0a:	3324      	adds	r3, #36	; 0x24
 800cf0c:	4299      	cmp	r1, r3
 800cf0e:	f102 0224 	add.w	r2, r2, #36	; 0x24
 800cf12:	f47f af58 	bne.w	800cdc6 <m_kalman_3gyro.isra.0.constprop.0+0x25ae>
 800cf16:	3001      	adds	r0, #1
 800cf18:	2809      	cmp	r0, #9
 800cf1a:	f10c 0c04 	add.w	ip, ip, #4
 800cf1e:	f47f af3e 	bne.w	800cd9e <m_kalman_3gyro.isra.0.constprop.0+0x2586>
 800cf22:	9b01      	ldr	r3, [sp, #4]
 800cf24:	edc5 8a01 	vstr	s17, [r5, #4]
 800cf28:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cf2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf30:	edd3 7a00 	vldr	s15, [r3]
 800cf34:	f000 80fc 	beq.w	800d130 <m_kalman_3gyro.isra.0.constprop.0+0x2918>
 800cf38:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf40:	f000 80f6 	beq.w	800d130 <m_kalman_3gyro.isra.0.constprop.0+0x2918>
 800cf44:	ee27 8a88 	vmul.f32	s16, s15, s16
 800cf48:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800cf4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf50:	ed85 8a00 	vstr	s16, [r5]
 800cf54:	f040 81cc 	bne.w	800d2f0 <m_kalman_3gyro.isra.0.constprop.0+0x2ad8>
 800cf58:	eef5 9a40 	vcmp.f32	s19, #0.0
 800cf5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf60:	f040 808b 	bne.w	800d07a <m_kalman_3gyro.isra.0.constprop.0+0x2862>
 800cf64:	eef5 ba40 	vcmp.f32	s23, #0.0
 800cf68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf6c:	edc5 8a02 	vstr	s17, [r5, #8]
 800cf70:	d007      	beq.n	800cf82 <m_kalman_3gyro.isra.0.constprop.0+0x276a>
 800cf72:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf7a:	f041 8011 	bne.w	800dfa0 <m_kalman_3gyro.isra.0.constprop.0+0x3788>
 800cf7e:	eef0 ba67 	vmov.f32	s23, s15
 800cf82:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800cf86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf8a:	edc5 8a03 	vstr	s17, [r5, #12]
 800cf8e:	f000 808a 	beq.w	800d0a6 <m_kalman_3gyro.isra.0.constprop.0+0x288e>
 800cf92:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cf96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf9a:	f041 8018 	bne.w	800dfce <m_kalman_3gyro.isra.0.constprop.0+0x37b6>
 800cf9e:	edc5 8a04 	vstr	s17, [r5, #16]
 800cfa2:	eef0 ca67 	vmov.f32	s25, s15
 800cfa6:	eeb0 ca67 	vmov.f32	s24, s15
 800cfaa:	eef5 aa40 	vcmp.f32	s21, #0.0
 800cfae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfb2:	edc5 8a05 	vstr	s17, [r5, #20]
 800cfb6:	f000 8094 	beq.w	800d0e2 <m_kalman_3gyro.isra.0.constprop.0+0x28ca>
 800cfba:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cfbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfc2:	f040 87ea 	bne.w	800df9a <m_kalman_3gyro.isra.0.constprop.0+0x3782>
 800cfc6:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800cfca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfce:	edc5 8a06 	vstr	s17, [r5, #24]
 800cfd2:	f040 819a 	bne.w	800d30a <m_kalman_3gyro.isra.0.constprop.0+0x2af2>
 800cfd6:	eef0 aa4a 	vmov.f32	s21, s20
 800cfda:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800cfde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfe2:	edc5 8a07 	vstr	s17, [r5, #28]
 800cfe6:	f000 80f0 	beq.w	800d1ca <m_kalman_3gyro.isra.0.constprop.0+0x29b2>
 800cfea:	eef5 7a40 	vcmp.f32	s15, #0.0
 800cfee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cff2:	f000 80e8 	beq.w	800d1c6 <m_kalman_3gyro.isra.0.constprop.0+0x29ae>
 800cff6:	eeb0 3a68 	vmov.f32	s6, s17
 800cffa:	ee29 9a27 	vmul.f32	s18, s18, s15
 800cffe:	edd7 3a25 	vldr	s7, [r7, #148]	; 0x94
 800d002:	ed97 4a26 	vldr	s8, [r7, #152]	; 0x98
 800d006:	edd7 4a27 	vldr	s9, [r7, #156]	; 0x9c
 800d00a:	ed97 5a28 	vldr	s10, [r7, #160]	; 0xa0
 800d00e:	edd7 5a29 	vldr	s11, [r7, #164]	; 0xa4
 800d012:	ed97 6a2a 	vldr	s12, [r7, #168]	; 0xa8
 800d016:	edd7 6a2b 	vldr	s13, [r7, #172]	; 0xac
 800d01a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800d01e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800d022:	ed85 9a08 	vstr	s18, [r5, #32]
 800d026:	ee33 8a88 	vadd.f32	s16, s7, s16
 800d02a:	ee74 9a29 	vadd.f32	s19, s8, s19
 800d02e:	ee74 baab 	vadd.f32	s23, s9, s23
 800d032:	ee35 ca0c 	vadd.f32	s24, s10, s24
 800d036:	ee75 caac 	vadd.f32	s25, s11, s25
 800d03a:	ee76 aa2a 	vadd.f32	s21, s12, s21
 800d03e:	ee36 aa8a 	vadd.f32	s20, s13, s20
 800d042:	ee37 7a03 	vadd.f32	s14, s14, s6
 800d046:	ee37 9a89 	vadd.f32	s18, s15, s18
 800d04a:	ed87 8a25 	vstr	s16, [r7, #148]	; 0x94
 800d04e:	edc7 9a26 	vstr	s19, [r7, #152]	; 0x98
 800d052:	edc7 ba27 	vstr	s23, [r7, #156]	; 0x9c
 800d056:	ed87 ca28 	vstr	s24, [r7, #160]	; 0xa0
 800d05a:	edc7 ca29 	vstr	s25, [r7, #164]	; 0xa4
 800d05e:	edc7 aa2a 	vstr	s21, [r7, #168]	; 0xa8
 800d062:	ed87 aa2b 	vstr	s20, [r7, #172]	; 0xac
 800d066:	ed87 7a2c 	vstr	s14, [r7, #176]	; 0xb0
 800d06a:	ed87 9a2d 	vstr	s18, [r7, #180]	; 0xb4
 800d06e:	f7ff bb30 	b.w	800c6d2 <m_kalman_3gyro.isra.0.constprop.0+0x1eba>
 800d072:	ed9f bad8 	vldr	s22, [pc, #864]	; 800d3d4 <m_kalman_3gyro.isra.0.constprop.0+0x2bbc>
 800d076:	eeb0 8a4b 	vmov.f32	s16, s22
 800d07a:	ee27 7aa9 	vmul.f32	s14, s15, s19
 800d07e:	eef5 ba40 	vcmp.f32	s23, #0.0
 800d082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d086:	ed85 7a02 	vstr	s14, [r5, #8]
 800d08a:	f040 86fe 	bne.w	800de8a <m_kalman_3gyro.isra.0.constprop.0+0x3672>
 800d08e:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800d092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d096:	eef0 ba47 	vmov.f32	s23, s14
 800d09a:	eef0 9a4b 	vmov.f32	s19, s22
 800d09e:	edc5 8a03 	vstr	s17, [r5, #12]
 800d0a2:	f47f af76 	bne.w	800cf92 <m_kalman_3gyro.isra.0.constprop.0+0x277a>
 800d0a6:	eef5 ca40 	vcmp.f32	s25, #0.0
 800d0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0ae:	edc5 8a04 	vstr	s17, [r5, #16]
 800d0b2:	f43f af7a 	beq.w	800cfaa <m_kalman_3gyro.isra.0.constprop.0+0x2792>
 800d0b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d0ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0be:	f000 86dc 	beq.w	800de7a <m_kalman_3gyro.isra.0.constprop.0+0x3662>
 800d0c2:	eeb0 7a68 	vmov.f32	s14, s17
 800d0c6:	ee67 6aac 	vmul.f32	s13, s15, s25
 800d0ca:	eef5 aa40 	vcmp.f32	s21, #0.0
 800d0ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0d2:	edc5 6a05 	vstr	s13, [r5, #20]
 800d0d6:	f040 86bf 	bne.w	800de58 <m_kalman_3gyro.isra.0.constprop.0+0x3640>
 800d0da:	eef0 aa66 	vmov.f32	s21, s13
 800d0de:	eef0 ca47 	vmov.f32	s25, s14
 800d0e2:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800d0e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0ea:	edc5 8a06 	vstr	s17, [r5, #24]
 800d0ee:	f43f af74 	beq.w	800cfda <m_kalman_3gyro.isra.0.constprop.0+0x27c2>
 800d0f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d0fa:	f000 8108 	beq.w	800d30e <m_kalman_3gyro.isra.0.constprop.0+0x2af6>
 800d0fe:	eeb0 7a68 	vmov.f32	s14, s17
 800d102:	ee27 3a8a 	vmul.f32	s6, s15, s20
 800d106:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800d10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d10e:	ed85 3a07 	vstr	s6, [r5, #28]
 800d112:	eeb0 aa47 	vmov.f32	s20, s14
 800d116:	f47f af70 	bne.w	800cffa <m_kalman_3gyro.isra.0.constprop.0+0x27e2>
 800d11a:	e770      	b.n	800cffe <m_kalman_3gyro.isra.0.constprop.0+0x27e6>
 800d11c:	eef1 7a67 	vneg.f32	s15, s15
 800d120:	ece3 7a01 	vstmia	r3!, {s15}
 800d124:	4298      	cmp	r0, r3
 800d126:	f102 0201 	add.w	r2, r2, #1
 800d12a:	f47f ae15 	bne.w	800cd58 <m_kalman_3gyro.isra.0.constprop.0+0x2540>
 800d12e:	e622      	b.n	800cd76 <m_kalman_3gyro.isra.0.constprop.0+0x255e>
 800d130:	eeb5 ba40 	vcmp.f32	s22, #0.0
 800d134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d138:	edc5 8a00 	vstr	s17, [r5]
 800d13c:	d005      	beq.n	800d14a <m_kalman_3gyro.isra.0.constprop.0+0x2932>
 800d13e:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d146:	f040 80d1 	bne.w	800d2ec <m_kalman_3gyro.isra.0.constprop.0+0x2ad4>
 800d14a:	eef5 9a40 	vcmp.f32	s19, #0.0
 800d14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d152:	d051      	beq.n	800d1f8 <m_kalman_3gyro.isra.0.constprop.0+0x29e0>
 800d154:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d15c:	d189      	bne.n	800d072 <m_kalman_3gyro.isra.0.constprop.0+0x285a>
 800d15e:	eef0 9a67 	vmov.f32	s19, s15
 800d162:	eeb0 8a67 	vmov.f32	s16, s15
 800d166:	e6fd      	b.n	800cf64 <m_kalman_3gyro.isra.0.constprop.0+0x274c>
 800d168:	eef0 7a4d 	vmov.f32	s15, s26
 800d16c:	e42f      	b.n	800c9ce <m_kalman_3gyro.isra.0.constprop.0+0x21b6>
 800d16e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d172:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800d176:	eeb4 bae7 	vcmpe.f32	s22, s15
 800d17a:	2300      	movs	r3, #0
 800d17c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d180:	f882 31ff 	strb.w	r3, [r2, #511]	; 0x1ff
 800d184:	f8a2 3200 	strh.w	r3, [r2, #512]	; 0x200
 800d188:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 800d18c:	f882 3206 	strb.w	r3, [r2, #518]	; 0x206
 800d190:	f73f aa0b 	bgt.w	800c5aa <m_kalman_3gyro.isra.0.constprop.0+0x1d92>
 800d194:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d198:	f893 28ae 	ldrb.w	r2, [r3, #2222]	; 0x8ae
 800d19c:	2a00      	cmp	r2, #0
 800d19e:	f000 8702 	beq.w	800dfa6 <m_kalman_3gyro.isra.0.constprop.0+0x378e>
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	3a01      	subs	r2, #1
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	f881 28ae 	strb.w	r2, [r1, #2222]	; 0x8ae
 800d1ac:	f8a1 31fc 	strh.w	r3, [r1, #508]	; 0x1fc
 800d1b0:	f881 31fe 	strb.w	r3, [r1, #510]	; 0x1fe
 800d1b4:	f881 3205 	strb.w	r3, [r1, #517]	; 0x205
 800d1b8:	f881 3207 	strb.w	r3, [r1, #519]	; 0x207
 800d1bc:	f7ff ba2a 	b.w	800c614 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	f7ff b961 	b.w	800c488 <m_kalman_3gyro.isra.0.constprop.0+0x1c70>
 800d1c6:	eeb0 9a67 	vmov.f32	s18, s15
 800d1ca:	eeb0 3a49 	vmov.f32	s6, s18
 800d1ce:	e716      	b.n	800cffe <m_kalman_3gyro.isra.0.constprop.0+0x27e6>
 800d1d0:	ed9d fa7c 	vldr	s30, [sp, #496]	; 0x1f0
 800d1d4:	eddd fa7d 	vldr	s31, [sp, #500]	; 0x1f4
 800d1d8:	eddd 6a7e 	vldr	s13, [sp, #504]	; 0x1f8
 800d1dc:	ed9d 6a7f 	vldr	s12, [sp, #508]	; 0x1fc
 800d1e0:	eddd 5a80 	vldr	s11, [sp, #512]	; 0x200
 800d1e4:	eddd ea81 	vldr	s29, [sp, #516]	; 0x204
 800d1e8:	eeb0 ea68 	vmov.f32	s28, s17
 800d1ec:	eef0 da68 	vmov.f32	s27, s17
 800d1f0:	eeb0 da68 	vmov.f32	s26, s17
 800d1f4:	f7ff bb3e 	b.w	800c874 <m_kalman_3gyro.isra.0.constprop.0+0x205c>
 800d1f8:	eeb0 8a69 	vmov.f32	s16, s19
 800d1fc:	e6b2      	b.n	800cf64 <m_kalman_3gyro.isra.0.constprop.0+0x274c>
 800d1fe:	eef0 7a4d 	vmov.f32	s15, s26
 800d202:	e4a7      	b.n	800cb54 <m_kalman_3gyro.isra.0.constprop.0+0x233c>
 800d204:	f8dd 3698 	ldr.w	r3, [sp, #1688]	; 0x698
 800d208:	789b      	ldrb	r3, [r3, #2]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	f000 8660 	beq.w	800ded0 <m_kalman_3gyro.isra.0.constprop.0+0x36b8>
 800d210:	9b07      	ldr	r3, [sp, #28]
 800d212:	ed8d aa52 	vstr	s20, [sp, #328]	; 0x148
 800d216:	eeea 9a0a 	vfma.f32	s19, s20, s20
 800d21a:	685a      	ldr	r2, [r3, #4]
 800d21c:	6899      	ldr	r1, [r3, #8]
 800d21e:	681c      	ldr	r4, [r3, #0]
 800d220:	9248      	str	r2, [sp, #288]	; 0x120
 800d222:	461d      	mov	r5, r3
 800d224:	eeb1 9a49 	vneg.f32	s18, s18
 800d228:	68db      	ldr	r3, [r3, #12]
 800d22a:	9149      	str	r1, [sp, #292]	; 0x124
 800d22c:	eef1 8a68 	vneg.f32	s17, s17
 800d230:	eeb1 8a48 	vneg.f32	s16, s16
 800d234:	462a      	mov	r2, r5
 800d236:	a84f      	add	r0, sp, #316	; 0x13c
 800d238:	a947      	add	r1, sp, #284	; 0x11c
 800d23a:	934a      	str	r3, [sp, #296]	; 0x128
 800d23c:	ed8d 9a4f 	vstr	s18, [sp, #316]	; 0x13c
 800d240:	edcd 8a50 	vstr	s17, [sp, #320]	; 0x140
 800d244:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 800d248:	9447      	str	r4, [sp, #284]	; 0x11c
 800d24a:	f7fb f9e9 	bl	8008620 <m_qmult_eml>
 800d24e:	ee19 0a90 	vmov	r0, s19
 800d252:	ed8d 9a47 	vstr	s18, [sp, #284]	; 0x11c
 800d256:	edcd 8a48 	vstr	s17, [sp, #288]	; 0x120
 800d25a:	ed8d 8a49 	vstr	s16, [sp, #292]	; 0x124
 800d25e:	ed8d 9a4f 	vstr	s18, [sp, #316]	; 0x13c
 800d262:	edcd 8a50 	vstr	s17, [sp, #320]	; 0x140
 800d266:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 800d26a:	ed8d aa52 	vstr	s20, [sp, #328]	; 0x148
 800d26e:	ed8d aa4a 	vstr	s20, [sp, #296]	; 0x128
 800d272:	f7f3 f90d 	bl	8000490 <__aeabi_f2d>
 800d276:	ec41 0b10 	vmov	d0, r0, r1
 800d27a:	f005 fec5 	bl	8013008 <sqrt>
 800d27e:	ec51 0b10 	vmov	r0, r1, d0
 800d282:	f7f3 fc55 	bl	8000b30 <__aeabi_d2f>
 800d286:	ee07 0a90 	vmov	s15, r0
 800d28a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d28e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800d292:	ac4b      	add	r4, sp, #300	; 0x12c
 800d294:	ee29 9a27 	vmul.f32	s18, s18, s15
 800d298:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800d29c:	ee28 8a27 	vmul.f32	s16, s16, s15
 800d2a0:	ee6a 7a27 	vmul.f32	s15, s20, s15
 800d2a4:	ed8d 9a4b 	vstr	s18, [sp, #300]	; 0x12c
 800d2a8:	edcd 8a4c 	vstr	s17, [sp, #304]	; 0x130
 800d2ac:	ed8d 8a4d 	vstr	s16, [sp, #308]	; 0x134
 800d2b0:	edcd 7a4e 	vstr	s15, [sp, #312]	; 0x138
 800d2b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d2b6:	f8dd 46b8 	ldr.w	r4, [sp, #1720]	; 0x6b8
 800d2ba:	6020      	str	r0, [r4, #0]
 800d2bc:	6061      	str	r1, [r4, #4]
 800d2be:	60a2      	str	r2, [r4, #8]
 800d2c0:	60e3      	str	r3, [r4, #12]
 800d2c2:	f7ff ba38 	b.w	800c736 <m_kalman_3gyro.isra.0.constprop.0+0x1f1e>
 800d2c6:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d2ca:	f8d3 3458 	ldr.w	r3, [r3, #1112]	; 0x458
 800d2ce:	2b31      	cmp	r3, #49	; 0x31
 800d2d0:	f73e af1f 	bgt.w	800c112 <m_kalman_3gyro.isra.0.constprop.0+0x18fa>
 800d2d4:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800d2d8:	2200      	movs	r2, #0
 800d2da:	3301      	adds	r3, #1
 800d2dc:	f8c1 3458 	str.w	r3, [r1, #1112]	; 0x458
 800d2e0:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 800d2e4:	f881 2204 	strb.w	r2, [r1, #516]	; 0x204
 800d2e8:	f7fe bf13 	b.w	800c112 <m_kalman_3gyro.isra.0.constprop.0+0x18fa>
 800d2ec:	eeb0 8a68 	vmov.f32	s16, s17
 800d2f0:	ee2b ba27 	vmul.f32	s22, s22, s15
 800d2f4:	eef5 9a40 	vcmp.f32	s19, #0.0
 800d2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2fc:	ed85 ba01 	vstr	s22, [r5, #4]
 800d300:	f47f aebb 	bne.w	800d07a <m_kalman_3gyro.isra.0.constprop.0+0x2862>
 800d304:	eef0 9a4b 	vmov.f32	s19, s22
 800d308:	e62c      	b.n	800cf64 <m_kalman_3gyro.isra.0.constprop.0+0x274c>
 800d30a:	eef0 aa67 	vmov.f32	s21, s15
 800d30e:	ed9f 9a31 	vldr	s18, [pc, #196]	; 800d3d4 <m_kalman_3gyro.isra.0.constprop.0+0x2bbc>
 800d312:	edc5 8a07 	vstr	s17, [r5, #28]
 800d316:	eeb0 3a68 	vmov.f32	s6, s17
 800d31a:	eeb0 aa68 	vmov.f32	s20, s17
 800d31e:	e66e      	b.n	800cffe <m_kalman_3gyro.isra.0.constprop.0+0x27e6>
 800d320:	ee77 7ae9 	vsub.f32	s15, s15, s19
 800d324:	ee17 0a90 	vmov	r0, s15
 800d328:	f7f3 f8b2 	bl	8000490 <__aeabi_f2d>
 800d32c:	ec41 0b10 	vmov	d0, r0, r1
 800d330:	f005 fe6a 	bl	8013008 <sqrt>
 800d334:	ec51 0b10 	vmov	r0, r1, d0
 800d338:	f7f3 fbfa 	bl	8000b30 <__aeabi_d2f>
 800d33c:	ee0a 0a10 	vmov	s20, r0
 800d340:	f7ff b9e1 	b.w	800c706 <m_kalman_3gyro.isra.0.constprop.0+0x1eee>
 800d344:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800d348:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800d34c:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 800d350:	f240 1201 	movw	r2, #257	; 0x101
 800d354:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 800d358:	9908      	ldr	r1, [sp, #32]
 800d35a:	680a      	ldr	r2, [r1, #0]
 800d35c:	67c2      	str	r2, [r0, #124]	; 0x7c
 800d35e:	684a      	ldr	r2, [r1, #4]
 800d360:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 800d364:	688a      	ldr	r2, [r1, #8]
 800d366:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 800d36a:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 800d36e:	7013      	strb	r3, [r2, #0]
 800d370:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
 800d374:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 800d378:	3301      	adds	r3, #1
 800d37a:	f8c0 345c 	str.w	r3, [r0, #1116]	; 0x45c
 800d37e:	b16a      	cbz	r2, 800d39c <m_kalman_3gyro.isra.0.constprop.0+0x2b84>
 800d380:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 800d382:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 800d386:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
 800d38a:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
 800d38e:	f8d0 1084 	ldr.w	r1, [r0, #132]	; 0x84
 800d392:	f8c0 10a8 	str.w	r1, [r0, #168]	; 0xa8
 800d396:	2200      	movs	r2, #0
 800d398:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
 800d39c:	2b1e      	cmp	r3, #30
 800d39e:	d114      	bne.n	800d3ca <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 800d3a0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d3a4:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800d3a8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800d3ac:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800d3b0:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800d3b4:	6018      	str	r0, [r3, #0]
 800d3b6:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d3ba:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800d3be:	6019      	str	r1, [r3, #0]
 800d3c0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d3c4:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 800d3c8:	601a      	str	r2, [r3, #0]
 800d3ca:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 800d3ce:	f7fe be8f 	b.w	800c0f0 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 800d3d2:	bf00      	nop
 800d3d4:	00000000 	.word	0x00000000
 800d3d8:	cccccccd 	.word	0xcccccccd
 800d3dc:	19999999 	.word	0x19999999
 800d3e0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d3e4:	f603 0378 	addw	r3, r3, #2168	; 0x878
 800d3e8:	ed93 7a00 	vldr	s14, [r3]
 800d3ec:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d3f0:	ed8d 7a01 	vstr	s14, [sp, #4]
 800d3f4:	f603 0374 	addw	r3, r3, #2164	; 0x874
 800d3f8:	ee67 7a07 	vmul.f32	s15, s14, s14
 800d3fc:	ed93 ca00 	vldr	s24, [r3]
 800d400:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d404:	eeec 7a0c 	vfma.f32	s15, s24, s24
 800d408:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 800d40c:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 800d410:	ed93 ea00 	vldr	s28, [r3]
 800d414:	eeee 7a0e 	vfma.f32	s15, s28, s28
 800d418:	ee17 0a90 	vmov	r0, s15
 800d41c:	f7f3 f838 	bl	8000490 <__aeabi_f2d>
 800d420:	ec41 0b10 	vmov	d0, r0, r1
 800d424:	f005 fdf0 	bl	8013008 <sqrt>
 800d428:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d42c:	f603 0384 	addw	r3, r3, #2180	; 0x884
 800d430:	ed93 da00 	vldr	s26, [r3]
 800d434:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d438:	f503 6308 	add.w	r3, r3, #2176	; 0x880
 800d43c:	ed93 fa00 	vldr	s30, [r3]
 800d440:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d444:	ee6d 7a0d 	vmul.f32	s15, s26, s26
 800d448:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800d44c:	eeef 7a0f 	vfma.f32	s15, s30, s30
 800d450:	edd3 ca00 	vldr	s25, [r3]
 800d454:	eeec 7aac 	vfma.f32	s15, s25, s25
 800d458:	ec57 6b10 	vmov	r6, r7, d0
 800d45c:	ee17 0a90 	vmov	r0, s15
 800d460:	f7f3 f816 	bl	8000490 <__aeabi_f2d>
 800d464:	ec41 0b10 	vmov	d0, r0, r1
 800d468:	f005 fdce 	bl	8013008 <sqrt>
 800d46c:	ec51 0b10 	vmov	r0, r1, d0
 800d470:	f7f3 fb5e 	bl	8000b30 <__aeabi_d2f>
 800d474:	4be0      	ldr	r3, [pc, #896]	; (800d7f8 <m_kalman_3gyro.isra.0.constprop.0+0x2fe0>)
 800d476:	ee07 0a90 	vmov	s15, r0
 800d47a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d47e:	edc3 7a67 	vstr	s15, [r3, #412]	; 0x19c
 800d482:	4639      	mov	r1, r7
 800d484:	4630      	mov	r0, r6
 800d486:	eec6 ea27 	vdiv.f32	s29, s12, s15
 800d48a:	ed8d 6a00 	vstr	s12, [sp]
 800d48e:	f7f3 fb4f 	bl	8000b30 <__aeabi_d2f>
 800d492:	ed9d 6a00 	vldr	s12, [sp]
 800d496:	ed9d 7a01 	vldr	s14, [sp, #4]
 800d49a:	ee07 0a90 	vmov	s15, r0
 800d49e:	eec6 7a27 	vdiv.f32	s15, s12, s15
 800d4a2:	ee2e fa8f 	vmul.f32	s30, s29, s30
 800d4a6:	ee67 6a8e 	vmul.f32	s13, s15, s28
 800d4aa:	ee6e caac 	vmul.f32	s25, s29, s25
 800d4ae:	ee2f ea66 	vnmul.f32	s28, s30, s13
 800d4b2:	ee27 ca8c 	vmul.f32	s24, s15, s24
 800d4b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d4ba:	eeac ea8c 	vfma.f32	s28, s25, s24
 800d4be:	ee2e da8d 	vmul.f32	s26, s29, s26
 800d4c2:	ee67 eaec 	vnmul.f32	s29, s15, s25
 800d4c6:	ee2e 7a0e 	vmul.f32	s14, s28, s28
 800d4ca:	eee6 ea8d 	vfma.f32	s29, s13, s26
 800d4ce:	ee2c ca4d 	vnmul.f32	s24, s24, s26
 800d4d2:	eea7 ca8f 	vfma.f32	s24, s15, s30
 800d4d6:	eef0 7a47 	vmov.f32	s15, s14
 800d4da:	eeee 7aae 	vfma.f32	s15, s29, s29
 800d4de:	eeec 7a0c 	vfma.f32	s15, s24, s24
 800d4e2:	ee17 0a90 	vmov	r0, s15
 800d4e6:	f7f2 ffd3 	bl	8000490 <__aeabi_f2d>
 800d4ea:	ec41 0b10 	vmov	d0, r0, r1
 800d4ee:	f005 fd8b 	bl	8013008 <sqrt>
 800d4f2:	ec51 0b10 	vmov	r0, r1, d0
 800d4f6:	f7f3 fb1b 	bl	8000b30 <__aeabi_d2f>
 800d4fa:	ed9d 6a00 	vldr	s12, [sp]
 800d4fe:	9916      	ldr	r1, [sp, #88]	; 0x58
 800d500:	ed89 fa02 	vstr	s30, [r9, #8]
 800d504:	ee07 0a90 	vmov	s15, r0
 800d508:	eec6 7a27 	vdiv.f32	s15, s12, s15
 800d50c:	aa79      	add	r2, sp, #484	; 0x1e4
 800d50e:	4648      	mov	r0, r9
 800d510:	ee2e ea27 	vmul.f32	s28, s28, s15
 800d514:	ee2c ca27 	vmul.f32	s24, s24, s15
 800d518:	ee6e eaa7 	vmul.f32	s29, s29, s15
 800d51c:	ee2f 7a4e 	vnmul.f32	s14, s30, s28
 800d520:	ee6d 6a4c 	vnmul.f32	s13, s26, s24
 800d524:	ee6e 7aec 	vnmul.f32	s15, s29, s25
 800d528:	eeec 6a8e 	vfma.f32	s13, s25, s28
 800d52c:	eeae 7a8d 	vfma.f32	s14, s29, s26
 800d530:	eeec 7a0f 	vfma.f32	s15, s24, s30
 800d534:	edc9 6a00 	vstr	s13, [r9]
 800d538:	ed89 7a06 	vstr	s14, [r9, #24]
 800d53c:	edc9 7a03 	vstr	s15, [r9, #12]
 800d540:	edc9 ea01 	vstr	s29, [r9, #4]
 800d544:	ed89 ea04 	vstr	s28, [r9, #16]
 800d548:	ed89 ca07 	vstr	s24, [r9, #28]
 800d54c:	ed89 da05 	vstr	s26, [r9, #20]
 800d550:	edc9 ca08 	vstr	s25, [r9, #32]
 800d554:	f7fa febe 	bl	80082d4 <m_mldivide>
 800d558:	a947      	add	r1, sp, #284	; 0x11c
 800d55a:	a879      	add	r0, sp, #484	; 0x1e4
 800d55c:	f7fb fcce 	bl	8008efc <m_dcm2q_eml>
 800d560:	eddf 7aa6 	vldr	s15, [pc, #664]	; 800d7fc <m_kalman_3gyro.isra.0.constprop.0+0x2fe4>
 800d564:	9847      	ldr	r0, [sp, #284]	; 0x11c
 800d566:	9948      	ldr	r1, [sp, #288]	; 0x120
 800d568:	9a49      	ldr	r2, [sp, #292]	; 0x124
 800d56a:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 800d56c:	904b      	str	r0, [sp, #300]	; 0x12c
 800d56e:	eeb0 7a67 	vmov.f32	s14, s15
 800d572:	eef0 6a67 	vmov.f32	s13, s15
 800d576:	914c      	str	r1, [sp, #304]	; 0x130
 800d578:	924d      	str	r2, [sp, #308]	; 0x134
 800d57a:	934e      	str	r3, [sp, #312]	; 0x138
 800d57c:	ed94 5a06 	vldr	s10, [r4, #24]
 800d580:	edd4 5a07 	vldr	s11, [r4, #28]
 800d584:	ed94 6a08 	vldr	s12, [r4, #32]
 800d588:	3424      	adds	r4, #36	; 0x24
 800d58a:	42a5      	cmp	r5, r4
 800d58c:	ee76 6a85 	vadd.f32	s13, s13, s10
 800d590:	ee37 7a25 	vadd.f32	s14, s14, s11
 800d594:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d598:	d1f0      	bne.n	800d57c <m_kalman_3gyro.isra.0.constprop.0+0x2d64>
 800d59a:	ed9f 6a99 	vldr	s12, [pc, #612]	; 800d800 <m_kalman_3gyro.isra.0.constprop.0+0x2fe8>
 800d59e:	ee27 7a06 	vmul.f32	s14, s14, s12
 800d5a2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800d5a6:	ed8d 7a3e 	vstr	s14, [sp, #248]	; 0xf8
 800d5aa:	edcd 7a3f 	vstr	s15, [sp, #252]	; 0xfc
 800d5ae:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
 800d5b2:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 800d5b6:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d5ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d5be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5c2:	edcd 6a3d 	vstr	s13, [sp, #244]	; 0xf4
 800d5c6:	f340 8665 	ble.w	800e294 <m_kalman_3gyro.isra.0.constprop.0+0x3a7c>
 800d5ca:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800d5ce:	eef4 7aef 	vcmpe.f32	s15, s31
 800d5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5d6:	f340 87a5 	ble.w	800e524 <m_kalman_3gyro.isra.0.constprop.0+0x3d0c>
 800d5da:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 800d5de:	ed9d 7a17 	vldr	s14, [sp, #92]	; 0x5c
 800d5e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5ea:	f77e ad5c 	ble.w	800c0a6 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 800d5ee:	9b08      	ldr	r3, [sp, #32]
 800d5f0:	eddf 7a84 	vldr	s15, [pc, #528]	; 800d804 <m_kalman_3gyro.isra.0.constprop.0+0x2fec>
 800d5f4:	ed93 7a00 	vldr	s14, [r3]
 800d5f8:	eeb0 7ac7 	vabs.f32	s14, s14
 800d5fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d604:	f57e ad4f 	bpl.w	800c0a6 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 800d608:	ed93 7a01 	vldr	s14, [r3, #4]
 800d60c:	eeb0 7ac7 	vabs.f32	s14, s14
 800d610:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d618:	f57e ad45 	bpl.w	800c0a6 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 800d61c:	ed93 7a02 	vldr	s14, [r3, #8]
 800d620:	eeb0 7ac7 	vabs.f32	s14, s14
 800d624:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d62c:	f57e ad3b 	bpl.w	800c0a6 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 800d630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d632:	eddf 7a75 	vldr	s15, [pc, #468]	; 800d808 <m_kalman_3gyro.isra.0.constprop.0+0x2ff0>
 800d636:	ed93 7a00 	vldr	s14, [r3]
 800d63a:	eeb0 7ac7 	vabs.f32	s14, s14
 800d63e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d646:	f57e ad2e 	bpl.w	800c0a6 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 800d64a:	ed93 7a01 	vldr	s14, [r3, #4]
 800d64e:	eeb0 7ac7 	vabs.f32	s14, s14
 800d652:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d65a:	f57e ad24 	bpl.w	800c0a6 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 800d65e:	ed93 7a02 	vldr	s14, [r3, #8]
 800d662:	eeb0 7ac7 	vabs.f32	s14, s14
 800d666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d66e:	f57e ad1a 	bpl.w	800c0a6 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 800d672:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d676:	f8d3 2450 	ldr.w	r2, [r3, #1104]	; 0x450
 800d67a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d67c:	ed93 7a00 	vldr	s14, [r3]
 800d680:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800d682:	ed93 6a00 	vldr	s12, [r3]
 800d686:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800d688:	edd3 6a00 	vldr	s13, [r3]
 800d68c:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800d690:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800d694:	2a09      	cmp	r2, #9
 800d696:	f503 6198 	add.w	r1, r3, #1216	; 0x4c0
 800d69a:	bfcc      	ite	gt
 800d69c:	230a      	movgt	r3, #10
 800d69e:	2305      	movle	r3, #5
 800d6a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6a4:	bfb4      	ite	lt
 800d6a6:	eef0 7a46 	vmovlt.f32	s15, s12
 800d6aa:	eef0 7a47 	vmovge.f32	s15, s14
 800d6ae:	bf98      	it	ls
 800d6b0:	eeb0 6a47 	vmovls.f32	s12, s14
 800d6b4:	ed91 7a00 	vldr	s14, [r1]
 800d6b8:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800d6ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d6be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6c2:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800d6c6:	bfa8      	it	ge
 800d6c8:	eef0 7a47 	vmovge.f32	s15, s14
 800d6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6d0:	bf98      	it	ls
 800d6d2:	eeb0 6a47 	vmovls.f32	s12, s14
 800d6d6:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d6da:	ed91 7a00 	vldr	s14, [r1]
 800d6de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6e2:	eef4 6ac6 	vcmpe.f32	s13, s12
 800d6e6:	bfa8      	it	ge
 800d6e8:	eef0 7a66 	vmovge.f32	s15, s13
 800d6ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6f0:	bf88      	it	hi
 800d6f2:	eef0 6a46 	vmovhi.f32	s13, s12
 800d6f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6fe:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d702:	bfb8      	it	lt
 800d704:	eef0 7a47 	vmovlt.f32	s15, s14
 800d708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d70c:	bf88      	it	hi
 800d70e:	eeb0 7a66 	vmovhi.f32	s14, s13
 800d712:	2b05      	cmp	r3, #5
 800d714:	d065      	beq.n	800d7e2 <m_kalman_3gyro.isra.0.constprop.0+0x2fca>
 800d716:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800d71a:	f201 512c 	addw	r1, r1, #1324	; 0x52c
 800d71e:	edd1 6a00 	vldr	s13, [r1]
 800d722:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800d726:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d72a:	f501 61aa 	add.w	r1, r1, #1360	; 0x550
 800d72e:	ed91 6a00 	vldr	s12, [r1]
 800d732:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800d736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d73a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d73e:	bfa8      	it	ge
 800d740:	eef0 7a66 	vmovge.f32	s15, s13
 800d744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d748:	bf98      	it	ls
 800d74a:	eeb0 7a66 	vmovls.f32	s14, s13
 800d74e:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800d752:	f201 5174 	addw	r1, r1, #1396	; 0x574
 800d756:	edd1 6a00 	vldr	s13, [r1]
 800d75a:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800d75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d762:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800d766:	bfa8      	it	ge
 800d768:	eef0 7a46 	vmovge.f32	s15, s12
 800d76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d770:	bf88      	it	hi
 800d772:	eeb0 6a47 	vmovhi.f32	s12, s14
 800d776:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d77a:	f501 61b3 	add.w	r1, r1, #1432	; 0x598
 800d77e:	ed91 7a00 	vldr	s14, [r1]
 800d782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d786:	eef4 6ac6 	vcmpe.f32	s13, s12
 800d78a:	bfa8      	it	ge
 800d78c:	eef0 7a66 	vmovge.f32	s15, s13
 800d790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d794:	bf88      	it	hi
 800d796:	eef0 6a46 	vmovhi.f32	s13, s12
 800d79a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d7a6:	bfa8      	it	ge
 800d7a8:	eef0 7a47 	vmovge.f32	s15, s14
 800d7ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7b0:	bf88      	it	hi
 800d7b2:	eeb0 7a66 	vmovhi.f32	s14, s13
 800d7b6:	2b0a      	cmp	r3, #10
 800d7b8:	d113      	bne.n	800d7e2 <m_kalman_3gyro.isra.0.constprop.0+0x2fca>
 800d7ba:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800d7be:	f201 51bc 	addw	r1, r1, #1468	; 0x5bc
 800d7c2:	edd1 6a00 	vldr	s13, [r1]
 800d7c6:	eef4 7ae6 	vcmpe.f32	s15, s13
 800d7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ce:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d7d2:	bfb8      	it	lt
 800d7d4:	eef0 7a66 	vmovlt.f32	s15, s13
 800d7d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7dc:	bf88      	it	hi
 800d7de:	eeb0 7a66 	vmovhi.f32	s14, s13
 800d7e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d7e6:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800d80c <m_kalman_3gyro.isra.0.constprop.0+0x2ff4>
 800d7ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7f2:	f73e ac58 	bgt.w	800c0a6 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 800d7f6:	e00b      	b.n	800d810 <m_kalman_3gyro.isra.0.constprop.0+0x2ff8>
 800d7f8:	20001690 	.word	0x20001690
 800d7fc:	00000000 	.word	0x00000000
 800d800:	3d088889 	.word	0x3d088889
 800d804:	3e4ccccd 	.word	0x3e4ccccd
 800d808:	3f99999a 	.word	0x3f99999a
 800d80c:	3be56042 	.word	0x3be56042
 800d810:	9914      	ldr	r1, [sp, #80]	; 0x50
 800d812:	ed91 6a00 	vldr	s12, [r1]
 800d816:	9924      	ldr	r1, [sp, #144]	; 0x90
 800d818:	ed91 7a00 	vldr	s14, [r1]
 800d81c:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800d81e:	edd1 6a00 	vldr	s13, [r1]
 800d822:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800d826:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800d82a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d82e:	f201 41c4 	addw	r1, r1, #1220	; 0x4c4
 800d832:	bfb4      	ite	lt
 800d834:	eef0 7a46 	vmovlt.f32	s15, s12
 800d838:	eef0 7a47 	vmovge.f32	s15, s14
 800d83c:	bf98      	it	ls
 800d83e:	eeb0 6a47 	vmovls.f32	s12, s14
 800d842:	ed91 7a00 	vldr	s14, [r1]
 800d846:	992a      	ldr	r1, [sp, #168]	; 0xa8
 800d848:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d850:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800d854:	bfa8      	it	ge
 800d856:	eef0 7a47 	vmovge.f32	s15, s14
 800d85a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d85e:	bf98      	it	ls
 800d860:	eeb0 6a47 	vmovls.f32	s12, s14
 800d864:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d868:	ed91 7a00 	vldr	s14, [r1]
 800d86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d870:	eef4 6ac6 	vcmpe.f32	s13, s12
 800d874:	bfa8      	it	ge
 800d876:	eef0 7a66 	vmovge.f32	s15, s13
 800d87a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d87e:	bf88      	it	hi
 800d880:	eef0 6a46 	vmovhi.f32	s13, s12
 800d884:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d88c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d890:	bfa8      	it	ge
 800d892:	eef0 7a47 	vmovge.f32	s15, s14
 800d896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d89a:	bf88      	it	hi
 800d89c:	eeb0 7a66 	vmovhi.f32	s14, s13
 800d8a0:	2b05      	cmp	r3, #5
 800d8a2:	d065      	beq.n	800d970 <m_kalman_3gyro.isra.0.constprop.0+0x3158>
 800d8a4:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800d8a8:	f501 61a6 	add.w	r1, r1, #1328	; 0x530
 800d8ac:	ed91 6a00 	vldr	s12, [r1]
 800d8b0:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800d8b4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800d8b8:	f201 5154 	addw	r1, r1, #1364	; 0x554
 800d8bc:	edd1 6a00 	vldr	s13, [r1]
 800d8c0:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800d8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8c8:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800d8cc:	bfa8      	it	ge
 800d8ce:	eef0 7a46 	vmovge.f32	s15, s12
 800d8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8d6:	bf88      	it	hi
 800d8d8:	eeb0 6a47 	vmovhi.f32	s12, s14
 800d8dc:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d8e0:	f501 61af 	add.w	r1, r1, #1400	; 0x578
 800d8e4:	ed91 7a00 	vldr	s14, [r1]
 800d8e8:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800d8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8f0:	eef4 6ac6 	vcmpe.f32	s13, s12
 800d8f4:	bfa8      	it	ge
 800d8f6:	eef0 7a66 	vmovge.f32	s15, s13
 800d8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8fe:	bf88      	it	hi
 800d900:	eef0 6a46 	vmovhi.f32	s13, s12
 800d904:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d908:	f201 519c 	addw	r1, r1, #1436	; 0x59c
 800d90c:	ed91 6a00 	vldr	s12, [r1]
 800d910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d914:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d918:	bfa8      	it	ge
 800d91a:	eef0 7a47 	vmovge.f32	s15, s14
 800d91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d922:	bf88      	it	hi
 800d924:	eeb0 7a66 	vmovhi.f32	s14, s13
 800d928:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800d92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d930:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800d934:	bfa8      	it	ge
 800d936:	eef0 7a46 	vmovge.f32	s15, s12
 800d93a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d93e:	bf88      	it	hi
 800d940:	eeb0 7a46 	vmovhi.f32	s14, s12
 800d944:	2b0a      	cmp	r3, #10
 800d946:	d113      	bne.n	800d970 <m_kalman_3gyro.isra.0.constprop.0+0x3158>
 800d948:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800d94c:	f501 61b8 	add.w	r1, r1, #1472	; 0x5c0
 800d950:	edd1 6a00 	vldr	s13, [r1]
 800d954:	eef4 7ae6 	vcmpe.f32	s15, s13
 800d958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d95c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800d960:	bfb8      	it	lt
 800d962:	eef0 7a66 	vmovlt.f32	s15, s13
 800d966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d96a:	bf88      	it	hi
 800d96c:	eeb0 7a66 	vmovhi.f32	s14, s13
 800d970:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d974:	ed1f 7a5b 	vldr	s14, [pc, #-364]	; 800d80c <m_kalman_3gyro.isra.0.constprop.0+0x2ff4>
 800d978:	eef4 7ac7 	vcmpe.f32	s15, s14
 800d97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d980:	f73e ab91 	bgt.w	800c0a6 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 800d984:	9915      	ldr	r1, [sp, #84]	; 0x54
 800d986:	ed91 7a00 	vldr	s14, [r1]
 800d98a:	9925      	ldr	r1, [sp, #148]	; 0x94
 800d98c:	ed91 6a00 	vldr	s12, [r1]
 800d990:	9928      	ldr	r1, [sp, #160]	; 0xa0
 800d992:	edd1 6a00 	vldr	s13, [r1]
 800d996:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800d99a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800d99e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9a2:	f501 6199 	add.w	r1, r1, #1224	; 0x4c8
 800d9a6:	bfb4      	ite	lt
 800d9a8:	eef0 7a46 	vmovlt.f32	s15, s12
 800d9ac:	eef0 7a47 	vmovge.f32	s15, s14
 800d9b0:	bf98      	it	ls
 800d9b2:	eeb0 6a47 	vmovls.f32	s12, s14
 800d9b6:	ed91 7a00 	vldr	s14, [r1]
 800d9ba:	993b      	ldr	r1, [sp, #236]	; 0xec
 800d9bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9c4:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800d9c8:	bfa8      	it	ge
 800d9ca:	eef0 7a47 	vmovge.f32	s15, s14
 800d9ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9d2:	bf98      	it	ls
 800d9d4:	eeb0 6a47 	vmovls.f32	s12, s14
 800d9d8:	eef4 6ae7 	vcmpe.f32	s13, s15
 800d9dc:	ed91 7a00 	vldr	s14, [r1]
 800d9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9e4:	eef4 6ac6 	vcmpe.f32	s13, s12
 800d9e8:	bfa8      	it	ge
 800d9ea:	eef0 7a66 	vmovge.f32	s15, s13
 800d9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9f2:	bf88      	it	hi
 800d9f4:	eef0 6a46 	vmovhi.f32	s13, s12
 800d9f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d9fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da00:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800da04:	bfa8      	it	ge
 800da06:	eef0 7a47 	vmovge.f32	s15, s14
 800da0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da0e:	bf88      	it	hi
 800da10:	eeb0 7a66 	vmovhi.f32	s14, s13
 800da14:	2b05      	cmp	r3, #5
 800da16:	d065      	beq.n	800dae4 <m_kalman_3gyro.isra.0.constprop.0+0x32cc>
 800da18:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800da1c:	f201 5134 	addw	r1, r1, #1332	; 0x534
 800da20:	edd1 6a00 	vldr	s13, [r1]
 800da24:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800da28:	eef4 6ae7 	vcmpe.f32	s13, s15
 800da2c:	f501 61ab 	add.w	r1, r1, #1368	; 0x558
 800da30:	ed91 6a00 	vldr	s12, [r1]
 800da34:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800da38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da3c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800da40:	bfa8      	it	ge
 800da42:	eef0 7a66 	vmovge.f32	s15, s13
 800da46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da4a:	bf98      	it	ls
 800da4c:	eeb0 7a66 	vmovls.f32	s14, s13
 800da50:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800da54:	f201 517c 	addw	r1, r1, #1404	; 0x57c
 800da58:	edd1 6a00 	vldr	s13, [r1]
 800da5c:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800da60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da64:	eeb4 6ac7 	vcmpe.f32	s12, s14
 800da68:	bfa8      	it	ge
 800da6a:	eef0 7a46 	vmovge.f32	s15, s12
 800da6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da72:	bf88      	it	hi
 800da74:	eeb0 6a47 	vmovhi.f32	s12, s14
 800da78:	eef4 6ae7 	vcmpe.f32	s13, s15
 800da7c:	f501 61b4 	add.w	r1, r1, #1440	; 0x5a0
 800da80:	ed91 7a00 	vldr	s14, [r1]
 800da84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da88:	eef4 6ac6 	vcmpe.f32	s13, s12
 800da8c:	bfa8      	it	ge
 800da8e:	eef0 7a66 	vmovge.f32	s15, s13
 800da92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da96:	bf88      	it	hi
 800da98:	eef0 6a46 	vmovhi.f32	s13, s12
 800da9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800daa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daa4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800daa8:	bfa8      	it	ge
 800daaa:	eef0 7a47 	vmovge.f32	s15, s14
 800daae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dab2:	bf88      	it	hi
 800dab4:	eeb0 7a66 	vmovhi.f32	s14, s13
 800dab8:	2b0a      	cmp	r3, #10
 800daba:	d113      	bne.n	800dae4 <m_kalman_3gyro.isra.0.constprop.0+0x32cc>
 800dabc:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800dac0:	f203 53c4 	addw	r3, r3, #1476	; 0x5c4
 800dac4:	edd3 6a00 	vldr	s13, [r3]
 800dac8:	eef4 7ae6 	vcmpe.f32	s15, s13
 800dacc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dad0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800dad4:	bfb8      	it	lt
 800dad6:	eef0 7a66 	vmovlt.f32	s15, s13
 800dada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dade:	bf88      	it	hi
 800dae0:	eeb0 7a66 	vmovhi.f32	s14, s13
 800dae4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dae8:	ed1f 7ab8 	vldr	s14, [pc, #-736]	; 800d80c <m_kalman_3gyro.isra.0.constprop.0+0x2ff4>
 800daec:	eef4 7ac7 	vcmpe.f32	s15, s14
 800daf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daf4:	f73e aad7 	bgt.w	800c0a6 <m_kalman_3gyro.isra.0.constprop.0+0x188e>
 800daf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	f43e aad7 	beq.w	800c0ae <m_kalman_3gyro.isra.0.constprop.0+0x1896>
 800db00:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800db04:	2b01      	cmp	r3, #1
 800db06:	d123      	bne.n	800db50 <m_kalman_3gyro.isra.0.constprop.0+0x3338>
 800db08:	2a0a      	cmp	r2, #10
 800db0a:	f43f ac1b 	beq.w	800d344 <m_kalman_3gyro.isra.0.constprop.0+0x2b2c>
 800db0e:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800db12:	2300      	movs	r3, #0
 800db14:	3201      	adds	r2, #1
 800db16:	f8c1 2450 	str.w	r2, [r1, #1104]	; 0x450
 800db1a:	f8a1 3202 	strh.w	r3, [r1, #514]	; 0x202
 800db1e:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 800db22:	f8c1 345c 	str.w	r3, [r1, #1116]	; 0x45c
 800db26:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 800db2a:	f7fe bae1 	b.w	800c0f0 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 800db2e:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800db32:	eef4 7aef 	vcmpe.f32	s15, s31
 800db36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db3a:	f73f ad4e 	bgt.w	800d5da <m_kalman_3gyro.isra.0.constprop.0+0x2dc2>
 800db3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db40:	2b00      	cmp	r3, #0
 800db42:	f43e aab4 	beq.w	800c0ae <m_kalman_3gyro.isra.0.constprop.0+0x1896>
 800db46:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800db4a:	2b01      	cmp	r3, #1
 800db4c:	f000 837a 	beq.w	800e244 <m_kalman_3gyro.isra.0.constprop.0+0x3a2c>
 800db50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db52:	2b02      	cmp	r3, #2
 800db54:	bf08      	it	eq
 800db56:	f50d 7902 	addeq.w	r9, sp, #520	; 0x208
 800db5a:	f000 84e3 	beq.w	800e524 <m_kalman_3gyro.isra.0.constprop.0+0x3d0c>
 800db5e:	2b04      	cmp	r3, #4
 800db60:	f040 8370 	bne.w	800e244 <m_kalman_3gyro.isra.0.constprop.0+0x3a2c>
 800db64:	4bd4      	ldr	r3, [pc, #848]	; (800deb8 <m_kalman_3gyro.isra.0.constprop.0+0x36a0>)
 800db66:	f893 21b0 	ldrb.w	r2, [r3, #432]	; 0x1b0
 800db6a:	2a04      	cmp	r2, #4
 800db6c:	f240 859a 	bls.w	800e6a4 <m_kalman_3gyro.isra.0.constprop.0+0x3e8c>
 800db70:	48d1      	ldr	r0, [pc, #836]	; (800deb8 <m_kalman_3gyro.isra.0.constprop.0+0x36a0>)
 800db72:	eddf 7ad2 	vldr	s15, [pc, #840]	; 800debc <m_kalman_3gyro.isra.0.constprop.0+0x36a4>
 800db76:	ed90 7a74 	vldr	s14, [r0, #464]	; 0x1d0
 800db7a:	ed9f 3ad1 	vldr	s6, [pc, #836]	; 800dec0 <m_kalman_3gyro.isra.0.constprop.0+0x36a8>
 800db7e:	edd0 0a71 	vldr	s1, [r0, #452]	; 0x1c4
 800db82:	edd0 3a73 	vldr	s7, [r0, #460]	; 0x1cc
 800db86:	ed80 7a71 	vstr	s14, [r0, #452]	; 0x1c4
 800db8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db8e:	ed90 4a70 	vldr	s8, [r0, #448]	; 0x1c0
 800db92:	edd0 4a72 	vldr	s9, [r0, #456]	; 0x1c8
 800db96:	ed90 1a7f 	vldr	s2, [r0, #508]	; 0x1fc
 800db9a:	edd0 1a80 	vldr	s3, [r0, #512]	; 0x200
 800db9e:	ed90 2a81 	vldr	s4, [r0, #516]	; 0x204
 800dba2:	edd0 5a75 	vldr	s11, [r0, #468]	; 0x1d4
 800dba6:	edd0 2a82 	vldr	s5, [r0, #520]	; 0x208
 800dbaa:	ed90 6a83 	vldr	s12, [r0, #524]	; 0x20c
 800dbae:	edd0 6a84 	vldr	s13, [r0, #528]	; 0x210
 800dbb2:	f8d0 31d8 	ldr.w	r3, [r0, #472]	; 0x1d8
 800dbb6:	f8d0 11dc 	ldr.w	r1, [r0, #476]	; 0x1dc
 800dbba:	f8d0 21e0 	ldr.w	r2, [r0, #480]	; 0x1e0
 800dbbe:	f8c0 31cc 	str.w	r3, [r0, #460]	; 0x1cc
 800dbc2:	eea0 7a83 	vfma.f32	s14, s1, s6
 800dbc6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800dbca:	f8c0 11d0 	str.w	r1, [r0, #464]	; 0x1d0
 800dbce:	ee23 5aa7 	vmul.f32	s10, s7, s15
 800dbd2:	edc0 0a6e 	vstr	s1, [r0, #440]	; 0x1b8
 800dbd6:	eea4 5a03 	vfma.f32	s10, s8, s6
 800dbda:	f8c0 3208 	str.w	r3, [r0, #520]	; 0x208
 800dbde:	f8c0 21d4 	str.w	r2, [r0, #468]	; 0x1d4
 800dbe2:	edc0 3a70 	vstr	s7, [r0, #448]	; 0x1c0
 800dbe6:	ed80 4a6d 	vstr	s8, [r0, #436]	; 0x1b4
 800dbea:	edc0 4a6f 	vstr	s9, [r0, #444]	; 0x1bc
 800dbee:	ed9f 4ab5 	vldr	s8, [pc, #724]	; 800dec4 <m_kalman_3gyro.isra.0.constprop.0+0x36ac>
 800dbf2:	edc0 5a72 	vstr	s11, [r0, #456]	; 0x1c8
 800dbf6:	ed80 1a7c 	vstr	s2, [r0, #496]	; 0x1f0
 800dbfa:	edc0 2a7f 	vstr	s5, [r0, #508]	; 0x1fc
 800dbfe:	edc0 1a7d 	vstr	s3, [r0, #500]	; 0x1f4
 800dc02:	ed80 6a80 	vstr	s12, [r0, #512]	; 0x200
 800dc06:	ed80 2a7e 	vstr	s4, [r0, #504]	; 0x1f8
 800dc0a:	edc0 6a81 	vstr	s13, [r0, #516]	; 0x204
 800dc0e:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
 800dc12:	edd0 0a7a 	vldr	s1, [r0, #488]	; 0x1e8
 800dc16:	ed90 0a79 	vldr	s0, [r0, #484]	; 0x1e4
 800dc1a:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
 800dc1e:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
 800dc22:	eea0 7a84 	vfma.f32	s14, s1, s8
 800dc26:	4601      	mov	r1, r0
 800dc28:	980a      	ldr	r0, [sp, #40]	; 0x28
 800dc2a:	edc1 0a77 	vstr	s1, [r1, #476]	; 0x1dc
 800dc2e:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800dc32:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800dc36:	edd0 3a01 	vldr	s7, [r0, #4]
 800dc3a:	edd0 0a00 	vldr	s1, [r0]
 800dc3e:	eea0 5a04 	vfma.f32	s10, s0, s8
 800dc42:	460a      	mov	r2, r1
 800dc44:	eee4 5a83 	vfma.f32	s11, s9, s6
 800dc48:	eddf 4a9f 	vldr	s9, [pc, #636]	; 800dec8 <m_kalman_3gyro.isra.0.constprop.0+0x36b0>
 800dc4c:	edd2 ba88 	vldr	s23, [r2, #544]	; 0x220
 800dc50:	ed92 da89 	vldr	s26, [r2, #548]	; 0x224
 800dc54:	edc2 3a7a 	vstr	s7, [r2, #488]	; 0x1e8
 800dc58:	ee26 6a27 	vmul.f32	s12, s12, s15
 800dc5c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800dc60:	eef0 7a62 	vmov.f32	s15, s5
 800dc64:	eea3 7aa4 	vfma.f32	s14, s7, s9
 800dc68:	eee1 7a03 	vfma.f32	s15, s2, s6
 800dc6c:	ed91 1a7b 	vldr	s2, [r1, #492]	; 0x1ec
 800dc70:	9908      	ldr	r1, [sp, #32]
 800dc72:	edd2 3a8a 	vldr	s7, [r2, #552]	; 0x228
 800dc76:	edd1 2a01 	vldr	s5, [r1, #4]
 800dc7a:	ed82 0a76 	vstr	s0, [r2, #472]	; 0x1d8
 800dc7e:	eea0 5aa4 	vfma.f32	s10, s1, s9
 800dc82:	eee1 5a04 	vfma.f32	s11, s2, s8
 800dc86:	eea1 6a83 	vfma.f32	s12, s3, s6
 800dc8a:	eee2 6a03 	vfma.f32	s13, s4, s6
 800dc8e:	edd0 1a02 	vldr	s3, [r0, #8]
 800dc92:	ed91 2a00 	vldr	s4, [r1]
 800dc96:	ed91 3a02 	vldr	s6, [r1, #8]
 800dc9a:	ed82 7a8c 	vstr	s14, [r2, #560]	; 0x230
 800dc9e:	ee27 7a07 	vmul.f32	s14, s14, s14
 800dca2:	eee1 5aa4 	vfma.f32	s11, s3, s9
 800dca6:	eeeb 7a84 	vfma.f32	s15, s23, s8
 800dcaa:	eead 6a04 	vfma.f32	s12, s26, s8
 800dcae:	eee3 6a84 	vfma.f32	s13, s7, s8
 800dcb2:	eea5 7a05 	vfma.f32	s14, s10, s10
 800dcb6:	eee2 7a24 	vfma.f32	s15, s4, s9
 800dcba:	eea2 6aa4 	vfma.f32	s12, s5, s9
 800dcbe:	eee3 6a24 	vfma.f32	s13, s6, s9
 800dcc2:	eea5 7aa5 	vfma.f32	s14, s11, s11
 800dcc6:	edc2 0a79 	vstr	s1, [r2, #484]	; 0x1e4
 800dcca:	edc2 7a8e 	vstr	s15, [r2, #568]	; 0x238
 800dcce:	ee17 0a10 	vmov	r0, s14
 800dcd2:	ed82 5a8b 	vstr	s10, [r2, #556]	; 0x22c
 800dcd6:	edc2 5a8d 	vstr	s11, [r2, #564]	; 0x234
 800dcda:	ed82 1a78 	vstr	s2, [r2, #480]	; 0x1e0
 800dcde:	edc2 1a7b 	vstr	s3, [r2, #492]	; 0x1ec
 800dce2:	edc2 ba85 	vstr	s23, [r2, #532]	; 0x214
 800dce6:	ed82 2a88 	vstr	s4, [r2, #544]	; 0x220
 800dcea:	ed82 da86 	vstr	s26, [r2, #536]	; 0x218
 800dcee:	edc2 2a89 	vstr	s5, [r2, #548]	; 0x224
 800dcf2:	ed82 3a8a 	vstr	s6, [r2, #552]	; 0x228
 800dcf6:	edc2 3a87 	vstr	s7, [r2, #540]	; 0x21c
 800dcfa:	f8c2 3210 	str.w	r3, [r2, #528]	; 0x210
 800dcfe:	ed82 6a8f 	vstr	s12, [r2, #572]	; 0x23c
 800dd02:	edc2 6a90 	vstr	s13, [r2, #576]	; 0x240
 800dd06:	eeb0 ca67 	vmov.f32	s24, s15
 800dd0a:	eef0 ca46 	vmov.f32	s25, s12
 800dd0e:	eef0 da66 	vmov.f32	s27, s13
 800dd12:	f7f2 fbbd 	bl	8000490 <__aeabi_f2d>
 800dd16:	ec41 0b10 	vmov	d0, r0, r1
 800dd1a:	f005 f975 	bl	8013008 <sqrt>
 800dd1e:	ec51 0b10 	vmov	r0, r1, d0
 800dd22:	f7f2 ff05 	bl	8000b30 <__aeabi_d2f>
 800dd26:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800dd2a:	ee07 0a10 	vmov	s14, r0
 800dd2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dd32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd36:	f77f ab48 	ble.w	800d3ca <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 800dd3a:	ee6c 7a0c 	vmul.f32	s15, s24, s24
 800dd3e:	eeec 7aac 	vfma.f32	s15, s25, s25
 800dd42:	eeed 7aad 	vfma.f32	s15, s27, s27
 800dd46:	ee17 0a90 	vmov	r0, s15
 800dd4a:	f7f2 fba1 	bl	8000490 <__aeabi_f2d>
 800dd4e:	ec41 0b10 	vmov	d0, r0, r1
 800dd52:	f005 f959 	bl	8013008 <sqrt>
 800dd56:	ec51 0b10 	vmov	r0, r1, d0
 800dd5a:	f7f2 fee9 	bl	8000b30 <__aeabi_d2f>
 800dd5e:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 800dd62:	ee07 0a10 	vmov	s14, r0
 800dd66:	eef4 7ac7 	vcmpe.f32	s15, s14
 800dd6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd6e:	f77f ab2c 	ble.w	800d3ca <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 800dd72:	9b08      	ldr	r3, [sp, #32]
 800dd74:	ed93 7a00 	vldr	s14, [r3]
 800dd78:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 800dd7c:	eeb0 7ac7 	vabs.f32	s14, s14
 800dd80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd88:	f57f ab1f 	bpl.w	800d3ca <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 800dd8c:	ed93 7a01 	vldr	s14, [r3, #4]
 800dd90:	eeb0 7ac7 	vabs.f32	s14, s14
 800dd94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800dd98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd9c:	f57f ab15 	bpl.w	800d3ca <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 800dda0:	ed93 7a02 	vldr	s14, [r3, #8]
 800dda4:	eeb0 7ac7 	vabs.f32	s14, s14
 800dda8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ddac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddb0:	f57f ab0b 	bpl.w	800d3ca <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 800ddb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddb6:	edd3 7a00 	vldr	s15, [r3]
 800ddba:	eef0 7ae7 	vabs.f32	s15, s15
 800ddbe:	ee17 0a90 	vmov	r0, s15
 800ddc2:	f7f2 fb65 	bl	8000490 <__aeabi_f2d>
 800ddc6:	a33a      	add	r3, pc, #232	; (adr r3, 800deb0 <m_kalman_3gyro.isra.0.constprop.0+0x3698>)
 800ddc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddcc:	f7f2 fe2a 	bl	8000a24 <__aeabi_dcmplt>
 800ddd0:	2800      	cmp	r0, #0
 800ddd2:	f43f aafa 	beq.w	800d3ca <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 800ddd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddd8:	edd3 7a01 	vldr	s15, [r3, #4]
 800dddc:	eef0 7ae7 	vabs.f32	s15, s15
 800dde0:	ee17 0a90 	vmov	r0, s15
 800dde4:	f7f2 fb54 	bl	8000490 <__aeabi_f2d>
 800dde8:	a331      	add	r3, pc, #196	; (adr r3, 800deb0 <m_kalman_3gyro.isra.0.constprop.0+0x3698>)
 800ddea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddee:	f7f2 fe19 	bl	8000a24 <__aeabi_dcmplt>
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	f43f aae9 	beq.w	800d3ca <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 800ddf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddfa:	edd3 7a02 	vldr	s15, [r3, #8]
 800ddfe:	eef0 7ae7 	vabs.f32	s15, s15
 800de02:	ee17 0a90 	vmov	r0, s15
 800de06:	f7f2 fb43 	bl	8000490 <__aeabi_f2d>
 800de0a:	a329      	add	r3, pc, #164	; (adr r3, 800deb0 <m_kalman_3gyro.isra.0.constprop.0+0x3698>)
 800de0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de10:	f7f2 fe08 	bl	8000a24 <__aeabi_dcmplt>
 800de14:	2800      	cmp	r0, #0
 800de16:	f43f aad8 	beq.w	800d3ca <m_kalman_3gyro.isra.0.constprop.0+0x2bb2>
 800de1a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800de1e:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 800de22:	2b0a      	cmp	r3, #10
 800de24:	f000 84b0 	beq.w	800e788 <m_kalman_3gyro.isra.0.constprop.0+0x3f70>
 800de28:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800de2c:	2200      	movs	r2, #0
 800de2e:	3301      	adds	r3, #1
 800de30:	f8c1 3450 	str.w	r3, [r1, #1104]	; 0x450
 800de34:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 800de38:	f881 2204 	strb.w	r2, [r1, #516]	; 0x204
 800de3c:	f8c1 245c 	str.w	r2, [r1, #1116]	; 0x45c
 800de40:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 800de44:	f7fe b954 	b.w	800c0f0 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 800de48:	4f20      	ldr	r7, [pc, #128]	; (800decc <m_kalman_3gyro.isra.0.constprop.0+0x36b4>)
 800de4a:	2600      	movs	r6, #0
 800de4c:	f7fd bcaa 	b.w	800b7a4 <m_kalman_3gyro.isra.0.constprop.0+0xf8c>
 800de50:	eef1 ba04 	vmov.f32	s23, #20	; 0x40a00000  5.0
 800de54:	f7fe b89a 	b.w	800bf8c <m_kalman_3gyro.isra.0.constprop.0+0x1774>
 800de58:	eef0 ca47 	vmov.f32	s25, s14
 800de5c:	ee27 7aaa 	vmul.f32	s14, s15, s21
 800de60:	eeb5 aa40 	vcmp.f32	s20, #0.0
 800de64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de68:	ed85 7a06 	vstr	s14, [r5, #24]
 800de6c:	d109      	bne.n	800de82 <m_kalman_3gyro.isra.0.constprop.0+0x366a>
 800de6e:	eeb0 aa47 	vmov.f32	s20, s14
 800de72:	eef0 aa66 	vmov.f32	s21, s13
 800de76:	f7ff b8b0 	b.w	800cfda <m_kalman_3gyro.isra.0.constprop.0+0x27c2>
 800de7a:	eef0 ca67 	vmov.f32	s25, s15
 800de7e:	f7ff b894 	b.w	800cfaa <m_kalman_3gyro.isra.0.constprop.0+0x2792>
 800de82:	eef0 aa66 	vmov.f32	s21, s13
 800de86:	f7ff b93c 	b.w	800d102 <m_kalman_3gyro.isra.0.constprop.0+0x28ea>
 800de8a:	eef0 9a4b 	vmov.f32	s19, s22
 800de8e:	ee67 6aab 	vmul.f32	s13, s15, s23
 800de92:	eeb5 ca40 	vcmp.f32	s24, #0.0
 800de96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de9a:	edc5 6a03 	vstr	s13, [r5, #12]
 800de9e:	d16b      	bne.n	800df78 <m_kalman_3gyro.isra.0.constprop.0+0x3760>
 800dea0:	eeb0 ca66 	vmov.f32	s24, s13
 800dea4:	eef0 ba47 	vmov.f32	s23, s14
 800dea8:	f7ff b8fd 	b.w	800d0a6 <m_kalman_3gyro.isra.0.constprop.0+0x288e>
 800deac:	f3af 8000 	nop.w
 800deb0:	66666666 	.word	0x66666666
 800deb4:	3ff66666 	.word	0x3ff66666
 800deb8:	20001690 	.word	0x20001690
 800debc:	bdcccccd 	.word	0xbdcccccd
 800dec0:	be4ccccd 	.word	0xbe4ccccd
 800dec4:	3dcccccd 	.word	0x3dcccccd
 800dec8:	3e4ccccd 	.word	0x3e4ccccd
 800decc:	40140000 	.word	0x40140000
 800ded0:	9b07      	ldr	r3, [sp, #28]
 800ded2:	ed8d aa52 	vstr	s20, [sp, #328]	; 0x148
 800ded6:	eeea 9a0a 	vfma.f32	s19, s20, s20
 800deda:	685a      	ldr	r2, [r3, #4]
 800dedc:	6899      	ldr	r1, [r3, #8]
 800dede:	681c      	ldr	r4, [r3, #0]
 800dee0:	9248      	str	r2, [sp, #288]	; 0x120
 800dee2:	461d      	mov	r5, r3
 800dee4:	eeb1 9a49 	vneg.f32	s18, s18
 800dee8:	68db      	ldr	r3, [r3, #12]
 800deea:	9149      	str	r1, [sp, #292]	; 0x124
 800deec:	eef1 8a68 	vneg.f32	s17, s17
 800def0:	eeb1 8a48 	vneg.f32	s16, s16
 800def4:	462a      	mov	r2, r5
 800def6:	a84f      	add	r0, sp, #316	; 0x13c
 800def8:	a947      	add	r1, sp, #284	; 0x11c
 800defa:	934a      	str	r3, [sp, #296]	; 0x128
 800defc:	ed8d 9a4f 	vstr	s18, [sp, #316]	; 0x13c
 800df00:	edcd 8a50 	vstr	s17, [sp, #320]	; 0x140
 800df04:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 800df08:	9447      	str	r4, [sp, #284]	; 0x11c
 800df0a:	f7fa fb89 	bl	8008620 <m_qmult_eml>
 800df0e:	ee19 0a90 	vmov	r0, s19
 800df12:	ed8d 9a47 	vstr	s18, [sp, #284]	; 0x11c
 800df16:	edcd 8a48 	vstr	s17, [sp, #288]	; 0x120
 800df1a:	ed8d 8a49 	vstr	s16, [sp, #292]	; 0x124
 800df1e:	ed8d 9a4f 	vstr	s18, [sp, #316]	; 0x13c
 800df22:	edcd 8a50 	vstr	s17, [sp, #320]	; 0x140
 800df26:	ed8d 8a51 	vstr	s16, [sp, #324]	; 0x144
 800df2a:	ed8d aa52 	vstr	s20, [sp, #328]	; 0x148
 800df2e:	ed8d aa4a 	vstr	s20, [sp, #296]	; 0x128
 800df32:	f7f2 faad 	bl	8000490 <__aeabi_f2d>
 800df36:	ec41 0b10 	vmov	d0, r0, r1
 800df3a:	f005 f865 	bl	8013008 <sqrt>
 800df3e:	ec51 0b10 	vmov	r0, r1, d0
 800df42:	f7f2 fdf5 	bl	8000b30 <__aeabi_d2f>
 800df46:	ee07 0a90 	vmov	s15, r0
 800df4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800df4e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 800df52:	ac4b      	add	r4, sp, #300	; 0x12c
 800df54:	ee29 9a27 	vmul.f32	s18, s18, s15
 800df58:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800df5c:	ee28 8a27 	vmul.f32	s16, s16, s15
 800df60:	ee2a aa27 	vmul.f32	s20, s20, s15
 800df64:	ed8d 9a4b 	vstr	s18, [sp, #300]	; 0x12c
 800df68:	edcd 8a4c 	vstr	s17, [sp, #304]	; 0x130
 800df6c:	ed8d 8a4d 	vstr	s16, [sp, #308]	; 0x134
 800df70:	ed8d aa4e 	vstr	s20, [sp, #312]	; 0x138
 800df74:	f7ff b99e 	b.w	800d2b4 <m_kalman_3gyro.isra.0.constprop.0+0x2a9c>
 800df78:	eef0 ba47 	vmov.f32	s23, s14
 800df7c:	ee27 7a8c 	vmul.f32	s14, s15, s24
 800df80:	eef5 ca40 	vcmp.f32	s25, #0.0
 800df84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df88:	ed85 7a04 	vstr	s14, [r5, #16]
 800df8c:	d122      	bne.n	800dfd4 <m_kalman_3gyro.isra.0.constprop.0+0x37bc>
 800df8e:	eef0 ca47 	vmov.f32	s25, s14
 800df92:	eeb0 ca66 	vmov.f32	s24, s13
 800df96:	f7ff b808 	b.w	800cfaa <m_kalman_3gyro.isra.0.constprop.0+0x2792>
 800df9a:	eef0 6a68 	vmov.f32	s13, s17
 800df9e:	e75d      	b.n	800de5c <m_kalman_3gyro.isra.0.constprop.0+0x3644>
 800dfa0:	eeb0 7a68 	vmov.f32	s14, s17
 800dfa4:	e773      	b.n	800de8e <m_kalman_3gyro.isra.0.constprop.0+0x3676>
 800dfa6:	f8d3 68b0 	ldr.w	r6, [r3, #2224]	; 0x8b0
 800dfaa:	b1ee      	cbz	r6, 800dfe8 <m_kalman_3gyro.isra.0.constprop.0+0x37d0>
 800dfac:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800dfae:	6818      	ldr	r0, [r3, #0]
 800dfb0:	f7f2 fa6e 	bl	8000490 <__aeabi_f2d>
 800dfb4:	a3b5      	add	r3, pc, #724	; (adr r3, 800e28c <m_kalman_3gyro.isra.0.constprop.0+0x3a74>)
 800dfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfba:	f7f2 fd51 	bl	8000a60 <__aeabi_dcmpgt>
 800dfbe:	b198      	cbz	r0, 800dfe8 <m_kalman_3gyro.isra.0.constprop.0+0x37d0>
 800dfc0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800dfc4:	3e01      	subs	r6, #1
 800dfc6:	f8c3 68b0 	str.w	r6, [r3, #2224]	; 0x8b0
 800dfca:	f7fe bb23 	b.w	800c614 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 800dfce:	eef0 6a68 	vmov.f32	s13, s17
 800dfd2:	e7d3      	b.n	800df7c <m_kalman_3gyro.isra.0.constprop.0+0x3764>
 800dfd4:	eeb0 ca66 	vmov.f32	s24, s13
 800dfd8:	f7ff b875 	b.w	800d0c6 <m_kalman_3gyro.isra.0.constprop.0+0x28ae>
 800dfdc:	a9bf      	add	r1, sp, #764	; 0x2fc
 800dfde:	a8b2      	add	r0, sp, #712	; 0x2c8
 800dfe0:	eeb0 0a4a 	vmov.f32	s0, s20
 800dfe4:	f7fd bb76 	b.w	800b6d4 <m_kalman_3gyro.isra.0.constprop.0+0xebc>
 800dfe8:	ee1f 0a90 	vmov	r0, s31
 800dfec:	f7f2 fa50 	bl	8000490 <__aeabi_f2d>
 800dff0:	4604      	mov	r4, r0
 800dff2:	980e      	ldr	r0, [sp, #56]	; 0x38
 800dff4:	460d      	mov	r5, r1
 800dff6:	f7f2 fa4b 	bl	8000490 <__aeabi_f2d>
 800dffa:	4b9f      	ldr	r3, [pc, #636]	; (800e278 <m_kalman_3gyro.isra.0.constprop.0+0x3a60>)
 800dffc:	2200      	movs	r2, #0
 800dffe:	f7f2 fa9f 	bl	8000540 <__aeabi_dmul>
 800e002:	4602      	mov	r2, r0
 800e004:	460b      	mov	r3, r1
 800e006:	4620      	mov	r0, r4
 800e008:	4629      	mov	r1, r5
 800e00a:	f7f2 fd0b 	bl	8000a24 <__aeabi_dcmplt>
 800e00e:	2800      	cmp	r0, #0
 800e010:	f43e ab00 	beq.w	800c614 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 800e014:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800e016:	f7f2 fa3b 	bl	8000490 <__aeabi_f2d>
 800e01a:	4604      	mov	r4, r0
 800e01c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e01e:	460d      	mov	r5, r1
 800e020:	f7f2 fa36 	bl	8000490 <__aeabi_f2d>
 800e024:	4b94      	ldr	r3, [pc, #592]	; (800e278 <m_kalman_3gyro.isra.0.constprop.0+0x3a60>)
 800e026:	2200      	movs	r2, #0
 800e028:	f7f2 fa8a 	bl	8000540 <__aeabi_dmul>
 800e02c:	4602      	mov	r2, r0
 800e02e:	460b      	mov	r3, r1
 800e030:	4620      	mov	r0, r4
 800e032:	4629      	mov	r1, r5
 800e034:	f7f2 fcf6 	bl	8000a24 <__aeabi_dcmplt>
 800e038:	2800      	cmp	r0, #0
 800e03a:	f43e aaeb 	beq.w	800c614 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 800e03e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800e040:	f7f2 fa26 	bl	8000490 <__aeabi_f2d>
 800e044:	4604      	mov	r4, r0
 800e046:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e048:	460d      	mov	r5, r1
 800e04a:	f7f2 fa21 	bl	8000490 <__aeabi_f2d>
 800e04e:	4602      	mov	r2, r0
 800e050:	460b      	mov	r3, r1
 800e052:	f7f2 f8bf 	bl	80001d4 <__adddf3>
 800e056:	460b      	mov	r3, r1
 800e058:	4602      	mov	r2, r0
 800e05a:	4629      	mov	r1, r5
 800e05c:	4620      	mov	r0, r4
 800e05e:	f7f2 fcff 	bl	8000a60 <__aeabi_dcmpgt>
 800e062:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e066:	f893 38ad 	ldrb.w	r3, [r3, #2221]	; 0x8ad
 800e06a:	2800      	cmp	r0, #0
 800e06c:	f000 8309 	beq.w	800e682 <m_kalman_3gyro.isra.0.constprop.0+0x3e6a>
 800e070:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e074:	2200      	movs	r2, #0
 800e076:	2b0e      	cmp	r3, #14
 800e078:	f8a1 21fc 	strh.w	r2, [r1, #508]	; 0x1fc
 800e07c:	f881 21fe 	strb.w	r2, [r1, #510]	; 0x1fe
 800e080:	f881 2205 	strb.w	r2, [r1, #517]	; 0x205
 800e084:	f881 2207 	strb.w	r2, [r1, #519]	; 0x207
 800e088:	f200 83af 	bhi.w	800e7ea <m_kalman_3gyro.isra.0.constprop.0+0x3fd2>
 800e08c:	3303      	adds	r3, #3
 800e08e:	f881 38ad 	strb.w	r3, [r1, #2221]	; 0x8ad
 800e092:	f7fe babf 	b.w	800c614 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 800e096:	edd3 7a03 	vldr	s15, [r3, #12]
 800e09a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e09e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0a2:	f47d abe7 	bne.w	800b874 <m_kalman_3gyro.isra.0.constprop.0+0x105c>
 800e0a6:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e0aa:	9804      	ldr	r0, [sp, #16]
 800e0ac:	645c      	str	r4, [r3, #68]	; 0x44
 800e0ae:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
 800e0b2:	649c      	str	r4, [r3, #72]	; 0x48
 800e0b4:	64dc      	str	r4, [r3, #76]	; 0x4c
 800e0b6:	655c      	str	r4, [r3, #84]	; 0x54
 800e0b8:	659c      	str	r4, [r3, #88]	; 0x58
 800e0ba:	65dc      	str	r4, [r3, #92]	; 0x5c
 800e0bc:	641d      	str	r5, [r3, #64]	; 0x40
 800e0be:	651d      	str	r5, [r3, #80]	; 0x50
 800e0c0:	661d      	str	r5, [r3, #96]	; 0x60
 800e0c2:	f7fa ff1b 	bl	8008efc <m_dcm2q_eml>
 800e0c6:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e0ca:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e0ce:	f8c3 4094 	str.w	r4, [r3, #148]	; 0x94
 800e0d2:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
 800e0d6:	f8c3 409c 	str.w	r4, [r3, #156]	; 0x9c
 800e0da:	f8dd 36b0 	ldr.w	r3, [sp, #1712]	; 0x6b0
 800e0de:	681a      	ldr	r2, [r3, #0]
 800e0e0:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
 800e0e4:	f8dd 26b0 	ldr.w	r2, [sp, #1712]	; 0x6b0
 800e0e8:	4b64      	ldr	r3, [pc, #400]	; (800e27c <m_kalman_3gyro.isra.0.constprop.0+0x3a64>)
 800e0ea:	6852      	ldr	r2, [r2, #4]
 800e0ec:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
 800e0f0:	f8dd 26b0 	ldr.w	r2, [sp, #1712]	; 0x6b0
 800e0f4:	6892      	ldr	r2, [r2, #8]
 800e0f6:	f8c1 30ac 	str.w	r3, [r1, #172]	; 0xac
 800e0fa:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e0fe:	f8c1 20a8 	str.w	r2, [r1, #168]	; 0xa8
 800e102:	f8c1 50b0 	str.w	r5, [r1, #176]	; 0xb0
 800e106:	f8c1 50b4 	str.w	r5, [r1, #180]	; 0xb4
 800e10a:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800e10e:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 800e112:	2100      	movs	r1, #0
 800e114:	f004 fd96 	bl	8012c44 <memset>
 800e118:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800e11c:	4b58      	ldr	r3, [pc, #352]	; (800e280 <m_kalman_3gyro.isra.0.constprop.0+0x3a68>)
 800e11e:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 800e122:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e126:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
 800e12a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
 800e12e:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
 800e132:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 800e136:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
 800e13a:	f8c2 31d0 	str.w	r3, [r2, #464]	; 0x1d0
 800e13e:	f8c2 31f8 	str.w	r3, [r2, #504]	; 0x1f8
 800e142:	f7fd bb97 	b.w	800b874 <m_kalman_3gyro.isra.0.constprop.0+0x105c>
 800e146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800e14a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800e14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e152:	f77e aa22 	ble.w	800c59a <m_kalman_3gyro.isra.0.constprop.0+0x1d82>
 800e156:	ed93 6a04 	vldr	s12, [r3, #16]
 800e15a:	edd3 6a05 	vldr	s13, [r3, #20]
 800e15e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e162:	ee26 6a27 	vmul.f32	s12, s12, s15
 800e166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e16a:	ed83 7a03 	vstr	s14, [r3, #12]
 800e16e:	ed83 6a04 	vstr	s12, [r3, #16]
 800e172:	edc3 7a05 	vstr	s15, [r3, #20]
 800e176:	f7fe ba10 	b.w	800c59a <m_kalman_3gyro.isra.0.constprop.0+0x1d82>
 800e17a:	4634      	mov	r4, r6
 800e17c:	463d      	mov	r5, r7
 800e17e:	f7fe b9f9 	b.w	800c574 <m_kalman_3gyro.isra.0.constprop.0+0x1d5c>
 800e182:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e186:	9907      	ldr	r1, [sp, #28]
 800e188:	edc3 9a12 	vstr	s19, [r3, #72]	; 0x48
 800e18c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800e190:	ed83 9a15 	vstr	s18, [r3, #84]	; 0x54
 800e194:	edc3 8a18 	vstr	s17, [r3, #96]	; 0x60
 800e198:	ed83 ca11 	vstr	s24, [r3, #68]	; 0x44
 800e19c:	edc3 ba14 	vstr	s23, [r3, #80]	; 0x50
 800e1a0:	ed83 8a17 	vstr	s16, [r3, #92]	; 0x5c
 800e1a4:	ed83 fa10 	vstr	s30, [r3, #64]	; 0x40
 800e1a8:	edc3 ea13 	vstr	s29, [r3, #76]	; 0x4c
 800e1ac:	ed83 ea16 	vstr	s28, [r3, #88]	; 0x58
 800e1b0:	9004      	str	r0, [sp, #16]
 800e1b2:	f7fa fea3 	bl	8008efc <m_dcm2q_eml>
 800e1b6:	eddf 7a33 	vldr	s15, [pc, #204]	; 800e284 <m_kalman_3gyro.isra.0.constprop.0+0x3a6c>
 800e1ba:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e1be:	eef4 aae7 	vcmpe.f32	s21, s15
 800e1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1c6:	ed83 da2b 	vstr	s26, [r3, #172]	; 0xac
 800e1ca:	f140 814a 	bpl.w	800e462 <m_kalman_3gyro.isra.0.constprop.0+0x3c4a>
 800e1ce:	eddf 7a2e 	vldr	s15, [pc, #184]	; 800e288 <m_kalman_3gyro.isra.0.constprop.0+0x3a70>
 800e1d2:	eef4 aae7 	vcmpe.f32	s21, s15
 800e1d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e1de:	bfc8      	it	gt
 800e1e0:	eef0 7a6a 	vmovgt.f32	s15, s21
 800e1e4:	edc3 7a2c 	vstr	s15, [r3, #176]	; 0xb0
 800e1e8:	f44f 72a2 	mov.w	r2, #324	; 0x144
 800e1ec:	2100      	movs	r1, #0
 800e1ee:	f103 00b8 	add.w	r0, r3, #184	; 0xb8
 800e1f2:	f004 fd27 	bl	8012c44 <memset>
 800e1f6:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800e1fa:	4b21      	ldr	r3, [pc, #132]	; (800e280 <m_kalman_3gyro.isra.0.constprop.0+0x3a68>)
 800e1fc:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
 800e200:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 800e204:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 800e208:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
 800e20c:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
 800e210:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
 800e214:	f8c0 31a8 	str.w	r3, [r0, #424]	; 0x1a8
 800e218:	f8c0 31d0 	str.w	r3, [r0, #464]	; 0x1d0
 800e21c:	f8c0 31f8 	str.w	r3, [r0, #504]	; 0x1f8
 800e220:	f8dd 36cc 	ldr.w	r3, [sp, #1740]	; 0x6cc
 800e224:	2100      	movs	r1, #0
 800e226:	2201      	movs	r2, #1
 800e228:	f880 1031 	strb.w	r1, [r0, #49]	; 0x31
 800e22c:	701a      	strb	r2, [r3, #0]
 800e22e:	f7fd baf3 	b.w	800b818 <m_kalman_3gyro.isra.0.constprop.0+0x1000>
 800e232:	2201      	movs	r2, #1
 800e234:	f240 1301 	movw	r3, #257	; 0x101
 800e238:	f881 21ff 	strb.w	r2, [r1, #511]	; 0x1ff
 800e23c:	f8a1 3200 	strh.w	r3, [r1, #512]	; 0x200
 800e240:	f7fe b907 	b.w	800c452 <m_kalman_3gyro.isra.0.constprop.0+0x1c3a>
 800e244:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e248:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e24c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800e250:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800e254:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800e258:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 800e25c:	2300      	movs	r3, #0
 800e25e:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
 800e262:	67ca      	str	r2, [r1, #124]	; 0x7c
 800e264:	f50d 7902 	add.w	r9, sp, #520	; 0x208
 800e268:	f8c1 3450 	str.w	r3, [r1, #1104]	; 0x450
 800e26c:	f8c1 345c 	str.w	r3, [r1, #1116]	; 0x45c
 800e270:	f7fd bf3e 	b.w	800c0f0 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 800e274:	f3af 8000 	nop.w
 800e278:	3ff80000 	.word	0x3ff80000
 800e27c:	3f666666 	.word	0x3f666666
 800e280:	40a00000 	.word	0x40a00000
 800e284:	3f99999a 	.word	0x3f99999a
 800e288:	3f4ccccd 	.word	0x3f4ccccd
 800e28c:	33333333 	.word	0x33333333
 800e290:	3fd33333 	.word	0x3fd33333
 800e294:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e298:	2301      	movs	r3, #1
 800e29a:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 800e29e:	f240 1201 	movw	r2, #257	; 0x101
 800e2a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e2a4:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 800e2a8:	edd3 7a00 	vldr	s15, [r3]
 800e2ac:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800e2b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e2b4:	eeb4 aae7 	vcmpe.f32	s20, s15
 800e2b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2bc:	f200 80d4 	bhi.w	800e468 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 800e2c0:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e2c4:	f893 38a4 	ldrb.w	r3, [r3, #2212]	; 0x8a4
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	f000 81a2 	beq.w	800e612 <m_kalman_3gyro.isra.0.constprop.0+0x3dfa>
 800e2ce:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800e2d2:	edd3 6a06 	vldr	s13, [r3, #24]
 800e2d6:	ed93 7a07 	vldr	s14, [r3, #28]
 800e2da:	edd3 7a08 	vldr	s15, [r3, #32]
 800e2de:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e2e2:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e2e6:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e2ea:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e2ee:	edc3 6a06 	vstr	s13, [r3, #24]
 800e2f2:	ed83 7a07 	vstr	s14, [r3, #28]
 800e2f6:	edc3 7a08 	vstr	s15, [r3, #32]
 800e2fa:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e2fe:	f8b3 38a6 	ldrh.w	r3, [r3, #2214]	; 0x8a6
 800e302:	3301      	adds	r3, #1
 800e304:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e308:	f000 81fa 	beq.w	800e700 <m_kalman_3gyro.isra.0.constprop.0+0x3ee8>
 800e30c:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800e310:	2b31      	cmp	r3, #49	; 0x31
 800e312:	f8a2 38a6 	strh.w	r3, [r2, #2214]	; 0x8a6
 800e316:	f200 81f3 	bhi.w	800e700 <m_kalman_3gyro.isra.0.constprop.0+0x3ee8>
 800e31a:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e31e:	f8d3 38a4 	ldr.w	r3, [r3, #2212]	; 0x8a4
 800e322:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e326:	f5b3 0f8c 	cmp.w	r3, #4587520	; 0x460000
 800e32a:	f000 81de 	beq.w	800e6ea <m_kalman_3gyro.isra.0.constprop.0+0x3ed2>
 800e32e:	f5b3 0fc8 	cmp.w	r3, #6553600	; 0x640000
 800e332:	f040 80b4 	bne.w	800e49e <m_kalman_3gyro.isra.0.constprop.0+0x3c86>
 800e336:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e33a:	f8dd 46d0 	ldr.w	r4, [sp, #1744]	; 0x6d0
 800e33e:	f8d3 00a0 	ldr.w	r0, [r3, #160]	; 0xa0
 800e342:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
 800e346:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800e34a:	2301      	movs	r3, #1
 800e34c:	f884 38a4 	strb.w	r3, [r4, #2212]	; 0x8a4
 800e350:	f604 0398 	addw	r3, r4, #2200	; 0x898
 800e354:	6018      	str	r0, [r3, #0]
 800e356:	f604 039c 	addw	r3, r4, #2204	; 0x89c
 800e35a:	6019      	str	r1, [r3, #0]
 800e35c:	f504 630a 	add.w	r3, r4, #2208	; 0x8a0
 800e360:	601a      	str	r2, [r3, #0]
 800e362:	eddd 7a4c 	vldr	s15, [sp, #304]	; 0x130
 800e366:	eddd 6a4b 	vldr	s13, [sp, #300]	; 0x12c
 800e36a:	ed9d 7a4d 	vldr	s14, [sp, #308]	; 0x134
 800e36e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800e372:	ee76 6aa6 	vadd.f32	s13, s13, s13
 800e376:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e37a:	ee37 7a07 	vadd.f32	s14, s14, s14
 800e37e:	eee6 7aa6 	vfma.f32	s15, s13, s13
 800e382:	eee7 7a07 	vfma.f32	s15, s14, s14
 800e386:	ee17 0a90 	vmov	r0, s15
 800e38a:	f7f2 f881 	bl	8000490 <__aeabi_f2d>
 800e38e:	ec41 0b10 	vmov	d0, r0, r1
 800e392:	f004 fe39 	bl	8013008 <sqrt>
 800e396:	ec51 0b10 	vmov	r0, r1, d0
 800e39a:	f7f2 fbc9 	bl	8000b30 <__aeabi_d2f>
 800e39e:	f7f2 f877 	bl	8000490 <__aeabi_f2d>
 800e3a2:	a3f7      	add	r3, pc, #988	; (adr r3, 800e780 <m_kalman_3gyro.isra.0.constprop.0+0x3f68>)
 800e3a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a8:	f7f2 fb3c 	bl	8000a24 <__aeabi_dcmplt>
 800e3ac:	2800      	cmp	r0, #0
 800e3ae:	f000 8124 	beq.w	800e5fa <m_kalman_3gyro.isra.0.constprop.0+0x3de2>
 800e3b2:	f50d 63d4 	add.w	r3, sp, #1696	; 0x6a0
 800e3b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	2300      	movs	r3, #0
 800e3be:	f7f2 fb27 	bl	8000a10 <__aeabi_dcmpeq>
 800e3c2:	2800      	cmp	r0, #0
 800e3c4:	f000 81b4 	beq.w	800e730 <m_kalman_3gyro.isra.0.constprop.0+0x3f18>
 800e3c8:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e3cc:	f8d3 3450 	ldr.w	r3, [r3, #1104]	; 0x450
 800e3d0:	2b32      	cmp	r3, #50	; 0x32
 800e3d2:	f040 81ae 	bne.w	800e732 <m_kalman_3gyro.isra.0.constprop.0+0x3f1a>
 800e3d6:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800e3da:	ed9f 7ae5 	vldr	s14, [pc, #916]	; 800e770 <m_kalman_3gyro.isra.0.constprop.0+0x3f58>
 800e3de:	edd3 7a06 	vldr	s15, [r3, #24]
 800e3e2:	f8dd 1688 	ldr.w	r1, [sp, #1672]	; 0x688
 800e3e6:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e3ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e3ee:	f8d3 345c 	ldr.w	r3, [r3, #1116]	; 0x45c
 800e3f2:	edc1 7a06 	vstr	s15, [r1, #24]
 800e3f6:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	f881 2202 	strb.w	r2, [r1, #514]	; 0x202
 800e400:	f8dd 1688 	ldr.w	r1, [sp, #1672]	; 0x688
 800e404:	edd1 7a07 	vldr	s15, [r1, #28]
 800e408:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e40c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e410:	edc1 7a07 	vstr	s15, [r1, #28]
 800e414:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e418:	f881 2203 	strb.w	r2, [r1, #515]	; 0x203
 800e41c:	f8dd 1688 	ldr.w	r1, [sp, #1672]	; 0x688
 800e420:	edd1 7a08 	vldr	s15, [r1, #32]
 800e424:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e428:	edc1 7a08 	vstr	s15, [r1, #32]
 800e42c:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e430:	f881 2204 	strb.w	r2, [r1, #516]	; 0x204
 800e434:	f000 81de 	beq.w	800e7f4 <m_kalman_3gyro.isra.0.constprop.0+0x3fdc>
 800e438:	3301      	adds	r3, #1
 800e43a:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800e43e:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800e442:	f8c2 345c 	str.w	r3, [r2, #1116]	; 0x45c
 800e446:	993d      	ldr	r1, [sp, #244]	; 0xf4
 800e448:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
 800e44a:	9b3f      	ldr	r3, [sp, #252]	; 0xfc
 800e44c:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
 800e450:	f8c0 20a4 	str.w	r2, [r0, #164]	; 0xa4
 800e454:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
 800e458:	f7fd be4a 	b.w	800c0f0 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 800e45c:	1c5c      	adds	r4, r3, #1
 800e45e:	f7fd bb09 	b.w	800ba74 <m_kalman_3gyro.isra.0.constprop.0+0x125c>
 800e462:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e466:	e6bd      	b.n	800e1e4 <m_kalman_3gyro.isra.0.constprop.0+0x39cc>
 800e468:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800e46c:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 800e470:	edd3 6a06 	vldr	s13, [r3, #24]
 800e474:	ed93 7a07 	vldr	s14, [r3, #28]
 800e478:	edd3 7a08 	vldr	s15, [r3, #32]
 800e47c:	ee66 6aab 	vmul.f32	s13, s13, s23
 800e480:	ee27 7a2b 	vmul.f32	s14, s14, s23
 800e484:	ee67 baab 	vmul.f32	s23, s15, s23
 800e488:	edc2 6a06 	vstr	s13, [r2, #24]
 800e48c:	ed82 7a07 	vstr	s14, [r2, #28]
 800e490:	edc2 ba08 	vstr	s23, [r2, #32]
 800e494:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800e498:	2300      	movs	r3, #0
 800e49a:	f8a2 38a6 	strh.w	r3, [r2, #2214]	; 0x8a6
 800e49e:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e4a2:	f893 38a4 	ldrb.w	r3, [r3, #2212]	; 0x8a4
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	f47f af5b 	bne.w	800e362 <m_kalman_3gyro.isra.0.constprop.0+0x3b4a>
 800e4ac:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800e4b0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 800e4b4:	b32a      	cbz	r2, 800e502 <m_kalman_3gyro.isra.0.constprop.0+0x3cea>
 800e4b6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800e4ba:	eef4 dae7 	vcmpe.f32	s27, s15
 800e4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4c2:	d51e      	bpl.n	800e502 <m_kalman_3gyro.isra.0.constprop.0+0x3cea>
 800e4c4:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800e4c8:	ed92 7af1 	vldr	s14, [r2, #964]	; 0x3c4
 800e4cc:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 800e4d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e4d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4d8:	d513      	bpl.n	800e502 <m_kalman_3gyro.isra.0.constprop.0+0x3cea>
 800e4da:	4610      	mov	r0, r2
 800e4dc:	f8d2 13d8 	ldr.w	r1, [r2, #984]	; 0x3d8
 800e4e0:	f8d2 23dc 	ldr.w	r2, [r2, #988]	; 0x3dc
 800e4e4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
 800e4e8:	f8d0 13d4 	ldr.w	r1, [r0, #980]	; 0x3d4
 800e4ec:	67c1      	str	r1, [r0, #124]	; 0x7c
 800e4ee:	f8dd 16c8 	ldr.w	r1, [sp, #1736]	; 0x6c8
 800e4f2:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	700a      	strb	r2, [r1, #0]
 800e4fa:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
 800e4fe:	f7fd bdf7 	b.w	800c0f0 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 800e502:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e506:	f8d3 3454 	ldr.w	r3, [r3, #1108]	; 0x454
 800e50a:	2b1e      	cmp	r3, #30
 800e50c:	f000 808c 	beq.w	800e628 <m_kalman_3gyro.isra.0.constprop.0+0x3e10>
 800e510:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e514:	3301      	adds	r3, #1
 800e516:	2200      	movs	r2, #0
 800e518:	f8c1 3454 	str.w	r3, [r1, #1108]	; 0x454
 800e51c:	f8c1 245c 	str.w	r2, [r1, #1116]	; 0x45c
 800e520:	f7fd bde6 	b.w	800c0f0 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 800e524:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e528:	2301      	movs	r3, #1
 800e52a:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 800e52e:	f240 1201 	movw	r2, #257	; 0x101
 800e532:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e534:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 800e538:	edd3 7a00 	vldr	s15, [r3]
 800e53c:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800e540:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e544:	eef4 7aca 	vcmpe.f32	s15, s20
 800e548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e54c:	f6bf aeb8 	bge.w	800e2c0 <m_kalman_3gyro.isra.0.constprop.0+0x3aa8>
 800e550:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 800e554:	ed9d 7a0c 	vldr	s14, [sp, #48]	; 0x30
 800e558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e55c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e560:	dd82      	ble.n	800e468 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 800e562:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
 800e566:	eef4 7aef 	vcmpe.f32	s15, s31
 800e56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e56e:	f77f af7b 	ble.w	800e468 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 800e572:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
 800e576:	eddd 5a17 	vldr	s11, [sp, #92]	; 0x5c
 800e57a:	eef4 7ae5 	vcmpe.f32	s15, s11
 800e57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e582:	f77f af71 	ble.w	800e468 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 800e586:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e58a:	eef4 dae6 	vcmpe.f32	s27, s13
 800e58e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e592:	f57f af69 	bpl.w	800e468 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 800e596:	ed9d 6a0d 	vldr	s12, [sp, #52]	; 0x34
 800e59a:	ee87 7a06 	vdiv.f32	s14, s14, s12
 800e59e:	ed9d 6a0e 	vldr	s12, [sp, #56]	; 0x38
 800e5a2:	ee8f 6a86 	vdiv.f32	s12, s31, s12
 800e5a6:	eec5 7aa7 	vdiv.f32	s15, s11, s15
 800e5aa:	ee37 7a06 	vadd.f32	s14, s14, s12
 800e5ae:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 800e5b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e5b6:	eef4 7ac6 	vcmpe.f32	s15, s12
 800e5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5be:	f57f af53 	bpl.w	800e468 <m_kalman_3gyro.isra.0.constprop.0+0x3c50>
 800e5c2:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800e5c6:	f8dd 2688 	ldr.w	r2, [sp, #1672]	; 0x688
 800e5ca:	ed93 6a06 	vldr	s12, [r3, #24]
 800e5ce:	ed93 7a07 	vldr	s14, [r3, #28]
 800e5d2:	edd3 7a08 	vldr	s15, [r3, #32]
 800e5d6:	ee26 6a26 	vmul.f32	s12, s12, s13
 800e5da:	ee27 7a26 	vmul.f32	s14, s14, s13
 800e5de:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e5e2:	ed82 6a06 	vstr	s12, [r2, #24]
 800e5e6:	ed82 7a07 	vstr	s14, [r2, #28]
 800e5ea:	edc2 6a08 	vstr	s13, [r2, #32]
 800e5ee:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800e5f2:	2300      	movs	r3, #0
 800e5f4:	f8a2 38a6 	strh.w	r3, [r2, #2214]	; 0x8a6
 800e5f8:	e751      	b.n	800e49e <m_kalman_3gyro.isra.0.constprop.0+0x3c86>
 800e5fa:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e5fe:	f8c3 0450 	str.w	r0, [r3, #1104]	; 0x450
 800e602:	f8a3 0202 	strh.w	r0, [r3, #514]	; 0x202
 800e606:	f883 0204 	strb.w	r0, [r3, #516]	; 0x204
 800e60a:	f8c3 045c 	str.w	r0, [r3, #1116]	; 0x45c
 800e60e:	f7fd bd6f 	b.w	800c0f0 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 800e612:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800e616:	ed9f 6a57 	vldr	s12, [pc, #348]	; 800e774 <m_kalman_3gyro.isra.0.constprop.0+0x3f5c>
 800e61a:	edd3 6a06 	vldr	s13, [r3, #24]
 800e61e:	ed93 7a07 	vldr	s14, [r3, #28]
 800e622:	edd3 7a08 	vldr	s15, [r3, #32]
 800e626:	e65c      	b.n	800e2e2 <m_kalman_3gyro.isra.0.constprop.0+0x3aca>
 800e628:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e62c:	f8b3 38a6 	ldrh.w	r3, [r3, #2214]	; 0x8a6
 800e630:	2b27      	cmp	r3, #39	; 0x27
 800e632:	f200 80f6 	bhi.w	800e822 <m_kalman_3gyro.isra.0.constprop.0+0x400a>
 800e636:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e63a:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e63e:	f8d3 23d8 	ldr.w	r2, [r3, #984]	; 0x3d8
 800e642:	f8d3 33dc 	ldr.w	r3, [r3, #988]	; 0x3dc
 800e646:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 800e64a:	f8d1 23d4 	ldr.w	r2, [r1, #980]	; 0x3d4
 800e64e:	67ca      	str	r2, [r1, #124]	; 0x7c
 800e650:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 800e654:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
 800e658:	2301      	movs	r3, #1
 800e65a:	7013      	strb	r3, [r2, #0]
 800e65c:	460b      	mov	r3, r1
 800e65e:	f8b3 38a8 	ldrh.w	r3, [r3, #2216]	; 0x8a8
 800e662:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e666:	2201      	movs	r2, #1
 800e668:	4413      	add	r3, r2
 800e66a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e66e:	bf14      	ite	ne
 800e670:	b29b      	uxthne	r3, r3
 800e672:	f64f 73ff 	movweq	r3, #65535	; 0xffff
 800e676:	f8c1 245c 	str.w	r2, [r1, #1116]	; 0x45c
 800e67a:	f8a1 38a8 	strh.w	r3, [r1, #2216]	; 0x8a8
 800e67e:	f7fd bd37 	b.w	800c0f0 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 800e682:	2b00      	cmp	r3, #0
 800e684:	d063      	beq.n	800e74e <m_kalman_3gyro.isra.0.constprop.0+0x3f36>
 800e686:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800e68a:	3b01      	subs	r3, #1
 800e68c:	f882 38ad 	strb.w	r3, [r2, #2221]	; 0x8ad
 800e690:	f8a2 01fc 	strh.w	r0, [r2, #508]	; 0x1fc
 800e694:	f882 01fe 	strb.w	r0, [r2, #510]	; 0x1fe
 800e698:	f882 0205 	strb.w	r0, [r2, #517]	; 0x205
 800e69c:	f882 0207 	strb.w	r0, [r2, #519]	; 0x207
 800e6a0:	f7fd bfb8 	b.w	800c614 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 800e6a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 800e6a6:	4f34      	ldr	r7, [pc, #208]	; (800e778 <m_kalman_3gyro.isra.0.constprop.0+0x3f60>)
 800e6a8:	6801      	ldr	r1, [r0, #0]
 800e6aa:	6846      	ldr	r6, [r0, #4]
 800e6ac:	6885      	ldr	r5, [r0, #8]
 800e6ae:	9808      	ldr	r0, [sp, #32]
 800e6b0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800e6b4:	3201      	adds	r2, #1
 800e6b6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800e6ba:	f887 21b0 	strb.w	r2, [r7, #432]	; 0x1b0
 800e6be:	4602      	mov	r2, r0
 800e6c0:	6804      	ldr	r4, [r0, #0]
 800e6c2:	f8c3 11b4 	str.w	r1, [r3, #436]	; 0x1b4
 800e6c6:	6840      	ldr	r0, [r0, #4]
 800e6c8:	6891      	ldr	r1, [r2, #8]
 800e6ca:	f8c3 61b8 	str.w	r6, [r3, #440]	; 0x1b8
 800e6ce:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
 800e6d2:	f8c3 41f0 	str.w	r4, [r3, #496]	; 0x1f0
 800e6d6:	f8c3 01f4 	str.w	r0, [r3, #500]	; 0x1f4
 800e6da:	f8c3 11f8 	str.w	r1, [r3, #504]	; 0x1f8
 800e6de:	f8dd 36c8 	ldr.w	r3, [sp, #1736]	; 0x6c8
 800e6e2:	2200      	movs	r2, #0
 800e6e4:	701a      	strb	r2, [r3, #0]
 800e6e6:	f7fe b8ac 	b.w	800c842 <m_kalman_3gyro.isra.0.constprop.0+0x202a>
 800e6ea:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800e6ee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800e6f2:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
 800e6f6:	f8c2 3158 	str.w	r3, [r2, #344]	; 0x158
 800e6fa:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
 800e6fe:	e6ce      	b.n	800e49e <m_kalman_3gyro.isra.0.constprop.0+0x3c86>
 800e700:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e704:	f893 38a4 	ldrb.w	r3, [r3, #2212]	; 0x8a4
 800e708:	2b00      	cmp	r3, #0
 800e70a:	f47f ae06 	bne.w	800e31a <m_kalman_3gyro.isra.0.constprop.0+0x3b02>
 800e70e:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 800e77c <m_kalman_3gyro.isra.0.constprop.0+0x3f64>
 800e712:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800e716:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e71a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e71e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e722:	edc3 6a06 	vstr	s13, [r3, #24]
 800e726:	ed83 7a07 	vstr	s14, [r3, #28]
 800e72a:	edc3 7a08 	vstr	s15, [r3, #32]
 800e72e:	e5f4      	b.n	800e31a <m_kalman_3gyro.isra.0.constprop.0+0x3b02>
 800e730:	4603      	mov	r3, r0
 800e732:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e736:	2200      	movs	r2, #0
 800e738:	3301      	adds	r3, #1
 800e73a:	f8c1 3450 	str.w	r3, [r1, #1104]	; 0x450
 800e73e:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 800e742:	f881 2204 	strb.w	r2, [r1, #516]	; 0x204
 800e746:	f8c1 245c 	str.w	r2, [r1, #1116]	; 0x45c
 800e74a:	f7fd bcd1 	b.w	800c0f0 <m_kalman_3gyro.isra.0.constprop.0+0x18d8>
 800e74e:	2e00      	cmp	r6, #0
 800e750:	d078      	beq.n	800e844 <m_kalman_3gyro.isra.0.constprop.0+0x402c>
 800e752:	f8dd 26d0 	ldr.w	r2, [sp, #1744]	; 0x6d0
 800e756:	f8a2 31fc 	strh.w	r3, [r2, #508]	; 0x1fc
 800e75a:	f882 31fe 	strb.w	r3, [r2, #510]	; 0x1fe
 800e75e:	f882 3205 	strb.w	r3, [r2, #517]	; 0x205
 800e762:	f882 3207 	strb.w	r3, [r2, #519]	; 0x207
 800e766:	f7fd bf55 	b.w	800c614 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 800e76a:	bf00      	nop
 800e76c:	f3af 8000 	nop.w
 800e770:	3e4ccccd 	.word	0x3e4ccccd
 800e774:	3eaaaaab 	.word	0x3eaaaaab
 800e778:	20001690 	.word	0x20001690
 800e77c:	3f19999a 	.word	0x3f19999a
 800e780:	47ae147b 	.word	0x47ae147b
 800e784:	3f747ae1 	.word	0x3f747ae1
 800e788:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e78c:	f8dd 06d0 	ldr.w	r0, [sp, #1744]	; 0x6d0
 800e790:	2301      	movs	r3, #1
 800e792:	f240 1201 	movw	r2, #257	; 0x101
 800e796:	f8a1 2202 	strh.w	r2, [r1, #514]	; 0x202
 800e79a:	f881 3204 	strb.w	r3, [r1, #516]	; 0x204
 800e79e:	9908      	ldr	r1, [sp, #32]
 800e7a0:	680a      	ldr	r2, [r1, #0]
 800e7a2:	67c2      	str	r2, [r0, #124]	; 0x7c
 800e7a4:	684a      	ldr	r2, [r1, #4]
 800e7a6:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 800e7aa:	688a      	ldr	r2, [r1, #8]
 800e7ac:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
 800e7b0:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 800e7b4:	7013      	strb	r3, [r2, #0]
 800e7b6:	f8d0 345c 	ldr.w	r3, [r0, #1116]	; 0x45c
 800e7ba:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
 800e7be:	3301      	adds	r3, #1
 800e7c0:	f8c0 345c 	str.w	r3, [r0, #1116]	; 0x45c
 800e7c4:	2a00      	cmp	r2, #0
 800e7c6:	f43e ade9 	beq.w	800d39c <m_kalman_3gyro.isra.0.constprop.0+0x2b84>
 800e7ca:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 800e7ce:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 800e7d2:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
 800e7d6:	f8c0 20a8 	str.w	r2, [r0, #168]	; 0xa8
 800e7da:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 800e7dc:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
 800e7e6:	f7fe bdd9 	b.w	800d39c <m_kalman_3gyro.isra.0.constprop.0+0x2b84>
 800e7ea:	2364      	movs	r3, #100	; 0x64
 800e7ec:	f8c1 38b0 	str.w	r3, [r1, #2224]	; 0x8b0
 800e7f0:	f7fd bf10 	b.w	800c614 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>
 800e7f4:	460b      	mov	r3, r1
 800e7f6:	f8d1 00a0 	ldr.w	r0, [r1, #160]	; 0xa0
 800e7fa:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800e7fe:	f8d1 10a4 	ldr.w	r1, [r1, #164]	; 0xa4
 800e802:	f603 0398 	addw	r3, r3, #2200	; 0x898
 800e806:	6018      	str	r0, [r3, #0]
 800e808:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e80c:	f603 039c 	addw	r3, r3, #2204	; 0x89c
 800e810:	6019      	str	r1, [r3, #0]
 800e812:	f8dd 36d0 	ldr.w	r3, [sp, #1744]	; 0x6d0
 800e816:	f503 630a 	add.w	r3, r3, #2208	; 0x8a0
 800e81a:	601a      	str	r2, [r3, #0]
 800e81c:	f240 33e9 	movw	r3, #1001	; 0x3e9
 800e820:	e60b      	b.n	800e43a <m_kalman_3gyro.isra.0.constprop.0+0x3c22>
 800e822:	9a08      	ldr	r2, [sp, #32]
 800e824:	f8dd 16d0 	ldr.w	r1, [sp, #1744]	; 0x6d0
 800e828:	6813      	ldr	r3, [r2, #0]
 800e82a:	67cb      	str	r3, [r1, #124]	; 0x7c
 800e82c:	6853      	ldr	r3, [r2, #4]
 800e82e:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
 800e832:	6892      	ldr	r2, [r2, #8]
 800e834:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
 800e838:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
 800e83c:	2301      	movs	r3, #1
 800e83e:	7013      	strb	r3, [r2, #0]
 800e840:	460b      	mov	r3, r1
 800e842:	e70c      	b.n	800e65e <m_kalman_3gyro.isra.0.constprop.0+0x3e46>
 800e844:	f8dd 3688 	ldr.w	r3, [sp, #1672]	; 0x688
 800e848:	edd3 6a00 	vldr	s13, [r3]
 800e84c:	ed93 7a01 	vldr	s14, [r3, #4]
 800e850:	edd3 7a02 	vldr	s15, [r3, #8]
 800e854:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800e858:	ee66 6a86 	vmul.f32	s13, s13, s12
 800e85c:	ee27 7a06 	vmul.f32	s14, s14, s12
 800e860:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e864:	edc3 6a00 	vstr	s13, [r3]
 800e868:	ed83 7a01 	vstr	s14, [r3, #4]
 800e86c:	edc3 7a02 	vstr	s15, [r3, #8]
 800e870:	f7fd bed0 	b.w	800c614 <m_kalman_3gyro.isra.0.constprop.0+0x1dfc>

0800e874 <SpacePointAlgorithm.isra.0>:
 800e874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e878:	ed2d 8b10 	vpush	{d8-d15}
 800e87c:	b0bb      	sub	sp, #236	; 0xec
 800e87e:	f8df e3e8 	ldr.w	lr, [pc, #1000]	; 800ec68 <SpacePointAlgorithm.isra.0+0x3f4>
 800e882:	f89d 5160 	ldrb.w	r5, [sp, #352]	; 0x160
 800e886:	9515      	str	r5, [sp, #84]	; 0x54
 800e888:	f89d 5168 	ldrb.w	r5, [sp, #360]	; 0x168
 800e88c:	9516      	str	r5, [sp, #88]	; 0x58
 800e88e:	f89d 516c 	ldrb.w	r5, [sp, #364]	; 0x16c
 800e892:	9517      	str	r5, [sp, #92]	; 0x5c
 800e894:	f89d 5170 	ldrb.w	r5, [sp, #368]	; 0x170
 800e898:	9518      	str	r5, [sp, #96]	; 0x60
 800e89a:	4681      	mov	r9, r0
 800e89c:	460e      	mov	r6, r1
 800e89e:	4692      	mov	sl, r2
 800e8a0:	461d      	mov	r5, r3
 800e8a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e8a6:	f10d 0c7c 	add.w	ip, sp, #124	; 0x7c
 800e8aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e8ae:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e8b2:	9f69      	ldr	r7, [sp, #420]	; 0x1a4
 800e8b4:	ed8d 1a19 	vstr	s2, [sp, #100]	; 0x64
 800e8b8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e8bc:	e9dd 0156 	ldrd	r0, r1, [sp, #344]	; 0x158
 800e8c0:	eef0 ba40 	vmov.f32	s23, s0
 800e8c4:	eeb0 ea60 	vmov.f32	s28, s1
 800e8c8:	eef0 da61 	vmov.f32	s27, s3
 800e8cc:	eeb0 ba42 	vmov.f32	s22, s4
 800e8d0:	eef0 9a62 	vmov.f32	s19, s5
 800e8d4:	eeb0 aa43 	vmov.f32	s20, s6
 800e8d8:	eef0 aa63 	vmov.f32	s21, s7
 800e8dc:	f7f2 f928 	bl	8000b30 <__aeabi_d2f>
 800e8e0:	f897 38cc 	ldrb.w	r3, [r7, #2252]	; 0x8cc
 800e8e4:	9c54      	ldr	r4, [sp, #336]	; 0x150
 800e8e6:	f89d b164 	ldrb.w	fp, [sp, #356]	; 0x164
 800e8ea:	f8dd 8190 	ldr.w	r8, [sp, #400]	; 0x190
 800e8ee:	ee0c 0a90 	vmov	s25, r0
 800e8f2:	b923      	cbnz	r3, 800e8fe <SpacePointAlgorithm.isra.0+0x8a>
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	603a      	str	r2, [r7, #0]
 800e8fa:	f887 38cc 	strb.w	r3, [r7, #2252]	; 0x8cc
 800e8fe:	eddf 7ace 	vldr	s15, [pc, #824]	; 800ec38 <SpacePointAlgorithm.isra.0+0x3c4>
 800e902:	eec7 7aab 	vdiv.f32	s15, s15, s23
 800e906:	ee17 0a90 	vmov	r0, s15
 800e90a:	f7f1 fdc1 	bl	8000490 <__aeabi_f2d>
 800e90e:	ec41 0b10 	vmov	d0, r0, r1
 800e912:	f004 fb79 	bl	8013008 <sqrt>
 800e916:	ec51 0b10 	vmov	r0, r1, d0
 800e91a:	f7f2 f909 	bl	8000b30 <__aeabi_d2f>
 800e91e:	eddf 4ac7 	vldr	s9, [pc, #796]	; 800ec3c <SpacePointAlgorithm.isra.0+0x3c8>
 800e922:	ed95 5a00 	vldr	s10, [r5]
 800e926:	edd5 5a01 	vldr	s11, [r5, #4]
 800e92a:	ed95 6a02 	vldr	s12, [r5, #8]
 800e92e:	eddf 6ac4 	vldr	s13, [pc, #784]	; 800ec40 <SpacePointAlgorithm.isra.0+0x3cc>
 800e932:	ed9d 1a20 	vldr	s2, [sp, #128]	; 0x80
 800e936:	ed9d 7a21 	vldr	s14, [sp, #132]	; 0x84
 800e93a:	eddd ea22 	vldr	s29, [sp, #136]	; 0x88
 800e93e:	ed9d da23 	vldr	s26, [sp, #140]	; 0x8c
 800e942:	ed9d 9a24 	vldr	s18, [sp, #144]	; 0x90
 800e946:	ee07 0a90 	vmov	s15, r0
 800e94a:	ee25 5a24 	vmul.f32	s10, s10, s9
 800e94e:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800e952:	ee26 6a24 	vmul.f32	s12, s12, s9
 800e956:	ee86 8aa7 	vdiv.f32	s16, s13, s15
 800e95a:	ee27 fa81 	vmul.f32	s30, s15, s2
 800e95e:	ee67 fa87 	vmul.f32	s31, s15, s14
 800e962:	ee67 8aae 	vmul.f32	s17, s15, s29
 800e966:	ee27 da8d 	vmul.f32	s26, s15, s26
 800e96a:	ee27 9a89 	vmul.f32	s18, s15, s18
 800e96e:	ed85 5a00 	vstr	s10, [r5]
 800e972:	edc5 5a01 	vstr	s11, [r5, #4]
 800e976:	ed85 6a02 	vstr	s12, [r5, #8]
 800e97a:	f1bb 0f04 	cmp.w	fp, #4
 800e97e:	f200 812f 	bhi.w	800ebe0 <SpacePointAlgorithm.isra.0+0x36c>
 800e982:	e8df f01b 	tbh	[pc, fp, lsl #1]
 800e986:	0140      	.short	0x0140
 800e988:	0122014d 	.word	0x0122014d
 800e98c:	0005012d 	.word	0x0005012d
 800e990:	ed9f caac 	vldr	s24, [pc, #688]	; 800ec44 <SpacePointAlgorithm.isra.0+0x3d0>
 800e994:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
 800e998:	e9dd 015e 	ldrd	r0, r1, [sp, #376]	; 0x178
 800e99c:	2200      	movs	r2, #0
 800e99e:	2300      	movs	r3, #0
 800e9a0:	f7f2 f836 	bl	8000a10 <__aeabi_dcmpeq>
 800e9a4:	ed97 7a00 	vldr	s14, [r7]
 800e9a8:	b168      	cbz	r0, 800e9c6 <SpacePointAlgorithm.isra.0+0x152>
 800e9aa:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800e9ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9b2:	f340 80ee 	ble.w	800eb92 <SpacePointAlgorithm.isra.0+0x31e>
 800e9b6:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 800e9ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e9be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9c2:	f140 80e6 	bpl.w	800eb92 <SpacePointAlgorithm.isra.0+0x31e>
 800e9c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e9ca:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 800e9ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e9d2:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800e9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9da:	edc7 7a00 	vstr	s15, [r7]
 800e9de:	f100 80ef 	bmi.w	800ebc0 <SpacePointAlgorithm.isra.0+0x34c>
 800e9e2:	eeb3 6a04 	vmov.f32	s12, #52	; 0x41a00000  20.0
 800e9e6:	eec6 4a27 	vdiv.f32	s9, s12, s15
 800e9ea:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800ec48 <SpacePointAlgorithm.isra.0+0x3d4>
 800e9ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 800e9f2:	ee2b da0d 	vmul.f32	s26, s22, s26
 800e9f6:	eddf 7a95 	vldr	s15, [pc, #596]	; 800ec4c <SpacePointAlgorithm.isra.0+0x3d8>
 800e9fa:	ee2d da07 	vmul.f32	s26, s26, s14
 800e9fe:	ee27 fa0f 	vmul.f32	s30, s14, s30
 800ea02:	ee68 4a24 	vmul.f32	s9, s16, s9
 800ea06:	ee27 7a2f 	vmul.f32	s14, s14, s31
 800ea0a:	ee6e eaa8 	vmul.f32	s29, s29, s17
 800ea0e:	ee29 9a27 	vmul.f32	s18, s18, s15
 800ea12:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 800ea16:	edd6 7a01 	vldr	s15, [r6, #4]
 800ea1a:	ed94 4a09 	vldr	s8, [r4, #36]	; 0x24
 800ea1e:	ed94 6a03 	vldr	s12, [r4, #12]
 800ea22:	ed96 5a00 	vldr	s10, [r6]
 800ea26:	edd4 5a05 	vldr	s11, [r4, #20]
 800ea2a:	ed8d 7a31 	vstr	s14, [sp, #196]	; 0xc4
 800ea2e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ea32:	edd4 6a04 	vldr	s13, [r4, #16]
 800ea36:	ed8d 7a32 	vstr	s14, [sp, #200]	; 0xc8
 800ea3a:	ee35 5a44 	vsub.f32	s10, s10, s8
 800ea3e:	ee27 6a86 	vmul.f32	s12, s15, s12
 800ea42:	ed94 4a00 	vldr	s8, [r4]
 800ea46:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 800ea4a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ea4e:	eea5 6a04 	vfma.f32	s12, s10, s8
 800ea52:	462b      	mov	r3, r5
 800ea54:	ad1a      	add	r5, sp, #104	; 0x68
 800ea56:	ed94 4a02 	vldr	s8, [r4, #8]
 800ea5a:	edcd 4a25 	vstr	s9, [sp, #148]	; 0x94
 800ea5e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ea62:	edd4 5a01 	vldr	s11, [r4, #4]
 800ea66:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
 800ea6a:	eeb0 7a66 	vmov.f32	s14, s13
 800ea6e:	eea5 7a25 	vfma.f32	s14, s10, s11
 800ea72:	a92e      	add	r1, sp, #184	; 0xb8
 800ea74:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 800ec6c <SpacePointAlgorithm.isra.0+0x3f8>
 800ea78:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 800ea7c:	edd6 5a02 	vldr	s11, [r6, #8]
 800ea80:	ed8d fa2e 	vstr	s30, [sp, #184]	; 0xb8
 800ea84:	eee4 7a05 	vfma.f32	s15, s8, s10
 800ea88:	f8df e1e4 	ldr.w	lr, [pc, #484]	; 800ec70 <SpacePointAlgorithm.isra.0+0x3fc>
 800ea8c:	ee75 5ae6 	vsub.f32	s11, s11, s13
 800ea90:	ed94 4a07 	vldr	s8, [r4, #28]
 800ea94:	edd4 6a06 	vldr	s13, [r4, #24]
 800ea98:	ed94 5a08 	vldr	s10, [r4, #32]
 800ea9c:	ed8d fa2f 	vstr	s30, [sp, #188]	; 0xbc
 800eaa0:	eea4 7a25 	vfma.f32	s14, s8, s11
 800eaa4:	ac25      	add	r4, sp, #148	; 0x94
 800eaa6:	4652      	mov	r2, sl
 800eaa8:	eee5 7a25 	vfma.f32	s15, s10, s11
 800eaac:	4648      	mov	r0, r9
 800eaae:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 800ec74 <SpacePointAlgorithm.isra.0+0x400>
 800eab2:	ed8d 7a1d 	vstr	s14, [sp, #116]	; 0x74
 800eab6:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800eaba:	eeb7 2a08 	vmov.f32	s4, #120	; 0x3fc00000  1.5
 800eabe:	ee2b ba02 	vmul.f32	s22, s22, s4
 800eac2:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 800eac6:	edcd 7a1e 	vstr	s15, [sp, #120]	; 0x78
 800eaca:	ed8d fa30 	vstr	s30, [sp, #192]	; 0xc0
 800eace:	edcd ea34 	vstr	s29, [sp, #208]	; 0xd0
 800ead2:	edcd ea35 	vstr	s29, [sp, #212]	; 0xd4
 800ead6:	edcd ea36 	vstr	s29, [sp, #216]	; 0xd8
 800eada:	ed8d da37 	vstr	s26, [sp, #220]	; 0xdc
 800eade:	ed8d 9a38 	vstr	s18, [sp, #224]	; 0xe0
 800eae2:	ed8d ba39 	vstr	s22, [sp, #228]	; 0xe4
 800eae6:	edcd 4a27 	vstr	s9, [sp, #156]	; 0x9c
 800eaea:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800eaec:	9602      	str	r6, [sp, #8]
 800eaee:	9e16      	ldr	r6, [sp, #88]	; 0x58
 800eaf0:	f88d 6068 	strb.w	r6, [sp, #104]	; 0x68
 800eaf4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800eaf6:	f88d 6069 	strb.w	r6, [sp, #105]	; 0x69
 800eafa:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800eafc:	f88d 606a 	strb.w	r6, [sp, #106]	; 0x6a
 800eb00:	9e68      	ldr	r6, [sp, #416]	; 0x1a0
 800eb02:	9611      	str	r6, [sp, #68]	; 0x44
 800eb04:	ed9d 7b60 	vldr	d7, [sp, #384]	; 0x180
 800eb08:	9e67      	ldr	r6, [sp, #412]	; 0x19c
 800eb0a:	9610      	str	r6, [sp, #64]	; 0x40
 800eb0c:	9e66      	ldr	r6, [sp, #408]	; 0x198
 800eb0e:	9504      	str	r5, [sp, #16]
 800eb10:	ed8d 7b08 	vstr	d7, [sp, #32]
 800eb14:	e9cd 860e 	strd	r8, r6, [sp, #56]	; 0x38
 800eb18:	ed9d 7b5e 	vldr	d7, [sp, #376]	; 0x178
 800eb1c:	9e63      	ldr	r6, [sp, #396]	; 0x18c
 800eb1e:	960c      	str	r6, [sp, #48]	; 0x30
 800eb20:	9e62      	ldr	r6, [sp, #392]	; 0x188
 800eb22:	960b      	str	r6, [sp, #44]	; 0x2c
 800eb24:	ad1b      	add	r5, sp, #108	; 0x6c
 800eb26:	9e55      	ldr	r6, [sp, #340]	; 0x154
 800eb28:	f8cd b00c 	str.w	fp, [sp, #12]
 800eb2c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eb30:	e9cd 1400 	strd	r1, r4, [sp]
 800eb34:	eeb0 2a6c 	vmov.f32	s4, s25
 800eb38:	eef0 1a6b 	vmov.f32	s3, s23
 800eb3c:	eeb0 1a6a 	vmov.f32	s2, s21
 800eb40:	eef0 0a4a 	vmov.f32	s1, s20
 800eb44:	eeb0 0a69 	vmov.f32	s0, s19
 800eb48:	a91c      	add	r1, sp, #112	; 0x70
 800eb4a:	ed8d ca28 	vstr	s24, [sp, #160]	; 0xa0
 800eb4e:	ed8d ca29 	vstr	s24, [sp, #164]	; 0xa4
 800eb52:	ed8d ca2a 	vstr	s24, [sp, #168]	; 0xa8
 800eb56:	9712      	str	r7, [sp, #72]	; 0x48
 800eb58:	960a      	str	r6, [sp, #40]	; 0x28
 800eb5a:	950d      	str	r5, [sp, #52]	; 0x34
 800eb5c:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
 800eb60:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
 800eb64:	f8cd 90b4 	str.w	r9, [sp, #180]	; 0xb4
 800eb68:	f7fb fe56 	bl	800a818 <m_kalman_3gyro.isra.0.constprop.0>
 800eb6c:	9862      	ldr	r0, [sp, #392]	; 0x188
 800eb6e:	4621      	mov	r1, r4
 800eb70:	f7f9 fd90 	bl	8008694 <m_q2dcm_eml>
 800eb74:	9a65      	ldr	r2, [sp, #404]	; 0x194
 800eb76:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eb7a:	6013      	str	r3, [r2, #0]
 800eb7c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800eb80:	6053      	str	r3, [r2, #4]
 800eb82:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800eb86:	6093      	str	r3, [r2, #8]
 800eb88:	b03b      	add	sp, #236	; 0xec
 800eb8a:	ecbd 8b10 	vpop	{d8-d15}
 800eb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb92:	eddf 7a2f 	vldr	s15, [pc, #188]	; 800ec50 <SpacePointAlgorithm.isra.0+0x3dc>
 800eb96:	ed9d 7a19 	vldr	s14, [sp, #100]	; 0x64
 800eb9a:	ee7d daa7 	vadd.f32	s27, s27, s15
 800eb9e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800ec4c <SpacePointAlgorithm.isra.0+0x3d8>
 800eba2:	2300      	movs	r3, #0
 800eba4:	ee27 fa0f 	vmul.f32	s30, s14, s30
 800eba8:	eec8 4a2d 	vdiv.f32	s9, s16, s27
 800ebac:	603b      	str	r3, [r7, #0]
 800ebae:	ee2e 7a2f 	vmul.f32	s14, s28, s31
 800ebb2:	ee6e eaa8 	vmul.f32	s29, s29, s17
 800ebb6:	ee2b da0d 	vmul.f32	s26, s22, s26
 800ebba:	ee29 9a27 	vmul.f32	s18, s18, s15
 800ebbe:	e728      	b.n	800ea12 <SpacePointAlgorithm.isra.0+0x19e>
 800ebc0:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800ec54 <SpacePointAlgorithm.isra.0+0x3e0>
 800ebc4:	eef1 4a04 	vmov.f32	s9, #20	; 0x40a00000  5.0
 800ebc8:	e713      	b.n	800e9f2 <SpacePointAlgorithm.isra.0+0x17e>
 800ebca:	ee69 9aac 	vmul.f32	s19, s19, s25
 800ebce:	ee2a aa2c 	vmul.f32	s20, s20, s25
 800ebd2:	ee6a aaac 	vmul.f32	s21, s21, s25
 800ebd6:	ed9f ca20 	vldr	s24, [pc, #128]	; 800ec58 <SpacePointAlgorithm.isra.0+0x3e4>
 800ebda:	eef1 ea04 	vmov.f32	s29, #20	; 0x40a00000  5.0
 800ebde:	e6db      	b.n	800e998 <SpacePointAlgorithm.isra.0+0x124>
 800ebe0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800ec5c <SpacePointAlgorithm.isra.0+0x3e8>
 800ebe4:	ed9f ca1e 	vldr	s24, [pc, #120]	; 800ec60 <SpacePointAlgorithm.isra.0+0x3ec>
 800ebe8:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800ebec:	ee2a aa27 	vmul.f32	s20, s20, s15
 800ebf0:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800ebf4:	ee69 9aac 	vmul.f32	s19, s19, s25
 800ebf8:	ee2a aa2c 	vmul.f32	s20, s20, s25
 800ebfc:	ee6a aaac 	vmul.f32	s21, s21, s25
 800ec00:	eef6 ea00 	vmov.f32	s29, #96	; 0x3f000000  0.5
 800ec04:	e6c8      	b.n	800e998 <SpacePointAlgorithm.isra.0+0x124>
 800ec06:	eddf 7a17 	vldr	s15, [pc, #92]	; 800ec64 <SpacePointAlgorithm.isra.0+0x3f0>
 800ec0a:	ed9f ca15 	vldr	s24, [pc, #84]	; 800ec60 <SpacePointAlgorithm.isra.0+0x3ec>
 800ec0e:	ee69 9aa7 	vmul.f32	s19, s19, s15
 800ec12:	ee2a aa27 	vmul.f32	s20, s20, s15
 800ec16:	ee6a aaa7 	vmul.f32	s21, s21, s15
 800ec1a:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
 800ec1e:	e6bb      	b.n	800e998 <SpacePointAlgorithm.isra.0+0x124>
 800ec20:	ee69 9aac 	vmul.f32	s19, s19, s25
 800ec24:	ee2a aa2c 	vmul.f32	s20, s20, s25
 800ec28:	ee6a aaac 	vmul.f32	s21, s21, s25
 800ec2c:	ed9f ca05 	vldr	s24, [pc, #20]	; 800ec44 <SpacePointAlgorithm.isra.0+0x3d0>
 800ec30:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
 800ec34:	e6b0      	b.n	800e998 <SpacePointAlgorithm.isra.0+0x124>
 800ec36:	bf00      	nop
 800ec38:	3c03126f 	.word	0x3c03126f
 800ec3c:	3c8efa35 	.word	0x3c8efa35
 800ec40:	3b656042 	.word	0x3b656042
 800ec44:	3ac49ba6 	.word	0x3ac49ba6
 800ec48:	3d4ccccd 	.word	0x3d4ccccd
 800ec4c:	3f333333 	.word	0x3f333333
 800ec50:	358637bd 	.word	0x358637bd
 800ec54:	3e4ccccd 	.word	0x3e4ccccd
 800ec58:	3727c5ac 	.word	0x3727c5ac
 800ec5c:	42c80000 	.word	0x42c80000
 800ec60:	3a83126f 	.word	0x3a83126f
 800ec64:	3dcccccd 	.word	0x3dcccccd
 800ec68:	08014e48 	.word	0x08014e48
 800ec6c:	3b449ba6 	.word	0x3b449ba6
 800ec70:	3c23d70a 	.word	0x3c23d70a
 800ec74:	3a9d4952 	.word	0x3a9d4952

0800ec78 <MotionDI_Initialize>:
 800ec78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec7c:	4a12      	ldr	r2, [pc, #72]	; (800ecc8 <MotionDI_Initialize+0x50>)
 800ec7e:	4913      	ldr	r1, [pc, #76]	; (800eccc <MotionDI_Initialize+0x54>)
 800ec80:	6813      	ldr	r3, [r2, #0]
 800ec82:	f023 0301 	bic.w	r3, r3, #1
 800ec86:	ed2d 8b02 	vpush	{d8}
 800ec8a:	6013      	str	r3, [r2, #0]
 800ec8c:	680b      	ldr	r3, [r1, #0]
 800ec8e:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 800ec92:	4013      	ands	r3, r2
 800ec94:	f24c 2440 	movw	r4, #49728	; 0xc240
 800ec98:	42a3      	cmp	r3, r4
 800ec9a:	b091      	sub	sp, #68	; 0x44
 800ec9c:	4607      	mov	r7, r0
 800ec9e:	d01f      	beq.n	800ece0 <MotionDI_Initialize+0x68>
 800eca0:	680b      	ldr	r3, [r1, #0]
 800eca2:	f24c 2170 	movw	r1, #49776	; 0xc270
 800eca6:	4013      	ands	r3, r2
 800eca8:	428b      	cmp	r3, r1
 800ecaa:	d019      	beq.n	800ece0 <MotionDI_Initialize+0x68>
 800ecac:	4b08      	ldr	r3, [pc, #32]	; (800ecd0 <MotionDI_Initialize+0x58>)
 800ecae:	2201      	movs	r2, #1
 800ecb0:	601a      	str	r2, [r3, #0]
 800ecb2:	681a      	ldr	r2, [r3, #0]
 800ecb4:	2a00      	cmp	r2, #0
 800ecb6:	d1fc      	bne.n	800ecb2 <MotionDI_Initialize+0x3a>
 800ecb8:	4b06      	ldr	r3, [pc, #24]	; (800ecd4 <MotionDI_Initialize+0x5c>)
 800ecba:	4a07      	ldr	r2, [pc, #28]	; (800ecd8 <MotionDI_Initialize+0x60>)
 800ecbc:	601a      	str	r2, [r3, #0]
 800ecbe:	681a      	ldr	r2, [r3, #0]
 800ecc0:	4b06      	ldr	r3, [pc, #24]	; (800ecdc <MotionDI_Initialize+0x64>)
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d02b      	beq.n	800ed1e <MotionDI_Initialize+0xa6>
 800ecc6:	e7fe      	b.n	800ecc6 <MotionDI_Initialize+0x4e>
 800ecc8:	e0002000 	.word	0xe0002000
 800eccc:	e000ed00 	.word	0xe000ed00
 800ecd0:	40023008 	.word	0x40023008
 800ecd4:	40023000 	.word	0x40023000
 800ecd8:	f407a5c2 	.word	0xf407a5c2
 800ecdc:	b5e8b5cd 	.word	0xb5e8b5cd
 800ece0:	4be3      	ldr	r3, [pc, #908]	; (800f070 <MotionDI_Initialize+0x3f8>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d1e1      	bne.n	800ecac <MotionDI_Initialize+0x34>
 800ece8:	4ae2      	ldr	r2, [pc, #904]	; (800f074 <MotionDI_Initialize+0x3fc>)
 800ecea:	6813      	ldr	r3, [r2, #0]
 800ecec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ecf0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800ecf4:	d006      	beq.n	800ed04 <MotionDI_Initialize+0x8c>
 800ecf6:	6813      	ldr	r3, [r2, #0]
 800ecf8:	f240 4283 	movw	r2, #1155	; 0x483
 800ecfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d1d3      	bne.n	800ecac <MotionDI_Initialize+0x34>
 800ed04:	4bdc      	ldr	r3, [pc, #880]	; (800f078 <MotionDI_Initialize+0x400>)
 800ed06:	2201      	movs	r2, #1
 800ed08:	601a      	str	r2, [r3, #0]
 800ed0a:	681a      	ldr	r2, [r3, #0]
 800ed0c:	2a00      	cmp	r2, #0
 800ed0e:	d1fc      	bne.n	800ed0a <MotionDI_Initialize+0x92>
 800ed10:	4bda      	ldr	r3, [pc, #872]	; (800f07c <MotionDI_Initialize+0x404>)
 800ed12:	4adb      	ldr	r2, [pc, #876]	; (800f080 <MotionDI_Initialize+0x408>)
 800ed14:	601a      	str	r2, [r3, #0]
 800ed16:	681a      	ldr	r2, [r3, #0]
 800ed18:	4bda      	ldr	r3, [pc, #872]	; (800f084 <MotionDI_Initialize+0x40c>)
 800ed1a:	429a      	cmp	r2, r3
 800ed1c:	d1d3      	bne.n	800ecc6 <MotionDI_Initialize+0x4e>
 800ed1e:	4cda      	ldr	r4, [pc, #872]	; (800f088 <MotionDI_Initialize+0x410>)
 800ed20:	4dda      	ldr	r5, [pc, #872]	; (800f08c <MotionDI_Initialize+0x414>)
 800ed22:	f8d7 c000 	ldr.w	ip, [r7]
 800ed26:	4bda      	ldr	r3, [pc, #872]	; (800f090 <MotionDI_Initialize+0x418>)
 800ed28:	49da      	ldr	r1, [pc, #872]	; (800f094 <MotionDI_Initialize+0x41c>)
 800ed2a:	f504 62c9 	add.w	r2, r4, #1608	; 0x648
 800ed2e:	2001      	movs	r0, #1
 800ed30:	f8c2 c000 	str.w	ip, [r2]
 800ed34:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
 800ed38:	f884 0644 	strb.w	r0, [r4, #1604]	; 0x644
 800ed3c:	652a      	str	r2, [r5, #80]	; 0x50
 800ed3e:	2014      	movs	r0, #20
 800ed40:	f505 628c 	add.w	r2, r5, #1120	; 0x460
 800ed44:	f505 6b8d 	add.w	fp, r5, #1128	; 0x468
 800ed48:	2600      	movs	r6, #0
 800ed4a:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800ed4e:	f8c5 0464 	str.w	r0, [r5, #1124]	; 0x464
 800ed52:	f44f 00dc 	mov.w	r0, #7208960	; 0x6e0000
 800ed56:	6011      	str	r1, [r2, #0]
 800ed58:	f8c5 01c8 	str.w	r0, [r5, #456]	; 0x1c8
 800ed5c:	2230      	movs	r2, #48	; 0x30
 800ed5e:	f8cb 3000 	str.w	r3, [fp]
 800ed62:	f8a5 c058 	strh.w	ip, [r5, #88]	; 0x58
 800ed66:	f105 0014 	add.w	r0, r5, #20
 800ed6a:	4631      	mov	r1, r6
 800ed6c:	702e      	strb	r6, [r5, #0]
 800ed6e:	f885 646c 	strb.w	r6, [r5, #1132]	; 0x46c
 800ed72:	f885 604c 	strb.w	r6, [r5, #76]	; 0x4c
 800ed76:	656e      	str	r6, [r5, #84]	; 0x54
 800ed78:	64ae      	str	r6, [r5, #72]	; 0x48
 800ed7a:	f003 ff63 	bl	8012c44 <memset>
 800ed7e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800ed82:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ed86:	82aa      	strh	r2, [r5, #20]
 800ed88:	626b      	str	r3, [r5, #36]	; 0x24
 800ed8a:	636b      	str	r3, [r5, #52]	; 0x34
 800ed8c:	646b      	str	r3, [r5, #68]	; 0x44
 800ed8e:	ed97 0a00 	vldr	s0, [r7]
 800ed92:	ed9f 7ac1 	vldr	s14, [pc, #772]	; 800f098 <MotionDI_Initialize+0x420>
 800ed96:	612e      	str	r6, [r5, #16]
 800ed98:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ed9c:	f884 664c 	strb.w	r6, [r4, #1612]	; 0x64c
 800eda0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800eda4:	ee17 2a90 	vmov	r2, s15
 800eda8:	1e53      	subs	r3, r2, #1
 800edaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800edae:	d20b      	bcs.n	800edc8 <MotionDI_Initialize+0x150>
 800edb0:	f1a2 030a 	sub.w	r3, r2, #10
 800edb4:	b29b      	uxth	r3, r3
 800edb6:	2b5a      	cmp	r3, #90	; 0x5a
 800edb8:	bf8c      	ite	hi
 800edba:	2300      	movhi	r3, #0
 800edbc:	2301      	movls	r3, #1
 800edbe:	f8c5 2464 	str.w	r2, [r5, #1124]	; 0x464
 800edc2:	702b      	strb	r3, [r5, #0]
 800edc4:	ed97 0a00 	vldr	s0, [r7]
 800edc8:	4eb4      	ldr	r6, [pc, #720]	; (800f09c <MotionDI_Initialize+0x424>)
 800edca:	eddf 6ab5 	vldr	s13, [pc, #724]	; 800f0a0 <MotionDI_Initialize+0x428>
 800edce:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800f0a4 <MotionDI_Initialize+0x42c>
 800edd2:	4fb5      	ldr	r7, [pc, #724]	; (800f0a8 <MotionDI_Initialize+0x430>)
 800edd4:	f7f9 f9d0 	bl	8008178 <iNemoEngine_gbias_init>
 800edd8:	f20f 296c 	addw	r9, pc, #620	; 0x26c
 800eddc:	e9d9 8900 	ldrd	r8, r9, [r9]
 800ede0:	ed9f 0b9b 	vldr	d0, [pc, #620]	; 800f050 <MotionDI_Initialize+0x3d8>
 800ede4:	ed9f 1b9c 	vldr	d1, [pc, #624]	; 800f058 <MotionDI_Initialize+0x3e0>
 800ede8:	ed9f 2b9d 	vldr	d2, [pc, #628]	; 800f060 <MotionDI_Initialize+0x3e8>
 800edec:	ed9f 5b9e 	vldr	d5, [pc, #632]	; 800f068 <MotionDI_Initialize+0x3f0>
 800edf0:	eddf 7aae 	vldr	s15, [pc, #696]	; 800f0ac <MotionDI_Initialize+0x434>
 800edf4:	eddf 4aae 	vldr	s9, [pc, #696]	; 800f0b0 <MotionDI_Initialize+0x438>
 800edf8:	ed9f 6aae 	vldr	s12, [pc, #696]	; 800f0b4 <MotionDI_Initialize+0x43c>
 800edfc:	ed9f 3aae 	vldr	s6, [pc, #696]	; 800f0b8 <MotionDI_Initialize+0x440>
 800ee00:	eddf 3aae 	vldr	s7, [pc, #696]	; 800f0bc <MotionDI_Initialize+0x444>
 800ee04:	ed9f 4aae 	vldr	s8, [pc, #696]	; 800f0c0 <MotionDI_Initialize+0x448>
 800ee08:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 800f0d0 <MotionDI_Initialize+0x458>
 800ee0c:	edc6 7a87 	vstr	s15, [r6, #540]	; 0x21c
 800ee10:	f241 1ab6 	movw	sl, #4534	; 0x11b6
 800ee14:	f241 13b4 	movw	r3, #4532	; 0x11b4
 800ee18:	2500      	movs	r5, #0
 800ee1a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800ee1e:	f606 00e8 	addw	r0, r6, #2280	; 0x8e8
 800ee22:	210a      	movs	r1, #10
 800ee24:	f886 18e0 	strb.w	r1, [r6, #2272]	; 0x8e0
 800ee28:	ed86 0b08 	vstr	d0, [r6, #32]
 800ee2c:	ed86 1b0c 	vstr	d1, [r6, #48]	; 0x30
 800ee30:	ed86 2b0e 	vstr	d2, [r6, #56]	; 0x38
 800ee34:	ed86 5b06 	vstr	d5, [r6, #24]
 800ee38:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
 800ee3c:	613d      	str	r5, [r7, #16]
 800ee3e:	753d      	strb	r5, [r7, #20]
 800ee40:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
 800ee44:	f8c4 50bc 	str.w	r5, [r4, #188]	; 0xbc
 800ee48:	f8c4 50c8 	str.w	r5, [r4, #200]	; 0xc8
 800ee4c:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
 800ee50:	52f5      	strh	r5, [r6, r3]
 800ee52:	607d      	str	r5, [r7, #4]
 800ee54:	723d      	strb	r5, [r7, #8]
 800ee56:	61fd      	str	r5, [r7, #28]
 800ee58:	f887 5020 	strb.w	r5, [r7, #32]
 800ee5c:	62bd      	str	r5, [r7, #40]	; 0x28
 800ee5e:	f887 502c 	strb.w	r5, [r7, #44]	; 0x2c
 800ee62:	637d      	str	r5, [r7, #52]	; 0x34
 800ee64:	f887 5038 	strb.w	r5, [r7, #56]	; 0x38
 800ee68:	edc6 7a88 	vstr	s15, [r6, #544]	; 0x220
 800ee6c:	edc4 4a27 	vstr	s9, [r4, #156]	; 0x9c
 800ee70:	ed84 6a28 	vstr	s12, [r4, #160]	; 0xa0
 800ee74:	f806 500a 	strb.w	r5, [r6, sl]
 800ee78:	ed9f 6a92 	vldr	s12, [pc, #584]	; 800f0c4 <MotionDI_Initialize+0x44c>
 800ee7c:	f8c4 5650 	str.w	r5, [r4, #1616]	; 0x650
 800ee80:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
 800ee84:	f8c4 50e0 	str.w	r5, [r4, #224]	; 0xe0
 800ee88:	f8a6 58dc 	strh.w	r5, [r6, #2268]	; 0x8dc
 800ee8c:	f886 58de 	strb.w	r5, [r6, #2270]	; 0x8de
 800ee90:	ed86 8a86 	vstr	s16, [r6, #536]	; 0x218
 800ee94:	643d      	str	r5, [r7, #64]	; 0x40
 800ee96:	ed80 5b02 	vstr	d5, [r0, #8]
 800ee9a:	ed9f 5a8b 	vldr	s10, [pc, #556]	; 800f0c8 <MotionDI_Initialize+0x450>
 800ee9e:	eddf 5a8b 	vldr	s11, [pc, #556]	; 800f0cc <MotionDI_Initialize+0x454>
 800eea2:	ed80 8a82 	vstr	s16, [r0, #520]	; 0x208
 800eea6:	f507 7168 	add.w	r1, r7, #928	; 0x3a0
 800eeaa:	e9c0 8906 	strd	r8, r9, [r0, #24]
 800eeae:	eef2 4a04 	vmov.f32	s9, #36	; 0x41200000  10.0
 800eeb2:	f04f 0801 	mov.w	r8, #1
 800eeb6:	f04f 0902 	mov.w	r9, #2
 800eeba:	f44f 7c00 	mov.w	ip, #512	; 0x200
 800eebe:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800eec2:	f04f 2301 	mov.w	r3, #16777472	; 0x1000100
 800eec6:	ed80 0b04 	vstr	d0, [r0, #16]
 800eeca:	ed80 1b08 	vstr	d1, [r0, #32]
 800eece:	ed80 2b0a 	vstr	d2, [r0, #40]	; 0x28
 800eed2:	f88e 80c0 	strb.w	r8, [lr, #192]	; 0xc0
 800eed6:	edc0 7a83 	vstr	s15, [r0, #524]	; 0x20c
 800eeda:	edc0 7a84 	vstr	s15, [r0, #528]	; 0x210
 800eede:	f887 5044 	strb.w	r5, [r7, #68]	; 0x44
 800eee2:	edc4 7aaf 	vstr	s15, [r4, #700]	; 0x2bc
 800eee6:	edc4 7ab0 	vstr	s15, [r4, #704]	; 0x2c0
 800eeea:	edc4 7ab1 	vstr	s15, [r4, #708]	; 0x2c4
 800eeee:	edc4 7ab3 	vstr	s15, [r4, #716]	; 0x2cc
 800eef2:	edc4 7ab4 	vstr	s15, [r4, #720]	; 0x2d0
 800eef6:	edc4 7ab5 	vstr	s15, [r4, #724]	; 0x2d4
 800eefa:	edc4 7ab7 	vstr	s15, [r4, #732]	; 0x2dc
 800eefe:	edc4 7ab8 	vstr	s15, [r4, #736]	; 0x2e0
 800ef02:	edc4 7ab9 	vstr	s15, [r4, #740]	; 0x2e4
 800ef06:	edc4 7abb 	vstr	s15, [r4, #748]	; 0x2ec
 800ef0a:	edc4 7abc 	vstr	s15, [r4, #752]	; 0x2f0
 800ef0e:	edc4 7abd 	vstr	s15, [r4, #756]	; 0x2f4
 800ef12:	edc4 7abf 	vstr	s15, [r4, #764]	; 0x2fc
 800ef16:	edc4 7ac0 	vstr	s15, [r4, #768]	; 0x300
 800ef1a:	edc4 7ac1 	vstr	s15, [r4, #772]	; 0x304
 800ef1e:	edc4 7ac3 	vstr	s15, [r4, #780]	; 0x30c
 800ef22:	edc4 7ac4 	vstr	s15, [r4, #784]	; 0x310
 800ef26:	ed84 8ab2 	vstr	s16, [r4, #712]	; 0x2c8
 800ef2a:	ed84 8ab6 	vstr	s16, [r4, #728]	; 0x2d8
 800ef2e:	ed84 8aba 	vstr	s16, [r4, #744]	; 0x2e8
 800ef32:	ed84 8abe 	vstr	s16, [r4, #760]	; 0x2f8
 800ef36:	ed84 8ac2 	vstr	s16, [r4, #776]	; 0x308
 800ef3a:	edc4 7ac5 	vstr	s15, [r4, #788]	; 0x314
 800ef3e:	ed84 3a3b 	vstr	s6, [r4, #236]	; 0xec
 800ef42:	edc4 3a3c 	vstr	s7, [r4, #240]	; 0xf0
 800ef46:	ed84 4a3d 	vstr	s8, [r4, #244]	; 0xf4
 800ef4a:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 800ef4e:	edc4 4a3f 	vstr	s9, [r4, #252]	; 0xfc
 800ef52:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
 800ef56:	edc4 7ac7 	vstr	s15, [r4, #796]	; 0x31c
 800ef5a:	edc4 7ac8 	vstr	s15, [r4, #800]	; 0x320
 800ef5e:	edc4 7ac9 	vstr	s15, [r4, #804]	; 0x324
 800ef62:	edc4 7acb 	vstr	s15, [r4, #812]	; 0x32c
 800ef66:	edc4 7acc 	vstr	s15, [r4, #816]	; 0x330
 800ef6a:	edc4 7acd 	vstr	s15, [r4, #820]	; 0x334
 800ef6e:	edc4 7aa1 	vstr	s15, [r4, #644]	; 0x284
 800ef72:	edc4 7aa2 	vstr	s15, [r4, #648]	; 0x288
 800ef76:	edc4 7aa3 	vstr	s15, [r4, #652]	; 0x28c
 800ef7a:	edc4 7aa5 	vstr	s15, [r4, #660]	; 0x294
 800ef7e:	edc4 7aa6 	vstr	s15, [r4, #664]	; 0x298
 800ef82:	edc4 7aa7 	vstr	s15, [r4, #668]	; 0x29c
 800ef86:	edc4 7aa9 	vstr	s15, [r4, #676]	; 0x2a4
 800ef8a:	edc4 7aaa 	vstr	s15, [r4, #680]	; 0x2a8
 800ef8e:	edc4 7aab 	vstr	s15, [r4, #684]	; 0x2ac
 800ef92:	edc4 7aac 	vstr	s15, [r4, #688]	; 0x2b0
 800ef96:	edc4 7aad 	vstr	s15, [r4, #692]	; 0x2b4
 800ef9a:	edc4 7aae 	vstr	s15, [r4, #696]	; 0x2b8
 800ef9e:	ed84 8ac6 	vstr	s16, [r4, #792]	; 0x318
 800efa2:	ed84 8aca 	vstr	s16, [r4, #808]	; 0x328
 800efa6:	ed84 8ace 	vstr	s16, [r4, #824]	; 0x338
 800efaa:	ed84 8aa0 	vstr	s16, [r4, #640]	; 0x280
 800efae:	ed84 8aa4 	vstr	s16, [r4, #656]	; 0x290
 800efb2:	ed84 8aa8 	vstr	s16, [r4, #672]	; 0x2a0
 800efb6:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
 800efba:	ed84 8a43 	vstr	s16, [r4, #268]	; 0x10c
 800efbe:	f884 8110 	strb.w	r8, [r4, #272]	; 0x110
 800efc2:	edc4 6a48 	vstr	s13, [r4, #288]	; 0x120
 800efc6:	ed84 5a45 	vstr	s10, [r4, #276]	; 0x114
 800efca:	edc4 5a46 	vstr	s11, [r4, #280]	; 0x118
 800efce:	ed84 6a47 	vstr	s12, [r4, #284]	; 0x11c
 800efd2:	f8a4 c124 	strh.w	ip, [r4, #292]	; 0x124
 800efd6:	ed81 8a21 	vstr	s16, [r1, #132]	; 0x84
 800efda:	ed81 8a25 	vstr	s16, [r1, #148]	; 0x94
 800efde:	ed81 8a29 	vstr	s16, [r1, #164]	; 0xa4
 800efe2:	ed81 8a2d 	vstr	s16, [r1, #180]	; 0xb4
 800efe6:	ed81 8a31 	vstr	s16, [r1, #196]	; 0xc4
 800efea:	edc6 7a2c 	vstr	s15, [r6, #176]	; 0xb0
 800efee:	edc6 7a2d 	vstr	s15, [r6, #180]	; 0xb4
 800eff2:	edc6 7a2e 	vstr	s15, [r6, #184]	; 0xb8
 800eff6:	f884 9108 	strb.w	r9, [r4, #264]	; 0x108
 800effa:	edc1 7a1e 	vstr	s15, [r1, #120]	; 0x78
 800effe:	edc1 7a1f 	vstr	s15, [r1, #124]	; 0x7c
 800f002:	edc1 7a20 	vstr	s15, [r1, #128]	; 0x80
 800f006:	edc1 7a22 	vstr	s15, [r1, #136]	; 0x88
 800f00a:	edc1 7a23 	vstr	s15, [r1, #140]	; 0x8c
 800f00e:	edc1 7a24 	vstr	s15, [r1, #144]	; 0x90
 800f012:	edc1 7a26 	vstr	s15, [r1, #152]	; 0x98
 800f016:	edc1 7a27 	vstr	s15, [r1, #156]	; 0x9c
 800f01a:	edc1 7a28 	vstr	s15, [r1, #160]	; 0xa0
 800f01e:	edc1 7a2a 	vstr	s15, [r1, #168]	; 0xa8
 800f022:	edc1 7a2b 	vstr	s15, [r1, #172]	; 0xac
 800f026:	edc1 7a2c 	vstr	s15, [r1, #176]	; 0xb0
 800f02a:	edc1 7a2e 	vstr	s15, [r1, #184]	; 0xb8
 800f02e:	edc1 7a2f 	vstr	s15, [r1, #188]	; 0xbc
 800f032:	edc1 7a30 	vstr	s15, [r1, #192]	; 0xc0
 800f036:	edc1 7a32 	vstr	s15, [r1, #200]	; 0xc8
 800f03a:	edc1 7a33 	vstr	s15, [r1, #204]	; 0xcc
 800f03e:	f884 5126 	strb.w	r5, [r4, #294]	; 0x126
 800f042:	edc1 7a34 	vstr	s15, [r1, #208]	; 0xd0
 800f046:	e04d      	b.n	800f0e4 <MotionDI_Initialize+0x46c>
 800f048:	00000000 	.word	0x00000000
 800f04c:	3fbfdfb7 	.word	0x3fbfdfb7
 800f050:	20000000 	.word	0x20000000
 800f054:	3fc55a40 	.word	0x3fc55a40
 800f058:	c0000000 	.word	0xc0000000
 800f05c:	3fb2875e 	.word	0x3fb2875e
 800f060:	60000000 	.word	0x60000000
 800f064:	3f9f1fed 	.word	0x3f9f1fed
 800f068:	60000000 	.word	0x60000000
 800f06c:	3fc76cab 	.word	0x3fc76cab
 800f070:	e0042000 	.word	0xe0042000
 800f074:	5c001000 	.word	0x5c001000
 800f078:	58024c08 	.word	0x58024c08
 800f07c:	58024c00 	.word	0x58024c00
 800f080:	f407a5c2 	.word	0xf407a5c2
 800f084:	b5e8b5cd 	.word	0xb5e8b5cd
 800f088:	20001690 	.word	0x20001690
 800f08c:	20002138 	.word	0x20002138
 800f090:	3e4ccccd 	.word	0x3e4ccccd
 800f094:	3a83126f 	.word	0x3a83126f
 800f098:	447a0000 	.word	0x447a0000
 800f09c:	20000000 	.word	0x20000000
 800f0a0:	3dcccccd 	.word	0x3dcccccd
 800f0a4:	3f2ac083 	.word	0x3f2ac083
 800f0a8:	20001734 	.word	0x20001734
 800f0ac:	00000000 	.word	0x00000000
 800f0b0:	7f800000 	.word	0x7f800000
 800f0b4:	ff800000 	.word	0xff800000
 800f0b8:	3f639581 	.word	0x3f639581
 800f0bc:	402ab021 	.word	0x402ab021
 800f0c0:	3f13f7cf 	.word	0x3f13f7cf
 800f0c4:	39b24207 	.word	0x39b24207
 800f0c8:	39712c28 	.word	0x39712c28
 800f0cc:	3a09a027 	.word	0x3a09a027
 800f0d0:	200010f8 	.word	0x200010f8
 800f0d4:	3a51b717 	.word	0x3a51b717
 800f0d8:	3a378034 	.word	0x3a378034
 800f0dc:	3b378034 	.word	0x3b378034
 800f0e0:	3f666666 	.word	0x3f666666
 800f0e4:	ed84 3a4a 	vstr	s6, [r4, #296]	; 0x128
 800f0e8:	edc4 3a4b 	vstr	s7, [r4, #300]	; 0x12c
 800f0ec:	ed84 4a4c 	vstr	s8, [r4, #304]	; 0x130
 800f0f0:	edc4 4a4e 	vstr	s9, [r4, #312]	; 0x138
 800f0f4:	ed84 7a4d 	vstr	s14, [r4, #308]	; 0x134
 800f0f8:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
 800f0fc:	ed81 8a35 	vstr	s16, [r1, #212]	; 0xd4
 800f100:	ed81 8a39 	vstr	s16, [r1, #228]	; 0xe4
 800f104:	ed81 8a3d 	vstr	s16, [r1, #244]	; 0xf4
 800f108:	ed81 8a0f 	vstr	s16, [r1, #60]	; 0x3c
 800f10c:	ed81 8a13 	vstr	s16, [r1, #76]	; 0x4c
 800f110:	ed81 8a17 	vstr	s16, [r1, #92]	; 0x5c
 800f114:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
 800f118:	edc1 7a37 	vstr	s15, [r1, #220]	; 0xdc
 800f11c:	edc1 7a38 	vstr	s15, [r1, #224]	; 0xe0
 800f120:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
 800f124:	edc1 7a3b 	vstr	s15, [r1, #236]	; 0xec
 800f128:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
 800f12c:	edc1 7a10 	vstr	s15, [r1, #64]	; 0x40
 800f130:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
 800f134:	edc1 7a12 	vstr	s15, [r1, #72]	; 0x48
 800f138:	edc1 7a14 	vstr	s15, [r1, #80]	; 0x50
 800f13c:	edc1 7a15 	vstr	s15, [r1, #84]	; 0x54
 800f140:	edc1 7a16 	vstr	s15, [r1, #88]	; 0x58
 800f144:	edc1 7a18 	vstr	s15, [r1, #96]	; 0x60
 800f148:	edc1 7a19 	vstr	s15, [r1, #100]	; 0x64
 800f14c:	edc1 7a1a 	vstr	s15, [r1, #104]	; 0x68
 800f150:	edc1 7a1b 	vstr	s15, [r1, #108]	; 0x6c
 800f154:	edc1 7a1c 	vstr	s15, [r1, #112]	; 0x70
 800f158:	edc1 7a1d 	vstr	s15, [r1, #116]	; 0x74
 800f15c:	f8c4 8140 	str.w	r8, [r4, #320]	; 0x140
 800f160:	ed84 8a52 	vstr	s16, [r4, #328]	; 0x148
 800f164:	f884 814c 	strb.w	r8, [r4, #332]	; 0x14c
 800f168:	f8a4 c160 	strh.w	ip, [r4, #352]	; 0x160
 800f16c:	edc4 6a57 	vstr	s13, [r4, #348]	; 0x15c
 800f170:	ed84 5a54 	vstr	s10, [r4, #336]	; 0x150
 800f174:	edc4 5a55 	vstr	s11, [r4, #340]	; 0x154
 800f178:	ed84 6a56 	vstr	s12, [r4, #344]	; 0x158
 800f17c:	edc0 7a28 	vstr	s15, [r0, #160]	; 0xa0
 800f180:	edc0 7a29 	vstr	s15, [r0, #164]	; 0xa4
 800f184:	edc0 7a2a 	vstr	s15, [r0, #168]	; 0xa8
 800f188:	f884 9144 	strb.w	r9, [r4, #324]	; 0x144
 800f18c:	f884 5162 	strb.w	r5, [r4, #354]	; 0x162
 800f190:	f7fa fc10 	bl	80099b4 <iNemo_setOrientation.constprop.0>
 800f194:	f7fa fde0 	bl	8009d58 <iNemo_setOrientation_6X.constprop.0>
 800f198:	4631      	mov	r1, r6
 800f19a:	ed5f 4a32 	vldr	s9, [pc, #-200]	; 800f0d4 <MotionDI_Initialize+0x45c>
 800f19e:	f831 3f04 	ldrh.w	r3, [r1, #4]!
 800f1a2:	ed1f 5a33 	vldr	s10, [pc, #-204]	; 800f0d8 <MotionDI_Initialize+0x460>
 800f1a6:	ed5f 5a33 	vldr	s11, [pc, #-204]	; 800f0dc <MotionDI_Initialize+0x464>
 800f1aa:	ed5f 7a33 	vldr	s15, [pc, #-204]	; 800f0e0 <MotionDI_Initialize+0x468>
 800f1ae:	f891 e002 	ldrb.w	lr, [r1, #2]
 800f1b2:	f8b6 c000 	ldrh.w	ip, [r6]
 800f1b6:	78b0      	ldrb	r0, [r6, #2]
 800f1b8:	494f      	ldr	r1, [pc, #316]	; (800f2f8 <MotionDI_Initialize+0x680>)
 800f1ba:	f8ad 3031 	strh.w	r3, [sp, #49]	; 0x31
 800f1be:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 800f1c2:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800f1c6:	edc4 6a57 	vstr	s13, [r4, #348]	; 0x15c
 800f1ca:	edc4 6a48 	vstr	s13, [r4, #288]	; 0x120
 800f1ce:	edc4 4a54 	vstr	s9, [r4, #336]	; 0x150
 800f1d2:	edc4 4a45 	vstr	s9, [r4, #276]	; 0x114
 800f1d6:	ed84 5a55 	vstr	s10, [r4, #340]	; 0x154
 800f1da:	ed84 5a46 	vstr	s10, [r4, #280]	; 0x118
 800f1de:	edc4 5a56 	vstr	s11, [r4, #344]	; 0x158
 800f1e2:	edc4 5a47 	vstr	s11, [r4, #284]	; 0x11c
 800f1e6:	ed84 6a4b 	vstr	s12, [r4, #300]	; 0x12c
 800f1ea:	ed84 6a3c 	vstr	s12, [r4, #240]	; 0xf0
 800f1ee:	ed84 7a4d 	vstr	s14, [r4, #308]	; 0x134
 800f1f2:	f884 9161 	strb.w	r9, [r4, #353]	; 0x161
 800f1f6:	ed84 7a3e 	vstr	s14, [r4, #248]	; 0xf8
 800f1fa:	f884 9125 	strb.w	r9, [r4, #293]	; 0x125
 800f1fe:	f8c4 2101 	str.w	r2, [r4, #257]	; 0x101
 800f202:	ed84 7a62 	vstr	s14, [r4, #392]	; 0x188
 800f206:	f88d e033 	strb.w	lr, [sp, #51]	; 0x33
 800f20a:	f8ad c02d 	strh.w	ip, [sp, #45]	; 0x2d
 800f20e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800f212:	edc4 7a4a 	vstr	s15, [r4, #296]	; 0x128
 800f216:	edc4 7a3b 	vstr	s15, [r4, #236]	; 0xec
 800f21a:	edc4 7a61 	vstr	s15, [r4, #388]	; 0x184
 800f21e:	f8c4 113d 	str.w	r1, [r4, #317]	; 0x13d
 800f222:	f884 5162 	strb.w	r5, [r4, #354]	; 0x162
 800f226:	f884 5126 	strb.w	r5, [r4, #294]	; 0x126
 800f22a:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 800f22e:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
 800f232:	f8a4 918c 	strh.w	r9, [r4, #396]	; 0x18c
 800f236:	f8dd 1031 	ldr.w	r1, [sp, #49]	; 0x31
 800f23a:	f8dd 202d 	ldr.w	r2, [sp, #45]	; 0x2d
 800f23e:	ed94 7a02 	vldr	s14, [r4, #8]
 800f242:	edd4 7a03 	vldr	s15, [r4, #12]
 800f246:	f8db 0000 	ldr.w	r0, [fp]
 800f24a:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 800f2fc <MotionDI_Initialize+0x684>
 800f24e:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 800f300 <MotionDI_Initialize+0x688>
 800f252:	f8d4 9014 	ldr.w	r9, [r4, #20]
 800f256:	f8c4 0164 	str.w	r0, [r4, #356]	; 0x164
 800f25a:	f507 6bb6 	add.w	fp, r7, #1456	; 0x5b0
 800f25e:	e9c4 2164 	strd	r2, r1, [r4, #400]	; 0x190
 800f262:	f107 00c0 	add.w	r0, r7, #192	; 0xc0
 800f266:	ed84 7a5e 	vstr	s14, [r4, #376]	; 0x178
 800f26a:	edc4 7a5f 	vstr	s15, [r4, #380]	; 0x17c
 800f26e:	f8c4 e16c 	str.w	lr, [r4, #364]	; 0x16c
 800f272:	f8c4 c170 	str.w	ip, [r4, #368]	; 0x170
 800f276:	f8c4 9174 	str.w	r9, [r4, #372]	; 0x174
 800f27a:	f7fa ff3f 	bl	800a0fc <MotionDI_setKnobs.part.0>
 800f27e:	f207 59e4 	addw	r9, r7, #1508	; 0x5e4
 800f282:	4629      	mov	r1, r5
 800f284:	4658      	mov	r0, fp
 800f286:	2234      	movs	r2, #52	; 0x34
 800f288:	f003 fcdc 	bl	8012c44 <memset>
 800f28c:	4629      	mov	r1, r5
 800f28e:	4648      	mov	r0, r9
 800f290:	2234      	movs	r2, #52	; 0x34
 800f292:	ed8b 8a03 	vstr	s16, [fp, #12]
 800f296:	ed8b 8a07 	vstr	s16, [fp, #28]
 800f29a:	ed8b 8a0b 	vstr	s16, [fp, #44]	; 0x2c
 800f29e:	f884 5684 	strb.w	r5, [r4, #1668]	; 0x684
 800f2a2:	f003 fccf 	bl	8012c44 <memset>
 800f2a6:	ed9f 7b12 	vldr	d7, [pc, #72]	; 800f2f0 <MotionDI_Initialize+0x678>
 800f2aa:	f241 13b4 	movw	r3, #4532	; 0x11b4
 800f2ae:	f207 621c 	addw	r2, r7, #1564	; 0x61c
 800f2b2:	2000      	movs	r0, #0
 800f2b4:	f207 672c 	addw	r7, r7, #1580	; 0x62c
 800f2b8:	2100      	movs	r1, #0
 800f2ba:	e9c2 0100 	strd	r0, r1, [r2]
 800f2be:	ed87 7b00 	vstr	d7, [r7]
 800f2c2:	52f5      	strh	r5, [r6, r3]
 800f2c4:	f806 500a 	strb.w	r5, [r6, sl]
 800f2c8:	ed89 8a03 	vstr	s16, [r9, #12]
 800f2cc:	ed89 8a07 	vstr	s16, [r9, #28]
 800f2d0:	ed89 8a0b 	vstr	s16, [r9, #44]	; 0x2c
 800f2d4:	f8c4 86cc 	str.w	r8, [r4, #1740]	; 0x6cc
 800f2d8:	f884 56b8 	strb.w	r5, [r4, #1720]	; 0x6b8
 800f2dc:	f884 56c8 	strb.w	r5, [r4, #1736]	; 0x6c8
 800f2e0:	b011      	add	sp, #68	; 0x44
 800f2e2:	ecbd 8b02 	vpop	{d8}
 800f2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2ea:	bf00      	nop
 800f2ec:	f3af 8000 	nop.w
 800f2f0:	00000000 	.word	0x00000000
 800f2f4:	fff80000 	.word	0xfff80000
 800f2f8:	01010001 	.word	0x01010001
 800f2fc:	3a2c7da2 	.word	0x3a2c7da2
 800f300:	3e051eb8 	.word	0x3e051eb8

0800f304 <MotionDI_setKnobs>:
 800f304:	4b03      	ldr	r3, [pc, #12]	; (800f314 <MotionDI_setKnobs+0x10>)
 800f306:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 800f30a:	b903      	cbnz	r3, 800f30e <MotionDI_setKnobs+0xa>
 800f30c:	4770      	bx	lr
 800f30e:	f7fa bef5 	b.w	800a0fc <MotionDI_setKnobs.part.0>
 800f312:	bf00      	nop
 800f314:	20001690 	.word	0x20001690

0800f318 <MotionDI_getKnobs>:
 800f318:	4a22      	ldr	r2, [pc, #136]	; (800f3a4 <MotionDI_getKnobs+0x8c>)
 800f31a:	f892 3644 	ldrb.w	r3, [r2, #1604]	; 0x644
 800f31e:	b903      	cbnz	r3, 800f322 <MotionDI_getKnobs+0xa>
 800f320:	4770      	bx	lr
 800f322:	b470      	push	{r4, r5, r6}
 800f324:	4920      	ldr	r1, [pc, #128]	; (800f3a8 <MotionDI_getKnobs+0x90>)
 800f326:	f892 5126 	ldrb.w	r5, [r2, #294]	; 0x126
 800f32a:	880b      	ldrh	r3, [r1, #0]
 800f32c:	f892 6125 	ldrb.w	r6, [r2, #293]	; 0x125
 800f330:	f880 5029 	strb.w	r5, [r0, #41]	; 0x29
 800f334:	b091      	sub	sp, #68	; 0x44
 800f336:	f880 6028 	strb.w	r6, [r0, #40]	; 0x28
 800f33a:	f8ad 302d 	strh.w	r3, [sp, #45]	; 0x2d
 800f33e:	460b      	mov	r3, r1
 800f340:	7889      	ldrb	r1, [r1, #2]
 800f342:	f833 4f04 	ldrh.w	r4, [r3, #4]!
 800f346:	f8ad 4031 	strh.w	r4, [sp, #49]	; 0x31
 800f34a:	789b      	ldrb	r3, [r3, #2]
 800f34c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 800f350:	2300      	movs	r3, #0
 800f352:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800f356:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 800f35a:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 800f35e:	f8dd 3031 	ldr.w	r3, [sp, #49]	; 0x31
 800f362:	f8d2 10f8 	ldr.w	r1, [r2, #248]	; 0xf8
 800f366:	f8d2 40ec 	ldr.w	r4, [r2, #236]	; 0xec
 800f36a:	f8dd 502d 	ldr.w	r5, [sp, #45]	; 0x2d
 800f36e:	6303      	str	r3, [r0, #48]	; 0x30
 800f370:	4b0e      	ldr	r3, [pc, #56]	; (800f3ac <MotionDI_getKnobs+0x94>)
 800f372:	62c5      	str	r5, [r0, #44]	; 0x2c
 800f374:	6204      	str	r4, [r0, #32]
 800f376:	6241      	str	r1, [r0, #36]	; 0x24
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	6003      	str	r3, [r0, #0]
 800f37c:	f892 4168 	ldrb.w	r4, [r2, #360]	; 0x168
 800f380:	68d3      	ldr	r3, [r2, #12]
 800f382:	6855      	ldr	r5, [r2, #4]
 800f384:	6891      	ldr	r1, [r2, #8]
 800f386:	7104      	strb	r4, [r0, #4]
 800f388:	6816      	ldr	r6, [r2, #0]
 800f38a:	6954      	ldr	r4, [r2, #20]
 800f38c:	6086      	str	r6, [r0, #8]
 800f38e:	60c5      	str	r5, [r0, #12]
 800f390:	6104      	str	r4, [r0, #16]
 800f392:	6141      	str	r1, [r0, #20]
 800f394:	6183      	str	r3, [r0, #24]
 800f396:	f892 3180 	ldrb.w	r3, [r2, #384]	; 0x180
 800f39a:	7703      	strb	r3, [r0, #28]
 800f39c:	b011      	add	sp, #68	; 0x44
 800f39e:	bc70      	pop	{r4, r5, r6}
 800f3a0:	4770      	bx	lr
 800f3a2:	bf00      	nop
 800f3a4:	20001690 	.word	0x20001690
 800f3a8:	20000000 	.word	0x20000000
 800f3ac:	200025a0 	.word	0x200025a0

0800f3b0 <MotionDI_update>:
 800f3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3b4:	ed2d 8b10 	vpush	{d8-d15}
 800f3b8:	4cd2      	ldr	r4, [pc, #840]	; (800f704 <MotionDI_update+0x354>)
 800f3ba:	f894 3644 	ldrb.w	r3, [r4, #1604]	; 0x644
 800f3be:	f2ad 4da4 	subw	sp, sp, #1188	; 0x4a4
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	f000 8197 	beq.w	800f6f6 <MotionDI_update+0x346>
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	4681      	mov	r9, r0
 800f3cc:	460d      	mov	r5, r1
 800f3ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f3d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f3d6:	f7f1 fd09 	bl	8000dec <__aeabi_ldivmod>
 800f3da:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
 800f3de:	9017      	str	r0, [sp, #92]	; 0x5c
 800f3e0:	2b01      	cmp	r3, #1
 800f3e2:	f000 81a7 	beq.w	800f734 <MotionDI_update+0x384>
 800f3e6:	2b02      	cmp	r3, #2
 800f3e8:	f000 81a9 	beq.w	800f73e <MotionDI_update+0x38e>
 800f3ec:	ab58      	add	r3, sp, #352	; 0x160
 800f3ee:	9318      	str	r3, [sp, #96]	; 0x60
 800f3f0:	ab65      	add	r3, sp, #404	; 0x194
 800f3f2:	f50d 7b01 	add.w	fp, sp, #516	; 0x204
 800f3f6:	931c      	str	r3, [sp, #112]	; 0x70
 800f3f8:	f204 6754 	addw	r7, r4, #1620	; 0x654
 800f3fc:	f894 8180 	ldrb.w	r8, [r4, #384]	; 0x180
 800f400:	f1b8 0f01 	cmp.w	r8, #1
 800f404:	f000 85de 	beq.w	800ffc4 <MotionDI_update+0xc14>
 800f408:	f1b8 0f02 	cmp.w	r8, #2
 800f40c:	f000 85df 	beq.w	800ffce <MotionDI_update+0xc1e>
 800f410:	4ebd      	ldr	r6, [pc, #756]	; (800f708 <MotionDI_update+0x358>)
 800f412:	f8df 8314 	ldr.w	r8, [pc, #788]	; 800f728 <MotionDI_update+0x378>
 800f416:	edd7 0a00 	vldr	s1, [r7]
 800f41a:	ed97 1a01 	vldr	s2, [r7, #4]
 800f41e:	edd7 1a02 	vldr	s3, [r7, #8]
 800f422:	ed97 2a03 	vldr	s4, [r7, #12]
 800f426:	edd7 2a07 	vldr	s5, [r7, #28]
 800f42a:	ed97 3a0b 	vldr	s6, [r7, #44]	; 0x2c
 800f42e:	f8d8 3000 	ldr.w	r3, [r8]
 800f432:	682f      	ldr	r7, [r5, #0]
 800f434:	edd5 6a02 	vldr	s13, [r5, #8]
 800f438:	ed95 7a03 	vldr	s14, [r5, #12]
 800f43c:	edd5 7a04 	vldr	s15, [r5, #16]
 800f440:	ed95 5a05 	vldr	s10, [r5, #20]
 800f444:	edd5 5a06 	vldr	s11, [r5, #24]
 800f448:	ed95 6a07 	vldr	s12, [r5, #28]
 800f44c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800f450:	686d      	ldr	r5, [r5, #4]
 800f452:	edd6 3a00 	vldr	s7, [r6]
 800f456:	ed96 4a01 	vldr	s8, [r6, #4]
 800f45a:	edd6 4a02 	vldr	s9, [r6, #8]
 800f45e:	1afb      	subs	r3, r7, r3
 800f460:	931a      	str	r3, [sp, #104]	; 0x68
 800f462:	eb65 0302 	sbc.w	r3, r5, r2
 800f466:	931b      	str	r3, [sp, #108]	; 0x6c
 800f468:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800f46c:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800f470:	ee37 7a41 	vsub.f32	s14, s14, s2
 800f474:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800f478:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f47a:	ee66 6a82 	vmul.f32	s13, s13, s4
 800f47e:	ee27 7a22 	vmul.f32	s14, s14, s5
 800f482:	ee67 7a83 	vmul.f32	s15, s15, s6
 800f486:	ee35 5a63 	vsub.f32	s10, s10, s7
 800f48a:	ee75 5ac4 	vsub.f32	s11, s11, s8
 800f48e:	ee36 6a64 	vsub.f32	s12, s12, s9
 800f492:	2800      	cmp	r0, #0
 800f494:	edc3 6a03 	vstr	s13, [r3, #12]
 800f498:	ed83 7a04 	vstr	s14, [r3, #16]
 800f49c:	edc3 7a05 	vstr	s15, [r3, #20]
 800f4a0:	ed83 5a06 	vstr	s10, [r3, #24]
 800f4a4:	edc3 5a07 	vstr	s11, [r3, #28]
 800f4a8:	ed83 6a08 	vstr	s12, [r3, #32]
 800f4ac:	f171 0300 	sbcs.w	r3, r1, #0
 800f4b0:	f2c0 86c1 	blt.w	8010236 <MotionDI_update+0xe86>
 800f4b4:	f7f1 fc5c 	bl	8000d70 <__aeabi_l2f>
 800f4b8:	eddf 7a94 	vldr	s15, [pc, #592]	; 800f70c <MotionDI_update+0x35c>
 800f4bc:	ee07 0a10 	vmov	s14, r0
 800f4c0:	ee27 9a27 	vmul.f32	s18, s14, s15
 800f4c4:	ab5b      	add	r3, sp, #364	; 0x16c
 800f4c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f4ca:	4e91      	ldr	r6, [pc, #580]	; (800f710 <MotionDI_update+0x360>)
 800f4cc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f4ce:	f8c8 7000 	str.w	r7, [r8]
 800f4d2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800f4d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f4da:	f1a6 070c 	sub.w	r7, r6, #12
 800f4de:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800f4e2:	aa5e      	add	r2, sp, #376	; 0x178
 800f4e4:	ca07      	ldmia	r2, {r0, r1, r2}
 800f4e6:	3718      	adds	r7, #24
 800f4e8:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800f4ec:	aa5b      	add	r2, sp, #364	; 0x16c
 800f4ee:	ca07      	ldmia	r2, {r0, r1, r2}
 800f4f0:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 800f4f4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800f4f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f4fc:	f506 73fa 	add.w	r3, r6, #500	; 0x1f4
 800f500:	f8c8 5004 	str.w	r5, [r8, #4]
 800f504:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f508:	ab5e      	add	r3, sp, #376	; 0x178
 800f50a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f50e:	f8d4 36d8 	ldr.w	r3, [r4, #1752]	; 0x6d8
 800f512:	f506 7503 	add.w	r5, r6, #524	; 0x20c
 800f516:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800f51a:	b183      	cbz	r3, 800f53e <MotionDI_update+0x18e>
 800f51c:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 800f520:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
 800f524:	431a      	orrs	r2, r3
 800f526:	07d5      	lsls	r5, r2, #31
 800f528:	f141 80ea 	bpl.w	8010700 <MotionDI_update+0x1350>
 800f52c:	4979      	ldr	r1, [pc, #484]	; (800f714 <MotionDI_update+0x364>)
 800f52e:	f8d1 20c4 	ldr.w	r2, [r1, #196]	; 0xc4
 800f532:	2a00      	cmp	r2, #0
 800f534:	f341 8231 	ble.w	801099a <MotionDI_update+0x15ea>
 800f538:	3a01      	subs	r2, #1
 800f53a:	f8c1 20c4 	str.w	r2, [r1, #196]	; 0xc4
 800f53e:	f8d4 3650 	ldr.w	r3, [r4, #1616]	; 0x650
 800f542:	931d      	str	r3, [sp, #116]	; 0x74
 800f544:	f8d4 36cc 	ldr.w	r3, [r4, #1740]	; 0x6cc
 800f548:	931e      	str	r3, [sp, #120]	; 0x78
 800f54a:	b133      	cbz	r3, 800f55a <MotionDI_update+0x1aa>
 800f54c:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 800f550:	f003 0301 	and.w	r3, r3, #1
 800f554:	2b00      	cmp	r3, #0
 800f556:	f041 80f3 	bne.w	8010740 <MotionDI_update+0x1390>
 800f55a:	ab84      	add	r3, sp, #528	; 0x210
 800f55c:	931a      	str	r3, [sp, #104]	; 0x68
 800f55e:	ab90      	add	r3, sp, #576	; 0x240
 800f560:	9317      	str	r3, [sp, #92]	; 0x5c
 800f562:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f564:	b123      	cbz	r3, 800f570 <MotionDI_update+0x1c0>
 800f566:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 800f56a:	07d8      	lsls	r0, r3, #31
 800f56c:	f101 836e 	bmi.w	8010c4c <MotionDI_update+0x189c>
 800f570:	f8df c1b8 	ldr.w	ip, [pc, #440]	; 800f72c <MotionDI_update+0x37c>
 800f574:	4f68      	ldr	r7, [pc, #416]	; (800f718 <MotionDI_update+0x368>)
 800f576:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800f57a:	f5a7 7800 	sub.w	r8, r7, #512	; 0x200
 800f57e:	ad93      	add	r5, sp, #588	; 0x24c
 800f580:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800f584:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800f588:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800f58a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 800f58e:	f508 73fa 	add.w	r3, r8, #500	; 0x1f4
 800f592:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f596:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f598:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f59c:	f508 721f 	add.w	r2, r8, #636	; 0x27c
 800f5a0:	ca07      	ldmia	r2, {r0, r1, r2}
 800f5a2:	ad97      	add	r5, sp, #604	; 0x25c
 800f5a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800f5a8:	f508 7222 	add.w	r2, r8, #648	; 0x288
 800f5ac:	ca07      	ldmia	r2, {r0, r1, r2}
 800f5ae:	f1a8 030c 	sub.w	r3, r8, #12
 800f5b2:	ad9a      	add	r5, sp, #616	; 0x268
 800f5b4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800f5b8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f5bc:	f108 077c 	add.w	r7, r8, #124	; 0x7c
 800f5c0:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
 800f5c4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800f5c8:	af88      	add	r7, sp, #544	; 0x220
 800f5ca:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800f5ce:	f103 0294 	add.w	r2, r3, #148	; 0x94
 800f5d2:	ca07      	ldmia	r2, {r0, r1, r2}
 800f5d4:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800f5d6:	f50d 7e0b 	add.w	lr, sp, #556	; 0x22c
 800f5da:	e88e 0007 	stmia.w	lr, {r0, r1, r2}
 800f5de:	4661      	mov	r1, ip
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	462a      	mov	r2, r5
 800f5e4:	f7f9 fe52 	bl	800928c <quatErr2EulerErr>
 800f5e8:	f508 70fa 	add.w	r0, r8, #500	; 0x1f4
 800f5ec:	682b      	ldr	r3, [r5, #0]
 800f5ee:	f8cb 3038 	str.w	r3, [fp, #56]	; 0x38
 800f5f2:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 800f5f6:	462a      	mov	r2, r5
 800f5f8:	f7f9 fe48 	bl	800928c <quatErr2EulerErr>
 800f5fc:	682a      	ldr	r2, [r5, #0]
 800f5fe:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
 800f602:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800f604:	f8cb 2074 	str.w	r2, [fp, #116]	; 0x74
 800f608:	a893      	add	r0, sp, #588	; 0x24c
 800f60a:	aa97      	add	r2, sp, #604	; 0x25c
 800f60c:	f7fa fee0 	bl	800a3d0 <iNemo_quat2heading>
 800f610:	463a      	mov	r2, r7
 800f612:	981a      	ldr	r0, [sp, #104]	; 0x68
 800f614:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 800f618:	ed8b 0a1c 	vstr	s0, [fp, #112]	; 0x70
 800f61c:	4659      	mov	r1, fp
 800f61e:	f7fa fed7 	bl	800a3d0 <iNemo_quat2heading>
 800f622:	ab5b      	add	r3, sp, #364	; 0x16c
 800f624:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f628:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f62a:	ed8b 0a0d 	vstr	s0, [fp, #52]	; 0x34
 800f62e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800f632:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f636:	f5a8 7782 	sub.w	r7, r8, #260	; 0x104
 800f63a:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800f63e:	aa5e      	add	r2, sp, #376	; 0x178
 800f640:	ca07      	ldmia	r2, {r0, r1, r2}
 800f642:	3718      	adds	r7, #24
 800f644:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800f648:	aa5b      	add	r2, sp, #364	; 0x16c
 800f64a:	ca07      	ldmia	r2, {r0, r1, r2}
 800f64c:	f507 77fa 	add.w	r7, r7, #500	; 0x1f4
 800f650:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800f654:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f658:	f1a7 030c 	sub.w	r3, r7, #12
 800f65c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f660:	ab5e      	add	r3, sp, #376	; 0x178
 800f662:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f666:	f107 030c 	add.w	r3, r7, #12
 800f66a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f66e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f670:	2b00      	cmp	r3, #0
 800f672:	f040 872b 	bne.w	80104cc <MotionDI_update+0x111c>
 800f676:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800f678:	2b00      	cmp	r3, #0
 800f67a:	f040 85e0 	bne.w	801023e <MotionDI_update+0xe8e>
 800f67e:	4b26      	ldr	r3, [pc, #152]	; (800f718 <MotionDI_update+0x368>)
 800f680:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f682:	ac93      	add	r4, sp, #588	; 0x24c
 800f684:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f688:	4b24      	ldr	r3, [pc, #144]	; (800f71c <MotionDI_update+0x36c>)
 800f68a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f68e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f690:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800f694:	4a22      	ldr	r2, [pc, #136]	; (800f720 <MotionDI_update+0x370>)
 800f696:	ca07      	ldmia	r2, {r0, r1, r2}
 800f698:	ac97      	add	r4, sp, #604	; 0x25c
 800f69a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f69e:	4a21      	ldr	r2, [pc, #132]	; (800f724 <MotionDI_update+0x374>)
 800f6a0:	ca07      	ldmia	r2, {r0, r1, r2}
 800f6a2:	ac9a      	add	r4, sp, #616	; 0x268
 800f6a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f6a8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f6aa:	ab97      	add	r3, sp, #604	; 0x25c
 800f6ac:	f8c9 0000 	str.w	r0, [r9]
 800f6b0:	f8c9 1004 	str.w	r1, [r9, #4]
 800f6b4:	f8c9 2008 	str.w	r2, [r9, #8]
 800f6b8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f6ba:	4623      	mov	r3, r4
 800f6bc:	f8c9 001c 	str.w	r0, [r9, #28]
 800f6c0:	f8c9 1020 	str.w	r1, [r9, #32]
 800f6c4:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
 800f6c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f6ca:	f8db 6048 	ldr.w	r6, [fp, #72]	; 0x48
 800f6ce:	f8db 504c 	ldr.w	r5, [fp, #76]	; 0x4c
 800f6d2:	f8db 4050 	ldr.w	r4, [fp, #80]	; 0x50
 800f6d6:	f8db 3054 	ldr.w	r3, [fp, #84]	; 0x54
 800f6da:	f8c9 600c 	str.w	r6, [r9, #12]
 800f6de:	f8c9 0028 	str.w	r0, [r9, #40]	; 0x28
 800f6e2:	f8c9 102c 	str.w	r1, [r9, #44]	; 0x2c
 800f6e6:	f8c9 2030 	str.w	r2, [r9, #48]	; 0x30
 800f6ea:	f8c9 5010 	str.w	r5, [r9, #16]
 800f6ee:	f8c9 4014 	str.w	r4, [r9, #20]
 800f6f2:	f8c9 3018 	str.w	r3, [r9, #24]
 800f6f6:	f20d 4da4 	addw	sp, sp, #1188	; 0x4a4
 800f6fa:	ecbd 8b10 	vpop	{d8-d15}
 800f6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f702:	bf00      	nop
 800f704:	20001690 	.word	0x20001690
 800f708:	20001d18 	.word	0x20001d18
 800f70c:	358637bd 	.word	0x358637bd
 800f710:	200018ec 	.word	0x200018ec
 800f714:	200010f8 	.word	0x200010f8
 800f718:	20001be4 	.word	0x20001be4
 800f71c:	20001bd8 	.word	0x20001bd8
 800f720:	20001c60 	.word	0x20001c60
 800f724:	20001c6c 	.word	0x20001c6c
 800f728:	20001d50 	.word	0x20001d50
 800f72c:	20001ac8 	.word	0x20001ac8
 800f730:	447a0000 	.word	0x447a0000
 800f734:	f894 3684 	ldrb.w	r3, [r4, #1668]	; 0x684
 800f738:	2b03      	cmp	r3, #3
 800f73a:	f43f ae57 	beq.w	800f3ec <MotionDI_update+0x3c>
 800f73e:	ed95 7a02 	vldr	s14, [r5, #8]
 800f742:	ed5f 6a05 	vldr	s13, [pc, #-20]	; 800f730 <MotionDI_update+0x380>
 800f746:	f894 064c 	ldrb.w	r0, [r4, #1612]	; 0x64c
 800f74a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800f74e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f752:	bfb4      	ite	lt
 800f754:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 800f758:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 800f75c:	eee7 7a26 	vfma.f32	s15, s14, s13
 800f760:	af36      	add	r7, sp, #216	; 0xd8
 800f762:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 800f730 <MotionDI_update+0x380>
 800f766:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f76a:	ee17 3a90 	vmov	r3, s15
 800f76e:	edd5 7a03 	vldr	s15, [r5, #12]
 800f772:	603b      	str	r3, [r7, #0]
 800f774:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f77c:	bfb4      	ite	lt
 800f77e:	eebe 7a00 	vmovlt.f32	s14, #224	; 0xbf000000 -0.5
 800f782:	eeb6 7a00 	vmovge.f32	s14, #96	; 0x3f000000  0.5
 800f786:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f78a:	ed5f 6a17 	vldr	s13, [pc, #-92]	; 800f730 <MotionDI_update+0x380>
 800f78e:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800f792:	ed95 7a04 	vldr	s14, [r5, #16]
 800f796:	edc7 7a01 	vstr	s15, [r7, #4]
 800f79a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800f79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7a2:	ee17 1a90 	vmov	r1, s15
 800f7a6:	bfac      	ite	ge
 800f7a8:	eef6 7a00 	vmovge.f32	s15, #96	; 0x3f000000  0.5
 800f7ac:	eefe 7a00 	vmovlt.f32	s15, #224	; 0xbf000000 -0.5
 800f7b0:	eee7 7a26 	vfma.f32	s15, s14, s13
 800f7b4:	2809      	cmp	r0, #9
 800f7b6:	bf9c      	itt	ls
 800f7b8:	3001      	addls	r0, #1
 800f7ba:	f884 064c 	strbls.w	r0, [r4, #1612]	; 0x64c
 800f7be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f7c2:	48de      	ldr	r0, [pc, #888]	; (800fb3c <MotionDI_update+0x78c>)
 800f7c4:	edc7 7a02 	vstr	s15, [r7, #8]
 800f7c8:	ee17 2a90 	vmov	r2, s15
 800f7cc:	f647 77fe 	movw	r7, #32766	; 0x7ffe
 800f7d0:	42bb      	cmp	r3, r7
 800f7d2:	bfa8      	it	ge
 800f7d4:	463b      	movge	r3, r7
 800f7d6:	42ba      	cmp	r2, r7
 800f7d8:	bfa8      	it	ge
 800f7da:	463a      	movge	r2, r7
 800f7dc:	4283      	cmp	r3, r0
 800f7de:	bfb8      	it	lt
 800f7e0:	4603      	movlt	r3, r0
 800f7e2:	4281      	cmp	r1, r0
 800f7e4:	f2c0 8794 	blt.w	8010710 <MotionDI_update+0x1360>
 800f7e8:	428f      	cmp	r7, r1
 800f7ea:	bfa8      	it	ge
 800f7ec:	460f      	movge	r7, r1
 800f7ee:	fa0f fe87 	sxth.w	lr, r7
 800f7f2:	4ed3      	ldr	r6, [pc, #844]	; (800fb40 <MotionDI_update+0x790>)
 800f7f4:	48d1      	ldr	r0, [pc, #836]	; (800fb3c <MotionDI_update+0x78c>)
 800f7f6:	f8b6 11c8 	ldrh.w	r1, [r6, #456]	; 0x1c8
 800f7fa:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800f7fc:	f8c6 71c4 	str.w	r7, [r6, #452]	; 0x1c4
 800f800:	4282      	cmp	r2, r0
 800f802:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 800f806:	eb06 0c4c 	add.w	ip, r6, ip, lsl #1
 800f80a:	bfb8      	it	lt
 800f80c:	4602      	movlt	r2, r0
 800f80e:	3101      	adds	r1, #1
 800f810:	f8b6 01ca 	ldrh.w	r0, [r6, #458]	; 0x1ca
 800f814:	f8ac e1ce 	strh.w	lr, [ip, #462]	; 0x1ce
 800f818:	b289      	uxth	r1, r1
 800f81a:	b21b      	sxth	r3, r3
 800f81c:	4281      	cmp	r1, r0
 800f81e:	f8ac 31cc 	strh.w	r3, [ip, #460]	; 0x1cc
 800f822:	f8ad 30e8 	strh.w	r3, [sp, #232]	; 0xe8
 800f826:	7833      	ldrb	r3, [r6, #0]
 800f828:	f8a6 11c8 	strh.w	r1, [r6, #456]	; 0x1c8
 800f82c:	b212      	sxth	r2, r2
 800f82e:	bf88      	it	hi
 800f830:	2100      	movhi	r1, #0
 800f832:	f8ac 21d0 	strh.w	r2, [ip, #464]	; 0x1d0
 800f836:	f8ad 20ec 	strh.w	r2, [sp, #236]	; 0xec
 800f83a:	9739      	str	r7, [sp, #228]	; 0xe4
 800f83c:	f8ad e0ea 	strh.w	lr, [sp, #234]	; 0xea
 800f840:	9720      	str	r7, [sp, #128]	; 0x80
 800f842:	bf88      	it	hi
 800f844:	f8a6 11c8 	strhhi.w	r1, [r6, #456]	; 0x1c8
 800f848:	2b00      	cmp	r3, #0
 800f84a:	f001 81bb 	beq.w	8010bc4 <MotionDI_update+0x1814>
 800f84e:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 800f852:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 800f856:	4313      	orrs	r3, r2
 800f858:	f001 8343 	beq.w	8010ee2 <MotionDI_update+0x1b32>
 800f85c:	e9dd 7317 	ldrd	r7, r3, [sp, #92]	; 0x5c
 800f860:	ebb7 0a03 	subs.w	sl, r7, r3
 800f864:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f866:	f04f 0200 	mov.w	r2, #0
 800f86a:	eb62 0b03 	sbc.w	fp, r2, r3
 800f86e:	f1bb 0f00 	cmp.w	fp, #0
 800f872:	bf08      	it	eq
 800f874:	f5ba 7f7a 	cmpeq.w	sl, #1000	; 0x3e8
 800f878:	f0c1 81a1 	bcc.w	8010bbe <MotionDI_update+0x180e>
 800f87c:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 800f880:	fb03 f301 	mul.w	r3, r3, r1
 800f884:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800f888:	bf34      	ite	cc
 800f88a:	2300      	movcc	r3, #0
 800f88c:	2301      	movcs	r3, #1
 800f88e:	2b00      	cmp	r3, #0
 800f890:	f001 8195 	beq.w	8010bbe <MotionDI_update+0x180e>
 800f894:	f50d 7b01 	add.w	fp, sp, #516	; 0x204
 800f898:	49aa      	ldr	r1, [pc, #680]	; (800fb44 <MotionDI_update+0x794>)
 800f89a:	4658      	mov	r0, fp
 800f89c:	f44f 7227 	mov.w	r2, #668	; 0x29c
 800f8a0:	f003 f9c2 	bl	8012c28 <memcpy>
 800f8a4:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 800f8a8:	9322      	str	r3, [sp, #136]	; 0x88
 800f8aa:	2b02      	cmp	r3, #2
 800f8ac:	f241 8613 	bls.w	80114d6 <MotionDI_update+0x2126>
 800f8b0:	f8b6 2050 	ldrh.w	r2, [r6, #80]	; 0x50
 800f8b4:	9221      	str	r2, [sp, #132]	; 0x84
 800f8b6:	2a00      	cmp	r2, #0
 800f8b8:	f001 845a 	beq.w	8011170 <MotionDI_update+0x1dc0>
 800f8bc:	eddd 7a17 	vldr	s15, [sp, #92]	; 0x5c
 800f8c0:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800f8c4:	eddf 7aa0 	vldr	s15, [pc, #640]	; 800fb48 <MotionDI_update+0x798>
 800f8c8:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f8cc:	eeb0 0a48 	vmov.f32	s0, s16
 800f8d0:	f003 fa86 	bl	8012de0 <roundf>
 800f8d4:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 800f8d6:	9325      	str	r3, [sp, #148]	; 0x94
 800f8d8:	eefc 8ac0 	vcvt.u32.f32	s17, s0
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	f002 8127 	beq.w	8011b30 <MotionDI_update+0x2780>
 800f8e2:	ee18 1a90 	vmov	r1, s17
 800f8e6:	4a99      	ldr	r2, [pc, #612]	; (800fb4c <MotionDI_update+0x79c>)
 800f8e8:	1acb      	subs	r3, r1, r3
 800f8ea:	4293      	cmp	r3, r2
 800f8ec:	f242 8247 	bls.w	8011d7e <MotionDI_update+0x29ce>
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	7533      	strb	r3, [r6, #20]
 800f8f4:	4a96      	ldr	r2, [pc, #600]	; (800fb50 <MotionDI_update+0x7a0>)
 800f8f6:	f896 346c 	ldrb.w	r3, [r6, #1132]	; 0x46c
 800f8fa:	edd2 7a00 	vldr	s15, [r2]
 800f8fe:	9318      	str	r3, [sp, #96]	; 0x60
 800f900:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f904:	2b01      	cmp	r3, #1
 800f906:	ee87 ca27 	vdiv.f32	s24, s14, s15
 800f90a:	f002 81d0 	beq.w	8011cae <MotionDI_update+0x28fe>
 800f90e:	ee6c ba0c 	vmul.f32	s23, s24, s24
 800f912:	ed9f 2a90 	vldr	s4, [pc, #576]	; 800fb54 <MotionDI_update+0x7a4>
 800f916:	ee2b 2a82 	vmul.f32	s4, s23, s4
 800f91a:	f9bb 700a 	ldrsh.w	r7, [fp, #10]
 800f91e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800f920:	f9bb 3008 	ldrsh.w	r3, [fp, #8]
 800f924:	f9bb 800c 	ldrsh.w	r8, [fp, #12]
 800f928:	eddf ca8b 	vldr	s25, [pc, #556]	; 800fb58 <MotionDI_update+0x7a8>
 800f92c:	eddf 3a8b 	vldr	s7, [pc, #556]	; 800fb5c <MotionDI_update+0x7ac>
 800f930:	eddf 1a8b 	vldr	s3, [pc, #556]	; 800fb60 <MotionDI_update+0x7b0>
 800f934:	ed9f 3a8b 	vldr	s6, [pc, #556]	; 800fb64 <MotionDI_update+0x7b4>
 800f938:	f8cd b0a4 	str.w	fp, [sp, #164]	; 0xa4
 800f93c:	ee07 7a90 	vmov	s15, r7
 800f940:	ee0f 3a90 	vmov	s31, r3
 800f944:	eeb8 eae7 	vcvt.f32.s32	s28, s15
 800f948:	0853      	lsrs	r3, r2, #1
 800f94a:	ee07 8a90 	vmov	s15, r8
 800f94e:	4293      	cmp	r3, r2
 800f950:	eef8 daef 	vcvt.f32.s32	s27, s31
 800f954:	eeb8 fae7 	vcvt.f32.s32	s30, s15
 800f958:	931c      	str	r3, [sp, #112]	; 0x70
 800f95a:	bf28      	it	cs
 800f95c:	4613      	movcs	r3, r2
 800f95e:	469a      	mov	sl, r3
 800f960:	ee6c ca2c 	vmul.f32	s25, s24, s25
 800f964:	ee13 3a90 	vmov	r3, s7
 800f968:	eeb0 5a6d 	vmov.f32	s10, s27
 800f96c:	eef0 4a6d 	vmov.f32	s9, s27
 800f970:	eeb0 4a4e 	vmov.f32	s8, s28
 800f974:	eeb0 0a4e 	vmov.f32	s0, s28
 800f978:	eeb0 1a4f 	vmov.f32	s2, s30
 800f97c:	eef0 0a4f 	vmov.f32	s1, s30
 800f980:	eef0 2a61 	vmov.f32	s5, s3
 800f984:	46de      	mov	lr, fp
 800f986:	f9be 100a 	ldrsh.w	r1, [lr, #10]
 800f98a:	f9be 0008 	ldrsh.w	r0, [lr, #8]
 800f98e:	f9be 200c 	ldrsh.w	r2, [lr, #12]
 800f992:	fb01 fc01 	mul.w	ip, r1, r1
 800f996:	fb00 cc00 	mla	ip, r0, r0, ip
 800f99a:	fb02 cc02 	mla	ip, r2, r2, ip
 800f99e:	ee07 ca90 	vmov	s15, ip
 800f9a2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800f9a6:	eeb8 9a63 	vcvt.f32.u32	s18, s7
 800f9aa:	eef1 5ac6 	vsqrt.f32	s11, s12
 800f9ae:	3301      	adds	r3, #1
 800f9b0:	b29b      	uxth	r3, r3
 800f9b2:	f10e 0e06 	add.w	lr, lr, #6
 800f9b6:	ee07 0a90 	vmov	s15, r0
 800f9ba:	eef8 9a43 	vcvt.f32.u32	s19, s6
 800f9be:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f9c2:	eeb4 9ae5 	vcmpe.f32	s18, s11
 800f9c6:	ee07 1a90 	vmov	s15, r1
 800f9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9ce:	eef4 9ae5 	vcmpe.f32	s19, s11
 800f9d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f9d6:	bf48      	it	mi
 800f9d8:	eefc 3ae5 	vcvtmi.u32.f32	s7, s11
 800f9dc:	ee07 2a90 	vmov	s15, r2
 800f9e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9e4:	eeb4 5ae6 	vcmpe.f32	s10, s13
 800f9e8:	bfc8      	it	gt
 800f9ea:	eebc 3ae5 	vcvtgt.u32.f32	s6, s11
 800f9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9f2:	eef4 4ae6 	vcmpe.f32	s9, s13
 800f9f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f9fa:	bfb8      	it	lt
 800f9fc:	eeb0 5a66 	vmovlt.f32	s10, s13
 800fa00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa04:	eeb4 4ac7 	vcmpe.f32	s8, s14
 800fa08:	bf88      	it	hi
 800fa0a:	eef0 4a66 	vmovhi.f32	s9, s13
 800fa0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa12:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800fa16:	bfb8      	it	lt
 800fa18:	eeb0 4a47 	vmovlt.f32	s8, s14
 800fa1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa20:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800fa24:	bf88      	it	hi
 800fa26:	eeb0 0a47 	vmovhi.f32	s0, s14
 800fa2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa2e:	eef4 0ae7 	vcmpe.f32	s1, s15
 800fa32:	bfb8      	it	lt
 800fa34:	eeb0 1a67 	vmovlt.f32	s2, s15
 800fa38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa3c:	bf88      	it	hi
 800fa3e:	eef0 0a67 	vmovhi.f32	s1, s15
 800fa42:	4553      	cmp	r3, sl
 800fa44:	ee72 2aa5 	vadd.f32	s5, s5, s11
 800fa48:	ee71 1a86 	vadd.f32	s3, s3, s12
 800fa4c:	d39b      	bcc.n	800f986 <MotionDI_update+0x5d6>
 800fa4e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800fa50:	4293      	cmp	r3, r2
 800fa52:	f082 81c2 	bcs.w	8011dda <MotionDI_update+0x2a2a>
 800fa56:	3a01      	subs	r2, #1
 800fa58:	1ad2      	subs	r2, r2, r3
 800fa5a:	fa13 fe82 	uxtah	lr, r3, r2
 800fa5e:	eb0e 024e 	add.w	r2, lr, lr, lsl #1
 800fa62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fa66:	f10b 0e06 	add.w	lr, fp, #6
 800fa6a:	eddf 9a3d 	vldr	s19, [pc, #244]	; 800fb60 <MotionDI_update+0x7b0>
 800fa6e:	eb0b 0c43 	add.w	ip, fp, r3, lsl #1
 800fa72:	eb0e 0e42 	add.w	lr, lr, r2, lsl #1
 800fa76:	f9bc 200a 	ldrsh.w	r2, [ip, #10]
 800fa7a:	f9bc 1008 	ldrsh.w	r1, [ip, #8]
 800fa7e:	f9bc 300c 	ldrsh.w	r3, [ip, #12]
 800fa82:	fb02 f002 	mul.w	r0, r2, r2
 800fa86:	fb01 0001 	mla	r0, r1, r1, r0
 800fa8a:	fb03 0003 	mla	r0, r3, r3, r0
 800fa8e:	ee07 0a90 	vmov	s15, r0
 800fa92:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800fa96:	eeb8 9a63 	vcvt.f32.u32	s18, s7
 800fa9a:	eef1 5ac6 	vsqrt.f32	s11, s12
 800fa9e:	f10c 0c06 	add.w	ip, ip, #6
 800faa2:	ee07 1a90 	vmov	s15, r1
 800faa6:	eeb8 aa43 	vcvt.f32.u32	s20, s6
 800faaa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800faae:	eef4 5ac9 	vcmpe.f32	s11, s18
 800fab2:	ee07 2a90 	vmov	s15, r2
 800fab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faba:	eef4 5aca 	vcmpe.f32	s11, s20
 800fabe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800fac2:	bfc8      	it	gt
 800fac4:	eefc 3ae5 	vcvtgt.u32.f32	s7, s11
 800fac8:	ee07 3a90 	vmov	s15, r3
 800facc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fad0:	eeb4 5ae6 	vcmpe.f32	s10, s13
 800fad4:	bf48      	it	mi
 800fad6:	eebc 3ae5 	vcvtmi.u32.f32	s6, s11
 800fada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fade:	eef4 4ae6 	vcmpe.f32	s9, s13
 800fae2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fae6:	bfb8      	it	lt
 800fae8:	eeb0 5a66 	vmovlt.f32	s10, s13
 800faec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800faf0:	eeb4 4ac7 	vcmpe.f32	s8, s14
 800faf4:	bf88      	it	hi
 800faf6:	eef0 4a66 	vmovhi.f32	s9, s13
 800fafa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fafe:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800fb02:	bfb8      	it	lt
 800fb04:	eeb0 4a47 	vmovlt.f32	s8, s14
 800fb08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb0c:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800fb10:	bf88      	it	hi
 800fb12:	eeb0 0a47 	vmovhi.f32	s0, s14
 800fb16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb1a:	eef4 0ae7 	vcmpe.f32	s1, s15
 800fb1e:	bfb8      	it	lt
 800fb20:	eeb0 1a67 	vmovlt.f32	s2, s15
 800fb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb28:	bf88      	it	hi
 800fb2a:	eef0 0a67 	vmovhi.f32	s1, s15
 800fb2e:	45e6      	cmp	lr, ip
 800fb30:	ee79 9aa5 	vadd.f32	s19, s19, s11
 800fb34:	ee71 1a86 	vadd.f32	s3, s3, s12
 800fb38:	d19d      	bne.n	800fa76 <MotionDI_update+0x6c6>
 800fb3a:	e015      	b.n	800fb68 <MotionDI_update+0x7b8>
 800fb3c:	ffff8002 	.word	0xffff8002
 800fb40:	20002138 	.word	0x20002138
 800fb44:	200022fc 	.word	0x200022fc
 800fb48:	3a83126f 	.word	0x3a83126f
 800fb4c:	00278d00 	.word	0x00278d00
 800fb50:	20002598 	.word	0x20002598
 800fb54:	3ca3d70a 	.word	0x3ca3d70a
 800fb58:	3dcccccd 	.word	0x3dcccccd
	...
 800fb64:	fffffffe 	.word	0xfffffffe
 800fb68:	ee75 7a64 	vsub.f32	s15, s10, s9
 800fb6c:	eef4 cae7 	vcmpe.f32	s25, s15
 800fb70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb74:	f101 87fa 	bmi.w	8011b6c <MotionDI_update+0x27bc>
 800fb78:	ee74 7a40 	vsub.f32	s15, s8, s0
 800fb7c:	eef4 cae7 	vcmpe.f32	s25, s15
 800fb80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb84:	f101 87f2 	bmi.w	8011b6c <MotionDI_update+0x27bc>
 800fb88:	ee71 7a60 	vsub.f32	s15, s2, s1
 800fb8c:	eef4 cae7 	vcmpe.f32	s25, s15
 800fb90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb94:	f101 87ea 	bmi.w	8011b6c <MotionDI_update+0x27bc>
 800fb98:	2301      	movs	r3, #1
 800fb9a:	9328      	str	r3, [sp, #160]	; 0xa0
 800fb9c:	9922      	ldr	r1, [sp, #136]	; 0x88
 800fb9e:	ee07 1a90 	vmov	s15, r1
 800fba2:	ee39 7aa2 	vadd.f32	s14, s19, s5
 800fba6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fbaa:	1e4b      	subs	r3, r1, #1
 800fbac:	ee87 da27 	vdiv.f32	s26, s14, s15
 800fbb0:	9323      	str	r3, [sp, #140]	; 0x8c
 800fbb2:	ee07 3a10 	vmov	s14, r3
 800fbb6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800fbba:	ee2d 7a0d 	vmul.f32	s14, s26, s26
 800fbbe:	eee7 1ac7 	vfms.f32	s3, s15, s14
 800fbc2:	ee81 7aa6 	vdiv.f32	s14, s3, s13
 800fbc6:	eeb4 7ac2 	vcmpe.f32	s14, s4
 800fbca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbce:	f301 8482 	bgt.w	80114d6 <MotionDI_update+0x2126>
 800fbd2:	4b53      	ldr	r3, [pc, #332]	; (800fd20 <MotionDI_update+0x970>)
 800fbd4:	ee13 2a10 	vmov	r2, s6
 800fbd8:	ed93 7a00 	vldr	s14, [r3]
 800fbdc:	ee13 3a90 	vmov	r3, s7
 800fbe0:	1a9b      	subs	r3, r3, r2
 800fbe2:	ee07 3a90 	vmov	s15, r3
 800fbe6:	ee2c 7a07 	vmul.f32	s14, s24, s14
 800fbea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fbee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800fbf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbf6:	f101 846e 	bmi.w	80114d6 <MotionDI_update+0x2126>
 800fbfa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fbfc:	1aca      	subs	r2, r1, r3
 800fbfe:	ee07 2a10 	vmov	s14, r2
 800fc02:	ee07 3a90 	vmov	s15, r3
 800fc06:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fc0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc0e:	eec9 6a87 	vdiv.f32	s13, s19, s14
 800fc12:	ee82 7aa7 	vdiv.f32	s14, s5, s15
 800fc16:	ee77 7a66 	vsub.f32	s15, s14, s13
 800fc1a:	eef0 7ae7 	vabs.f32	s15, s15
 800fc1e:	eef4 cae7 	vcmpe.f32	s25, s15
 800fc22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc26:	f101 8456 	bmi.w	80114d6 <MotionDI_update+0x2126>
 800fc2a:	ee7d 7a4c 	vsub.f32	s15, s26, s24
 800fc2e:	eef0 7ae7 	vabs.f32	s15, s15
 800fc32:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fc36:	eeb4 cae7 	vcmpe.f32	s24, s15
 800fc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc3e:	f101 844a 	bmi.w	80114d6 <MotionDI_update+0x2126>
 800fc42:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 800fc46:	eddf 7a37 	vldr	s15, [pc, #220]	; 800fd24 <MotionDI_update+0x974>
 800fc4a:	ee07 3a10 	vmov	s14, r3
 800fc4e:	eeb8 9a47 	vcvt.f32.u32	s18, s14
 800fc52:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 800fc56:	ee69 7a27 	vmul.f32	s15, s18, s15
 800fc5a:	f50d 7a03 	add.w	sl, sp, #524	; 0x20c
 800fc5e:	ee17 0a90 	vmov	r0, s15
 800fc62:	f7f0 fc15 	bl	8000490 <__aeabi_f2d>
 800fc66:	ec41 0b10 	vmov	d0, r0, r1
 800fc6a:	f003 f985 	bl	8012f78 <exp>
 800fc6e:	ec51 0b10 	vmov	r0, r1, d0
 800fc72:	f7f0 ff5d 	bl	8000b30 <__aeabi_d2f>
 800fc76:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800fd28 <MotionDI_update+0x978>
 800fc7a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800fc7c:	f8cd 9098 	str.w	r9, [sp, #152]	; 0x98
 800fc80:	eec7 7a09 	vdiv.f32	s15, s14, s18
 800fc84:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800fc88:	0052      	lsls	r2, r2, #1
 800fc8a:	1f93      	subs	r3, r2, #6
 800fc8c:	4453      	add	r3, sl
 800fc8e:	3a0c      	subs	r2, #12
 800fc90:	9318      	str	r3, [sp, #96]	; 0x60
 800fc92:	eb0a 0302 	add.w	r3, sl, r2
 800fc96:	931c      	str	r3, [sp, #112]	; 0x70
 800fc98:	b20b      	sxth	r3, r1
 800fc9a:	9324      	str	r3, [sp, #144]	; 0x90
 800fc9c:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800fca0:	971d      	str	r7, [sp, #116]	; 0x74
 800fca2:	2303      	movs	r3, #3
 800fca4:	ee09 0a90 	vmov	s19, r0
 800fca8:	ee0a 0a90 	vmov	s21, r0
 800fcac:	ee7a 6a69 	vsub.f32	s13, s20, s19
 800fcb0:	ee39 7aca 	vsub.f32	s14, s19, s20
 800fcb4:	eed7 aaa6 	vfnms.f32	s21, s15, s13
 800fcb8:	931f      	str	r3, [sp, #124]	; 0x7c
 800fcba:	46c4      	mov	ip, r8
 800fcbc:	eea7 aa87 	vfma.f32	s20, s15, s14
 800fcc0:	9527      	str	r5, [sp, #156]	; 0x9c
 800fcc2:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
 800fcc6:	eef0 ea6d 	vmov.f32	s29, s27
 800fcca:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
 800fcce:	eef0 da4e 	vmov.f32	s27, s28
 800fcd2:	eeb0 9a4f 	vmov.f32	s18, s30
 800fcd6:	465a      	mov	r2, fp
 800fcd8:	f9b2 3010 	ldrsh.w	r3, [r2, #16]
 800fcdc:	f9b2 000e 	ldrsh.w	r0, [r2, #14]
 800fce0:	f9b2 1012 	ldrsh.w	r1, [r2, #18]
 800fce4:	ee1f 2a90 	vmov	r2, s31
 800fce8:	4402      	add	r2, r0
 800fcea:	ee00 2a10 	vmov	s0, r2
 800fcee:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fcf0:	441a      	add	r2, r3
 800fcf2:	4663      	mov	r3, ip
 800fcf4:	440b      	add	r3, r1
 800fcf6:	ee0f 2a10 	vmov	s30, r2
 800fcfa:	ee0e 3a10 	vmov	s28, r3
 800fcfe:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800fd02:	eeb8 facf 	vcvt.f32.s32	s30, s30
 800fd06:	eeb8 eace 	vcvt.f32.s32	s28, s28
 800fd0a:	f04f 0800 	mov.w	r8, #0
 800fd0e:	ee20 0a0b 	vmul.f32	s0, s0, s22
 800fd12:	ee2f fa0b 	vmul.f32	s30, s30, s22
 800fd16:	ee2e ea0b 	vmul.f32	s28, s28, s22
 800fd1a:	4647      	mov	r7, r8
 800fd1c:	e020      	b.n	800fd60 <MotionDI_update+0x9b0>
 800fd1e:	bf00      	nop
 800fd20:	200025a0 	.word	0x200025a0
 800fd24:	bdd5e54c 	.word	0xbdd5e54c
 800fd28:	41193238 	.word	0x41193238
 800fd2c:	f93a 0013 	ldrsh.w	r0, [sl, r3, lsl #1]
 800fd30:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
 800fd34:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800fd38:	ee07 0a90 	vmov	s15, r0
 800fd3c:	eeb0 0a6e 	vmov.f32	s0, s29
 800fd40:	eef8 eae7 	vcvt.f32.s32	s29, s15
 800fd44:	ee07 1a90 	vmov	s15, r1
 800fd48:	eeb0 fa6d 	vmov.f32	s30, s27
 800fd4c:	eef8 dae7 	vcvt.f32.s32	s27, s15
 800fd50:	ee07 3a90 	vmov	s15, r3
 800fd54:	eeb0 ea49 	vmov.f32	s28, s18
 800fd58:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 800fd5c:	ea4f 0748 	mov.w	r7, r8, lsl #1
 800fd60:	4447      	add	r7, r8
 800fd62:	007d      	lsls	r5, r7, #1
 800fd64:	3506      	adds	r5, #6
 800fd66:	ee6e eaaa 	vmul.f32	s29, s29, s21
 800fd6a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 800fd6e:	eee9 ea80 	vfma.f32	s29, s19, s0
 800fd72:	4455      	add	r5, sl
 800fd74:	f108 0801 	add.w	r8, r8, #1
 800fd78:	ee07 3a90 	vmov	s15, r3
 800fd7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd80:	ee6d daaa 	vmul.f32	s27, s27, s21
 800fd84:	eeea ea27 	vfma.f32	s29, s20, s15
 800fd88:	f003 f82a 	bl	8012de0 <roundf>
 800fd8c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 800fd90:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800fd94:	ee07 3a90 	vmov	s15, r3
 800fd98:	eee9 da8f 	vfma.f32	s27, s19, s30
 800fd9c:	fa0f f888 	sxth.w	r8, r8
 800fda0:	ee17 3a10 	vmov	r3, s14
 800fda4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fda8:	f82a 3017 	strh.w	r3, [sl, r7, lsl #1]
 800fdac:	eeb0 0a4f 	vmov.f32	s0, s30
 800fdb0:	eeea da27 	vfma.f32	s27, s20, s15
 800fdb4:	f003 f814 	bl	8012de0 <roundf>
 800fdb8:	ee29 9a2a 	vmul.f32	s18, s18, s21
 800fdbc:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800fdc0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800fdc4:	ee07 3a90 	vmov	s15, r3
 800fdc8:	eea9 9a8e 	vfma.f32	s18, s19, s28
 800fdcc:	eb0a 0747 	add.w	r7, sl, r7, lsl #1
 800fdd0:	ee17 3a10 	vmov	r3, s14
 800fdd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fdd8:	807b      	strh	r3, [r7, #2]
 800fdda:	eeb0 0a4e 	vmov.f32	s0, s28
 800fdde:	eeaa 9a27 	vfma.f32	s18, s20, s15
 800fde2:	f002 fffd 	bl	8012de0 <roundf>
 800fde6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fdea:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 800fdee:	ee10 1a10 	vmov	r1, s0
 800fdf2:	45c1      	cmp	r9, r8
 800fdf4:	eb0a 0243 	add.w	r2, sl, r3, lsl #1
 800fdf8:	80b9      	strh	r1, [r7, #4]
 800fdfa:	dc97      	bgt.n	800fd2c <MotionDI_update+0x97c>
 800fdfc:	eeb0 0a6e 	vmov.f32	s0, s29
 800fe00:	f002 ffee 	bl	8012de0 <roundf>
 800fe04:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fe08:	eeb0 0a6d 	vmov.f32	s0, s27
 800fe0c:	ee17 3a90 	vmov	r3, s15
 800fe10:	b21f      	sxth	r7, r3
 800fe12:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800fe14:	801f      	strh	r7, [r3, #0]
 800fe16:	f002 ffe3 	bl	8012de0 <roundf>
 800fe1a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800fe1e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800fe20:	ee17 1a90 	vmov	r1, s15
 800fe24:	b20d      	sxth	r5, r1
 800fe26:	eeb0 0a49 	vmov.f32	s0, s18
 800fe2a:	8055      	strh	r5, [r2, #2]
 800fe2c:	f002 ffd8 	bl	8012de0 <roundf>
 800fe30:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fe34:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800fe36:	9818      	ldr	r0, [sp, #96]	; 0x60
 800fe38:	f9b3 1000 	ldrsh.w	r1, [r3]
 800fe3c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800fe40:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 800fe44:	ee10 ca10 	vmov	ip, s0
 800fe48:	fa0f f38c 	sxth.w	r3, ip
 800fe4c:	8083      	strh	r3, [r0, #4]
 800fe4e:	19c8      	adds	r0, r1, r7
 800fe50:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fe52:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 800fe56:	442a      	add	r2, r5
 800fe58:	18cb      	adds	r3, r1, r3
 800fe5a:	ee0e 0a10 	vmov	s28, r0
 800fe5e:	ee0d 2a90 	vmov	s27, r2
 800fe62:	ee09 3a10 	vmov	s18, r3
 800fe66:	eeb8 eace 	vcvt.f32.s32	s28, s28
 800fe6a:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 800fe6e:	eef8 daed 	vcvt.f32.s32	s27, s27
 800fe72:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800fe76:	ee2e ea0b 	vmul.f32	s28, s28, s22
 800fe7a:	ee6d da8b 	vmul.f32	s27, s27, s22
 800fe7e:	eb08 0548 	add.w	r5, r8, r8, lsl #1
 800fe82:	006d      	lsls	r5, r5, #1
 800fe84:	f1a5 070c 	sub.w	r7, r5, #12
 800fe88:	3d06      	subs	r5, #6
 800fe8a:	f93a 3007 	ldrsh.w	r3, [sl, r7]
 800fe8e:	ee07 3a90 	vmov	s15, r3
 800fe92:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 800fe96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fe9a:	ee07 3a10 	vmov	s14, r3
 800fe9e:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800fea2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fea6:	4457      	add	r7, sl
 800fea8:	eeea 7a87 	vfma.f32	s15, s21, s14
 800feac:	eb0a 0b05 	add.w	fp, sl, r5
 800feb0:	f108 38ff 	add.w	r8, r8, #4294967295
 800feb4:	eeb0 0a4e 	vmov.f32	s0, s28
 800feb8:	eee9 7a8e 	vfma.f32	s15, s19, s28
 800febc:	fa0f f888 	sxth.w	r8, r8
 800fec0:	eeb0 ea67 	vmov.f32	s28, s15
 800fec4:	f002 ff8c 	bl	8012de0 <roundf>
 800fec8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fecc:	ee07 3a90 	vmov	s15, r3
 800fed0:	f9bb 3002 	ldrsh.w	r3, [fp, #2]
 800fed4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fed8:	ee07 3a10 	vmov	s14, r3
 800fedc:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800fee0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fee4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fee8:	eeea 7a87 	vfma.f32	s15, s21, s14
 800feec:	ee10 3a10 	vmov	r3, s0
 800fef0:	eee9 7aad 	vfma.f32	s15, s19, s27
 800fef4:	f82a 3005 	strh.w	r3, [sl, r5]
 800fef8:	eeb0 0a6d 	vmov.f32	s0, s27
 800fefc:	eef0 da67 	vmov.f32	s27, s15
 800ff00:	f002 ff6e 	bl	8012de0 <roundf>
 800ff04:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800ff08:	ee07 3a90 	vmov	s15, r3
 800ff0c:	f9bb 3004 	ldrsh.w	r3, [fp, #4]
 800ff10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff14:	ee06 3a90 	vmov	s13, r3
 800ff18:	ee67 7a8a 	vmul.f32	s15, s15, s20
 800ff1c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ff20:	eeb0 7a40 	vmov.f32	s14, s0
 800ff24:	eeea 7aa6 	vfma.f32	s15, s21, s13
 800ff28:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800ff2c:	eee9 7a89 	vfma.f32	s15, s19, s18
 800ff30:	ee17 3a10 	vmov	r3, s14
 800ff34:	eeb0 0a49 	vmov.f32	s0, s18
 800ff38:	f8ab 3002 	strh.w	r3, [fp, #2]
 800ff3c:	eeb0 9a67 	vmov.f32	s18, s15
 800ff40:	f002 ff4e 	bl	8012de0 <roundf>
 800ff44:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ff48:	f1b8 0f01 	cmp.w	r8, #1
 800ff4c:	ee10 3a10 	vmov	r3, s0
 800ff50:	f8ab 3004 	strh.w	r3, [fp, #4]
 800ff54:	dc93      	bgt.n	800fe7e <MotionDI_update+0xace>
 800ff56:	eeb0 0a4e 	vmov.f32	s0, s28
 800ff5a:	f002 ff41 	bl	8012de0 <roundf>
 800ff5e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ff62:	9d1e      	ldr	r5, [sp, #120]	; 0x78
 800ff64:	ee17 3a90 	vmov	r3, s15
 800ff68:	b21f      	sxth	r7, r3
 800ff6a:	eeb0 0a6d 	vmov.f32	s0, s27
 800ff6e:	812f      	strh	r7, [r5, #8]
 800ff70:	f002 ff36 	bl	8012de0 <roundf>
 800ff74:	eebd fac0 	vcvt.s32.f32	s30, s0
 800ff78:	eeb0 0a49 	vmov.f32	s0, s18
 800ff7c:	ee1f 3a10 	vmov	r3, s30
 800ff80:	b21a      	sxth	r2, r3
 800ff82:	816a      	strh	r2, [r5, #10]
 800ff84:	921d      	str	r2, [sp, #116]	; 0x74
 800ff86:	f002 ff2b 	bl	8012de0 <roundf>
 800ff8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ff8c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ff90:	3b01      	subs	r3, #1
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	461a      	mov	r2, r3
 800ff96:	931f      	str	r3, [sp, #124]	; 0x7c
 800ff98:	ee10 3a10 	vmov	r3, s0
 800ff9c:	b21b      	sxth	r3, r3
 800ff9e:	ee0f 7a90 	vmov	s31, r7
 800ffa2:	469c      	mov	ip, r3
 800ffa4:	81ab      	strh	r3, [r5, #12]
 800ffa6:	2a00      	cmp	r2, #0
 800ffa8:	f001 82b5 	beq.w	8011516 <MotionDI_update+0x2166>
 800ffac:	eddd 7a1d 	vldr	s15, [sp, #116]	; 0x74
 800ffb0:	eef8 dae7 	vcvt.f32.s32	s27, s15
 800ffb4:	ee07 3a90 	vmov	s15, r3
 800ffb8:	eef8 eaef 	vcvt.f32.s32	s29, s31
 800ffbc:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 800ffc0:	462a      	mov	r2, r5
 800ffc2:	e689      	b.n	800fcd8 <MotionDI_update+0x928>
 800ffc4:	f894 36b8 	ldrb.w	r3, [r4, #1720]	; 0x6b8
 800ffc8:	2b03      	cmp	r3, #3
 800ffca:	f43f aa21 	beq.w	800f410 <MotionDI_update+0x60>
 800ffce:	462a      	mov	r2, r5
 800ffd0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800ffd2:	f852 0f08 	ldr.w	r0, [r2, #8]!
 800ffd6:	f8cb 1000 	str.w	r1, [fp]
 800ffda:	6851      	ldr	r1, [r2, #4]
 800ffdc:	6892      	ldr	r2, [r2, #8]
 800ffde:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800ffe0:	edd4 2a23 	vldr	s5, [r4, #140]	; 0x8c
 800ffe4:	ed94 2a24 	vldr	s4, [r4, #144]	; 0x90
 800ffe8:	edc6 2a00 	vstr	s5, [r6]
 800ffec:	ab82      	add	r3, sp, #520	; 0x208
 800ffee:	c307      	stmia	r3!, {r0, r1, r2}
 800fff0:	462e      	mov	r6, r5
 800fff2:	edd4 1a25 	vldr	s3, [r4, #148]	; 0x94
 800fff6:	f856 0f14 	ldr.w	r0, [r6, #20]!
 800fffa:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
 800fffe:	6871      	ldr	r1, [r6, #4]
 8010000:	68b2      	ldr	r2, [r6, #8]
 8010002:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8010004:	ed86 2a01 	vstr	s4, [r6, #4]
 8010008:	ae85      	add	r6, sp, #532	; 0x214
 801000a:	c607      	stmia	r6!, {r0, r1, r2}
 801000c:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801000e:	edc6 1a02 	vstr	s3, [r6, #8]
 8010012:	b913      	cbnz	r3, 801001a <MotionDI_update+0xc6a>
 8010014:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8010016:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
 801001a:	eddb 6a01 	vldr	s13, [fp, #4]
 801001e:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
 8010022:	ed94 8a16 	vldr	s16, [r4, #88]	; 0x58
 8010026:	ed9b 7a02 	vldr	s14, [fp, #8]
 801002a:	ed94 3a19 	vldr	s6, [r4, #100]	; 0x64
 801002e:	eddb 7a03 	vldr	s15, [fp, #12]
 8010032:	edd4 3a1a 	vldr	s7, [r4, #104]	; 0x68
 8010036:	eddb 4a04 	vldr	s9, [fp, #16]
 801003a:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
 801003e:	ed9b 5a05 	vldr	s10, [fp, #20]
 8010042:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8010046:	eddb 5a06 	vldr	s11, [fp, #24]
 801004a:	edd4 0a0c 	vldr	s1, [r4, #48]	; 0x30
 801004e:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 8010052:	ed94 9a15 	vldr	s18, [r4, #84]	; 0x54
 8010056:	edd4 8a17 	vldr	s17, [r4, #92]	; 0x5c
 801005a:	eea6 6aa6 	vfma.f32	s12, s13, s13
 801005e:	3301      	adds	r3, #1
 8010060:	3201      	adds	r2, #1
 8010062:	eea7 3a07 	vfma.f32	s6, s14, s14
 8010066:	b21b      	sxth	r3, r3
 8010068:	b212      	sxth	r2, r2
 801006a:	eeb0 4a46 	vmov.f32	s8, s12
 801006e:	ed94 6a07 	vldr	s12, [r4, #28]
 8010072:	8323      	strh	r3, [r4, #24]
 8010074:	eee7 3aa7 	vfma.f32	s7, s15, s15
 8010078:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
 801007c:	eea4 1aa4 	vfma.f32	s2, s9, s9
 8010080:	eea5 0a05 	vfma.f32	s0, s10, s10
 8010084:	eee5 0aa5 	vfma.f32	s1, s11, s11
 8010088:	ee37 7a08 	vadd.f32	s14, s14, s16
 801008c:	ee74 4a86 	vadd.f32	s9, s9, s12
 8010090:	ed94 8a08 	vldr	s16, [r4, #32]
 8010094:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8010098:	ed84 4a18 	vstr	s8, [r4, #96]	; 0x60
 801009c:	ee76 6a89 	vadd.f32	s13, s13, s18
 80100a0:	ee77 7aa8 	vadd.f32	s15, s15, s17
 80100a4:	ee35 5a08 	vadd.f32	s10, s10, s16
 80100a8:	ee75 5a86 	vadd.f32	s11, s11, s12
 80100ac:	edc4 6a15 	vstr	s13, [r4, #84]	; 0x54
 80100b0:	ed84 3a19 	vstr	s6, [r4, #100]	; 0x64
 80100b4:	ed84 7a16 	vstr	s14, [r4, #88]	; 0x58
 80100b8:	edc4 3a1a 	vstr	s7, [r4, #104]	; 0x68
 80100bc:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
 80100c0:	ed84 1a0a 	vstr	s2, [r4, #40]	; 0x28
 80100c4:	edc4 4a07 	vstr	s9, [r4, #28]
 80100c8:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
 80100cc:	ed84 5a08 	vstr	s10, [r4, #32]
 80100d0:	edc4 5a09 	vstr	s11, [r4, #36]	; 0x24
 80100d4:	edc4 0a0c 	vstr	s1, [r4, #48]	; 0x30
 80100d8:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80100dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80100de:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 80100e2:	4288      	cmp	r0, r1
 80100e4:	f4ff a994 	bcc.w	800f410 <MotionDI_update+0x60>
 80100e8:	2a00      	cmp	r2, #0
 80100ea:	f341 81d1 	ble.w	8011490 <MotionDI_update+0x20e0>
 80100ee:	ee06 2a10 	vmov	s12, r2
 80100f2:	eeb8 8ac6 	vcvt.f32.s32	s16, s12
 80100f6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80100fa:	ee88 6a88 	vdiv.f32	s12, s17, s16
 80100fe:	2b00      	cmp	r3, #0
 8010100:	edd4 9a1d 	vldr	s19, [r4, #116]	; 0x74
 8010104:	ee26 3a03 	vmul.f32	s6, s12, s6
 8010108:	ee63 3a86 	vmul.f32	s7, s7, s12
 801010c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8010110:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010114:	ee66 6a26 	vmul.f32	s13, s12, s13
 8010118:	ee33 9a83 	vadd.f32	s18, s7, s6
 801011c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8010120:	ed94 4a1e 	vldr	s8, [r4, #120]	; 0x78
 8010124:	ed84 6a18 	vstr	s12, [r4, #96]	; 0x60
 8010128:	eea7 9a47 	vfms.f32	s18, s14, s14
 801012c:	ee77 9a69 	vsub.f32	s19, s14, s19
 8010130:	ee37 4ac4 	vsub.f32	s8, s15, s8
 8010134:	eef0 9ae9 	vabs.f32	s19, s19
 8010138:	eeb0 4ac4 	vabs.f32	s8, s8
 801013c:	ee34 4a29 	vadd.f32	s8, s8, s19
 8010140:	edd4 9a1c 	vldr	s19, [r4, #112]	; 0x70
 8010144:	edc4 6a15 	vstr	s13, [r4, #84]	; 0x54
 8010148:	eea6 6ae6 	vfms.f32	s12, s13, s13
 801014c:	eea7 9ae7 	vfms.f32	s18, s15, s15
 8010150:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8010154:	ee36 6a09 	vadd.f32	s12, s12, s18
 8010158:	eef0 6ae6 	vabs.f32	s13, s13
 801015c:	ee74 6a26 	vadd.f32	s13, s8, s13
 8010160:	ed84 7a16 	vstr	s14, [r4, #88]	; 0x58
 8010164:	ed84 3a19 	vstr	s6, [r4, #100]	; 0x64
 8010168:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
 801016c:	edc4 3a1a 	vstr	s7, [r4, #104]	; 0x68
 8010170:	f341 81c5 	ble.w	80114fe <MotionDI_update+0x214e>
 8010174:	ee07 3a90 	vmov	s15, r3
 8010178:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 801017c:	ed94 4a0e 	vldr	s8, [r4, #56]	; 0x38
 8010180:	ed94 3a0f 	vldr	s6, [r4, #60]	; 0x3c
 8010184:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 8010188:	6921      	ldr	r1, [r4, #16]
 801018a:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801018e:	ebb1 0f43 	cmp.w	r1, r3, lsl #1
 8010192:	ee27 0a00 	vmul.f32	s0, s14, s0
 8010196:	ee60 0a87 	vmul.f32	s1, s1, s14
 801019a:	ee27 5a05 	vmul.f32	s10, s14, s10
 801019e:	ee70 3a80 	vadd.f32	s7, s1, s0
 80101a2:	ee65 5a87 	vmul.f32	s11, s11, s14
 80101a6:	eee5 3a45 	vfms.f32	s7, s10, s10
 80101aa:	ee64 4a87 	vmul.f32	s9, s9, s14
 80101ae:	ee21 1a07 	vmul.f32	s2, s2, s14
 80101b2:	ee35 3a43 	vsub.f32	s6, s10, s6
 80101b6:	ee34 7ac4 	vsub.f32	s14, s9, s8
 80101ba:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80101be:	eeb0 4a41 	vmov.f32	s8, s2
 80101c2:	eee5 3ae5 	vfms.f32	s7, s11, s11
 80101c6:	eea4 4ae4 	vfms.f32	s8, s9, s9
 80101ca:	eeb0 3ac3 	vabs.f32	s6, s6
 80101ce:	eef0 7ae7 	vabs.f32	s15, s15
 80101d2:	ee77 7a83 	vadd.f32	s15, s15, s6
 80101d6:	eeb0 7ac7 	vabs.f32	s14, s14
 80101da:	ee74 3a23 	vadd.f32	s7, s8, s7
 80101de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80101e2:	edc4 4a07 	vstr	s9, [r4, #28]
 80101e6:	ed84 1a0a 	vstr	s2, [r4, #40]	; 0x28
 80101ea:	ed84 5a08 	vstr	s10, [r4, #32]
 80101ee:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
 80101f2:	edc4 5a09 	vstr	s11, [r4, #36]	; 0x24
 80101f6:	edc4 0a0c 	vstr	s1, [r4, #48]	; 0x30
 80101fa:	f280 845b 	bge.w	8010ab4 <MotionDI_update+0x1704>
 80101fe:	3b01      	subs	r3, #1
 8010200:	ee07 3a90 	vmov	s15, r3
 8010204:	ee69 3a23 	vmul.f32	s7, s18, s7
 8010208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801020c:	edd4 5a01 	vldr	s11, [r4, #4]
 8010210:	ee83 5aa7 	vdiv.f32	s10, s7, s15
 8010214:	eeb4 5ae5 	vcmpe.f32	s10, s11
 8010218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801021c:	f140 844a 	bpl.w	8010ab4 <MotionDI_update+0x1704>
 8010220:	edd4 7a02 	vldr	s15, [r4, #8]
 8010224:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801022c:	bf4c      	ite	mi
 801022e:	2301      	movmi	r3, #1
 8010230:	2300      	movpl	r3, #0
 8010232:	f000 bc40 	b.w	8010ab6 <MotionDI_update+0x1706>
 8010236:	ed9f 9a9c 	vldr	s18, [pc, #624]	; 80104a8 <MotionDI_update+0x10f8>
 801023a:	f7ff b943 	b.w	800f4c4 <MotionDI_update+0x114>
 801023e:	ad3f      	add	r5, sp, #252	; 0xfc
 8010240:	a846      	add	r0, sp, #280	; 0x118
 8010242:	2300      	movs	r3, #0
 8010244:	4999      	ldr	r1, [pc, #612]	; (80104ac <MotionDI_update+0x10fc>)
 8010246:	901d      	str	r0, [sp, #116]	; 0x74
 8010248:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
 801024c:	602b      	str	r3, [r5, #0]
 801024e:	606b      	str	r3, [r5, #4]
 8010250:	60ab      	str	r3, [r5, #8]
 8010252:	af36      	add	r7, sp, #216	; 0xd8
 8010254:	f894 2161 	ldrb.w	r2, [r4, #353]	; 0x161
 8010258:	edc5 aa03 	vstr	s21, [r5, #12]
 801025c:	951f      	str	r5, [sp, #124]	; 0x7c
 801025e:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8010260:	9218      	str	r2, [sp, #96]	; 0x60
 8010262:	4638      	mov	r0, r7
 8010264:	f501 7265 	add.w	r2, r1, #916	; 0x394
 8010268:	602b      	str	r3, [r5, #0]
 801026a:	606b      	str	r3, [r5, #4]
 801026c:	60ab      	str	r3, [r5, #8]
 801026e:	edc5 aa03 	vstr	s21, [r5, #12]
 8010272:	f7f7 ffcd 	bl	8008210 <rotVect>
 8010276:	4a8e      	ldr	r2, [pc, #568]	; (80104b0 <MotionDI_update+0x1100>)
 8010278:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 801027c:	f5a2 7162 	sub.w	r1, r2, #904	; 0x388
 8010280:	4650      	mov	r0, sl
 8010282:	f7f7 ffc5 	bl	8008210 <rotVect>
 8010286:	4a8b      	ldr	r2, [pc, #556]	; (80104b4 <MotionDI_update+0x1104>)
 8010288:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 801028c:	4640      	mov	r0, r8
 801028e:	f5a2 715f 	sub.w	r1, r2, #892	; 0x37c
 8010292:	f7f7 ffbd 	bl	8008210 <rotVect>
 8010296:	4b88      	ldr	r3, [pc, #544]	; (80104b8 <MotionDI_update+0x1108>)
 8010298:	edd7 7a00 	vldr	s15, [r7]
 801029c:	ed97 7a01 	vldr	s14, [r7, #4]
 80102a0:	ed9a 8a00 	vldr	s16, [sl]
 80102a4:	edda 8a01 	vldr	s17, [sl, #4]
 80102a8:	ed98 ba02 	vldr	s22, [r8, #8]
 80102ac:	edd8 9a00 	vldr	s19, [r8]
 80102b0:	ed98 aa01 	vldr	s20, [r8, #4]
 80102b4:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80102b8:	edc8 9a01 	vstr	s19, [r8, #4]
 80102bc:	eeb1 ca67 	vneg.f32	s24, s15
 80102c0:	eef1 ca47 	vneg.f32	s25, s14
 80102c4:	eeb1 8a48 	vneg.f32	s16, s16
 80102c8:	eef1 8a68 	vneg.f32	s17, s17
 80102cc:	eef1 ba4b 	vneg.f32	s23, s22
 80102d0:	ed87 ca01 	vstr	s24, [r7, #4]
 80102d4:	edc7 ca00 	vstr	s25, [r7]
 80102d8:	ed8a 8a01 	vstr	s16, [sl, #4]
 80102dc:	edca 8a00 	vstr	s17, [sl]
 80102e0:	edc8 ba02 	vstr	s23, [r8, #8]
 80102e4:	ed88 aa00 	vstr	s20, [r8]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d057      	beq.n	801039c <MotionDI_update+0xfec>
 80102ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80102f0:	ed97 da02 	vldr	s26, [r7, #8]
 80102f4:	eee7 7a07 	vfma.f32	s15, s14, s14
 80102f8:	eeed 7a0d 	vfma.f32	s15, s26, s26
 80102fc:	ee17 0a90 	vmov	r0, s15
 8010300:	f7f0 f8c6 	bl	8000490 <__aeabi_f2d>
 8010304:	ec41 0b10 	vmov	d0, r0, r1
 8010308:	f002 fe7e 	bl	8013008 <sqrt>
 801030c:	ec51 0b10 	vmov	r0, r1, d0
 8010310:	f7f0 fc0e 	bl	8000b30 <__aeabi_d2f>
 8010314:	ee0d 0a90 	vmov	s27, r0
 8010318:	f7f0 f8ba 	bl	8000490 <__aeabi_f2d>
 801031c:	a360      	add	r3, pc, #384	; (adr r3, 80104a0 <MotionDI_update+0x10f0>)
 801031e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010322:	f7f0 fb7f 	bl	8000a24 <__aeabi_dcmplt>
 8010326:	b938      	cbnz	r0, 8010338 <MotionDI_update+0xf88>
 8010328:	eeca 7aad 	vdiv.f32	s15, s21, s27
 801032c:	ee6c caa7 	vmul.f32	s25, s25, s15
 8010330:	ee2c ca27 	vmul.f32	s24, s24, s15
 8010334:	ee2d da27 	vmul.f32	s26, s26, s15
 8010338:	ee69 7aa9 	vmul.f32	s15, s19, s19
 801033c:	edc7 ca00 	vstr	s25, [r7]
 8010340:	eeea 7a0a 	vfma.f32	s15, s20, s20
 8010344:	ed87 ca01 	vstr	s24, [r7, #4]
 8010348:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 801034c:	ed87 da02 	vstr	s26, [r7, #8]
 8010350:	ee17 0a90 	vmov	r0, s15
 8010354:	f7f0 f89c 	bl	8000490 <__aeabi_f2d>
 8010358:	ec41 0b10 	vmov	d0, r0, r1
 801035c:	f002 fe54 	bl	8013008 <sqrt>
 8010360:	ec51 0b10 	vmov	r0, r1, d0
 8010364:	f7f0 fbe4 	bl	8000b30 <__aeabi_d2f>
 8010368:	ee0a 0a90 	vmov	s21, r0
 801036c:	f7f0 f890 	bl	8000490 <__aeabi_f2d>
 8010370:	a34b      	add	r3, pc, #300	; (adr r3, 80104a0 <MotionDI_update+0x10f0>)
 8010372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010376:	f7f0 fb55 	bl	8000a24 <__aeabi_dcmplt>
 801037a:	b948      	cbnz	r0, 8010390 <MotionDI_update+0xfe0>
 801037c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010380:	eec7 7a2a 	vdiv.f32	s15, s14, s21
 8010384:	ee2a aa27 	vmul.f32	s20, s20, s15
 8010388:	ee69 9aa7 	vmul.f32	s19, s19, s15
 801038c:	ee6b baa7 	vmul.f32	s23, s23, s15
 8010390:	ed88 aa00 	vstr	s20, [r8]
 8010394:	edc8 9a01 	vstr	s19, [r8, #4]
 8010398:	edc8 ba02 	vstr	s23, [r8, #8]
 801039c:	f894 2161 	ldrb.w	r2, [r4, #353]	; 0x161
 80103a0:	2a00      	cmp	r2, #0
 80103a2:	f000 81b8 	beq.w	8010716 <MotionDI_update+0x1366>
 80103a6:	ee07 2a90 	vmov	s15, r2
 80103aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103ae:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 80103b2:	ee88 8a27 	vdiv.f32	s16, s16, s15
 80103b6:	f8df 8110 	ldr.w	r8, [pc, #272]	; 80104c8 <MotionDI_update+0x1118>
 80103ba:	f894 3144 	ldrb.w	r3, [r4, #324]	; 0x144
 80103be:	3301      	adds	r3, #1
 80103c0:	b2db      	uxtb	r3, r3
 80103c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80103c6:	fb02 3311 	mls	r3, r2, r1, r3
 80103ca:	f894 2140 	ldrb.w	r2, [r4, #320]	; 0x140
 80103ce:	f884 3144 	strb.w	r3, [r4, #324]	; 0x144
 80103d2:	ed9a 7a02 	vldr	s14, [sl, #8]
 80103d6:	ed98 6a0e 	vldr	s12, [r8, #56]	; 0x38
 80103da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80103de:	ed98 7a0c 	vldr	s14, [r8, #48]	; 0x30
 80103e2:	edd8 7a0d 	vldr	s15, [r8, #52]	; 0x34
 80103e6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80103ea:	ee77 8a28 	vadd.f32	s17, s14, s17
 80103ee:	ee37 8a88 	vadd.f32	s16, s15, s16
 80103f2:	edc8 6a0e 	vstr	s13, [r8, #56]	; 0x38
 80103f6:	edc8 8a0c 	vstr	s17, [r8, #48]	; 0x30
 80103fa:	ed88 8a0d 	vstr	s16, [r8, #52]	; 0x34
 80103fe:	2a00      	cmp	r2, #0
 8010400:	f040 8587 	bne.w	8010f12 <MotionDI_update+0x1b62>
 8010404:	4a2d      	ldr	r2, [pc, #180]	; (80104bc <MotionDI_update+0x110c>)
 8010406:	9220      	str	r2, [sp, #128]	; 0x80
 8010408:	f102 0318 	add.w	r3, r2, #24
 801040c:	9301      	str	r3, [sp, #4]
 801040e:	4611      	mov	r1, r2
 8010410:	f1a2 0360 	sub.w	r3, r2, #96	; 0x60
 8010414:	9300      	str	r3, [sp, #0]
 8010416:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010418:	f1a2 0310 	sub.w	r3, r2, #16
 801041c:	3940      	subs	r1, #64	; 0x40
 801041e:	3a20      	subs	r2, #32
 8010420:	f7f8 fee6 	bl	80091f0 <SpacePointGyroPropRedist>
 8010424:	f894 314c 	ldrb.w	r3, [r4, #332]	; 0x14c
 8010428:	2b01      	cmp	r3, #1
 801042a:	f001 8027 	beq.w	801147c <MotionDI_update+0x20cc>
 801042e:	4b24      	ldr	r3, [pc, #144]	; (80104c0 <MotionDI_update+0x1110>)
 8010430:	f894 c162 	ldrb.w	ip, [r4, #354]	; 0x162
 8010434:	f8cd c004 	str.w	ip, [sp, #4]
 8010438:	f103 020c 	add.w	r2, r3, #12
 801043c:	9200      	str	r2, [sp, #0]
 801043e:	f1a3 007c 	sub.w	r0, r3, #124	; 0x7c
 8010442:	f1a3 0288 	sub.w	r2, r3, #136	; 0x88
 8010446:	4639      	mov	r1, r7
 8010448:	f7f9 f932 	bl	80096b0 <output_update>
 801044c:	f894 2160 	ldrb.w	r2, [r4, #352]	; 0x160
 8010450:	2300      	movs	r3, #0
 8010452:	f884 3142 	strb.w	r3, [r4, #322]	; 0x142
 8010456:	0793      	lsls	r3, r2, #30
 8010458:	d40a      	bmi.n	8010470 <MotionDI_update+0x10c0>
 801045a:	f894 1144 	ldrb.w	r1, [r4, #324]	; 0x144
 801045e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8010460:	fbb1 f3f0 	udiv	r3, r1, r0
 8010464:	fb00 1613 	mls	r6, r0, r3, r1
 8010468:	f016 0fff 	tst.w	r6, #255	; 0xff
 801046c:	f000 8687 	beq.w	801117e <MotionDI_update+0x1dce>
 8010470:	4a14      	ldr	r2, [pc, #80]	; (80104c4 <MotionDI_update+0x1114>)
 8010472:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010474:	4611      	mov	r1, r2
 8010476:	f7f8 f8d3 	bl	8008620 <m_qmult_eml>
 801047a:	f894 3162 	ldrb.w	r3, [r4, #354]	; 0x162
 801047e:	2b01      	cmp	r3, #1
 8010480:	f47f a8fd 	bne.w	800f67e <MotionDI_update+0x2ce>
 8010484:	9920      	ldr	r1, [sp, #128]	; 0x80
 8010486:	edd1 7a08 	vldr	s15, [r1, #32]
 801048a:	698a      	ldr	r2, [r1, #24]
 801048c:	69cb      	ldr	r3, [r1, #28]
 801048e:	618b      	str	r3, [r1, #24]
 8010490:	eef1 7a67 	vneg.f32	s15, s15
 8010494:	61ca      	str	r2, [r1, #28]
 8010496:	edc1 7a08 	vstr	s15, [r1, #32]
 801049a:	f7ff b8f0 	b.w	800f67e <MotionDI_update+0x2ce>
 801049e:	bf00      	nop
 80104a0:	a0b5ed8d 	.word	0xa0b5ed8d
 80104a4:	3eb0c6f7 	.word	0x3eb0c6f7
 80104a8:	3c23d70a 	.word	0x3c23d70a
 80104ac:	20001758 	.word	0x20001758
 80104b0:	20001af8 	.word	0x20001af8
 80104b4:	20001ae0 	.word	0x20001ae0
 80104b8:	200010f8 	.word	0x200010f8
 80104bc:	20001bcc 	.word	0x20001bcc
 80104c0:	20001c60 	.word	0x20001c60
 80104c4:	20001b7c 	.word	0x20001b7c
 80104c8:	20001ad4 	.word	0x20001ad4
 80104cc:	ad46      	add	r5, sp, #280	; 0x118
 80104ce:	951d      	str	r5, [sp, #116]	; 0x74
 80104d0:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80104d2:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 80104d6:	9218      	str	r2, [sp, #96]	; 0x60
 80104d8:	af36      	add	r7, sp, #216	; 0xd8
 80104da:	2300      	movs	r3, #0
 80104dc:	4632      	mov	r2, r6
 80104de:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 80104e2:	4638      	mov	r0, r7
 80104e4:	f5a8 712c 	sub.w	r1, r8, #688	; 0x2b0
 80104e8:	ae3f      	add	r6, sp, #252	; 0xfc
 80104ea:	602b      	str	r3, [r5, #0]
 80104ec:	606b      	str	r3, [r5, #4]
 80104ee:	60ab      	str	r3, [r5, #8]
 80104f0:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 80104f4:	933f      	str	r3, [sp, #252]	; 0xfc
 80104f6:	9340      	str	r3, [sp, #256]	; 0x100
 80104f8:	9341      	str	r3, [sp, #260]	; 0x104
 80104fa:	edc5 9a03 	vstr	s19, [r5, #12]
 80104fe:	961f      	str	r6, [sp, #124]	; 0x7c
 8010500:	edcd 9a42 	vstr	s19, [sp, #264]	; 0x108
 8010504:	f7f7 fe84 	bl	8008210 <rotVect>
 8010508:	f1a8 02ec 	sub.w	r2, r8, #236	; 0xec
 801050c:	f5a2 71d6 	sub.w	r1, r2, #428	; 0x1ac
 8010510:	4650      	mov	r0, sl
 8010512:	f502 753b 	add.w	r5, r2, #748	; 0x2ec
 8010516:	f7f7 fe7b 	bl	8008210 <rotVect>
 801051a:	a83c      	add	r0, sp, #240	; 0xf0
 801051c:	3a18      	subs	r2, #24
 801051e:	f2a5 41a4 	subw	r1, r5, #1188	; 0x4a4
 8010522:	f7f7 fe75 	bl	8008210 <rotVect>
 8010526:	4b82      	ldr	r3, [pc, #520]	; (8010730 <MotionDI_update+0x1380>)
 8010528:	edd7 7a00 	vldr	s15, [r7]
 801052c:	edd7 5a01 	vldr	s11, [r7, #4]
 8010530:	edda ba00 	vldr	s23, [sl]
 8010534:	ed9a 7a01 	vldr	s14, [sl, #4]
 8010538:	ed9d ba3e 	vldr	s22, [sp, #248]	; 0xf8
 801053c:	ed9d 8a3c 	vldr	s16, [sp, #240]	; 0xf0
 8010540:	eddd 8a3d 	vldr	s17, [sp, #244]	; 0xf4
 8010544:	f893 38e0 	ldrb.w	r3, [r3, #2272]	; 0x8e0
 8010548:	ed8d 8a3d 	vstr	s16, [sp, #244]	; 0xf4
 801054c:	eeb1 aa67 	vneg.f32	s20, s15
 8010550:	eef1 aa65 	vneg.f32	s21, s11
 8010554:	eef1 ba6b 	vneg.f32	s23, s23
 8010558:	eeb1 ca47 	vneg.f32	s24, s14
 801055c:	eeb1 da4b 	vneg.f32	s26, s22
 8010560:	ed87 aa01 	vstr	s20, [r7, #4]
 8010564:	edc7 aa00 	vstr	s21, [r7]
 8010568:	edca ba01 	vstr	s23, [sl, #4]
 801056c:	ed8a ca00 	vstr	s24, [sl]
 8010570:	ed8d da3e 	vstr	s26, [sp, #248]	; 0xf8
 8010574:	edcd 8a3c 	vstr	s17, [sp, #240]	; 0xf0
 8010578:	2b00      	cmp	r3, #0
 801057a:	d045      	beq.n	8010608 <MotionDI_update+0x1258>
 801057c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010580:	edd7 ca02 	vldr	s25, [r7, #8]
 8010584:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8010588:	eeec 7aac 	vfma.f32	s15, s25, s25
 801058c:	ee17 0a90 	vmov	r0, s15
 8010590:	f7ef ff7e 	bl	8000490 <__aeabi_f2d>
 8010594:	ec41 0b10 	vmov	d0, r0, r1
 8010598:	f002 fd36 	bl	8013008 <sqrt>
 801059c:	ec51 0b10 	vmov	r0, r1, d0
 80105a0:	f7f0 fac6 	bl	8000b30 <__aeabi_d2f>
 80105a4:	ee07 0a90 	vmov	s15, r0
 80105a8:	ee89 6aa7 	vdiv.f32	s12, s19, s15
 80105ac:	ee68 7a08 	vmul.f32	s15, s16, s16
 80105b0:	ee66 aa2a 	vmul.f32	s21, s12, s21
 80105b4:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80105b8:	ee26 aa0a 	vmul.f32	s20, s12, s20
 80105bc:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 80105c0:	ee26 6a2c 	vmul.f32	s12, s12, s25
 80105c4:	ee17 0a90 	vmov	r0, s15
 80105c8:	ed87 6a02 	vstr	s12, [r7, #8]
 80105cc:	edc7 aa00 	vstr	s21, [r7]
 80105d0:	ed87 aa01 	vstr	s20, [r7, #4]
 80105d4:	f7ef ff5c 	bl	8000490 <__aeabi_f2d>
 80105d8:	ec41 0b10 	vmov	d0, r0, r1
 80105dc:	f002 fd14 	bl	8013008 <sqrt>
 80105e0:	ec51 0b10 	vmov	r0, r1, d0
 80105e4:	f7f0 faa4 	bl	8000b30 <__aeabi_d2f>
 80105e8:	ee07 0a90 	vmov	s15, r0
 80105ec:	eec9 6aa7 	vdiv.f32	s13, s19, s15
 80105f0:	ee66 8aa8 	vmul.f32	s17, s13, s17
 80105f4:	ee26 8a88 	vmul.f32	s16, s13, s16
 80105f8:	ee66 6a8d 	vmul.f32	s13, s13, s26
 80105fc:	edcd 8a3c 	vstr	s17, [sp, #240]	; 0xf0
 8010600:	ed8d 8a3d 	vstr	s16, [sp, #244]	; 0xf4
 8010604:	edcd 6a3e 	vstr	s13, [sp, #248]	; 0xf8
 8010608:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 801060c:	2a00      	cmp	r2, #0
 801060e:	f000 8088 	beq.w	8010722 <MotionDI_update+0x1372>
 8010612:	ee07 2a90 	vmov	s15, r2
 8010616:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801061a:	ee8c ca06 	vdiv.f32	s24, s24, s12
 801061e:	eecb ba86 	vdiv.f32	s23, s23, s12
 8010622:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
 8010626:	f894 1104 	ldrb.w	r1, [r4, #260]	; 0x104
 801062a:	3301      	adds	r3, #1
 801062c:	b2db      	uxtb	r3, r3
 801062e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010632:	fb02 3310 	mls	r3, r2, r0, r3
 8010636:	f884 3108 	strb.w	r3, [r4, #264]	; 0x108
 801063a:	ed9a 5a02 	vldr	s10, [sl, #8]
 801063e:	edd4 5a9f 	vldr	s11, [r4, #636]	; 0x27c
 8010642:	ed94 7a9d 	vldr	s14, [r4, #628]	; 0x274
 8010646:	edd4 7a9e 	vldr	s15, [r4, #632]	; 0x278
 801064a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801064e:	ee37 7a0c 	vadd.f32	s14, s14, s24
 8010652:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8010656:	ee77 7aab 	vadd.f32	s15, s15, s23
 801065a:	edc4 6a9f 	vstr	s13, [r4, #636]	; 0x27c
 801065e:	ed84 7a9d 	vstr	s14, [r4, #628]	; 0x274
 8010662:	edc4 7a9e 	vstr	s15, [r4, #632]	; 0x278
 8010666:	2900      	cmp	r1, #0
 8010668:	f040 8446 	bne.w	8010ef8 <MotionDI_update+0x1b48>
 801066c:	4931      	ldr	r1, [pc, #196]	; (8010734 <MotionDI_update+0x1384>)
 801066e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8010670:	f101 0350 	add.w	r3, r1, #80	; 0x50
 8010674:	e9cd 1800 	strd	r1, r8, [sp]
 8010678:	f101 0240 	add.w	r2, r1, #64	; 0x40
 801067c:	3120      	adds	r1, #32
 801067e:	f7f8 fdb7 	bl	80091f0 <SpacePointGyroPropRedist>
 8010682:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 8010686:	2b01      	cmp	r3, #1
 8010688:	f000 86eb 	beq.w	8011462 <MotionDI_update+0x20b2>
 801068c:	4b2a      	ldr	r3, [pc, #168]	; (8010738 <MotionDI_update+0x1388>)
 801068e:	f894 6126 	ldrb.w	r6, [r4, #294]	; 0x126
 8010692:	9601      	str	r6, [sp, #4]
 8010694:	f103 020c 	add.w	r2, r3, #12
 8010698:	9200      	str	r2, [sp, #0]
 801069a:	4639      	mov	r1, r7
 801069c:	f1a3 0288 	sub.w	r2, r3, #136	; 0x88
 80106a0:	f1a3 007c 	sub.w	r0, r3, #124	; 0x7c
 80106a4:	f7f9 f804 	bl	80096b0 <output_update>
 80106a8:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
 80106ac:	2300      	movs	r3, #0
 80106ae:	0791      	lsls	r1, r2, #30
 80106b0:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
 80106b4:	d40a      	bmi.n	80106cc <MotionDI_update+0x131c>
 80106b6:	f894 1108 	ldrb.w	r1, [r4, #264]	; 0x108
 80106ba:	9818      	ldr	r0, [sp, #96]	; 0x60
 80106bc:	fbb1 f3f0 	udiv	r3, r1, r0
 80106c0:	fb00 1313 	mls	r3, r0, r3, r1
 80106c4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80106c8:	f000 860e 	beq.w	80112e8 <MotionDI_update+0x1f38>
 80106cc:	4a1b      	ldr	r2, [pc, #108]	; (801073c <MotionDI_update+0x138c>)
 80106ce:	981d      	ldr	r0, [sp, #116]	; 0x74
 80106d0:	4611      	mov	r1, r2
 80106d2:	f7f7 ffa5 	bl	8008620 <m_qmult_eml>
 80106d6:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
 80106da:	2b01      	cmp	r3, #1
 80106dc:	f47e afcb 	bne.w	800f676 <MotionDI_update+0x2c6>
 80106e0:	edd4 7ad7 	vldr	s15, [r4, #860]	; 0x35c
 80106e4:	f8d4 2354 	ldr.w	r2, [r4, #852]	; 0x354
 80106e8:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
 80106ec:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
 80106f0:	eef1 7a67 	vneg.f32	s15, s15
 80106f4:	f8c4 2358 	str.w	r2, [r4, #856]	; 0x358
 80106f8:	edc4 7ad7 	vstr	s15, [r4, #860]	; 0x35c
 80106fc:	f7fe bfbb 	b.w	800f676 <MotionDI_update+0x2c6>
 8010700:	f8d4 36cc 	ldr.w	r3, [r4, #1740]	; 0x6cc
 8010704:	931e      	str	r3, [sp, #120]	; 0x78
 8010706:	f8d4 3650 	ldr.w	r3, [r4, #1616]	; 0x650
 801070a:	931d      	str	r3, [sp, #116]	; 0x74
 801070c:	f7fe bf25 	b.w	800f55a <MotionDI_update+0x1aa>
 8010710:	46be      	mov	lr, r7
 8010712:	f7ff b86e 	b.w	800f7f2 <MotionDI_update+0x442>
 8010716:	2201      	movs	r2, #1
 8010718:	f884 2161 	strb.w	r2, [r4, #353]	; 0x161
 801071c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010720:	e649      	b.n	80103b6 <MotionDI_update+0x1006>
 8010722:	2201      	movs	r2, #1
 8010724:	f884 2125 	strb.w	r2, [r4, #293]	; 0x125
 8010728:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801072c:	e779      	b.n	8010622 <MotionDI_update+0x1272>
 801072e:	bf00      	nop
 8010730:	20000000 	.word	0x20000000
 8010734:	2000196c 	.word	0x2000196c
 8010738:	20001a60 	.word	0x20001a60
 801073c:	2000197c 	.word	0x2000197c
 8010740:	4ad2      	ldr	r2, [pc, #840]	; (8010a8c <MotionDI_update+0x16dc>)
 8010742:	f10d 0ae4 	add.w	sl, sp, #228	; 0xe4
 8010746:	2300      	movs	r3, #0
 8010748:	f5a2 7165 	sub.w	r1, r2, #916	; 0x394
 801074c:	a83c      	add	r0, sp, #240	; 0xf0
 801074e:	e9ca 3300 	strd	r3, r3, [sl]
 8010752:	f8ca 3008 	str.w	r3, [sl, #8]
 8010756:	f7f7 fd5b 	bl	8008210 <rotVect>
 801075a:	4acd      	ldr	r2, [pc, #820]	; (8010a90 <MotionDI_update+0x16e0>)
 801075c:	ab3f      	add	r3, sp, #252	; 0xfc
 801075e:	4618      	mov	r0, r3
 8010760:	f5a2 7162 	sub.w	r1, r2, #904	; 0x388
 8010764:	931f      	str	r3, [sp, #124]	; 0x7c
 8010766:	f7f7 fd53 	bl	8008210 <rotVect>
 801076a:	4bca      	ldr	r3, [pc, #808]	; (8010a94 <MotionDI_update+0x16e4>)
 801076c:	eddd 7a3c 	vldr	s15, [sp, #240]	; 0xf0
 8010770:	ed9d 7a3d 	vldr	s14, [sp, #244]	; 0xf4
 8010774:	ed90 8a00 	vldr	s16, [r0]
 8010778:	edd0 8a01 	vldr	s17, [r0, #4]
 801077c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8010780:	eef1 9a67 	vneg.f32	s19, s15
 8010784:	eeb1 aa47 	vneg.f32	s20, s14
 8010788:	eeb1 8a48 	vneg.f32	s16, s16
 801078c:	eef1 8a68 	vneg.f32	s17, s17
 8010790:	edcd 9a3d 	vstr	s19, [sp, #244]	; 0xf4
 8010794:	ed8d aa3c 	vstr	s20, [sp, #240]	; 0xf0
 8010798:	ed80 8a01 	vstr	s16, [r0, #4]
 801079c:	edc0 8a00 	vstr	s17, [r0]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	f040 83d6 	bne.w	8010f52 <MotionDI_update+0x1ba2>
 80107a6:	eddd aa3e 	vldr	s21, [sp, #248]	; 0xf8
 80107aa:	ed9f babb 	vldr	s22, [pc, #748]	; 8010a98 <MotionDI_update+0x16e8>
 80107ae:	4dbb      	ldr	r5, [pc, #748]	; (8010a9c <MotionDI_update+0x16ec>)
 80107b0:	f894 2161 	ldrb.w	r2, [r4, #353]	; 0x161
 80107b4:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 8010ab0 <MotionDI_update+0x1700>
 80107b8:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 80107bc:	f8d8 1078 	ldr.w	r1, [r8, #120]	; 0x78
 80107c0:	f8d8 0080 	ldr.w	r0, [r8, #128]	; 0x80
 80107c4:	f8d8 c084 	ldr.w	ip, [r8, #132]	; 0x84
 80107c8:	f8c8 1088 	str.w	r1, [r8, #136]	; 0x88
 80107cc:	ee00 2a10 	vmov	s0, r2
 80107d0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80107d4:	f8d8 207c 	ldr.w	r2, [r8, #124]	; 0x7c
 80107d8:	f8c8 208c 	str.w	r2, [r8, #140]	; 0x8c
 80107dc:	ee20 0a09 	vmul.f32	s0, s0, s18
 80107e0:	f043 0302 	orr.w	r3, r3, #2
 80107e4:	f083 0301 	eor.w	r3, r3, #1
 80107e8:	4641      	mov	r1, r8
 80107ea:	22f8      	movs	r2, #248	; 0xf8
 80107ec:	f8c8 0090 	str.w	r0, [r8, #144]	; 0x90
 80107f0:	4658      	mov	r0, fp
 80107f2:	ed8d 0a20 	vstr	s0, [sp, #128]	; 0x80
 80107f6:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
 80107fa:	f8c8 c094 	str.w	ip, [r8, #148]	; 0x94
 80107fe:	f002 fa13 	bl	8012c28 <memcpy>
 8010802:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8010804:	f8cb 500c 	str.w	r5, [fp, #12]
 8010808:	6892      	ldr	r2, [r2, #8]
 801080a:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
 801080e:	2300      	movs	r3, #0
 8010810:	f508 7ef9 	add.w	lr, r8, #498	; 0x1f2
 8010814:	f208 1cf1 	addw	ip, r8, #497	; 0x1f1
 8010818:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801081a:	f8d4 0148 	ldr.w	r0, [r4, #328]	; 0x148
 801081e:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
 8010822:	f108 02c8 	add.w	r2, r8, #200	; 0xc8
 8010826:	f508 71f8 	add.w	r1, r8, #496	; 0x1f0
 801082a:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
 801082e:	f8c8 3038 	str.w	r3, [r8, #56]	; 0x38
 8010832:	ed8b aa06 	vstr	s20, [fp, #24]
 8010836:	edcb 9a07 	vstr	s19, [fp, #28]
 801083a:	edcb aa08 	vstr	s21, [fp, #32]
 801083e:	ed8b ba05 	vstr	s22, [fp, #20]
 8010842:	edcb 8a09 	vstr	s17, [fp, #36]	; 0x24
 8010846:	ed8b 8a0a 	vstr	s16, [fp, #40]	; 0x28
 801084a:	4f95      	ldr	r7, [pc, #596]	; (8010aa0 <MotionDI_update+0x16f0>)
 801084c:	9510      	str	r5, [sp, #64]	; 0x40
 801084e:	e9cd ce13 	strd	ip, lr, [sp, #76]	; 0x4c
 8010852:	920f      	str	r2, [sp, #60]	; 0x3c
 8010854:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8010858:	9112      	str	r1, [sp, #72]	; 0x48
 801085a:	f8cb 3010 	str.w	r3, [fp, #16]
 801085e:	ab46      	add	r3, sp, #280	; 0x118
 8010860:	9715      	str	r7, [sp, #84]	; 0x54
 8010862:	930e      	str	r3, [sp, #56]	; 0x38
 8010864:	f7ef fe14 	bl	8000490 <__aeabi_f2d>
 8010868:	edd4 3a56 	vldr	s7, [r4, #344]	; 0x158
 801086c:	ed94 3a55 	vldr	s6, [r4, #340]	; 0x154
 8010870:	edd4 2a54 	vldr	s5, [r4, #336]	; 0x150
 8010874:	edcd 3a1f 	vstr	s7, [sp, #124]	; 0x7c
 8010878:	4602      	mov	r2, r0
 801087a:	460b      	mov	r3, r1
 801087c:	f894 0142 	ldrb.w	r0, [r4, #322]	; 0x142
 8010880:	ed8d 3a1a 	vstr	s6, [sp, #104]	; 0x68
 8010884:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010888:	edcd 2a17 	vstr	s5, [sp, #92]	; 0x5c
 801088c:	f7ef fdde 	bl	800044c <__aeabi_ui2d>
 8010890:	460b      	mov	r3, r1
 8010892:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 8010896:	9108      	str	r1, [sp, #32]
 8010898:	f894 113f 	ldrb.w	r1, [r4, #319]	; 0x13f
 801089c:	9107      	str	r1, [sp, #28]
 801089e:	f894 113e 	ldrb.w	r1, [r4, #318]	; 0x13e
 80108a2:	9106      	str	r1, [sp, #24]
 80108a4:	f894 113d 	ldrb.w	r1, [r4, #317]	; 0x13d
 80108a8:	9105      	str	r1, [sp, #20]
 80108aa:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
 80108ae:	9104      	str	r1, [sp, #16]
 80108b0:	4602      	mov	r2, r0
 80108b2:	f8d4 0138 	ldr.w	r0, [r4, #312]	; 0x138
 80108b6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80108ba:	f7ef fde9 	bl	8000490 <__aeabi_f2d>
 80108be:	ed94 2a4d 	vldr	s4, [r4, #308]	; 0x134
 80108c2:	edd4 1a4c 	vldr	s3, [r4, #304]	; 0x130
 80108c6:	ed9d 3a1a 	vldr	s6, [sp, #104]	; 0x68
 80108ca:	eddd 2a17 	vldr	s5, [sp, #92]	; 0x5c
 80108ce:	ed9d 0a20 	vldr	s0, [sp, #128]	; 0x80
 80108d2:	eddd 3a1f 	vldr	s7, [sp, #124]	; 0x7c
 80108d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80108da:	ad90      	add	r5, sp, #576	; 0x240
 80108dc:	f50d 7c1c 	add.w	ip, sp, #624	; 0x270
 80108e0:	a984      	add	r1, sp, #528	; 0x210
 80108e2:	ed94 1a4b 	vldr	s2, [r4, #300]	; 0x12c
 80108e6:	edd4 0a4a 	vldr	s1, [r4, #296]	; 0x128
 80108ea:	9517      	str	r5, [sp, #92]	; 0x5c
 80108ec:	e9cd 5c00 	strd	r5, ip, [sp]
 80108f0:	ab8d      	add	r3, sp, #564	; 0x234
 80108f2:	aa87      	add	r2, sp, #540	; 0x21c
 80108f4:	a8a3      	add	r0, sp, #652	; 0x28c
 80108f6:	911a      	str	r1, [sp, #104]	; 0x68
 80108f8:	f7fd ffbc 	bl	800e874 <SpacePointAlgorithm.isra.0>
 80108fc:	f894 3636 	ldrb.w	r3, [r4, #1590]	; 0x636
 8010900:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8010904:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8010908:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801090c:	f8c8 01f4 	str.w	r0, [r8, #500]	; 0x1f4
 8010910:	f108 05f8 	add.w	r5, r8, #248	; 0xf8
 8010914:	2b01      	cmp	r3, #1
 8010916:	f8c8 11f8 	str.w	r1, [r8, #504]	; 0x1f8
 801091a:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
 801091e:	9f46      	ldr	r7, [sp, #280]	; 0x118
 8010920:	9847      	ldr	r0, [sp, #284]	; 0x11c
 8010922:	9948      	ldr	r1, [sp, #288]	; 0x120
 8010924:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8010926:	9520      	str	r5, [sp, #128]	; 0x80
 8010928:	d115      	bne.n	8010956 <MotionDI_update+0x15a6>
 801092a:	f8c8 2084 	str.w	r2, [r8, #132]	; 0x84
 801092e:	f8c8 2094 	str.w	r2, [r8, #148]	; 0x94
 8010932:	4a58      	ldr	r2, [pc, #352]	; (8010a94 <MotionDI_update+0x16e4>)
 8010934:	f8c8 7078 	str.w	r7, [r8, #120]	; 0x78
 8010938:	2300      	movs	r3, #0
 801093a:	f8c8 007c 	str.w	r0, [r8, #124]	; 0x7c
 801093e:	f8c8 1080 	str.w	r1, [r8, #128]	; 0x80
 8010942:	f8c8 7088 	str.w	r7, [r8, #136]	; 0x88
 8010946:	f8c8 008c 	str.w	r0, [r8, #140]	; 0x8c
 801094a:	f8c8 1090 	str.w	r1, [r8, #144]	; 0x90
 801094e:	f884 314c 	strb.w	r3, [r4, #332]	; 0x14c
 8010952:	f882 30c0 	strb.w	r3, [r2, #192]	; 0xc0
 8010956:	eddf 7a53 	vldr	s15, [pc, #332]	; 8010aa4 <MotionDI_update+0x16f4>
 801095a:	ed9a 6a00 	vldr	s12, [sl]
 801095e:	edda 6a01 	vldr	s13, [sl, #4]
 8010962:	ed9a 7a02 	vldr	s14, [sl, #8]
 8010966:	f894 3635 	ldrb.w	r3, [r4, #1589]	; 0x635
 801096a:	ee26 5a27 	vmul.f32	s10, s12, s15
 801096e:	ee66 5aa7 	vmul.f32	s11, s13, s15
 8010972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010976:	ed88 5a1b 	vstr	s10, [r8, #108]	; 0x6c
 801097a:	edc8 5a1c 	vstr	s11, [r8, #112]	; 0x70
 801097e:	edc8 7a1d 	vstr	s15, [r8, #116]	; 0x74
 8010982:	2b00      	cmp	r3, #0
 8010984:	f000 82db 	beq.w	8010f3e <MotionDI_update+0x1b8e>
 8010988:	f894 36ec 	ldrb.w	r3, [r4, #1772]	; 0x6ec
 801098c:	2b09      	cmp	r3, #9
 801098e:	f200 83e0 	bhi.w	8011152 <MotionDI_update+0x1da2>
 8010992:	3301      	adds	r3, #1
 8010994:	f884 36ec 	strb.w	r3, [r4, #1772]	; 0x6ec
 8010998:	e2d3      	b.n	8010f42 <MotionDI_update+0x1b92>
 801099a:	f8d4 2650 	ldr.w	r2, [r4, #1616]	; 0x650
 801099e:	f8d4 e6dc 	ldr.w	lr, [r4, #1756]	; 0x6dc
 80109a2:	921d      	str	r2, [sp, #116]	; 0x74
 80109a4:	2a00      	cmp	r2, #0
 80109a6:	f040 837d 	bne.w	80110a4 <MotionDI_update+0x1cf4>
 80109aa:	f10e 0c01 	add.w	ip, lr, #1
 80109ae:	f8d4 26cc 	ldr.w	r2, [r4, #1740]	; 0x6cc
 80109b2:	921e      	str	r2, [sp, #120]	; 0x78
 80109b4:	2a00      	cmp	r2, #0
 80109b6:	f000 8544 	beq.w	8011442 <MotionDI_update+0x2092>
 80109ba:	ee07 ca90 	vmov	s15, ip
 80109be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80109c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80109c6:	eec7 5a27 	vdiv.f32	s11, s14, s15
 80109ca:	4f37      	ldr	r7, [pc, #220]	; (8010aa8 <MotionDI_update+0x16f8>)
 80109cc:	4a37      	ldr	r2, [pc, #220]	; (8010aac <MotionDI_update+0x16fc>)
 80109ce:	f8c4 c6dc 	str.w	ip, [r4, #1756]	; 0x6dc
 80109d2:	463d      	mov	r5, r7
 80109d4:	4611      	mov	r1, r2
 80109d6:	4610      	mov	r0, r2
 80109d8:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
 80109dc:	f101 0104 	add.w	r1, r1, #4
 80109e0:	f100 0008 	add.w	r0, r0, #8
 80109e4:	ecb5 7a01 	vldmia	r5!, {s14}
 80109e8:	ed92 4a00 	vldr	s8, [r2]
 80109ec:	edd1 4a00 	vldr	s9, [r1]
 80109f0:	ed90 5a00 	vldr	s10, [r0]
 80109f4:	ed95 6a00 	vldr	s12, [r5]
 80109f8:	edd7 6a02 	vldr	s13, [r7, #8]
 80109fc:	ee07 ea90 	vmov	s15, lr
 8010a00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010a04:	eea7 7a84 	vfma.f32	s14, s15, s8
 8010a08:	eea7 6aa4 	vfma.f32	s12, s15, s9
 8010a0c:	eee7 6a85 	vfma.f32	s13, s15, s10
 8010a10:	ee26 6a25 	vmul.f32	s12, s12, s11
 8010a14:	ee67 7a25 	vmul.f32	s15, s14, s11
 8010a18:	ee26 7aa5 	vmul.f32	s14, s13, s11
 8010a1c:	ed81 6a00 	vstr	s12, [r1]
 8010a20:	edc2 7a00 	vstr	s15, [r2]
 8010a24:	ed80 7a00 	vstr	s14, [r0]
 8010a28:	f47e ad92 	bne.w	800f550 <MotionDI_update+0x1a0>
 8010a2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8010a2e:	b16b      	cbz	r3, 8010a4c <MotionDI_update+0x169c>
 8010a30:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8010a34:	ee26 6a26 	vmul.f32	s12, s12, s13
 8010a38:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010a3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010a40:	ed84 6a46 	vstr	s12, [r4, #280]	; 0x118
 8010a44:	ed84 7a47 	vstr	s14, [r4, #284]	; 0x11c
 8010a48:	edc4 7a45 	vstr	s15, [r4, #276]	; 0x114
 8010a4c:	edd1 6a00 	vldr	s13, [r1]
 8010a50:	ed90 7a00 	vldr	s14, [r0]
 8010a54:	edd2 7a00 	vldr	s15, [r2]
 8010a58:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8010a5c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8010a60:	ee27 7a06 	vmul.f32	s14, s14, s12
 8010a64:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010a68:	edc4 6a55 	vstr	s13, [r4, #340]	; 0x154
 8010a6c:	ed84 7a56 	vstr	s14, [r4, #344]	; 0x158
 8010a70:	edc4 7a54 	vstr	s15, [r4, #336]	; 0x150
 8010a74:	2300      	movs	r3, #0
 8010a76:	2500      	movs	r5, #0
 8010a78:	6013      	str	r3, [r2, #0]
 8010a7a:	600b      	str	r3, [r1, #0]
 8010a7c:	6003      	str	r3, [r0, #0]
 8010a7e:	f8c4 56dc 	str.w	r5, [r4, #1756]	; 0x6dc
 8010a82:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010a84:	f8c4 56d8 	str.w	r5, [r4, #1752]	; 0x6d8
 8010a88:	f7fe bd5f 	b.w	800f54a <MotionDI_update+0x19a>
 8010a8c:	20001aec 	.word	0x20001aec
 8010a90:	20001af8 	.word	0x20001af8
 8010a94:	200010f8 	.word	0x200010f8
 8010a98:	bf333333 	.word	0xbf333333
 8010a9c:	3f333333 	.word	0x3f333333
 8010aa0:	200008e8 	.word	0x200008e8
 8010aa4:	42652ee1 	.word	0x42652ee1
 8010aa8:	20000cec 	.word	0x20000cec
 8010aac:	20001d70 	.word	0x20001d70
 8010ab0:	20001ad4 	.word	0x20001ad4
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8010aba:	f2c0 8328 	blt.w	801110e <MotionDI_update+0x1d5e>
 8010abe:	f04f 0a00 	mov.w	sl, #0
 8010ac2:	4e5f      	ldr	r6, [pc, #380]	; (8010c40 <MotionDI_update+0x1890>)
 8010ac4:	f8a4 a088 	strh.w	sl, [r4, #136]	; 0x88
 8010ac8:	f1a6 0c1c 	sub.w	ip, r6, #28
 8010acc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010ad0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8010ad2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8010ad6:	f1a6 0e64 	sub.w	lr, r6, #100	; 0x64
 8010ada:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8010ade:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010ae2:	f1a6 0c48 	sub.w	ip, r6, #72	; 0x48
 8010ae6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010aea:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8010aee:	2300      	movs	r3, #0
 8010af0:	f04f 0e00 	mov.w	lr, #0
 8010af4:	f1ba 0f01 	cmp.w	sl, #1
 8010af8:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8010afc:	bf98      	it	ls
 8010afe:	f206 660c 	addwls	r6, r6, #1548	; 0x60c
 8010b02:	f8c4 e054 	str.w	lr, [r4, #84]	; 0x54
 8010b06:	f8c4 e060 	str.w	lr, [r4, #96]	; 0x60
 8010b0a:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 8010b0e:	f8c4 e058 	str.w	lr, [r4, #88]	; 0x58
 8010b12:	f8c4 e064 	str.w	lr, [r4, #100]	; 0x64
 8010b16:	f8c4 e05c 	str.w	lr, [r4, #92]	; 0x5c
 8010b1a:	f8c4 e068 	str.w	lr, [r4, #104]	; 0x68
 8010b1e:	8323      	strh	r3, [r4, #24]
 8010b20:	f8c4 e01c 	str.w	lr, [r4, #28]
 8010b24:	f8c4 e028 	str.w	lr, [r4, #40]	; 0x28
 8010b28:	f8c4 e020 	str.w	lr, [r4, #32]
 8010b2c:	f8c4 e02c 	str.w	lr, [r4, #44]	; 0x2c
 8010b30:	f8c4 e024 	str.w	lr, [r4, #36]	; 0x24
 8010b34:	f8c4 e030 	str.w	lr, [r4, #48]	; 0x30
 8010b38:	f67e ac6b 	bls.w	800f412 <MotionDI_update+0x62>
 8010b3c:	f894 308a 	ldrb.w	r3, [r4, #138]	; 0x8a
 8010b40:	ed94 9a0e 	vldr	s18, [r4, #56]	; 0x38
 8010b44:	edd4 8a0f 	vldr	s17, [r4, #60]	; 0x3c
 8010b48:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	f000 84cb 	beq.w	80114e8 <MotionDI_update+0x2138>
 8010b52:	ee71 1a88 	vadd.f32	s3, s3, s16
 8010b56:	ee72 2a89 	vadd.f32	s5, s5, s18
 8010b5a:	ee32 2a28 	vadd.f32	s4, s4, s17
 8010b5e:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8010b62:	ee22 9a88 	vmul.f32	s18, s5, s16
 8010b66:	ee62 8a08 	vmul.f32	s17, s4, s16
 8010b6a:	ee21 8a88 	vmul.f32	s16, s3, s16
 8010b6e:	ed84 9a23 	vstr	s18, [r4, #140]	; 0x8c
 8010b72:	edc4 8a24 	vstr	s17, [r4, #144]	; 0x90
 8010b76:	ed84 8a25 	vstr	s16, [r4, #148]	; 0x94
 8010b7a:	4e32      	ldr	r6, [pc, #200]	; (8010c44 <MotionDI_update+0x1894>)
 8010b7c:	2224      	movs	r2, #36	; 0x24
 8010b7e:	f106 0010 	add.w	r0, r6, #16
 8010b82:	2100      	movs	r1, #0
 8010b84:	f002 f85e 	bl	8012c44 <memset>
 8010b88:	f894 26c8 	ldrb.w	r2, [r4, #1736]	; 0x6c8
 8010b8c:	ed86 9a00 	vstr	s18, [r6]
 8010b90:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8010b94:	2a01      	cmp	r2, #1
 8010b96:	edc6 8a01 	vstr	s17, [r6, #4]
 8010b9a:	ed86 8a02 	vstr	s16, [r6, #8]
 8010b9e:	60f3      	str	r3, [r6, #12]
 8010ba0:	61f3      	str	r3, [r6, #28]
 8010ba2:	62f3      	str	r3, [r6, #44]	; 0x2c
 8010ba4:	f240 81c3 	bls.w	8010f2e <MotionDI_update+0x1b7e>
 8010ba8:	2303      	movs	r3, #3
 8010baa:	f1b8 0f01 	cmp.w	r8, #1
 8010bae:	f884 36b8 	strb.w	r3, [r4, #1720]	; 0x6b8
 8010bb2:	bf04      	itt	eq
 8010bb4:	2300      	moveq	r3, #0
 8010bb6:	f884 3180 	strbeq.w	r3, [r4, #384]	; 0x180
 8010bba:	f7fe bc2a 	b.w	800f412 <MotionDI_update+0x62>
 8010bbe:	4288      	cmp	r0, r1
 8010bc0:	f43e ae68 	beq.w	800f894 <MotionDI_update+0x4e4>
 8010bc4:	7d33      	ldrb	r3, [r6, #20]
 8010bc6:	f50d 7b01 	add.w	fp, sp, #516	; 0x204
 8010bca:	aa58      	add	r2, sp, #352	; 0x160
 8010bcc:	9218      	str	r2, [sp, #96]	; 0x60
 8010bce:	aa33      	add	r2, sp, #204	; 0xcc
 8010bd0:	921e      	str	r2, [sp, #120]	; 0x78
 8010bd2:	aa65      	add	r2, sp, #404	; 0x194
 8010bd4:	921c      	str	r2, [sp, #112]	; 0x70
 8010bd6:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 8010bda:	edd6 6a07 	vldr	s13, [r6, #28]
 8010bde:	ed96 7a08 	vldr	s14, [r6, #32]
 8010be2:	edd6 7a06 	vldr	s15, [r6, #24]
 8010be6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8010be8:	f8ca 2000 	str.w	r2, [sl]
 8010bec:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8010bf0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8010bf2:	f884 3684 	strb.w	r3, [r4, #1668]	; 0x684
 8010bf6:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8010bfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010bfe:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8010c00:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8010c02:	edc2 6a01 	vstr	s13, [r2, #4]
 8010c06:	ed82 7a02 	vstr	s14, [r2, #8]
 8010c0a:	edc2 7a00 	vstr	s15, [r2]
 8010c0e:	f8ca 3004 	str.w	r3, [sl, #4]
 8010c12:	6b32      	ldr	r2, [r6, #48]	; 0x30
 8010c14:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8010c16:	6bb0      	ldr	r0, [r6, #56]	; 0x38
 8010c18:	f8ca 1008 	str.w	r1, [sl, #8]
 8010c1c:	f8ca 200c 	str.w	r2, [sl, #12]
 8010c20:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
 8010c22:	6c32      	ldr	r2, [r6, #64]	; 0x40
 8010c24:	f8ca 3010 	str.w	r3, [sl, #16]
 8010c28:	6c73      	ldr	r3, [r6, #68]	; 0x44
 8010c2a:	4f07      	ldr	r7, [pc, #28]	; (8010c48 <MotionDI_update+0x1898>)
 8010c2c:	f8ca 0014 	str.w	r0, [sl, #20]
 8010c30:	f8ca 1018 	str.w	r1, [sl, #24]
 8010c34:	f8ca 201c 	str.w	r2, [sl, #28]
 8010c38:	f8ca 3020 	str.w	r3, [sl, #32]
 8010c3c:	f7fe bbde 	b.w	800f3fc <MotionDI_update+0x4c>
 8010c40:	200016fc 	.word	0x200016fc
 8010c44:	20001d18 	.word	0x20001d18
 8010c48:	20001ce4 	.word	0x20001ce4
 8010c4c:	4ad6      	ldr	r2, [pc, #856]	; (8010fa8 <MotionDI_update+0x1bf8>)
 8010c4e:	4dd7      	ldr	r5, [pc, #860]	; (8010fac <MotionDI_update+0x1bfc>)
 8010c50:	af36      	add	r7, sp, #216	; 0xd8
 8010c52:	2300      	movs	r3, #0
 8010c54:	f5a2 71dc 	sub.w	r1, r2, #440	; 0x1b8
 8010c58:	a839      	add	r0, sp, #228	; 0xe4
 8010c5a:	e9c7 3300 	strd	r3, r3, [r7]
 8010c5e:	60bb      	str	r3, [r7, #8]
 8010c60:	f7f7 fad6 	bl	8008210 <rotVect>
 8010c64:	4ad2      	ldr	r2, [pc, #840]	; (8010fb0 <MotionDI_update+0x1c00>)
 8010c66:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8010c6a:	f5a2 71d6 	sub.w	r1, r2, #428	; 0x1ac
 8010c6e:	4640      	mov	r0, r8
 8010c70:	f7f7 face 	bl	8008210 <rotVect>
 8010c74:	4acf      	ldr	r2, [pc, #828]	; (8010fb4 <MotionDI_update+0x1c04>)
 8010c76:	a83f      	add	r0, sp, #252	; 0xfc
 8010c78:	f5a2 71d0 	sub.w	r1, r2, #416	; 0x1a0
 8010c7c:	f7f7 fac8 	bl	8008210 <rotVect>
 8010c80:	eddd 7a39 	vldr	s15, [sp, #228]	; 0xe4
 8010c84:	ed9d 7a3a 	vldr	s14, [sp, #232]	; 0xe8
 8010c88:	edd8 9a00 	vldr	s19, [r8]
 8010c8c:	ed98 aa01 	vldr	s20, [r8, #4]
 8010c90:	ed9d ba41 	vldr	s22, [sp, #260]	; 0x104
 8010c94:	ed9d 8a3f 	vldr	s16, [sp, #252]	; 0xfc
 8010c98:	eddd 8a40 	vldr	s17, [sp, #256]	; 0x100
 8010c9c:	f895 38e0 	ldrb.w	r3, [r5, #2272]	; 0x8e0
 8010ca0:	9327      	str	r3, [sp, #156]	; 0x9c
 8010ca2:	eeb1 ca67 	vneg.f32	s24, s15
 8010ca6:	eef1 ca47 	vneg.f32	s25, s14
 8010caa:	eef1 9a69 	vneg.f32	s19, s19
 8010cae:	eeb1 aa4a 	vneg.f32	s20, s20
 8010cb2:	eef1 ba4b 	vneg.f32	s23, s22
 8010cb6:	ed8d 8a40 	vstr	s16, [sp, #256]	; 0x100
 8010cba:	ed8d ca3a 	vstr	s24, [sp, #232]	; 0xe8
 8010cbe:	edcd ca39 	vstr	s25, [sp, #228]	; 0xe4
 8010cc2:	edc8 9a01 	vstr	s19, [r8, #4]
 8010cc6:	ed88 aa00 	vstr	s20, [r8]
 8010cca:	edcd ba41 	vstr	s23, [sp, #260]	; 0x104
 8010cce:	edcd 8a3f 	vstr	s17, [sp, #252]	; 0xfc
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	f040 819d 	bne.w	8011012 <MotionDI_update+0x1c62>
 8010cd8:	eddd aa3b 	vldr	s21, [sp, #236]	; 0xec
 8010cdc:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
 8010ce0:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
 8010ce4:	49b4      	ldr	r1, [pc, #720]	; (8010fb8 <MotionDI_update+0x1c08>)
 8010ce6:	edd4 7ab0 	vldr	s15, [r4, #704]	; 0x2c0
 8010cea:	f8d4 e2c4 	ldr.w	lr, [r4, #708]	; 0x2c4
 8010cee:	f8d4 c2c8 	ldr.w	ip, [r4, #712]	; 0x2c8
 8010cf2:	edc4 7ab4 	vstr	s15, [r4, #720]	; 0x2d0
 8010cf6:	ee00 2a10 	vmov	s0, r2
 8010cfa:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8010cfe:	f8d4 22bc 	ldr.w	r2, [r4, #700]	; 0x2bc
 8010d02:	f8c4 22cc 	str.w	r2, [r4, #716]	; 0x2cc
 8010d06:	ee20 0a09 	vmul.f32	s0, s0, s18
 8010d0a:	f043 0302 	orr.w	r3, r3, #2
 8010d0e:	f501 7af9 	add.w	sl, r1, #498	; 0x1f2
 8010d12:	f083 0301 	eor.w	r3, r3, #1
 8010d16:	22f8      	movs	r2, #248	; 0xf8
 8010d18:	4658      	mov	r0, fp
 8010d1a:	ed8d 0a26 	vstr	s0, [sp, #152]	; 0x98
 8010d1e:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
 8010d22:	f8c4 e2d4 	str.w	lr, [r4, #724]	; 0x2d4
 8010d26:	f8c4 c2d8 	str.w	ip, [r4, #728]	; 0x2d8
 8010d2a:	f001 ff7d 	bl	8012c28 <memcpy>
 8010d2e:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8010d32:	f8d5 c0c4 	ldr.w	ip, [r5, #196]	; 0xc4
 8010d36:	f8d5 80c0 	ldr.w	r8, [r5, #192]	; 0xc0
 8010d3a:	edd5 7a2f 	vldr	s15, [r5, #188]	; 0xbc
 8010d3e:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
 8010d42:	f10a 3eff 	add.w	lr, sl, #4294967295
 8010d46:	edcb ca06 	vstr	s25, [fp, #24]
 8010d4a:	ed8b ca07 	vstr	s24, [fp, #28]
 8010d4e:	edcb aa08 	vstr	s21, [fp, #32]
 8010d52:	edcb 8a03 	vstr	s17, [fp, #12]
 8010d56:	ed8b 8a04 	vstr	s16, [fp, #16]
 8010d5a:	edcb ba05 	vstr	s23, [fp, #20]
 8010d5e:	ed8b aa09 	vstr	s20, [fp, #36]	; 0x24
 8010d62:	edcb 9a0a 	vstr	s19, [fp, #40]	; 0x28
 8010d66:	e9cd ea13 	strd	lr, sl, [sp, #76]	; 0x4c
 8010d6a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010d6c:	4993      	ldr	r1, [pc, #588]	; (8010fbc <MotionDI_update+0x1c0c>)
 8010d6e:	9210      	str	r2, [sp, #64]	; 0x40
 8010d70:	2300      	movs	r3, #0
 8010d72:	f1aa 0002 	sub.w	r0, sl, #2
 8010d76:	9012      	str	r0, [sp, #72]	; 0x48
 8010d78:	9711      	str	r7, [sp, #68]	; 0x44
 8010d7a:	f8c4 838c 	str.w	r8, [r4, #908]	; 0x38c
 8010d7e:	f8c4 c390 	str.w	ip, [r4, #912]	; 0x390
 8010d82:	edc4 7ae2 	vstr	s15, [r4, #904]	; 0x388
 8010d86:	f8c4 3274 	str.w	r3, [r4, #628]	; 0x274
 8010d8a:	f8c4 3278 	str.w	r3, [r4, #632]	; 0x278
 8010d8e:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
 8010d92:	9115      	str	r1, [sp, #84]	; 0x54
 8010d94:	edd4 3a47 	vldr	s7, [r4, #284]	; 0x11c
 8010d98:	ed94 3a46 	vldr	s6, [r4, #280]	; 0x118
 8010d9c:	edd4 2a45 	vldr	s5, [r4, #276]	; 0x114
 8010da0:	edcd 3a25 	vstr	s7, [sp, #148]	; 0x94
 8010da4:	f5aa 7395 	sub.w	r3, sl, #298	; 0x12a
 8010da8:	ed8d 3a24 	vstr	s6, [sp, #144]	; 0x90
 8010dac:	edcd 2a23 	vstr	s5, [sp, #140]	; 0x8c
 8010db0:	ed94 2a3e 	vldr	s4, [r4, #248]	; 0xf8
 8010db4:	edd4 1a3d 	vldr	s3, [r4, #244]	; 0xf4
 8010db8:	ed94 1a3c 	vldr	s2, [r4, #240]	; 0xf0
 8010dbc:	edd4 0a3b 	vldr	s1, [r4, #236]	; 0xec
 8010dc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8010dc2:	f8d4 010c 	ldr.w	r0, [r4, #268]	; 0x10c
 8010dc6:	ed8d 2a22 	vstr	s4, [sp, #136]	; 0x88
 8010dca:	f50d 788c 	add.w	r8, sp, #280	; 0x118
 8010dce:	edcd 1a21 	vstr	s3, [sp, #132]	; 0x84
 8010dd2:	ed8d 1a20 	vstr	s2, [sp, #128]	; 0x80
 8010dd6:	edcd 0a1f 	vstr	s1, [sp, #124]	; 0x7c
 8010dda:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010dde:	f7ef fb57 	bl	8000490 <__aeabi_f2d>
 8010de2:	4602      	mov	r2, r0
 8010de4:	460b      	mov	r3, r1
 8010de6:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
 8010dea:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8010dee:	f7ef fb2d 	bl	800044c <__aeabi_ui2d>
 8010df2:	460b      	mov	r3, r1
 8010df4:	f894 1104 	ldrb.w	r1, [r4, #260]	; 0x104
 8010df8:	9108      	str	r1, [sp, #32]
 8010dfa:	f894 1103 	ldrb.w	r1, [r4, #259]	; 0x103
 8010dfe:	9107      	str	r1, [sp, #28]
 8010e00:	f894 1102 	ldrb.w	r1, [r4, #258]	; 0x102
 8010e04:	9106      	str	r1, [sp, #24]
 8010e06:	f894 1101 	ldrb.w	r1, [r4, #257]	; 0x101
 8010e0a:	9105      	str	r1, [sp, #20]
 8010e0c:	f894 1100 	ldrb.w	r1, [r4, #256]	; 0x100
 8010e10:	9104      	str	r1, [sp, #16]
 8010e12:	4602      	mov	r2, r0
 8010e14:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
 8010e18:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8010e1c:	f7ef fb38 	bl	8000490 <__aeabi_f2d>
 8010e20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010e22:	9300      	str	r3, [sp, #0]
 8010e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010e28:	a99c      	add	r1, sp, #624	; 0x270
 8010e2a:	ab8d      	add	r3, sp, #564	; 0x234
 8010e2c:	aa87      	add	r2, sp, #540	; 0x21c
 8010e2e:	a8a3      	add	r0, sp, #652	; 0x28c
 8010e30:	9101      	str	r1, [sp, #4]
 8010e32:	ed9d 0a26 	vldr	s0, [sp, #152]	; 0x98
 8010e36:	991a      	ldr	r1, [sp, #104]	; 0x68
 8010e38:	eddd 3a25 	vldr	s7, [sp, #148]	; 0x94
 8010e3c:	ed9d 3a24 	vldr	s6, [sp, #144]	; 0x90
 8010e40:	eddd 2a23 	vldr	s5, [sp, #140]	; 0x8c
 8010e44:	ed9d 2a22 	vldr	s4, [sp, #136]	; 0x88
 8010e48:	eddd 1a21 	vldr	s3, [sp, #132]	; 0x84
 8010e4c:	ed9d 1a20 	vldr	s2, [sp, #128]	; 0x80
 8010e50:	eddd 0a1f 	vldr	s1, [sp, #124]	; 0x7c
 8010e54:	f7fd fd0e 	bl	800e874 <SpacePointAlgorithm.isra.0>
 8010e58:	46d4      	mov	ip, sl
 8010e5a:	f8d5 10c8 	ldr.w	r1, [r5, #200]	; 0xc8
 8010e5e:	f894 3436 	ldrb.w	r3, [r4, #1078]	; 0x436
 8010e62:	f84c 1f02 	str.w	r1, [ip, #2]!
 8010e66:	f10a 0106 	add.w	r1, sl, #6
 8010e6a:	f10a 0a0a 	add.w	sl, sl, #10
 8010e6e:	f8d5 00f0 	ldr.w	r0, [r5, #240]	; 0xf0
 8010e72:	f8d5 2118 	ldr.w	r2, [r5, #280]	; 0x118
 8010e76:	6008      	str	r0, [r1, #0]
 8010e78:	2b01      	cmp	r3, #1
 8010e7a:	f8ca 2000 	str.w	r2, [sl]
 8010e7e:	f8d8 e000 	ldr.w	lr, [r8]
 8010e82:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010e86:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8010e8a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8010e8e:	f000 830c 	beq.w	80114aa <MotionDI_update+0x20fa>
 8010e92:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8010e94:	3b01      	subs	r3, #1
 8010e96:	b2db      	uxtb	r3, r3
 8010e98:	2b08      	cmp	r3, #8
 8010e9a:	bf98      	it	ls
 8010e9c:	f885 38e0 	strbls.w	r3, [r5, #2272]	; 0x8e0
 8010ea0:	eddf 7a47 	vldr	s15, [pc, #284]	; 8010fc0 <MotionDI_update+0x1c10>
 8010ea4:	ed97 6a00 	vldr	s12, [r7]
 8010ea8:	edd7 6a01 	vldr	s13, [r7, #4]
 8010eac:	ed97 7a02 	vldr	s14, [r7, #8]
 8010eb0:	f894 3435 	ldrb.w	r3, [r4, #1077]	; 0x435
 8010eb4:	ee26 5a27 	vmul.f32	s10, s12, s15
 8010eb8:	ee66 5aa7 	vmul.f32	s11, s13, s15
 8010ebc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ec0:	ed84 5aac 	vstr	s10, [r4, #688]	; 0x2b0
 8010ec4:	edc4 5aad 	vstr	s11, [r4, #692]	; 0x2b4
 8010ec8:	edc4 7aae 	vstr	s15, [r4, #696]	; 0x2b8
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d07f      	beq.n	8010fd0 <MotionDI_update+0x1c20>
 8010ed0:	f894 36ed 	ldrb.w	r3, [r4, #1773]	; 0x6ed
 8010ed4:	2b09      	cmp	r3, #9
 8010ed6:	f200 8144 	bhi.w	8011162 <MotionDI_update+0x1db2>
 8010eda:	3301      	adds	r3, #1
 8010edc:	f884 36ed 	strb.w	r3, [r4, #1773]	; 0x6ed
 8010ee0:	e078      	b.n	8010fd4 <MotionDI_update+0x1c24>
 8010ee2:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 8010ee6:	fb03 f301 	mul.w	r3, r3, r1
 8010eea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010eee:	bf34      	ite	cc
 8010ef0:	2300      	movcc	r3, #0
 8010ef2:	2301      	movcs	r3, #1
 8010ef4:	f7fe bccb 	b.w	800f88e <MotionDI_update+0x4de>
 8010ef8:	4b32      	ldr	r3, [pc, #200]	; (8010fc4 <MotionDI_update+0x1c14>)
 8010efa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010efc:	9200      	str	r2, [sp, #0]
 8010efe:	4651      	mov	r1, sl
 8010f00:	f1a3 020c 	sub.w	r2, r3, #12
 8010f04:	4618      	mov	r0, r3
 8010f06:	eeb0 0a49 	vmov.f32	s0, s18
 8010f0a:	f7f8 f8e1 	bl	80090d0 <SpacePointGyroProp>
 8010f0e:	f7ff bbad 	b.w	801066c <MotionDI_update+0x12bc>
 8010f12:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8010f14:	9200      	str	r2, [sp, #0]
 8010f16:	f108 0378 	add.w	r3, r8, #120	; 0x78
 8010f1a:	eeb0 0a49 	vmov.f32	s0, s18
 8010f1e:	4651      	mov	r1, sl
 8010f20:	4618      	mov	r0, r3
 8010f22:	f108 026c 	add.w	r2, r8, #108	; 0x6c
 8010f26:	f7f8 f8d3 	bl	80090d0 <SpacePointGyroProp>
 8010f2a:	f7ff ba6b 	b.w	8010404 <MotionDI_update+0x1054>
 8010f2e:	3201      	adds	r2, #1
 8010f30:	2302      	movs	r3, #2
 8010f32:	f884 26c8 	strb.w	r2, [r4, #1736]	; 0x6c8
 8010f36:	f884 36b8 	strb.w	r3, [r4, #1720]	; 0x6b8
 8010f3a:	f7fe ba6a 	b.w	800f412 <MotionDI_update+0x62>
 8010f3e:	f884 36ec 	strb.w	r3, [r4, #1772]	; 0x6ec
 8010f42:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
 8010f46:	f083 0302 	eor.w	r3, r3, #2
 8010f4a:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
 8010f4e:	f7fe bb08 	b.w	800f562 <MotionDI_update+0x1b2>
 8010f52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010f56:	eddd aa3e 	vldr	s21, [sp, #248]	; 0xf8
 8010f5a:	ed9f ba1b 	vldr	s22, [pc, #108]	; 8010fc8 <MotionDI_update+0x1c18>
 8010f5e:	4d1b      	ldr	r5, [pc, #108]	; (8010fcc <MotionDI_update+0x1c1c>)
 8010f60:	eee7 7a07 	vfma.f32	s15, s14, s14
 8010f64:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8010f68:	ee17 0a90 	vmov	r0, s15
 8010f6c:	f7ef fa90 	bl	8000490 <__aeabi_f2d>
 8010f70:	ec41 0b10 	vmov	d0, r0, r1
 8010f74:	f002 f848 	bl	8013008 <sqrt>
 8010f78:	ec51 0b10 	vmov	r0, r1, d0
 8010f7c:	f7ef fdd8 	bl	8000b30 <__aeabi_d2f>
 8010f80:	ee07 0a90 	vmov	s15, r0
 8010f84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010f88:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8010f8c:	ee2a aa27 	vmul.f32	s20, s20, s15
 8010f90:	ee69 9aa7 	vmul.f32	s19, s19, s15
 8010f94:	ee6a aaa7 	vmul.f32	s21, s21, s15
 8010f98:	ed8d aa3c 	vstr	s20, [sp, #240]	; 0xf0
 8010f9c:	edcd 9a3d 	vstr	s19, [sp, #244]	; 0xf4
 8010fa0:	edcd aa3e 	vstr	s21, [sp, #248]	; 0xf8
 8010fa4:	e404      	b.n	80107b0 <MotionDI_update+0x1400>
 8010fa6:	bf00      	nop
 8010fa8:	200018ec 	.word	0x200018ec
 8010fac:	20000000 	.word	0x20000000
 8010fb0:	200018f8 	.word	0x200018f8
 8010fb4:	200018e0 	.word	0x200018e0
 8010fb8:	200018d4 	.word	0x200018d4
 8010fbc:	20000010 	.word	0x20000010
 8010fc0:	42652ee1 	.word	0x42652ee1
 8010fc4:	2000194c 	.word	0x2000194c
 8010fc8:	bf3504f3 	.word	0xbf3504f3
 8010fcc:	3f3504f3 	.word	0x3f3504f3
 8010fd0:	f884 36ed 	strb.w	r3, [r4, #1773]	; 0x6ed
 8010fd4:	4bc0      	ldr	r3, [pc, #768]	; (80112d8 <MotionDI_update+0x1f28>)
 8010fd6:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
 8010fda:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8010fde:	6098      	str	r0, [r3, #8]
 8010fe0:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
 8010fe4:	f843 1b04 	str.w	r1, [r3], #4
 8010fe8:	f8d5 10c0 	ldr.w	r1, [r5, #192]	; 0xc0
 8010fec:	6019      	str	r1, [r3, #0]
 8010fee:	f8d5 70a4 	ldr.w	r7, [r5, #164]	; 0xa4
 8010ff2:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
 8010ff6:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 8010ffa:	f8c4 73e8 	str.w	r7, [r4, #1000]	; 0x3e8
 8010ffe:	f082 0302 	eor.w	r3, r2, #2
 8011002:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
 8011006:	f8c4 03ec 	str.w	r0, [r4, #1004]	; 0x3ec
 801100a:	f8c4 13f0 	str.w	r1, [r4, #1008]	; 0x3f0
 801100e:	f7fe bab1 	b.w	800f574 <MotionDI_update+0x1c4>
 8011012:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8011016:	eddd aa3b 	vldr	s21, [sp, #236]	; 0xec
 801101a:	eee7 7a07 	vfma.f32	s15, s14, s14
 801101e:	eeb7 da00 	vmov.f32	s26, #112	; 0x3f800000  1.0
 8011022:	eeea 7aaa 	vfma.f32	s15, s21, s21
 8011026:	ee17 0a90 	vmov	r0, s15
 801102a:	f7ef fa31 	bl	8000490 <__aeabi_f2d>
 801102e:	ec41 0b10 	vmov	d0, r0, r1
 8011032:	f001 ffe9 	bl	8013008 <sqrt>
 8011036:	ec51 0b10 	vmov	r0, r1, d0
 801103a:	f7ef fd79 	bl	8000b30 <__aeabi_d2f>
 801103e:	ee07 0a90 	vmov	s15, r0
 8011042:	ee8d 7a27 	vdiv.f32	s14, s26, s15
 8011046:	ee68 7a08 	vmul.f32	s15, s16, s16
 801104a:	ee6c ca87 	vmul.f32	s25, s25, s14
 801104e:	eee8 7aa8 	vfma.f32	s15, s17, s17
 8011052:	ee2c ca07 	vmul.f32	s24, s24, s14
 8011056:	eeeb 7a0b 	vfma.f32	s15, s22, s22
 801105a:	ee6a aa87 	vmul.f32	s21, s21, s14
 801105e:	ee17 0a90 	vmov	r0, s15
 8011062:	edcd ca39 	vstr	s25, [sp, #228]	; 0xe4
 8011066:	ed8d ca3a 	vstr	s24, [sp, #232]	; 0xe8
 801106a:	edcd aa3b 	vstr	s21, [sp, #236]	; 0xec
 801106e:	f7ef fa0f 	bl	8000490 <__aeabi_f2d>
 8011072:	ec41 0b10 	vmov	d0, r0, r1
 8011076:	f001 ffc7 	bl	8013008 <sqrt>
 801107a:	ec51 0b10 	vmov	r0, r1, d0
 801107e:	f7ef fd57 	bl	8000b30 <__aeabi_d2f>
 8011082:	ee07 0a90 	vmov	s15, r0
 8011086:	eecd 7a27 	vdiv.f32	s15, s26, s15
 801108a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801108e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011092:	ee6b baa7 	vmul.f32	s23, s23, s15
 8011096:	edcd 8a3f 	vstr	s17, [sp, #252]	; 0xfc
 801109a:	ed8d 8a40 	vstr	s16, [sp, #256]	; 0x100
 801109e:	edcd ba41 	vstr	s23, [sp, #260]	; 0x104
 80110a2:	e61b      	b.n	8010cdc <MotionDI_update+0x192c>
 80110a4:	f10e 0c01 	add.w	ip, lr, #1
 80110a8:	ee07 ca90 	vmov	s15, ip
 80110ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80110b4:	ee87 6a27 	vdiv.f32	s12, s14, s15
 80110b8:	4d88      	ldr	r5, [pc, #544]	; (80112dc <MotionDI_update+0x1f2c>)
 80110ba:	4628      	mov	r0, r5
 80110bc:	f206 4284 	addw	r2, r6, #1156	; 0x484
 80110c0:	f506 6191 	add.w	r1, r6, #1160	; 0x488
 80110c4:	ecf0 6a01 	vldmia	r0!, {s13}
 80110c8:	ed92 4a00 	vldr	s8, [r2]
 80110cc:	ed90 7a00 	vldr	s14, [r0]
 80110d0:	edd1 4a00 	vldr	s9, [r1]
 80110d4:	edd5 7a02 	vldr	s15, [r5, #8]
 80110d8:	ee05 ea90 	vmov	s11, lr
 80110dc:	f206 408c 	addw	r0, r6, #1164	; 0x48c
 80110e0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 80110e4:	ed90 5a00 	vldr	s10, [r0]
 80110e8:	eee5 6a84 	vfma.f32	s13, s11, s8
 80110ec:	eea5 7aa4 	vfma.f32	s14, s11, s9
 80110f0:	eee5 7a85 	vfma.f32	s15, s11, s10
 80110f4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80110f8:	ee27 7a06 	vmul.f32	s14, s14, s12
 80110fc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011100:	edc2 6a00 	vstr	s13, [r2]
 8011104:	ed81 7a00 	vstr	s14, [r1]
 8011108:	edc0 7a00 	vstr	s15, [r0]
 801110c:	e44f      	b.n	80109ae <MotionDI_update+0x15fe>
 801110e:	3a01      	subs	r2, #1
 8011110:	ee07 2a90 	vmov	s15, r2
 8011114:	ee28 6a06 	vmul.f32	s12, s16, s12
 8011118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801111c:	ed94 7a00 	vldr	s14, [r4]
 8011120:	eec6 5a27 	vdiv.f32	s11, s12, s15
 8011124:	eef4 5ac7 	vcmpe.f32	s11, s14
 8011128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801112c:	f57f acc7 	bpl.w	8010abe <MotionDI_update+0x170e>
 8011130:	edd4 7a03 	vldr	s15, [r4, #12]
 8011134:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801113c:	f57f acbf 	bpl.w	8010abe <MotionDI_update+0x170e>
 8011140:	2b00      	cmp	r3, #0
 8011142:	f43f acbc 	beq.w	8010abe <MotionDI_update+0x170e>
 8011146:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
 801114a:	3301      	adds	r3, #1
 801114c:	fa1f fa83 	uxth.w	sl, r3
 8011150:	e4b7      	b.n	8010ac2 <MotionDI_update+0x1712>
 8011152:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011154:	ed83 6a22 	vstr	s12, [r3, #136]	; 0x88
 8011158:	edc3 6a23 	vstr	s13, [r3, #140]	; 0x8c
 801115c:	ed83 7a24 	vstr	s14, [r3, #144]	; 0x90
 8011160:	e6ef      	b.n	8010f42 <MotionDI_update+0x1b92>
 8011162:	ed84 6af1 	vstr	s12, [r4, #964]	; 0x3c4
 8011166:	edc4 6af2 	vstr	s13, [r4, #968]	; 0x3c8
 801116a:	ed84 7af3 	vstr	s14, [r4, #972]	; 0x3cc
 801116e:	e731      	b.n	8010fd4 <MotionDI_update+0x1c24>
 8011170:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011174:	6572      	str	r2, [r6, #84]	; 0x54
 8011176:	f8a6 3058 	strh.w	r3, [r6, #88]	; 0x58
 801117a:	f7fe bb9f 	b.w	800f8bc <MotionDI_update+0x50c>
 801117e:	e9dd 701c 	ldrd	r7, r0, [sp, #112]	; 0x70
 8011182:	f8d8 3088 	ldr.w	r3, [r8, #136]	; 0x88
 8011186:	f8d8 108c 	ldr.w	r1, [r8, #140]	; 0x8c
 801118a:	f8c8 3098 	str.w	r3, [r8, #152]	; 0x98
 801118e:	f8d8 3090 	ldr.w	r3, [r8, #144]	; 0x90
 8011192:	f8d8 6094 	ldr.w	r6, [r8, #148]	; 0x94
 8011196:	f8c8 109c 	str.w	r1, [r8, #156]	; 0x9c
 801119a:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
 801119e:	4950      	ldr	r1, [pc, #320]	; (80112e0 <MotionDI_update+0x1f30>)
 80111a0:	f8c8 60a4 	str.w	r6, [r8, #164]	; 0xa4
 80111a4:	f042 0301 	orr.w	r3, r2, #1
 80111a8:	463a      	mov	r2, r7
 80111aa:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
 80111ae:	f7f7 fa37 	bl	8008620 <m_qmult_eml>
 80111b2:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 80111b4:	494b      	ldr	r1, [pc, #300]	; (80112e4 <MotionDI_update+0x1f34>)
 80111b6:	462a      	mov	r2, r5
 80111b8:	f101 0040 	add.w	r0, r1, #64	; 0x40
 80111bc:	f7f7 fa30 	bl	8008620 <m_qmult_eml>
 80111c0:	4629      	mov	r1, r5
 80111c2:	4638      	mov	r0, r7
 80111c4:	f7f7 fa2c 	bl	8008620 <m_qmult_eml>
 80111c8:	ed95 9a01 	vldr	s18, [r5, #4]
 80111cc:	edd5 9a00 	vldr	s19, [r5]
 80111d0:	edd5 8a02 	vldr	s17, [r5, #8]
 80111d4:	ed95 8a03 	vldr	s16, [r5, #12]
 80111d8:	ee69 7a09 	vmul.f32	s15, s18, s18
 80111dc:	eee9 7aa9 	vfma.f32	s15, s19, s19
 80111e0:	eee8 7aa8 	vfma.f32	s15, s17, s17
 80111e4:	eee8 7a08 	vfma.f32	s15, s16, s16
 80111e8:	ee17 0a90 	vmov	r0, s15
 80111ec:	f7ef f950 	bl	8000490 <__aeabi_f2d>
 80111f0:	ec41 0b10 	vmov	d0, r0, r1
 80111f4:	f001 ff08 	bl	8013008 <sqrt>
 80111f8:	ec51 0b10 	vmov	r0, r1, d0
 80111fc:	f7ef fc98 	bl	8000b30 <__aeabi_d2f>
 8011200:	f894 3161 	ldrb.w	r3, [r4, #353]	; 0x161
 8011204:	ed98 6a33 	vldr	s12, [r8, #204]	; 0xcc
 8011208:	edd8 6a32 	vldr	s13, [r8, #200]	; 0xc8
 801120c:	edd8 4a34 	vldr	s9, [r8, #208]	; 0xd0
 8011210:	f8d8 10ac 	ldr.w	r1, [r8, #172]	; 0xac
 8011214:	f8d8 20b0 	ldr.w	r2, [r8, #176]	; 0xb0
 8011218:	f8c8 10bc 	str.w	r1, [r8, #188]	; 0xbc
 801121c:	ee07 3a10 	vmov	s14, r3
 8011220:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8011224:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8011228:	eec5 7a07 	vdiv.f32	s15, s10, s14
 801122c:	f8d8 30a8 	ldr.w	r3, [r8, #168]	; 0xa8
 8011230:	f8c8 30b8 	str.w	r3, [r8, #184]	; 0xb8
 8011234:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
 8011238:	f8c8 20c0 	str.w	r2, [r8, #192]	; 0xc0
 801123c:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
 8011240:	ee07 0a10 	vmov	s14, r0
 8011244:	eec5 5a07 	vdiv.f32	s11, s10, s14
 8011248:	ee27 6a86 	vmul.f32	s12, s15, s12
 801124c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8011250:	ee26 7a06 	vmul.f32	s14, s12, s12
 8011254:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8011258:	eea6 7aa6 	vfma.f32	s14, s13, s13
 801125c:	ee69 9aa5 	vmul.f32	s19, s19, s11
 8011260:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8011264:	ee29 9a25 	vmul.f32	s18, s18, s11
 8011268:	ee68 8aa5 	vmul.f32	s17, s17, s11
 801126c:	ee28 8a25 	vmul.f32	s16, s16, s11
 8011270:	eeb4 7ac5 	vcmpe.f32	s14, s10
 8011274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011278:	ed88 6a37 	vstr	s12, [r8, #220]	; 0xdc
 801127c:	edc8 6a36 	vstr	s13, [r8, #216]	; 0xd8
 8011280:	edc8 7a38 	vstr	s15, [r8, #224]	; 0xe0
 8011284:	edc5 9a00 	vstr	s19, [r5]
 8011288:	edc8 9a1e 	vstr	s19, [r8, #120]	; 0x78
 801128c:	ed85 9a01 	vstr	s18, [r5, #4]
 8011290:	ed88 9a1f 	vstr	s18, [r8, #124]	; 0x7c
 8011294:	edc5 8a02 	vstr	s17, [r5, #8]
 8011298:	edc8 8a20 	vstr	s17, [r8, #128]	; 0x80
 801129c:	ed85 8a03 	vstr	s16, [r5, #12]
 80112a0:	ed88 8a21 	vstr	s16, [r8, #132]	; 0x84
 80112a4:	f100 846a 	bmi.w	8011b7c <MotionDI_update+0x27cc>
 80112a8:	2000      	movs	r0, #0
 80112aa:	2300      	movs	r3, #0
 80112ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80112b0:	f8c8 00e4 	str.w	r0, [r8, #228]	; 0xe4
 80112b4:	f8c8 30a8 	str.w	r3, [r8, #168]	; 0xa8
 80112b8:	f8c8 30ac 	str.w	r3, [r8, #172]	; 0xac
 80112bc:	f8c8 30b0 	str.w	r3, [r8, #176]	; 0xb0
 80112c0:	f8c8 30e8 	str.w	r3, [r8, #232]	; 0xe8
 80112c4:	f8c8 30ec 	str.w	r3, [r8, #236]	; 0xec
 80112c8:	f8c8 30f0 	str.w	r3, [r8, #240]	; 0xf0
 80112cc:	f8c8 20b4 	str.w	r2, [r8, #180]	; 0xb4
 80112d0:	f8c8 20f4 	str.w	r2, [r8, #244]	; 0xf4
 80112d4:	f7ff b8d1 	b.w	801047a <MotionDI_update+0x10ca>
 80112d8:	20001a90 	.word	0x20001a90
 80112dc:	20000414 	.word	0x20000414
 80112e0:	20001b7c 	.word	0x20001b7c
 80112e4:	20001b5c 	.word	0x20001b5c
 80112e8:	e9dd 701c 	ldrd	r7, r0, [sp, #112]	; 0x70
 80112ec:	f8d4 32cc 	ldr.w	r3, [r4, #716]	; 0x2cc
 80112f0:	f8d4 12d0 	ldr.w	r1, [r4, #720]	; 0x2d0
 80112f4:	f8c4 32dc 	str.w	r3, [r4, #732]	; 0x2dc
 80112f8:	f8d4 32d4 	ldr.w	r3, [r4, #724]	; 0x2d4
 80112fc:	f8d4 62d8 	ldr.w	r6, [r4, #728]	; 0x2d8
 8011300:	f8c4 12e0 	str.w	r1, [r4, #736]	; 0x2e0
 8011304:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 8011308:	49a2      	ldr	r1, [pc, #648]	; (8011594 <MotionDI_update+0x21e4>)
 801130a:	f8c4 62e8 	str.w	r6, [r4, #744]	; 0x2e8
 801130e:	f042 0301 	orr.w	r3, r2, #1
 8011312:	463a      	mov	r2, r7
 8011314:	f884 3124 	strb.w	r3, [r4, #292]	; 0x124
 8011318:	f7f7 f982 	bl	8008620 <m_qmult_eml>
 801131c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801131e:	499e      	ldr	r1, [pc, #632]	; (8011598 <MotionDI_update+0x21e8>)
 8011320:	462a      	mov	r2, r5
 8011322:	f101 0040 	add.w	r0, r1, #64	; 0x40
 8011326:	f7f7 f97b 	bl	8008620 <m_qmult_eml>
 801132a:	4629      	mov	r1, r5
 801132c:	4638      	mov	r0, r7
 801132e:	f7f7 f977 	bl	8008620 <m_qmult_eml>
 8011332:	edd5 9a01 	vldr	s19, [r5, #4]
 8011336:	ed95 aa00 	vldr	s20, [r5]
 801133a:	edd5 8a02 	vldr	s17, [r5, #8]
 801133e:	ed95 8a03 	vldr	s16, [r5, #12]
 8011342:	ee69 7aa9 	vmul.f32	s15, s19, s19
 8011346:	eeea 7a0a 	vfma.f32	s15, s20, s20
 801134a:	eee8 7aa8 	vfma.f32	s15, s17, s17
 801134e:	eee8 7a08 	vfma.f32	s15, s16, s16
 8011352:	ee17 0a90 	vmov	r0, s15
 8011356:	f7ef f89b 	bl	8000490 <__aeabi_f2d>
 801135a:	ec41 0b10 	vmov	d0, r0, r1
 801135e:	f001 fe53 	bl	8013008 <sqrt>
 8011362:	ec51 0b10 	vmov	r0, r1, d0
 8011366:	f7ef fbe3 	bl	8000b30 <__aeabi_d2f>
 801136a:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
 801136e:	ed94 6ac4 	vldr	s12, [r4, #784]	; 0x310
 8011372:	edd4 6ac3 	vldr	s13, [r4, #780]	; 0x30c
 8011376:	edd4 4ac5 	vldr	s9, [r4, #788]	; 0x314
 801137a:	f8d4 12f0 	ldr.w	r1, [r4, #752]	; 0x2f0
 801137e:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
 8011382:	f8c4 1300 	str.w	r1, [r4, #768]	; 0x300
 8011386:	ee07 3a10 	vmov	s14, r3
 801138a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801138e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8011392:	eec5 7a07 	vdiv.f32	s15, s10, s14
 8011396:	f8d4 32ec 	ldr.w	r3, [r4, #748]	; 0x2ec
 801139a:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
 801139e:	f8d4 32f8 	ldr.w	r3, [r4, #760]	; 0x2f8
 80113a2:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304
 80113a6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
 80113aa:	ee07 0a10 	vmov	s14, r0
 80113ae:	eec5 5a07 	vdiv.f32	s11, s10, s14
 80113b2:	ee27 6a86 	vmul.f32	s12, s15, s12
 80113b6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80113ba:	ee26 7a06 	vmul.f32	s14, s12, s12
 80113be:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80113c2:	eea6 7aa6 	vfma.f32	s14, s13, s13
 80113c6:	ee25 aa8a 	vmul.f32	s20, s11, s20
 80113ca:	eea7 7aa7 	vfma.f32	s14, s15, s15
 80113ce:	ee65 9aa9 	vmul.f32	s19, s11, s19
 80113d2:	ee65 8aa8 	vmul.f32	s17, s11, s17
 80113d6:	ee28 8a25 	vmul.f32	s16, s16, s11
 80113da:	eeb4 7ac5 	vcmpe.f32	s14, s10
 80113de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113e2:	ed84 6ac8 	vstr	s12, [r4, #800]	; 0x320
 80113e6:	edc4 6ac7 	vstr	s13, [r4, #796]	; 0x31c
 80113ea:	edc4 7ac9 	vstr	s15, [r4, #804]	; 0x324
 80113ee:	ed85 aa00 	vstr	s20, [r5]
 80113f2:	ed84 aaaf 	vstr	s20, [r4, #700]	; 0x2bc
 80113f6:	edc5 9a01 	vstr	s19, [r5, #4]
 80113fa:	edc4 9ab0 	vstr	s19, [r4, #704]	; 0x2c0
 80113fe:	edc5 8a02 	vstr	s17, [r5, #8]
 8011402:	edc4 8ab1 	vstr	s17, [r4, #708]	; 0x2c4
 8011406:	ed85 8a03 	vstr	s16, [r5, #12]
 801140a:	ed84 8ab2 	vstr	s16, [r4, #712]	; 0x2c8
 801140e:	f100 83c5 	bmi.w	8011b9c <MotionDI_update+0x27ec>
 8011412:	2000      	movs	r0, #0
 8011414:	2300      	movs	r3, #0
 8011416:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801141a:	f8c4 0328 	str.w	r0, [r4, #808]	; 0x328
 801141e:	f8c4 32ec 	str.w	r3, [r4, #748]	; 0x2ec
 8011422:	f8c4 32f0 	str.w	r3, [r4, #752]	; 0x2f0
 8011426:	f8c4 32f4 	str.w	r3, [r4, #756]	; 0x2f4
 801142a:	f8c4 332c 	str.w	r3, [r4, #812]	; 0x32c
 801142e:	f8c4 3330 	str.w	r3, [r4, #816]	; 0x330
 8011432:	f8c4 3334 	str.w	r3, [r4, #820]	; 0x334
 8011436:	f8c4 22f8 	str.w	r2, [r4, #760]	; 0x2f8
 801143a:	f8c4 2338 	str.w	r2, [r4, #824]	; 0x338
 801143e:	f7ff b94a 	b.w	80106d6 <MotionDI_update+0x1326>
 8011442:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
 8011446:	f8c4 c6dc 	str.w	ip, [r4, #1756]	; 0x6dc
 801144a:	f47e a886 	bne.w	800f55a <MotionDI_update+0x1aa>
 801144e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011450:	2b00      	cmp	r3, #0
 8011452:	f040 84e4 	bne.w	8011e1e <MotionDI_update+0x2a6e>
 8011456:	4a51      	ldr	r2, [pc, #324]	; (801159c <MotionDI_update+0x21ec>)
 8011458:	1d11      	adds	r1, r2, #4
 801145a:	f102 0008 	add.w	r0, r2, #8
 801145e:	f7ff bb09 	b.w	8010a74 <MotionDI_update+0x16c4>
 8011462:	2300      	movs	r3, #0
 8011464:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8011468:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
 801146c:	f8c4 3358 	str.w	r3, [r4, #856]	; 0x358
 8011470:	f8c4 335c 	str.w	r3, [r4, #860]	; 0x35c
 8011474:	f8c4 2360 	str.w	r2, [r4, #864]	; 0x360
 8011478:	f7ff b908 	b.w	801068c <MotionDI_update+0x12dc>
 801147c:	9920      	ldr	r1, [sp, #128]	; 0x80
 801147e:	2300      	movs	r3, #0
 8011480:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8011484:	618b      	str	r3, [r1, #24]
 8011486:	61cb      	str	r3, [r1, #28]
 8011488:	620b      	str	r3, [r1, #32]
 801148a:	624a      	str	r2, [r1, #36]	; 0x24
 801148c:	f7fe bfcf 	b.w	801042e <MotionDI_update+0x107e>
 8011490:	2300      	movs	r3, #0
 8011492:	6563      	str	r3, [r4, #84]	; 0x54
 8011494:	6623      	str	r3, [r4, #96]	; 0x60
 8011496:	65a3      	str	r3, [r4, #88]	; 0x58
 8011498:	6663      	str	r3, [r4, #100]	; 0x64
 801149a:	65e3      	str	r3, [r4, #92]	; 0x5c
 801149c:	66a3      	str	r3, [r4, #104]	; 0x68
 801149e:	2300      	movs	r3, #0
 80114a0:	4e3f      	ldr	r6, [pc, #252]	; (80115a0 <MotionDI_update+0x21f0>)
 80114a2:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 80114a6:	f7fd bfb4 	b.w	800f412 <MotionDI_update+0x62>
 80114aa:	2300      	movs	r3, #0
 80114ac:	f8c4 e2bc 	str.w	lr, [r4, #700]	; 0x2bc
 80114b0:	f8c4 02c0 	str.w	r0, [r4, #704]	; 0x2c0
 80114b4:	f8c4 12c4 	str.w	r1, [r4, #708]	; 0x2c4
 80114b8:	f8c4 22c8 	str.w	r2, [r4, #712]	; 0x2c8
 80114bc:	f8c4 e2cc 	str.w	lr, [r4, #716]	; 0x2cc
 80114c0:	f8c4 02d0 	str.w	r0, [r4, #720]	; 0x2d0
 80114c4:	f8c4 12d4 	str.w	r1, [r4, #724]	; 0x2d4
 80114c8:	f8c4 22d8 	str.w	r2, [r4, #728]	; 0x2d8
 80114cc:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
 80114d0:	f885 38e0 	strb.w	r3, [r5, #2272]	; 0x8e0
 80114d4:	e4e4      	b.n	8010ea0 <MotionDI_update+0x1af0>
 80114d6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80114d8:	60b2      	str	r2, [r6, #8]
 80114da:	2300      	movs	r3, #0
 80114dc:	60f3      	str	r3, [r6, #12]
 80114de:	f8a6 31c8 	strh.w	r3, [r6, #456]	; 0x1c8
 80114e2:	7d33      	ldrb	r3, [r6, #20]
 80114e4:	f7ff bb71 	b.w	8010bca <MotionDI_update+0x181a>
 80114e8:	2301      	movs	r3, #1
 80114ea:	ed84 9a23 	vstr	s18, [r4, #140]	; 0x8c
 80114ee:	edc4 8a24 	vstr	s17, [r4, #144]	; 0x90
 80114f2:	ed84 8a25 	vstr	s16, [r4, #148]	; 0x94
 80114f6:	f884 308a 	strb.w	r3, [r4, #138]	; 0x8a
 80114fa:	f7ff bb3e 	b.w	8010b7a <MotionDI_update+0x17ca>
 80114fe:	2300      	movs	r3, #0
 8011500:	61e3      	str	r3, [r4, #28]
 8011502:	62a3      	str	r3, [r4, #40]	; 0x28
 8011504:	6223      	str	r3, [r4, #32]
 8011506:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011508:	6263      	str	r3, [r4, #36]	; 0x24
 801150a:	6323      	str	r3, [r4, #48]	; 0x30
 801150c:	2300      	movs	r3, #0
 801150e:	4e24      	ldr	r6, [pc, #144]	; (80115a0 <MotionDI_update+0x21f0>)
 8011510:	8323      	strh	r3, [r4, #24]
 8011512:	f7fd bf7e 	b.w	800f412 <MotionDI_update+0x62>
 8011516:	6d70      	ldr	r0, [r6, #84]	; 0x54
 8011518:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801151a:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 801151c:	4698      	mov	r8, r3
 801151e:	f500 4372 	add.w	r3, r0, #61952	; 0xf200
 8011522:	3330      	adds	r3, #48	; 0x30
 8011524:	429a      	cmp	r2, r3
 8011526:	46ab      	mov	fp, r5
 8011528:	e9dd 9526 	ldrd	r9, r5, [sp, #152]	; 0x98
 801152c:	f200 83c7 	bhi.w	8011cbe <MotionDI_update+0x290e>
 8011530:	f9b6 2058 	ldrsh.w	r2, [r6, #88]	; 0x58
 8011534:	f8b6 3052 	ldrh.w	r3, [r6, #82]	; 0x52
 8011538:	9324      	str	r3, [sp, #144]	; 0x90
 801153a:	e9cd 021c 	strd	r0, r2, [sp, #112]	; 0x70
 801153e:	931f      	str	r3, [sp, #124]	; 0x7c
 8011540:	f9bb 1010 	ldrsh.w	r1, [fp, #16]
 8011544:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 8011548:	f9bb 0012 	ldrsh.w	r0, [fp, #18]
 801154c:	eddf 7a15 	vldr	s15, [pc, #84]	; 80115a4 <MotionDI_update+0x21f4>
 8011550:	ed9f 5a15 	vldr	s10, [pc, #84]	; 80115a8 <MotionDI_update+0x21f8>
 8011554:	eddf 5a15 	vldr	s11, [pc, #84]	; 80115ac <MotionDI_update+0x21fc>
 8011558:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 801155c:	ee1f 2a90 	vmov	r2, s31
 8011560:	1bc9      	subs	r1, r1, r7
 8011562:	1a9b      	subs	r3, r3, r2
 8011564:	fb01 f101 	mul.w	r1, r1, r1
 8011568:	fb03 1103 	mla	r1, r3, r3, r1
 801156c:	eba0 0308 	sub.w	r3, r0, r8
 8011570:	fb03 1303 	mla	r3, r3, r3, r1
 8011574:	2201      	movs	r2, #1
 8011576:	9318      	str	r3, [sp, #96]	; 0x60
 8011578:	2300      	movs	r3, #0
 801157a:	e9cd 9526 	strd	r9, r5, [sp, #152]	; 0x98
 801157e:	ee6b baa7 	vmul.f32	s23, s23, s15
 8011582:	ee2c 5a05 	vmul.f32	s10, s24, s10
 8011586:	4611      	mov	r1, r2
 8011588:	931e      	str	r3, [sp, #120]	; 0x78
 801158a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 801158e:	4684      	mov	ip, r0
 8011590:	e016      	b.n	80115c0 <MotionDI_update+0x2210>
 8011592:	bf00      	nop
 8011594:	2000197c 	.word	0x2000197c
 8011598:	2000195c 	.word	0x2000195c
 801159c:	20001d70 	.word	0x20001d70
 80115a0:	20001d18 	.word	0x20001d18
 80115a4:	3c23d70a 	.word	0x3c23d70a
 80115a8:	3e99999a 	.word	0x3e99999a
 80115ac:	3f6b851f 	.word	0x3f6b851f
 80115b0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80115b4:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 80115b8:	ed8d 7a18 	vstr	s14, [sp, #96]	; 0x60
 80115bc:	f9b3 c00c 	ldrsh.w	ip, [r3, #12]
 80115c0:	1c4b      	adds	r3, r1, #1
 80115c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80115c6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80115ca:	eb0b 0343 	add.w	r3, fp, r3, lsl #1
 80115ce:	eb0b 0040 	add.w	r0, fp, r0, lsl #1
 80115d2:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
 80115d6:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 80115da:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 80115de:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80115e2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80115e6:	eba8 0805 	sub.w	r8, r8, r5
 80115ea:	fb08 f808 	mul.w	r8, r8, r8
 80115ee:	1bc0      	subs	r0, r0, r7
 80115f0:	fb00 8000 	mla	r0, r0, r0, r8
 80115f4:	eba3 030c 	sub.w	r3, r3, ip
 80115f8:	fb03 0303 	mla	r3, r3, r3, r0
 80115fc:	ee07 3a10 	vmov	s14, r3
 8011600:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8011604:	eef4 bae7 	vcmpe.f32	s23, s15
 8011608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801160c:	d445      	bmi.n	801169a <MotionDI_update+0x22ea>
 801160e:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
 8011612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011616:	eef4 bae7 	vcmpe.f32	s23, s15
 801161a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801161e:	d43c      	bmi.n	801169a <MotionDI_update+0x22ea>
 8011620:	fb05 f905 	mul.w	r9, r5, r5
 8011624:	fb07 9907 	mla	r9, r7, r7, r9
 8011628:	fb0c 990c 	mla	r9, ip, ip, r9
 801162c:	ee07 9a90 	vmov	s15, r9
 8011630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011634:	eef1 6ae7 	vsqrt.f32	s13, s15
 8011638:	ee36 6acc 	vsub.f32	s12, s13, s24
 801163c:	eeb0 6ac6 	vabs.f32	s12, s12
 8011640:	eeb4 5ac6 	vcmpe.f32	s10, s12
 8011644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011648:	d427      	bmi.n	801169a <MotionDI_update+0x22ea>
 801164a:	ee76 6acd 	vsub.f32	s13, s13, s26
 801164e:	eef0 6ae6 	vabs.f32	s13, s13
 8011652:	eef4 cae6 	vcmpe.f32	s25, s13
 8011656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801165a:	d41e      	bmi.n	801169a <MotionDI_update+0x22ea>
 801165c:	9821      	ldr	r0, [sp, #132]	; 0x84
 801165e:	2800      	cmp	r0, #0
 8011660:	f040 82ab 	bne.w	8011bba <MotionDI_update+0x280a>
 8011664:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011666:	2b00      	cmp	r3, #0
 8011668:	f040 837c 	bne.w	8011d64 <MotionDI_update+0x29b4>
 801166c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801166e:	1a59      	subs	r1, r3, r1
 8011670:	f101 39ff 	add.w	r9, r1, #4294967295
 8011674:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 8011678:	4601      	mov	r1, r0
 801167a:	9820      	ldr	r0, [sp, #128]	; 0x80
 801167c:	fb03 0319 	mls	r3, r3, r9, r0
 8011680:	931c      	str	r3, [sp, #112]	; 0x70
 8011682:	2301      	movs	r3, #1
 8011684:	9321      	str	r3, [sp, #132]	; 0x84
 8011686:	931e      	str	r3, [sp, #120]	; 0x78
 8011688:	2300      	movs	r3, #0
 801168a:	65f1      	str	r1, [r6, #92]	; 0x5c
 801168c:	f8a6 7060 	strh.w	r7, [r6, #96]	; 0x60
 8011690:	f8a6 5062 	strh.w	r5, [r6, #98]	; 0x62
 8011694:	f8a6 c064 	strh.w	ip, [r6, #100]	; 0x64
 8011698:	931d      	str	r3, [sp, #116]	; 0x74
 801169a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801169c:	3201      	adds	r2, #1
 801169e:	b212      	sxth	r2, r2
 80116a0:	4293      	cmp	r3, r2
 80116a2:	4611      	mov	r1, r2
 80116a4:	dc84      	bgt.n	80115b0 <MotionDI_update+0x2200>
 80116a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80116a8:	f896 804c 	ldrb.w	r8, [r6, #76]	; 0x4c
 80116ac:	f8a6 3050 	strh.w	r3, [r6, #80]	; 0x50
 80116b0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80116b2:	ea43 0808 	orr.w	r8, r3, r8
 80116b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80116b8:	f8a6 3058 	strh.w	r3, [r6, #88]	; 0x58
 80116bc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80116be:	6573      	str	r3, [r6, #84]	; 0x54
 80116c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80116c2:	f886 804c 	strb.w	r8, [r6, #76]	; 0x4c
 80116c6:	e9dd 9526 	ldrd	r9, r5, [sp, #152]	; 0x98
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	f040 81c4 	bne.w	8011a58 <MotionDI_update+0x26a8>
 80116d0:	f1b8 0f00 	cmp.w	r8, #0
 80116d4:	f000 835d 	beq.w	8011d92 <MotionDI_update+0x29e2>
 80116d8:	6937      	ldr	r7, [r6, #16]
 80116da:	b1df      	cbz	r7, 8011714 <MotionDI_update+0x2364>
 80116dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80116de:	f7ee feb5 	bl	800044c <__aeabi_ui2d>
 80116e2:	a3d3      	add	r3, pc, #844	; (adr r3, 8011a30 <MotionDI_update+0x2680>)
 80116e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e8:	f7ee ff2a 	bl	8000540 <__aeabi_dmul>
 80116ec:	4602      	mov	r2, r0
 80116ee:	4638      	mov	r0, r7
 80116f0:	4688      	mov	r8, r1
 80116f2:	4617      	mov	r7, r2
 80116f4:	f7ee feaa 	bl	800044c <__aeabi_ui2d>
 80116f8:	4602      	mov	r2, r0
 80116fa:	460b      	mov	r3, r1
 80116fc:	4638      	mov	r0, r7
 80116fe:	4641      	mov	r1, r8
 8011700:	f7ee fd66 	bl	80001d0 <__aeabi_dsub>
 8011704:	2200      	movs	r2, #0
 8011706:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801170a:	f7ef f98b 	bl	8000a24 <__aeabi_dcmplt>
 801170e:	2800      	cmp	r0, #0
 8011710:	f040 836a 	bne.w	8011de8 <MotionDI_update+0x2a38>
 8011714:	f896 346c 	ldrb.w	r3, [r6, #1132]	; 0x46c
 8011718:	2b01      	cmp	r3, #1
 801171a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801171c:	f000 8361 	beq.w	8011de2 <MotionDI_update+0x2a32>
 8011720:	2b0a      	cmp	r3, #10
 8011722:	f240 8361 	bls.w	8011de8 <MotionDI_update+0x2a38>
 8011726:	4ac4      	ldr	r2, [pc, #784]	; (8011a38 <MotionDI_update+0x2688>)
 8011728:	edd2 9a00 	vldr	s19, [r2]
 801172c:	aa58      	add	r2, sp, #352	; 0x160
 801172e:	2100      	movs	r1, #0
 8011730:	2300      	movs	r3, #0
 8011732:	9218      	str	r2, [sp, #96]	; 0x60
 8011734:	4610      	mov	r0, r2
 8011736:	2234      	movs	r2, #52	; 0x34
 8011738:	932b      	str	r3, [sp, #172]	; 0xac
 801173a:	932c      	str	r3, [sp, #176]	; 0xb0
 801173c:	932d      	str	r3, [sp, #180]	; 0xb4
 801173e:	932e      	str	r3, [sp, #184]	; 0xb8
 8011740:	f88d 10aa 	strb.w	r1, [sp, #170]	; 0xaa
 8011744:	f88d 10ab 	strb.w	r1, [sp, #171]	; 0xab
 8011748:	912f      	str	r1, [sp, #188]	; 0xbc
 801174a:	f8ad 10c0 	strh.w	r1, [sp, #192]	; 0xc0
 801174e:	9131      	str	r1, [sp, #196]	; 0xc4
 8011750:	f8ad 10c8 	strh.w	r1, [sp, #200]	; 0xc8
 8011754:	f001 fa76 	bl	8012c44 <memset>
 8011758:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801175a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801175c:	4293      	cmp	r3, r2
 801175e:	f000 8382 	beq.w	8011e66 <MotionDI_update+0x2ab6>
 8011762:	461a      	mov	r2, r3
 8011764:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011766:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8011768:	3301      	adds	r3, #1
 801176a:	1a9b      	subs	r3, r3, r2
 801176c:	fb93 f2f1 	sdiv	r2, r3, r1
 8011770:	fb01 3312 	mls	r3, r1, r2, r3
 8011774:	fa0f fa83 	sxth.w	sl, r3
 8011778:	f1ba 0f00 	cmp.w	sl, #0
 801177c:	da03      	bge.n	8011786 <MotionDI_update+0x23d6>
 801177e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011780:	441a      	add	r2, r3
 8011782:	fa0f fa82 	sxth.w	sl, r2
 8011786:	eb0a 034a 	add.w	r3, sl, sl, lsl #1
 801178a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801178e:	f9b3 0062 	ldrsh.w	r0, [r3, #98]	; 0x62
 8011792:	f9b3 c060 	ldrsh.w	ip, [r3, #96]	; 0x60
 8011796:	f9b3 7064 	ldrsh.w	r7, [r3, #100]	; 0x64
 801179a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801179c:	4602      	mov	r2, r0
 801179e:	2b00      	cmp	r3, #0
 80117a0:	f000 8382 	beq.w	8011ea8 <MotionDI_update+0x2af8>
 80117a4:	2200      	movs	r2, #0
 80117a6:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
 80117aa:	f8dd 907c 	ldr.w	r9, [sp, #124]	; 0x7c
 80117ae:	951d      	str	r5, [sp, #116]	; 0x74
 80117b0:	f8cd b078 	str.w	fp, [sp, #120]	; 0x78
 80117b4:	4611      	mov	r1, r2
 80117b6:	46d3      	mov	fp, sl
 80117b8:	4686      	mov	lr, r0
 80117ba:	46e0      	mov	r8, ip
 80117bc:	463d      	mov	r5, r7
 80117be:	4682      	mov	sl, r0
 80117c0:	4459      	add	r1, fp
 80117c2:	fb91 f3f9 	sdiv	r3, r1, r9
 80117c6:	fb09 1313 	mls	r3, r9, r3, r1
 80117ca:	b21b      	sxth	r3, r3
 80117cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80117d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80117d4:	3201      	adds	r2, #1
 80117d6:	f9b3 0060 	ldrsh.w	r0, [r3, #96]	; 0x60
 80117da:	f9b3 1062 	ldrsh.w	r1, [r3, #98]	; 0x62
 80117de:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 80117e2:	4584      	cmp	ip, r0
 80117e4:	bfb8      	it	lt
 80117e6:	4684      	movlt	ip, r0
 80117e8:	4580      	cmp	r8, r0
 80117ea:	bfa8      	it	ge
 80117ec:	4680      	movge	r8, r0
 80117ee:	458a      	cmp	sl, r1
 80117f0:	bfb8      	it	lt
 80117f2:	468a      	movlt	sl, r1
 80117f4:	458e      	cmp	lr, r1
 80117f6:	bfa8      	it	ge
 80117f8:	468e      	movge	lr, r1
 80117fa:	429f      	cmp	r7, r3
 80117fc:	bfb8      	it	lt
 80117fe:	461f      	movlt	r7, r3
 8011800:	429d      	cmp	r5, r3
 8011802:	bfa8      	it	ge
 8011804:	461d      	movge	r5, r3
 8011806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011808:	b212      	sxth	r2, r2
 801180a:	429a      	cmp	r2, r3
 801180c:	4611      	mov	r1, r2
 801180e:	dbd7      	blt.n	80117c0 <MotionDI_update+0x2410>
 8011810:	ebac 0808 	sub.w	r8, ip, r8
 8011814:	ee07 8a90 	vmov	s15, r8
 8011818:	4629      	mov	r1, r5
 801181a:	e9dd 951c 	ldrd	r9, r5, [sp, #112]	; 0x70
 801181e:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 8011822:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011826:	4652      	mov	r2, sl
 8011828:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8011a3c <MotionDI_update+0x268c>
 801182c:	ed9f 6a84 	vldr	s12, [pc, #528]	; 8011a40 <MotionDI_update+0x2690>
 8011830:	eec7 5a29 	vdiv.f32	s11, s14, s19
 8011834:	ee25 6a86 	vmul.f32	s12, s11, s12
 8011838:	eeb4 6ae7 	vcmpe.f32	s12, s15
 801183c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011840:	f300 82b8 	bgt.w	8011db4 <MotionDI_update+0x2a04>
 8011844:	eba2 0e0e 	sub.w	lr, r2, lr
 8011848:	ee07 ea10 	vmov	s14, lr
 801184c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8011850:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8011854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011858:	f300 82ac 	bgt.w	8011db4 <MotionDI_update+0x2a04>
 801185c:	1a7f      	subs	r7, r7, r1
 801185e:	ee07 7a10 	vmov	s14, r7
 8011862:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011866:	eeb4 6ac7 	vcmpe.f32	s12, s14
 801186a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801186e:	f300 82a1 	bgt.w	8011db4 <MotionDI_update+0x2a04>
 8011872:	eeb0 6a04 	vmov.f32	s12, #4	; 0x40200000  2.5
 8011876:	ee65 5a86 	vmul.f32	s11, s11, s12
 801187a:	eef4 5ae7 	vcmpe.f32	s11, s15
 801187e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011882:	f100 8297 	bmi.w	8011db4 <MotionDI_update+0x2a04>
 8011886:	eef4 6ae5 	vcmpe.f32	s13, s11
 801188a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801188e:	f300 8291 	bgt.w	8011db4 <MotionDI_update+0x2a04>
 8011892:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8011896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801189a:	f300 828b 	bgt.w	8011db4 <MotionDI_update+0x2a04>
 801189e:	edd6 6a06 	vldr	s13, [r6, #24]
 80118a2:	ed96 7a07 	vldr	s14, [r6, #28]
 80118a6:	edd6 7a08 	vldr	s15, [r6, #32]
 80118aa:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80118ae:	f10d 03ab 	add.w	r3, sp, #171	; 0xab
 80118b2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80118b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80118ba:	9300      	str	r3, [sp, #0]
 80118bc:	ee16 3a90 	vmov	r3, s13
 80118c0:	ee17 1a90 	vmov	r1, s15
 80118c4:	f8ad 30c4 	strh.w	r3, [sp, #196]	; 0xc4
 80118c8:	ee17 3a10 	vmov	r3, s14
 80118cc:	f8ad 10c8 	strh.w	r1, [sp, #200]	; 0xc8
 80118d0:	f8ad 30c6 	strh.w	r3, [sp, #198]	; 0xc6
 80118d4:	495b      	ldr	r1, [pc, #364]	; (8011a44 <MotionDI_update+0x2694>)
 80118d6:	aa2d      	add	r2, sp, #180	; 0xb4
 80118d8:	eeb0 0a69 	vmov.f32	s0, s19
 80118dc:	a831      	add	r0, sp, #196	; 0xc4
 80118de:	ab2e      	add	r3, sp, #184	; 0xb8
 80118e0:	f7f8 fc94 	bl	800a20c <getAccStats.constprop.0>
 80118e4:	eddf 7a58 	vldr	s15, [pc, #352]	; 8011a48 <MotionDI_update+0x2698>
 80118e8:	ed9d 7a2e 	vldr	s14, [sp, #184]	; 0xb8
 80118ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80118f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118f4:	f140 82e4 	bpl.w	8011ec0 <MotionDI_update+0x2b10>
 80118f8:	f896 346c 	ldrb.w	r3, [r6, #1132]	; 0x46c
 80118fc:	2b01      	cmp	r3, #1
 80118fe:	f000 82df 	beq.w	8011ec0 <MotionDI_update+0x2b10>
 8011902:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8011904:	2b00      	cmp	r3, #0
 8011906:	f000 82db 	beq.w	8011ec0 <MotionDI_update+0x2b10>
 801190a:	7d33      	ldrb	r3, [r6, #20]
 801190c:	2b03      	cmp	r3, #3
 801190e:	f001 8123 	beq.w	8012b58 <MotionDI_update+0x37a8>
 8011912:	f8df c138 	ldr.w	ip, [pc, #312]	; 8011a4c <MotionDI_update+0x269c>
 8011916:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8011918:	edc6 8a04 	vstr	s17, [r6, #16]
 801191c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011920:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011922:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011926:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011928:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801192c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801192e:	f8dc 2000 	ldr.w	r2, [ip]
 8011932:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8011934:	603a      	str	r2, [r7, #0]
 8011936:	2103      	movs	r1, #3
 8011938:	2200      	movs	r2, #0
 801193a:	7531      	strb	r1, [r6, #20]
 801193c:	f886 204c 	strb.w	r2, [r6, #76]	; 0x4c
 8011940:	2b00      	cmp	r3, #0
 8011942:	f041 8104 	bne.w	8012b4e <MotionDI_update+0x379e>
 8011946:	ab33      	add	r3, sp, #204	; 0xcc
 8011948:	931e      	str	r3, [sp, #120]	; 0x78
 801194a:	ab65      	add	r3, sp, #404	; 0x194
 801194c:	931c      	str	r3, [sp, #112]	; 0x70
 801194e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8011952:	4f3e      	ldr	r7, [pc, #248]	; (8011a4c <MotionDI_update+0x269c>)
 8011954:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011958:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801195a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801195e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011960:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8011964:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8011966:	f8dc 3000 	ldr.w	r3, [ip]
 801196a:	603b      	str	r3, [r7, #0]
 801196c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801196e:	4f38      	ldr	r7, [pc, #224]	; (8011a50 <MotionDI_update+0x26a0>)
 8011970:	f7ee fd6c 	bl	800044c <__aeabi_ui2d>
 8011974:	a32e      	add	r3, pc, #184	; (adr r3, 8011a30 <MotionDI_update+0x2680>)
 8011976:	e9d3 2300 	ldrd	r2, r3, [r3]
 801197a:	f7ee fde1 	bl	8000540 <__aeabi_dmul>
 801197e:	f7ef f8b7 	bl	8000af0 <__aeabi_d2uiz>
 8011982:	edd6 6a07 	vldr	s13, [r6, #28]
 8011986:	ed96 7a08 	vldr	s14, [r6, #32]
 801198a:	edd6 7a06 	vldr	s15, [r6, #24]
 801198e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8011990:	f8d6 c028 	ldr.w	ip, [r6, #40]	; 0x28
 8011994:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8011996:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8011998:	64b0      	str	r0, [r6, #72]	; 0x48
 801199a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 801199e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80119a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80119a6:	edc3 6a01 	vstr	s13, [r3, #4]
 80119aa:	ed83 7a02 	vstr	s14, [r3, #8]
 80119ae:	edc3 7a00 	vstr	s15, [r3]
 80119b2:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80119b4:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80119b6:	61fb      	str	r3, [r7, #28]
 80119b8:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 80119bc:	eddf 4a25 	vldr	s9, [pc, #148]	; 8011a54 <MotionDI_update+0x26a4>
 80119c0:	f8d6 e024 	ldr.w	lr, [r6, #36]	; 0x24
 80119c4:	f8c7 c010 	str.w	ip, [r7, #16]
 80119c8:	6178      	str	r0, [r7, #20]
 80119ca:	f8d6 c03c 	ldr.w	ip, [r6, #60]	; 0x3c
 80119ce:	6c30      	ldr	r0, [r6, #64]	; 0x40
 80119d0:	61b9      	str	r1, [r7, #24]
 80119d2:	623a      	str	r2, [r7, #32]
 80119d4:	6c71      	ldr	r1, [r6, #68]	; 0x44
 80119d6:	f8c7 e00c 	str.w	lr, [r7, #12]
 80119da:	2200      	movs	r2, #0
 80119dc:	eeb8 5ae6 	vcvt.f32.s32	s10, s13
 80119e0:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 80119e4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 80119e8:	e9c6 3202 	strd	r3, r2, [r6, #8]
 80119ec:	f8c7 c024 	str.w	ip, [r7, #36]	; 0x24
 80119f0:	62b8      	str	r0, [r7, #40]	; 0x28
 80119f2:	f8a6 21c8 	strh.w	r2, [r6, #456]	; 0x1c8
 80119f6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80119f8:	f894 1168 	ldrb.w	r1, [r4, #360]	; 0x168
 80119fc:	7d33      	ldrb	r3, [r6, #20]
 80119fe:	f884 3684 	strb.w	r3, [r4, #1668]	; 0x684
 8011a02:	ee65 6a24 	vmul.f32	s13, s10, s9
 8011a06:	ee26 7a24 	vmul.f32	s14, s12, s9
 8011a0a:	ee65 7aa4 	vmul.f32	s15, s11, s9
 8011a0e:	2901      	cmp	r1, #1
 8011a10:	edc7 6a01 	vstr	s13, [r7, #4]
 8011a14:	edc7 7a00 	vstr	s15, [r7]
 8011a18:	ed87 7a02 	vstr	s14, [r7, #8]
 8011a1c:	f47d acee 	bne.w	800f3fc <MotionDI_update+0x4c>
 8011a20:	2b03      	cmp	r3, #3
 8011a22:	f47d aceb 	bne.w	800f3fc <MotionDI_update+0x4c>
 8011a26:	f884 2168 	strb.w	r2, [r4, #360]	; 0x168
 8011a2a:	f7fd bce7 	b.w	800f3fc <MotionDI_update+0x4c>
 8011a2e:	bf00      	nop
 8011a30:	d2f1a9fc 	.word	0xd2f1a9fc
 8011a34:	3f50624d 	.word	0x3f50624d
 8011a38:	20002598 	.word	0x20002598
 8011a3c:	3f8ccccd 	.word	0x3f8ccccd
 8011a40:	3f99999a 	.word	0x3f99999a
 8011a44:	2000215c 	.word	0x2000215c
 8011a48:	3d23d70a 	.word	0x3d23d70a
 8011a4c:	2000214c 	.word	0x2000214c
 8011a50:	20001ce4 	.word	0x20001ce4
 8011a54:	3a83126f 	.word	0x3a83126f
 8011a58:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	f47f ae38 	bne.w	80116d0 <MotionDI_update+0x2320>
 8011a60:	461a      	mov	r2, r3
 8011a62:	4bd0      	ldr	r3, [pc, #832]	; (8011da4 <MotionDI_update+0x29f4>)
 8011a64:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 8011a68:	edd3 7a00 	vldr	s15, [r3]
 8011a6c:	9f29      	ldr	r7, [sp, #164]	; 0xa4
 8011a6e:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8011a72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011a7a:	4611      	mov	r1, r2
 8011a7c:	4610      	mov	r0, r2
 8011a7e:	4613      	mov	r3, r2
 8011a80:	f8cd 9070 	str.w	r9, [sp, #112]	; 0x70
 8011a84:	3101      	adds	r1, #1
 8011a86:	f9b7 9008 	ldrsh.w	r9, [r7, #8]
 8011a8a:	f9b7 800a 	ldrsh.w	r8, [r7, #10]
 8011a8e:	f9b7 e00c 	ldrsh.w	lr, [r7, #12]
 8011a92:	fa1f fc81 	uxth.w	ip, r1
 8011a96:	45e2      	cmp	sl, ip
 8011a98:	444a      	add	r2, r9
 8011a9a:	4443      	add	r3, r8
 8011a9c:	4470      	add	r0, lr
 8011a9e:	f107 0706 	add.w	r7, r7, #6
 8011aa2:	d8ef      	bhi.n	8011a84 <MotionDI_update+0x26d4>
 8011aa4:	9922      	ldr	r1, [sp, #136]	; 0x88
 8011aa6:	fb92 f2f1 	sdiv	r2, r2, r1
 8011aaa:	ee07 2a90 	vmov	s15, r2
 8011aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011ab2:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011ab6:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
 8011aba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ac2:	f100 81ec 	bmi.w	8011e9e <MotionDI_update+0x2aee>
 8011ac6:	eef1 6a47 	vneg.f32	s13, s14
 8011aca:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ad2:	dd03      	ble.n	8011adc <MotionDI_update+0x272c>
 8011ad4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ad8:	edc6 7a06 	vstr	s15, [r6, #24]
 8011adc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8011ade:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ae2:	ee07 3a90 	vmov	s15, r3
 8011ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011aea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011af2:	f100 81cf 	bmi.w	8011e94 <MotionDI_update+0x2ae4>
 8011af6:	eef1 6a47 	vneg.f32	s13, s14
 8011afa:	eef4 6ae7 	vcmpe.f32	s13, s15
 8011afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b02:	dd03      	ble.n	8011b0c <MotionDI_update+0x275c>
 8011b04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011b08:	edc6 7a07 	vstr	s15, [r6, #28]
 8011b0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011b0e:	fb90 f3f3 	sdiv	r3, r0, r3
 8011b12:	ee07 3a90 	vmov	s15, r3
 8011b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011b1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b22:	f140 81ab 	bpl.w	8011e7c <MotionDI_update+0x2acc>
 8011b26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011b2a:	edc6 7a08 	vstr	s15, [r6, #32]
 8011b2e:	e5cf      	b.n	80116d0 <MotionDI_update+0x2320>
 8011b30:	7d33      	ldrb	r3, [r6, #20]
 8011b32:	2b03      	cmp	r3, #3
 8011b34:	f47d aede 	bne.w	800f8f4 <MotionDI_update+0x544>
 8011b38:	6932      	ldr	r2, [r6, #16]
 8011b3a:	2a00      	cmp	r2, #0
 8011b3c:	f43d aeda 	beq.w	800f8f4 <MotionDI_update+0x544>
 8011b40:	ee07 2a90 	vmov	s15, r2
 8011b44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011b48:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8011b4c:	ee78 7a67 	vsub.f32	s15, s16, s15
 8011b50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b58:	f77d aecc 	ble.w	800f8f4 <MotionDI_update+0x544>
 8011b5c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8011b5e:	2200      	movs	r2, #0
 8011b60:	e9c6 1202 	strd	r1, r2, [r6, #8]
 8011b64:	f8a6 21c8 	strh.w	r2, [r6, #456]	; 0x1c8
 8011b68:	f7ff b82f 	b.w	8010bca <MotionDI_update+0x181a>
 8011b6c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011b6e:	2b01      	cmp	r3, #1
 8011b70:	f43f acb1 	beq.w	80114d6 <MotionDI_update+0x2126>
 8011b74:	2300      	movs	r3, #0
 8011b76:	9328      	str	r3, [sp, #160]	; 0xa0
 8011b78:	f7fe b810 	b.w	800fb9c <MotionDI_update+0x7ec>
 8011b7c:	ee75 7a47 	vsub.f32	s15, s10, s14
 8011b80:	ee17 0a90 	vmov	r0, s15
 8011b84:	f7ee fc84 	bl	8000490 <__aeabi_f2d>
 8011b88:	ec41 0b10 	vmov	d0, r0, r1
 8011b8c:	f001 fa3c 	bl	8013008 <sqrt>
 8011b90:	ec51 0b10 	vmov	r0, r1, d0
 8011b94:	f7ee ffcc 	bl	8000b30 <__aeabi_d2f>
 8011b98:	f7ff bb87 	b.w	80112aa <MotionDI_update+0x1efa>
 8011b9c:	ee75 7a47 	vsub.f32	s15, s10, s14
 8011ba0:	ee17 0a90 	vmov	r0, s15
 8011ba4:	f7ee fc74 	bl	8000490 <__aeabi_f2d>
 8011ba8:	ec41 0b10 	vmov	d0, r0, r1
 8011bac:	f001 fa2c 	bl	8013008 <sqrt>
 8011bb0:	ec51 0b10 	vmov	r0, r1, d0
 8011bb4:	f7ee ffbc 	bl	8000b30 <__aeabi_d2f>
 8011bb8:	e42c      	b.n	8011414 <MotionDI_update+0x2064>
 8011bba:	4603      	mov	r3, r0
 8011bbc:	9824      	ldr	r0, [sp, #144]	; 0x90
 8011bbe:	4283      	cmp	r3, r0
 8011bc0:	f000 8118 	beq.w	8011df4 <MotionDI_update+0x2a44>
 8011bc4:	4618      	mov	r0, r3
 8011bc6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011bc8:	3301      	adds	r3, #1
 8011bca:	eba3 0a00 	sub.w	sl, r3, r0
 8011bce:	fb9a f9fe 	sdiv	r9, sl, lr
 8011bd2:	fb0e a919 	mls	r9, lr, r9, sl
 8011bd6:	9318      	str	r3, [sp, #96]	; 0x60
 8011bd8:	fa0f f389 	sxth.w	r3, r9
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	da03      	bge.n	8011be8 <MotionDI_update+0x2838>
 8011be0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011be2:	4499      	add	r9, r3
 8011be4:	fa0f f389 	sxth.w	r3, r9
 8011be8:	9821      	ldr	r0, [sp, #132]	; 0x84
 8011bea:	f100 3aff 	add.w	sl, r0, #4294967295
 8011bee:	fa0f f08a 	sxth.w	r0, sl
 8011bf2:	2800      	cmp	r0, #0
 8011bf4:	fa1f fa8a 	uxth.w	sl, sl
 8011bf8:	db2a      	blt.n	8011c50 <MotionDI_update+0x28a0>
 8011bfa:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 8011bfe:	4418      	add	r0, r3
 8011c00:	ebaa 0a00 	sub.w	sl, sl, r0
 8011c04:	fb90 f3fe 	sdiv	r3, r0, lr
 8011c08:	fb0e 0313 	mls	r3, lr, r3, r0
 8011c0c:	b21b      	sxth	r3, r3
 8011c0e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011c12:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011c16:	3801      	subs	r0, #1
 8011c18:	f8b3 9062 	ldrh.w	r9, [r3, #98]	; 0x62
 8011c1c:	f8b3 8060 	ldrh.w	r8, [r3, #96]	; 0x60
 8011c20:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011c24:	fb19 f905 	smulbb	r9, r9, r5
 8011c28:	fb17 9808 	smlabb	r8, r7, r8, r9
 8011c2c:	fb1c 8303 	smlabb	r3, ip, r3, r8
 8011c30:	ee07 3a90 	vmov	s15, r3
 8011c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011c38:	eb0a 0300 	add.w	r3, sl, r0
 8011c3c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011c40:	eef4 7ae5 	vcmpe.f32	s15, s11
 8011c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c48:	f73f ad27 	bgt.w	801169a <MotionDI_update+0x22ea>
 8011c4c:	041b      	lsls	r3, r3, #16
 8011c4e:	d5d9      	bpl.n	8011c04 <MotionDI_update+0x2854>
 8011c50:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011c52:	fb93 f9fe 	sdiv	r9, r3, lr
 8011c56:	fb0e 3919 	mls	r9, lr, r9, r3
 8011c5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011c5c:	fa0f f089 	sxth.w	r0, r9
 8011c60:	eba3 0901 	sub.w	r9, r3, r1
 8011c64:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 8011c68:	9318      	str	r3, [sp, #96]	; 0x60
 8011c6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8011c6c:	901d      	str	r0, [sp, #116]	; 0x74
 8011c6e:	f103 0801 	add.w	r8, r3, #1
 8011c72:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011c74:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8011c78:	f109 30ff 	add.w	r0, r9, #4294967295
 8011c7c:	4699      	mov	r9, r3
 8011c7e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011c80:	eba9 0903 	sub.w	r9, r9, r3
 8011c84:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8011c86:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 8011c8a:	45f0      	cmp	r8, lr
 8011c8c:	fb03 9310 	mls	r3, r3, r0, r9
 8011c90:	bfa8      	it	ge
 8011c92:	46f0      	movge	r8, lr
 8011c94:	fa1f f088 	uxth.w	r0, r8
 8011c98:	65cb      	str	r3, [r1, #92]	; 0x5c
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	9021      	str	r0, [sp, #132]	; 0x84
 8011c9e:	f8a1 7060 	strh.w	r7, [r1, #96]	; 0x60
 8011ca2:	f8a1 5062 	strh.w	r5, [r1, #98]	; 0x62
 8011ca6:	f8a1 c064 	strh.w	ip, [r1, #100]	; 0x64
 8011caa:	931e      	str	r3, [sp, #120]	; 0x78
 8011cac:	e4f5      	b.n	801169a <MotionDI_update+0x22ea>
 8011cae:	ee6c ba0c 	vmul.f32	s23, s24, s24
 8011cb2:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 8011da8 <MotionDI_update+0x29f8>
 8011cb6:	ee2b 2a82 	vmul.f32	s4, s23, s4
 8011cba:	f7fd be2e 	b.w	800f91a <MotionDI_update+0x56a>
 8011cbe:	f64e 2360 	movw	r3, #60000	; 0xea60
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	bf14      	ite	ne
 8011cc6:	f5a2 436a 	subne.w	r3, r2, #59904	; 0xea00
 8011cca:	9b1f      	ldreq	r3, [sp, #124]	; 0x7c
 8011ccc:	f9b6 2058 	ldrsh.w	r2, [r6, #88]	; 0x58
 8011cd0:	921d      	str	r2, [sp, #116]	; 0x74
 8011cd2:	bf18      	it	ne
 8011cd4:	3b60      	subne	r3, #96	; 0x60
 8011cd6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8011cd8:	931c      	str	r3, [sp, #112]	; 0x70
 8011cda:	f8b6 3052 	ldrh.w	r3, [r6, #82]	; 0x52
 8011cde:	9324      	str	r3, [sp, #144]	; 0x90
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	f000 80b6 	beq.w	8011e52 <MotionDI_update+0x2aa2>
 8011ce6:	4619      	mov	r1, r3
 8011ce8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011cea:	911f      	str	r1, [sp, #124]	; 0x7c
 8011cec:	3301      	adds	r3, #1
 8011cee:	1a9a      	subs	r2, r3, r2
 8011cf0:	fb92 fcf1 	sdiv	ip, r2, r1
 8011cf4:	fb01 231c 	mls	r3, r1, ip, r2
 8011cf8:	b21a      	sxth	r2, r3
 8011cfa:	2a00      	cmp	r2, #0
 8011cfc:	bfbc      	itt	lt
 8011cfe:	18ca      	addlt	r2, r1, r3
 8011d00:	b212      	sxthlt	r2, r2
 8011d02:	9921      	ldr	r1, [sp, #132]	; 0x84
 8011d04:	b20b      	sxth	r3, r1
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	dd28      	ble.n	8011d5c <MotionDI_update+0x29ac>
 8011d0a:	f101 3cff 	add.w	ip, r1, #4294967295
 8011d0e:	460b      	mov	r3, r1
 8011d10:	fa1f fc8c 	uxth.w	ip, ip
 8011d14:	991c      	ldr	r1, [sp, #112]	; 0x70
 8011d16:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 8011d1a:	f10c 0c01 	add.w	ip, ip, #1
 8011d1e:	46aa      	mov	sl, r5
 8011d20:	1a40      	subs	r0, r0, r1
 8011d22:	4494      	add	ip, r2
 8011d24:	461d      	mov	r5, r3
 8011d26:	e002      	b.n	8011d2e <MotionDI_update+0x297e>
 8011d28:	3201      	adds	r2, #1
 8011d2a:	4594      	cmp	ip, r2
 8011d2c:	d011      	beq.n	8011d52 <MotionDI_update+0x29a2>
 8011d2e:	fb92 f3fe 	sdiv	r3, r2, lr
 8011d32:	fb0e 2313 	mls	r3, lr, r3, r2
 8011d36:	b21b      	sxth	r3, r3
 8011d38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011d3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011d40:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011d42:	1841      	adds	r1, r0, r1
 8011d44:	65d9      	str	r1, [r3, #92]	; 0x5c
 8011d46:	d5ef      	bpl.n	8011d28 <MotionDI_update+0x2978>
 8011d48:	2d00      	cmp	r5, #0
 8011d4a:	d0ed      	beq.n	8011d28 <MotionDI_update+0x2978>
 8011d4c:	3d01      	subs	r5, #1
 8011d4e:	b2ad      	uxth	r5, r5
 8011d50:	e7ea      	b.n	8011d28 <MotionDI_update+0x2978>
 8011d52:	462b      	mov	r3, r5
 8011d54:	9521      	str	r5, [sp, #132]	; 0x84
 8011d56:	f8a6 3050 	strh.w	r3, [r6, #80]	; 0x50
 8011d5a:	4655      	mov	r5, sl
 8011d5c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011d5e:	6573      	str	r3, [r6, #84]	; 0x54
 8011d60:	f7ff bbee 	b.w	8011540 <MotionDI_update+0x2190>
 8011d64:	9820      	ldr	r0, [sp, #128]	; 0x80
 8011d66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8011d68:	4680      	mov	r8, r0
 8011d6a:	981c      	ldr	r0, [sp, #112]	; 0x70
 8011d6c:	1a59      	subs	r1, r3, r1
 8011d6e:	f8d6 3464 	ldr.w	r3, [r6, #1124]	; 0x464
 8011d72:	3901      	subs	r1, #1
 8011d74:	eba8 0900 	sub.w	r9, r8, r0
 8011d78:	fb03 9111 	mls	r1, r3, r1, r9
 8011d7c:	e481      	b.n	8011682 <MotionDI_update+0x22d2>
 8011d7e:	4a0b      	ldr	r2, [pc, #44]	; (8011dac <MotionDI_update+0x29fc>)
 8011d80:	4293      	cmp	r3, r2
 8011d82:	d941      	bls.n	8011e08 <MotionDI_update+0x2a58>
 8011d84:	7d33      	ldrb	r3, [r6, #20]
 8011d86:	3b00      	subs	r3, #0
 8011d88:	bf18      	it	ne
 8011d8a:	2301      	movne	r3, #1
 8011d8c:	7533      	strb	r3, [r6, #20]
 8011d8e:	f7fd bdb1 	b.w	800f8f4 <MotionDI_update+0x544>
 8011d92:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 8011d96:	f8c6 800c 	str.w	r8, [r6, #12]
 8011d9a:	f8a6 81c8 	strh.w	r8, [r6, #456]	; 0x1c8
 8011d9e:	60b3      	str	r3, [r6, #8]
 8011da0:	f7ff bb9f 	b.w	80114e2 <MotionDI_update+0x2132>
 8011da4:	20002598 	.word	0x20002598
 8011da8:	3a03126f 	.word	0x3a03126f
 8011dac:	000d2f00 	.word	0x000d2f00
 8011db0:	00000000 	.word	0x00000000
 8011db4:	ab33      	add	r3, sp, #204	; 0xcc
 8011db6:	931e      	str	r3, [sp, #120]	; 0x78
 8011db8:	ab65      	add	r3, sp, #404	; 0x194
 8011dba:	931c      	str	r3, [sp, #112]	; 0x70
 8011dbc:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 8011dc6:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 8011dca:	60b3      	str	r3, [r6, #8]
 8011dcc:	2300      	movs	r3, #0
 8011dce:	60f3      	str	r3, [r6, #12]
 8011dd0:	f8a6 31c8 	strh.w	r3, [r6, #456]	; 0x1c8
 8011dd4:	7d33      	ldrb	r3, [r6, #20]
 8011dd6:	f7fe bf00 	b.w	8010bda <MotionDI_update+0x182a>
 8011dda:	ed5f 9a0b 	vldr	s19, [pc, #-44]	; 8011db0 <MotionDI_update+0x2a00>
 8011dde:	f7fd bec3 	b.w	800fb68 <MotionDI_update+0x7b8>
 8011de2:	2b05      	cmp	r3, #5
 8011de4:	f63f ac9f 	bhi.w	8011726 <MotionDI_update+0x2376>
 8011de8:	f8d6 31c4 	ldr.w	r3, [r6, #452]	; 0x1c4
 8011dec:	60b3      	str	r3, [r6, #8]
 8011dee:	2300      	movs	r3, #0
 8011df0:	f7ff bb74 	b.w	80114dc <MotionDI_update+0x212c>
 8011df4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011df6:	3301      	adds	r3, #1
 8011df8:	fb93 f9fe 	sdiv	r9, r3, lr
 8011dfc:	fb0e 3919 	mls	r9, lr, r9, r3
 8011e00:	9318      	str	r3, [sp, #96]	; 0x60
 8011e02:	fa0f f389 	sxth.w	r3, r9
 8011e06:	e6ef      	b.n	8011be8 <MotionDI_update+0x2838>
 8011e08:	4a2a      	ldr	r2, [pc, #168]	; (8011eb4 <MotionDI_update+0x2b04>)
 8011e0a:	4293      	cmp	r3, r2
 8011e0c:	f67f ae90 	bls.w	8011b30 <MotionDI_update+0x2780>
 8011e10:	7d33      	ldrb	r3, [r6, #20]
 8011e12:	2b02      	cmp	r3, #2
 8011e14:	bf28      	it	cs
 8011e16:	2302      	movcs	r3, #2
 8011e18:	7533      	strb	r3, [r6, #20]
 8011e1a:	f7fd bd6b 	b.w	800f8f4 <MotionDI_update+0x544>
 8011e1e:	4926      	ldr	r1, [pc, #152]	; (8011eb8 <MotionDI_update+0x2b08>)
 8011e20:	4608      	mov	r0, r1
 8011e22:	460a      	mov	r2, r1
 8011e24:	ed32 7a01 	vldmdb	r2!, {s14}
 8011e28:	edd1 7a00 	vldr	s15, [r1]
 8011e2c:	edd0 6a01 	vldr	s13, [r0, #4]
 8011e30:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8011e34:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011e38:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011e3c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8011e40:	3004      	adds	r0, #4
 8011e42:	edc4 6a47 	vstr	s13, [r4, #284]	; 0x11c
 8011e46:	ed84 7a45 	vstr	s14, [r4, #276]	; 0x114
 8011e4a:	edc4 7a46 	vstr	s15, [r4, #280]	; 0x118
 8011e4e:	f7fe be11 	b.w	8010a74 <MotionDI_update+0x16c4>
 8011e52:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011e54:	3301      	adds	r3, #1
 8011e56:	4611      	mov	r1, r2
 8011e58:	fb93 fcf2 	sdiv	ip, r3, r2
 8011e5c:	fb02 321c 	mls	r2, r2, ip, r3
 8011e60:	b212      	sxth	r2, r2
 8011e62:	911f      	str	r1, [sp, #124]	; 0x7c
 8011e64:	e74d      	b.n	8011d02 <MotionDI_update+0x2952>
 8011e66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8011e68:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8011e6a:	f103 0801 	add.w	r8, r3, #1
 8011e6e:	fb98 f3f2 	sdiv	r3, r8, r2
 8011e72:	fb02 8313 	mls	r3, r2, r3, r8
 8011e76:	fa0f fa83 	sxth.w	sl, r3
 8011e7a:	e484      	b.n	8011786 <MotionDI_update+0x23d6>
 8011e7c:	eef1 6a47 	vneg.f32	s13, s14
 8011e80:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e88:	bf44      	itt	mi
 8011e8a:	ee77 7a27 	vaddmi.f32	s15, s14, s15
 8011e8e:	edc6 7a08 	vstrmi	s15, [r6, #32]
 8011e92:	e41d      	b.n	80116d0 <MotionDI_update+0x2320>
 8011e94:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011e98:	edc6 7a07 	vstr	s15, [r6, #28]
 8011e9c:	e636      	b.n	8011b0c <MotionDI_update+0x275c>
 8011e9e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011ea2:	edc6 7a06 	vstr	s15, [r6, #24]
 8011ea6:	e619      	b.n	8011adc <MotionDI_update+0x272c>
 8011ea8:	eddf 7a04 	vldr	s15, [pc, #16]	; 8011ebc <MotionDI_update+0x2b0c>
 8011eac:	4639      	mov	r1, r7
 8011eae:	4686      	mov	lr, r0
 8011eb0:	e4ba      	b.n	8011828 <MotionDI_update+0x2478>
 8011eb2:	bf00      	nop
 8011eb4:	00069780 	.word	0x00069780
 8011eb8:	20001d74 	.word	0x20001d74
 8011ebc:	00000000 	.word	0x00000000
 8011ec0:	4bb8      	ldr	r3, [pc, #736]	; (80121a4 <MotionDI_update+0x2df4>)
 8011ec2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8011ec6:	ab33      	add	r3, sp, #204	; 0xcc
 8011ec8:	931e      	str	r3, [sp, #120]	; 0x78
 8011eca:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8011ece:	f8ad 10d0 	strh.w	r1, [sp, #208]	; 0xd0
 8011ed2:	af3f      	add	r7, sp, #252	; 0xfc
 8011ed4:	991e      	ldr	r1, [sp, #120]	; 0x78
 8011ed6:	971f      	str	r7, [sp, #124]	; 0x7c
 8011ed8:	6008      	str	r0, [r1, #0]
 8011eda:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8011ede:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8011ee0:	f88d c0d2 	strb.w	ip, [sp, #210]	; 0xd2
 8011ee4:	af65      	add	r7, sp, #404	; 0x194
 8011ee6:	f50d 7c8c 	add.w	ip, sp, #280	; 0x118
 8011eea:	2300      	movs	r3, #0
 8011eec:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
 8011ef0:	971c      	str	r7, [sp, #112]	; 0x70
 8011ef2:	4619      	mov	r1, r3
 8011ef4:	e9c8 3300 	strd	r3, r3, [r8]
 8011ef8:	e9c0 3300 	strd	r3, r3, [r0]
 8011efc:	e9c0 3302 	strd	r3, r3, [r0, #8]
 8011f00:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011f04:	f8c8 3008 	str.w	r3, [r8, #8]
 8011f08:	6183      	str	r3, [r0, #24]
 8011f0a:	e9dd 031c 	ldrd	r0, r3, [sp, #112]	; 0x70
 8011f0e:	2200      	movs	r2, #0
 8011f10:	f04f 5c7e 	mov.w	ip, #1065353216	; 0x3f800000
 8011f14:	605a      	str	r2, [r3, #4]
 8011f16:	609a      	str	r2, [r3, #8]
 8011f18:	60da      	str	r2, [r3, #12]
 8011f1a:	615a      	str	r2, [r3, #20]
 8011f1c:	619a      	str	r2, [r3, #24]
 8011f1e:	61da      	str	r2, [r3, #28]
 8011f20:	601a      	str	r2, [r3, #0]
 8011f22:	f8c3 c010 	str.w	ip, [r3, #16]
 8011f26:	2270      	movs	r2, #112	; 0x70
 8011f28:	f8c3 c020 	str.w	ip, [r3, #32]
 8011f2c:	f000 fe8a 	bl	8012c44 <memset>
 8011f30:	f8b6 2050 	ldrh.w	r2, [r6, #80]	; 0x50
 8011f34:	f8b6 1052 	ldrh.w	r1, [r6, #82]	; 0x52
 8011f38:	f9b6 3058 	ldrsh.w	r3, [r6, #88]	; 0x58
 8011f3c:	428a      	cmp	r2, r1
 8011f3e:	f103 0301 	add.w	r3, r3, #1
 8011f42:	f000 8616 	beq.w	8012b72 <MotionDI_update+0x37c2>
 8011f46:	1a9b      	subs	r3, r3, r2
 8011f48:	fb93 f0f1 	sdiv	r0, r3, r1
 8011f4c:	fb01 3310 	mls	r3, r1, r0, r3
 8011f50:	b21f      	sxth	r7, r3
 8011f52:	2f00      	cmp	r7, #0
 8011f54:	bfbc      	itt	lt
 8011f56:	185b      	addlt	r3, r3, r1
 8011f58:	b21f      	sxthlt	r7, r3
 8011f5a:	2a00      	cmp	r2, #0
 8011f5c:	f000 85ef 	beq.w	8012b3e <MotionDI_update+0x378e>
 8011f60:	eddf 6a91 	vldr	s13, [pc, #580]	; 80121a8 <MotionDI_update+0x2df8>
 8011f64:	2000      	movs	r0, #0
 8011f66:	eeb0 6a66 	vmov.f32	s12, s13
 8011f6a:	eef0 5a66 	vmov.f32	s11, s13
 8011f6e:	eb00 0c07 	add.w	ip, r0, r7
 8011f72:	fb9c f3f1 	sdiv	r3, ip, r1
 8011f76:	fb01 c313 	mls	r3, r1, r3, ip
 8011f7a:	b2db      	uxtb	r3, r3
 8011f7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011f80:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8011f84:	3001      	adds	r0, #1
 8011f86:	f9b3 c060 	ldrsh.w	ip, [r3, #96]	; 0x60
 8011f8a:	ee05 ca10 	vmov	s10, ip
 8011f8e:	f9b3 c062 	ldrsh.w	ip, [r3, #98]	; 0x62
 8011f92:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8011f96:	ee07 ca10 	vmov	s14, ip
 8011f9a:	ee07 3a90 	vmov	s15, r3
 8011f9e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8011fa2:	b2c3      	uxtb	r3, r0
 8011fa4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011fac:	429a      	cmp	r2, r3
 8011fae:	ee75 5a85 	vadd.f32	s11, s11, s10
 8011fb2:	ee36 6a07 	vadd.f32	s12, s12, s14
 8011fb6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011fba:	4618      	mov	r0, r3
 8011fbc:	d8d7      	bhi.n	8011f6e <MotionDI_update+0x2bbe>
 8011fbe:	ee07 2a10 	vmov	s14, r2
 8011fc2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011fc6:	eddf 7a78 	vldr	s15, [pc, #480]	; 80121a8 <MotionDI_update+0x2df8>
 8011fca:	ee86 aa07 	vdiv.f32	s20, s12, s14
 8011fce:	2000      	movs	r0, #0
 8011fd0:	ee86 9a87 	vdiv.f32	s18, s13, s14
 8011fd4:	eec5 aa87 	vdiv.f32	s21, s11, s14
 8011fd8:	eef0 3a67 	vmov.f32	s7, s15
 8011fdc:	eeb0 4a67 	vmov.f32	s8, s15
 8011fe0:	eef0 4a67 	vmov.f32	s9, s15
 8011fe4:	eeb0 5a67 	vmov.f32	s10, s15
 8011fe8:	eef0 5a67 	vmov.f32	s11, s15
 8011fec:	eb00 0c07 	add.w	ip, r0, r7
 8011ff0:	fb9c f3f1 	sdiv	r3, ip, r1
 8011ff4:	fb01 c313 	mls	r3, r1, r3, ip
 8011ff8:	b2db      	uxtb	r3, r3
 8011ffa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011ffe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012002:	3001      	adds	r0, #1
 8012004:	f9b3 c060 	ldrsh.w	ip, [r3, #96]	; 0x60
 8012008:	ee06 ca10 	vmov	s12, ip
 801200c:	f9b3 c062 	ldrsh.w	ip, [r3, #98]	; 0x62
 8012010:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 8012014:	ee06 ca90 	vmov	s13, ip
 8012018:	ee07 3a10 	vmov	s14, r3
 801201c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012020:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012024:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012028:	ee36 6a6a 	vsub.f32	s12, s12, s21
 801202c:	ee76 6aca 	vsub.f32	s13, s13, s20
 8012030:	ee37 7a49 	vsub.f32	s14, s14, s18
 8012034:	b2c3      	uxtb	r3, r0
 8012036:	429a      	cmp	r2, r3
 8012038:	eee6 5a06 	vfma.f32	s11, s12, s12
 801203c:	4618      	mov	r0, r3
 801203e:	eea6 5a26 	vfma.f32	s10, s12, s13
 8012042:	eea6 4aa6 	vfma.f32	s8, s13, s13
 8012046:	eee6 4a07 	vfma.f32	s9, s12, s14
 801204a:	eee6 3a87 	vfma.f32	s7, s13, s14
 801204e:	eee7 7a07 	vfma.f32	s15, s14, s14
 8012052:	d8cb      	bhi.n	8011fec <MotionDI_update+0x2c3c>
 8012054:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012056:	edc3 5a00 	vstr	s11, [r3]
 801205a:	ed83 5a01 	vstr	s10, [r3, #4]
 801205e:	edc3 4a02 	vstr	s9, [r3, #8]
 8012062:	ed83 4a03 	vstr	s8, [r3, #12]
 8012066:	edc3 3a04 	vstr	s7, [r3, #16]
 801206a:	edc3 7a05 	vstr	s15, [r3, #20]
 801206e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012070:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 8012074:	6819      	ldr	r1, [r3, #0]
 8012076:	68da      	ldr	r2, [r3, #12]
 8012078:	f8ca 1000 	str.w	r1, [sl]
 801207c:	4618      	mov	r0, r3
 801207e:	695b      	ldr	r3, [r3, #20]
 8012080:	f8ca 3020 	str.w	r3, [sl, #32]
 8012084:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8012086:	6841      	ldr	r1, [r0, #4]
 8012088:	691b      	ldr	r3, [r3, #16]
 801208a:	f8ca 2010 	str.w	r2, [sl, #16]
 801208e:	f8ca 1004 	str.w	r1, [sl, #4]
 8012092:	6882      	ldr	r2, [r0, #8]
 8012094:	f8ca 100c 	str.w	r1, [sl, #12]
 8012098:	4650      	mov	r0, sl
 801209a:	4641      	mov	r1, r8
 801209c:	f8ca 2008 	str.w	r2, [sl, #8]
 80120a0:	f8ca 2018 	str.w	r2, [sl, #24]
 80120a4:	f8ca 3014 	str.w	r3, [sl, #20]
 80120a8:	f8ca 301c 	str.w	r3, [sl, #28]
 80120ac:	f7f6 fb54 	bl	8008758 <st_accCal_MEMS_EIG3>
 80120b0:	edd8 7a01 	vldr	s15, [r8, #4]
 80120b4:	edd8 6a00 	vldr	s13, [r8]
 80120b8:	ed98 7a02 	vldr	s14, [r8, #8]
 80120bc:	eef0 7ae7 	vabs.f32	s15, s15
 80120c0:	eef0 6ae6 	vabs.f32	s13, s13
 80120c4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80120c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120cc:	eeb0 7ac7 	vabs.f32	s14, s14
 80120d0:	bfb4      	ite	lt
 80120d2:	eeb0 6a66 	vmovlt.f32	s12, s13
 80120d6:	eeb0 6a67 	vmovge.f32	s12, s15
 80120da:	eeb4 7ac6 	vcmpe.f32	s14, s12
 80120de:	bf88      	it	hi
 80120e0:	eef0 7a66 	vmovhi.f32	s15, s13
 80120e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80120ec:	bfa8      	it	ge
 80120ee:	eeb0 6a47 	vmovge.f32	s12, s14
 80120f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120f6:	bf88      	it	hi
 80120f8:	eef0 7a47 	vmovhi.f32	s15, s14
 80120fc:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8012100:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012104:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8012108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801210c:	f73f ae58 	bgt.w	8011dc0 <MotionDI_update+0x2a10>
 8012110:	eddf 7a25 	vldr	s15, [pc, #148]	; 80121a8 <MotionDI_update+0x2df8>
 8012114:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012116:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8012118:	f8b6 1050 	ldrh.w	r1, [r6, #80]	; 0x50
 801211c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
 8012120:	2200      	movs	r2, #0
 8012122:	e9c0 2200 	strd	r2, r2, [r0]
 8012126:	e9c0 2202 	strd	r2, r2, [r0, #8]
 801212a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
 801212e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 8012132:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
 8012136:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
 801213a:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
 801213e:	6102      	str	r2, [r0, #16]
 8012140:	6142      	str	r2, [r0, #20]
 8012142:	6182      	str	r2, [r0, #24]
 8012144:	2900      	cmp	r1, #0
 8012146:	f000 80be 	beq.w	80122c6 <MotionDI_update+0x2f16>
 801214a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801214c:	f8b6 c052 	ldrh.w	ip, [r6, #82]	; 0x52
 8012150:	edd3 fa00 	vldr	s31, [r3]
 8012154:	ed93 fa07 	vldr	s30, [r3, #28]
 8012158:	edd3 ea0d 	vldr	s29, [r3, #52]	; 0x34
 801215c:	edd3 ca01 	vldr	s25, [r3, #4]
 8012160:	ed93 ca02 	vldr	s24, [r3, #8]
 8012164:	edd3 ba08 	vldr	s23, [r3, #32]
 8012168:	ed93 ba03 	vldr	s22, [r3, #12]
 801216c:	ed93 0a04 	vldr	s0, [r3, #16]
 8012170:	edd3 0a05 	vldr	s1, [r3, #20]
 8012174:	ed93 1a09 	vldr	s2, [r3, #36]	; 0x24
 8012178:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801217c:	ed93 2a0b 	vldr	s4, [r3, #44]	; 0x2c
 8012180:	edd3 2a0e 	vldr	s5, [r3, #56]	; 0x38
 8012184:	ed93 3a0f 	vldr	s6, [r3, #60]	; 0x3c
 8012188:	edd3 3a10 	vldr	s7, [r3, #64]	; 0x40
 801218c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8012190:	eeb0 4a67 	vmov.f32	s8, s15
 8012194:	eeb0 da67 	vmov.f32	s26, s15
 8012198:	eef0 da67 	vmov.f32	s27, s15
 801219c:	eeb0 ea67 	vmov.f32	s28, s15
 80121a0:	4660      	mov	r0, ip
 80121a2:	e003      	b.n	80121ac <MotionDI_update+0x2dfc>
 80121a4:	08014ed4 	.word	0x08014ed4
 80121a8:	00000000 	.word	0x00000000
 80121ac:	eb02 0c07 	add.w	ip, r2, r7
 80121b0:	fb9c f3f0 	sdiv	r3, ip, r0
 80121b4:	fb00 c313 	mls	r3, r0, r3, ip
 80121b8:	b2db      	uxtb	r3, r3
 80121ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80121be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80121c2:	3201      	adds	r2, #1
 80121c4:	f9b3 c060 	ldrsh.w	ip, [r3, #96]	; 0x60
 80121c8:	ee06 ca10 	vmov	s12, ip
 80121cc:	f9b3 c062 	ldrsh.w	ip, [r3, #98]	; 0x62
 80121d0:	f9b3 3064 	ldrsh.w	r3, [r3, #100]	; 0x64
 80121d4:	ee06 ca90 	vmov	s13, ip
 80121d8:	ee07 3a10 	vmov	s14, r3
 80121dc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80121e0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80121e4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80121e8:	ee36 6a6a 	vsub.f32	s12, s12, s21
 80121ec:	ee37 7a49 	vsub.f32	s14, s14, s18
 80121f0:	ee76 6aca 	vsub.f32	s13, s13, s20
 80121f4:	ee66 4a06 	vmul.f32	s9, s12, s12
 80121f8:	ee26 5aa6 	vmul.f32	s10, s13, s13
 80121fc:	ee67 5a07 	vmul.f32	s11, s14, s14
 8012200:	eea6 ba24 	vfma.f32	s22, s12, s9
 8012204:	b2d3      	uxtb	r3, r2
 8012206:	4299      	cmp	r1, r3
 8012208:	eee7 0a24 	vfma.f32	s1, s14, s9
 801220c:	461a      	mov	r2, r3
 801220e:	eea6 1a05 	vfma.f32	s2, s12, s10
 8012212:	eea7 2a05 	vfma.f32	s4, s14, s10
 8012216:	eee4 faa4 	vfma.f32	s31, s9, s9
 801221a:	eea6 0aa4 	vfma.f32	s0, s13, s9
 801221e:	eea5 fa05 	vfma.f32	s30, s10, s10
 8012222:	eee6 1a85 	vfma.f32	s3, s13, s10
 8012226:	eee6 2a25 	vfma.f32	s5, s12, s11
 801222a:	eee7 3a25 	vfma.f32	s7, s14, s11
 801222e:	ee3e ea24 	vadd.f32	s28, s28, s9
 8012232:	ee7d da85 	vadd.f32	s27, s27, s10
 8012236:	ee66 4a26 	vmul.f32	s9, s12, s13
 801223a:	ee26 5a07 	vmul.f32	s10, s12, s14
 801223e:	ee26 6a87 	vmul.f32	s12, s13, s14
 8012242:	ed9d 7a20 	vldr	s14, [sp, #128]	; 0x80
 8012246:	ee37 7a05 	vadd.f32	s14, s14, s10
 801224a:	eee5 eaa5 	vfma.f32	s29, s11, s11
 801224e:	eea6 3aa5 	vfma.f32	s6, s13, s11
 8012252:	eee4 caa4 	vfma.f32	s25, s9, s9
 8012256:	eea5 ca05 	vfma.f32	s24, s10, s10
 801225a:	eee6 ba06 	vfma.f32	s23, s12, s12
 801225e:	ee3d da25 	vadd.f32	s26, s26, s11
 8012262:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8012266:	ee34 4a06 	vadd.f32	s8, s8, s12
 801226a:	ed8d 7a20 	vstr	s14, [sp, #128]	; 0x80
 801226e:	d89d      	bhi.n	80121ac <MotionDI_update+0x2dfc>
 8012270:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8012272:	edc3 fa00 	vstr	s31, [r3]
 8012276:	ed83 fa07 	vstr	s30, [r3, #28]
 801227a:	edc3 ea0d 	vstr	s29, [r3, #52]	; 0x34
 801227e:	ed83 ea12 	vstr	s28, [r3, #72]	; 0x48
 8012282:	edc3 da16 	vstr	s27, [r3, #88]	; 0x58
 8012286:	ed83 da19 	vstr	s26, [r3, #100]	; 0x64
 801228a:	edc3 ca01 	vstr	s25, [r3, #4]
 801228e:	ed83 ca02 	vstr	s24, [r3, #8]
 8012292:	edc3 ba08 	vstr	s23, [r3, #32]
 8012296:	ed83 ba03 	vstr	s22, [r3, #12]
 801229a:	ed83 0a04 	vstr	s0, [r3, #16]
 801229e:	edc3 0a05 	vstr	s1, [r3, #20]
 80122a2:	ed83 1a09 	vstr	s2, [r3, #36]	; 0x24
 80122a6:	edc3 1a0a 	vstr	s3, [r3, #40]	; 0x28
 80122aa:	ed83 2a0b 	vstr	s4, [r3, #44]	; 0x2c
 80122ae:	edc3 2a0e 	vstr	s5, [r3, #56]	; 0x38
 80122b2:	ed83 3a0f 	vstr	s6, [r3, #60]	; 0x3c
 80122b6:	edc3 3a10 	vstr	s7, [r3, #64]	; 0x40
 80122ba:	ed83 4a17 	vstr	s8, [r3, #92]	; 0x5c
 80122be:	ed83 7a14 	vstr	s14, [r3, #80]	; 0x50
 80122c2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
 80122c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80122c8:	f8cd a098 	str.w	sl, [sp, #152]	; 0x98
 80122cc:	4617      	mov	r7, r2
 80122ce:	ee07 1a90 	vmov	s15, r1
 80122d2:	2300      	movs	r3, #0
 80122d4:	f8d2 c048 	ldr.w	ip, [r2, #72]	; 0x48
 80122d8:	6d90      	ldr	r0, [r2, #88]	; 0x58
 80122da:	657b      	str	r3, [r7, #84]	; 0x54
 80122dc:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80122de:	663b      	str	r3, [r7, #96]	; 0x60
 80122e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80122e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80122e6:	e9cd 9523 	strd	r9, r5, [sp, #140]	; 0x8c
 80122ea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80122ec:	647a      	str	r2, [r7, #68]	; 0x44
 80122ee:	2201      	movs	r2, #1
 80122f0:	f8cd b09c 	str.w	fp, [sp, #156]	; 0x9c
 80122f4:	f8c7 c018 	str.w	ip, [r7, #24]
 80122f8:	6338      	str	r0, [r7, #48]	; 0x30
 80122fa:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
 80122fe:	2100      	movs	r1, #0
 8012300:	4692      	mov	sl, r2
 8012302:	469b      	mov	fp, r3
 8012304:	f10a 33ff 	add.w	r3, sl, #4294967295
 8012308:	fb0a f303 	mul.w	r3, sl, r3
 801230c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8012310:	f81b 2b01 	ldrb.w	r2, [fp], #1
 8012314:	9220      	str	r2, [sp, #128]	; 0x80
 8012316:	105b      	asrs	r3, r3, #1
 8012318:	425b      	negs	r3, r3
 801231a:	1c8f      	adds	r7, r1, #2
 801231c:	1ccd      	adds	r5, r1, #3
 801231e:	1d0a      	adds	r2, r1, #4
 8012320:	f101 0e05 	add.w	lr, r1, #5
 8012324:	eb07 0803 	add.w	r8, r7, r3
 8012328:	462f      	mov	r7, r5
 801232a:	4615      	mov	r5, r2
 801232c:	4672      	mov	r2, lr
 801232e:	441a      	add	r2, r3
 8012330:	9222      	str	r2, [sp, #136]	; 0x88
 8012332:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012334:	f101 0c01 	add.w	ip, r1, #1
 8012338:	18c8      	adds	r0, r1, r3
 801233a:	eb0c 0903 	add.w	r9, ip, r3
 801233e:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8012342:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012344:	981c      	ldr	r0, [sp, #112]	; 0x70
 8012346:	ed9c 7a00 	vldr	s14, [ip]
 801234a:	fb12 fe02 	smulbb	lr, r2, r2
 801234e:	ee07 ea90 	vmov	s15, lr
 8012352:	441d      	add	r5, r3
 8012354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012358:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 801235c:	9d22      	ldr	r5, [sp, #136]	; 0x88
 801235e:	9221      	str	r2, [sp, #132]	; 0x84
 8012360:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012364:	441f      	add	r7, r3
 8012366:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 801236a:	f1ba 0f07 	cmp.w	sl, #7
 801236e:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8012372:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8012376:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 801237a:	9222      	str	r2, [sp, #136]	; 0x88
 801237c:	edcc 7a00 	vstr	s15, [ip]
 8012380:	fa5f fe8a 	uxtb.w	lr, sl
 8012384:	d06e      	beq.n	8012464 <MotionDI_update+0x30b4>
 8012386:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8012388:	f89b c000 	ldrb.w	ip, [fp]
 801238c:	ed99 7a00 	vldr	s14, [r9]
 8012390:	fb1c fc05 	smulbb	ip, ip, r5
 8012394:	ee07 ca90 	vmov	s15, ip
 8012398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801239c:	f101 0c06 	add.w	ip, r1, #6
 80123a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80123a4:	4463      	add	r3, ip
 80123a6:	f1be 0f06 	cmp.w	lr, #6
 80123aa:	462a      	mov	r2, r5
 80123ac:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80123b0:	edc9 7a00 	vstr	s15, [r9]
 80123b4:	d056      	beq.n	8012464 <MotionDI_update+0x30b4>
 80123b6:	f89b c001 	ldrb.w	ip, [fp, #1]
 80123ba:	ed98 7a00 	vldr	s14, [r8]
 80123be:	fb1c f005 	smulbb	r0, ip, r5
 80123c2:	ee07 0a90 	vmov	s15, r0
 80123c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123ca:	f1be 0f05 	cmp.w	lr, #5
 80123ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80123d2:	edc8 7a00 	vstr	s15, [r8]
 80123d6:	d045      	beq.n	8012464 <MotionDI_update+0x30b4>
 80123d8:	f89b c002 	ldrb.w	ip, [fp, #2]
 80123dc:	ed97 7a00 	vldr	s14, [r7]
 80123e0:	fb1c f005 	smulbb	r0, ip, r5
 80123e4:	ee07 0a90 	vmov	s15, r0
 80123e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80123ec:	f1be 0f04 	cmp.w	lr, #4
 80123f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80123f4:	edc7 7a00 	vstr	s15, [r7]
 80123f8:	d034      	beq.n	8012464 <MotionDI_update+0x30b4>
 80123fa:	9821      	ldr	r0, [sp, #132]	; 0x84
 80123fc:	f89b 7003 	ldrb.w	r7, [fp, #3]
 8012400:	ed90 7a00 	vldr	s14, [r0]
 8012404:	fb17 f005 	smulbb	r0, r7, r5
 8012408:	ee07 0a90 	vmov	s15, r0
 801240c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012410:	9821      	ldr	r0, [sp, #132]	; 0x84
 8012412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012416:	f1be 0f03 	cmp.w	lr, #3
 801241a:	edc0 7a00 	vstr	s15, [r0]
 801241e:	d021      	beq.n	8012464 <MotionDI_update+0x30b4>
 8012420:	9822      	ldr	r0, [sp, #136]	; 0x88
 8012422:	f89b 5004 	ldrb.w	r5, [fp, #4]
 8012426:	ed90 7a00 	vldr	s14, [r0]
 801242a:	fb15 f002 	smulbb	r0, r5, r2
 801242e:	ee07 0a90 	vmov	s15, r0
 8012432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012436:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8012438:	ee67 7a87 	vmul.f32	s15, s15, s14
 801243c:	f1be 0f01 	cmp.w	lr, #1
 8012440:	edc2 7a00 	vstr	s15, [r2]
 8012444:	d10e      	bne.n	8012464 <MotionDI_update+0x30b4>
 8012446:	f89b 2005 	ldrb.w	r2, [fp, #5]
 801244a:	9820      	ldr	r0, [sp, #128]	; 0x80
 801244c:	ed93 7a00 	vldr	s14, [r3]
 8012450:	fb12 f200 	smulbb	r2, r2, r0
 8012454:	ee07 2a90 	vmov	s15, r2
 8012458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801245c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012460:	edc3 7a00 	vstr	s15, [r3]
 8012464:	f10a 0a01 	add.w	sl, sl, #1
 8012468:	f1ba 0f08 	cmp.w	sl, #8
 801246c:	f101 0108 	add.w	r1, r1, #8
 8012470:	f47f af48 	bne.w	8012304 <MotionDI_update+0x2f54>
 8012474:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012476:	e9dd 9523 	ldrd	r9, r5, [sp, #140]	; 0x8c
 801247a:	e9dd ab26 	ldrd	sl, fp, [sp, #152]	; 0x98
 801247e:	4613      	mov	r3, r2
 8012480:	edd3 6a00 	vldr	s13, [r3]
 8012484:	ed92 7a1b 	vldr	s14, [r2, #108]	; 0x6c
 8012488:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801248c:	ece3 7a01 	vstmia	r3!, {s15}
 8012490:	455b      	cmp	r3, fp
 8012492:	d1f5      	bne.n	8012480 <MotionDI_update+0x30d0>
 8012494:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8012496:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
 801249a:	4638      	mov	r0, r7
 801249c:	4641      	mov	r1, r8
 801249e:	f7f6 fa4d 	bl	800893c <st_accCal_MEMS_ellipsoidFit7>
 80124a2:	ed98 5a04 	vldr	s10, [r8, #16]
 80124a6:	ed98 3a01 	vldr	s6, [r8, #4]
 80124aa:	edd8 4a03 	vldr	s9, [r8, #12]
 80124ae:	ed97 6a07 	vldr	s12, [r7, #28]
 80124b2:	edd8 3a00 	vldr	s7, [r8]
 80124b6:	edd7 ca01 	vldr	s25, [r7, #4]
 80124ba:	edd8 5a05 	vldr	s11, [r8, #20]
 80124be:	ed98 4a02 	vldr	s8, [r8, #8]
 80124c2:	edd7 6a08 	vldr	s13, [r7, #32]
 80124c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80124ca:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80124ce:	ed97 1a03 	vldr	s2, [r7, #12]
 80124d2:	ed97 da00 	vldr	s26, [r7]
 80124d6:	edd8 2a06 	vldr	s5, [r8, #24]
 80124da:	edd7 1a04 	vldr	s3, [r7, #16]
 80124de:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 80124e2:	eef1 7a45 	vneg.f32	s15, s10
 80124e6:	eec7 ba83 	vdiv.f32	s23, s15, s6
 80124ea:	ee23 6a06 	vmul.f32	s12, s6, s12
 80124ee:	eef1 7a64 	vneg.f32	s15, s9
 80124f2:	ee87 caa3 	vdiv.f32	s24, s15, s7
 80124f6:	eea3 6aac 	vfma.f32	s12, s7, s25
 80124fa:	eef1 7a65 	vneg.f32	s15, s11
 80124fe:	eea4 6a26 	vfma.f32	s12, s8, s13
 8012502:	ee63 6a26 	vmul.f32	s13, s6, s13
 8012506:	ee87 ba84 	vdiv.f32	s22, s15, s8
 801250a:	eee3 6a80 	vfma.f32	s13, s7, s0
 801250e:	ee64 7a00 	vmul.f32	s15, s8, s0
 8012512:	eeb0 0a66 	vmov.f32	s0, s13
 8012516:	eee3 7a2c 	vfma.f32	s15, s6, s25
 801251a:	eef0 6a46 	vmov.f32	s13, s12
 801251e:	eee4 6a87 	vfma.f32	s13, s9, s14
 8012522:	ee23 7a07 	vmul.f32	s14, s6, s14
 8012526:	ee25 2a2b 	vmul.f32	s4, s10, s23
 801252a:	eee3 7a8d 	vfma.f32	s15, s7, s26
 801252e:	eea3 7a81 	vfma.f32	s14, s7, s2
 8012532:	eea4 2a8c 	vfma.f32	s4, s9, s24
 8012536:	eee4 7a81 	vfma.f32	s15, s9, s2
 801253a:	eeb0 1a47 	vmov.f32	s2, s14
 801253e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8012542:	ed97 6a0c 	vldr	s12, [r7, #48]	; 0x30
 8012546:	edd7 ca0b 	vldr	s25, [r7, #44]	; 0x2c
 801254a:	ee32 2a82 	vadd.f32	s4, s5, s4
 801254e:	eee5 6a07 	vfma.f32	s13, s10, s14
 8012552:	ee23 7a07 	vmul.f32	s14, s6, s14
 8012556:	eea5 2a8b 	vfma.f32	s4, s11, s22
 801255a:	eea3 7aa1 	vfma.f32	s14, s7, s3
 801255e:	eee5 7a21 	vfma.f32	s15, s10, s3
 8012562:	eeb0 2ac2 	vabs.f32	s4, s4
 8012566:	eeb1 dac2 	vsqrt.f32	s26, s4
 801256a:	eef0 1a47 	vmov.f32	s3, s14
 801256e:	ed97 2a05 	vldr	s4, [r7, #20]
 8012572:	ee22 7a86 	vmul.f32	s14, s5, s12
 8012576:	eee5 7a82 	vfma.f32	s15, s11, s4
 801257a:	eea5 7aac 	vfma.f32	s14, s11, s25
 801257e:	eea4 0a20 	vfma.f32	s0, s8, s1
 8012582:	edd7 0a06 	vldr	s1, [r7, #24]
 8012586:	ee37 7a26 	vadd.f32	s14, s14, s13
 801258a:	eee2 7aa0 	vfma.f32	s15, s5, s1
 801258e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8012592:	ee27 7a03 	vmul.f32	s14, s14, s6
 8012596:	eea4 0aa6 	vfma.f32	s0, s9, s13
 801259a:	eea4 1a26 	vfma.f32	s2, s8, s13
 801259e:	ee63 6a2c 	vmul.f32	s13, s6, s25
 80125a2:	eea3 7aa7 	vfma.f32	s14, s7, s15
 80125a6:	eee3 6a82 	vfma.f32	s13, s7, s4
 80125aa:	edd7 ca11 	vldr	s25, [r7, #68]	; 0x44
 80125ae:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80125b2:	ed97 2a12 	vldr	s4, [r7, #72]	; 0x48
 80125b6:	ee23 6a06 	vmul.f32	s12, s6, s12
 80125ba:	eea5 0a27 	vfma.f32	s0, s10, s15
 80125be:	eea3 6aa0 	vfma.f32	s12, s7, s1
 80125c2:	eee4 1a27 	vfma.f32	s3, s8, s15
 80125c6:	eef0 0a66 	vmov.f32	s1, s13
 80125ca:	ee62 7aac 	vmul.f32	s15, s5, s25
 80125ce:	eef0 6a47 	vmov.f32	s13, s14
 80125d2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80125d6:	eee5 7a87 	vfma.f32	s15, s11, s14
 80125da:	eea4 1a82 	vfma.f32	s2, s9, s4
 80125de:	eee4 0a07 	vfma.f32	s1, s8, s14
 80125e2:	ee77 7a80 	vadd.f32	s15, s15, s0
 80125e6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80125ea:	ed97 0a15 	vldr	s0, [r7, #84]	; 0x54
 80125ee:	eeb0 2a41 	vmov.f32	s4, s2
 80125f2:	eea5 2a07 	vfma.f32	s4, s10, s14
 80125f6:	eee4 1a87 	vfma.f32	s3, s9, s14
 80125fa:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 80125fe:	ee22 7a80 	vmul.f32	s14, s5, s0
 8012602:	eea4 6a2c 	vfma.f32	s12, s8, s25
 8012606:	eea5 7a81 	vfma.f32	s14, s11, s2
 801260a:	eee4 6a27 	vfma.f32	s13, s8, s15
 801260e:	eef1 dac3 	vsqrt.f32	s27, s6
 8012612:	eeb1 3ae3 	vsqrt.f32	s6, s7
 8012616:	eef1 3ac4 	vsqrt.f32	s7, s8
 801261a:	ee37 4a02 	vadd.f32	s8, s14, s4
 801261e:	eef0 7a46 	vmov.f32	s15, s12
 8012622:	eee4 7a80 	vfma.f32	s15, s9, s0
 8012626:	eee4 6a84 	vfma.f32	s13, s9, s8
 801262a:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 801262e:	ed97 4a16 	vldr	s8, [r7, #88]	; 0x58
 8012632:	eeb0 2a60 	vmov.f32	s4, s1
 8012636:	eea4 2a81 	vfma.f32	s4, s9, s2
 801263a:	eee5 1a04 	vfma.f32	s3, s10, s8
 801263e:	edd7 4a17 	vldr	s9, [r7, #92]	; 0x5c
 8012642:	ed97 1a1a 	vldr	s2, [r7, #104]	; 0x68
 8012646:	ee22 4a80 	vmul.f32	s8, s5, s0
 801264a:	ee69 ca8d 	vmul.f32	s25, s19, s26
 801264e:	eea5 4aa4 	vfma.f32	s8, s11, s9
 8012652:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012656:	ee34 4a21 	vadd.f32	s8, s8, s3
 801265a:	ee87 6a2c 	vdiv.f32	s12, s14, s25
 801265e:	eea5 2a24 	vfma.f32	s4, s10, s9
 8012662:	eee5 7a00 	vfma.f32	s15, s10, s0
 8012666:	eee5 6a04 	vfma.f32	s13, s10, s8
 801266a:	ee62 4a81 	vmul.f32	s9, s5, s2
 801266e:	ed97 5a19 	vldr	s10, [r7, #100]	; 0x64
 8012672:	eee5 4a85 	vfma.f32	s9, s11, s10
 8012676:	eee5 7a81 	vfma.f32	s15, s11, s2
 801267a:	ee74 4a82 	vadd.f32	s9, s9, s4
 801267e:	ed97 5a1b 	vldr	s10, [r7, #108]	; 0x6c
 8012682:	eee5 6aa4 	vfma.f32	s13, s11, s9
 8012686:	eee2 7a85 	vfma.f32	s15, s5, s10
 801268a:	ee66 da2d 	vmul.f32	s27, s12, s27
 801268e:	eee2 6aa7 	vfma.f32	s13, s5, s15
 8012692:	ee26 ea23 	vmul.f32	s28, s12, s7
 8012696:	ee26 6a03 	vmul.f32	s12, s12, s6
 801269a:	eef4 dac7 	vcmpe.f32	s27, s14
 801269e:	eef0 5a66 	vmov.f32	s11, s13
 80126a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80126a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126aa:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80126ae:	bf4c      	ite	mi
 80126b0:	ee37 7a6d 	vsubmi.f32	s14, s14, s27
 80126b4:	ee3d 7ac7 	vsubpl.f32	s14, s27, s14
 80126b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126bc:	bf4c      	ite	mi
 80126be:	ee76 6ac6 	vsubmi.f32	s13, s13, s12
 80126c2:	ee76 6a66 	vsubpl.f32	s13, s12, s13
 80126c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80126ca:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80126ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126d2:	eeb4 eae7 	vcmpe.f32	s28, s15
 80126d6:	bfb8      	it	lt
 80126d8:	eeb0 7a66 	vmovlt.f32	s14, s13
 80126dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126e0:	bf4c      	ite	mi
 80126e2:	ee77 7ace 	vsubmi.f32	s15, s15, s28
 80126e6:	ee7e 7a67 	vsubpl.f32	s15, s28, s15
 80126ea:	eddf 6af2 	vldr	s13, [pc, #968]	; 8012ab4 <MotionDI_update+0x3704>
 80126ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80126f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126f6:	bfa8      	it	ge
 80126f8:	eef0 7a47 	vmovge.f32	s15, s14
 80126fc:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012704:	f57f ab5c 	bpl.w	8011dc0 <MotionDI_update+0x2a10>
 8012708:	ee3e 7a2d 	vadd.f32	s14, s28, s27
 801270c:	eddf 4aea 	vldr	s9, [pc, #936]	; 8012ab8 <MotionDI_update+0x3708>
 8012710:	eddf 6aea 	vldr	s13, [pc, #936]	; 8012abc <MotionDI_update+0x370c>
 8012714:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012718:	eeb0 4a4e 	vmov.f32	s8, s28
 801271c:	eea7 4a64 	vfms.f32	s8, s14, s9
 8012720:	eeb0 7ac4 	vabs.f32	s14, s8
 8012724:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801272c:	bfa8      	it	ge
 801272e:	eef0 7a47 	vmovge.f32	s15, s14
 8012732:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801273a:	f57f ab41 	bpl.w	8011dc0 <MotionDI_update+0x2a10>
 801273e:	eef0 7ae5 	vabs.f32	s15, s11
 8012742:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8012746:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 801274a:	eef1 5ac7 	vsqrt.f32	s11, s14
 801274e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8012752:	eef1 7ae5 	vsqrt.f32	s15, s11
 8012756:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801275a:	eec7 ca8d 	vdiv.f32	s25, s15, s26
 801275e:	eef4 cac7 	vcmpe.f32	s25, s14
 8012762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012766:	f73f ab2b 	bgt.w	8011dc0 <MotionDI_update+0x2a10>
 801276a:	eddf ead5 	vldr	s29, [pc, #852]	; 8012ac0 <MotionDI_update+0x3710>
 801276e:	ed9f dad5 	vldr	s26, [pc, #852]	; 8012ac4 <MotionDI_update+0x3714>
 8012772:	ee26 0a2e 	vmul.f32	s0, s12, s29
 8012776:	f000 fb33 	bl	8012de0 <roundf>
 801277a:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 801277c:	ee60 7a0d 	vmul.f32	s15, s0, s26
 8012780:	ee2d 0aae 	vmul.f32	s0, s27, s29
 8012784:	edc7 7a00 	vstr	s15, [r7]
 8012788:	f000 fb2a 	bl	8012de0 <roundf>
 801278c:	ee60 7a0d 	vmul.f32	s15, s0, s26
 8012790:	ee2e 0a2e 	vmul.f32	s0, s28, s29
 8012794:	edc7 7a04 	vstr	s15, [r7, #16]
 8012798:	f000 fb22 	bl	8012de0 <roundf>
 801279c:	ee60 7a0d 	vmul.f32	s15, s0, s26
 80127a0:	ee3c 0a2a 	vadd.f32	s0, s24, s21
 80127a4:	edc7 7a08 	vstr	s15, [r7, #32]
 80127a8:	971d      	str	r7, [sp, #116]	; 0x74
 80127aa:	f000 fb19 	bl	8012de0 <roundf>
 80127ae:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80127b2:	ee3b 0a8a 	vadd.f32	s0, s23, s20
 80127b6:	ee17 3a90 	vmov	r3, s15
 80127ba:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
 80127be:	f000 fb0f 	bl	8012de0 <roundf>
 80127c2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80127c6:	ee3b 0a09 	vadd.f32	s0, s22, s18
 80127ca:	ee17 3a90 	vmov	r3, s15
 80127ce:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
 80127d2:	f000 fb05 	bl	8012de0 <roundf>
 80127d6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80127da:	f10d 03aa 	add.w	r3, sp, #170	; 0xaa
 80127de:	ee17 7a90 	vmov	r7, s15
 80127e2:	9300      	str	r3, [sp, #0]
 80127e4:	991d      	ldr	r1, [sp, #116]	; 0x74
 80127e6:	edc6 8a04 	vstr	s17, [r6, #16]
 80127ea:	aa2b      	add	r2, sp, #172	; 0xac
 80127ec:	ab2c      	add	r3, sp, #176	; 0xb0
 80127ee:	eeb0 0a69 	vmov.f32	s0, s19
 80127f2:	a82f      	add	r0, sp, #188	; 0xbc
 80127f4:	f8ad 70c0 	strh.w	r7, [sp, #192]	; 0xc0
 80127f8:	f7f7 fd08 	bl	800a20c <getAccStats.constprop.0>
 80127fc:	f8b6 1050 	ldrh.w	r1, [r6, #80]	; 0x50
 8012800:	f89d 20aa 	ldrb.w	r2, [sp, #170]	; 0xaa
 8012804:	eddf 6ab0 	vldr	s13, [pc, #704]	; 8012ac8 <MotionDI_update+0x3718>
 8012808:	231e      	movs	r3, #30
 801280a:	fb03 f301 	mul.w	r3, r3, r1
 801280e:	ee07 3a90 	vmov	s15, r3
 8012812:	ee07 2a10 	vmov	s14, r2
 8012816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801281a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801281e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012822:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801282a:	f73f aac9 	bgt.w	8011dc0 <MotionDI_update+0x2a10>
 801282e:	eddd 3a2c 	vldr	s7, [sp, #176]	; 0xb0
 8012832:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8012acc <MotionDI_update+0x371c>
 8012836:	eef4 3ae7 	vcmpe.f32	s7, s15
 801283a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801283e:	f73f aabf 	bgt.w	8011dc0 <MotionDI_update+0x2a10>
 8012842:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8012846:	eef4 3ae7 	vcmpe.f32	s7, s15
 801284a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801284e:	dd04      	ble.n	801285a <MotionDI_update+0x34aa>
 8012850:	f89d 30ab 	ldrb.w	r3, [sp, #171]	; 0xab
 8012854:	4293      	cmp	r3, r2
 8012856:	f67f aab3 	bls.w	8011dc0 <MotionDI_update+0x2a10>
 801285a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801285c:	2b00      	cmp	r3, #0
 801285e:	d170      	bne.n	8012942 <MotionDI_update+0x3592>
 8012860:	f9bd 20bc 	ldrsh.w	r2, [sp, #188]	; 0xbc
 8012864:	f896 346c 	ldrb.w	r3, [r6, #1132]	; 0x46c
 8012868:	f9bd 10c0 	ldrsh.w	r1, [sp, #192]	; 0xc0
 801286c:	ed96 1a06 	vldr	s2, [r6, #24]
 8012870:	edd6 1a07 	vldr	s3, [r6, #28]
 8012874:	eddf 2a91 	vldr	s5, [pc, #580]	; 8012abc <MotionDI_update+0x370c>
 8012878:	ed96 2a08 	vldr	s4, [r6, #32]
 801287c:	ee06 2a90 	vmov	s13, r2
 8012880:	f9bd 20be 	ldrsh.w	r2, [sp, #190]	; 0xbe
 8012884:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8012888:	ee07 2a10 	vmov	s14, r2
 801288c:	2b01      	cmp	r3, #1
 801288e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012892:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8012896:	bf18      	it	ne
 8012898:	eef0 5a46 	vmovne.f32	s11, s12
 801289c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801289e:	eeb1 3a04 	vmov.f32	s6, #20	; 0x40a00000  5.0
 80128a2:	ee33 3a65 	vsub.f32	s6, s6, s11
 80128a6:	ee07 1a90 	vmov	s15, r1
 80128aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80128ae:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80128b2:	ed92 4a00 	vldr	s8, [r2]
 80128b6:	edd2 4a04 	vldr	s9, [r2, #16]
 80128ba:	ed92 5a08 	vldr	s10, [r2, #32]
 80128be:	eee1 6a03 	vfma.f32	s13, s2, s6
 80128c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80128c6:	ee27 7a25 	vmul.f32	s14, s14, s11
 80128ca:	ee34 4a46 	vsub.f32	s8, s8, s12
 80128ce:	eea3 7a21 	vfma.f32	s14, s6, s3
 80128d2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80128d6:	ee24 4a22 	vmul.f32	s8, s8, s5
 80128da:	eee3 7a02 	vfma.f32	s15, s6, s4
 80128de:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80128e2:	eeb0 3a46 	vmov.f32	s6, s12
 80128e6:	eea5 3a84 	vfma.f32	s6, s11, s8
 80128ea:	ee74 4ac6 	vsub.f32	s9, s9, s12
 80128ee:	ee35 5a46 	vsub.f32	s10, s10, s12
 80128f2:	ee27 7a22 	vmul.f32	s14, s14, s5
 80128f6:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80128fa:	ee64 4aa2 	vmul.f32	s9, s9, s5
 80128fe:	ee16 3a90 	vmov	r3, s13
 8012902:	ee25 5a22 	vmul.f32	s10, s10, s5
 8012906:	ee67 7aa2 	vmul.f32	s15, s15, s5
 801290a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 801290e:	eeb0 4a43 	vmov.f32	s8, s6
 8012912:	eeb0 3a46 	vmov.f32	s6, s12
 8012916:	eea4 3aa5 	vfma.f32	s6, s9, s11
 801291a:	f8ad 30bc 	strh.w	r3, [sp, #188]	; 0xbc
 801291e:	eea5 6a25 	vfma.f32	s12, s10, s11
 8012922:	ee17 3a10 	vmov	r3, s14
 8012926:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801292a:	f8ad 30be 	strh.w	r3, [sp, #190]	; 0xbe
 801292e:	ee17 3a90 	vmov	r3, s15
 8012932:	ed82 4a00 	vstr	s8, [r2]
 8012936:	f8ad 30c0 	strh.w	r3, [sp, #192]	; 0xc0
 801293a:	ed82 3a04 	vstr	s6, [r2, #16]
 801293e:	ed82 6a08 	vstr	s12, [r2, #32]
 8012942:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012946:	ee77 caec 	vsub.f32	s25, s15, s25
 801294a:	f9bd 30bc 	ldrsh.w	r3, [sp, #188]	; 0xbc
 801294e:	eddf 5a60 	vldr	s11, [pc, #384]	; 8012ad0 <MotionDI_update+0x3720>
 8012952:	9f18      	ldr	r7, [sp, #96]	; 0x60
 8012954:	ee83 6aac 	vdiv.f32	s12, s7, s25
 8012958:	ee06 3a90 	vmov	s13, r3
 801295c:	f9bd 30be 	ldrsh.w	r3, [sp, #190]	; 0xbe
 8012960:	ee07 3a10 	vmov	s14, r3
 8012964:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8012968:	ee07 3a90 	vmov	s15, r3
 801296c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801296e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8012972:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801297a:	eeb4 6ae5 	vcmpe.f32	s12, s11
 801297e:	6818      	ldr	r0, [r3, #0]
 8012980:	6919      	ldr	r1, [r3, #16]
 8012982:	f8d3 c020 	ldr.w	ip, [r3, #32]
 8012986:	edc7 6a01 	vstr	s13, [r7, #4]
 801298a:	f240 1303 	movw	r3, #259	; 0x103
 801298e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012992:	ed87 7a02 	vstr	s14, [r7, #8]
 8012996:	edc7 7a03 	vstr	s15, [r7, #12]
 801299a:	6138      	str	r0, [r7, #16]
 801299c:	6239      	str	r1, [r7, #32]
 801299e:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 80129a2:	803b      	strh	r3, [r7, #0]
 80129a4:	f340 80ad 	ble.w	8012b02 <MotionDI_update+0x3752>
 80129a8:	2302      	movs	r3, #2
 80129aa:	703b      	strb	r3, [r7, #0]
 80129ac:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 80129ae:	2200      	movs	r2, #0
 80129b0:	f886 204c 	strb.w	r2, [r6, #76]	; 0x4c
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	f43e afca 	beq.w	801194e <MotionDI_update+0x259e>
 80129ba:	7d32      	ldrb	r2, [r6, #20]
 80129bc:	2a03      	cmp	r2, #3
 80129be:	f47e afc6 	bne.w	801194e <MotionDI_update+0x259e>
 80129c2:	ee07 3a90 	vmov	s15, r3
 80129c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80129ca:	eddf 6a42 	vldr	s13, [pc, #264]	; 8012ad4 <MotionDI_update+0x3724>
 80129ce:	ee38 6a67 	vsub.f32	s12, s16, s15
 80129d2:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80129d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129da:	f100 808f 	bmi.w	8012afc <MotionDI_update+0x374c>
 80129de:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8012ad8 <MotionDI_update+0x3728>
 80129e2:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80129e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ea:	f140 8096 	bpl.w	8012b1a <MotionDI_update+0x376a>
 80129ee:	ee36 7ac8 	vsub.f32	s14, s13, s16
 80129f2:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8012adc <MotionDI_update+0x372c>
 80129f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80129fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80129fe:	eee7 7a26 	vfma.f32	s15, s14, s13
 8012a02:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8012a04:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8012a08:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012a0c:	ed9f 8a34 	vldr	s16, [pc, #208]	; 8012ae0 <MotionDI_update+0x3730>
 8012a10:	ed93 7a04 	vldr	s14, [r3, #16]
 8012a14:	ed96 6a09 	vldr	s12, [r6, #36]	; 0x24
 8012a18:	ed93 0a01 	vldr	s0, [r3, #4]
 8012a1c:	edd6 6a06 	vldr	s13, [r6, #24]
 8012a20:	eef4 7ac8 	vcmpe.f32	s15, s16
 8012a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a28:	bfa8      	it	ge
 8012a2a:	eeb0 8a67 	vmovge.f32	s16, s15
 8012a2e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8012a32:	ee78 8ac8 	vsub.f32	s17, s17, s16
 8012a36:	461f      	mov	r7, r3
 8012a38:	ee68 7a87 	vmul.f32	s15, s17, s14
 8012a3c:	ee28 0a80 	vmul.f32	s0, s17, s0
 8012a40:	eee8 7a06 	vfma.f32	s15, s16, s12
 8012a44:	eea8 0a26 	vfma.f32	s0, s16, s13
 8012a48:	edc6 7a09 	vstr	s15, [r6, #36]	; 0x24
 8012a4c:	f000 f9c8 	bl	8012de0 <roundf>
 8012a50:	edd7 7a08 	vldr	s15, [r7, #32]
 8012a54:	ed97 7a02 	vldr	s14, [r7, #8]
 8012a58:	ed96 6a0d 	vldr	s12, [r6, #52]	; 0x34
 8012a5c:	edd6 6a07 	vldr	s13, [r6, #28]
 8012a60:	ed86 0a06 	vstr	s0, [r6, #24]
 8012a64:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8012a68:	ee28 7a87 	vmul.f32	s14, s17, s14
 8012a6c:	eee8 7a06 	vfma.f32	s15, s16, s12
 8012a70:	eea8 7a26 	vfma.f32	s14, s16, s13
 8012a74:	edc6 7a0d 	vstr	s15, [r6, #52]	; 0x34
 8012a78:	eeb0 0a47 	vmov.f32	s0, s14
 8012a7c:	f000 f9b0 	bl	8012de0 <roundf>
 8012a80:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8012a84:	edd6 6a11 	vldr	s13, [r6, #68]	; 0x44
 8012a88:	ed97 6a03 	vldr	s12, [r7, #12]
 8012a8c:	ed96 7a08 	vldr	s14, [r6, #32]
 8012a90:	ed86 0a07 	vstr	s0, [r6, #28]
 8012a94:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8012a98:	ee28 0a86 	vmul.f32	s0, s17, s12
 8012a9c:	eee8 7a26 	vfma.f32	s15, s16, s13
 8012aa0:	eea8 0a07 	vfma.f32	s0, s16, s14
 8012aa4:	edc6 7a11 	vstr	s15, [r6, #68]	; 0x44
 8012aa8:	f000 f99a 	bl	8012de0 <roundf>
 8012aac:	ed86 0a08 	vstr	s0, [r6, #32]
 8012ab0:	e022      	b.n	8012af8 <MotionDI_update+0x3748>
 8012ab2:	bf00      	nop
 8012ab4:	3e99999a 	.word	0x3e99999a
 8012ab8:	3eaaaaab 	.word	0x3eaaaaab
 8012abc:	3e4ccccd 	.word	0x3e4ccccd
 8012ac0:	49742400 	.word	0x49742400
 8012ac4:	358637bd 	.word	0x358637bd
 8012ac8:	3c23d70a 	.word	0x3c23d70a
 8012acc:	3e19999a 	.word	0x3e19999a
 8012ad0:	3d75c28f 	.word	0x3d75c28f
 8012ad4:	42f00000 	.word	0x42f00000
 8012ad8:	45e10000 	.word	0x45e10000
 8012adc:	38941a9d 	.word	0x38941a9d
 8012ae0:	00000000 	.word	0x00000000
 8012ae4:	3df5c28f 	.word	0x3df5c28f
 8012ae8:	47a8c000 	.word	0x47a8c000
 8012aec:	367e3344 	.word	0x367e3344
 8012af0:	7fc00000 	.word	0x7fc00000
 8012af4:	3dcccccd 	.word	0x3dcccccd
 8012af8:	f7fe bf38 	b.w	801196c <MotionDI_update+0x25bc>
 8012afc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8012b00:	e77f      	b.n	8012a02 <MotionDI_update+0x3652>
 8012b02:	ed5f 7a08 	vldr	s15, [pc, #-32]	; 8012ae4 <MotionDI_update+0x3734>
 8012b06:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8012b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b0e:	f77f af4d 	ble.w	80129ac <MotionDI_update+0x35fc>
 8012b12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012b14:	2301      	movs	r3, #1
 8012b16:	7013      	strb	r3, [r2, #0]
 8012b18:	e748      	b.n	80129ac <MotionDI_update+0x35fc>
 8012b1a:	ed5f 6a0d 	vldr	s13, [pc, #-52]	; 8012ae8 <MotionDI_update+0x3738>
 8012b1e:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8012b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b26:	d52b      	bpl.n	8012b80 <MotionDI_update+0x37d0>
 8012b28:	ee37 7a48 	vsub.f32	s14, s14, s16
 8012b2c:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 8012aec <MotionDI_update+0x373c>
 8012b30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b34:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012b38:	eee7 7a26 	vfma.f32	s15, s14, s13
 8012b3c:	e761      	b.n	8012a02 <MotionDI_update+0x3652>
 8012b3e:	ed1f 9a14 	vldr	s18, [pc, #-80]	; 8012af0 <MotionDI_update+0x3740>
 8012b42:	eeb0 aa49 	vmov.f32	s20, s18
 8012b46:	eef0 aa49 	vmov.f32	s21, s18
 8012b4a:	f7ff ba90 	b.w	801206e <MotionDI_update+0x2cbe>
 8012b4e:	aa33      	add	r2, sp, #204	; 0xcc
 8012b50:	921e      	str	r2, [sp, #120]	; 0x78
 8012b52:	aa65      	add	r2, sp, #404	; 0x194
 8012b54:	921c      	str	r2, [sp, #112]	; 0x70
 8012b56:	e734      	b.n	80129c2 <MotionDI_update+0x3612>
 8012b58:	2300      	movs	r3, #0
 8012b5a:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 8012b5e:	ab33      	add	r3, sp, #204	; 0xcc
 8012b60:	931e      	str	r3, [sp, #120]	; 0x78
 8012b62:	ab65      	add	r3, sp, #404	; 0x194
 8012b64:	edc6 8a04 	vstr	s17, [r6, #16]
 8012b68:	931c      	str	r3, [sp, #112]	; 0x70
 8012b6a:	f50d 7a9e 	add.w	sl, sp, #316	; 0x13c
 8012b6e:	f7ff b92a 	b.w	8011dc6 <MotionDI_update+0x2a16>
 8012b72:	fb93 f7f2 	sdiv	r7, r3, r2
 8012b76:	fb02 3317 	mls	r3, r2, r7, r3
 8012b7a:	b21f      	sxth	r7, r3
 8012b7c:	f7ff b9ed 	b.w	8011f5a <MotionDI_update+0x2baa>
 8012b80:	ed5f 7a24 	vldr	s15, [pc, #-144]	; 8012af4 <MotionDI_update+0x3744>
 8012b84:	e73d      	b.n	8012a02 <MotionDI_update+0x3652>
 8012b86:	bf00      	nop

08012b88 <MotionDI_GetLibVersion>:
 8012b88:	4b10      	ldr	r3, [pc, #64]	; (8012bcc <MotionDI_GetLibVersion+0x44>)
 8012b8a:	f893 3644 	ldrb.w	r3, [r3, #1604]	; 0x644
 8012b8e:	b90b      	cbnz	r3, 8012b94 <MotionDI_GetLibVersion+0xc>
 8012b90:	4618      	mov	r0, r3
 8012b92:	4770      	bx	lr
 8012b94:	b470      	push	{r4, r5, r6}
 8012b96:	4e0e      	ldr	r6, [pc, #56]	; (8012bd0 <MotionDI_GetLibVersion+0x48>)
 8012b98:	4604      	mov	r4, r0
 8012b9a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012b9c:	b08b      	sub	sp, #44	; 0x2c
 8012b9e:	ad01      	add	r5, sp, #4
 8012ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012ba2:	6833      	ldr	r3, [r6, #0]
 8012ba4:	f825 3b02 	strh.w	r3, [r5], #2
 8012ba8:	0c1b      	lsrs	r3, r3, #16
 8012baa:	702b      	strb	r3, [r5, #0]
 8012bac:	ad01      	add	r5, sp, #4
 8012bae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012bb0:	882e      	ldrh	r6, [r5, #0]
 8012bb2:	60e3      	str	r3, [r4, #12]
 8012bb4:	78ad      	ldrb	r5, [r5, #2]
 8012bb6:	6020      	str	r0, [r4, #0]
 8012bb8:	2312      	movs	r3, #18
 8012bba:	4618      	mov	r0, r3
 8012bbc:	6061      	str	r1, [r4, #4]
 8012bbe:	60a2      	str	r2, [r4, #8]
 8012bc0:	8226      	strh	r6, [r4, #16]
 8012bc2:	74a5      	strb	r5, [r4, #18]
 8012bc4:	b00b      	add	sp, #44	; 0x2c
 8012bc6:	bc70      	pop	{r4, r5, r6}
 8012bc8:	4770      	bx	lr
 8012bca:	bf00      	nop
 8012bcc:	20001690 	.word	0x20001690
 8012bd0:	08014e60 	.word	0x08014e60

08012bd4 <__errno>:
 8012bd4:	4b01      	ldr	r3, [pc, #4]	; (8012bdc <__errno+0x8>)
 8012bd6:	6818      	ldr	r0, [r3, #0]
 8012bd8:	4770      	bx	lr
 8012bda:	bf00      	nop
 8012bdc:	2000160c 	.word	0x2000160c

08012be0 <__libc_init_array>:
 8012be0:	b570      	push	{r4, r5, r6, lr}
 8012be2:	4d0d      	ldr	r5, [pc, #52]	; (8012c18 <__libc_init_array+0x38>)
 8012be4:	4c0d      	ldr	r4, [pc, #52]	; (8012c1c <__libc_init_array+0x3c>)
 8012be6:	1b64      	subs	r4, r4, r5
 8012be8:	10a4      	asrs	r4, r4, #2
 8012bea:	2600      	movs	r6, #0
 8012bec:	42a6      	cmp	r6, r4
 8012bee:	d109      	bne.n	8012c04 <__libc_init_array+0x24>
 8012bf0:	4d0b      	ldr	r5, [pc, #44]	; (8012c20 <__libc_init_array+0x40>)
 8012bf2:	4c0c      	ldr	r4, [pc, #48]	; (8012c24 <__libc_init_array+0x44>)
 8012bf4:	f002 f85a 	bl	8014cac <_init>
 8012bf8:	1b64      	subs	r4, r4, r5
 8012bfa:	10a4      	asrs	r4, r4, #2
 8012bfc:	2600      	movs	r6, #0
 8012bfe:	42a6      	cmp	r6, r4
 8012c00:	d105      	bne.n	8012c0e <__libc_init_array+0x2e>
 8012c02:	bd70      	pop	{r4, r5, r6, pc}
 8012c04:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c08:	4798      	blx	r3
 8012c0a:	3601      	adds	r6, #1
 8012c0c:	e7ee      	b.n	8012bec <__libc_init_array+0xc>
 8012c0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c12:	4798      	blx	r3
 8012c14:	3601      	adds	r6, #1
 8012c16:	e7f2      	b.n	8012bfe <__libc_init_array+0x1e>
 8012c18:	08015358 	.word	0x08015358
 8012c1c:	08015358 	.word	0x08015358
 8012c20:	08015358 	.word	0x08015358
 8012c24:	0801535c 	.word	0x0801535c

08012c28 <memcpy>:
 8012c28:	440a      	add	r2, r1
 8012c2a:	4291      	cmp	r1, r2
 8012c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012c30:	d100      	bne.n	8012c34 <memcpy+0xc>
 8012c32:	4770      	bx	lr
 8012c34:	b510      	push	{r4, lr}
 8012c36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c3e:	4291      	cmp	r1, r2
 8012c40:	d1f9      	bne.n	8012c36 <memcpy+0xe>
 8012c42:	bd10      	pop	{r4, pc}

08012c44 <memset>:
 8012c44:	4402      	add	r2, r0
 8012c46:	4603      	mov	r3, r0
 8012c48:	4293      	cmp	r3, r2
 8012c4a:	d100      	bne.n	8012c4e <memset+0xa>
 8012c4c:	4770      	bx	lr
 8012c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8012c52:	e7f9      	b.n	8012c48 <memset+0x4>
 8012c54:	0000      	movs	r0, r0
	...

08012c58 <floor>:
 8012c58:	ec51 0b10 	vmov	r0, r1, d0
 8012c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c60:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012c64:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012c68:	2e13      	cmp	r6, #19
 8012c6a:	ee10 5a10 	vmov	r5, s0
 8012c6e:	ee10 8a10 	vmov	r8, s0
 8012c72:	460c      	mov	r4, r1
 8012c74:	dc32      	bgt.n	8012cdc <floor+0x84>
 8012c76:	2e00      	cmp	r6, #0
 8012c78:	da14      	bge.n	8012ca4 <floor+0x4c>
 8012c7a:	a333      	add	r3, pc, #204	; (adr r3, 8012d48 <floor+0xf0>)
 8012c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c80:	f7ed faa8 	bl	80001d4 <__adddf3>
 8012c84:	2200      	movs	r2, #0
 8012c86:	2300      	movs	r3, #0
 8012c88:	f7ed feea 	bl	8000a60 <__aeabi_dcmpgt>
 8012c8c:	b138      	cbz	r0, 8012c9e <floor+0x46>
 8012c8e:	2c00      	cmp	r4, #0
 8012c90:	da57      	bge.n	8012d42 <floor+0xea>
 8012c92:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012c96:	431d      	orrs	r5, r3
 8012c98:	d001      	beq.n	8012c9e <floor+0x46>
 8012c9a:	4c2d      	ldr	r4, [pc, #180]	; (8012d50 <floor+0xf8>)
 8012c9c:	2500      	movs	r5, #0
 8012c9e:	4621      	mov	r1, r4
 8012ca0:	4628      	mov	r0, r5
 8012ca2:	e025      	b.n	8012cf0 <floor+0x98>
 8012ca4:	4f2b      	ldr	r7, [pc, #172]	; (8012d54 <floor+0xfc>)
 8012ca6:	4137      	asrs	r7, r6
 8012ca8:	ea01 0307 	and.w	r3, r1, r7
 8012cac:	4303      	orrs	r3, r0
 8012cae:	d01f      	beq.n	8012cf0 <floor+0x98>
 8012cb0:	a325      	add	r3, pc, #148	; (adr r3, 8012d48 <floor+0xf0>)
 8012cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb6:	f7ed fa8d 	bl	80001d4 <__adddf3>
 8012cba:	2200      	movs	r2, #0
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	f7ed fecf 	bl	8000a60 <__aeabi_dcmpgt>
 8012cc2:	2800      	cmp	r0, #0
 8012cc4:	d0eb      	beq.n	8012c9e <floor+0x46>
 8012cc6:	2c00      	cmp	r4, #0
 8012cc8:	bfbe      	ittt	lt
 8012cca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012cce:	fa43 f606 	asrlt.w	r6, r3, r6
 8012cd2:	19a4      	addlt	r4, r4, r6
 8012cd4:	ea24 0407 	bic.w	r4, r4, r7
 8012cd8:	2500      	movs	r5, #0
 8012cda:	e7e0      	b.n	8012c9e <floor+0x46>
 8012cdc:	2e33      	cmp	r6, #51	; 0x33
 8012cde:	dd0b      	ble.n	8012cf8 <floor+0xa0>
 8012ce0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012ce4:	d104      	bne.n	8012cf0 <floor+0x98>
 8012ce6:	ee10 2a10 	vmov	r2, s0
 8012cea:	460b      	mov	r3, r1
 8012cec:	f7ed fa72 	bl	80001d4 <__adddf3>
 8012cf0:	ec41 0b10 	vmov	d0, r0, r1
 8012cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cf8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8012d00:	fa23 f707 	lsr.w	r7, r3, r7
 8012d04:	4207      	tst	r7, r0
 8012d06:	d0f3      	beq.n	8012cf0 <floor+0x98>
 8012d08:	a30f      	add	r3, pc, #60	; (adr r3, 8012d48 <floor+0xf0>)
 8012d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d0e:	f7ed fa61 	bl	80001d4 <__adddf3>
 8012d12:	2200      	movs	r2, #0
 8012d14:	2300      	movs	r3, #0
 8012d16:	f7ed fea3 	bl	8000a60 <__aeabi_dcmpgt>
 8012d1a:	2800      	cmp	r0, #0
 8012d1c:	d0bf      	beq.n	8012c9e <floor+0x46>
 8012d1e:	2c00      	cmp	r4, #0
 8012d20:	da02      	bge.n	8012d28 <floor+0xd0>
 8012d22:	2e14      	cmp	r6, #20
 8012d24:	d103      	bne.n	8012d2e <floor+0xd6>
 8012d26:	3401      	adds	r4, #1
 8012d28:	ea25 0507 	bic.w	r5, r5, r7
 8012d2c:	e7b7      	b.n	8012c9e <floor+0x46>
 8012d2e:	2301      	movs	r3, #1
 8012d30:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012d34:	fa03 f606 	lsl.w	r6, r3, r6
 8012d38:	4435      	add	r5, r6
 8012d3a:	4545      	cmp	r5, r8
 8012d3c:	bf38      	it	cc
 8012d3e:	18e4      	addcc	r4, r4, r3
 8012d40:	e7f2      	b.n	8012d28 <floor+0xd0>
 8012d42:	2500      	movs	r5, #0
 8012d44:	462c      	mov	r4, r5
 8012d46:	e7aa      	b.n	8012c9e <floor+0x46>
 8012d48:	8800759c 	.word	0x8800759c
 8012d4c:	7e37e43c 	.word	0x7e37e43c
 8012d50:	bff00000 	.word	0xbff00000
 8012d54:	000fffff 	.word	0x000fffff

08012d58 <cosf>:
 8012d58:	ee10 3a10 	vmov	r3, s0
 8012d5c:	b507      	push	{r0, r1, r2, lr}
 8012d5e:	4a1e      	ldr	r2, [pc, #120]	; (8012dd8 <cosf+0x80>)
 8012d60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012d64:	4293      	cmp	r3, r2
 8012d66:	dc06      	bgt.n	8012d76 <cosf+0x1e>
 8012d68:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8012ddc <cosf+0x84>
 8012d6c:	b003      	add	sp, #12
 8012d6e:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d72:	f001 b8ed 	b.w	8013f50 <__kernel_cosf>
 8012d76:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012d7a:	db04      	blt.n	8012d86 <cosf+0x2e>
 8012d7c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012d80:	b003      	add	sp, #12
 8012d82:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d86:	4668      	mov	r0, sp
 8012d88:	f000 ffa2 	bl	8013cd0 <__ieee754_rem_pio2f>
 8012d8c:	f000 0003 	and.w	r0, r0, #3
 8012d90:	2801      	cmp	r0, #1
 8012d92:	d009      	beq.n	8012da8 <cosf+0x50>
 8012d94:	2802      	cmp	r0, #2
 8012d96:	d010      	beq.n	8012dba <cosf+0x62>
 8012d98:	b9b0      	cbnz	r0, 8012dc8 <cosf+0x70>
 8012d9a:	eddd 0a01 	vldr	s1, [sp, #4]
 8012d9e:	ed9d 0a00 	vldr	s0, [sp]
 8012da2:	f001 f8d5 	bl	8013f50 <__kernel_cosf>
 8012da6:	e7eb      	b.n	8012d80 <cosf+0x28>
 8012da8:	eddd 0a01 	vldr	s1, [sp, #4]
 8012dac:	ed9d 0a00 	vldr	s0, [sp]
 8012db0:	f001 fba4 	bl	80144fc <__kernel_sinf>
 8012db4:	eeb1 0a40 	vneg.f32	s0, s0
 8012db8:	e7e2      	b.n	8012d80 <cosf+0x28>
 8012dba:	eddd 0a01 	vldr	s1, [sp, #4]
 8012dbe:	ed9d 0a00 	vldr	s0, [sp]
 8012dc2:	f001 f8c5 	bl	8013f50 <__kernel_cosf>
 8012dc6:	e7f5      	b.n	8012db4 <cosf+0x5c>
 8012dc8:	eddd 0a01 	vldr	s1, [sp, #4]
 8012dcc:	ed9d 0a00 	vldr	s0, [sp]
 8012dd0:	2001      	movs	r0, #1
 8012dd2:	f001 fb93 	bl	80144fc <__kernel_sinf>
 8012dd6:	e7d3      	b.n	8012d80 <cosf+0x28>
 8012dd8:	3f490fd8 	.word	0x3f490fd8
 8012ddc:	00000000 	.word	0x00000000

08012de0 <roundf>:
 8012de0:	ee10 0a10 	vmov	r0, s0
 8012de4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8012de8:	3a7f      	subs	r2, #127	; 0x7f
 8012dea:	2a16      	cmp	r2, #22
 8012dec:	dc15      	bgt.n	8012e1a <roundf+0x3a>
 8012dee:	2a00      	cmp	r2, #0
 8012df0:	da08      	bge.n	8012e04 <roundf+0x24>
 8012df2:	3201      	adds	r2, #1
 8012df4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8012df8:	d101      	bne.n	8012dfe <roundf+0x1e>
 8012dfa:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8012dfe:	ee00 3a10 	vmov	s0, r3
 8012e02:	4770      	bx	lr
 8012e04:	4907      	ldr	r1, [pc, #28]	; (8012e24 <roundf+0x44>)
 8012e06:	4111      	asrs	r1, r2
 8012e08:	4208      	tst	r0, r1
 8012e0a:	d0fa      	beq.n	8012e02 <roundf+0x22>
 8012e0c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012e10:	4113      	asrs	r3, r2
 8012e12:	4403      	add	r3, r0
 8012e14:	ea23 0301 	bic.w	r3, r3, r1
 8012e18:	e7f1      	b.n	8012dfe <roundf+0x1e>
 8012e1a:	2a80      	cmp	r2, #128	; 0x80
 8012e1c:	d1f1      	bne.n	8012e02 <roundf+0x22>
 8012e1e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012e22:	4770      	bx	lr
 8012e24:	007fffff 	.word	0x007fffff

08012e28 <sinf>:
 8012e28:	ee10 3a10 	vmov	r3, s0
 8012e2c:	b507      	push	{r0, r1, r2, lr}
 8012e2e:	4a1f      	ldr	r2, [pc, #124]	; (8012eac <sinf+0x84>)
 8012e30:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012e34:	4293      	cmp	r3, r2
 8012e36:	dc07      	bgt.n	8012e48 <sinf+0x20>
 8012e38:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8012eb0 <sinf+0x88>
 8012e3c:	2000      	movs	r0, #0
 8012e3e:	b003      	add	sp, #12
 8012e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8012e44:	f001 bb5a 	b.w	80144fc <__kernel_sinf>
 8012e48:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012e4c:	db04      	blt.n	8012e58 <sinf+0x30>
 8012e4e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012e52:	b003      	add	sp, #12
 8012e54:	f85d fb04 	ldr.w	pc, [sp], #4
 8012e58:	4668      	mov	r0, sp
 8012e5a:	f000 ff39 	bl	8013cd0 <__ieee754_rem_pio2f>
 8012e5e:	f000 0003 	and.w	r0, r0, #3
 8012e62:	2801      	cmp	r0, #1
 8012e64:	d00a      	beq.n	8012e7c <sinf+0x54>
 8012e66:	2802      	cmp	r0, #2
 8012e68:	d00f      	beq.n	8012e8a <sinf+0x62>
 8012e6a:	b9c0      	cbnz	r0, 8012e9e <sinf+0x76>
 8012e6c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012e70:	ed9d 0a00 	vldr	s0, [sp]
 8012e74:	2001      	movs	r0, #1
 8012e76:	f001 fb41 	bl	80144fc <__kernel_sinf>
 8012e7a:	e7ea      	b.n	8012e52 <sinf+0x2a>
 8012e7c:	eddd 0a01 	vldr	s1, [sp, #4]
 8012e80:	ed9d 0a00 	vldr	s0, [sp]
 8012e84:	f001 f864 	bl	8013f50 <__kernel_cosf>
 8012e88:	e7e3      	b.n	8012e52 <sinf+0x2a>
 8012e8a:	eddd 0a01 	vldr	s1, [sp, #4]
 8012e8e:	ed9d 0a00 	vldr	s0, [sp]
 8012e92:	2001      	movs	r0, #1
 8012e94:	f001 fb32 	bl	80144fc <__kernel_sinf>
 8012e98:	eeb1 0a40 	vneg.f32	s0, s0
 8012e9c:	e7d9      	b.n	8012e52 <sinf+0x2a>
 8012e9e:	eddd 0a01 	vldr	s1, [sp, #4]
 8012ea2:	ed9d 0a00 	vldr	s0, [sp]
 8012ea6:	f001 f853 	bl	8013f50 <__kernel_cosf>
 8012eaa:	e7f5      	b.n	8012e98 <sinf+0x70>
 8012eac:	3f490fd8 	.word	0x3f490fd8
 8012eb0:	00000000 	.word	0x00000000

08012eb4 <tanf>:
 8012eb4:	ee10 3a10 	vmov	r3, s0
 8012eb8:	b507      	push	{r0, r1, r2, lr}
 8012eba:	4a12      	ldr	r2, [pc, #72]	; (8012f04 <tanf+0x50>)
 8012ebc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012ec0:	4293      	cmp	r3, r2
 8012ec2:	dc07      	bgt.n	8012ed4 <tanf+0x20>
 8012ec4:	eddf 0a10 	vldr	s1, [pc, #64]	; 8012f08 <tanf+0x54>
 8012ec8:	2001      	movs	r0, #1
 8012eca:	b003      	add	sp, #12
 8012ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ed0:	f001 bb5c 	b.w	801458c <__kernel_tanf>
 8012ed4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012ed8:	db04      	blt.n	8012ee4 <tanf+0x30>
 8012eda:	ee30 0a40 	vsub.f32	s0, s0, s0
 8012ede:	b003      	add	sp, #12
 8012ee0:	f85d fb04 	ldr.w	pc, [sp], #4
 8012ee4:	4668      	mov	r0, sp
 8012ee6:	f000 fef3 	bl	8013cd0 <__ieee754_rem_pio2f>
 8012eea:	0040      	lsls	r0, r0, #1
 8012eec:	f000 0002 	and.w	r0, r0, #2
 8012ef0:	eddd 0a01 	vldr	s1, [sp, #4]
 8012ef4:	ed9d 0a00 	vldr	s0, [sp]
 8012ef8:	f1c0 0001 	rsb	r0, r0, #1
 8012efc:	f001 fb46 	bl	801458c <__kernel_tanf>
 8012f00:	e7ed      	b.n	8012ede <tanf+0x2a>
 8012f02:	bf00      	nop
 8012f04:	3f490fda 	.word	0x3f490fda
 8012f08:	00000000 	.word	0x00000000

08012f0c <asin>:
 8012f0c:	b538      	push	{r3, r4, r5, lr}
 8012f0e:	ed2d 8b02 	vpush	{d8}
 8012f12:	ec55 4b10 	vmov	r4, r5, d0
 8012f16:	f000 f8cf 	bl	80130b8 <__ieee754_asin>
 8012f1a:	4622      	mov	r2, r4
 8012f1c:	462b      	mov	r3, r5
 8012f1e:	4620      	mov	r0, r4
 8012f20:	4629      	mov	r1, r5
 8012f22:	eeb0 8a40 	vmov.f32	s16, s0
 8012f26:	eef0 8a60 	vmov.f32	s17, s1
 8012f2a:	f7ed fda3 	bl	8000a74 <__aeabi_dcmpun>
 8012f2e:	b9a8      	cbnz	r0, 8012f5c <asin+0x50>
 8012f30:	ec45 4b10 	vmov	d0, r4, r5
 8012f34:	f001 fddc 	bl	8014af0 <fabs>
 8012f38:	4b0c      	ldr	r3, [pc, #48]	; (8012f6c <asin+0x60>)
 8012f3a:	ec51 0b10 	vmov	r0, r1, d0
 8012f3e:	2200      	movs	r2, #0
 8012f40:	f7ed fd8e 	bl	8000a60 <__aeabi_dcmpgt>
 8012f44:	b150      	cbz	r0, 8012f5c <asin+0x50>
 8012f46:	f7ff fe45 	bl	8012bd4 <__errno>
 8012f4a:	ecbd 8b02 	vpop	{d8}
 8012f4e:	2321      	movs	r3, #33	; 0x21
 8012f50:	6003      	str	r3, [r0, #0]
 8012f52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012f56:	4806      	ldr	r0, [pc, #24]	; (8012f70 <asin+0x64>)
 8012f58:	f001 bdde 	b.w	8014b18 <nan>
 8012f5c:	eeb0 0a48 	vmov.f32	s0, s16
 8012f60:	eef0 0a68 	vmov.f32	s1, s17
 8012f64:	ecbd 8b02 	vpop	{d8}
 8012f68:	bd38      	pop	{r3, r4, r5, pc}
 8012f6a:	bf00      	nop
 8012f6c:	3ff00000 	.word	0x3ff00000
 8012f70:	08014edc 	.word	0x08014edc

08012f74 <atan2>:
 8012f74:	f000 bab4 	b.w	80134e0 <__ieee754_atan2>

08012f78 <exp>:
 8012f78:	b538      	push	{r3, r4, r5, lr}
 8012f7a:	ed2d 8b02 	vpush	{d8}
 8012f7e:	ec55 4b10 	vmov	r4, r5, d0
 8012f82:	f000 fb79 	bl	8013678 <__ieee754_exp>
 8012f86:	eeb0 8a40 	vmov.f32	s16, s0
 8012f8a:	eef0 8a60 	vmov.f32	s17, s1
 8012f8e:	ec45 4b10 	vmov	d0, r4, r5
 8012f92:	f001 fdb6 	bl	8014b02 <finite>
 8012f96:	b168      	cbz	r0, 8012fb4 <exp+0x3c>
 8012f98:	a317      	add	r3, pc, #92	; (adr r3, 8012ff8 <exp+0x80>)
 8012f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f9e:	4620      	mov	r0, r4
 8012fa0:	4629      	mov	r1, r5
 8012fa2:	f7ed fd5d 	bl	8000a60 <__aeabi_dcmpgt>
 8012fa6:	b160      	cbz	r0, 8012fc2 <exp+0x4a>
 8012fa8:	f7ff fe14 	bl	8012bd4 <__errno>
 8012fac:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8012fe8 <exp+0x70>
 8012fb0:	2322      	movs	r3, #34	; 0x22
 8012fb2:	6003      	str	r3, [r0, #0]
 8012fb4:	eeb0 0a48 	vmov.f32	s0, s16
 8012fb8:	eef0 0a68 	vmov.f32	s1, s17
 8012fbc:	ecbd 8b02 	vpop	{d8}
 8012fc0:	bd38      	pop	{r3, r4, r5, pc}
 8012fc2:	a30f      	add	r3, pc, #60	; (adr r3, 8013000 <exp+0x88>)
 8012fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc8:	4620      	mov	r0, r4
 8012fca:	4629      	mov	r1, r5
 8012fcc:	f7ed fd2a 	bl	8000a24 <__aeabi_dcmplt>
 8012fd0:	2800      	cmp	r0, #0
 8012fd2:	d0ef      	beq.n	8012fb4 <exp+0x3c>
 8012fd4:	f7ff fdfe 	bl	8012bd4 <__errno>
 8012fd8:	2322      	movs	r3, #34	; 0x22
 8012fda:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8012ff0 <exp+0x78>
 8012fde:	6003      	str	r3, [r0, #0]
 8012fe0:	e7e8      	b.n	8012fb4 <exp+0x3c>
 8012fe2:	bf00      	nop
 8012fe4:	f3af 8000 	nop.w
 8012fe8:	00000000 	.word	0x00000000
 8012fec:	7ff00000 	.word	0x7ff00000
	...
 8012ff8:	fefa39ef 	.word	0xfefa39ef
 8012ffc:	40862e42 	.word	0x40862e42
 8013000:	d52d3051 	.word	0xd52d3051
 8013004:	c0874910 	.word	0xc0874910

08013008 <sqrt>:
 8013008:	b538      	push	{r3, r4, r5, lr}
 801300a:	ed2d 8b02 	vpush	{d8}
 801300e:	ec55 4b10 	vmov	r4, r5, d0
 8013012:	f000 fcb3 	bl	801397c <__ieee754_sqrt>
 8013016:	4622      	mov	r2, r4
 8013018:	462b      	mov	r3, r5
 801301a:	4620      	mov	r0, r4
 801301c:	4629      	mov	r1, r5
 801301e:	eeb0 8a40 	vmov.f32	s16, s0
 8013022:	eef0 8a60 	vmov.f32	s17, s1
 8013026:	f7ed fd25 	bl	8000a74 <__aeabi_dcmpun>
 801302a:	b990      	cbnz	r0, 8013052 <sqrt+0x4a>
 801302c:	2200      	movs	r2, #0
 801302e:	2300      	movs	r3, #0
 8013030:	4620      	mov	r0, r4
 8013032:	4629      	mov	r1, r5
 8013034:	f7ed fcf6 	bl	8000a24 <__aeabi_dcmplt>
 8013038:	b158      	cbz	r0, 8013052 <sqrt+0x4a>
 801303a:	f7ff fdcb 	bl	8012bd4 <__errno>
 801303e:	2321      	movs	r3, #33	; 0x21
 8013040:	6003      	str	r3, [r0, #0]
 8013042:	2200      	movs	r2, #0
 8013044:	2300      	movs	r3, #0
 8013046:	4610      	mov	r0, r2
 8013048:	4619      	mov	r1, r3
 801304a:	f7ed fba3 	bl	8000794 <__aeabi_ddiv>
 801304e:	ec41 0b18 	vmov	d8, r0, r1
 8013052:	eeb0 0a48 	vmov.f32	s0, s16
 8013056:	eef0 0a68 	vmov.f32	s1, s17
 801305a:	ecbd 8b02 	vpop	{d8}
 801305e:	bd38      	pop	{r3, r4, r5, pc}

08013060 <acosf>:
 8013060:	b508      	push	{r3, lr}
 8013062:	ed2d 8b02 	vpush	{d8}
 8013066:	eeb0 8a40 	vmov.f32	s16, s0
 801306a:	f000 fd39 	bl	8013ae0 <__ieee754_acosf>
 801306e:	eeb4 8a48 	vcmp.f32	s16, s16
 8013072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013076:	eef0 8a40 	vmov.f32	s17, s0
 801307a:	d615      	bvs.n	80130a8 <acosf+0x48>
 801307c:	eeb0 0a48 	vmov.f32	s0, s16
 8013080:	f001 fd52 	bl	8014b28 <fabsf>
 8013084:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013088:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801308c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013090:	dd0a      	ble.n	80130a8 <acosf+0x48>
 8013092:	f7ff fd9f 	bl	8012bd4 <__errno>
 8013096:	ecbd 8b02 	vpop	{d8}
 801309a:	2321      	movs	r3, #33	; 0x21
 801309c:	6003      	str	r3, [r0, #0]
 801309e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80130a2:	4804      	ldr	r0, [pc, #16]	; (80130b4 <acosf+0x54>)
 80130a4:	f001 bd8a 	b.w	8014bbc <nanf>
 80130a8:	eeb0 0a68 	vmov.f32	s0, s17
 80130ac:	ecbd 8b02 	vpop	{d8}
 80130b0:	bd08      	pop	{r3, pc}
 80130b2:	bf00      	nop
 80130b4:	08014edc 	.word	0x08014edc

080130b8 <__ieee754_asin>:
 80130b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80130bc:	ed2d 8b04 	vpush	{d8-d9}
 80130c0:	ec55 4b10 	vmov	r4, r5, d0
 80130c4:	4bcc      	ldr	r3, [pc, #816]	; (80133f8 <__ieee754_asin+0x340>)
 80130c6:	b083      	sub	sp, #12
 80130c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80130cc:	4598      	cmp	r8, r3
 80130ce:	9501      	str	r5, [sp, #4]
 80130d0:	dd35      	ble.n	801313e <__ieee754_asin+0x86>
 80130d2:	ee10 3a10 	vmov	r3, s0
 80130d6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80130da:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80130de:	ea58 0303 	orrs.w	r3, r8, r3
 80130e2:	d117      	bne.n	8013114 <__ieee754_asin+0x5c>
 80130e4:	a3aa      	add	r3, pc, #680	; (adr r3, 8013390 <__ieee754_asin+0x2d8>)
 80130e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ea:	ee10 0a10 	vmov	r0, s0
 80130ee:	4629      	mov	r1, r5
 80130f0:	f7ed fa26 	bl	8000540 <__aeabi_dmul>
 80130f4:	a3a8      	add	r3, pc, #672	; (adr r3, 8013398 <__ieee754_asin+0x2e0>)
 80130f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130fa:	4606      	mov	r6, r0
 80130fc:	460f      	mov	r7, r1
 80130fe:	4620      	mov	r0, r4
 8013100:	4629      	mov	r1, r5
 8013102:	f7ed fa1d 	bl	8000540 <__aeabi_dmul>
 8013106:	4602      	mov	r2, r0
 8013108:	460b      	mov	r3, r1
 801310a:	4630      	mov	r0, r6
 801310c:	4639      	mov	r1, r7
 801310e:	f7ed f861 	bl	80001d4 <__adddf3>
 8013112:	e00b      	b.n	801312c <__ieee754_asin+0x74>
 8013114:	ee10 2a10 	vmov	r2, s0
 8013118:	462b      	mov	r3, r5
 801311a:	ee10 0a10 	vmov	r0, s0
 801311e:	4629      	mov	r1, r5
 8013120:	f7ed f856 	bl	80001d0 <__aeabi_dsub>
 8013124:	4602      	mov	r2, r0
 8013126:	460b      	mov	r3, r1
 8013128:	f7ed fb34 	bl	8000794 <__aeabi_ddiv>
 801312c:	4604      	mov	r4, r0
 801312e:	460d      	mov	r5, r1
 8013130:	ec45 4b10 	vmov	d0, r4, r5
 8013134:	b003      	add	sp, #12
 8013136:	ecbd 8b04 	vpop	{d8-d9}
 801313a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801313e:	4baf      	ldr	r3, [pc, #700]	; (80133fc <__ieee754_asin+0x344>)
 8013140:	4598      	cmp	r8, r3
 8013142:	dc11      	bgt.n	8013168 <__ieee754_asin+0xb0>
 8013144:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8013148:	f280 80ae 	bge.w	80132a8 <__ieee754_asin+0x1f0>
 801314c:	a394      	add	r3, pc, #592	; (adr r3, 80133a0 <__ieee754_asin+0x2e8>)
 801314e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013152:	ee10 0a10 	vmov	r0, s0
 8013156:	4629      	mov	r1, r5
 8013158:	f7ed f83c 	bl	80001d4 <__adddf3>
 801315c:	4ba8      	ldr	r3, [pc, #672]	; (8013400 <__ieee754_asin+0x348>)
 801315e:	2200      	movs	r2, #0
 8013160:	f7ed fc7e 	bl	8000a60 <__aeabi_dcmpgt>
 8013164:	2800      	cmp	r0, #0
 8013166:	d1e3      	bne.n	8013130 <__ieee754_asin+0x78>
 8013168:	ec45 4b10 	vmov	d0, r4, r5
 801316c:	f001 fcc0 	bl	8014af0 <fabs>
 8013170:	49a3      	ldr	r1, [pc, #652]	; (8013400 <__ieee754_asin+0x348>)
 8013172:	ec53 2b10 	vmov	r2, r3, d0
 8013176:	2000      	movs	r0, #0
 8013178:	f7ed f82a 	bl	80001d0 <__aeabi_dsub>
 801317c:	4ba1      	ldr	r3, [pc, #644]	; (8013404 <__ieee754_asin+0x34c>)
 801317e:	2200      	movs	r2, #0
 8013180:	f7ed f9de 	bl	8000540 <__aeabi_dmul>
 8013184:	a388      	add	r3, pc, #544	; (adr r3, 80133a8 <__ieee754_asin+0x2f0>)
 8013186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801318a:	4604      	mov	r4, r0
 801318c:	460d      	mov	r5, r1
 801318e:	f7ed f9d7 	bl	8000540 <__aeabi_dmul>
 8013192:	a387      	add	r3, pc, #540	; (adr r3, 80133b0 <__ieee754_asin+0x2f8>)
 8013194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013198:	f7ed f81c 	bl	80001d4 <__adddf3>
 801319c:	4622      	mov	r2, r4
 801319e:	462b      	mov	r3, r5
 80131a0:	f7ed f9ce 	bl	8000540 <__aeabi_dmul>
 80131a4:	a384      	add	r3, pc, #528	; (adr r3, 80133b8 <__ieee754_asin+0x300>)
 80131a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131aa:	f7ed f811 	bl	80001d0 <__aeabi_dsub>
 80131ae:	4622      	mov	r2, r4
 80131b0:	462b      	mov	r3, r5
 80131b2:	f7ed f9c5 	bl	8000540 <__aeabi_dmul>
 80131b6:	a382      	add	r3, pc, #520	; (adr r3, 80133c0 <__ieee754_asin+0x308>)
 80131b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131bc:	f7ed f80a 	bl	80001d4 <__adddf3>
 80131c0:	4622      	mov	r2, r4
 80131c2:	462b      	mov	r3, r5
 80131c4:	f7ed f9bc 	bl	8000540 <__aeabi_dmul>
 80131c8:	a37f      	add	r3, pc, #508	; (adr r3, 80133c8 <__ieee754_asin+0x310>)
 80131ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131ce:	f7ec ffff 	bl	80001d0 <__aeabi_dsub>
 80131d2:	4622      	mov	r2, r4
 80131d4:	462b      	mov	r3, r5
 80131d6:	f7ed f9b3 	bl	8000540 <__aeabi_dmul>
 80131da:	a37d      	add	r3, pc, #500	; (adr r3, 80133d0 <__ieee754_asin+0x318>)
 80131dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131e0:	f7ec fff8 	bl	80001d4 <__adddf3>
 80131e4:	4622      	mov	r2, r4
 80131e6:	462b      	mov	r3, r5
 80131e8:	f7ed f9aa 	bl	8000540 <__aeabi_dmul>
 80131ec:	a37a      	add	r3, pc, #488	; (adr r3, 80133d8 <__ieee754_asin+0x320>)
 80131ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131f2:	ec41 0b18 	vmov	d8, r0, r1
 80131f6:	4620      	mov	r0, r4
 80131f8:	4629      	mov	r1, r5
 80131fa:	f7ed f9a1 	bl	8000540 <__aeabi_dmul>
 80131fe:	a378      	add	r3, pc, #480	; (adr r3, 80133e0 <__ieee754_asin+0x328>)
 8013200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013204:	f7ec ffe4 	bl	80001d0 <__aeabi_dsub>
 8013208:	4622      	mov	r2, r4
 801320a:	462b      	mov	r3, r5
 801320c:	f7ed f998 	bl	8000540 <__aeabi_dmul>
 8013210:	a375      	add	r3, pc, #468	; (adr r3, 80133e8 <__ieee754_asin+0x330>)
 8013212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013216:	f7ec ffdd 	bl	80001d4 <__adddf3>
 801321a:	4622      	mov	r2, r4
 801321c:	462b      	mov	r3, r5
 801321e:	f7ed f98f 	bl	8000540 <__aeabi_dmul>
 8013222:	a373      	add	r3, pc, #460	; (adr r3, 80133f0 <__ieee754_asin+0x338>)
 8013224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013228:	f7ec ffd2 	bl	80001d0 <__aeabi_dsub>
 801322c:	4622      	mov	r2, r4
 801322e:	462b      	mov	r3, r5
 8013230:	f7ed f986 	bl	8000540 <__aeabi_dmul>
 8013234:	4b72      	ldr	r3, [pc, #456]	; (8013400 <__ieee754_asin+0x348>)
 8013236:	2200      	movs	r2, #0
 8013238:	f7ec ffcc 	bl	80001d4 <__adddf3>
 801323c:	ec45 4b10 	vmov	d0, r4, r5
 8013240:	4606      	mov	r6, r0
 8013242:	460f      	mov	r7, r1
 8013244:	f000 fb9a 	bl	801397c <__ieee754_sqrt>
 8013248:	4b6f      	ldr	r3, [pc, #444]	; (8013408 <__ieee754_asin+0x350>)
 801324a:	4598      	cmp	r8, r3
 801324c:	ec5b ab10 	vmov	sl, fp, d0
 8013250:	f340 80dc 	ble.w	801340c <__ieee754_asin+0x354>
 8013254:	4632      	mov	r2, r6
 8013256:	463b      	mov	r3, r7
 8013258:	ec51 0b18 	vmov	r0, r1, d8
 801325c:	f7ed fa9a 	bl	8000794 <__aeabi_ddiv>
 8013260:	4652      	mov	r2, sl
 8013262:	465b      	mov	r3, fp
 8013264:	f7ed f96c 	bl	8000540 <__aeabi_dmul>
 8013268:	4652      	mov	r2, sl
 801326a:	465b      	mov	r3, fp
 801326c:	f7ec ffb2 	bl	80001d4 <__adddf3>
 8013270:	4602      	mov	r2, r0
 8013272:	460b      	mov	r3, r1
 8013274:	f7ec ffae 	bl	80001d4 <__adddf3>
 8013278:	a347      	add	r3, pc, #284	; (adr r3, 8013398 <__ieee754_asin+0x2e0>)
 801327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801327e:	f7ec ffa7 	bl	80001d0 <__aeabi_dsub>
 8013282:	4602      	mov	r2, r0
 8013284:	460b      	mov	r3, r1
 8013286:	a142      	add	r1, pc, #264	; (adr r1, 8013390 <__ieee754_asin+0x2d8>)
 8013288:	e9d1 0100 	ldrd	r0, r1, [r1]
 801328c:	f7ec ffa0 	bl	80001d0 <__aeabi_dsub>
 8013290:	9b01      	ldr	r3, [sp, #4]
 8013292:	2b00      	cmp	r3, #0
 8013294:	bfdc      	itt	le
 8013296:	4602      	movle	r2, r0
 8013298:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 801329c:	4604      	mov	r4, r0
 801329e:	460d      	mov	r5, r1
 80132a0:	bfdc      	itt	le
 80132a2:	4614      	movle	r4, r2
 80132a4:	461d      	movle	r5, r3
 80132a6:	e743      	b.n	8013130 <__ieee754_asin+0x78>
 80132a8:	ee10 2a10 	vmov	r2, s0
 80132ac:	ee10 0a10 	vmov	r0, s0
 80132b0:	462b      	mov	r3, r5
 80132b2:	4629      	mov	r1, r5
 80132b4:	f7ed f944 	bl	8000540 <__aeabi_dmul>
 80132b8:	a33b      	add	r3, pc, #236	; (adr r3, 80133a8 <__ieee754_asin+0x2f0>)
 80132ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132be:	4606      	mov	r6, r0
 80132c0:	460f      	mov	r7, r1
 80132c2:	f7ed f93d 	bl	8000540 <__aeabi_dmul>
 80132c6:	a33a      	add	r3, pc, #232	; (adr r3, 80133b0 <__ieee754_asin+0x2f8>)
 80132c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132cc:	f7ec ff82 	bl	80001d4 <__adddf3>
 80132d0:	4632      	mov	r2, r6
 80132d2:	463b      	mov	r3, r7
 80132d4:	f7ed f934 	bl	8000540 <__aeabi_dmul>
 80132d8:	a337      	add	r3, pc, #220	; (adr r3, 80133b8 <__ieee754_asin+0x300>)
 80132da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132de:	f7ec ff77 	bl	80001d0 <__aeabi_dsub>
 80132e2:	4632      	mov	r2, r6
 80132e4:	463b      	mov	r3, r7
 80132e6:	f7ed f92b 	bl	8000540 <__aeabi_dmul>
 80132ea:	a335      	add	r3, pc, #212	; (adr r3, 80133c0 <__ieee754_asin+0x308>)
 80132ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132f0:	f7ec ff70 	bl	80001d4 <__adddf3>
 80132f4:	4632      	mov	r2, r6
 80132f6:	463b      	mov	r3, r7
 80132f8:	f7ed f922 	bl	8000540 <__aeabi_dmul>
 80132fc:	a332      	add	r3, pc, #200	; (adr r3, 80133c8 <__ieee754_asin+0x310>)
 80132fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013302:	f7ec ff65 	bl	80001d0 <__aeabi_dsub>
 8013306:	4632      	mov	r2, r6
 8013308:	463b      	mov	r3, r7
 801330a:	f7ed f919 	bl	8000540 <__aeabi_dmul>
 801330e:	a330      	add	r3, pc, #192	; (adr r3, 80133d0 <__ieee754_asin+0x318>)
 8013310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013314:	f7ec ff5e 	bl	80001d4 <__adddf3>
 8013318:	4632      	mov	r2, r6
 801331a:	463b      	mov	r3, r7
 801331c:	f7ed f910 	bl	8000540 <__aeabi_dmul>
 8013320:	a32d      	add	r3, pc, #180	; (adr r3, 80133d8 <__ieee754_asin+0x320>)
 8013322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013326:	4680      	mov	r8, r0
 8013328:	4689      	mov	r9, r1
 801332a:	4630      	mov	r0, r6
 801332c:	4639      	mov	r1, r7
 801332e:	f7ed f907 	bl	8000540 <__aeabi_dmul>
 8013332:	a32b      	add	r3, pc, #172	; (adr r3, 80133e0 <__ieee754_asin+0x328>)
 8013334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013338:	f7ec ff4a 	bl	80001d0 <__aeabi_dsub>
 801333c:	4632      	mov	r2, r6
 801333e:	463b      	mov	r3, r7
 8013340:	f7ed f8fe 	bl	8000540 <__aeabi_dmul>
 8013344:	a328      	add	r3, pc, #160	; (adr r3, 80133e8 <__ieee754_asin+0x330>)
 8013346:	e9d3 2300 	ldrd	r2, r3, [r3]
 801334a:	f7ec ff43 	bl	80001d4 <__adddf3>
 801334e:	4632      	mov	r2, r6
 8013350:	463b      	mov	r3, r7
 8013352:	f7ed f8f5 	bl	8000540 <__aeabi_dmul>
 8013356:	a326      	add	r3, pc, #152	; (adr r3, 80133f0 <__ieee754_asin+0x338>)
 8013358:	e9d3 2300 	ldrd	r2, r3, [r3]
 801335c:	f7ec ff38 	bl	80001d0 <__aeabi_dsub>
 8013360:	4632      	mov	r2, r6
 8013362:	463b      	mov	r3, r7
 8013364:	f7ed f8ec 	bl	8000540 <__aeabi_dmul>
 8013368:	4b25      	ldr	r3, [pc, #148]	; (8013400 <__ieee754_asin+0x348>)
 801336a:	2200      	movs	r2, #0
 801336c:	f7ec ff32 	bl	80001d4 <__adddf3>
 8013370:	4602      	mov	r2, r0
 8013372:	460b      	mov	r3, r1
 8013374:	4640      	mov	r0, r8
 8013376:	4649      	mov	r1, r9
 8013378:	f7ed fa0c 	bl	8000794 <__aeabi_ddiv>
 801337c:	4622      	mov	r2, r4
 801337e:	462b      	mov	r3, r5
 8013380:	f7ed f8de 	bl	8000540 <__aeabi_dmul>
 8013384:	4602      	mov	r2, r0
 8013386:	460b      	mov	r3, r1
 8013388:	4620      	mov	r0, r4
 801338a:	4629      	mov	r1, r5
 801338c:	e6bf      	b.n	801310e <__ieee754_asin+0x56>
 801338e:	bf00      	nop
 8013390:	54442d18 	.word	0x54442d18
 8013394:	3ff921fb 	.word	0x3ff921fb
 8013398:	33145c07 	.word	0x33145c07
 801339c:	3c91a626 	.word	0x3c91a626
 80133a0:	8800759c 	.word	0x8800759c
 80133a4:	7e37e43c 	.word	0x7e37e43c
 80133a8:	0dfdf709 	.word	0x0dfdf709
 80133ac:	3f023de1 	.word	0x3f023de1
 80133b0:	7501b288 	.word	0x7501b288
 80133b4:	3f49efe0 	.word	0x3f49efe0
 80133b8:	b5688f3b 	.word	0xb5688f3b
 80133bc:	3fa48228 	.word	0x3fa48228
 80133c0:	0e884455 	.word	0x0e884455
 80133c4:	3fc9c155 	.word	0x3fc9c155
 80133c8:	03eb6f7d 	.word	0x03eb6f7d
 80133cc:	3fd4d612 	.word	0x3fd4d612
 80133d0:	55555555 	.word	0x55555555
 80133d4:	3fc55555 	.word	0x3fc55555
 80133d8:	b12e9282 	.word	0xb12e9282
 80133dc:	3fb3b8c5 	.word	0x3fb3b8c5
 80133e0:	1b8d0159 	.word	0x1b8d0159
 80133e4:	3fe6066c 	.word	0x3fe6066c
 80133e8:	9c598ac8 	.word	0x9c598ac8
 80133ec:	40002ae5 	.word	0x40002ae5
 80133f0:	1c8a2d4b 	.word	0x1c8a2d4b
 80133f4:	40033a27 	.word	0x40033a27
 80133f8:	3fefffff 	.word	0x3fefffff
 80133fc:	3fdfffff 	.word	0x3fdfffff
 8013400:	3ff00000 	.word	0x3ff00000
 8013404:	3fe00000 	.word	0x3fe00000
 8013408:	3fef3332 	.word	0x3fef3332
 801340c:	ee10 2a10 	vmov	r2, s0
 8013410:	ee10 0a10 	vmov	r0, s0
 8013414:	465b      	mov	r3, fp
 8013416:	4659      	mov	r1, fp
 8013418:	f7ec fedc 	bl	80001d4 <__adddf3>
 801341c:	4632      	mov	r2, r6
 801341e:	463b      	mov	r3, r7
 8013420:	ec41 0b19 	vmov	d9, r0, r1
 8013424:	ec51 0b18 	vmov	r0, r1, d8
 8013428:	f7ed f9b4 	bl	8000794 <__aeabi_ddiv>
 801342c:	4602      	mov	r2, r0
 801342e:	460b      	mov	r3, r1
 8013430:	ec51 0b19 	vmov	r0, r1, d9
 8013434:	f7ed f884 	bl	8000540 <__aeabi_dmul>
 8013438:	f04f 0800 	mov.w	r8, #0
 801343c:	4606      	mov	r6, r0
 801343e:	460f      	mov	r7, r1
 8013440:	4642      	mov	r2, r8
 8013442:	465b      	mov	r3, fp
 8013444:	4640      	mov	r0, r8
 8013446:	4659      	mov	r1, fp
 8013448:	f7ed f87a 	bl	8000540 <__aeabi_dmul>
 801344c:	4602      	mov	r2, r0
 801344e:	460b      	mov	r3, r1
 8013450:	4620      	mov	r0, r4
 8013452:	4629      	mov	r1, r5
 8013454:	f7ec febc 	bl	80001d0 <__aeabi_dsub>
 8013458:	4642      	mov	r2, r8
 801345a:	4604      	mov	r4, r0
 801345c:	460d      	mov	r5, r1
 801345e:	465b      	mov	r3, fp
 8013460:	4650      	mov	r0, sl
 8013462:	4659      	mov	r1, fp
 8013464:	f7ec feb6 	bl	80001d4 <__adddf3>
 8013468:	4602      	mov	r2, r0
 801346a:	460b      	mov	r3, r1
 801346c:	4620      	mov	r0, r4
 801346e:	4629      	mov	r1, r5
 8013470:	f7ed f990 	bl	8000794 <__aeabi_ddiv>
 8013474:	4602      	mov	r2, r0
 8013476:	460b      	mov	r3, r1
 8013478:	f7ec feac 	bl	80001d4 <__adddf3>
 801347c:	4602      	mov	r2, r0
 801347e:	460b      	mov	r3, r1
 8013480:	a113      	add	r1, pc, #76	; (adr r1, 80134d0 <__ieee754_asin+0x418>)
 8013482:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013486:	f7ec fea3 	bl	80001d0 <__aeabi_dsub>
 801348a:	4602      	mov	r2, r0
 801348c:	460b      	mov	r3, r1
 801348e:	4630      	mov	r0, r6
 8013490:	4639      	mov	r1, r7
 8013492:	f7ec fe9d 	bl	80001d0 <__aeabi_dsub>
 8013496:	4642      	mov	r2, r8
 8013498:	4604      	mov	r4, r0
 801349a:	460d      	mov	r5, r1
 801349c:	465b      	mov	r3, fp
 801349e:	4640      	mov	r0, r8
 80134a0:	4659      	mov	r1, fp
 80134a2:	f7ec fe97 	bl	80001d4 <__adddf3>
 80134a6:	4602      	mov	r2, r0
 80134a8:	460b      	mov	r3, r1
 80134aa:	a10b      	add	r1, pc, #44	; (adr r1, 80134d8 <__ieee754_asin+0x420>)
 80134ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80134b0:	f7ec fe8e 	bl	80001d0 <__aeabi_dsub>
 80134b4:	4602      	mov	r2, r0
 80134b6:	460b      	mov	r3, r1
 80134b8:	4620      	mov	r0, r4
 80134ba:	4629      	mov	r1, r5
 80134bc:	f7ec fe88 	bl	80001d0 <__aeabi_dsub>
 80134c0:	4602      	mov	r2, r0
 80134c2:	460b      	mov	r3, r1
 80134c4:	a104      	add	r1, pc, #16	; (adr r1, 80134d8 <__ieee754_asin+0x420>)
 80134c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80134ca:	e6df      	b.n	801328c <__ieee754_asin+0x1d4>
 80134cc:	f3af 8000 	nop.w
 80134d0:	33145c07 	.word	0x33145c07
 80134d4:	3c91a626 	.word	0x3c91a626
 80134d8:	54442d18 	.word	0x54442d18
 80134dc:	3fe921fb 	.word	0x3fe921fb

080134e0 <__ieee754_atan2>:
 80134e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80134e4:	ec57 6b11 	vmov	r6, r7, d1
 80134e8:	4273      	negs	r3, r6
 80134ea:	f8df e184 	ldr.w	lr, [pc, #388]	; 8013670 <__ieee754_atan2+0x190>
 80134ee:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80134f2:	4333      	orrs	r3, r6
 80134f4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80134f8:	4573      	cmp	r3, lr
 80134fa:	ec51 0b10 	vmov	r0, r1, d0
 80134fe:	ee11 8a10 	vmov	r8, s2
 8013502:	d80a      	bhi.n	801351a <__ieee754_atan2+0x3a>
 8013504:	4244      	negs	r4, r0
 8013506:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801350a:	4304      	orrs	r4, r0
 801350c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8013510:	4574      	cmp	r4, lr
 8013512:	ee10 9a10 	vmov	r9, s0
 8013516:	468c      	mov	ip, r1
 8013518:	d907      	bls.n	801352a <__ieee754_atan2+0x4a>
 801351a:	4632      	mov	r2, r6
 801351c:	463b      	mov	r3, r7
 801351e:	f7ec fe59 	bl	80001d4 <__adddf3>
 8013522:	ec41 0b10 	vmov	d0, r0, r1
 8013526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801352a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801352e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8013532:	4334      	orrs	r4, r6
 8013534:	d103      	bne.n	801353e <__ieee754_atan2+0x5e>
 8013536:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801353a:	f001 b939 	b.w	80147b0 <atan>
 801353e:	17bc      	asrs	r4, r7, #30
 8013540:	f004 0402 	and.w	r4, r4, #2
 8013544:	ea53 0909 	orrs.w	r9, r3, r9
 8013548:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801354c:	d107      	bne.n	801355e <__ieee754_atan2+0x7e>
 801354e:	2c02      	cmp	r4, #2
 8013550:	d060      	beq.n	8013614 <__ieee754_atan2+0x134>
 8013552:	2c03      	cmp	r4, #3
 8013554:	d1e5      	bne.n	8013522 <__ieee754_atan2+0x42>
 8013556:	a142      	add	r1, pc, #264	; (adr r1, 8013660 <__ieee754_atan2+0x180>)
 8013558:	e9d1 0100 	ldrd	r0, r1, [r1]
 801355c:	e7e1      	b.n	8013522 <__ieee754_atan2+0x42>
 801355e:	ea52 0808 	orrs.w	r8, r2, r8
 8013562:	d106      	bne.n	8013572 <__ieee754_atan2+0x92>
 8013564:	f1bc 0f00 	cmp.w	ip, #0
 8013568:	da5f      	bge.n	801362a <__ieee754_atan2+0x14a>
 801356a:	a13f      	add	r1, pc, #252	; (adr r1, 8013668 <__ieee754_atan2+0x188>)
 801356c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013570:	e7d7      	b.n	8013522 <__ieee754_atan2+0x42>
 8013572:	4572      	cmp	r2, lr
 8013574:	d10f      	bne.n	8013596 <__ieee754_atan2+0xb6>
 8013576:	4293      	cmp	r3, r2
 8013578:	f104 34ff 	add.w	r4, r4, #4294967295
 801357c:	d107      	bne.n	801358e <__ieee754_atan2+0xae>
 801357e:	2c02      	cmp	r4, #2
 8013580:	d84c      	bhi.n	801361c <__ieee754_atan2+0x13c>
 8013582:	4b35      	ldr	r3, [pc, #212]	; (8013658 <__ieee754_atan2+0x178>)
 8013584:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8013588:	e9d4 0100 	ldrd	r0, r1, [r4]
 801358c:	e7c9      	b.n	8013522 <__ieee754_atan2+0x42>
 801358e:	2c02      	cmp	r4, #2
 8013590:	d848      	bhi.n	8013624 <__ieee754_atan2+0x144>
 8013592:	4b32      	ldr	r3, [pc, #200]	; (801365c <__ieee754_atan2+0x17c>)
 8013594:	e7f6      	b.n	8013584 <__ieee754_atan2+0xa4>
 8013596:	4573      	cmp	r3, lr
 8013598:	d0e4      	beq.n	8013564 <__ieee754_atan2+0x84>
 801359a:	1a9b      	subs	r3, r3, r2
 801359c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80135a0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80135a4:	da1e      	bge.n	80135e4 <__ieee754_atan2+0x104>
 80135a6:	2f00      	cmp	r7, #0
 80135a8:	da01      	bge.n	80135ae <__ieee754_atan2+0xce>
 80135aa:	323c      	adds	r2, #60	; 0x3c
 80135ac:	db1e      	blt.n	80135ec <__ieee754_atan2+0x10c>
 80135ae:	4632      	mov	r2, r6
 80135b0:	463b      	mov	r3, r7
 80135b2:	f7ed f8ef 	bl	8000794 <__aeabi_ddiv>
 80135b6:	ec41 0b10 	vmov	d0, r0, r1
 80135ba:	f001 fa99 	bl	8014af0 <fabs>
 80135be:	f001 f8f7 	bl	80147b0 <atan>
 80135c2:	ec51 0b10 	vmov	r0, r1, d0
 80135c6:	2c01      	cmp	r4, #1
 80135c8:	d013      	beq.n	80135f2 <__ieee754_atan2+0x112>
 80135ca:	2c02      	cmp	r4, #2
 80135cc:	d015      	beq.n	80135fa <__ieee754_atan2+0x11a>
 80135ce:	2c00      	cmp	r4, #0
 80135d0:	d0a7      	beq.n	8013522 <__ieee754_atan2+0x42>
 80135d2:	a319      	add	r3, pc, #100	; (adr r3, 8013638 <__ieee754_atan2+0x158>)
 80135d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135d8:	f7ec fdfa 	bl	80001d0 <__aeabi_dsub>
 80135dc:	a318      	add	r3, pc, #96	; (adr r3, 8013640 <__ieee754_atan2+0x160>)
 80135de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135e2:	e014      	b.n	801360e <__ieee754_atan2+0x12e>
 80135e4:	a118      	add	r1, pc, #96	; (adr r1, 8013648 <__ieee754_atan2+0x168>)
 80135e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80135ea:	e7ec      	b.n	80135c6 <__ieee754_atan2+0xe6>
 80135ec:	2000      	movs	r0, #0
 80135ee:	2100      	movs	r1, #0
 80135f0:	e7e9      	b.n	80135c6 <__ieee754_atan2+0xe6>
 80135f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80135f6:	4619      	mov	r1, r3
 80135f8:	e793      	b.n	8013522 <__ieee754_atan2+0x42>
 80135fa:	a30f      	add	r3, pc, #60	; (adr r3, 8013638 <__ieee754_atan2+0x158>)
 80135fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013600:	f7ec fde6 	bl	80001d0 <__aeabi_dsub>
 8013604:	4602      	mov	r2, r0
 8013606:	460b      	mov	r3, r1
 8013608:	a10d      	add	r1, pc, #52	; (adr r1, 8013640 <__ieee754_atan2+0x160>)
 801360a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801360e:	f7ec fddf 	bl	80001d0 <__aeabi_dsub>
 8013612:	e786      	b.n	8013522 <__ieee754_atan2+0x42>
 8013614:	a10a      	add	r1, pc, #40	; (adr r1, 8013640 <__ieee754_atan2+0x160>)
 8013616:	e9d1 0100 	ldrd	r0, r1, [r1]
 801361a:	e782      	b.n	8013522 <__ieee754_atan2+0x42>
 801361c:	a10c      	add	r1, pc, #48	; (adr r1, 8013650 <__ieee754_atan2+0x170>)
 801361e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013622:	e77e      	b.n	8013522 <__ieee754_atan2+0x42>
 8013624:	2000      	movs	r0, #0
 8013626:	2100      	movs	r1, #0
 8013628:	e77b      	b.n	8013522 <__ieee754_atan2+0x42>
 801362a:	a107      	add	r1, pc, #28	; (adr r1, 8013648 <__ieee754_atan2+0x168>)
 801362c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013630:	e777      	b.n	8013522 <__ieee754_atan2+0x42>
 8013632:	bf00      	nop
 8013634:	f3af 8000 	nop.w
 8013638:	33145c07 	.word	0x33145c07
 801363c:	3ca1a626 	.word	0x3ca1a626
 8013640:	54442d18 	.word	0x54442d18
 8013644:	400921fb 	.word	0x400921fb
 8013648:	54442d18 	.word	0x54442d18
 801364c:	3ff921fb 	.word	0x3ff921fb
 8013650:	54442d18 	.word	0x54442d18
 8013654:	3fe921fb 	.word	0x3fe921fb
 8013658:	08014ee0 	.word	0x08014ee0
 801365c:	08014ef8 	.word	0x08014ef8
 8013660:	54442d18 	.word	0x54442d18
 8013664:	c00921fb 	.word	0xc00921fb
 8013668:	54442d18 	.word	0x54442d18
 801366c:	bff921fb 	.word	0xbff921fb
 8013670:	7ff00000 	.word	0x7ff00000
 8013674:	00000000 	.word	0x00000000

08013678 <__ieee754_exp>:
 8013678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801367c:	ec55 4b10 	vmov	r4, r5, d0
 8013680:	49b5      	ldr	r1, [pc, #724]	; (8013958 <__ieee754_exp+0x2e0>)
 8013682:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013686:	428b      	cmp	r3, r1
 8013688:	ed2d 8b04 	vpush	{d8-d9}
 801368c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8013690:	d93d      	bls.n	801370e <__ieee754_exp+0x96>
 8013692:	49b2      	ldr	r1, [pc, #712]	; (801395c <__ieee754_exp+0x2e4>)
 8013694:	428b      	cmp	r3, r1
 8013696:	d918      	bls.n	80136ca <__ieee754_exp+0x52>
 8013698:	ee10 3a10 	vmov	r3, s0
 801369c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 80136a0:	4313      	orrs	r3, r2
 80136a2:	d009      	beq.n	80136b8 <__ieee754_exp+0x40>
 80136a4:	ee10 2a10 	vmov	r2, s0
 80136a8:	462b      	mov	r3, r5
 80136aa:	4620      	mov	r0, r4
 80136ac:	4629      	mov	r1, r5
 80136ae:	f7ec fd91 	bl	80001d4 <__adddf3>
 80136b2:	4604      	mov	r4, r0
 80136b4:	460d      	mov	r5, r1
 80136b6:	e002      	b.n	80136be <__ieee754_exp+0x46>
 80136b8:	b10e      	cbz	r6, 80136be <__ieee754_exp+0x46>
 80136ba:	2400      	movs	r4, #0
 80136bc:	2500      	movs	r5, #0
 80136be:	ecbd 8b04 	vpop	{d8-d9}
 80136c2:	ec45 4b10 	vmov	d0, r4, r5
 80136c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136ca:	a38d      	add	r3, pc, #564	; (adr r3, 8013900 <__ieee754_exp+0x288>)
 80136cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136d0:	ee10 0a10 	vmov	r0, s0
 80136d4:	4629      	mov	r1, r5
 80136d6:	f7ed f9c3 	bl	8000a60 <__aeabi_dcmpgt>
 80136da:	4607      	mov	r7, r0
 80136dc:	b130      	cbz	r0, 80136ec <__ieee754_exp+0x74>
 80136de:	ecbd 8b04 	vpop	{d8-d9}
 80136e2:	2000      	movs	r0, #0
 80136e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136e8:	f001 b857 	b.w	801479a <__math_oflow>
 80136ec:	a386      	add	r3, pc, #536	; (adr r3, 8013908 <__ieee754_exp+0x290>)
 80136ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80136f2:	4620      	mov	r0, r4
 80136f4:	4629      	mov	r1, r5
 80136f6:	f7ed f995 	bl	8000a24 <__aeabi_dcmplt>
 80136fa:	2800      	cmp	r0, #0
 80136fc:	f000 808b 	beq.w	8013816 <__ieee754_exp+0x19e>
 8013700:	ecbd 8b04 	vpop	{d8-d9}
 8013704:	4638      	mov	r0, r7
 8013706:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801370a:	f001 b83d 	b.w	8014788 <__math_uflow>
 801370e:	4a94      	ldr	r2, [pc, #592]	; (8013960 <__ieee754_exp+0x2e8>)
 8013710:	4293      	cmp	r3, r2
 8013712:	f240 80ac 	bls.w	801386e <__ieee754_exp+0x1f6>
 8013716:	4a93      	ldr	r2, [pc, #588]	; (8013964 <__ieee754_exp+0x2ec>)
 8013718:	4293      	cmp	r3, r2
 801371a:	d87c      	bhi.n	8013816 <__ieee754_exp+0x19e>
 801371c:	4b92      	ldr	r3, [pc, #584]	; (8013968 <__ieee754_exp+0x2f0>)
 801371e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013726:	ee10 0a10 	vmov	r0, s0
 801372a:	4629      	mov	r1, r5
 801372c:	f7ec fd50 	bl	80001d0 <__aeabi_dsub>
 8013730:	4b8e      	ldr	r3, [pc, #568]	; (801396c <__ieee754_exp+0x2f4>)
 8013732:	00f7      	lsls	r7, r6, #3
 8013734:	443b      	add	r3, r7
 8013736:	ed93 7b00 	vldr	d7, [r3]
 801373a:	f1c6 0a01 	rsb	sl, r6, #1
 801373e:	4680      	mov	r8, r0
 8013740:	4689      	mov	r9, r1
 8013742:	ebaa 0a06 	sub.w	sl, sl, r6
 8013746:	eeb0 8a47 	vmov.f32	s16, s14
 801374a:	eef0 8a67 	vmov.f32	s17, s15
 801374e:	ec53 2b18 	vmov	r2, r3, d8
 8013752:	4640      	mov	r0, r8
 8013754:	4649      	mov	r1, r9
 8013756:	f7ec fd3b 	bl	80001d0 <__aeabi_dsub>
 801375a:	4604      	mov	r4, r0
 801375c:	460d      	mov	r5, r1
 801375e:	4622      	mov	r2, r4
 8013760:	462b      	mov	r3, r5
 8013762:	4620      	mov	r0, r4
 8013764:	4629      	mov	r1, r5
 8013766:	f7ec feeb 	bl	8000540 <__aeabi_dmul>
 801376a:	a369      	add	r3, pc, #420	; (adr r3, 8013910 <__ieee754_exp+0x298>)
 801376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013770:	4606      	mov	r6, r0
 8013772:	460f      	mov	r7, r1
 8013774:	f7ec fee4 	bl	8000540 <__aeabi_dmul>
 8013778:	a367      	add	r3, pc, #412	; (adr r3, 8013918 <__ieee754_exp+0x2a0>)
 801377a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801377e:	f7ec fd27 	bl	80001d0 <__aeabi_dsub>
 8013782:	4632      	mov	r2, r6
 8013784:	463b      	mov	r3, r7
 8013786:	f7ec fedb 	bl	8000540 <__aeabi_dmul>
 801378a:	a365      	add	r3, pc, #404	; (adr r3, 8013920 <__ieee754_exp+0x2a8>)
 801378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013790:	f7ec fd20 	bl	80001d4 <__adddf3>
 8013794:	4632      	mov	r2, r6
 8013796:	463b      	mov	r3, r7
 8013798:	f7ec fed2 	bl	8000540 <__aeabi_dmul>
 801379c:	a362      	add	r3, pc, #392	; (adr r3, 8013928 <__ieee754_exp+0x2b0>)
 801379e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137a2:	f7ec fd15 	bl	80001d0 <__aeabi_dsub>
 80137a6:	4632      	mov	r2, r6
 80137a8:	463b      	mov	r3, r7
 80137aa:	f7ec fec9 	bl	8000540 <__aeabi_dmul>
 80137ae:	a360      	add	r3, pc, #384	; (adr r3, 8013930 <__ieee754_exp+0x2b8>)
 80137b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80137b4:	f7ec fd0e 	bl	80001d4 <__adddf3>
 80137b8:	4632      	mov	r2, r6
 80137ba:	463b      	mov	r3, r7
 80137bc:	f7ec fec0 	bl	8000540 <__aeabi_dmul>
 80137c0:	4602      	mov	r2, r0
 80137c2:	460b      	mov	r3, r1
 80137c4:	4620      	mov	r0, r4
 80137c6:	4629      	mov	r1, r5
 80137c8:	f7ec fd02 	bl	80001d0 <__aeabi_dsub>
 80137cc:	4602      	mov	r2, r0
 80137ce:	460b      	mov	r3, r1
 80137d0:	4606      	mov	r6, r0
 80137d2:	460f      	mov	r7, r1
 80137d4:	4620      	mov	r0, r4
 80137d6:	4629      	mov	r1, r5
 80137d8:	f7ec feb2 	bl	8000540 <__aeabi_dmul>
 80137dc:	ec41 0b19 	vmov	d9, r0, r1
 80137e0:	f1ba 0f00 	cmp.w	sl, #0
 80137e4:	d15d      	bne.n	80138a2 <__ieee754_exp+0x22a>
 80137e6:	2200      	movs	r2, #0
 80137e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80137ec:	4630      	mov	r0, r6
 80137ee:	4639      	mov	r1, r7
 80137f0:	f7ec fcee 	bl	80001d0 <__aeabi_dsub>
 80137f4:	4602      	mov	r2, r0
 80137f6:	460b      	mov	r3, r1
 80137f8:	ec51 0b19 	vmov	r0, r1, d9
 80137fc:	f7ec ffca 	bl	8000794 <__aeabi_ddiv>
 8013800:	4622      	mov	r2, r4
 8013802:	462b      	mov	r3, r5
 8013804:	f7ec fce4 	bl	80001d0 <__aeabi_dsub>
 8013808:	4602      	mov	r2, r0
 801380a:	460b      	mov	r3, r1
 801380c:	2000      	movs	r0, #0
 801380e:	4958      	ldr	r1, [pc, #352]	; (8013970 <__ieee754_exp+0x2f8>)
 8013810:	f7ec fcde 	bl	80001d0 <__aeabi_dsub>
 8013814:	e74d      	b.n	80136b2 <__ieee754_exp+0x3a>
 8013816:	4857      	ldr	r0, [pc, #348]	; (8013974 <__ieee754_exp+0x2fc>)
 8013818:	a347      	add	r3, pc, #284	; (adr r3, 8013938 <__ieee754_exp+0x2c0>)
 801381a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801381e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8013822:	4629      	mov	r1, r5
 8013824:	4620      	mov	r0, r4
 8013826:	f7ec fe8b 	bl	8000540 <__aeabi_dmul>
 801382a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801382e:	f7ec fcd1 	bl	80001d4 <__adddf3>
 8013832:	f7ed f935 	bl	8000aa0 <__aeabi_d2iz>
 8013836:	4682      	mov	sl, r0
 8013838:	f7ec fe18 	bl	800046c <__aeabi_i2d>
 801383c:	a340      	add	r3, pc, #256	; (adr r3, 8013940 <__ieee754_exp+0x2c8>)
 801383e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013842:	4606      	mov	r6, r0
 8013844:	460f      	mov	r7, r1
 8013846:	f7ec fe7b 	bl	8000540 <__aeabi_dmul>
 801384a:	4602      	mov	r2, r0
 801384c:	460b      	mov	r3, r1
 801384e:	4620      	mov	r0, r4
 8013850:	4629      	mov	r1, r5
 8013852:	f7ec fcbd 	bl	80001d0 <__aeabi_dsub>
 8013856:	a33c      	add	r3, pc, #240	; (adr r3, 8013948 <__ieee754_exp+0x2d0>)
 8013858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801385c:	4680      	mov	r8, r0
 801385e:	4689      	mov	r9, r1
 8013860:	4630      	mov	r0, r6
 8013862:	4639      	mov	r1, r7
 8013864:	f7ec fe6c 	bl	8000540 <__aeabi_dmul>
 8013868:	ec41 0b18 	vmov	d8, r0, r1
 801386c:	e76f      	b.n	801374e <__ieee754_exp+0xd6>
 801386e:	4a42      	ldr	r2, [pc, #264]	; (8013978 <__ieee754_exp+0x300>)
 8013870:	4293      	cmp	r3, r2
 8013872:	d811      	bhi.n	8013898 <__ieee754_exp+0x220>
 8013874:	a336      	add	r3, pc, #216	; (adr r3, 8013950 <__ieee754_exp+0x2d8>)
 8013876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801387a:	ee10 0a10 	vmov	r0, s0
 801387e:	4629      	mov	r1, r5
 8013880:	f7ec fca8 	bl	80001d4 <__adddf3>
 8013884:	4b3a      	ldr	r3, [pc, #232]	; (8013970 <__ieee754_exp+0x2f8>)
 8013886:	2200      	movs	r2, #0
 8013888:	f7ed f8ea 	bl	8000a60 <__aeabi_dcmpgt>
 801388c:	b138      	cbz	r0, 801389e <__ieee754_exp+0x226>
 801388e:	4b38      	ldr	r3, [pc, #224]	; (8013970 <__ieee754_exp+0x2f8>)
 8013890:	2200      	movs	r2, #0
 8013892:	4620      	mov	r0, r4
 8013894:	4629      	mov	r1, r5
 8013896:	e70a      	b.n	80136ae <__ieee754_exp+0x36>
 8013898:	f04f 0a00 	mov.w	sl, #0
 801389c:	e75f      	b.n	801375e <__ieee754_exp+0xe6>
 801389e:	4682      	mov	sl, r0
 80138a0:	e75d      	b.n	801375e <__ieee754_exp+0xe6>
 80138a2:	4632      	mov	r2, r6
 80138a4:	463b      	mov	r3, r7
 80138a6:	2000      	movs	r0, #0
 80138a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80138ac:	f7ec fc90 	bl	80001d0 <__aeabi_dsub>
 80138b0:	4602      	mov	r2, r0
 80138b2:	460b      	mov	r3, r1
 80138b4:	ec51 0b19 	vmov	r0, r1, d9
 80138b8:	f7ec ff6c 	bl	8000794 <__aeabi_ddiv>
 80138bc:	4602      	mov	r2, r0
 80138be:	460b      	mov	r3, r1
 80138c0:	ec51 0b18 	vmov	r0, r1, d8
 80138c4:	f7ec fc84 	bl	80001d0 <__aeabi_dsub>
 80138c8:	4642      	mov	r2, r8
 80138ca:	464b      	mov	r3, r9
 80138cc:	f7ec fc80 	bl	80001d0 <__aeabi_dsub>
 80138d0:	4602      	mov	r2, r0
 80138d2:	460b      	mov	r3, r1
 80138d4:	2000      	movs	r0, #0
 80138d6:	4926      	ldr	r1, [pc, #152]	; (8013970 <__ieee754_exp+0x2f8>)
 80138d8:	f7ec fc7a 	bl	80001d0 <__aeabi_dsub>
 80138dc:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80138e0:	4592      	cmp	sl, r2
 80138e2:	db02      	blt.n	80138ea <__ieee754_exp+0x272>
 80138e4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80138e8:	e6e3      	b.n	80136b2 <__ieee754_exp+0x3a>
 80138ea:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80138ee:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80138f2:	2200      	movs	r2, #0
 80138f4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80138f8:	f7ec fe22 	bl	8000540 <__aeabi_dmul>
 80138fc:	e6d9      	b.n	80136b2 <__ieee754_exp+0x3a>
 80138fe:	bf00      	nop
 8013900:	fefa39ef 	.word	0xfefa39ef
 8013904:	40862e42 	.word	0x40862e42
 8013908:	d52d3051 	.word	0xd52d3051
 801390c:	c0874910 	.word	0xc0874910
 8013910:	72bea4d0 	.word	0x72bea4d0
 8013914:	3e663769 	.word	0x3e663769
 8013918:	c5d26bf1 	.word	0xc5d26bf1
 801391c:	3ebbbd41 	.word	0x3ebbbd41
 8013920:	af25de2c 	.word	0xaf25de2c
 8013924:	3f11566a 	.word	0x3f11566a
 8013928:	16bebd93 	.word	0x16bebd93
 801392c:	3f66c16c 	.word	0x3f66c16c
 8013930:	5555553e 	.word	0x5555553e
 8013934:	3fc55555 	.word	0x3fc55555
 8013938:	652b82fe 	.word	0x652b82fe
 801393c:	3ff71547 	.word	0x3ff71547
 8013940:	fee00000 	.word	0xfee00000
 8013944:	3fe62e42 	.word	0x3fe62e42
 8013948:	35793c76 	.word	0x35793c76
 801394c:	3dea39ef 	.word	0x3dea39ef
 8013950:	8800759c 	.word	0x8800759c
 8013954:	7e37e43c 	.word	0x7e37e43c
 8013958:	40862e41 	.word	0x40862e41
 801395c:	7fefffff 	.word	0x7fefffff
 8013960:	3fd62e42 	.word	0x3fd62e42
 8013964:	3ff0a2b1 	.word	0x3ff0a2b1
 8013968:	08014f20 	.word	0x08014f20
 801396c:	08014f30 	.word	0x08014f30
 8013970:	3ff00000 	.word	0x3ff00000
 8013974:	08014f10 	.word	0x08014f10
 8013978:	3defffff 	.word	0x3defffff

0801397c <__ieee754_sqrt>:
 801397c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013980:	ec55 4b10 	vmov	r4, r5, d0
 8013984:	4e55      	ldr	r6, [pc, #340]	; (8013adc <__ieee754_sqrt+0x160>)
 8013986:	43ae      	bics	r6, r5
 8013988:	ee10 0a10 	vmov	r0, s0
 801398c:	ee10 3a10 	vmov	r3, s0
 8013990:	462a      	mov	r2, r5
 8013992:	4629      	mov	r1, r5
 8013994:	d110      	bne.n	80139b8 <__ieee754_sqrt+0x3c>
 8013996:	ee10 2a10 	vmov	r2, s0
 801399a:	462b      	mov	r3, r5
 801399c:	f7ec fdd0 	bl	8000540 <__aeabi_dmul>
 80139a0:	4602      	mov	r2, r0
 80139a2:	460b      	mov	r3, r1
 80139a4:	4620      	mov	r0, r4
 80139a6:	4629      	mov	r1, r5
 80139a8:	f7ec fc14 	bl	80001d4 <__adddf3>
 80139ac:	4604      	mov	r4, r0
 80139ae:	460d      	mov	r5, r1
 80139b0:	ec45 4b10 	vmov	d0, r4, r5
 80139b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139b8:	2d00      	cmp	r5, #0
 80139ba:	dc10      	bgt.n	80139de <__ieee754_sqrt+0x62>
 80139bc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80139c0:	4330      	orrs	r0, r6
 80139c2:	d0f5      	beq.n	80139b0 <__ieee754_sqrt+0x34>
 80139c4:	b15d      	cbz	r5, 80139de <__ieee754_sqrt+0x62>
 80139c6:	ee10 2a10 	vmov	r2, s0
 80139ca:	462b      	mov	r3, r5
 80139cc:	ee10 0a10 	vmov	r0, s0
 80139d0:	f7ec fbfe 	bl	80001d0 <__aeabi_dsub>
 80139d4:	4602      	mov	r2, r0
 80139d6:	460b      	mov	r3, r1
 80139d8:	f7ec fedc 	bl	8000794 <__aeabi_ddiv>
 80139dc:	e7e6      	b.n	80139ac <__ieee754_sqrt+0x30>
 80139de:	1512      	asrs	r2, r2, #20
 80139e0:	d074      	beq.n	8013acc <__ieee754_sqrt+0x150>
 80139e2:	07d4      	lsls	r4, r2, #31
 80139e4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80139e8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 80139ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80139f0:	bf5e      	ittt	pl
 80139f2:	0fda      	lsrpl	r2, r3, #31
 80139f4:	005b      	lslpl	r3, r3, #1
 80139f6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 80139fa:	2400      	movs	r4, #0
 80139fc:	0fda      	lsrs	r2, r3, #31
 80139fe:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8013a02:	107f      	asrs	r7, r7, #1
 8013a04:	005b      	lsls	r3, r3, #1
 8013a06:	2516      	movs	r5, #22
 8013a08:	4620      	mov	r0, r4
 8013a0a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8013a0e:	1886      	adds	r6, r0, r2
 8013a10:	428e      	cmp	r6, r1
 8013a12:	bfde      	ittt	le
 8013a14:	1b89      	suble	r1, r1, r6
 8013a16:	18b0      	addle	r0, r6, r2
 8013a18:	18a4      	addle	r4, r4, r2
 8013a1a:	0049      	lsls	r1, r1, #1
 8013a1c:	3d01      	subs	r5, #1
 8013a1e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8013a22:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8013a26:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013a2a:	d1f0      	bne.n	8013a0e <__ieee754_sqrt+0x92>
 8013a2c:	462a      	mov	r2, r5
 8013a2e:	f04f 0e20 	mov.w	lr, #32
 8013a32:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8013a36:	4281      	cmp	r1, r0
 8013a38:	eb06 0c05 	add.w	ip, r6, r5
 8013a3c:	dc02      	bgt.n	8013a44 <__ieee754_sqrt+0xc8>
 8013a3e:	d113      	bne.n	8013a68 <__ieee754_sqrt+0xec>
 8013a40:	459c      	cmp	ip, r3
 8013a42:	d811      	bhi.n	8013a68 <__ieee754_sqrt+0xec>
 8013a44:	f1bc 0f00 	cmp.w	ip, #0
 8013a48:	eb0c 0506 	add.w	r5, ip, r6
 8013a4c:	da43      	bge.n	8013ad6 <__ieee754_sqrt+0x15a>
 8013a4e:	2d00      	cmp	r5, #0
 8013a50:	db41      	blt.n	8013ad6 <__ieee754_sqrt+0x15a>
 8013a52:	f100 0801 	add.w	r8, r0, #1
 8013a56:	1a09      	subs	r1, r1, r0
 8013a58:	459c      	cmp	ip, r3
 8013a5a:	bf88      	it	hi
 8013a5c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8013a60:	eba3 030c 	sub.w	r3, r3, ip
 8013a64:	4432      	add	r2, r6
 8013a66:	4640      	mov	r0, r8
 8013a68:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8013a6c:	f1be 0e01 	subs.w	lr, lr, #1
 8013a70:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8013a74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8013a78:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8013a7c:	d1db      	bne.n	8013a36 <__ieee754_sqrt+0xba>
 8013a7e:	430b      	orrs	r3, r1
 8013a80:	d006      	beq.n	8013a90 <__ieee754_sqrt+0x114>
 8013a82:	1c50      	adds	r0, r2, #1
 8013a84:	bf13      	iteet	ne
 8013a86:	3201      	addne	r2, #1
 8013a88:	3401      	addeq	r4, #1
 8013a8a:	4672      	moveq	r2, lr
 8013a8c:	f022 0201 	bicne.w	r2, r2, #1
 8013a90:	1063      	asrs	r3, r4, #1
 8013a92:	0852      	lsrs	r2, r2, #1
 8013a94:	07e1      	lsls	r1, r4, #31
 8013a96:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8013a9a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8013a9e:	bf48      	it	mi
 8013aa0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8013aa4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8013aa8:	4614      	mov	r4, r2
 8013aaa:	e781      	b.n	80139b0 <__ieee754_sqrt+0x34>
 8013aac:	0ad9      	lsrs	r1, r3, #11
 8013aae:	3815      	subs	r0, #21
 8013ab0:	055b      	lsls	r3, r3, #21
 8013ab2:	2900      	cmp	r1, #0
 8013ab4:	d0fa      	beq.n	8013aac <__ieee754_sqrt+0x130>
 8013ab6:	02cd      	lsls	r5, r1, #11
 8013ab8:	d50a      	bpl.n	8013ad0 <__ieee754_sqrt+0x154>
 8013aba:	f1c2 0420 	rsb	r4, r2, #32
 8013abe:	fa23 f404 	lsr.w	r4, r3, r4
 8013ac2:	1e55      	subs	r5, r2, #1
 8013ac4:	4093      	lsls	r3, r2
 8013ac6:	4321      	orrs	r1, r4
 8013ac8:	1b42      	subs	r2, r0, r5
 8013aca:	e78a      	b.n	80139e2 <__ieee754_sqrt+0x66>
 8013acc:	4610      	mov	r0, r2
 8013ace:	e7f0      	b.n	8013ab2 <__ieee754_sqrt+0x136>
 8013ad0:	0049      	lsls	r1, r1, #1
 8013ad2:	3201      	adds	r2, #1
 8013ad4:	e7ef      	b.n	8013ab6 <__ieee754_sqrt+0x13a>
 8013ad6:	4680      	mov	r8, r0
 8013ad8:	e7bd      	b.n	8013a56 <__ieee754_sqrt+0xda>
 8013ada:	bf00      	nop
 8013adc:	7ff00000 	.word	0x7ff00000

08013ae0 <__ieee754_acosf>:
 8013ae0:	b508      	push	{r3, lr}
 8013ae2:	ee10 3a10 	vmov	r3, s0
 8013ae6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013aea:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8013aee:	ed2d 8b0c 	vpush	{d8-d13}
 8013af2:	d10a      	bne.n	8013b0a <__ieee754_acosf+0x2a>
 8013af4:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8013c8c <__ieee754_acosf+0x1ac>
 8013af8:	ed9f 8a65 	vldr	s16, [pc, #404]	; 8013c90 <__ieee754_acosf+0x1b0>
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	bfd8      	it	le
 8013b00:	eeb0 0a48 	vmovle.f32	s0, s16
 8013b04:	ecbd 8b0c 	vpop	{d8-d13}
 8013b08:	bd08      	pop	{r3, pc}
 8013b0a:	dd04      	ble.n	8013b16 <__ieee754_acosf+0x36>
 8013b0c:	ee30 8a40 	vsub.f32	s16, s0, s0
 8013b10:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8013b14:	e7f6      	b.n	8013b04 <__ieee754_acosf+0x24>
 8013b16:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8013b1a:	da3c      	bge.n	8013b96 <__ieee754_acosf+0xb6>
 8013b1c:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8013b20:	f340 80b1 	ble.w	8013c86 <__ieee754_acosf+0x1a6>
 8013b24:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013b28:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8013c94 <__ieee754_acosf+0x1b4>
 8013b2c:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8013c98 <__ieee754_acosf+0x1b8>
 8013b30:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8013c9c <__ieee754_acosf+0x1bc>
 8013b34:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 8013ca0 <__ieee754_acosf+0x1c0>
 8013b38:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8013b3c:	eddf 6a59 	vldr	s13, [pc, #356]	; 8013ca4 <__ieee754_acosf+0x1c4>
 8013b40:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013b44:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8013ca8 <__ieee754_acosf+0x1c8>
 8013b48:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013b4c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8013cac <__ieee754_acosf+0x1cc>
 8013b50:	eee7 6a27 	vfma.f32	s13, s14, s15
 8013b54:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8013cb0 <__ieee754_acosf+0x1d0>
 8013b58:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8013b5c:	eddf 6a55 	vldr	s13, [pc, #340]	; 8013cb4 <__ieee754_acosf+0x1d4>
 8013b60:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8013b64:	eddf 6a54 	vldr	s13, [pc, #336]	; 8013cb8 <__ieee754_acosf+0x1d8>
 8013b68:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013b6c:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8013cbc <__ieee754_acosf+0x1dc>
 8013b70:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8013b74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013b78:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013b7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8013b80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8013b84:	eea0 8a67 	vfms.f32	s16, s0, s15
 8013b88:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8013cc0 <__ieee754_acosf+0x1e0>
 8013b8c:	ee30 0a48 	vsub.f32	s0, s0, s16
 8013b90:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013b94:	e7b6      	b.n	8013b04 <__ieee754_acosf+0x24>
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	eddf da3e 	vldr	s27, [pc, #248]	; 8013c94 <__ieee754_acosf+0x1b4>
 8013b9c:	eddf ca3e 	vldr	s25, [pc, #248]	; 8013c98 <__ieee754_acosf+0x1b8>
 8013ba0:	ed9f ca40 	vldr	s24, [pc, #256]	; 8013ca4 <__ieee754_acosf+0x1c4>
 8013ba4:	eddf ba40 	vldr	s23, [pc, #256]	; 8013ca8 <__ieee754_acosf+0x1c8>
 8013ba8:	ed9f ba40 	vldr	s22, [pc, #256]	; 8013cac <__ieee754_acosf+0x1cc>
 8013bac:	eddf 8a40 	vldr	s17, [pc, #256]	; 8013cb0 <__ieee754_acosf+0x1d0>
 8013bb0:	ed9f da40 	vldr	s26, [pc, #256]	; 8013cb4 <__ieee754_acosf+0x1d4>
 8013bb4:	eddf aa39 	vldr	s21, [pc, #228]	; 8013c9c <__ieee754_acosf+0x1bc>
 8013bb8:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8013cb8 <__ieee754_acosf+0x1d8>
 8013bbc:	eddf 9a3f 	vldr	s19, [pc, #252]	; 8013cbc <__ieee754_acosf+0x1dc>
 8013bc0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8013bc4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013bc8:	da28      	bge.n	8013c1c <__ieee754_acosf+0x13c>
 8013bca:	ee30 0a09 	vadd.f32	s0, s0, s18
 8013bce:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013bd2:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8013bd6:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8013bda:	eeac ca80 	vfma.f32	s24, s25, s0
 8013bde:	eeaa aa80 	vfma.f32	s20, s21, s0
 8013be2:	eeec ba00 	vfma.f32	s23, s24, s0
 8013be6:	eeea 9a00 	vfma.f32	s19, s20, s0
 8013bea:	eeab ba80 	vfma.f32	s22, s23, s0
 8013bee:	eea9 9a80 	vfma.f32	s18, s19, s0
 8013bf2:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8013bf6:	ee68 8a80 	vmul.f32	s17, s17, s0
 8013bfa:	f000 f9a5 	bl	8013f48 <__ieee754_sqrtf>
 8013bfe:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8013c02:	eddf 7a30 	vldr	s15, [pc, #192]	; 8013cc4 <__ieee754_acosf+0x1e4>
 8013c06:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013c0a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013c0e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013c12:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8013cc8 <__ieee754_acosf+0x1e8>
 8013c16:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8013c1a:	e773      	b.n	8013b04 <__ieee754_acosf+0x24>
 8013c1c:	ee39 8a40 	vsub.f32	s16, s18, s0
 8013c20:	ee28 8a27 	vmul.f32	s16, s16, s15
 8013c24:	eeb0 0a48 	vmov.f32	s0, s16
 8013c28:	f000 f98e 	bl	8013f48 <__ieee754_sqrtf>
 8013c2c:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8013c30:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8013c34:	eeac ca88 	vfma.f32	s24, s25, s16
 8013c38:	eeaa aa88 	vfma.f32	s20, s21, s16
 8013c3c:	eeec ba08 	vfma.f32	s23, s24, s16
 8013c40:	ee10 3a10 	vmov	r3, s0
 8013c44:	eeab ba88 	vfma.f32	s22, s23, s16
 8013c48:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013c4c:	f023 030f 	bic.w	r3, r3, #15
 8013c50:	eeea 9a08 	vfma.f32	s19, s20, s16
 8013c54:	ee07 3a90 	vmov	s15, r3
 8013c58:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8013c5c:	eeb0 6a48 	vmov.f32	s12, s16
 8013c60:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8013c64:	eea9 9a88 	vfma.f32	s18, s19, s16
 8013c68:	ee70 6a27 	vadd.f32	s13, s0, s15
 8013c6c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8013c70:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8013c74:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8013c78:	eea0 7a26 	vfma.f32	s14, s0, s13
 8013c7c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8013c80:	ee30 0a00 	vadd.f32	s0, s0, s0
 8013c84:	e73e      	b.n	8013b04 <__ieee754_acosf+0x24>
 8013c86:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8013ccc <__ieee754_acosf+0x1ec>
 8013c8a:	e73b      	b.n	8013b04 <__ieee754_acosf+0x24>
 8013c8c:	00000000 	.word	0x00000000
 8013c90:	40490fdb 	.word	0x40490fdb
 8013c94:	3811ef08 	.word	0x3811ef08
 8013c98:	3a4f7f04 	.word	0x3a4f7f04
 8013c9c:	bf303361 	.word	0xbf303361
 8013ca0:	33a22168 	.word	0x33a22168
 8013ca4:	bd241146 	.word	0xbd241146
 8013ca8:	3e4e0aa8 	.word	0x3e4e0aa8
 8013cac:	bea6b090 	.word	0xbea6b090
 8013cb0:	3e2aaaab 	.word	0x3e2aaaab
 8013cb4:	3d9dc62e 	.word	0x3d9dc62e
 8013cb8:	4001572d 	.word	0x4001572d
 8013cbc:	c019d139 	.word	0xc019d139
 8013cc0:	3fc90fda 	.word	0x3fc90fda
 8013cc4:	b3a22168 	.word	0xb3a22168
 8013cc8:	40490fda 	.word	0x40490fda
 8013ccc:	3fc90fdb 	.word	0x3fc90fdb

08013cd0 <__ieee754_rem_pio2f>:
 8013cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013cd2:	ee10 6a10 	vmov	r6, s0
 8013cd6:	4b8e      	ldr	r3, [pc, #568]	; (8013f10 <__ieee754_rem_pio2f+0x240>)
 8013cd8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8013cdc:	429d      	cmp	r5, r3
 8013cde:	b087      	sub	sp, #28
 8013ce0:	eef0 7a40 	vmov.f32	s15, s0
 8013ce4:	4604      	mov	r4, r0
 8013ce6:	dc05      	bgt.n	8013cf4 <__ieee754_rem_pio2f+0x24>
 8013ce8:	2300      	movs	r3, #0
 8013cea:	ed80 0a00 	vstr	s0, [r0]
 8013cee:	6043      	str	r3, [r0, #4]
 8013cf0:	2000      	movs	r0, #0
 8013cf2:	e01a      	b.n	8013d2a <__ieee754_rem_pio2f+0x5a>
 8013cf4:	4b87      	ldr	r3, [pc, #540]	; (8013f14 <__ieee754_rem_pio2f+0x244>)
 8013cf6:	429d      	cmp	r5, r3
 8013cf8:	dc46      	bgt.n	8013d88 <__ieee754_rem_pio2f+0xb8>
 8013cfa:	2e00      	cmp	r6, #0
 8013cfc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8013f18 <__ieee754_rem_pio2f+0x248>
 8013d00:	4b86      	ldr	r3, [pc, #536]	; (8013f1c <__ieee754_rem_pio2f+0x24c>)
 8013d02:	f025 050f 	bic.w	r5, r5, #15
 8013d06:	dd1f      	ble.n	8013d48 <__ieee754_rem_pio2f+0x78>
 8013d08:	429d      	cmp	r5, r3
 8013d0a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013d0e:	d00e      	beq.n	8013d2e <__ieee754_rem_pio2f+0x5e>
 8013d10:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8013f20 <__ieee754_rem_pio2f+0x250>
 8013d14:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8013d18:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013d1c:	ed80 0a00 	vstr	s0, [r0]
 8013d20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013d24:	2001      	movs	r0, #1
 8013d26:	edc4 7a01 	vstr	s15, [r4, #4]
 8013d2a:	b007      	add	sp, #28
 8013d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013d2e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8013f24 <__ieee754_rem_pio2f+0x254>
 8013d32:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8013f28 <__ieee754_rem_pio2f+0x258>
 8013d36:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013d3a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8013d3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013d42:	edc0 6a00 	vstr	s13, [r0]
 8013d46:	e7eb      	b.n	8013d20 <__ieee754_rem_pio2f+0x50>
 8013d48:	429d      	cmp	r5, r3
 8013d4a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013d4e:	d00e      	beq.n	8013d6e <__ieee754_rem_pio2f+0x9e>
 8013d50:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8013f20 <__ieee754_rem_pio2f+0x250>
 8013d54:	ee37 0a87 	vadd.f32	s0, s15, s14
 8013d58:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8013d5c:	ed80 0a00 	vstr	s0, [r0]
 8013d60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013d64:	f04f 30ff 	mov.w	r0, #4294967295
 8013d68:	edc4 7a01 	vstr	s15, [r4, #4]
 8013d6c:	e7dd      	b.n	8013d2a <__ieee754_rem_pio2f+0x5a>
 8013d6e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8013f24 <__ieee754_rem_pio2f+0x254>
 8013d72:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8013f28 <__ieee754_rem_pio2f+0x258>
 8013d76:	ee77 7a80 	vadd.f32	s15, s15, s0
 8013d7a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8013d7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013d82:	edc0 6a00 	vstr	s13, [r0]
 8013d86:	e7eb      	b.n	8013d60 <__ieee754_rem_pio2f+0x90>
 8013d88:	4b68      	ldr	r3, [pc, #416]	; (8013f2c <__ieee754_rem_pio2f+0x25c>)
 8013d8a:	429d      	cmp	r5, r3
 8013d8c:	dc72      	bgt.n	8013e74 <__ieee754_rem_pio2f+0x1a4>
 8013d8e:	f000 fecb 	bl	8014b28 <fabsf>
 8013d92:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8013f30 <__ieee754_rem_pio2f+0x260>
 8013d96:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013d9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013d9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013da2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013da6:	ee17 0a90 	vmov	r0, s15
 8013daa:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8013f18 <__ieee754_rem_pio2f+0x248>
 8013dae:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013db2:	281f      	cmp	r0, #31
 8013db4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8013f20 <__ieee754_rem_pio2f+0x250>
 8013db8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013dbc:	eeb1 6a47 	vneg.f32	s12, s14
 8013dc0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013dc4:	ee16 2a90 	vmov	r2, s13
 8013dc8:	dc1c      	bgt.n	8013e04 <__ieee754_rem_pio2f+0x134>
 8013dca:	495a      	ldr	r1, [pc, #360]	; (8013f34 <__ieee754_rem_pio2f+0x264>)
 8013dcc:	1e47      	subs	r7, r0, #1
 8013dce:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8013dd2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8013dd6:	428b      	cmp	r3, r1
 8013dd8:	d014      	beq.n	8013e04 <__ieee754_rem_pio2f+0x134>
 8013dda:	6022      	str	r2, [r4, #0]
 8013ddc:	ed94 7a00 	vldr	s14, [r4]
 8013de0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013de4:	2e00      	cmp	r6, #0
 8013de6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013dea:	ed84 0a01 	vstr	s0, [r4, #4]
 8013dee:	da9c      	bge.n	8013d2a <__ieee754_rem_pio2f+0x5a>
 8013df0:	eeb1 7a47 	vneg.f32	s14, s14
 8013df4:	eeb1 0a40 	vneg.f32	s0, s0
 8013df8:	ed84 7a00 	vstr	s14, [r4]
 8013dfc:	ed84 0a01 	vstr	s0, [r4, #4]
 8013e00:	4240      	negs	r0, r0
 8013e02:	e792      	b.n	8013d2a <__ieee754_rem_pio2f+0x5a>
 8013e04:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013e08:	15eb      	asrs	r3, r5, #23
 8013e0a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8013e0e:	2d08      	cmp	r5, #8
 8013e10:	dde3      	ble.n	8013dda <__ieee754_rem_pio2f+0x10a>
 8013e12:	eddf 7a44 	vldr	s15, [pc, #272]	; 8013f24 <__ieee754_rem_pio2f+0x254>
 8013e16:	eddf 5a44 	vldr	s11, [pc, #272]	; 8013f28 <__ieee754_rem_pio2f+0x258>
 8013e1a:	eef0 6a40 	vmov.f32	s13, s0
 8013e1e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8013e22:	ee30 0a66 	vsub.f32	s0, s0, s13
 8013e26:	eea6 0a27 	vfma.f32	s0, s12, s15
 8013e2a:	eef0 7a40 	vmov.f32	s15, s0
 8013e2e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013e32:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013e36:	ee15 2a90 	vmov	r2, s11
 8013e3a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013e3e:	1a5b      	subs	r3, r3, r1
 8013e40:	2b19      	cmp	r3, #25
 8013e42:	dc04      	bgt.n	8013e4e <__ieee754_rem_pio2f+0x17e>
 8013e44:	edc4 5a00 	vstr	s11, [r4]
 8013e48:	eeb0 0a66 	vmov.f32	s0, s13
 8013e4c:	e7c6      	b.n	8013ddc <__ieee754_rem_pio2f+0x10c>
 8013e4e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8013f38 <__ieee754_rem_pio2f+0x268>
 8013e52:	eeb0 0a66 	vmov.f32	s0, s13
 8013e56:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013e5a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013e5e:	eddf 6a37 	vldr	s13, [pc, #220]	; 8013f3c <__ieee754_rem_pio2f+0x26c>
 8013e62:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013e66:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013e6a:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013e6e:	ed84 7a00 	vstr	s14, [r4]
 8013e72:	e7b3      	b.n	8013ddc <__ieee754_rem_pio2f+0x10c>
 8013e74:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013e78:	db06      	blt.n	8013e88 <__ieee754_rem_pio2f+0x1b8>
 8013e7a:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013e7e:	edc0 7a01 	vstr	s15, [r0, #4]
 8013e82:	edc0 7a00 	vstr	s15, [r0]
 8013e86:	e733      	b.n	8013cf0 <__ieee754_rem_pio2f+0x20>
 8013e88:	15ea      	asrs	r2, r5, #23
 8013e8a:	3a86      	subs	r2, #134	; 0x86
 8013e8c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013e90:	ee07 3a90 	vmov	s15, r3
 8013e94:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013e98:	eddf 6a29 	vldr	s13, [pc, #164]	; 8013f40 <__ieee754_rem_pio2f+0x270>
 8013e9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013ea0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013ea4:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013ea8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013eac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013eb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013eb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013eb8:	ed8d 7a04 	vstr	s14, [sp, #16]
 8013ebc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013ec0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ec8:	edcd 7a05 	vstr	s15, [sp, #20]
 8013ecc:	d11e      	bne.n	8013f0c <__ieee754_rem_pio2f+0x23c>
 8013ece:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ed6:	bf14      	ite	ne
 8013ed8:	2302      	movne	r3, #2
 8013eda:	2301      	moveq	r3, #1
 8013edc:	4919      	ldr	r1, [pc, #100]	; (8013f44 <__ieee754_rem_pio2f+0x274>)
 8013ede:	9101      	str	r1, [sp, #4]
 8013ee0:	2102      	movs	r1, #2
 8013ee2:	9100      	str	r1, [sp, #0]
 8013ee4:	a803      	add	r0, sp, #12
 8013ee6:	4621      	mov	r1, r4
 8013ee8:	f000 f892 	bl	8014010 <__kernel_rem_pio2f>
 8013eec:	2e00      	cmp	r6, #0
 8013eee:	f6bf af1c 	bge.w	8013d2a <__ieee754_rem_pio2f+0x5a>
 8013ef2:	edd4 7a00 	vldr	s15, [r4]
 8013ef6:	eef1 7a67 	vneg.f32	s15, s15
 8013efa:	edc4 7a00 	vstr	s15, [r4]
 8013efe:	edd4 7a01 	vldr	s15, [r4, #4]
 8013f02:	eef1 7a67 	vneg.f32	s15, s15
 8013f06:	edc4 7a01 	vstr	s15, [r4, #4]
 8013f0a:	e779      	b.n	8013e00 <__ieee754_rem_pio2f+0x130>
 8013f0c:	2303      	movs	r3, #3
 8013f0e:	e7e5      	b.n	8013edc <__ieee754_rem_pio2f+0x20c>
 8013f10:	3f490fd8 	.word	0x3f490fd8
 8013f14:	4016cbe3 	.word	0x4016cbe3
 8013f18:	3fc90f80 	.word	0x3fc90f80
 8013f1c:	3fc90fd0 	.word	0x3fc90fd0
 8013f20:	37354443 	.word	0x37354443
 8013f24:	37354400 	.word	0x37354400
 8013f28:	2e85a308 	.word	0x2e85a308
 8013f2c:	43490f80 	.word	0x43490f80
 8013f30:	3f22f984 	.word	0x3f22f984
 8013f34:	08014f40 	.word	0x08014f40
 8013f38:	2e85a300 	.word	0x2e85a300
 8013f3c:	248d3132 	.word	0x248d3132
 8013f40:	43800000 	.word	0x43800000
 8013f44:	08014fc0 	.word	0x08014fc0

08013f48 <__ieee754_sqrtf>:
 8013f48:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8013f4c:	4770      	bx	lr
	...

08013f50 <__kernel_cosf>:
 8013f50:	ee10 3a10 	vmov	r3, s0
 8013f54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013f58:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8013f5c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013f60:	da05      	bge.n	8013f6e <__kernel_cosf+0x1e>
 8013f62:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013f66:	ee17 2a90 	vmov	r2, s15
 8013f6a:	2a00      	cmp	r2, #0
 8013f6c:	d03d      	beq.n	8013fea <__kernel_cosf+0x9a>
 8013f6e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8013f72:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8013ff0 <__kernel_cosf+0xa0>
 8013f76:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8013ff4 <__kernel_cosf+0xa4>
 8013f7a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8013ff8 <__kernel_cosf+0xa8>
 8013f7e:	4a1f      	ldr	r2, [pc, #124]	; (8013ffc <__kernel_cosf+0xac>)
 8013f80:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013f84:	4293      	cmp	r3, r2
 8013f86:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8014000 <__kernel_cosf+0xb0>
 8013f8a:	eee7 7a25 	vfma.f32	s15, s14, s11
 8013f8e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8014004 <__kernel_cosf+0xb4>
 8013f92:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8013f96:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8014008 <__kernel_cosf+0xb8>
 8013f9a:	eee7 7a25 	vfma.f32	s15, s14, s11
 8013f9e:	eeb0 7a66 	vmov.f32	s14, s13
 8013fa2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8013fa6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8013faa:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8013fae:	ee67 6a25 	vmul.f32	s13, s14, s11
 8013fb2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8013fb6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8013fba:	dc04      	bgt.n	8013fc6 <__kernel_cosf+0x76>
 8013fbc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8013fc0:	ee36 0a47 	vsub.f32	s0, s12, s14
 8013fc4:	4770      	bx	lr
 8013fc6:	4a11      	ldr	r2, [pc, #68]	; (801400c <__kernel_cosf+0xbc>)
 8013fc8:	4293      	cmp	r3, r2
 8013fca:	bfda      	itte	le
 8013fcc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8013fd0:	ee06 3a90 	vmovle	s13, r3
 8013fd4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8013fd8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013fdc:	ee36 0a66 	vsub.f32	s0, s12, s13
 8013fe0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013fe4:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013fe8:	4770      	bx	lr
 8013fea:	eeb0 0a46 	vmov.f32	s0, s12
 8013fee:	4770      	bx	lr
 8013ff0:	ad47d74e 	.word	0xad47d74e
 8013ff4:	310f74f6 	.word	0x310f74f6
 8013ff8:	3d2aaaab 	.word	0x3d2aaaab
 8013ffc:	3e999999 	.word	0x3e999999
 8014000:	b493f27c 	.word	0xb493f27c
 8014004:	37d00d01 	.word	0x37d00d01
 8014008:	bab60b61 	.word	0xbab60b61
 801400c:	3f480000 	.word	0x3f480000

08014010 <__kernel_rem_pio2f>:
 8014010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014014:	ed2d 8b04 	vpush	{d8-d9}
 8014018:	b0d9      	sub	sp, #356	; 0x164
 801401a:	4688      	mov	r8, r1
 801401c:	9002      	str	r0, [sp, #8]
 801401e:	49bb      	ldr	r1, [pc, #748]	; (801430c <__kernel_rem_pio2f+0x2fc>)
 8014020:	9866      	ldr	r0, [sp, #408]	; 0x198
 8014022:	9301      	str	r3, [sp, #4]
 8014024:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8014028:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 801402c:	1e59      	subs	r1, r3, #1
 801402e:	1d13      	adds	r3, r2, #4
 8014030:	db27      	blt.n	8014082 <__kernel_rem_pio2f+0x72>
 8014032:	f1b2 0b03 	subs.w	fp, r2, #3
 8014036:	bf48      	it	mi
 8014038:	f102 0b04 	addmi.w	fp, r2, #4
 801403c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8014040:	1c45      	adds	r5, r0, #1
 8014042:	00ec      	lsls	r4, r5, #3
 8014044:	1a47      	subs	r7, r0, r1
 8014046:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 801431c <__kernel_rem_pio2f+0x30c>
 801404a:	9403      	str	r4, [sp, #12]
 801404c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8014050:	eb0a 0c01 	add.w	ip, sl, r1
 8014054:	ae1c      	add	r6, sp, #112	; 0x70
 8014056:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 801405a:	2400      	movs	r4, #0
 801405c:	4564      	cmp	r4, ip
 801405e:	dd12      	ble.n	8014086 <__kernel_rem_pio2f+0x76>
 8014060:	9b01      	ldr	r3, [sp, #4]
 8014062:	ac1c      	add	r4, sp, #112	; 0x70
 8014064:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8014068:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 801406c:	f04f 0c00 	mov.w	ip, #0
 8014070:	45d4      	cmp	ip, sl
 8014072:	dc27      	bgt.n	80140c4 <__kernel_rem_pio2f+0xb4>
 8014074:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8014078:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801431c <__kernel_rem_pio2f+0x30c>
 801407c:	4627      	mov	r7, r4
 801407e:	2600      	movs	r6, #0
 8014080:	e016      	b.n	80140b0 <__kernel_rem_pio2f+0xa0>
 8014082:	2000      	movs	r0, #0
 8014084:	e7dc      	b.n	8014040 <__kernel_rem_pio2f+0x30>
 8014086:	42e7      	cmn	r7, r4
 8014088:	bf5d      	ittte	pl
 801408a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 801408e:	ee07 3a90 	vmovpl	s15, r3
 8014092:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8014096:	eef0 7a47 	vmovmi.f32	s15, s14
 801409a:	ece6 7a01 	vstmia	r6!, {s15}
 801409e:	3401      	adds	r4, #1
 80140a0:	e7dc      	b.n	801405c <__kernel_rem_pio2f+0x4c>
 80140a2:	ecf9 6a01 	vldmia	r9!, {s13}
 80140a6:	ed97 7a00 	vldr	s14, [r7]
 80140aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80140ae:	3601      	adds	r6, #1
 80140b0:	428e      	cmp	r6, r1
 80140b2:	f1a7 0704 	sub.w	r7, r7, #4
 80140b6:	ddf4      	ble.n	80140a2 <__kernel_rem_pio2f+0x92>
 80140b8:	eceb 7a01 	vstmia	fp!, {s15}
 80140bc:	f10c 0c01 	add.w	ip, ip, #1
 80140c0:	3404      	adds	r4, #4
 80140c2:	e7d5      	b.n	8014070 <__kernel_rem_pio2f+0x60>
 80140c4:	ab08      	add	r3, sp, #32
 80140c6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80140ca:	eddf 8a93 	vldr	s17, [pc, #588]	; 8014318 <__kernel_rem_pio2f+0x308>
 80140ce:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8014314 <__kernel_rem_pio2f+0x304>
 80140d2:	9304      	str	r3, [sp, #16]
 80140d4:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80140d8:	4656      	mov	r6, sl
 80140da:	00b3      	lsls	r3, r6, #2
 80140dc:	9305      	str	r3, [sp, #20]
 80140de:	ab58      	add	r3, sp, #352	; 0x160
 80140e0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80140e4:	ac08      	add	r4, sp, #32
 80140e6:	ab44      	add	r3, sp, #272	; 0x110
 80140e8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80140ec:	46a4      	mov	ip, r4
 80140ee:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80140f2:	4637      	mov	r7, r6
 80140f4:	2f00      	cmp	r7, #0
 80140f6:	f1a0 0004 	sub.w	r0, r0, #4
 80140fa:	dc4f      	bgt.n	801419c <__kernel_rem_pio2f+0x18c>
 80140fc:	4628      	mov	r0, r5
 80140fe:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8014102:	f000 fd61 	bl	8014bc8 <scalbnf>
 8014106:	eeb0 8a40 	vmov.f32	s16, s0
 801410a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801410e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8014112:	f000 fd11 	bl	8014b38 <floorf>
 8014116:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801411a:	eea0 8a67 	vfms.f32	s16, s0, s15
 801411e:	2d00      	cmp	r5, #0
 8014120:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8014124:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8014128:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801412c:	ee17 9a90 	vmov	r9, s15
 8014130:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014134:	dd44      	ble.n	80141c0 <__kernel_rem_pio2f+0x1b0>
 8014136:	f106 3cff 	add.w	ip, r6, #4294967295
 801413a:	ab08      	add	r3, sp, #32
 801413c:	f1c5 0e08 	rsb	lr, r5, #8
 8014140:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8014144:	fa47 f00e 	asr.w	r0, r7, lr
 8014148:	4481      	add	r9, r0
 801414a:	fa00 f00e 	lsl.w	r0, r0, lr
 801414e:	1a3f      	subs	r7, r7, r0
 8014150:	f1c5 0007 	rsb	r0, r5, #7
 8014154:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8014158:	4107      	asrs	r7, r0
 801415a:	2f00      	cmp	r7, #0
 801415c:	dd3f      	ble.n	80141de <__kernel_rem_pio2f+0x1ce>
 801415e:	f04f 0e00 	mov.w	lr, #0
 8014162:	f109 0901 	add.w	r9, r9, #1
 8014166:	4673      	mov	r3, lr
 8014168:	4576      	cmp	r6, lr
 801416a:	dc6b      	bgt.n	8014244 <__kernel_rem_pio2f+0x234>
 801416c:	2d00      	cmp	r5, #0
 801416e:	dd04      	ble.n	801417a <__kernel_rem_pio2f+0x16a>
 8014170:	2d01      	cmp	r5, #1
 8014172:	d078      	beq.n	8014266 <__kernel_rem_pio2f+0x256>
 8014174:	2d02      	cmp	r5, #2
 8014176:	f000 8081 	beq.w	801427c <__kernel_rem_pio2f+0x26c>
 801417a:	2f02      	cmp	r7, #2
 801417c:	d12f      	bne.n	80141de <__kernel_rem_pio2f+0x1ce>
 801417e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014182:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014186:	b353      	cbz	r3, 80141de <__kernel_rem_pio2f+0x1ce>
 8014188:	4628      	mov	r0, r5
 801418a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801418e:	f000 fd1b 	bl	8014bc8 <scalbnf>
 8014192:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8014196:	ee38 8a40 	vsub.f32	s16, s16, s0
 801419a:	e020      	b.n	80141de <__kernel_rem_pio2f+0x1ce>
 801419c:	ee60 7a28 	vmul.f32	s15, s0, s17
 80141a0:	3f01      	subs	r7, #1
 80141a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80141a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80141aa:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80141ae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80141b2:	ecac 0a01 	vstmia	ip!, {s0}
 80141b6:	ed90 0a00 	vldr	s0, [r0]
 80141ba:	ee37 0a80 	vadd.f32	s0, s15, s0
 80141be:	e799      	b.n	80140f4 <__kernel_rem_pio2f+0xe4>
 80141c0:	d105      	bne.n	80141ce <__kernel_rem_pio2f+0x1be>
 80141c2:	1e70      	subs	r0, r6, #1
 80141c4:	ab08      	add	r3, sp, #32
 80141c6:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 80141ca:	11ff      	asrs	r7, r7, #7
 80141cc:	e7c5      	b.n	801415a <__kernel_rem_pio2f+0x14a>
 80141ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80141d2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80141d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141da:	da31      	bge.n	8014240 <__kernel_rem_pio2f+0x230>
 80141dc:	2700      	movs	r7, #0
 80141de:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80141e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141e6:	f040 809b 	bne.w	8014320 <__kernel_rem_pio2f+0x310>
 80141ea:	1e74      	subs	r4, r6, #1
 80141ec:	46a4      	mov	ip, r4
 80141ee:	2000      	movs	r0, #0
 80141f0:	45d4      	cmp	ip, sl
 80141f2:	da4a      	bge.n	801428a <__kernel_rem_pio2f+0x27a>
 80141f4:	2800      	cmp	r0, #0
 80141f6:	d07a      	beq.n	80142ee <__kernel_rem_pio2f+0x2de>
 80141f8:	ab08      	add	r3, sp, #32
 80141fa:	3d08      	subs	r5, #8
 80141fc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014200:	2b00      	cmp	r3, #0
 8014202:	f000 8081 	beq.w	8014308 <__kernel_rem_pio2f+0x2f8>
 8014206:	4628      	mov	r0, r5
 8014208:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801420c:	00a5      	lsls	r5, r4, #2
 801420e:	f000 fcdb 	bl	8014bc8 <scalbnf>
 8014212:	aa44      	add	r2, sp, #272	; 0x110
 8014214:	1d2b      	adds	r3, r5, #4
 8014216:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8014318 <__kernel_rem_pio2f+0x308>
 801421a:	18d1      	adds	r1, r2, r3
 801421c:	4622      	mov	r2, r4
 801421e:	2a00      	cmp	r2, #0
 8014220:	f280 80ae 	bge.w	8014380 <__kernel_rem_pio2f+0x370>
 8014224:	4622      	mov	r2, r4
 8014226:	2a00      	cmp	r2, #0
 8014228:	f2c0 80cc 	blt.w	80143c4 <__kernel_rem_pio2f+0x3b4>
 801422c:	a944      	add	r1, sp, #272	; 0x110
 801422e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8014232:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8014310 <__kernel_rem_pio2f+0x300>
 8014236:	eddf 7a39 	vldr	s15, [pc, #228]	; 801431c <__kernel_rem_pio2f+0x30c>
 801423a:	2000      	movs	r0, #0
 801423c:	1aa1      	subs	r1, r4, r2
 801423e:	e0b6      	b.n	80143ae <__kernel_rem_pio2f+0x39e>
 8014240:	2702      	movs	r7, #2
 8014242:	e78c      	b.n	801415e <__kernel_rem_pio2f+0x14e>
 8014244:	6820      	ldr	r0, [r4, #0]
 8014246:	b94b      	cbnz	r3, 801425c <__kernel_rem_pio2f+0x24c>
 8014248:	b118      	cbz	r0, 8014252 <__kernel_rem_pio2f+0x242>
 801424a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801424e:	6020      	str	r0, [r4, #0]
 8014250:	2001      	movs	r0, #1
 8014252:	f10e 0e01 	add.w	lr, lr, #1
 8014256:	3404      	adds	r4, #4
 8014258:	4603      	mov	r3, r0
 801425a:	e785      	b.n	8014168 <__kernel_rem_pio2f+0x158>
 801425c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8014260:	6020      	str	r0, [r4, #0]
 8014262:	4618      	mov	r0, r3
 8014264:	e7f5      	b.n	8014252 <__kernel_rem_pio2f+0x242>
 8014266:	1e74      	subs	r4, r6, #1
 8014268:	a808      	add	r0, sp, #32
 801426a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801426e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8014272:	f10d 0c20 	add.w	ip, sp, #32
 8014276:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 801427a:	e77e      	b.n	801417a <__kernel_rem_pio2f+0x16a>
 801427c:	1e74      	subs	r4, r6, #1
 801427e:	a808      	add	r0, sp, #32
 8014280:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8014284:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8014288:	e7f3      	b.n	8014272 <__kernel_rem_pio2f+0x262>
 801428a:	ab08      	add	r3, sp, #32
 801428c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8014290:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014294:	4318      	orrs	r0, r3
 8014296:	e7ab      	b.n	80141f0 <__kernel_rem_pio2f+0x1e0>
 8014298:	f10c 0c01 	add.w	ip, ip, #1
 801429c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 80142a0:	2c00      	cmp	r4, #0
 80142a2:	d0f9      	beq.n	8014298 <__kernel_rem_pio2f+0x288>
 80142a4:	9b05      	ldr	r3, [sp, #20]
 80142a6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80142aa:	eb0d 0003 	add.w	r0, sp, r3
 80142ae:	9b01      	ldr	r3, [sp, #4]
 80142b0:	18f4      	adds	r4, r6, r3
 80142b2:	ab1c      	add	r3, sp, #112	; 0x70
 80142b4:	1c77      	adds	r7, r6, #1
 80142b6:	384c      	subs	r0, #76	; 0x4c
 80142b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80142bc:	4466      	add	r6, ip
 80142be:	42be      	cmp	r6, r7
 80142c0:	f6ff af0b 	blt.w	80140da <__kernel_rem_pio2f+0xca>
 80142c4:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 80142c8:	f8dd e008 	ldr.w	lr, [sp, #8]
 80142cc:	ee07 3a90 	vmov	s15, r3
 80142d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80142d4:	f04f 0c00 	mov.w	ip, #0
 80142d8:	ece4 7a01 	vstmia	r4!, {s15}
 80142dc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801431c <__kernel_rem_pio2f+0x30c>
 80142e0:	46a1      	mov	r9, r4
 80142e2:	458c      	cmp	ip, r1
 80142e4:	dd07      	ble.n	80142f6 <__kernel_rem_pio2f+0x2e6>
 80142e6:	ece0 7a01 	vstmia	r0!, {s15}
 80142ea:	3701      	adds	r7, #1
 80142ec:	e7e7      	b.n	80142be <__kernel_rem_pio2f+0x2ae>
 80142ee:	9804      	ldr	r0, [sp, #16]
 80142f0:	f04f 0c01 	mov.w	ip, #1
 80142f4:	e7d2      	b.n	801429c <__kernel_rem_pio2f+0x28c>
 80142f6:	ecfe 6a01 	vldmia	lr!, {s13}
 80142fa:	ed39 7a01 	vldmdb	r9!, {s14}
 80142fe:	f10c 0c01 	add.w	ip, ip, #1
 8014302:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014306:	e7ec      	b.n	80142e2 <__kernel_rem_pio2f+0x2d2>
 8014308:	3c01      	subs	r4, #1
 801430a:	e775      	b.n	80141f8 <__kernel_rem_pio2f+0x1e8>
 801430c:	08015304 	.word	0x08015304
 8014310:	080152d8 	.word	0x080152d8
 8014314:	43800000 	.word	0x43800000
 8014318:	3b800000 	.word	0x3b800000
 801431c:	00000000 	.word	0x00000000
 8014320:	9b03      	ldr	r3, [sp, #12]
 8014322:	eeb0 0a48 	vmov.f32	s0, s16
 8014326:	1a98      	subs	r0, r3, r2
 8014328:	f000 fc4e 	bl	8014bc8 <scalbnf>
 801432c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8014314 <__kernel_rem_pio2f+0x304>
 8014330:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8014334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014338:	db19      	blt.n	801436e <__kernel_rem_pio2f+0x35e>
 801433a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8014318 <__kernel_rem_pio2f+0x308>
 801433e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014342:	aa08      	add	r2, sp, #32
 8014344:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014348:	1c74      	adds	r4, r6, #1
 801434a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801434e:	3508      	adds	r5, #8
 8014350:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014354:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014358:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801435c:	ee10 3a10 	vmov	r3, s0
 8014360:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8014364:	ee17 3a90 	vmov	r3, s15
 8014368:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801436c:	e74b      	b.n	8014206 <__kernel_rem_pio2f+0x1f6>
 801436e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014372:	aa08      	add	r2, sp, #32
 8014374:	ee10 3a10 	vmov	r3, s0
 8014378:	4634      	mov	r4, r6
 801437a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801437e:	e742      	b.n	8014206 <__kernel_rem_pio2f+0x1f6>
 8014380:	a808      	add	r0, sp, #32
 8014382:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8014386:	9001      	str	r0, [sp, #4]
 8014388:	ee07 0a90 	vmov	s15, r0
 801438c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014390:	3a01      	subs	r2, #1
 8014392:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014396:	ee20 0a07 	vmul.f32	s0, s0, s14
 801439a:	ed61 7a01 	vstmdb	r1!, {s15}
 801439e:	e73e      	b.n	801421e <__kernel_rem_pio2f+0x20e>
 80143a0:	ecfc 6a01 	vldmia	ip!, {s13}
 80143a4:	ecb6 7a01 	vldmia	r6!, {s14}
 80143a8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80143ac:	3001      	adds	r0, #1
 80143ae:	4550      	cmp	r0, sl
 80143b0:	dc01      	bgt.n	80143b6 <__kernel_rem_pio2f+0x3a6>
 80143b2:	4288      	cmp	r0, r1
 80143b4:	ddf4      	ble.n	80143a0 <__kernel_rem_pio2f+0x390>
 80143b6:	a858      	add	r0, sp, #352	; 0x160
 80143b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80143bc:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80143c0:	3a01      	subs	r2, #1
 80143c2:	e730      	b.n	8014226 <__kernel_rem_pio2f+0x216>
 80143c4:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80143c6:	2a02      	cmp	r2, #2
 80143c8:	dc09      	bgt.n	80143de <__kernel_rem_pio2f+0x3ce>
 80143ca:	2a00      	cmp	r2, #0
 80143cc:	dc2a      	bgt.n	8014424 <__kernel_rem_pio2f+0x414>
 80143ce:	d043      	beq.n	8014458 <__kernel_rem_pio2f+0x448>
 80143d0:	f009 0007 	and.w	r0, r9, #7
 80143d4:	b059      	add	sp, #356	; 0x164
 80143d6:	ecbd 8b04 	vpop	{d8-d9}
 80143da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143de:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80143e0:	2b03      	cmp	r3, #3
 80143e2:	d1f5      	bne.n	80143d0 <__kernel_rem_pio2f+0x3c0>
 80143e4:	ab30      	add	r3, sp, #192	; 0xc0
 80143e6:	442b      	add	r3, r5
 80143e8:	461a      	mov	r2, r3
 80143ea:	4619      	mov	r1, r3
 80143ec:	4620      	mov	r0, r4
 80143ee:	2800      	cmp	r0, #0
 80143f0:	f1a1 0104 	sub.w	r1, r1, #4
 80143f4:	dc51      	bgt.n	801449a <__kernel_rem_pio2f+0x48a>
 80143f6:	4621      	mov	r1, r4
 80143f8:	2901      	cmp	r1, #1
 80143fa:	f1a2 0204 	sub.w	r2, r2, #4
 80143fe:	dc5c      	bgt.n	80144ba <__kernel_rem_pio2f+0x4aa>
 8014400:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801431c <__kernel_rem_pio2f+0x30c>
 8014404:	3304      	adds	r3, #4
 8014406:	2c01      	cmp	r4, #1
 8014408:	dc67      	bgt.n	80144da <__kernel_rem_pio2f+0x4ca>
 801440a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801440e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8014412:	2f00      	cmp	r7, #0
 8014414:	d167      	bne.n	80144e6 <__kernel_rem_pio2f+0x4d6>
 8014416:	edc8 6a00 	vstr	s13, [r8]
 801441a:	ed88 7a01 	vstr	s14, [r8, #4]
 801441e:	edc8 7a02 	vstr	s15, [r8, #8]
 8014422:	e7d5      	b.n	80143d0 <__kernel_rem_pio2f+0x3c0>
 8014424:	aa30      	add	r2, sp, #192	; 0xc0
 8014426:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 801431c <__kernel_rem_pio2f+0x30c>
 801442a:	4413      	add	r3, r2
 801442c:	4622      	mov	r2, r4
 801442e:	2a00      	cmp	r2, #0
 8014430:	da24      	bge.n	801447c <__kernel_rem_pio2f+0x46c>
 8014432:	b34f      	cbz	r7, 8014488 <__kernel_rem_pio2f+0x478>
 8014434:	eef1 7a47 	vneg.f32	s15, s14
 8014438:	edc8 7a00 	vstr	s15, [r8]
 801443c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8014440:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014444:	aa31      	add	r2, sp, #196	; 0xc4
 8014446:	2301      	movs	r3, #1
 8014448:	429c      	cmp	r4, r3
 801444a:	da20      	bge.n	801448e <__kernel_rem_pio2f+0x47e>
 801444c:	b10f      	cbz	r7, 8014452 <__kernel_rem_pio2f+0x442>
 801444e:	eef1 7a67 	vneg.f32	s15, s15
 8014452:	edc8 7a01 	vstr	s15, [r8, #4]
 8014456:	e7bb      	b.n	80143d0 <__kernel_rem_pio2f+0x3c0>
 8014458:	aa30      	add	r2, sp, #192	; 0xc0
 801445a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 801431c <__kernel_rem_pio2f+0x30c>
 801445e:	4413      	add	r3, r2
 8014460:	2c00      	cmp	r4, #0
 8014462:	da05      	bge.n	8014470 <__kernel_rem_pio2f+0x460>
 8014464:	b10f      	cbz	r7, 801446a <__kernel_rem_pio2f+0x45a>
 8014466:	eef1 7a67 	vneg.f32	s15, s15
 801446a:	edc8 7a00 	vstr	s15, [r8]
 801446e:	e7af      	b.n	80143d0 <__kernel_rem_pio2f+0x3c0>
 8014470:	ed33 7a01 	vldmdb	r3!, {s14}
 8014474:	3c01      	subs	r4, #1
 8014476:	ee77 7a87 	vadd.f32	s15, s15, s14
 801447a:	e7f1      	b.n	8014460 <__kernel_rem_pio2f+0x450>
 801447c:	ed73 7a01 	vldmdb	r3!, {s15}
 8014480:	3a01      	subs	r2, #1
 8014482:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014486:	e7d2      	b.n	801442e <__kernel_rem_pio2f+0x41e>
 8014488:	eef0 7a47 	vmov.f32	s15, s14
 801448c:	e7d4      	b.n	8014438 <__kernel_rem_pio2f+0x428>
 801448e:	ecb2 7a01 	vldmia	r2!, {s14}
 8014492:	3301      	adds	r3, #1
 8014494:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014498:	e7d6      	b.n	8014448 <__kernel_rem_pio2f+0x438>
 801449a:	edd1 7a00 	vldr	s15, [r1]
 801449e:	edd1 6a01 	vldr	s13, [r1, #4]
 80144a2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80144a6:	3801      	subs	r0, #1
 80144a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80144ac:	ed81 7a00 	vstr	s14, [r1]
 80144b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80144b4:	edc1 7a01 	vstr	s15, [r1, #4]
 80144b8:	e799      	b.n	80143ee <__kernel_rem_pio2f+0x3de>
 80144ba:	edd2 7a00 	vldr	s15, [r2]
 80144be:	edd2 6a01 	vldr	s13, [r2, #4]
 80144c2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80144c6:	3901      	subs	r1, #1
 80144c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80144cc:	ed82 7a00 	vstr	s14, [r2]
 80144d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80144d4:	edc2 7a01 	vstr	s15, [r2, #4]
 80144d8:	e78e      	b.n	80143f8 <__kernel_rem_pio2f+0x3e8>
 80144da:	ed33 7a01 	vldmdb	r3!, {s14}
 80144de:	3c01      	subs	r4, #1
 80144e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80144e4:	e78f      	b.n	8014406 <__kernel_rem_pio2f+0x3f6>
 80144e6:	eef1 6a66 	vneg.f32	s13, s13
 80144ea:	eeb1 7a47 	vneg.f32	s14, s14
 80144ee:	edc8 6a00 	vstr	s13, [r8]
 80144f2:	ed88 7a01 	vstr	s14, [r8, #4]
 80144f6:	eef1 7a67 	vneg.f32	s15, s15
 80144fa:	e790      	b.n	801441e <__kernel_rem_pio2f+0x40e>

080144fc <__kernel_sinf>:
 80144fc:	ee10 3a10 	vmov	r3, s0
 8014500:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014504:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8014508:	da04      	bge.n	8014514 <__kernel_sinf+0x18>
 801450a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801450e:	ee17 3a90 	vmov	r3, s15
 8014512:	b35b      	cbz	r3, 801456c <__kernel_sinf+0x70>
 8014514:	ee20 7a00 	vmul.f32	s14, s0, s0
 8014518:	eddf 7a15 	vldr	s15, [pc, #84]	; 8014570 <__kernel_sinf+0x74>
 801451c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8014574 <__kernel_sinf+0x78>
 8014520:	eea7 6a27 	vfma.f32	s12, s14, s15
 8014524:	eddf 7a14 	vldr	s15, [pc, #80]	; 8014578 <__kernel_sinf+0x7c>
 8014528:	eee6 7a07 	vfma.f32	s15, s12, s14
 801452c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801457c <__kernel_sinf+0x80>
 8014530:	eea7 6a87 	vfma.f32	s12, s15, s14
 8014534:	eddf 7a12 	vldr	s15, [pc, #72]	; 8014580 <__kernel_sinf+0x84>
 8014538:	ee60 6a07 	vmul.f32	s13, s0, s14
 801453c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8014540:	b930      	cbnz	r0, 8014550 <__kernel_sinf+0x54>
 8014542:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8014584 <__kernel_sinf+0x88>
 8014546:	eea7 6a27 	vfma.f32	s12, s14, s15
 801454a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801454e:	4770      	bx	lr
 8014550:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8014554:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8014558:	eee0 7a86 	vfma.f32	s15, s1, s12
 801455c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8014560:	eddf 7a09 	vldr	s15, [pc, #36]	; 8014588 <__kernel_sinf+0x8c>
 8014564:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8014568:	ee30 0a60 	vsub.f32	s0, s0, s1
 801456c:	4770      	bx	lr
 801456e:	bf00      	nop
 8014570:	2f2ec9d3 	.word	0x2f2ec9d3
 8014574:	b2d72f34 	.word	0xb2d72f34
 8014578:	3638ef1b 	.word	0x3638ef1b
 801457c:	b9500d01 	.word	0xb9500d01
 8014580:	3c088889 	.word	0x3c088889
 8014584:	be2aaaab 	.word	0xbe2aaaab
 8014588:	3e2aaaab 	.word	0x3e2aaaab

0801458c <__kernel_tanf>:
 801458c:	b508      	push	{r3, lr}
 801458e:	ee10 3a10 	vmov	r3, s0
 8014592:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8014596:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801459a:	eef0 7a40 	vmov.f32	s15, s0
 801459e:	da17      	bge.n	80145d0 <__kernel_tanf+0x44>
 80145a0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80145a4:	ee17 1a10 	vmov	r1, s14
 80145a8:	bb41      	cbnz	r1, 80145fc <__kernel_tanf+0x70>
 80145aa:	1c43      	adds	r3, r0, #1
 80145ac:	4313      	orrs	r3, r2
 80145ae:	d108      	bne.n	80145c2 <__kernel_tanf+0x36>
 80145b0:	f000 faba 	bl	8014b28 <fabsf>
 80145b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80145b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80145bc:	eeb0 0a67 	vmov.f32	s0, s15
 80145c0:	bd08      	pop	{r3, pc}
 80145c2:	2801      	cmp	r0, #1
 80145c4:	d0fa      	beq.n	80145bc <__kernel_tanf+0x30>
 80145c6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80145ca:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80145ce:	e7f5      	b.n	80145bc <__kernel_tanf+0x30>
 80145d0:	494c      	ldr	r1, [pc, #304]	; (8014704 <__kernel_tanf+0x178>)
 80145d2:	428a      	cmp	r2, r1
 80145d4:	db12      	blt.n	80145fc <__kernel_tanf+0x70>
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	bfb8      	it	lt
 80145da:	eef1 7a40 	vneglt.f32	s15, s0
 80145de:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8014708 <__kernel_tanf+0x17c>
 80145e2:	ee70 7a67 	vsub.f32	s15, s0, s15
 80145e6:	ed9f 0a49 	vldr	s0, [pc, #292]	; 801470c <__kernel_tanf+0x180>
 80145ea:	bfb8      	it	lt
 80145ec:	eef1 0a60 	vneglt.f32	s1, s1
 80145f0:	ee70 0a60 	vsub.f32	s1, s0, s1
 80145f4:	ee70 7aa7 	vadd.f32	s15, s1, s15
 80145f8:	eddf 0a45 	vldr	s1, [pc, #276]	; 8014710 <__kernel_tanf+0x184>
 80145fc:	eddf 5a45 	vldr	s11, [pc, #276]	; 8014714 <__kernel_tanf+0x188>
 8014600:	ed9f 6a45 	vldr	s12, [pc, #276]	; 8014718 <__kernel_tanf+0x18c>
 8014604:	ed9f 5a45 	vldr	s10, [pc, #276]	; 801471c <__kernel_tanf+0x190>
 8014608:	493e      	ldr	r1, [pc, #248]	; (8014704 <__kernel_tanf+0x178>)
 801460a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801460e:	428a      	cmp	r2, r1
 8014610:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8014614:	eea7 6a25 	vfma.f32	s12, s14, s11
 8014618:	eddf 5a41 	vldr	s11, [pc, #260]	; 8014720 <__kernel_tanf+0x194>
 801461c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014620:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8014724 <__kernel_tanf+0x198>
 8014624:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014628:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8014728 <__kernel_tanf+0x19c>
 801462c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8014630:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 801472c <__kernel_tanf+0x1a0>
 8014634:	eea5 6a87 	vfma.f32	s12, s11, s14
 8014638:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8014730 <__kernel_tanf+0x1a4>
 801463c:	eee7 5a05 	vfma.f32	s11, s14, s10
 8014640:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8014734 <__kernel_tanf+0x1a8>
 8014644:	eea5 5a87 	vfma.f32	s10, s11, s14
 8014648:	eddf 5a3b 	vldr	s11, [pc, #236]	; 8014738 <__kernel_tanf+0x1ac>
 801464c:	eee5 5a07 	vfma.f32	s11, s10, s14
 8014650:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801473c <__kernel_tanf+0x1b0>
 8014654:	eea5 5a87 	vfma.f32	s10, s11, s14
 8014658:	eddf 5a39 	vldr	s11, [pc, #228]	; 8014740 <__kernel_tanf+0x1b4>
 801465c:	eee5 5a07 	vfma.f32	s11, s10, s14
 8014660:	eeb0 7a46 	vmov.f32	s14, s12
 8014664:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014668:	ee27 5aa6 	vmul.f32	s10, s15, s13
 801466c:	eeb0 6a60 	vmov.f32	s12, s1
 8014670:	eea7 6a05 	vfma.f32	s12, s14, s10
 8014674:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8014744 <__kernel_tanf+0x1b8>
 8014678:	eee6 0a26 	vfma.f32	s1, s12, s13
 801467c:	eee5 0a07 	vfma.f32	s1, s10, s14
 8014680:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8014684:	db1d      	blt.n	80146c2 <__kernel_tanf+0x136>
 8014686:	ee06 0a90 	vmov	s13, r0
 801468a:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 801468e:	ee27 6a07 	vmul.f32	s12, s14, s14
 8014692:	ee37 7a00 	vadd.f32	s14, s14, s0
 8014696:	179b      	asrs	r3, r3, #30
 8014698:	eec6 6a07 	vdiv.f32	s13, s12, s14
 801469c:	f003 0302 	and.w	r3, r3, #2
 80146a0:	f1c3 0301 	rsb	r3, r3, #1
 80146a4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80146a8:	ee76 0ae0 	vsub.f32	s1, s13, s1
 80146ac:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80146b0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80146b4:	ee07 3a90 	vmov	s15, r3
 80146b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80146bc:	ee67 7a80 	vmul.f32	s15, s15, s0
 80146c0:	e77c      	b.n	80145bc <__kernel_tanf+0x30>
 80146c2:	2801      	cmp	r0, #1
 80146c4:	d01b      	beq.n	80146fe <__kernel_tanf+0x172>
 80146c6:	4b20      	ldr	r3, [pc, #128]	; (8014748 <__kernel_tanf+0x1bc>)
 80146c8:	ee17 2a10 	vmov	r2, s14
 80146cc:	401a      	ands	r2, r3
 80146ce:	ee06 2a10 	vmov	s12, r2
 80146d2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80146d6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80146da:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80146de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80146e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80146e6:	ee16 2a90 	vmov	r2, s13
 80146ea:	4013      	ands	r3, r2
 80146ec:	ee07 3a90 	vmov	s15, r3
 80146f0:	eea6 7a27 	vfma.f32	s14, s12, s15
 80146f4:	eea0 7aa7 	vfma.f32	s14, s1, s15
 80146f8:	eee7 7a26 	vfma.f32	s15, s14, s13
 80146fc:	e75e      	b.n	80145bc <__kernel_tanf+0x30>
 80146fe:	eef0 7a47 	vmov.f32	s15, s14
 8014702:	e75b      	b.n	80145bc <__kernel_tanf+0x30>
 8014704:	3f2ca140 	.word	0x3f2ca140
 8014708:	3f490fda 	.word	0x3f490fda
 801470c:	33222168 	.word	0x33222168
 8014710:	00000000 	.word	0x00000000
 8014714:	b79bae5f 	.word	0xb79bae5f
 8014718:	38a3f445 	.word	0x38a3f445
 801471c:	37d95384 	.word	0x37d95384
 8014720:	3a1a26c8 	.word	0x3a1a26c8
 8014724:	3b6b6916 	.word	0x3b6b6916
 8014728:	3cb327a4 	.word	0x3cb327a4
 801472c:	3e088889 	.word	0x3e088889
 8014730:	3895c07a 	.word	0x3895c07a
 8014734:	398137b9 	.word	0x398137b9
 8014738:	3abede48 	.word	0x3abede48
 801473c:	3c11371f 	.word	0x3c11371f
 8014740:	3d5d0dd1 	.word	0x3d5d0dd1
 8014744:	3eaaaaab 	.word	0x3eaaaaab
 8014748:	fffff000 	.word	0xfffff000

0801474c <with_errno>:
 801474c:	b570      	push	{r4, r5, r6, lr}
 801474e:	4604      	mov	r4, r0
 8014750:	460d      	mov	r5, r1
 8014752:	4616      	mov	r6, r2
 8014754:	f7fe fa3e 	bl	8012bd4 <__errno>
 8014758:	4629      	mov	r1, r5
 801475a:	6006      	str	r6, [r0, #0]
 801475c:	4620      	mov	r0, r4
 801475e:	bd70      	pop	{r4, r5, r6, pc}

08014760 <xflow>:
 8014760:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014762:	4614      	mov	r4, r2
 8014764:	461d      	mov	r5, r3
 8014766:	b108      	cbz	r0, 801476c <xflow+0xc>
 8014768:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801476c:	e9cd 2300 	strd	r2, r3, [sp]
 8014770:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014774:	4620      	mov	r0, r4
 8014776:	4629      	mov	r1, r5
 8014778:	f7eb fee2 	bl	8000540 <__aeabi_dmul>
 801477c:	2222      	movs	r2, #34	; 0x22
 801477e:	b003      	add	sp, #12
 8014780:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014784:	f7ff bfe2 	b.w	801474c <with_errno>

08014788 <__math_uflow>:
 8014788:	b508      	push	{r3, lr}
 801478a:	2200      	movs	r2, #0
 801478c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014790:	f7ff ffe6 	bl	8014760 <xflow>
 8014794:	ec41 0b10 	vmov	d0, r0, r1
 8014798:	bd08      	pop	{r3, pc}

0801479a <__math_oflow>:
 801479a:	b508      	push	{r3, lr}
 801479c:	2200      	movs	r2, #0
 801479e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80147a2:	f7ff ffdd 	bl	8014760 <xflow>
 80147a6:	ec41 0b10 	vmov	d0, r0, r1
 80147aa:	bd08      	pop	{r3, pc}
 80147ac:	0000      	movs	r0, r0
	...

080147b0 <atan>:
 80147b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147b4:	ec55 4b10 	vmov	r4, r5, d0
 80147b8:	4bc3      	ldr	r3, [pc, #780]	; (8014ac8 <atan+0x318>)
 80147ba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80147be:	429e      	cmp	r6, r3
 80147c0:	46ab      	mov	fp, r5
 80147c2:	dd18      	ble.n	80147f6 <atan+0x46>
 80147c4:	4bc1      	ldr	r3, [pc, #772]	; (8014acc <atan+0x31c>)
 80147c6:	429e      	cmp	r6, r3
 80147c8:	dc01      	bgt.n	80147ce <atan+0x1e>
 80147ca:	d109      	bne.n	80147e0 <atan+0x30>
 80147cc:	b144      	cbz	r4, 80147e0 <atan+0x30>
 80147ce:	4622      	mov	r2, r4
 80147d0:	462b      	mov	r3, r5
 80147d2:	4620      	mov	r0, r4
 80147d4:	4629      	mov	r1, r5
 80147d6:	f7eb fcfd 	bl	80001d4 <__adddf3>
 80147da:	4604      	mov	r4, r0
 80147dc:	460d      	mov	r5, r1
 80147de:	e006      	b.n	80147ee <atan+0x3e>
 80147e0:	f1bb 0f00 	cmp.w	fp, #0
 80147e4:	f300 8131 	bgt.w	8014a4a <atan+0x29a>
 80147e8:	a59b      	add	r5, pc, #620	; (adr r5, 8014a58 <atan+0x2a8>)
 80147ea:	e9d5 4500 	ldrd	r4, r5, [r5]
 80147ee:	ec45 4b10 	vmov	d0, r4, r5
 80147f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147f6:	4bb6      	ldr	r3, [pc, #728]	; (8014ad0 <atan+0x320>)
 80147f8:	429e      	cmp	r6, r3
 80147fa:	dc14      	bgt.n	8014826 <atan+0x76>
 80147fc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8014800:	429e      	cmp	r6, r3
 8014802:	dc0d      	bgt.n	8014820 <atan+0x70>
 8014804:	a396      	add	r3, pc, #600	; (adr r3, 8014a60 <atan+0x2b0>)
 8014806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801480a:	ee10 0a10 	vmov	r0, s0
 801480e:	4629      	mov	r1, r5
 8014810:	f7eb fce0 	bl	80001d4 <__adddf3>
 8014814:	4baf      	ldr	r3, [pc, #700]	; (8014ad4 <atan+0x324>)
 8014816:	2200      	movs	r2, #0
 8014818:	f7ec f922 	bl	8000a60 <__aeabi_dcmpgt>
 801481c:	2800      	cmp	r0, #0
 801481e:	d1e6      	bne.n	80147ee <atan+0x3e>
 8014820:	f04f 3aff 	mov.w	sl, #4294967295
 8014824:	e02b      	b.n	801487e <atan+0xce>
 8014826:	f000 f963 	bl	8014af0 <fabs>
 801482a:	4bab      	ldr	r3, [pc, #684]	; (8014ad8 <atan+0x328>)
 801482c:	429e      	cmp	r6, r3
 801482e:	ec55 4b10 	vmov	r4, r5, d0
 8014832:	f300 80bf 	bgt.w	80149b4 <atan+0x204>
 8014836:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801483a:	429e      	cmp	r6, r3
 801483c:	f300 80a0 	bgt.w	8014980 <atan+0x1d0>
 8014840:	ee10 2a10 	vmov	r2, s0
 8014844:	ee10 0a10 	vmov	r0, s0
 8014848:	462b      	mov	r3, r5
 801484a:	4629      	mov	r1, r5
 801484c:	f7eb fcc2 	bl	80001d4 <__adddf3>
 8014850:	4ba0      	ldr	r3, [pc, #640]	; (8014ad4 <atan+0x324>)
 8014852:	2200      	movs	r2, #0
 8014854:	f7eb fcbc 	bl	80001d0 <__aeabi_dsub>
 8014858:	2200      	movs	r2, #0
 801485a:	4606      	mov	r6, r0
 801485c:	460f      	mov	r7, r1
 801485e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014862:	4620      	mov	r0, r4
 8014864:	4629      	mov	r1, r5
 8014866:	f7eb fcb5 	bl	80001d4 <__adddf3>
 801486a:	4602      	mov	r2, r0
 801486c:	460b      	mov	r3, r1
 801486e:	4630      	mov	r0, r6
 8014870:	4639      	mov	r1, r7
 8014872:	f7eb ff8f 	bl	8000794 <__aeabi_ddiv>
 8014876:	f04f 0a00 	mov.w	sl, #0
 801487a:	4604      	mov	r4, r0
 801487c:	460d      	mov	r5, r1
 801487e:	4622      	mov	r2, r4
 8014880:	462b      	mov	r3, r5
 8014882:	4620      	mov	r0, r4
 8014884:	4629      	mov	r1, r5
 8014886:	f7eb fe5b 	bl	8000540 <__aeabi_dmul>
 801488a:	4602      	mov	r2, r0
 801488c:	460b      	mov	r3, r1
 801488e:	4680      	mov	r8, r0
 8014890:	4689      	mov	r9, r1
 8014892:	f7eb fe55 	bl	8000540 <__aeabi_dmul>
 8014896:	a374      	add	r3, pc, #464	; (adr r3, 8014a68 <atan+0x2b8>)
 8014898:	e9d3 2300 	ldrd	r2, r3, [r3]
 801489c:	4606      	mov	r6, r0
 801489e:	460f      	mov	r7, r1
 80148a0:	f7eb fe4e 	bl	8000540 <__aeabi_dmul>
 80148a4:	a372      	add	r3, pc, #456	; (adr r3, 8014a70 <atan+0x2c0>)
 80148a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148aa:	f7eb fc93 	bl	80001d4 <__adddf3>
 80148ae:	4632      	mov	r2, r6
 80148b0:	463b      	mov	r3, r7
 80148b2:	f7eb fe45 	bl	8000540 <__aeabi_dmul>
 80148b6:	a370      	add	r3, pc, #448	; (adr r3, 8014a78 <atan+0x2c8>)
 80148b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148bc:	f7eb fc8a 	bl	80001d4 <__adddf3>
 80148c0:	4632      	mov	r2, r6
 80148c2:	463b      	mov	r3, r7
 80148c4:	f7eb fe3c 	bl	8000540 <__aeabi_dmul>
 80148c8:	a36d      	add	r3, pc, #436	; (adr r3, 8014a80 <atan+0x2d0>)
 80148ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148ce:	f7eb fc81 	bl	80001d4 <__adddf3>
 80148d2:	4632      	mov	r2, r6
 80148d4:	463b      	mov	r3, r7
 80148d6:	f7eb fe33 	bl	8000540 <__aeabi_dmul>
 80148da:	a36b      	add	r3, pc, #428	; (adr r3, 8014a88 <atan+0x2d8>)
 80148dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148e0:	f7eb fc78 	bl	80001d4 <__adddf3>
 80148e4:	4632      	mov	r2, r6
 80148e6:	463b      	mov	r3, r7
 80148e8:	f7eb fe2a 	bl	8000540 <__aeabi_dmul>
 80148ec:	a368      	add	r3, pc, #416	; (adr r3, 8014a90 <atan+0x2e0>)
 80148ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148f2:	f7eb fc6f 	bl	80001d4 <__adddf3>
 80148f6:	4642      	mov	r2, r8
 80148f8:	464b      	mov	r3, r9
 80148fa:	f7eb fe21 	bl	8000540 <__aeabi_dmul>
 80148fe:	a366      	add	r3, pc, #408	; (adr r3, 8014a98 <atan+0x2e8>)
 8014900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014904:	4680      	mov	r8, r0
 8014906:	4689      	mov	r9, r1
 8014908:	4630      	mov	r0, r6
 801490a:	4639      	mov	r1, r7
 801490c:	f7eb fe18 	bl	8000540 <__aeabi_dmul>
 8014910:	a363      	add	r3, pc, #396	; (adr r3, 8014aa0 <atan+0x2f0>)
 8014912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014916:	f7eb fc5b 	bl	80001d0 <__aeabi_dsub>
 801491a:	4632      	mov	r2, r6
 801491c:	463b      	mov	r3, r7
 801491e:	f7eb fe0f 	bl	8000540 <__aeabi_dmul>
 8014922:	a361      	add	r3, pc, #388	; (adr r3, 8014aa8 <atan+0x2f8>)
 8014924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014928:	f7eb fc52 	bl	80001d0 <__aeabi_dsub>
 801492c:	4632      	mov	r2, r6
 801492e:	463b      	mov	r3, r7
 8014930:	f7eb fe06 	bl	8000540 <__aeabi_dmul>
 8014934:	a35e      	add	r3, pc, #376	; (adr r3, 8014ab0 <atan+0x300>)
 8014936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801493a:	f7eb fc49 	bl	80001d0 <__aeabi_dsub>
 801493e:	4632      	mov	r2, r6
 8014940:	463b      	mov	r3, r7
 8014942:	f7eb fdfd 	bl	8000540 <__aeabi_dmul>
 8014946:	a35c      	add	r3, pc, #368	; (adr r3, 8014ab8 <atan+0x308>)
 8014948:	e9d3 2300 	ldrd	r2, r3, [r3]
 801494c:	f7eb fc40 	bl	80001d0 <__aeabi_dsub>
 8014950:	4632      	mov	r2, r6
 8014952:	463b      	mov	r3, r7
 8014954:	f7eb fdf4 	bl	8000540 <__aeabi_dmul>
 8014958:	4602      	mov	r2, r0
 801495a:	460b      	mov	r3, r1
 801495c:	4640      	mov	r0, r8
 801495e:	4649      	mov	r1, r9
 8014960:	f7eb fc38 	bl	80001d4 <__adddf3>
 8014964:	4622      	mov	r2, r4
 8014966:	462b      	mov	r3, r5
 8014968:	f7eb fdea 	bl	8000540 <__aeabi_dmul>
 801496c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8014970:	4602      	mov	r2, r0
 8014972:	460b      	mov	r3, r1
 8014974:	d14b      	bne.n	8014a0e <atan+0x25e>
 8014976:	4620      	mov	r0, r4
 8014978:	4629      	mov	r1, r5
 801497a:	f7eb fc29 	bl	80001d0 <__aeabi_dsub>
 801497e:	e72c      	b.n	80147da <atan+0x2a>
 8014980:	ee10 0a10 	vmov	r0, s0
 8014984:	4b53      	ldr	r3, [pc, #332]	; (8014ad4 <atan+0x324>)
 8014986:	2200      	movs	r2, #0
 8014988:	4629      	mov	r1, r5
 801498a:	f7eb fc21 	bl	80001d0 <__aeabi_dsub>
 801498e:	4b51      	ldr	r3, [pc, #324]	; (8014ad4 <atan+0x324>)
 8014990:	4606      	mov	r6, r0
 8014992:	460f      	mov	r7, r1
 8014994:	2200      	movs	r2, #0
 8014996:	4620      	mov	r0, r4
 8014998:	4629      	mov	r1, r5
 801499a:	f7eb fc1b 	bl	80001d4 <__adddf3>
 801499e:	4602      	mov	r2, r0
 80149a0:	460b      	mov	r3, r1
 80149a2:	4630      	mov	r0, r6
 80149a4:	4639      	mov	r1, r7
 80149a6:	f7eb fef5 	bl	8000794 <__aeabi_ddiv>
 80149aa:	f04f 0a01 	mov.w	sl, #1
 80149ae:	4604      	mov	r4, r0
 80149b0:	460d      	mov	r5, r1
 80149b2:	e764      	b.n	801487e <atan+0xce>
 80149b4:	4b49      	ldr	r3, [pc, #292]	; (8014adc <atan+0x32c>)
 80149b6:	429e      	cmp	r6, r3
 80149b8:	da1d      	bge.n	80149f6 <atan+0x246>
 80149ba:	ee10 0a10 	vmov	r0, s0
 80149be:	4b48      	ldr	r3, [pc, #288]	; (8014ae0 <atan+0x330>)
 80149c0:	2200      	movs	r2, #0
 80149c2:	4629      	mov	r1, r5
 80149c4:	f7eb fc04 	bl	80001d0 <__aeabi_dsub>
 80149c8:	4b45      	ldr	r3, [pc, #276]	; (8014ae0 <atan+0x330>)
 80149ca:	4606      	mov	r6, r0
 80149cc:	460f      	mov	r7, r1
 80149ce:	2200      	movs	r2, #0
 80149d0:	4620      	mov	r0, r4
 80149d2:	4629      	mov	r1, r5
 80149d4:	f7eb fdb4 	bl	8000540 <__aeabi_dmul>
 80149d8:	4b3e      	ldr	r3, [pc, #248]	; (8014ad4 <atan+0x324>)
 80149da:	2200      	movs	r2, #0
 80149dc:	f7eb fbfa 	bl	80001d4 <__adddf3>
 80149e0:	4602      	mov	r2, r0
 80149e2:	460b      	mov	r3, r1
 80149e4:	4630      	mov	r0, r6
 80149e6:	4639      	mov	r1, r7
 80149e8:	f7eb fed4 	bl	8000794 <__aeabi_ddiv>
 80149ec:	f04f 0a02 	mov.w	sl, #2
 80149f0:	4604      	mov	r4, r0
 80149f2:	460d      	mov	r5, r1
 80149f4:	e743      	b.n	801487e <atan+0xce>
 80149f6:	462b      	mov	r3, r5
 80149f8:	ee10 2a10 	vmov	r2, s0
 80149fc:	4939      	ldr	r1, [pc, #228]	; (8014ae4 <atan+0x334>)
 80149fe:	2000      	movs	r0, #0
 8014a00:	f7eb fec8 	bl	8000794 <__aeabi_ddiv>
 8014a04:	f04f 0a03 	mov.w	sl, #3
 8014a08:	4604      	mov	r4, r0
 8014a0a:	460d      	mov	r5, r1
 8014a0c:	e737      	b.n	801487e <atan+0xce>
 8014a0e:	4b36      	ldr	r3, [pc, #216]	; (8014ae8 <atan+0x338>)
 8014a10:	4e36      	ldr	r6, [pc, #216]	; (8014aec <atan+0x33c>)
 8014a12:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8014a16:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8014a1a:	e9da 2300 	ldrd	r2, r3, [sl]
 8014a1e:	f7eb fbd7 	bl	80001d0 <__aeabi_dsub>
 8014a22:	4622      	mov	r2, r4
 8014a24:	462b      	mov	r3, r5
 8014a26:	f7eb fbd3 	bl	80001d0 <__aeabi_dsub>
 8014a2a:	4602      	mov	r2, r0
 8014a2c:	460b      	mov	r3, r1
 8014a2e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8014a32:	f7eb fbcd 	bl	80001d0 <__aeabi_dsub>
 8014a36:	f1bb 0f00 	cmp.w	fp, #0
 8014a3a:	4604      	mov	r4, r0
 8014a3c:	460d      	mov	r5, r1
 8014a3e:	f6bf aed6 	bge.w	80147ee <atan+0x3e>
 8014a42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014a46:	461d      	mov	r5, r3
 8014a48:	e6d1      	b.n	80147ee <atan+0x3e>
 8014a4a:	a51d      	add	r5, pc, #116	; (adr r5, 8014ac0 <atan+0x310>)
 8014a4c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014a50:	e6cd      	b.n	80147ee <atan+0x3e>
 8014a52:	bf00      	nop
 8014a54:	f3af 8000 	nop.w
 8014a58:	54442d18 	.word	0x54442d18
 8014a5c:	bff921fb 	.word	0xbff921fb
 8014a60:	8800759c 	.word	0x8800759c
 8014a64:	7e37e43c 	.word	0x7e37e43c
 8014a68:	e322da11 	.word	0xe322da11
 8014a6c:	3f90ad3a 	.word	0x3f90ad3a
 8014a70:	24760deb 	.word	0x24760deb
 8014a74:	3fa97b4b 	.word	0x3fa97b4b
 8014a78:	a0d03d51 	.word	0xa0d03d51
 8014a7c:	3fb10d66 	.word	0x3fb10d66
 8014a80:	c54c206e 	.word	0xc54c206e
 8014a84:	3fb745cd 	.word	0x3fb745cd
 8014a88:	920083ff 	.word	0x920083ff
 8014a8c:	3fc24924 	.word	0x3fc24924
 8014a90:	5555550d 	.word	0x5555550d
 8014a94:	3fd55555 	.word	0x3fd55555
 8014a98:	2c6a6c2f 	.word	0x2c6a6c2f
 8014a9c:	bfa2b444 	.word	0xbfa2b444
 8014aa0:	52defd9a 	.word	0x52defd9a
 8014aa4:	3fadde2d 	.word	0x3fadde2d
 8014aa8:	af749a6d 	.word	0xaf749a6d
 8014aac:	3fb3b0f2 	.word	0x3fb3b0f2
 8014ab0:	fe231671 	.word	0xfe231671
 8014ab4:	3fbc71c6 	.word	0x3fbc71c6
 8014ab8:	9998ebc4 	.word	0x9998ebc4
 8014abc:	3fc99999 	.word	0x3fc99999
 8014ac0:	54442d18 	.word	0x54442d18
 8014ac4:	3ff921fb 	.word	0x3ff921fb
 8014ac8:	440fffff 	.word	0x440fffff
 8014acc:	7ff00000 	.word	0x7ff00000
 8014ad0:	3fdbffff 	.word	0x3fdbffff
 8014ad4:	3ff00000 	.word	0x3ff00000
 8014ad8:	3ff2ffff 	.word	0x3ff2ffff
 8014adc:	40038000 	.word	0x40038000
 8014ae0:	3ff80000 	.word	0x3ff80000
 8014ae4:	bff00000 	.word	0xbff00000
 8014ae8:	08015330 	.word	0x08015330
 8014aec:	08015310 	.word	0x08015310

08014af0 <fabs>:
 8014af0:	ec51 0b10 	vmov	r0, r1, d0
 8014af4:	ee10 2a10 	vmov	r2, s0
 8014af8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014afc:	ec43 2b10 	vmov	d0, r2, r3
 8014b00:	4770      	bx	lr

08014b02 <finite>:
 8014b02:	b082      	sub	sp, #8
 8014b04:	ed8d 0b00 	vstr	d0, [sp]
 8014b08:	9801      	ldr	r0, [sp, #4]
 8014b0a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8014b0e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014b12:	0fc0      	lsrs	r0, r0, #31
 8014b14:	b002      	add	sp, #8
 8014b16:	4770      	bx	lr

08014b18 <nan>:
 8014b18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014b20 <nan+0x8>
 8014b1c:	4770      	bx	lr
 8014b1e:	bf00      	nop
 8014b20:	00000000 	.word	0x00000000
 8014b24:	7ff80000 	.word	0x7ff80000

08014b28 <fabsf>:
 8014b28:	ee10 3a10 	vmov	r3, s0
 8014b2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014b30:	ee00 3a10 	vmov	s0, r3
 8014b34:	4770      	bx	lr
	...

08014b38 <floorf>:
 8014b38:	ee10 3a10 	vmov	r3, s0
 8014b3c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014b40:	3a7f      	subs	r2, #127	; 0x7f
 8014b42:	2a16      	cmp	r2, #22
 8014b44:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014b48:	dc2a      	bgt.n	8014ba0 <floorf+0x68>
 8014b4a:	2a00      	cmp	r2, #0
 8014b4c:	da11      	bge.n	8014b72 <floorf+0x3a>
 8014b4e:	eddf 7a18 	vldr	s15, [pc, #96]	; 8014bb0 <floorf+0x78>
 8014b52:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014b56:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b5e:	dd05      	ble.n	8014b6c <floorf+0x34>
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	da23      	bge.n	8014bac <floorf+0x74>
 8014b64:	4a13      	ldr	r2, [pc, #76]	; (8014bb4 <floorf+0x7c>)
 8014b66:	2900      	cmp	r1, #0
 8014b68:	bf18      	it	ne
 8014b6a:	4613      	movne	r3, r2
 8014b6c:	ee00 3a10 	vmov	s0, r3
 8014b70:	4770      	bx	lr
 8014b72:	4911      	ldr	r1, [pc, #68]	; (8014bb8 <floorf+0x80>)
 8014b74:	4111      	asrs	r1, r2
 8014b76:	420b      	tst	r3, r1
 8014b78:	d0fa      	beq.n	8014b70 <floorf+0x38>
 8014b7a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8014bb0 <floorf+0x78>
 8014b7e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014b82:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b8a:	ddef      	ble.n	8014b6c <floorf+0x34>
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	bfbe      	ittt	lt
 8014b90:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8014b94:	fa40 f202 	asrlt.w	r2, r0, r2
 8014b98:	189b      	addlt	r3, r3, r2
 8014b9a:	ea23 0301 	bic.w	r3, r3, r1
 8014b9e:	e7e5      	b.n	8014b6c <floorf+0x34>
 8014ba0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014ba4:	d3e4      	bcc.n	8014b70 <floorf+0x38>
 8014ba6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014baa:	4770      	bx	lr
 8014bac:	2300      	movs	r3, #0
 8014bae:	e7dd      	b.n	8014b6c <floorf+0x34>
 8014bb0:	7149f2ca 	.word	0x7149f2ca
 8014bb4:	bf800000 	.word	0xbf800000
 8014bb8:	007fffff 	.word	0x007fffff

08014bbc <nanf>:
 8014bbc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014bc4 <nanf+0x8>
 8014bc0:	4770      	bx	lr
 8014bc2:	bf00      	nop
 8014bc4:	7fc00000 	.word	0x7fc00000

08014bc8 <scalbnf>:
 8014bc8:	ee10 3a10 	vmov	r3, s0
 8014bcc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8014bd0:	d025      	beq.n	8014c1e <scalbnf+0x56>
 8014bd2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8014bd6:	d302      	bcc.n	8014bde <scalbnf+0x16>
 8014bd8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8014bdc:	4770      	bx	lr
 8014bde:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8014be2:	d122      	bne.n	8014c2a <scalbnf+0x62>
 8014be4:	4b2a      	ldr	r3, [pc, #168]	; (8014c90 <scalbnf+0xc8>)
 8014be6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8014c94 <scalbnf+0xcc>
 8014bea:	4298      	cmp	r0, r3
 8014bec:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014bf0:	db16      	blt.n	8014c20 <scalbnf+0x58>
 8014bf2:	ee10 3a10 	vmov	r3, s0
 8014bf6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8014bfa:	3a19      	subs	r2, #25
 8014bfc:	4402      	add	r2, r0
 8014bfe:	2afe      	cmp	r2, #254	; 0xfe
 8014c00:	dd15      	ble.n	8014c2e <scalbnf+0x66>
 8014c02:	ee10 3a10 	vmov	r3, s0
 8014c06:	eddf 7a24 	vldr	s15, [pc, #144]	; 8014c98 <scalbnf+0xd0>
 8014c0a:	eddf 6a24 	vldr	s13, [pc, #144]	; 8014c9c <scalbnf+0xd4>
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	eeb0 7a67 	vmov.f32	s14, s15
 8014c14:	bfb8      	it	lt
 8014c16:	eef0 7a66 	vmovlt.f32	s15, s13
 8014c1a:	ee27 0a27 	vmul.f32	s0, s14, s15
 8014c1e:	4770      	bx	lr
 8014c20:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8014ca0 <scalbnf+0xd8>
 8014c24:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014c28:	4770      	bx	lr
 8014c2a:	0dd2      	lsrs	r2, r2, #23
 8014c2c:	e7e6      	b.n	8014bfc <scalbnf+0x34>
 8014c2e:	2a00      	cmp	r2, #0
 8014c30:	dd06      	ble.n	8014c40 <scalbnf+0x78>
 8014c32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014c36:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014c3a:	ee00 3a10 	vmov	s0, r3
 8014c3e:	4770      	bx	lr
 8014c40:	f112 0f16 	cmn.w	r2, #22
 8014c44:	da1a      	bge.n	8014c7c <scalbnf+0xb4>
 8014c46:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014c4a:	4298      	cmp	r0, r3
 8014c4c:	ee10 3a10 	vmov	r3, s0
 8014c50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014c54:	dd0a      	ble.n	8014c6c <scalbnf+0xa4>
 8014c56:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8014c98 <scalbnf+0xd0>
 8014c5a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8014c9c <scalbnf+0xd4>
 8014c5e:	eef0 7a40 	vmov.f32	s15, s0
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	bf18      	it	ne
 8014c66:	eeb0 0a47 	vmovne.f32	s0, s14
 8014c6a:	e7db      	b.n	8014c24 <scalbnf+0x5c>
 8014c6c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8014ca0 <scalbnf+0xd8>
 8014c70:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8014ca4 <scalbnf+0xdc>
 8014c74:	eef0 7a40 	vmov.f32	s15, s0
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	e7f3      	b.n	8014c64 <scalbnf+0x9c>
 8014c7c:	3219      	adds	r2, #25
 8014c7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014c82:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014c86:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014ca8 <scalbnf+0xe0>
 8014c8a:	ee07 3a10 	vmov	s14, r3
 8014c8e:	e7c4      	b.n	8014c1a <scalbnf+0x52>
 8014c90:	ffff3cb0 	.word	0xffff3cb0
 8014c94:	4c000000 	.word	0x4c000000
 8014c98:	7149f2ca 	.word	0x7149f2ca
 8014c9c:	f149f2ca 	.word	0xf149f2ca
 8014ca0:	0da24260 	.word	0x0da24260
 8014ca4:	8da24260 	.word	0x8da24260
 8014ca8:	33000000 	.word	0x33000000

08014cac <_init>:
 8014cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cae:	bf00      	nop
 8014cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014cb2:	bc08      	pop	{r3}
 8014cb4:	469e      	mov	lr, r3
 8014cb6:	4770      	bx	lr

08014cb8 <_fini>:
 8014cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cba:	bf00      	nop
 8014cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014cbe:	bc08      	pop	{r3}
 8014cc0:	469e      	mov	lr, r3
 8014cc2:	4770      	bx	lr
